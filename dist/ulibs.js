(function () {
  'use strict';

  // packages/alpinejs/src/scheduler.js
  var flushPending = false;
  var flushing = false;
  var queue = [];
  var lastFlushedIndex = -1;
  function scheduler(callback) {
    queueJob(callback);
  }
  function queueJob(job) {
    if (!queue.includes(job))
      queue.push(job);
    queueFlush();
  }
  function dequeueJob(job) {
    let index = queue.indexOf(job);
    if (index !== -1 && index > lastFlushedIndex)
      queue.splice(index, 1);
  }
  function queueFlush() {
    if (!flushing && !flushPending) {
      flushPending = true;
      queueMicrotask(flushJobs);
    }
  }
  function flushJobs() {
    flushPending = false;
    flushing = true;
    for (let i = 0; i < queue.length; i++) {
      queue[i]();
      lastFlushedIndex = i;
    }
    queue.length = 0;
    lastFlushedIndex = -1;
    flushing = false;
  }

  // packages/alpinejs/src/reactivity.js
  var reactive;
  var effect;
  var release;
  var raw;
  var shouldSchedule = true;
  function disableEffectScheduling(callback) {
    shouldSchedule = false;
    callback();
    shouldSchedule = true;
  }
  function setReactivityEngine(engine) {
    reactive = engine.reactive;
    release = engine.release;
    effect = (callback) => engine.effect(callback, {scheduler: (task) => {
      if (shouldSchedule) {
        scheduler(task);
      } else {
        task();
      }
    }});
    raw = engine.raw;
  }
  function overrideEffect(override) {
    effect = override;
  }
  function elementBoundEffect(el) {
    let cleanup2 = () => {
    };
    let wrappedEffect = (callback) => {
      let effectReference = effect(callback);
      if (!el._x_effects) {
        el._x_effects = new Set();
        el._x_runEffects = () => {
          el._x_effects.forEach((i) => i());
        };
      }
      el._x_effects.add(effectReference);
      cleanup2 = () => {
        if (effectReference === void 0)
          return;
        el._x_effects.delete(effectReference);
        release(effectReference);
      };
      return effectReference;
    };
    return [wrappedEffect, () => {
      cleanup2();
    }];
  }

  // packages/alpinejs/src/mutation.js
  var onAttributeAddeds = [];
  var onElRemoveds = [];
  var onElAddeds = [];
  function onElAdded(callback) {
    onElAddeds.push(callback);
  }
  function onElRemoved(el, callback) {
    if (typeof callback === "function") {
      if (!el._x_cleanups)
        el._x_cleanups = [];
      el._x_cleanups.push(callback);
    } else {
      callback = el;
      onElRemoveds.push(callback);
    }
  }
  function onAttributesAdded(callback) {
    onAttributeAddeds.push(callback);
  }
  function onAttributeRemoved(el, name, callback) {
    if (!el._x_attributeCleanups)
      el._x_attributeCleanups = {};
    if (!el._x_attributeCleanups[name])
      el._x_attributeCleanups[name] = [];
    el._x_attributeCleanups[name].push(callback);
  }
  function cleanupAttributes(el, names) {
    if (!el._x_attributeCleanups)
      return;
    Object.entries(el._x_attributeCleanups).forEach(([name, value]) => {
      if (names === void 0 || names.includes(name)) {
        value.forEach((i) => i());
        delete el._x_attributeCleanups[name];
      }
    });
  }
  var observer = new MutationObserver(onMutate);
  var currentlyObserving = false;
  function startObservingMutations() {
    observer.observe(document, {subtree: true, childList: true, attributes: true, attributeOldValue: true});
    currentlyObserving = true;
  }
  function stopObservingMutations() {
    flushObserver();
    observer.disconnect();
    currentlyObserving = false;
  }
  var recordQueue = [];
  var willProcessRecordQueue = false;
  function flushObserver() {
    recordQueue = recordQueue.concat(observer.takeRecords());
    if (recordQueue.length && !willProcessRecordQueue) {
      willProcessRecordQueue = true;
      queueMicrotask(() => {
        processRecordQueue();
        willProcessRecordQueue = false;
      });
    }
  }
  function processRecordQueue() {
    onMutate(recordQueue);
    recordQueue.length = 0;
  }
  function mutateDom(callback) {
    if (!currentlyObserving)
      return callback();
    stopObservingMutations();
    let result = callback();
    startObservingMutations();
    return result;
  }
  var isCollecting = false;
  var deferredMutations = [];
  function deferMutations() {
    isCollecting = true;
  }
  function flushAndStopDeferringMutations() {
    isCollecting = false;
    onMutate(deferredMutations);
    deferredMutations = [];
  }
  function onMutate(mutations) {
    if (isCollecting) {
      deferredMutations = deferredMutations.concat(mutations);
      return;
    }
    let addedNodes = [];
    let removedNodes = [];
    let addedAttributes = new Map();
    let removedAttributes = new Map();
    for (let i = 0; i < mutations.length; i++) {
      if (mutations[i].target._x_ignoreMutationObserver)
        continue;
      if (mutations[i].type === "childList") {
        mutations[i].addedNodes.forEach((node) => node.nodeType === 1 && addedNodes.push(node));
        mutations[i].removedNodes.forEach((node) => node.nodeType === 1 && removedNodes.push(node));
      }
      if (mutations[i].type === "attributes") {
        let el = mutations[i].target;
        let name = mutations[i].attributeName;
        let oldValue = mutations[i].oldValue;
        let add2 = () => {
          if (!addedAttributes.has(el))
            addedAttributes.set(el, []);
          addedAttributes.get(el).push({name, value: el.getAttribute(name)});
        };
        let remove = () => {
          if (!removedAttributes.has(el))
            removedAttributes.set(el, []);
          removedAttributes.get(el).push(name);
        };
        if (el.hasAttribute(name) && oldValue === null) {
          add2();
        } else if (el.hasAttribute(name)) {
          remove();
          add2();
        } else {
          remove();
        }
      }
    }
    removedAttributes.forEach((attrs, el) => {
      cleanupAttributes(el, attrs);
    });
    addedAttributes.forEach((attrs, el) => {
      onAttributeAddeds.forEach((i) => i(el, attrs));
    });
    for (let node of removedNodes) {
      if (addedNodes.includes(node))
        continue;
      onElRemoveds.forEach((i) => i(node));
      if (node._x_cleanups) {
        while (node._x_cleanups.length)
          node._x_cleanups.pop()();
      }
    }
    addedNodes.forEach((node) => {
      node._x_ignoreSelf = true;
      node._x_ignore = true;
    });
    for (let node of addedNodes) {
      if (removedNodes.includes(node))
        continue;
      if (!node.isConnected)
        continue;
      delete node._x_ignoreSelf;
      delete node._x_ignore;
      onElAddeds.forEach((i) => i(node));
      node._x_ignore = true;
      node._x_ignoreSelf = true;
    }
    addedNodes.forEach((node) => {
      delete node._x_ignoreSelf;
      delete node._x_ignore;
    });
    addedNodes = null;
    removedNodes = null;
    addedAttributes = null;
    removedAttributes = null;
  }

  // packages/alpinejs/src/scope.js
  function scope(node) {
    return mergeProxies(closestDataStack(node));
  }
  function addScopeToNode(node, data2, referenceNode) {
    node._x_dataStack = [data2, ...closestDataStack(referenceNode || node)];
    return () => {
      node._x_dataStack = node._x_dataStack.filter((i) => i !== data2);
    };
  }
  function closestDataStack(node) {
    if (node._x_dataStack)
      return node._x_dataStack;
    if (typeof ShadowRoot === "function" && node instanceof ShadowRoot) {
      return closestDataStack(node.host);
    }
    if (!node.parentNode) {
      return [];
    }
    return closestDataStack(node.parentNode);
  }
  function mergeProxies(objects) {
    let thisProxy = new Proxy({}, {
      ownKeys: () => {
        return Array.from(new Set(objects.flatMap((i) => Object.keys(i))));
      },
      has: (target, name) => {
        return objects.some((obj) => obj.hasOwnProperty(name));
      },
      get: (target, name) => {
        return (objects.find((obj) => {
          if (obj.hasOwnProperty(name)) {
            let descriptor = Object.getOwnPropertyDescriptor(obj, name);
            if (descriptor.get && descriptor.get._x_alreadyBound || descriptor.set && descriptor.set._x_alreadyBound) {
              return true;
            }
            if ((descriptor.get || descriptor.set) && descriptor.enumerable) {
              let getter = descriptor.get;
              let setter = descriptor.set;
              let property = descriptor;
              getter = getter && getter.bind(thisProxy);
              setter = setter && setter.bind(thisProxy);
              if (getter)
                getter._x_alreadyBound = true;
              if (setter)
                setter._x_alreadyBound = true;
              Object.defineProperty(obj, name, {
                ...property,
                get: getter,
                set: setter
              });
            }
            return true;
          }
          return false;
        }) || {})[name];
      },
      set: (target, name, value) => {
        let closestObjectWithKey = objects.find((obj) => obj.hasOwnProperty(name));
        if (closestObjectWithKey) {
          closestObjectWithKey[name] = value;
        } else {
          objects[objects.length - 1][name] = value;
        }
        return true;
      }
    });
    return thisProxy;
  }

  // packages/alpinejs/src/interceptor.js
  function initInterceptors(data2) {
    let isObject2 = (val) => typeof val === "object" && !Array.isArray(val) && val !== null;
    let recurse = (obj, basePath = "") => {
      Object.entries(Object.getOwnPropertyDescriptors(obj)).forEach(([key, {value, enumerable}]) => {
        if (enumerable === false || value === void 0)
          return;
        let path = basePath === "" ? key : `${basePath}.${key}`;
        if (typeof value === "object" && value !== null && value._x_interceptor) {
          obj[key] = value.initialize(data2, path, key);
        } else {
          if (isObject2(value) && value !== obj && !(value instanceof Element)) {
            recurse(value, path);
          }
        }
      });
    };
    return recurse(data2);
  }
  function interceptor(callback, mutateObj = () => {
  }) {
    let obj = {
      initialValue: void 0,
      _x_interceptor: true,
      initialize(data2, path, key) {
        return callback(this.initialValue, () => get(data2, path), (value) => set(data2, path, value), path, key);
      }
    };
    mutateObj(obj);
    return (initialValue) => {
      if (typeof initialValue === "object" && initialValue !== null && initialValue._x_interceptor) {
        let initialize = obj.initialize.bind(obj);
        obj.initialize = (data2, path, key) => {
          let innerValue = initialValue.initialize(data2, path, key);
          obj.initialValue = innerValue;
          return initialize(data2, path, key);
        };
      } else {
        obj.initialValue = initialValue;
      }
      return obj;
    };
  }
  function get(obj, path) {
    return path.split(".").reduce((carry, segment) => carry[segment], obj);
  }
  function set(obj, path, value) {
    if (typeof path === "string")
      path = path.split(".");
    if (path.length === 1)
      obj[path[0]] = value;
    else if (path.length === 0)
      throw error;
    else {
      if (obj[path[0]])
        return set(obj[path[0]], path.slice(1), value);
      else {
        obj[path[0]] = {};
        return set(obj[path[0]], path.slice(1), value);
      }
    }
  }

  // packages/alpinejs/src/magics.js
  var magics = {};
  function magic(name, callback) {
    magics[name] = callback;
  }
  function injectMagics(obj, el) {
    Object.entries(magics).forEach(([name, callback]) => {
      let memoizedUtilities = null;
      function getUtilities() {
        if (memoizedUtilities) {
          return memoizedUtilities;
        } else {
          let [utilities, cleanup2] = getElementBoundUtilities(el);
          memoizedUtilities = {interceptor, ...utilities};
          onElRemoved(el, cleanup2);
          return memoizedUtilities;
        }
      }
      Object.defineProperty(obj, `$${name}`, {
        get() {
          return callback(el, getUtilities());
        },
        enumerable: false
      });
    });
    return obj;
  }

  // packages/alpinejs/src/utils/error.js
  function tryCatch(el, expression, callback, ...args) {
    try {
      return callback(...args);
    } catch (e) {
      handleError(e, el, expression);
    }
  }
  function handleError(error2, el, expression = void 0) {
    Object.assign(error2, {el, expression});
    console.warn(`Alpine Expression Error: ${error2.message}

${expression ? 'Expression: "' + expression + '"\n\n' : ""}`, el);
    setTimeout(() => {
      throw error2;
    }, 0);
  }

  // packages/alpinejs/src/evaluator.js
  var shouldAutoEvaluateFunctions = true;
  function dontAutoEvaluateFunctions(callback) {
    let cache = shouldAutoEvaluateFunctions;
    shouldAutoEvaluateFunctions = false;
    let result = callback();
    shouldAutoEvaluateFunctions = cache;
    return result;
  }
  function evaluate$1(el, expression, extras = {}) {
    let result;
    evaluateLater(el, expression)((value) => result = value, extras);
    return result;
  }
  function evaluateLater(...args) {
    return theEvaluatorFunction(...args);
  }
  var theEvaluatorFunction = normalEvaluator;
  function setEvaluator(newEvaluator) {
    theEvaluatorFunction = newEvaluator;
  }
  function normalEvaluator(el, expression) {
    let overriddenMagics = {};
    injectMagics(overriddenMagics, el);
    let dataStack = [overriddenMagics, ...closestDataStack(el)];
    let evaluator = typeof expression === "function" ? generateEvaluatorFromFunction(dataStack, expression) : generateEvaluatorFromString(dataStack, expression, el);
    return tryCatch.bind(null, el, expression, evaluator);
  }
  function generateEvaluatorFromFunction(dataStack, func) {
    return (receiver = () => {
    }, {scope: scope2 = {}, params = []} = {}) => {
      let result = func.apply(mergeProxies([scope2, ...dataStack]), params);
      runIfTypeOfFunction(receiver, result);
    };
  }
  var evaluatorMemo = {};
  function generateFunctionFromString(expression, el) {
    if (evaluatorMemo[expression]) {
      return evaluatorMemo[expression];
    }
    let AsyncFunction = Object.getPrototypeOf(async function() {
    }).constructor;
    let rightSideSafeExpression = /^[\n\s]*if.*\(.*\)/.test(expression) || /^(let|const)\s/.test(expression) ? `(async()=>{ ${expression} })()` : expression;
    const safeAsyncFunction = () => {
      try {
        return new AsyncFunction(["__self", "scope"], `with (scope) { __self.result = ${rightSideSafeExpression} }; __self.finished = true; return __self.result;`);
      } catch (error2) {
        handleError(error2, el, expression);
        return Promise.resolve();
      }
    };
    let func = safeAsyncFunction();
    evaluatorMemo[expression] = func;
    return func;
  }
  function generateEvaluatorFromString(dataStack, expression, el) {
    let func = generateFunctionFromString(expression, el);
    return (receiver = () => {
    }, {scope: scope2 = {}, params = []} = {}) => {
      func.result = void 0;
      func.finished = false;
      let completeScope = mergeProxies([scope2, ...dataStack]);
      if (typeof func === "function") {
        let promise = func(func, completeScope).catch((error2) => handleError(error2, el, expression));
        if (func.finished) {
          runIfTypeOfFunction(receiver, func.result, completeScope, params, el);
          func.result = void 0;
        } else {
          promise.then((result) => {
            runIfTypeOfFunction(receiver, result, completeScope, params, el);
          }).catch((error2) => handleError(error2, el, expression)).finally(() => func.result = void 0);
        }
      }
    };
  }
  function runIfTypeOfFunction(receiver, value, scope2, params, el) {
    if (shouldAutoEvaluateFunctions && typeof value === "function") {
      let result = value.apply(scope2, params);
      if (result instanceof Promise) {
        result.then((i) => runIfTypeOfFunction(receiver, i, scope2, params)).catch((error2) => handleError(error2, el, value));
      } else {
        receiver(result);
      }
    } else if (typeof value === "object" && value instanceof Promise) {
      value.then((i) => receiver(i));
    } else {
      receiver(value);
    }
  }

  // packages/alpinejs/src/directives.js
  var prefixAsString = "x-";
  function prefix$1(subject = "") {
    return prefixAsString + subject;
  }
  function setPrefix(newPrefix) {
    prefixAsString = newPrefix;
  }
  var directiveHandlers = {};
  function directive(name, callback) {
    directiveHandlers[name] = callback;
    return {
      before(directive2) {
        if (!directiveHandlers[directive2]) {
          console.warn("Cannot find directive `${directive}`. `${name}` will use the default order of execution");
          return;
        }
        const pos = directiveOrder.indexOf(directive2);
        directiveOrder.splice(pos >= 0 ? pos : directiveOrder.indexOf("DEFAULT"), 0, name);
      }
    };
  }
  function directives(el, attributes, originalAttributeOverride) {
    attributes = Array.from(attributes);
    if (el._x_virtualDirectives) {
      let vAttributes = Object.entries(el._x_virtualDirectives).map(([name, value]) => ({name, value}));
      let staticAttributes = attributesOnly(vAttributes);
      vAttributes = vAttributes.map((attribute) => {
        if (staticAttributes.find((attr) => attr.name === attribute.name)) {
          return {
            name: `x-bind:${attribute.name}`,
            value: `"${attribute.value}"`
          };
        }
        return attribute;
      });
      attributes = attributes.concat(vAttributes);
    }
    let transformedAttributeMap = {};
    let directives2 = attributes.map(toTransformedAttributes((newName, oldName) => transformedAttributeMap[newName] = oldName)).filter(outNonAlpineAttributes).map(toParsedDirectives(transformedAttributeMap, originalAttributeOverride)).sort(byPriority);
    return directives2.map((directive2) => {
      return getDirectiveHandler(el, directive2);
    });
  }
  function attributesOnly(attributes) {
    return Array.from(attributes).map(toTransformedAttributes()).filter((attr) => !outNonAlpineAttributes(attr));
  }
  var isDeferringHandlers = false;
  var directiveHandlerStacks = new Map();
  var currentHandlerStackKey = Symbol();
  function deferHandlingDirectives(callback) {
    isDeferringHandlers = true;
    let key = Symbol();
    currentHandlerStackKey = key;
    directiveHandlerStacks.set(key, []);
    let flushHandlers = () => {
      while (directiveHandlerStacks.get(key).length)
        directiveHandlerStacks.get(key).shift()();
      directiveHandlerStacks.delete(key);
    };
    let stopDeferring = () => {
      isDeferringHandlers = false;
      flushHandlers();
    };
    callback(flushHandlers);
    stopDeferring();
  }
  function getElementBoundUtilities(el) {
    let cleanups = [];
    let cleanup2 = (callback) => cleanups.push(callback);
    let [effect3, cleanupEffect] = elementBoundEffect(el);
    cleanups.push(cleanupEffect);
    let utilities = {
      Alpine: alpine_default,
      effect: effect3,
      cleanup: cleanup2,
      evaluateLater: evaluateLater.bind(evaluateLater, el),
      evaluate: evaluate$1.bind(evaluate$1, el)
    };
    let doCleanup = () => cleanups.forEach((i) => i());
    return [utilities, doCleanup];
  }
  function getDirectiveHandler(el, directive2) {
    let noop = () => {
    };
    let handler4 = directiveHandlers[directive2.type] || noop;
    let [utilities, cleanup2] = getElementBoundUtilities(el);
    onAttributeRemoved(el, directive2.original, cleanup2);
    let fullHandler = () => {
      if (el._x_ignore || el._x_ignoreSelf)
        return;
      handler4.inline && handler4.inline(el, directive2, utilities);
      handler4 = handler4.bind(handler4, el, directive2, utilities);
      isDeferringHandlers ? directiveHandlerStacks.get(currentHandlerStackKey).push(handler4) : handler4();
    };
    fullHandler.runCleanups = cleanup2;
    return fullHandler;
  }
  var startingWith = (subject, replacement) => ({name, value}) => {
    if (name.startsWith(subject))
      name = name.replace(subject, replacement);
    return {name, value};
  };
  var into = (i) => i;
  function toTransformedAttributes(callback = () => {
  }) {
    return ({name, value}) => {
      let {name: newName, value: newValue} = attributeTransformers.reduce((carry, transform) => {
        return transform(carry);
      }, {name, value});
      if (newName !== name)
        callback(newName, name);
      return {name: newName, value: newValue};
    };
  }
  var attributeTransformers = [];
  function mapAttributes(callback) {
    attributeTransformers.push(callback);
  }
  function outNonAlpineAttributes({name}) {
    return alpineAttributeRegex().test(name);
  }
  var alpineAttributeRegex = () => new RegExp(`^${prefixAsString}([^:^.]+)\\b`);
  function toParsedDirectives(transformedAttributeMap, originalAttributeOverride) {
    return ({name, value}) => {
      let typeMatch = name.match(alpineAttributeRegex());
      let valueMatch = name.match(/:([a-zA-Z0-9\-:]+)/);
      let modifiers = name.match(/\.[^.\]]+(?=[^\]]*$)/g) || [];
      let original = originalAttributeOverride || transformedAttributeMap[name] || name;
      return {
        type: typeMatch ? typeMatch[1] : null,
        value: valueMatch ? valueMatch[1] : null,
        modifiers: modifiers.map((i) => i.replace(".", "")),
        expression: value,
        original
      };
    };
  }
  var DEFAULT = "DEFAULT";
  var directiveOrder = [
    "ignore",
    "ref",
    "data",
    "id",
    "bind",
    "init",
    "for",
    "model",
    "modelable",
    "transition",
    "show",
    "if",
    DEFAULT,
    "teleport"
  ];
  function byPriority(a, b) {
    let typeA = directiveOrder.indexOf(a.type) === -1 ? DEFAULT : a.type;
    let typeB = directiveOrder.indexOf(b.type) === -1 ? DEFAULT : b.type;
    return directiveOrder.indexOf(typeA) - directiveOrder.indexOf(typeB);
  }

  // packages/alpinejs/src/utils/dispatch.js
  function dispatch(el, name, detail = {}) {
    el.dispatchEvent(new CustomEvent(name, {
      detail,
      bubbles: true,
      composed: true,
      cancelable: true
    }));
  }

  // packages/alpinejs/src/utils/walk.js
  function walk(el, callback) {
    if (typeof ShadowRoot === "function" && el instanceof ShadowRoot) {
      Array.from(el.children).forEach((el2) => walk(el2, callback));
      return;
    }
    let skip = false;
    callback(el, () => skip = true);
    if (skip)
      return;
    let node = el.firstElementChild;
    while (node) {
      walk(node, callback);
      node = node.nextElementSibling;
    }
  }

  // packages/alpinejs/src/utils/warn.js
  function warn$1(message, ...args) {
    console.warn(`Alpine Warning: ${message}`, ...args);
  }

  // packages/alpinejs/src/lifecycle.js
  var started = false;
  function start() {
    if (started)
      warn$1("Alpine has already been initialized on this page. Calling Alpine.start() more than once can cause problems.");
    started = true;
    if (!document.body)
      warn$1("Unable to initialize. Trying to load Alpine before `<body>` is available. Did you forget to add `defer` in Alpine's `<script>` tag?");
    dispatch(document, "alpine:init");
    dispatch(document, "alpine:initializing");
    startObservingMutations();
    onElAdded((el) => initTree(el, walk));
    onElRemoved((el) => destroyTree(el));
    onAttributesAdded((el, attrs) => {
      directives(el, attrs).forEach((handle) => handle());
    });
    let outNestedComponents = (el) => !closestRoot(el.parentElement, true);
    Array.from(document.querySelectorAll(allSelectors())).filter(outNestedComponents).forEach((el) => {
      initTree(el);
    });
    dispatch(document, "alpine:initialized");
  }
  var rootSelectorCallbacks = [];
  var initSelectorCallbacks = [];
  function rootSelectors() {
    return rootSelectorCallbacks.map((fn) => fn());
  }
  function allSelectors() {
    return rootSelectorCallbacks.concat(initSelectorCallbacks).map((fn) => fn());
  }
  function addRootSelector(selectorCallback) {
    rootSelectorCallbacks.push(selectorCallback);
  }
  function addInitSelector(selectorCallback) {
    initSelectorCallbacks.push(selectorCallback);
  }
  function closestRoot(el, includeInitSelectors = false) {
    return findClosest(el, (element) => {
      const selectors = includeInitSelectors ? allSelectors() : rootSelectors();
      if (selectors.some((selector) => element.matches(selector)))
        return true;
    });
  }
  function findClosest(el, callback) {
    if (!el)
      return;
    if (callback(el))
      return el;
    if (el._x_teleportBack)
      el = el._x_teleportBack;
    if (!el.parentElement)
      return;
    return findClosest(el.parentElement, callback);
  }
  function isRoot(el) {
    return rootSelectors().some((selector) => el.matches(selector));
  }
  var initInterceptors2 = [];
  function interceptInit(callback) {
    initInterceptors2.push(callback);
  }
  function initTree(el, walker = walk, intercept = () => {
  }) {
    deferHandlingDirectives(() => {
      walker(el, (el2, skip) => {
        intercept(el2, skip);
        initInterceptors2.forEach((i) => i(el2, skip));
        directives(el2, el2.attributes).forEach((handle) => handle());
        el2._x_ignore && skip();
      });
    });
  }
  function destroyTree(root) {
    walk(root, (el) => cleanupAttributes(el));
  }

  // packages/alpinejs/src/nextTick.js
  var tickStack = [];
  var isHolding = false;
  function nextTick(callback = () => {
  }) {
    queueMicrotask(() => {
      isHolding || setTimeout(() => {
        releaseNextTicks();
      });
    });
    return new Promise((res) => {
      tickStack.push(() => {
        callback();
        res();
      });
    });
  }
  function releaseNextTicks() {
    isHolding = false;
    while (tickStack.length)
      tickStack.shift()();
  }
  function holdNextTicks() {
    isHolding = true;
  }

  // packages/alpinejs/src/utils/classes.js
  function setClasses(el, value) {
    if (Array.isArray(value)) {
      return setClassesFromString(el, value.join(" "));
    } else if (typeof value === "object" && value !== null) {
      return setClassesFromObject(el, value);
    } else if (typeof value === "function") {
      return setClasses(el, value());
    }
    return setClassesFromString(el, value);
  }
  function setClassesFromString(el, classString) {
    let missingClasses = (classString2) => classString2.split(" ").filter((i) => !el.classList.contains(i)).filter(Boolean);
    let addClassesAndReturnUndo = (classes) => {
      el.classList.add(...classes);
      return () => {
        el.classList.remove(...classes);
      };
    };
    classString = classString === true ? classString = "" : classString || "";
    return addClassesAndReturnUndo(missingClasses(classString));
  }
  function setClassesFromObject(el, classObject) {
    let split = (classString) => classString.split(" ").filter(Boolean);
    let forAdd = Object.entries(classObject).flatMap(([classString, bool]) => bool ? split(classString) : false).filter(Boolean);
    let forRemove = Object.entries(classObject).flatMap(([classString, bool]) => !bool ? split(classString) : false).filter(Boolean);
    let added = [];
    let removed = [];
    forRemove.forEach((i) => {
      if (el.classList.contains(i)) {
        el.classList.remove(i);
        removed.push(i);
      }
    });
    forAdd.forEach((i) => {
      if (!el.classList.contains(i)) {
        el.classList.add(i);
        added.push(i);
      }
    });
    return () => {
      removed.forEach((i) => el.classList.add(i));
      added.forEach((i) => el.classList.remove(i));
    };
  }

  // packages/alpinejs/src/utils/styles.js
  function setStyles(el, value) {
    if (typeof value === "object" && value !== null) {
      return setStylesFromObject(el, value);
    }
    return setStylesFromString(el, value);
  }
  function setStylesFromObject(el, value) {
    let previousStyles = {};
    Object.entries(value).forEach(([key, value2]) => {
      previousStyles[key] = el.style[key];
      if (!key.startsWith("--")) {
        key = kebabCase(key);
      }
      el.style.setProperty(key, value2);
    });
    setTimeout(() => {
      if (el.style.length === 0) {
        el.removeAttribute("style");
      }
    });
    return () => {
      setStyles(el, previousStyles);
    };
  }
  function setStylesFromString(el, value) {
    let cache = el.getAttribute("style", value);
    el.setAttribute("style", value);
    return () => {
      el.setAttribute("style", cache || "");
    };
  }
  function kebabCase(subject) {
    return subject.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
  }

  // packages/alpinejs/src/utils/once.js
  function once(callback, fallback = () => {
  }) {
    let called = false;
    return function() {
      if (!called) {
        called = true;
        callback.apply(this, arguments);
      } else {
        fallback.apply(this, arguments);
      }
    };
  }

  // packages/alpinejs/src/directives/x-transition.js
  directive("transition", (el, {value, modifiers, expression}, {evaluate: evaluate2}) => {
    if (typeof expression === "function")
      expression = evaluate2(expression);
    if (expression === false)
      return;
    if (!expression || typeof expression === "boolean") {
      registerTransitionsFromHelper(el, modifiers, value);
    } else {
      registerTransitionsFromClassString(el, expression, value);
    }
  });
  function registerTransitionsFromClassString(el, classString, stage) {
    registerTransitionObject(el, setClasses, "");
    let directiveStorageMap = {
      enter: (classes) => {
        el._x_transition.enter.during = classes;
      },
      "enter-start": (classes) => {
        el._x_transition.enter.start = classes;
      },
      "enter-end": (classes) => {
        el._x_transition.enter.end = classes;
      },
      leave: (classes) => {
        el._x_transition.leave.during = classes;
      },
      "leave-start": (classes) => {
        el._x_transition.leave.start = classes;
      },
      "leave-end": (classes) => {
        el._x_transition.leave.end = classes;
      }
    };
    directiveStorageMap[stage](classString);
  }
  function registerTransitionsFromHelper(el, modifiers, stage) {
    registerTransitionObject(el, setStyles);
    let doesntSpecify = !modifiers.includes("in") && !modifiers.includes("out") && !stage;
    let transitioningIn = doesntSpecify || modifiers.includes("in") || ["enter"].includes(stage);
    let transitioningOut = doesntSpecify || modifiers.includes("out") || ["leave"].includes(stage);
    if (modifiers.includes("in") && !doesntSpecify) {
      modifiers = modifiers.filter((i, index) => index < modifiers.indexOf("out"));
    }
    if (modifiers.includes("out") && !doesntSpecify) {
      modifiers = modifiers.filter((i, index) => index > modifiers.indexOf("out"));
    }
    let wantsAll = !modifiers.includes("opacity") && !modifiers.includes("scale");
    let wantsOpacity = wantsAll || modifiers.includes("opacity");
    let wantsScale = wantsAll || modifiers.includes("scale");
    let opacityValue = wantsOpacity ? 0 : 1;
    let scaleValue = wantsScale ? modifierValue(modifiers, "scale", 95) / 100 : 1;
    let delay = modifierValue(modifiers, "delay", 0) / 1e3;
    let origin = modifierValue(modifiers, "origin", "center");
    let property = "opacity, transform";
    let durationIn = modifierValue(modifiers, "duration", 150) / 1e3;
    let durationOut = modifierValue(modifiers, "duration", 75) / 1e3;
    let easing = `cubic-bezier(0.4, 0.0, 0.2, 1)`;
    if (transitioningIn) {
      el._x_transition.enter.during = {
        transformOrigin: origin,
        transitionDelay: `${delay}s`,
        transitionProperty: property,
        transitionDuration: `${durationIn}s`,
        transitionTimingFunction: easing
      };
      el._x_transition.enter.start = {
        opacity: opacityValue,
        transform: `scale(${scaleValue})`
      };
      el._x_transition.enter.end = {
        opacity: 1,
        transform: `scale(1)`
      };
    }
    if (transitioningOut) {
      el._x_transition.leave.during = {
        transformOrigin: origin,
        transitionDelay: `${delay}s`,
        transitionProperty: property,
        transitionDuration: `${durationOut}s`,
        transitionTimingFunction: easing
      };
      el._x_transition.leave.start = {
        opacity: 1,
        transform: `scale(1)`
      };
      el._x_transition.leave.end = {
        opacity: opacityValue,
        transform: `scale(${scaleValue})`
      };
    }
  }
  function registerTransitionObject(el, setFunction, defaultValue = {}) {
    if (!el._x_transition)
      el._x_transition = {
        enter: {during: defaultValue, start: defaultValue, end: defaultValue},
        leave: {during: defaultValue, start: defaultValue, end: defaultValue},
        in(before = () => {
        }, after = () => {
        }) {
          transition(el, setFunction, {
            during: this.enter.during,
            start: this.enter.start,
            end: this.enter.end
          }, before, after);
        },
        out(before = () => {
        }, after = () => {
        }) {
          transition(el, setFunction, {
            during: this.leave.during,
            start: this.leave.start,
            end: this.leave.end
          }, before, after);
        }
      };
  }
  window.Element.prototype._x_toggleAndCascadeWithTransitions = function(el, value, show, hide) {
    const nextTick2 = document.visibilityState === "visible" ? requestAnimationFrame : setTimeout;
    let clickAwayCompatibleShow = () => nextTick2(show);
    if (value) {
      if (el._x_transition && (el._x_transition.enter || el._x_transition.leave)) {
        el._x_transition.enter && (Object.entries(el._x_transition.enter.during).length || Object.entries(el._x_transition.enter.start).length || Object.entries(el._x_transition.enter.end).length) ? el._x_transition.in(show) : clickAwayCompatibleShow();
      } else {
        el._x_transition ? el._x_transition.in(show) : clickAwayCompatibleShow();
      }
      return;
    }
    el._x_hidePromise = el._x_transition ? new Promise((resolve, reject) => {
      el._x_transition.out(() => {
      }, () => resolve(hide));
      el._x_transitioning.beforeCancel(() => reject({isFromCancelledTransition: true}));
    }) : Promise.resolve(hide);
    queueMicrotask(() => {
      let closest = closestHide(el);
      if (closest) {
        if (!closest._x_hideChildren)
          closest._x_hideChildren = [];
        closest._x_hideChildren.push(el);
      } else {
        nextTick2(() => {
          let hideAfterChildren = (el2) => {
            let carry = Promise.all([
              el2._x_hidePromise,
              ...(el2._x_hideChildren || []).map(hideAfterChildren)
            ]).then(([i]) => i());
            delete el2._x_hidePromise;
            delete el2._x_hideChildren;
            return carry;
          };
          hideAfterChildren(el).catch((e) => {
            if (!e.isFromCancelledTransition)
              throw e;
          });
        });
      }
    });
  };
  function closestHide(el) {
    let parent = el.parentNode;
    if (!parent)
      return;
    return parent._x_hidePromise ? parent : closestHide(parent);
  }
  function transition(el, setFunction, {during, start: start2, end} = {}, before = () => {
  }, after = () => {
  }) {
    if (el._x_transitioning)
      el._x_transitioning.cancel();
    if (Object.keys(during).length === 0 && Object.keys(start2).length === 0 && Object.keys(end).length === 0) {
      before();
      after();
      return;
    }
    let undoStart, undoDuring, undoEnd;
    performTransition(el, {
      start() {
        undoStart = setFunction(el, start2);
      },
      during() {
        undoDuring = setFunction(el, during);
      },
      before,
      end() {
        undoStart();
        undoEnd = setFunction(el, end);
      },
      after,
      cleanup() {
        undoDuring();
        undoEnd();
      }
    });
  }
  function performTransition(el, stages) {
    let interrupted, reachedBefore, reachedEnd;
    let finish = once(() => {
      mutateDom(() => {
        interrupted = true;
        if (!reachedBefore)
          stages.before();
        if (!reachedEnd) {
          stages.end();
          releaseNextTicks();
        }
        stages.after();
        if (el.isConnected)
          stages.cleanup();
        delete el._x_transitioning;
      });
    });
    el._x_transitioning = {
      beforeCancels: [],
      beforeCancel(callback) {
        this.beforeCancels.push(callback);
      },
      cancel: once(function() {
        while (this.beforeCancels.length) {
          this.beforeCancels.shift()();
        }
        finish();
      }),
      finish
    };
    mutateDom(() => {
      stages.start();
      stages.during();
    });
    holdNextTicks();
    requestAnimationFrame(() => {
      if (interrupted)
        return;
      let duration = Number(getComputedStyle(el).transitionDuration.replace(/,.*/, "").replace("s", "")) * 1e3;
      let delay = Number(getComputedStyle(el).transitionDelay.replace(/,.*/, "").replace("s", "")) * 1e3;
      if (duration === 0)
        duration = Number(getComputedStyle(el).animationDuration.replace("s", "")) * 1e3;
      mutateDom(() => {
        stages.before();
      });
      reachedBefore = true;
      requestAnimationFrame(() => {
        if (interrupted)
          return;
        mutateDom(() => {
          stages.end();
        });
        releaseNextTicks();
        setTimeout(el._x_transitioning.finish, duration + delay);
        reachedEnd = true;
      });
    });
  }
  function modifierValue(modifiers, key, fallback) {
    if (modifiers.indexOf(key) === -1)
      return fallback;
    const rawValue = modifiers[modifiers.indexOf(key) + 1];
    if (!rawValue)
      return fallback;
    if (key === "scale") {
      if (isNaN(rawValue))
        return fallback;
    }
    if (key === "duration" || key === "delay") {
      let match = rawValue.match(/([0-9]+)ms/);
      if (match)
        return match[1];
    }
    if (key === "origin") {
      if (["top", "right", "left", "center", "bottom"].includes(modifiers[modifiers.indexOf(key) + 2])) {
        return [rawValue, modifiers[modifiers.indexOf(key) + 2]].join(" ");
      }
    }
    return rawValue;
  }

  // packages/alpinejs/src/clone.js
  var isCloning = false;
  function skipDuringClone(callback, fallback = () => {
  }) {
    return (...args) => isCloning ? fallback(...args) : callback(...args);
  }
  function onlyDuringClone(callback) {
    return (...args) => isCloning && callback(...args);
  }
  function clone(oldEl, newEl) {
    if (!newEl._x_dataStack)
      newEl._x_dataStack = oldEl._x_dataStack;
    isCloning = true;
    dontRegisterReactiveSideEffects(() => {
      cloneTree(newEl);
    });
    isCloning = false;
  }
  function cloneTree(el) {
    let hasRunThroughFirstEl = false;
    let shallowWalker = (el2, callback) => {
      walk(el2, (el3, skip) => {
        if (hasRunThroughFirstEl && isRoot(el3))
          return skip();
        hasRunThroughFirstEl = true;
        callback(el3, skip);
      });
    };
    initTree(el, shallowWalker);
  }
  function dontRegisterReactiveSideEffects(callback) {
    let cache = effect;
    overrideEffect((callback2, el) => {
      let storedEffect = cache(callback2);
      release(storedEffect);
      return () => {
      };
    });
    callback();
    overrideEffect(cache);
  }

  // packages/alpinejs/src/utils/bind.js
  function bind(el, name, value, modifiers = []) {
    if (!el._x_bindings)
      el._x_bindings = reactive({});
    el._x_bindings[name] = value;
    name = modifiers.includes("camel") ? camelCase(name) : name;
    switch (name) {
      case "value":
        bindInputValue(el, value);
        break;
      case "style":
        bindStyles(el, value);
        break;
      case "class":
        bindClasses(el, value);
        break;
      case "selected":
      case "checked":
        bindAttributeAndProperty(el, name, value);
        break;
      default:
        bindAttribute(el, name, value);
        break;
    }
  }
  function bindInputValue(el, value) {
    if (el.type === "radio") {
      if (el.attributes.value === void 0) {
        el.value = value;
      }
      if (window.fromModel) {
        el.checked = checkedAttrLooseCompare(el.value, value);
      }
    } else if (el.type === "checkbox") {
      if (Number.isInteger(value)) {
        el.value = value;
      } else if (!Number.isInteger(value) && !Array.isArray(value) && typeof value !== "boolean" && ![null, void 0].includes(value)) {
        el.value = String(value);
      } else {
        if (Array.isArray(value)) {
          el.checked = value.some((val) => checkedAttrLooseCompare(val, el.value));
        } else {
          el.checked = !!value;
        }
      }
    } else if (el.tagName === "SELECT") {
      updateSelect(el, value);
    } else {
      if (el.value === value)
        return;
      el.value = value;
    }
  }
  function bindClasses(el, value) {
    if (el._x_undoAddedClasses)
      el._x_undoAddedClasses();
    el._x_undoAddedClasses = setClasses(el, value);
  }
  function bindStyles(el, value) {
    if (el._x_undoAddedStyles)
      el._x_undoAddedStyles();
    el._x_undoAddedStyles = setStyles(el, value);
  }
  function bindAttributeAndProperty(el, name, value) {
    bindAttribute(el, name, value);
    setPropertyIfChanged(el, name, value);
  }
  function bindAttribute(el, name, value) {
    if ([null, void 0, false].includes(value) && attributeShouldntBePreservedIfFalsy(name)) {
      el.removeAttribute(name);
    } else {
      if (isBooleanAttr(name))
        value = name;
      setIfChanged(el, name, value);
    }
  }
  function setIfChanged(el, attrName, value) {
    if (el.getAttribute(attrName) != value) {
      el.setAttribute(attrName, value);
    }
  }
  function setPropertyIfChanged(el, propName, value) {
    if (el[propName] !== value) {
      el[propName] = value;
    }
  }
  function updateSelect(el, value) {
    const arrayWrappedValue = [].concat(value).map((value2) => {
      return value2 + "";
    });
    Array.from(el.options).forEach((option) => {
      option.selected = arrayWrappedValue.includes(option.value);
    });
  }
  function camelCase(subject) {
    return subject.toLowerCase().replace(/-(\w)/g, (match, char) => char.toUpperCase());
  }
  function checkedAttrLooseCompare(valueA, valueB) {
    return valueA == valueB;
  }
  function isBooleanAttr(attrName) {
    const booleanAttributes = [
      "disabled",
      "checked",
      "required",
      "readonly",
      "hidden",
      "open",
      "selected",
      "autofocus",
      "itemscope",
      "multiple",
      "novalidate",
      "allowfullscreen",
      "allowpaymentrequest",
      "formnovalidate",
      "autoplay",
      "controls",
      "loop",
      "muted",
      "playsinline",
      "default",
      "ismap",
      "reversed",
      "async",
      "defer",
      "nomodule"
    ];
    return booleanAttributes.includes(attrName);
  }
  function attributeShouldntBePreservedIfFalsy(name) {
    return !["aria-pressed", "aria-checked", "aria-expanded", "aria-selected"].includes(name);
  }
  function getBinding(el, name, fallback) {
    if (el._x_bindings && el._x_bindings[name] !== void 0)
      return el._x_bindings[name];
    return getAttributeBinding(el, name, fallback);
  }
  function extractProp(el, name, fallback, extract = true) {
    if (el._x_bindings && el._x_bindings[name] !== void 0)
      return el._x_bindings[name];
    if (el._x_inlineBindings && el._x_inlineBindings[name] !== void 0) {
      let binding = el._x_inlineBindings[name];
      binding.extract = extract;
      return dontAutoEvaluateFunctions(() => {
        return evaluate$1(el, binding.expression);
      });
    }
    return getAttributeBinding(el, name, fallback);
  }
  function getAttributeBinding(el, name, fallback) {
    let attr = el.getAttribute(name);
    if (attr === null)
      return typeof fallback === "function" ? fallback() : fallback;
    if (attr === "")
      return true;
    if (isBooleanAttr(name)) {
      return !![name, "true"].includes(attr);
    }
    return attr;
  }

  // packages/alpinejs/src/utils/debounce.js
  function debounce(func, wait) {
    var timeout;
    return function() {
      var context = this, args = arguments;
      var later = function() {
        timeout = null;
        func.apply(context, args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }

  // packages/alpinejs/src/utils/throttle.js
  function throttle(func, limit) {
    let inThrottle;
    return function() {
      let context = this, args = arguments;
      if (!inThrottle) {
        func.apply(context, args);
        inThrottle = true;
        setTimeout(() => inThrottle = false, limit);
      }
    };
  }

  // packages/alpinejs/src/plugin.js
  function plugin(callback) {
    let callbacks = Array.isArray(callback) ? callback : [callback];
    callbacks.forEach((i) => i(alpine_default));
  }

  // packages/alpinejs/src/store.js
  var stores = {};
  var isReactive = false;
  function store(name, value) {
    if (!isReactive) {
      stores = reactive(stores);
      isReactive = true;
    }
    if (value === void 0) {
      return stores[name];
    }
    stores[name] = value;
    if (typeof value === "object" && value !== null && value.hasOwnProperty("init") && typeof value.init === "function") {
      stores[name].init();
    }
    initInterceptors(stores[name]);
  }
  function getStores() {
    return stores;
  }

  // packages/alpinejs/src/binds.js
  var binds = {};
  function bind2(name, bindings) {
    let getBindings = typeof bindings !== "function" ? () => bindings : bindings;
    if (name instanceof Element) {
      applyBindingsObject(name, getBindings());
    } else {
      binds[name] = getBindings;
    }
  }
  function injectBindingProviders(obj) {
    Object.entries(binds).forEach(([name, callback]) => {
      Object.defineProperty(obj, name, {
        get() {
          return (...args) => {
            return callback(...args);
          };
        }
      });
    });
    return obj;
  }
  function applyBindingsObject(el, obj, original) {
    let cleanupRunners = [];
    while (cleanupRunners.length)
      cleanupRunners.pop()();
    let attributes = Object.entries(obj).map(([name, value]) => ({name, value}));
    let staticAttributes = attributesOnly(attributes);
    attributes = attributes.map((attribute) => {
      if (staticAttributes.find((attr) => attr.name === attribute.name)) {
        return {
          name: `x-bind:${attribute.name}`,
          value: `"${attribute.value}"`
        };
      }
      return attribute;
    });
    directives(el, attributes, original).map((handle) => {
      cleanupRunners.push(handle.runCleanups);
      handle();
    });
  }

  // packages/alpinejs/src/datas.js
  var datas = {};
  function data(name, callback) {
    datas[name] = callback;
  }
  function injectDataProviders(obj, context) {
    Object.entries(datas).forEach(([name, callback]) => {
      Object.defineProperty(obj, name, {
        get() {
          return (...args) => {
            return callback.bind(context)(...args);
          };
        },
        enumerable: false
      });
    });
    return obj;
  }

  // packages/alpinejs/src/alpine.js
  var Alpine = {
    get reactive() {
      return reactive;
    },
    get release() {
      return release;
    },
    get effect() {
      return effect;
    },
    get raw() {
      return raw;
    },
    version: "3.12.3",
    flushAndStopDeferringMutations,
    dontAutoEvaluateFunctions,
    disableEffectScheduling,
    startObservingMutations,
    stopObservingMutations,
    setReactivityEngine,
    closestDataStack,
    skipDuringClone,
    onlyDuringClone,
    addRootSelector,
    addInitSelector,
    addScopeToNode,
    deferMutations,
    mapAttributes,
    evaluateLater,
    interceptInit,
    setEvaluator,
    mergeProxies,
    extractProp,
    findClosest,
    closestRoot,
    destroyTree,
    interceptor,
    transition,
    setStyles,
    mutateDom,
    directive,
    throttle,
    debounce,
    evaluate: evaluate$1,
    initTree,
    nextTick,
    prefixed: prefix$1,
    prefix: setPrefix,
    plugin,
    magic,
    store,
    start,
    clone,
    bound: getBinding,
    $data: scope,
    walk,
    data,
    bind: bind2
  };
  var alpine_default = Alpine;

  // node_modules/@vue/shared/dist/shared.esm-bundler.js
  function makeMap(str, expectsLowerCase) {
    const map = Object.create(null);
    const list = str.split(",");
    for (let i = 0; i < list.length; i++) {
      map[list[i]] = true;
    }
    return expectsLowerCase ? (val) => !!map[val.toLowerCase()] : (val) => !!map[val];
  }
  var EMPTY_OBJ = Object.freeze({}) ;
  var extend = Object.assign;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var hasOwn = (val, key) => hasOwnProperty.call(val, key);
  var isArray = Array.isArray;
  var isMap = (val) => toTypeString(val) === "[object Map]";
  var isString = (val) => typeof val === "string";
  var isSymbol = (val) => typeof val === "symbol";
  var isObject = (val) => val !== null && typeof val === "object";
  var objectToString = Object.prototype.toString;
  var toTypeString = (value) => objectToString.call(value);
  var toRawType = (value) => {
    return toTypeString(value).slice(8, -1);
  };
  var isIntegerKey = (key) => isString(key) && key !== "NaN" && key[0] !== "-" && "" + parseInt(key, 10) === key;
  var cacheStringFunction = (fn) => {
    const cache = Object.create(null);
    return (str) => {
      const hit = cache[str];
      return hit || (cache[str] = fn(str));
    };
  };
  var capitalize = cacheStringFunction((str) => str.charAt(0).toUpperCase() + str.slice(1));
  var hasChanged = (value, oldValue) => value !== oldValue && (value === value || oldValue === oldValue);

  // node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js
  var targetMap = new WeakMap();
  var effectStack = [];
  var activeEffect;
  var ITERATE_KEY = Symbol("iterate" );
  var MAP_KEY_ITERATE_KEY = Symbol("Map key iterate" );
  function isEffect(fn) {
    return fn && fn._isEffect === true;
  }
  function effect2(fn, options = EMPTY_OBJ) {
    if (isEffect(fn)) {
      fn = fn.raw;
    }
    const effect3 = createReactiveEffect(fn, options);
    if (!options.lazy) {
      effect3();
    }
    return effect3;
  }
  function stop(effect3) {
    if (effect3.active) {
      cleanup(effect3);
      if (effect3.options.onStop) {
        effect3.options.onStop();
      }
      effect3.active = false;
    }
  }
  var uid = 0;
  function createReactiveEffect(fn, options) {
    const effect3 = function reactiveEffect() {
      if (!effect3.active) {
        return fn();
      }
      if (!effectStack.includes(effect3)) {
        cleanup(effect3);
        try {
          enableTracking();
          effectStack.push(effect3);
          activeEffect = effect3;
          return fn();
        } finally {
          effectStack.pop();
          resetTracking();
          activeEffect = effectStack[effectStack.length - 1];
        }
      }
    };
    effect3.id = uid++;
    effect3.allowRecurse = !!options.allowRecurse;
    effect3._isEffect = true;
    effect3.active = true;
    effect3.raw = fn;
    effect3.deps = [];
    effect3.options = options;
    return effect3;
  }
  function cleanup(effect3) {
    const {deps} = effect3;
    if (deps.length) {
      for (let i = 0; i < deps.length; i++) {
        deps[i].delete(effect3);
      }
      deps.length = 0;
    }
  }
  var shouldTrack = true;
  var trackStack = [];
  function pauseTracking() {
    trackStack.push(shouldTrack);
    shouldTrack = false;
  }
  function enableTracking() {
    trackStack.push(shouldTrack);
    shouldTrack = true;
  }
  function resetTracking() {
    const last = trackStack.pop();
    shouldTrack = last === void 0 ? true : last;
  }
  function track(target, type, key) {
    if (!shouldTrack || activeEffect === void 0) {
      return;
    }
    let depsMap = targetMap.get(target);
    if (!depsMap) {
      targetMap.set(target, depsMap = new Map());
    }
    let dep = depsMap.get(key);
    if (!dep) {
      depsMap.set(key, dep = new Set());
    }
    if (!dep.has(activeEffect)) {
      dep.add(activeEffect);
      activeEffect.deps.push(dep);
      if (activeEffect.options.onTrack) {
        activeEffect.options.onTrack({
          effect: activeEffect,
          target,
          type,
          key
        });
      }
    }
  }
  function trigger(target, type, key, newValue, oldValue, oldTarget) {
    const depsMap = targetMap.get(target);
    if (!depsMap) {
      return;
    }
    const effects = new Set();
    const add2 = (effectsToAdd) => {
      if (effectsToAdd) {
        effectsToAdd.forEach((effect3) => {
          if (effect3 !== activeEffect || effect3.allowRecurse) {
            effects.add(effect3);
          }
        });
      }
    };
    if (type === "clear") {
      depsMap.forEach(add2);
    } else if (key === "length" && isArray(target)) {
      depsMap.forEach((dep, key2) => {
        if (key2 === "length" || key2 >= newValue) {
          add2(dep);
        }
      });
    } else {
      if (key !== void 0) {
        add2(depsMap.get(key));
      }
      switch (type) {
        case "add":
          if (!isArray(target)) {
            add2(depsMap.get(ITERATE_KEY));
            if (isMap(target)) {
              add2(depsMap.get(MAP_KEY_ITERATE_KEY));
            }
          } else if (isIntegerKey(key)) {
            add2(depsMap.get("length"));
          }
          break;
        case "delete":
          if (!isArray(target)) {
            add2(depsMap.get(ITERATE_KEY));
            if (isMap(target)) {
              add2(depsMap.get(MAP_KEY_ITERATE_KEY));
            }
          }
          break;
        case "set":
          if (isMap(target)) {
            add2(depsMap.get(ITERATE_KEY));
          }
          break;
      }
    }
    const run = (effect3) => {
      if (effect3.options.onTrigger) {
        effect3.options.onTrigger({
          effect: effect3,
          target,
          key,
          type,
          newValue,
          oldValue,
          oldTarget
        });
      }
      if (effect3.options.scheduler) {
        effect3.options.scheduler(effect3);
      } else {
        effect3();
      }
    };
    effects.forEach(run);
  }
  var isNonTrackableKeys = /* @__PURE__ */ makeMap(`__proto__,__v_isRef,__isVue`);
  var builtInSymbols = new Set(Object.getOwnPropertyNames(Symbol).map((key) => Symbol[key]).filter(isSymbol));
  var get2 = /* @__PURE__ */ createGetter();
  var shallowGet = /* @__PURE__ */ createGetter(false, true);
  var readonlyGet = /* @__PURE__ */ createGetter(true);
  var shallowReadonlyGet = /* @__PURE__ */ createGetter(true, true);
  var arrayInstrumentations = {};
  ["includes", "indexOf", "lastIndexOf"].forEach((key) => {
    const method = Array.prototype[key];
    arrayInstrumentations[key] = function(...args) {
      const arr = toRaw(this);
      for (let i = 0, l = this.length; i < l; i++) {
        track(arr, "get", i + "");
      }
      const res = method.apply(arr, args);
      if (res === -1 || res === false) {
        return method.apply(arr, args.map(toRaw));
      } else {
        return res;
      }
    };
  });
  ["push", "pop", "shift", "unshift", "splice"].forEach((key) => {
    const method = Array.prototype[key];
    arrayInstrumentations[key] = function(...args) {
      pauseTracking();
      const res = method.apply(this, args);
      resetTracking();
      return res;
    };
  });
  function createGetter(isReadonly = false, shallow = false) {
    return function get3(target, key, receiver) {
      if (key === "__v_isReactive") {
        return !isReadonly;
      } else if (key === "__v_isReadonly") {
        return isReadonly;
      } else if (key === "__v_raw" && receiver === (isReadonly ? shallow ? shallowReadonlyMap : readonlyMap : shallow ? shallowReactiveMap : reactiveMap).get(target)) {
        return target;
      }
      const targetIsArray = isArray(target);
      if (!isReadonly && targetIsArray && hasOwn(arrayInstrumentations, key)) {
        return Reflect.get(arrayInstrumentations, key, receiver);
      }
      const res = Reflect.get(target, key, receiver);
      if (isSymbol(key) ? builtInSymbols.has(key) : isNonTrackableKeys(key)) {
        return res;
      }
      if (!isReadonly) {
        track(target, "get", key);
      }
      if (shallow) {
        return res;
      }
      if (isRef(res)) {
        const shouldUnwrap = !targetIsArray || !isIntegerKey(key);
        return shouldUnwrap ? res.value : res;
      }
      if (isObject(res)) {
        return isReadonly ? readonly(res) : reactive2(res);
      }
      return res;
    };
  }
  var set2 = /* @__PURE__ */ createSetter();
  var shallowSet = /* @__PURE__ */ createSetter(true);
  function createSetter(shallow = false) {
    return function set3(target, key, value, receiver) {
      let oldValue = target[key];
      if (!shallow) {
        value = toRaw(value);
        oldValue = toRaw(oldValue);
        if (!isArray(target) && isRef(oldValue) && !isRef(value)) {
          oldValue.value = value;
          return true;
        }
      }
      const hadKey = isArray(target) && isIntegerKey(key) ? Number(key) < target.length : hasOwn(target, key);
      const result = Reflect.set(target, key, value, receiver);
      if (target === toRaw(receiver)) {
        if (!hadKey) {
          trigger(target, "add", key, value);
        } else if (hasChanged(value, oldValue)) {
          trigger(target, "set", key, value, oldValue);
        }
      }
      return result;
    };
  }
  function deleteProperty(target, key) {
    const hadKey = hasOwn(target, key);
    const oldValue = target[key];
    const result = Reflect.deleteProperty(target, key);
    if (result && hadKey) {
      trigger(target, "delete", key, void 0, oldValue);
    }
    return result;
  }
  function has(target, key) {
    const result = Reflect.has(target, key);
    if (!isSymbol(key) || !builtInSymbols.has(key)) {
      track(target, "has", key);
    }
    return result;
  }
  function ownKeys(target) {
    track(target, "iterate", isArray(target) ? "length" : ITERATE_KEY);
    return Reflect.ownKeys(target);
  }
  var mutableHandlers = {
    get: get2,
    set: set2,
    deleteProperty,
    has,
    ownKeys
  };
  var readonlyHandlers = {
    get: readonlyGet,
    set(target, key) {
      {
        console.warn(`Set operation on key "${String(key)}" failed: target is readonly.`, target);
      }
      return true;
    },
    deleteProperty(target, key) {
      {
        console.warn(`Delete operation on key "${String(key)}" failed: target is readonly.`, target);
      }
      return true;
    }
  };
  extend({}, mutableHandlers, {
    get: shallowGet,
    set: shallowSet
  });
  extend({}, readonlyHandlers, {
    get: shallowReadonlyGet
  });
  var toReactive = (value) => isObject(value) ? reactive2(value) : value;
  var toReadonly = (value) => isObject(value) ? readonly(value) : value;
  var toShallow = (value) => value;
  var getProto = (v) => Reflect.getPrototypeOf(v);
  function get$1(target, key, isReadonly = false, isShallow = false) {
    target = target["__v_raw"];
    const rawTarget = toRaw(target);
    const rawKey = toRaw(key);
    if (key !== rawKey) {
      !isReadonly && track(rawTarget, "get", key);
    }
    !isReadonly && track(rawTarget, "get", rawKey);
    const {has: has2} = getProto(rawTarget);
    const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;
    if (has2.call(rawTarget, key)) {
      return wrap(target.get(key));
    } else if (has2.call(rawTarget, rawKey)) {
      return wrap(target.get(rawKey));
    } else if (target !== rawTarget) {
      target.get(key);
    }
  }
  function has$1(key, isReadonly = false) {
    const target = this["__v_raw"];
    const rawTarget = toRaw(target);
    const rawKey = toRaw(key);
    if (key !== rawKey) {
      !isReadonly && track(rawTarget, "has", key);
    }
    !isReadonly && track(rawTarget, "has", rawKey);
    return key === rawKey ? target.has(key) : target.has(key) || target.has(rawKey);
  }
  function size(target, isReadonly = false) {
    target = target["__v_raw"];
    !isReadonly && track(toRaw(target), "iterate", ITERATE_KEY);
    return Reflect.get(target, "size", target);
  }
  function add(value) {
    value = toRaw(value);
    const target = toRaw(this);
    const proto = getProto(target);
    const hadKey = proto.has.call(target, value);
    if (!hadKey) {
      target.add(value);
      trigger(target, "add", value, value);
    }
    return this;
  }
  function set$1(key, value) {
    value = toRaw(value);
    const target = toRaw(this);
    const {has: has2, get: get3} = getProto(target);
    let hadKey = has2.call(target, key);
    if (!hadKey) {
      key = toRaw(key);
      hadKey = has2.call(target, key);
    } else {
      checkIdentityKeys(target, has2, key);
    }
    const oldValue = get3.call(target, key);
    target.set(key, value);
    if (!hadKey) {
      trigger(target, "add", key, value);
    } else if (hasChanged(value, oldValue)) {
      trigger(target, "set", key, value, oldValue);
    }
    return this;
  }
  function deleteEntry(key) {
    const target = toRaw(this);
    const {has: has2, get: get3} = getProto(target);
    let hadKey = has2.call(target, key);
    if (!hadKey) {
      key = toRaw(key);
      hadKey = has2.call(target, key);
    } else {
      checkIdentityKeys(target, has2, key);
    }
    const oldValue = get3 ? get3.call(target, key) : void 0;
    const result = target.delete(key);
    if (hadKey) {
      trigger(target, "delete", key, void 0, oldValue);
    }
    return result;
  }
  function clear() {
    const target = toRaw(this);
    const hadItems = target.size !== 0;
    const oldTarget = isMap(target) ? new Map(target) : new Set(target) ;
    const result = target.clear();
    if (hadItems) {
      trigger(target, "clear", void 0, void 0, oldTarget);
    }
    return result;
  }
  function createForEach(isReadonly, isShallow) {
    return function forEach(callback, thisArg) {
      const observed = this;
      const target = observed["__v_raw"];
      const rawTarget = toRaw(target);
      const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;
      !isReadonly && track(rawTarget, "iterate", ITERATE_KEY);
      return target.forEach((value, key) => {
        return callback.call(thisArg, wrap(value), wrap(key), observed);
      });
    };
  }
  function createIterableMethod(method, isReadonly, isShallow) {
    return function(...args) {
      const target = this["__v_raw"];
      const rawTarget = toRaw(target);
      const targetIsMap = isMap(rawTarget);
      const isPair = method === "entries" || method === Symbol.iterator && targetIsMap;
      const isKeyOnly = method === "keys" && targetIsMap;
      const innerIterator = target[method](...args);
      const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;
      !isReadonly && track(rawTarget, "iterate", isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY);
      return {
        next() {
          const {value, done} = innerIterator.next();
          return done ? {value, done} : {
            value: isPair ? [wrap(value[0]), wrap(value[1])] : wrap(value),
            done
          };
        },
        [Symbol.iterator]() {
          return this;
        }
      };
    };
  }
  function createReadonlyMethod(type) {
    return function(...args) {
      {
        const key = args[0] ? `on key "${args[0]}" ` : ``;
        console.warn(`${capitalize(type)} operation ${key}failed: target is readonly.`, toRaw(this));
      }
      return type === "delete" ? false : this;
    };
  }
  var mutableInstrumentations = {
    get(key) {
      return get$1(this, key);
    },
    get size() {
      return size(this);
    },
    has: has$1,
    add,
    set: set$1,
    delete: deleteEntry,
    clear,
    forEach: createForEach(false, false)
  };
  var shallowInstrumentations = {
    get(key) {
      return get$1(this, key, false, true);
    },
    get size() {
      return size(this);
    },
    has: has$1,
    add,
    set: set$1,
    delete: deleteEntry,
    clear,
    forEach: createForEach(false, true)
  };
  var readonlyInstrumentations = {
    get(key) {
      return get$1(this, key, true);
    },
    get size() {
      return size(this, true);
    },
    has(key) {
      return has$1.call(this, key, true);
    },
    add: createReadonlyMethod("add"),
    set: createReadonlyMethod("set"),
    delete: createReadonlyMethod("delete"),
    clear: createReadonlyMethod("clear"),
    forEach: createForEach(true, false)
  };
  var shallowReadonlyInstrumentations = {
    get(key) {
      return get$1(this, key, true, true);
    },
    get size() {
      return size(this, true);
    },
    has(key) {
      return has$1.call(this, key, true);
    },
    add: createReadonlyMethod("add"),
    set: createReadonlyMethod("set"),
    delete: createReadonlyMethod("delete"),
    clear: createReadonlyMethod("clear"),
    forEach: createForEach(true, true)
  };
  var iteratorMethods = ["keys", "values", "entries", Symbol.iterator];
  iteratorMethods.forEach((method) => {
    mutableInstrumentations[method] = createIterableMethod(method, false, false);
    readonlyInstrumentations[method] = createIterableMethod(method, true, false);
    shallowInstrumentations[method] = createIterableMethod(method, false, true);
    shallowReadonlyInstrumentations[method] = createIterableMethod(method, true, true);
  });
  function createInstrumentationGetter(isReadonly, shallow) {
    const instrumentations = shallow ? isReadonly ? shallowReadonlyInstrumentations : shallowInstrumentations : isReadonly ? readonlyInstrumentations : mutableInstrumentations;
    return (target, key, receiver) => {
      if (key === "__v_isReactive") {
        return !isReadonly;
      } else if (key === "__v_isReadonly") {
        return isReadonly;
      } else if (key === "__v_raw") {
        return target;
      }
      return Reflect.get(hasOwn(instrumentations, key) && key in target ? instrumentations : target, key, receiver);
    };
  }
  var mutableCollectionHandlers = {
    get: createInstrumentationGetter(false, false)
  };
  var readonlyCollectionHandlers = {
    get: createInstrumentationGetter(true, false)
  };
  function checkIdentityKeys(target, has2, key) {
    const rawKey = toRaw(key);
    if (rawKey !== key && has2.call(target, rawKey)) {
      const type = toRawType(target);
      console.warn(`Reactive ${type} contains both the raw and reactive versions of the same object${type === `Map` ? ` as keys` : ``}, which can lead to inconsistencies. Avoid differentiating between the raw and reactive versions of an object and only use the reactive version if possible.`);
    }
  }
  var reactiveMap = new WeakMap();
  var shallowReactiveMap = new WeakMap();
  var readonlyMap = new WeakMap();
  var shallowReadonlyMap = new WeakMap();
  function targetTypeMap(rawType) {
    switch (rawType) {
      case "Object":
      case "Array":
        return 1;
      case "Map":
      case "Set":
      case "WeakMap":
      case "WeakSet":
        return 2;
      default:
        return 0;
    }
  }
  function getTargetType(value) {
    return value["__v_skip"] || !Object.isExtensible(value) ? 0 : targetTypeMap(toRawType(value));
  }
  function reactive2(target) {
    if (target && target["__v_isReadonly"]) {
      return target;
    }
    return createReactiveObject(target, false, mutableHandlers, mutableCollectionHandlers, reactiveMap);
  }
  function readonly(target) {
    return createReactiveObject(target, true, readonlyHandlers, readonlyCollectionHandlers, readonlyMap);
  }
  function createReactiveObject(target, isReadonly, baseHandlers, collectionHandlers, proxyMap) {
    if (!isObject(target)) {
      {
        console.warn(`value cannot be made reactive: ${String(target)}`);
      }
      return target;
    }
    if (target["__v_raw"] && !(isReadonly && target["__v_isReactive"])) {
      return target;
    }
    const existingProxy = proxyMap.get(target);
    if (existingProxy) {
      return existingProxy;
    }
    const targetType = getTargetType(target);
    if (targetType === 0) {
      return target;
    }
    const proxy = new Proxy(target, targetType === 2 ? collectionHandlers : baseHandlers);
    proxyMap.set(target, proxy);
    return proxy;
  }
  function toRaw(observed) {
    return observed && toRaw(observed["__v_raw"]) || observed;
  }
  function isRef(r) {
    return Boolean(r && r.__v_isRef === true);
  }

  // packages/alpinejs/src/magics/$nextTick.js
  magic("nextTick", () => nextTick);

  // packages/alpinejs/src/magics/$dispatch.js
  magic("dispatch", (el) => dispatch.bind(dispatch, el));

  // packages/alpinejs/src/magics/$watch.js
  magic("watch", (el, {evaluateLater: evaluateLater2, effect: effect3}) => (key, callback) => {
    let evaluate2 = evaluateLater2(key);
    let firstTime = true;
    let oldValue;
    let effectReference = effect3(() => evaluate2((value) => {
      JSON.stringify(value);
      if (!firstTime) {
        queueMicrotask(() => {
          callback(value, oldValue);
          oldValue = value;
        });
      } else {
        oldValue = value;
      }
      firstTime = false;
    }));
    el._x_effects.delete(effectReference);
  });

  // packages/alpinejs/src/magics/$store.js
  magic("store", getStores);

  // packages/alpinejs/src/magics/$data.js
  magic("data", (el) => scope(el));

  // packages/alpinejs/src/magics/$root.js
  magic("root", (el) => closestRoot(el));

  // packages/alpinejs/src/magics/$refs.js
  magic("refs", (el) => {
    if (el._x_refs_proxy)
      return el._x_refs_proxy;
    el._x_refs_proxy = mergeProxies(getArrayOfRefObject(el));
    return el._x_refs_proxy;
  });
  function getArrayOfRefObject(el) {
    let refObjects = [];
    let currentEl = el;
    while (currentEl) {
      if (currentEl._x_refs)
        refObjects.push(currentEl._x_refs);
      currentEl = currentEl.parentNode;
    }
    return refObjects;
  }

  // packages/alpinejs/src/ids.js
  var globalIdMemo = {};
  function findAndIncrementId(name) {
    if (!globalIdMemo[name])
      globalIdMemo[name] = 0;
    return ++globalIdMemo[name];
  }
  function closestIdRoot(el, name) {
    return findClosest(el, (element) => {
      if (element._x_ids && element._x_ids[name])
        return true;
    });
  }
  function setIdRoot(el, name) {
    if (!el._x_ids)
      el._x_ids = {};
    if (!el._x_ids[name])
      el._x_ids[name] = findAndIncrementId(name);
  }

  // packages/alpinejs/src/magics/$id.js
  magic("id", (el) => (name, key = null) => {
    let root = closestIdRoot(el, name);
    let id = root ? root._x_ids[name] : findAndIncrementId(name);
    return key ? `${name}-${id}-${key}` : `${name}-${id}`;
  });

  // packages/alpinejs/src/magics/$el.js
  magic("el", (el) => el);

  // packages/alpinejs/src/magics/index.js
  warnMissingPluginMagic("Focus", "focus", "focus");
  warnMissingPluginMagic("Persist", "persist", "persist");
  function warnMissingPluginMagic(name, magicName, slug) {
    magic(magicName, (el) => warn$1(`You can't use [$${directiveName}] without first installing the "${name}" plugin here: https://alpinejs.dev/plugins/${slug}`, el));
  }

  // packages/alpinejs/src/entangle.js
  function entangle({get: outerGet, set: outerSet}, {get: innerGet, set: innerSet}) {
    let firstRun = true;
    let outerHash, outerHashLatest;
    let reference = effect(() => {
      let outer, inner;
      if (firstRun) {
        outer = outerGet();
        innerSet(outer);
        inner = innerGet();
        firstRun = false;
      } else {
        outer = outerGet();
        inner = innerGet();
        outerHashLatest = JSON.stringify(outer);
        JSON.stringify(inner);
        if (outerHashLatest !== outerHash) {
          inner = innerGet();
          innerSet(outer);
          inner = outer;
        } else {
          outerSet(inner);
          outer = inner;
        }
      }
      outerHash = JSON.stringify(outer);
      JSON.stringify(inner);
    });
    return () => {
      release(reference);
    };
  }

  // packages/alpinejs/src/directives/x-modelable.js
  directive("modelable", (el, {expression}, {effect: effect3, evaluateLater: evaluateLater2, cleanup: cleanup2}) => {
    let func = evaluateLater2(expression);
    let innerGet = () => {
      let result;
      func((i) => result = i);
      return result;
    };
    let evaluateInnerSet = evaluateLater2(`${expression} = __placeholder`);
    let innerSet = (val) => evaluateInnerSet(() => {
    }, {scope: {__placeholder: val}});
    let initialValue = innerGet();
    innerSet(initialValue);
    queueMicrotask(() => {
      if (!el._x_model)
        return;
      el._x_removeModelListeners["default"]();
      let outerGet = el._x_model.get;
      let outerSet = el._x_model.set;
      let releaseEntanglement = entangle({
        get() {
          return outerGet();
        },
        set(value) {
          outerSet(value);
        }
      }, {
        get() {
          return innerGet();
        },
        set(value) {
          innerSet(value);
        }
      });
      cleanup2(releaseEntanglement);
    });
  });

  // packages/alpinejs/src/directives/x-teleport.js
  var teleportContainerDuringClone = document.createElement("div");
  directive("teleport", (el, {modifiers, expression}, {cleanup: cleanup2}) => {
    if (el.tagName.toLowerCase() !== "template")
      warn$1("x-teleport can only be used on a <template> tag", el);
    let target = skipDuringClone(() => {
      return document.querySelector(expression);
    }, () => {
      return teleportContainerDuringClone;
    })();
    if (!target)
      warn$1(`Cannot find x-teleport element for selector: "${expression}"`);
    let clone2 = el.content.cloneNode(true).firstElementChild;
    el._x_teleport = clone2;
    clone2._x_teleportBack = el;
    if (el._x_forwardEvents) {
      el._x_forwardEvents.forEach((eventName) => {
        clone2.addEventListener(eventName, (e) => {
          e.stopPropagation();
          el.dispatchEvent(new e.constructor(e.type, e));
        });
      });
    }
    addScopeToNode(clone2, {}, el);
    mutateDom(() => {
      if (modifiers.includes("prepend")) {
        target.parentNode.insertBefore(clone2, target);
      } else if (modifiers.includes("append")) {
        target.parentNode.insertBefore(clone2, target.nextSibling);
      } else {
        target.appendChild(clone2);
      }
      initTree(clone2);
      clone2._x_ignore = true;
    });
    cleanup2(() => clone2.remove());
  });

  // packages/alpinejs/src/directives/x-ignore.js
  var handler = () => {
  };
  handler.inline = (el, {modifiers}, {cleanup: cleanup2}) => {
    modifiers.includes("self") ? el._x_ignoreSelf = true : el._x_ignore = true;
    cleanup2(() => {
      modifiers.includes("self") ? delete el._x_ignoreSelf : delete el._x_ignore;
    });
  };
  directive("ignore", handler);

  // packages/alpinejs/src/directives/x-effect.js
  directive("effect", (el, {expression}, {effect: effect3}) => effect3(evaluateLater(el, expression)));

  // packages/alpinejs/src/utils/on.js
  function on(el, event, modifiers, callback) {
    let listenerTarget = el;
    let handler4 = (e) => callback(e);
    let options = {};
    let wrapHandler = (callback2, wrapper) => (e) => wrapper(callback2, e);
    if (modifiers.includes("dot"))
      event = dotSyntax(event);
    if (modifiers.includes("camel"))
      event = camelCase2(event);
    if (modifiers.includes("passive"))
      options.passive = true;
    if (modifiers.includes("capture"))
      options.capture = true;
    if (modifiers.includes("window"))
      listenerTarget = window;
    if (modifiers.includes("document"))
      listenerTarget = document;
    if (modifiers.includes("debounce")) {
      let nextModifier = modifiers[modifiers.indexOf("debounce") + 1] || "invalid-wait";
      let wait = isNumeric(nextModifier.split("ms")[0]) ? Number(nextModifier.split("ms")[0]) : 250;
      handler4 = debounce(handler4, wait);
    }
    if (modifiers.includes("throttle")) {
      let nextModifier = modifiers[modifiers.indexOf("throttle") + 1] || "invalid-wait";
      let wait = isNumeric(nextModifier.split("ms")[0]) ? Number(nextModifier.split("ms")[0]) : 250;
      handler4 = throttle(handler4, wait);
    }
    if (modifiers.includes("prevent"))
      handler4 = wrapHandler(handler4, (next, e) => {
        e.preventDefault();
        next(e);
      });
    if (modifiers.includes("stop"))
      handler4 = wrapHandler(handler4, (next, e) => {
        e.stopPropagation();
        next(e);
      });
    if (modifiers.includes("self"))
      handler4 = wrapHandler(handler4, (next, e) => {
        e.target === el && next(e);
      });
    if (modifiers.includes("away") || modifiers.includes("outside")) {
      listenerTarget = document;
      handler4 = wrapHandler(handler4, (next, e) => {
        if (el.contains(e.target))
          return;
        if (e.target.isConnected === false)
          return;
        if (el.offsetWidth < 1 && el.offsetHeight < 1)
          return;
        if (el._x_isShown === false)
          return;
        next(e);
      });
    }
    if (modifiers.includes("once")) {
      handler4 = wrapHandler(handler4, (next, e) => {
        next(e);
        listenerTarget.removeEventListener(event, handler4, options);
      });
    }
    handler4 = wrapHandler(handler4, (next, e) => {
      if (isKeyEvent(event)) {
        if (isListeningForASpecificKeyThatHasntBeenPressed(e, modifiers)) {
          return;
        }
      }
      next(e);
    });
    listenerTarget.addEventListener(event, handler4, options);
    return () => {
      listenerTarget.removeEventListener(event, handler4, options);
    };
  }
  function dotSyntax(subject) {
    return subject.replace(/-/g, ".");
  }
  function camelCase2(subject) {
    return subject.toLowerCase().replace(/-(\w)/g, (match, char) => char.toUpperCase());
  }
  function isNumeric(subject) {
    return !Array.isArray(subject) && !isNaN(subject);
  }
  function kebabCase2(subject) {
    if ([" ", "_"].includes(subject))
      return subject;
    return subject.replace(/([a-z])([A-Z])/g, "$1-$2").replace(/[_\s]/, "-").toLowerCase();
  }
  function isKeyEvent(event) {
    return ["keydown", "keyup"].includes(event);
  }
  function isListeningForASpecificKeyThatHasntBeenPressed(e, modifiers) {
    let keyModifiers = modifiers.filter((i) => {
      return !["window", "document", "prevent", "stop", "once", "capture"].includes(i);
    });
    if (keyModifiers.includes("debounce")) {
      let debounceIndex = keyModifiers.indexOf("debounce");
      keyModifiers.splice(debounceIndex, isNumeric((keyModifiers[debounceIndex + 1] || "invalid-wait").split("ms")[0]) ? 2 : 1);
    }
    if (keyModifiers.includes("throttle")) {
      let debounceIndex = keyModifiers.indexOf("throttle");
      keyModifiers.splice(debounceIndex, isNumeric((keyModifiers[debounceIndex + 1] || "invalid-wait").split("ms")[0]) ? 2 : 1);
    }
    if (keyModifiers.length === 0)
      return false;
    if (keyModifiers.length === 1 && keyToModifiers(e.key).includes(keyModifiers[0]))
      return false;
    const systemKeyModifiers = ["ctrl", "shift", "alt", "meta", "cmd", "super"];
    const selectedSystemKeyModifiers = systemKeyModifiers.filter((modifier) => keyModifiers.includes(modifier));
    keyModifiers = keyModifiers.filter((i) => !selectedSystemKeyModifiers.includes(i));
    if (selectedSystemKeyModifiers.length > 0) {
      const activelyPressedKeyModifiers = selectedSystemKeyModifiers.filter((modifier) => {
        if (modifier === "cmd" || modifier === "super")
          modifier = "meta";
        return e[`${modifier}Key`];
      });
      if (activelyPressedKeyModifiers.length === selectedSystemKeyModifiers.length) {
        if (keyToModifiers(e.key).includes(keyModifiers[0]))
          return false;
      }
    }
    return true;
  }
  function keyToModifiers(key) {
    if (!key)
      return [];
    key = kebabCase2(key);
    let modifierToKeyMap = {
      ctrl: "control",
      slash: "/",
      space: " ",
      spacebar: " ",
      cmd: "meta",
      esc: "escape",
      up: "arrow-up",
      down: "arrow-down",
      left: "arrow-left",
      right: "arrow-right",
      period: ".",
      equal: "=",
      minus: "-",
      underscore: "_"
    };
    modifierToKeyMap[key] = key;
    return Object.keys(modifierToKeyMap).map((modifier) => {
      if (modifierToKeyMap[modifier] === key)
        return modifier;
    }).filter((modifier) => modifier);
  }

  // packages/alpinejs/src/directives/x-model.js
  directive("model", (el, {modifiers, expression}, {effect: effect3, cleanup: cleanup2}) => {
    let scopeTarget = el;
    if (modifiers.includes("parent")) {
      scopeTarget = el.parentNode;
    }
    let evaluateGet = evaluateLater(scopeTarget, expression);
    let evaluateSet;
    if (typeof expression === "string") {
      evaluateSet = evaluateLater(scopeTarget, `${expression} = __placeholder`);
    } else if (typeof expression === "function" && typeof expression() === "string") {
      evaluateSet = evaluateLater(scopeTarget, `${expression()} = __placeholder`);
    } else {
      evaluateSet = () => {
      };
    }
    let getValue = () => {
      let result;
      evaluateGet((value) => result = value);
      return isGetterSetter(result) ? result.get() : result;
    };
    let setValue = (value) => {
      let result;
      evaluateGet((value2) => result = value2);
      if (isGetterSetter(result)) {
        result.set(value);
      } else {
        evaluateSet(() => {
        }, {
          scope: {__placeholder: value}
        });
      }
    };
    if (typeof expression === "string" && el.type === "radio") {
      mutateDom(() => {
        if (!el.hasAttribute("name"))
          el.setAttribute("name", expression);
      });
    }
    var event = el.tagName.toLowerCase() === "select" || ["checkbox", "radio"].includes(el.type) || modifiers.includes("lazy") ? "change" : "input";
    let removeListener = isCloning ? () => {
    } : on(el, event, modifiers, (e) => {
      setValue(getInputValue(el, modifiers, e, getValue()));
    });
    if (modifiers.includes("fill") && [null, ""].includes(getValue())) {
      el.dispatchEvent(new Event(event, {}));
    }
    if (!el._x_removeModelListeners)
      el._x_removeModelListeners = {};
    el._x_removeModelListeners["default"] = removeListener;
    cleanup2(() => el._x_removeModelListeners["default"]());
    if (el.form) {
      let removeResetListener = on(el.form, "reset", [], (e) => {
        nextTick(() => el._x_model && el._x_model.set(el.value));
      });
      cleanup2(() => removeResetListener());
    }
    el._x_model = {
      get() {
        return getValue();
      },
      set(value) {
        setValue(value);
      }
    };
    el._x_forceModelUpdate = (value) => {
      value = value === void 0 ? getValue() : value;
      if (value === void 0 && typeof expression === "string" && expression.match(/\./))
        value = "";
      window.fromModel = true;
      mutateDom(() => bind(el, "value", value));
      delete window.fromModel;
    };
    effect3(() => {
      let value = getValue();
      if (modifiers.includes("unintrusive") && document.activeElement.isSameNode(el))
        return;
      el._x_forceModelUpdate(value);
    });
  });
  function getInputValue(el, modifiers, event, currentValue) {
    return mutateDom(() => {
      if (event instanceof CustomEvent && event.detail !== void 0)
        return event.detail ?? event.target.value;
      else if (el.type === "checkbox") {
        if (Array.isArray(currentValue)) {
          let newValue = modifiers.includes("number") ? safeParseNumber(event.target.value) : event.target.value;
          return event.target.checked ? currentValue.concat([newValue]) : currentValue.filter((el2) => !checkedAttrLooseCompare2(el2, newValue));
        } else {
          return event.target.checked;
        }
      } else if (el.tagName.toLowerCase() === "select" && el.multiple) {
        return modifiers.includes("number") ? Array.from(event.target.selectedOptions).map((option) => {
          let rawValue = option.value || option.text;
          return safeParseNumber(rawValue);
        }) : Array.from(event.target.selectedOptions).map((option) => {
          return option.value || option.text;
        });
      } else {
        let rawValue = event.target.value;
        return modifiers.includes("number") ? safeParseNumber(rawValue) : modifiers.includes("trim") ? rawValue.trim() : rawValue;
      }
    });
  }
  function safeParseNumber(rawValue) {
    let number = rawValue ? parseFloat(rawValue) : null;
    return isNumeric2(number) ? number : rawValue;
  }
  function checkedAttrLooseCompare2(valueA, valueB) {
    return valueA == valueB;
  }
  function isNumeric2(subject) {
    return !Array.isArray(subject) && !isNaN(subject);
  }
  function isGetterSetter(value) {
    return value !== null && typeof value === "object" && typeof value.get === "function" && typeof value.set === "function";
  }

  // packages/alpinejs/src/directives/x-cloak.js
  directive("cloak", (el) => queueMicrotask(() => mutateDom(() => el.removeAttribute(prefix$1("cloak")))));

  // packages/alpinejs/src/directives/x-init.js
  addInitSelector(() => `[${prefix$1("init")}]`);
  directive("init", skipDuringClone((el, {expression}, {evaluate: evaluate2}) => {
    if (typeof expression === "string") {
      return !!expression.trim() && evaluate2(expression, {}, false);
    }
    return evaluate2(expression, {}, false);
  }));

  // packages/alpinejs/src/directives/x-text.js
  directive("text", (el, {expression}, {effect: effect3, evaluateLater: evaluateLater2}) => {
    let evaluate2 = evaluateLater2(expression);
    effect3(() => {
      evaluate2((value) => {
        mutateDom(() => {
          el.textContent = value;
        });
      });
    });
  });

  // packages/alpinejs/src/directives/x-html.js
  directive("html", (el, {expression}, {effect: effect3, evaluateLater: evaluateLater2}) => {
    let evaluate2 = evaluateLater2(expression);
    effect3(() => {
      evaluate2((value) => {
        mutateDom(() => {
          el.innerHTML = value;
          el._x_ignoreSelf = true;
          initTree(el);
          delete el._x_ignoreSelf;
        });
      });
    });
  });

  // packages/alpinejs/src/directives/x-bind.js
  mapAttributes(startingWith(":", into(prefix$1("bind:"))));
  var handler2 = (el, {value, modifiers, expression, original}, {effect: effect3}) => {
    if (!value) {
      let bindingProviders = {};
      injectBindingProviders(bindingProviders);
      let getBindings = evaluateLater(el, expression);
      getBindings((bindings) => {
        applyBindingsObject(el, bindings, original);
      }, {scope: bindingProviders});
      return;
    }
    if (value === "key")
      return storeKeyForXFor(el, expression);
    if (el._x_inlineBindings && el._x_inlineBindings[value] && el._x_inlineBindings[value].extract) {
      return;
    }
    let evaluate2 = evaluateLater(el, expression);
    effect3(() => evaluate2((result) => {
      if (result === void 0 && typeof expression === "string" && expression.match(/\./)) {
        result = "";
      }
      mutateDom(() => bind(el, value, result, modifiers));
    }));
  };
  handler2.inline = (el, {value, modifiers, expression}) => {
    if (!value)
      return;
    if (!el._x_inlineBindings)
      el._x_inlineBindings = {};
    el._x_inlineBindings[value] = {expression, extract: false};
  };
  directive("bind", handler2);
  function storeKeyForXFor(el, expression) {
    el._x_keyExpression = expression;
  }

  // packages/alpinejs/src/directives/x-data.js
  addRootSelector(() => `[${prefix$1("data")}]`);
  directive("data", skipDuringClone((el, {expression}, {cleanup: cleanup2}) => {
    expression = expression === "" ? "{}" : expression;
    let magicContext = {};
    injectMagics(magicContext, el);
    let dataProviderContext = {};
    injectDataProviders(dataProviderContext, magicContext);
    let data2 = evaluate$1(el, expression, {scope: dataProviderContext});
    if (data2 === void 0 || data2 === true)
      data2 = {};
    injectMagics(data2, el);
    let reactiveData = reactive(data2);
    initInterceptors(reactiveData);
    let undo = addScopeToNode(el, reactiveData);
    reactiveData["init"] && evaluate$1(el, reactiveData["init"]);
    cleanup2(() => {
      reactiveData["destroy"] && evaluate$1(el, reactiveData["destroy"]);
      undo();
    });
  }));

  // packages/alpinejs/src/directives/x-show.js
  directive("show", (el, {modifiers, expression}, {effect: effect3}) => {
    let evaluate2 = evaluateLater(el, expression);
    if (!el._x_doHide)
      el._x_doHide = () => {
        mutateDom(() => {
          el.style.setProperty("display", "none", modifiers.includes("important") ? "important" : void 0);
        });
      };
    if (!el._x_doShow)
      el._x_doShow = () => {
        mutateDom(() => {
          if (el.style.length === 1 && el.style.display === "none") {
            el.removeAttribute("style");
          } else {
            el.style.removeProperty("display");
          }
        });
      };
    let hide = () => {
      el._x_doHide();
      el._x_isShown = false;
    };
    let show = () => {
      el._x_doShow();
      el._x_isShown = true;
    };
    let clickAwayCompatibleShow = () => setTimeout(show);
    let toggle = once((value) => value ? show() : hide(), (value) => {
      if (typeof el._x_toggleAndCascadeWithTransitions === "function") {
        el._x_toggleAndCascadeWithTransitions(el, value, show, hide);
      } else {
        value ? clickAwayCompatibleShow() : hide();
      }
    });
    let oldValue;
    let firstTime = true;
    effect3(() => evaluate2((value) => {
      if (!firstTime && value === oldValue)
        return;
      if (modifiers.includes("immediate"))
        value ? clickAwayCompatibleShow() : hide();
      toggle(value);
      oldValue = value;
      firstTime = false;
    }));
  });

  // packages/alpinejs/src/directives/x-for.js
  directive("for", (el, {expression}, {effect: effect3, cleanup: cleanup2}) => {
    let iteratorNames = parseForExpression(expression);
    let evaluateItems = evaluateLater(el, iteratorNames.items);
    let evaluateKey = evaluateLater(el, el._x_keyExpression || "index");
    el._x_prevKeys = [];
    el._x_lookup = {};
    effect3(() => loop(el, iteratorNames, evaluateItems, evaluateKey));
    cleanup2(() => {
      Object.values(el._x_lookup).forEach((el2) => el2.remove());
      delete el._x_prevKeys;
      delete el._x_lookup;
    });
  });
  function loop(el, iteratorNames, evaluateItems, evaluateKey) {
    let isObject2 = (i) => typeof i === "object" && !Array.isArray(i);
    let templateEl = el;
    evaluateItems((items) => {
      if (isNumeric3(items) && items >= 0) {
        items = Array.from(Array(items).keys(), (i) => i + 1);
      }
      if (items === void 0)
        items = [];
      let lookup = el._x_lookup;
      let prevKeys = el._x_prevKeys;
      let scopes = [];
      let keys = [];
      if (isObject2(items)) {
        items = Object.entries(items).map(([key, value]) => {
          let scope2 = getIterationScopeVariables(iteratorNames, value, key, items);
          evaluateKey((value2) => keys.push(value2), {scope: {index: key, ...scope2}});
          scopes.push(scope2);
        });
      } else {
        for (let i = 0; i < items.length; i++) {
          let scope2 = getIterationScopeVariables(iteratorNames, items[i], i, items);
          evaluateKey((value) => keys.push(value), {scope: {index: i, ...scope2}});
          scopes.push(scope2);
        }
      }
      let adds = [];
      let moves = [];
      let removes = [];
      let sames = [];
      for (let i = 0; i < prevKeys.length; i++) {
        let key = prevKeys[i];
        if (keys.indexOf(key) === -1)
          removes.push(key);
      }
      prevKeys = prevKeys.filter((key) => !removes.includes(key));
      let lastKey = "template";
      for (let i = 0; i < keys.length; i++) {
        let key = keys[i];
        let prevIndex = prevKeys.indexOf(key);
        if (prevIndex === -1) {
          prevKeys.splice(i, 0, key);
          adds.push([lastKey, i]);
        } else if (prevIndex !== i) {
          let keyInSpot = prevKeys.splice(i, 1)[0];
          let keyForSpot = prevKeys.splice(prevIndex - 1, 1)[0];
          prevKeys.splice(i, 0, keyForSpot);
          prevKeys.splice(prevIndex, 0, keyInSpot);
          moves.push([keyInSpot, keyForSpot]);
        } else {
          sames.push(key);
        }
        lastKey = key;
      }
      for (let i = 0; i < removes.length; i++) {
        let key = removes[i];
        if (!!lookup[key]._x_effects) {
          lookup[key]._x_effects.forEach(dequeueJob);
        }
        lookup[key].remove();
        lookup[key] = null;
        delete lookup[key];
      }
      for (let i = 0; i < moves.length; i++) {
        let [keyInSpot, keyForSpot] = moves[i];
        let elInSpot = lookup[keyInSpot];
        let elForSpot = lookup[keyForSpot];
        let marker = document.createElement("div");
        mutateDom(() => {
          if (!elForSpot)
            warn$1(`x-for ":key" is undefined or invalid`, templateEl);
          elForSpot.after(marker);
          elInSpot.after(elForSpot);
          elForSpot._x_currentIfEl && elForSpot.after(elForSpot._x_currentIfEl);
          marker.before(elInSpot);
          elInSpot._x_currentIfEl && elInSpot.after(elInSpot._x_currentIfEl);
          marker.remove();
        });
        elForSpot._x_refreshXForScope(scopes[keys.indexOf(keyForSpot)]);
      }
      for (let i = 0; i < adds.length; i++) {
        let [lastKey2, index] = adds[i];
        let lastEl = lastKey2 === "template" ? templateEl : lookup[lastKey2];
        if (lastEl._x_currentIfEl)
          lastEl = lastEl._x_currentIfEl;
        let scope2 = scopes[index];
        let key = keys[index];
        let clone2 = document.importNode(templateEl.content, true).firstElementChild;
        let reactiveScope = reactive(scope2);
        addScopeToNode(clone2, reactiveScope, templateEl);
        clone2._x_refreshXForScope = (newScope) => {
          Object.entries(newScope).forEach(([key2, value]) => {
            reactiveScope[key2] = value;
          });
        };
        mutateDom(() => {
          lastEl.after(clone2);
          initTree(clone2);
        });
        if (typeof key === "object") {
          warn$1("x-for key cannot be an object, it must be a string or an integer", templateEl);
        }
        lookup[key] = clone2;
      }
      for (let i = 0; i < sames.length; i++) {
        lookup[sames[i]]._x_refreshXForScope(scopes[keys.indexOf(sames[i])]);
      }
      templateEl._x_prevKeys = keys;
    });
  }
  function parseForExpression(expression) {
    let forIteratorRE = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/;
    let stripParensRE = /^\s*\(|\)\s*$/g;
    let forAliasRE = /([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/;
    let inMatch = expression.match(forAliasRE);
    if (!inMatch)
      return;
    let res = {};
    res.items = inMatch[2].trim();
    let item = inMatch[1].replace(stripParensRE, "").trim();
    let iteratorMatch = item.match(forIteratorRE);
    if (iteratorMatch) {
      res.item = item.replace(forIteratorRE, "").trim();
      res.index = iteratorMatch[1].trim();
      if (iteratorMatch[2]) {
        res.collection = iteratorMatch[2].trim();
      }
    } else {
      res.item = item;
    }
    return res;
  }
  function getIterationScopeVariables(iteratorNames, item, index, items) {
    let scopeVariables = {};
    if (/^\[.*\]$/.test(iteratorNames.item) && Array.isArray(item)) {
      let names = iteratorNames.item.replace("[", "").replace("]", "").split(",").map((i) => i.trim());
      names.forEach((name, i) => {
        scopeVariables[name] = item[i];
      });
    } else if (/^\{.*\}$/.test(iteratorNames.item) && !Array.isArray(item) && typeof item === "object") {
      let names = iteratorNames.item.replace("{", "").replace("}", "").split(",").map((i) => i.trim());
      names.forEach((name) => {
        scopeVariables[name] = item[name];
      });
    } else {
      scopeVariables[iteratorNames.item] = item;
    }
    if (iteratorNames.index)
      scopeVariables[iteratorNames.index] = index;
    if (iteratorNames.collection)
      scopeVariables[iteratorNames.collection] = items;
    return scopeVariables;
  }
  function isNumeric3(subject) {
    return !Array.isArray(subject) && !isNaN(subject);
  }

  // packages/alpinejs/src/directives/x-ref.js
  function handler3() {
  }
  handler3.inline = (el, {expression}, {cleanup: cleanup2}) => {
    let root = closestRoot(el);
    if (!root._x_refs)
      root._x_refs = {};
    root._x_refs[expression] = el;
    cleanup2(() => delete root._x_refs[expression]);
  };
  directive("ref", handler3);

  // packages/alpinejs/src/directives/x-if.js
  directive("if", (el, {expression}, {effect: effect3, cleanup: cleanup2}) => {
    let evaluate2 = evaluateLater(el, expression);
    let show = () => {
      if (el._x_currentIfEl)
        return el._x_currentIfEl;
      let clone2 = el.content.cloneNode(true).firstElementChild;
      addScopeToNode(clone2, {}, el);
      mutateDom(() => {
        el.after(clone2);
        initTree(clone2);
      });
      el._x_currentIfEl = clone2;
      el._x_undoIf = () => {
        walk(clone2, (node) => {
          if (!!node._x_effects) {
            node._x_effects.forEach(dequeueJob);
          }
        });
        clone2.remove();
        delete el._x_currentIfEl;
      };
      return clone2;
    };
    let hide = () => {
      if (!el._x_undoIf)
        return;
      el._x_undoIf();
      delete el._x_undoIf;
    };
    effect3(() => evaluate2((value) => {
      value ? show() : hide();
    }));
    cleanup2(() => el._x_undoIf && el._x_undoIf());
  });

  // packages/alpinejs/src/directives/x-id.js
  directive("id", (el, {expression}, {evaluate: evaluate2}) => {
    let names = evaluate2(expression);
    names.forEach((name) => setIdRoot(el, name));
  });

  // packages/alpinejs/src/directives/x-on.js
  mapAttributes(startingWith("@", into(prefix$1("on:"))));
  directive("on", skipDuringClone((el, {value, modifiers, expression}, {cleanup: cleanup2}) => {
    let evaluate2 = expression ? evaluateLater(el, expression) : () => {
    };
    if (el.tagName.toLowerCase() === "template") {
      if (!el._x_forwardEvents)
        el._x_forwardEvents = [];
      if (!el._x_forwardEvents.includes(value))
        el._x_forwardEvents.push(value);
    }
    let removeListener = on(el, value, modifiers, (e) => {
      evaluate2(() => {
      }, {scope: {$event: e}, params: [e]});
    });
    cleanup2(() => removeListener());
  }));

  // packages/alpinejs/src/directives/index.js
  warnMissingPluginDirective("Collapse", "collapse", "collapse");
  warnMissingPluginDirective("Intersect", "intersect", "intersect");
  warnMissingPluginDirective("Focus", "trap", "focus");
  warnMissingPluginDirective("Mask", "mask", "mask");
  function warnMissingPluginDirective(name, directiveName2, slug) {
    directive(directiveName2, (el) => warn$1(`You can't use [x-${directiveName2}] without first installing the "${name}" plugin here: https://alpinejs.dev/plugins/${slug}`, el));
  }

  // packages/alpinejs/src/index.js
  alpine_default.setEvaluator(normalEvaluator);
  alpine_default.setReactivityEngine({reactive: reactive2, effect: effect2, release: stop, raw: toRaw});
  var src_default = alpine_default;

  // packages/alpinejs/builds/module.js
  var module_default = src_default;

  function Accordion(Alpine) {
    Alpine.directive("accordion", (el) => {
      Alpine.bind(el, {
        "u-id"() {
          return ["accordion"];
        },
      });
    });

    
    Alpine.directive("accordion-header", (el) => {
      Alpine.bind(el, {
        "u-bind:id"() {
          return this.$id("accordion");
        },
        "u-on:click"() {
          this.$data.toggle(this.$id("accordion"));
        },
        "u-bind:u-accordion-header-open"() {
          return this.$data.isOpen(this.$id("accordion"));
        },
      });
    });

    Alpine.directive("accordion-content", (el) => {
      Alpine.bind(el, {
        "u-bind:id"() {
          return this.$id("accordion");
        },
        "u-bind:u-accordion-content-open"() {
          return this.$data.isOpen(this.$id("accordion"));
        },
      });
    });

    Alpine.directive("accordions", (el) => {
      Alpine.bind(el, {
        "u-data"() {
          return {
            open: {},
            persistent: el.getAttribute("persistent"),
            toggle: (id) => {
              if (this.$data.persistent) {
                console.log("persistent", "close others");
              }
              if (this.$data.open[id]) {
                delete this.$data.open[id];
              } else {
                this.$data.open[id] = true;
              }
            },
            isOpen(id) {
              return this.$data.open[id];
            },
          };
        },
      });
    });
  }

  function Icon$1(Alpine) {
      Alpine.directive("icon", (el, {}, {evaluateLater, effect}) => {
      const iconName = el.getAttribute('u-bind:name');
      const staticName = el.getAttribute('name');

      async function setIcon(value) {
        el.setAttribute('class','ti ti-' + value);
      }

      const evaluate = evaluateLater(iconName);

      effect(() => {
        evaluate((value) => {
          setIcon(value);
        });
      });

      if(staticName) {
        setIcon(staticName);
      }
    });
  }

  function Form(Alpine) {
    // const handlers = {
    //   input: (el) => ({
    //     name: el.name,
    //     get: () => el.value,
    //     set: (value) => (el.value = value),
    //   }),
    //   checkbox: (el) => {
    //     const checkbox = el.querySelector("[u-checkbox-input]");

    //     return {
    //       name: checkbox.name,
    //       get: () => checkbox.checked,
    //       set: (value) => (checkbox.checked = value),
    //     };
    //   },
    //   switch: (el) => {
    //     const switchEl = el.querySelector("[u-switch-input]");

    //     return {
    //       name: switchEl.name,
    //       get: () => switchEl.checked,
    //       set: (value) => (switchEl.checked = value),
    //     };
    //   },
    //   "checkbox-group": (el) => {
    //     // el._model.get
    //     const name = el.getAttribute("name");

    //     return {
    //       name,
    //       get: () => {
    //         let value = [];

    //         el.querySelectorAll("[u-checkbox-group-item-input]").forEach(
    //           (item) => {
    //             if (item.checked) {
    //               value = [...value, item.value];
    //             }
    //           }
    //         );

    //         return value;
    //       },
    //       set(value) {
    //         console.log("set value of checkbox group to", value);

    //         el.querySelectorAll("[u-checkbox-group-item-input]").forEach(
    //           (item) => {
    //             if (value.includes(item.value)) {
    //               item.checked = true;
    //             } else {
    //               item.checked = false;
    //             }
    //           }
    //         );
    //       },
    //     };
    //   },
    //   "radio-group": (el) => {
    //     const name = el.getAttribute("name");

    //     return {
    //       name,
    //       get: () => {
    //         let value = "";

    //         el.querySelectorAll("[u-radio-group-item-input]").forEach((item) => {
    //           if (item.checked) {
    //             value = item.value;
    //           }
    //         });
    //         return value;
    //       },
    //       set: (value) => {
    //         el.querySelectorAll("[u-radio-group-item-input]").forEach((item) => {
    //           console.log("radio group", item.value, value);
    //           if (item.value === value) {
    //             item.checked = true;
    //           }
    //         });
    //       },
    //     };
    //   },
    //   select: (el) => {
    //     const name = el.getAttribute("name");
    //     const multiple = el.getAttribute("multiple");

    //     return {
    //       name,
    //       get() {
    //         if (multiple) {
    //           const selected = Array.from(el.selectedOptions)
    //             .map((option) => option.value)
    //             .filter((x) => !!x);

    //           return selected;
    //         } else {
    //           const selected = el.selectedOptions[0];

    //           console.log(selected);
    //           if (selected) return selected.value;
    //           return undefined;
    //         }
    //       },
    //       set(value) {
    //         console.log("set value of select to", value);
    //         if (Array.isArray(value)) {
    //           Array.from(el.options).map((option) => {
    //             if (value.includes(option.value)) option.selected = true;
    //             else option.selected = false;
    //           });
    //         } else {
    //           el.value = value;
    //         }
    //       },
    //     };
    //   },
    //   textarea(el) {
    //     const name = el.getAttribute("name");

    //     return {
    //       name,
    //       get: () => el.value,
    //       set: (value) => (el.value = value),
    //     };
    //   },
    // };

    Alpine.directive("form", (el, {}, {evaluateLater}) => {
      Alpine.bind(el, {
        'u-data'() {
          const result = {};

          return result
        }
      });
    });
    
    //   let actionFn;

    //   let method = el.getAttribute('method')
   
    //   if(method === 'FUNCTION') {
    //     actionFn = evaluateLater(el.getAttribute('action'))
    //     // console.log(actionFn(el, el, value))
        
    //   }

    //   const fields = {};

    //   const formValue = JSON.parse(el.getAttribute("value") ?? "{}");

    //   for (let input in handlers) {
    //     el.querySelectorAll(`[u-${input}]`).forEach((el) => {
    //       const { name, get, set } = handlers[input](el);

    //       if (typeof formValue[name] !== "undefined") {
    //         set(formValue[name]);
    //       }

    //       fields[name] = { get, set };
    //     });
    //   }

    //   Alpine.bind(el, {
    //     "u-data"() {
    //       let result = {};

    //       for (let field in fields) {
    //         result[field] = fields[field].get();
    //       }
    //       return result;
    //     },
    //   });

    //   Alpine.bind(el, {
    //     async "u-on:submit"(event) {
    //       const value = {};
    //       event.preventDefault();
          
    //       event.stopPropagation();

    //       Object.keys(fields).map((key) => {
    //         value[key] = fields[key].get();
    //       });

    //       if (el.getAttribute("method") === "FUNCTION") {          

    //         const result = await actionFn((v) => v, { scope: { '$value': value }, params: [value] })

    //       } else {
    //         const pathname = window.location.pathname;

    //         const url = pathname.endsWith("/")
    //           ? pathname.substring(0, pathname.length - 1)
    //           : pathname + "?" + el.getAttribute("action");

    //         try {
    //           const result = await fetch(url, {
    //             method: "POST", // el.method,
    //             headers: {
    //               "Content-Type": "application/json",
    //             },
    //             body: JSON.stringify(value),
    //           }).then((res) => res.json());

    //           console.log({ result });
    //         } catch (err) {
    //           console.log(err);
    //         }
    //       }
    //     },
    //   });
    // });


    Alpine.magic('post', (el) => {
      return async (pathname, data = {}, headers = {}) => {
        const result = await fetch(pathname, {
          method: 'POST',
          headers,
          body: JSON.stringify(data)
        }).then(res => res.json());

        return result;
      }
    });

    Alpine.magic('get', (el) => {
      return async (pathname) => {
        const result = await fetch(pathname, {
          method: 'GET',
        }).then(res => res.json());

        return result;
      }
    });
  }

  /**
  * Tom Select v2.2.2
  * Licensed under the Apache License, Version 2.0 (the "License");
  */

  /**
   * MicroEvent - to make any js object an event emitter
   *
   * - pure javascript - server compatible, browser compatible
   * - dont rely on the browser doms
   * - super simple - you get it immediatly, no mistery, no magic involved
   *
   * @author Jerome Etienne (https://github.com/jeromeetienne)
   */

  /**
   * Execute callback for each event in space separated list of event names
   *
   */
  function forEvents(events, callback) {
    events.split(/\s+/).forEach(event => {
      callback(event);
    });
  }

  class MicroEvent {
    constructor() {
      this._events = void 0;
      this._events = {};
    }

    on(events, fct) {
      forEvents(events, event => {
        const event_array = this._events[event] || [];
        event_array.push(fct);
        this._events[event] = event_array;
      });
    }

    off(events, fct) {
      var n = arguments.length;

      if (n === 0) {
        this._events = {};
        return;
      }

      forEvents(events, event => {
        if (n === 1) {
          delete this._events[event];
          return;
        }

        const event_array = this._events[event];
        if (event_array === undefined) return;
        event_array.splice(event_array.indexOf(fct), 1);
        this._events[event] = event_array;
      });
    }

    trigger(events, ...args) {
      var self = this;
      forEvents(events, event => {
        const event_array = self._events[event];
        if (event_array === undefined) return;
        event_array.forEach(fct => {
          fct.apply(self, args);
        });
      });
    }

  }

  /**
   * microplugin.js
   * Copyright (c) 2013 Brian Reavis & contributors
   *
   * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
   * file except in compliance with the License. You may obtain a copy of the License at:
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software distributed under
   * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
   * ANY KIND, either express or implied. See the License for the specific language
   * governing permissions and limitations under the License.
   *
   * @author Brian Reavis <brian@thirdroute.com>
   */
  function MicroPlugin(Interface) {
    Interface.plugins = {};
    return class extends Interface {
      constructor(...args) {
        super(...args);
        this.plugins = {
          names: [],
          settings: {},
          requested: {},
          loaded: {}
        };
      }

      /**
       * Registers a plugin.
       *
       * @param {function} fn
       */
      static define(name, fn) {
        Interface.plugins[name] = {
          'name': name,
          'fn': fn
        };
      }
      /**
       * Initializes the listed plugins (with options).
       * Acceptable formats:
       *
       * List (without options):
       *   ['a', 'b', 'c']
       *
       * List (with options):
       *   [{'name': 'a', options: {}}, {'name': 'b', options: {}}]
       *
       * Hash (with options):
       *   {'a': { ... }, 'b': { ... }, 'c': { ... }}
       *
       * @param {array|object} plugins
       */


      initializePlugins(plugins) {
        var key, name;
        const self = this;
        const queue = [];

        if (Array.isArray(plugins)) {
          plugins.forEach(plugin => {
            if (typeof plugin === 'string') {
              queue.push(plugin);
            } else {
              self.plugins.settings[plugin.name] = plugin.options;
              queue.push(plugin.name);
            }
          });
        } else if (plugins) {
          for (key in plugins) {
            if (plugins.hasOwnProperty(key)) {
              self.plugins.settings[key] = plugins[key];
              queue.push(key);
            }
          }
        }

        while (name = queue.shift()) {
          self.require(name);
        }
      }

      loadPlugin(name) {
        var self = this;
        var plugins = self.plugins;
        var plugin = Interface.plugins[name];

        if (!Interface.plugins.hasOwnProperty(name)) {
          throw new Error('Unable to find "' + name + '" plugin');
        }

        plugins.requested[name] = true;
        plugins.loaded[name] = plugin.fn.apply(self, [self.plugins.settings[name] || {}]);
        plugins.names.push(name);
      }
      /**
       * Initializes a plugin.
       *
       */


      require(name) {
        var self = this;
        var plugins = self.plugins;

        if (!self.plugins.loaded.hasOwnProperty(name)) {
          if (plugins.requested[name]) {
            throw new Error('Plugin has circular dependency ("' + name + '")');
          }

          self.loadPlugin(name);
        }

        return plugins.loaded[name];
      }

    };
  }

  /*! @orchidjs/unicode-variants | https://github.com/orchidjs/unicode-variants | Apache License (v2) */
  /**
   * Convert array of strings to a regular expression
   *	ex ['ab','a'] => (?:ab|a)
   * 	ex ['a','b'] => [ab]
   * @param {string[]} chars
   * @return {string}
   */
  const arrayToPattern = chars => {
    chars = chars.filter(Boolean);

    if (chars.length < 2) {
      return chars[0] || '';
    }

    return maxValueLength(chars) == 1 ? '[' + chars.join('') + ']' : '(?:' + chars.join('|') + ')';
  };
  /**
   * @param {string[]} array
   * @return {string}
   */

  const sequencePattern = array => {
    if (!hasDuplicates(array)) {
      return array.join('');
    }

    let pattern = '';
    let prev_char_count = 0;

    const prev_pattern = () => {
      if (prev_char_count > 1) {
        pattern += '{' + prev_char_count + '}';
      }
    };

    array.forEach((char, i) => {
      if (char === array[i - 1]) {
        prev_char_count++;
        return;
      }

      prev_pattern();
      pattern += char;
      prev_char_count = 1;
    });
    prev_pattern();
    return pattern;
  };
  /**
   * Convert array of strings to a regular expression
   *	ex ['ab','a'] => (?:ab|a)
   * 	ex ['a','b'] => [ab]
   * @param {Set<string>} chars
   * @return {string}
   */

  const setToPattern = chars => {
    let array = toArray(chars);
    return arrayToPattern(array);
  };
  /**
   *
   * https://stackoverflow.com/questions/7376598/in-javascript-how-do-i-check-if-an-array-has-duplicate-values
   * @param {any[]} array
   */

  const hasDuplicates = array => {
    return new Set(array).size !== array.length;
  };
  /**
   * https://stackoverflow.com/questions/63006601/why-does-u-throw-an-invalid-escape-error
   * @param {string} str
   * @return {string}
   */

  const escape_regex = str => {
    return (str + '').replace(/([\$\(\)\*\+\.\?\[\]\^\{\|\}\\])/gu, '\\$1');
  };
  /**
   * Return the max length of array values
   * @param {string[]} array
   *
   */

  const maxValueLength = array => {
    return array.reduce((longest, value) => Math.max(longest, unicodeLength(value)), 0);
  };
  /**
   * @param {string} str
   */

  const unicodeLength = str => {
    return toArray(str).length;
  };
  /**
   * @param {any} p
   * @return {any[]}
   */

  const toArray = p => Array.from(p);

  /*! @orchidjs/unicode-variants | https://github.com/orchidjs/unicode-variants | Apache License (v2) */
  /**
   * Get all possible combinations of substrings that add up to the given string
   * https://stackoverflow.com/questions/30169587/find-all-the-combination-of-substrings-that-add-up-to-the-given-string
   * @param {string} input
   * @return {string[][]}
   */
  const allSubstrings = input => {
    if (input.length === 1) return [[input]];
    /** @type {string[][]} */

    let result = [];
    const start = input.substring(1);
    const suba = allSubstrings(start);
    suba.forEach(function (subresult) {
      let tmp = subresult.slice(0);
      tmp[0] = input.charAt(0) + tmp[0];
      result.push(tmp);
      tmp = subresult.slice(0);
      tmp.unshift(input.charAt(0));
      result.push(tmp);
    });
    return result;
  };

  /*! @orchidjs/unicode-variants | https://github.com/orchidjs/unicode-variants | Apache License (v2) */

  /**
   * @typedef {{[key:string]:string}} TUnicodeMap
   * @typedef {{[key:string]:Set<string>}} TUnicodeSets
   * @typedef {[[number,number]]} TCodePoints
   * @typedef {{folded:string,composed:string,code_point:number}} TCodePointObj
   * @typedef {{start:number,end:number,length:number,substr:string}} TSequencePart
   */
  /** @type {TCodePoints} */

  const code_points = [[0, 65535]];
  const accent_pat = '[\u0300-\u036F\u{b7}\u{2be}\u{2bc}]';
  /** @type {TUnicodeMap} */

  let unicode_map;
  /** @type {RegExp} */

  let multi_char_reg;
  const max_char_length = 3;
  /** @type {TUnicodeMap} */

  const latin_convert = {};
  /** @type {TUnicodeMap} */

  const latin_condensed = {
    '/': '⁄∕',
    '0': '߀',
    "a": "ⱥɐɑ",
    "aa": "ꜳ",
    "ae": "æǽǣ",
    "ao": "ꜵ",
    "au": "ꜷ",
    "av": "ꜹꜻ",
    "ay": "ꜽ",
    "b": "ƀɓƃ",
    "c": "ꜿƈȼↄ",
    "d": "đɗɖᴅƌꮷԁɦ",
    "e": "ɛǝᴇɇ",
    "f": "ꝼƒ",
    "g": "ǥɠꞡᵹꝿɢ",
    "h": "ħⱨⱶɥ",
    "i": "ɨı",
    "j": "ɉȷ",
    "k": "ƙⱪꝁꝃꝅꞣ",
    "l": "łƚɫⱡꝉꝇꞁɭ",
    "m": "ɱɯϻ",
    "n": "ꞥƞɲꞑᴎлԉ",
    "o": "øǿɔɵꝋꝍᴑ",
    "oe": "œ",
    "oi": "ƣ",
    "oo": "ꝏ",
    "ou": "ȣ",
    "p": "ƥᵽꝑꝓꝕρ",
    "q": "ꝗꝙɋ",
    "r": "ɍɽꝛꞧꞃ",
    "s": "ßȿꞩꞅʂ",
    "t": "ŧƭʈⱦꞇ",
    "th": "þ",
    "tz": "ꜩ",
    "u": "ʉ",
    "v": "ʋꝟʌ",
    "vy": "ꝡ",
    "w": "ⱳ",
    "y": "ƴɏỿ",
    "z": "ƶȥɀⱬꝣ",
    "hv": "ƕ"
  };

  for (let latin in latin_condensed) {
    let unicode = latin_condensed[latin] || '';

    for (let i = 0; i < unicode.length; i++) {
      let char = unicode.substring(i, i + 1);
      latin_convert[char] = latin;
    }
  }

  const convert_pat = new RegExp(Object.keys(latin_convert).join('|') + '|' + accent_pat, 'gu');
  /**
   * Initialize the unicode_map from the give code point ranges
   *
   * @param {TCodePoints=} _code_points
   */

  const initialize = _code_points => {
    if (unicode_map !== undefined) return;
    unicode_map = generateMap(_code_points || code_points);
  };
  /**
   * Helper method for normalize a string
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize
   * @param {string} str
   * @param {string} form
   */

  const normalize = (str, form = 'NFKD') => str.normalize(form);
  /**
   * Remove accents without reordering string
   * calling str.normalize('NFKD') on \u{594}\u{595}\u{596} becomes \u{596}\u{594}\u{595}
   * via https://github.com/krisk/Fuse/issues/133#issuecomment-318692703
   * @param {string} str
   * @return {string}
   */

  const asciifold = str => {
    return toArray(str).reduce(
    /**
     * @param {string} result
     * @param {string} char
     */
    (result, char) => {
      return result + _asciifold(char);
    }, '');
  };
  /**
   * @param {string} str
   * @return {string}
   */

  const _asciifold = str => {
    str = normalize(str).toLowerCase().replace(convert_pat, (
    /** @type {string} */
    char) => {
      return latin_convert[char] || '';
    }); //return str;

    return normalize(str, 'NFC');
  };
  /**
   * Generate a list of unicode variants from the list of code points
   * @param {TCodePoints} code_points
   * @yield {TCodePointObj}
   */

  function* generator(code_points) {
    for (const [code_point_min, code_point_max] of code_points) {
      for (let i = code_point_min; i <= code_point_max; i++) {
        let composed = String.fromCharCode(i);
        let folded = asciifold(composed);

        if (folded == composed.toLowerCase()) {
          continue;
        } // skip when folded is a string longer than 3 characters long
        // bc the resulting regex patterns will be long
        // eg:
        // folded صلى الله عليه وسلم length 18 code point 65018
        // folded جل جلاله length 8 code point 65019


        if (folded.length > max_char_length) {
          continue;
        }

        if (folded.length == 0) {
          continue;
        }

        yield {
          folded: folded,
          composed: composed,
          code_point: i
        };
      }
    }
  }
  /**
   * Generate a unicode map from the list of code points
   * @param {TCodePoints} code_points
   * @return {TUnicodeSets}
   */

  const generateSets = code_points => {
    /** @type {{[key:string]:Set<string>}} */
    const unicode_sets = {};
    /**
     * @param {string} folded
     * @param {string} to_add
     */

    const addMatching = (folded, to_add) => {
      /** @type {Set<string>} */
      const folded_set = unicode_sets[folded] || new Set();
      const patt = new RegExp('^' + setToPattern(folded_set) + '$', 'iu');

      if (to_add.match(patt)) {
        return;
      }

      folded_set.add(escape_regex(to_add));
      unicode_sets[folded] = folded_set;
    };

    for (let value of generator(code_points)) {
      addMatching(value.folded, value.folded);
      addMatching(value.folded, value.composed);
    }

    return unicode_sets;
  };
  /**
   * Generate a unicode map from the list of code points
   * ae => (?:(?:ae|Æ|Ǽ|Ǣ)|(?:A|Ⓐ|Ａ...)(?:E|ɛ|Ⓔ...))
   *
   * @param {TCodePoints} code_points
   * @return {TUnicodeMap}
   */

  const generateMap = code_points => {
    /** @type {TUnicodeSets} */
    const unicode_sets = generateSets(code_points);
    /** @type {TUnicodeMap} */

    const unicode_map = {};
    /** @type {string[]} */

    let multi_char = [];

    for (let folded in unicode_sets) {
      let set = unicode_sets[folded];

      if (set) {
        unicode_map[folded] = setToPattern(set);
      }

      if (folded.length > 1) {
        multi_char.push(escape_regex(folded));
      }
    }

    multi_char.sort((a, b) => b.length - a.length);
    const multi_char_patt = arrayToPattern(multi_char);
    multi_char_reg = new RegExp('^' + multi_char_patt, 'u');
    return unicode_map;
  };
  /**
   * Map each element of an array from it's folded value to all possible unicode matches
   * @param {string[]} strings
   * @param {number} min_replacement
   * @return {string}
   */

  const mapSequence = (strings, min_replacement = 1) => {
    let chars_replaced = 0;
    strings = strings.map(str => {
      if (unicode_map[str]) {
        chars_replaced += str.length;
      }

      return unicode_map[str] || str;
    });

    if (chars_replaced >= min_replacement) {
      return sequencePattern(strings);
    }

    return '';
  };
  /**
   * Convert a short string and split it into all possible patterns
   * Keep a pattern only if min_replacement is met
   *
   * 'abc'
   * 		=> [['abc'],['ab','c'],['a','bc'],['a','b','c']]
   *		=> ['abc-pattern','ab-c-pattern'...]
   *
   *
   * @param {string} str
   * @param {number} min_replacement
   * @return {string}
   */

  const substringsToPattern = (str, min_replacement = 1) => {
    min_replacement = Math.max(min_replacement, str.length - 1);
    return arrayToPattern(allSubstrings(str).map(sub_pat => {
      return mapSequence(sub_pat, min_replacement);
    }));
  };
  /**
   * Convert an array of sequences into a pattern
   * [{start:0,end:3,length:3,substr:'iii'}...] => (?:iii...)
   *
   * @param {Sequence[]} sequences
   * @param {boolean} all
   */

  const sequencesToPattern = (sequences, all = true) => {
    let min_replacement = sequences.length > 1 ? 1 : 0;
    return arrayToPattern(sequences.map(sequence => {
      let seq = [];
      const len = all ? sequence.length() : sequence.length() - 1;

      for (let j = 0; j < len; j++) {
        seq.push(substringsToPattern(sequence.substrs[j] || '', min_replacement));
      }

      return sequencePattern(seq);
    }));
  };
  /**
   * Return true if the sequence is already in the sequences
   * @param {Sequence} needle_seq
   * @param {Sequence[]} sequences
   */


  const inSequences = (needle_seq, sequences) => {
    for (const seq of sequences) {
      if (seq.start != needle_seq.start || seq.end != needle_seq.end) {
        continue;
      }

      if (seq.substrs.join('') !== needle_seq.substrs.join('')) {
        continue;
      }

      let needle_parts = needle_seq.parts;
      /**
       * @param {TSequencePart} part
       */

      const filter = part => {
        for (const needle_part of needle_parts) {
          if (needle_part.start === part.start && needle_part.substr === part.substr) {
            return false;
          }

          if (part.length == 1 || needle_part.length == 1) {
            continue;
          } // check for overlapping parts
          // a = ['::=','==']
          // b = ['::','===']
          // a = ['r','sm']
          // b = ['rs','m']


          if (part.start < needle_part.start && part.end > needle_part.start) {
            return true;
          }

          if (needle_part.start < part.start && needle_part.end > part.start) {
            return true;
          }
        }

        return false;
      };

      let filtered = seq.parts.filter(filter);

      if (filtered.length > 0) {
        continue;
      }

      return true;
    }

    return false;
  };

  class Sequence {
    constructor() {
      /** @type {TSequencePart[]} */
      this.parts = [];
      /** @type {string[]} */

      this.substrs = [];
      this.start = 0;
      this.end = 0;
    }
    /**
     * @param {TSequencePart|undefined} part
     */


    add(part) {
      if (part) {
        this.parts.push(part);
        this.substrs.push(part.substr);
        this.start = Math.min(part.start, this.start);
        this.end = Math.max(part.end, this.end);
      }
    }

    last() {
      return this.parts[this.parts.length - 1];
    }

    length() {
      return this.parts.length;
    }
    /**
     * @param {number} position
     * @param {TSequencePart} last_piece
     */


    clone(position, last_piece) {
      let clone = new Sequence();
      let parts = JSON.parse(JSON.stringify(this.parts));
      let last_part = parts.pop();

      for (const part of parts) {
        clone.add(part);
      }

      let last_substr = last_piece.substr.substring(0, position - last_part.start);
      let clone_last_len = last_substr.length;
      clone.add({
        start: last_part.start,
        end: last_part.start + clone_last_len,
        length: clone_last_len,
        substr: last_substr
      });
      return clone;
    }

  }
  /**
   * Expand a regular expression pattern to include unicode variants
   * 	eg /a/ becomes /aⓐａẚàáâầấẫẩãāăằắẵẳȧǡäǟảåǻǎȁȃạậặḁąⱥɐɑAⒶＡÀÁÂẦẤẪẨÃĀĂẰẮẴẲȦǠÄǞẢÅǺǍȀȂẠẬẶḀĄȺⱯ/
   *
   * Issue:
   *  ﺊﺋ [ 'ﺊ = \\u{fe8a}', 'ﺋ = \\u{fe8b}' ]
   *	becomes:	ئئ [ 'ي = \\u{64a}', 'ٔ = \\u{654}', 'ي = \\u{64a}', 'ٔ = \\u{654}' ]
   *
   *	İĲ = IIJ = ⅡJ
   *
   * 	1/2/4
   *
   * @param {string} str
   * @return {string|undefined}
   */


  const getPattern = str => {
    initialize();
    str = asciifold(str);
    let pattern = '';
    let sequences = [new Sequence()];

    for (let i = 0; i < str.length; i++) {
      let substr = str.substring(i);
      let match = substr.match(multi_char_reg);
      const char = str.substring(i, i + 1);
      const match_str = match ? match[0] : null; // loop through sequences
      // add either the char or multi_match

      let overlapping = [];
      let added_types = new Set();

      for (const sequence of sequences) {
        const last_piece = sequence.last();

        if (!last_piece || last_piece.length == 1 || last_piece.end <= i) {
          // if we have a multi match
          if (match_str) {
            const len = match_str.length;
            sequence.add({
              start: i,
              end: i + len,
              length: len,
              substr: match_str
            });
            added_types.add('1');
          } else {
            sequence.add({
              start: i,
              end: i + 1,
              length: 1,
              substr: char
            });
            added_types.add('2');
          }
        } else if (match_str) {
          let clone = sequence.clone(i, last_piece);
          const len = match_str.length;
          clone.add({
            start: i,
            end: i + len,
            length: len,
            substr: match_str
          });
          overlapping.push(clone);
        } else {
          // don't add char
          // adding would create invalid patterns: 234 => [2,34,4]
          added_types.add('3');
        }
      } // if we have overlapping


      if (overlapping.length > 0) {
        // ['ii','iii'] before ['i','i','iii']
        overlapping = overlapping.sort((a, b) => {
          return a.length() - b.length();
        });

        for (let clone of overlapping) {
          // don't add if we already have an equivalent sequence
          if (inSequences(clone, sequences)) {
            continue;
          }

          sequences.push(clone);
        }

        continue;
      } // if we haven't done anything unique
      // clean up the patterns
      // helps keep patterns smaller
      // if str = 'r₨㎧aarss', pattern will be 446 instead of 655


      if (i > 0 && added_types.size == 1 && !added_types.has('3')) {
        pattern += sequencesToPattern(sequences, false);
        let new_seq = new Sequence();
        const old_seq = sequences[0];

        if (old_seq) {
          new_seq.add(old_seq.last());
        }

        sequences = [new_seq];
      }
    }

    pattern += sequencesToPattern(sequences, true);
    return pattern;
  };

  /*! sifter.js | https://github.com/orchidjs/sifter.js | Apache License (v2) */

  /**
   * A property getter resolving dot-notation
   * @param  {Object}  obj     The root object to fetch property on
   * @param  {String}  name    The optionally dotted property name to fetch
   * @return {Object}          The resolved property value
   */
  const getAttr$1 = (obj, name) => {
    if (!obj) return;
    return obj[name];
  };
  /**
   * A property getter resolving dot-notation
   * @param  {Object}  obj     The root object to fetch property on
   * @param  {String}  name    The optionally dotted property name to fetch
   * @return {Object}          The resolved property value
   */

  const getAttrNesting = (obj, name) => {
    if (!obj) return;
    var part,
        names = name.split(".");

    while ((part = names.shift()) && (obj = obj[part]));

    return obj;
  };
  /**
   * Calculates how close of a match the
   * given value is against a search token.
   *
   */

  const scoreValue = (value, token, weight) => {
    var score, pos;
    if (!value) return 0;
    value = value + '';
    if (token.regex == null) return 0;
    pos = value.search(token.regex);
    if (pos === -1) return 0;
    score = token.string.length / value.length;
    if (pos === 0) score += 0.5;
    return score * weight;
  };
  /**
   * Cast object property to an array if it exists and has a value
   *
   */

  const propToArray = (obj, key) => {
    var value = obj[key];
    if (typeof value == 'function') return value;

    if (value && !Array.isArray(value)) {
      obj[key] = [value];
    }
  };
  /**
   * Iterates over arrays and hashes.
   *
   * ```
   * iterate(this.items, function(item, id) {
   *    // invoked for each item
   * });
   * ```
   *
   */

  const iterate$1 = (object, callback) => {
    if (Array.isArray(object)) {
      object.forEach(callback);
    } else {
      for (var key in object) {
        if (object.hasOwnProperty(key)) {
          callback(object[key], key);
        }
      }
    }
  };
  const cmp = (a, b) => {
    if (typeof a === 'number' && typeof b === 'number') {
      return a > b ? 1 : a < b ? -1 : 0;
    }

    a = asciifold(a + '').toLowerCase();
    b = asciifold(b + '').toLowerCase();
    if (a > b) return 1;
    if (b > a) return -1;
    return 0;
  };

  /*! sifter.js | https://github.com/orchidjs/sifter.js | Apache License (v2) */

  /**
   * sifter.js
   * Copyright (c) 2013–2020 Brian Reavis & contributors
   *
   * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
   * file except in compliance with the License. You may obtain a copy of the License at:
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software distributed under
   * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
   * ANY KIND, either express or implied. See the License for the specific language
   * governing permissions and limitations under the License.
   *
   * @author Brian Reavis <brian@thirdroute.com>
   */

  class Sifter {
    // []|{};

    /**
     * Textually searches arrays and hashes of objects
     * by property (or multiple properties). Designed
     * specifically for autocomplete.
     *
     */
    constructor(items, settings) {
      this.items = void 0;
      this.settings = void 0;
      this.items = items;
      this.settings = settings || {
        diacritics: true
      };
    }

    /**
     * Splits a search string into an array of individual
     * regexps to be used to match results.
     *
     */
    tokenize(query, respect_word_boundaries, weights) {
      if (!query || !query.length) return [];
      const tokens = [];
      const words = query.split(/\s+/);
      var field_regex;

      if (weights) {
        field_regex = new RegExp('^(' + Object.keys(weights).map(escape_regex).join('|') + ')\:(.*)$');
      }

      words.forEach(word => {
        let field_match;
        let field = null;
        let regex = null; // look for "field:query" tokens

        if (field_regex && (field_match = word.match(field_regex))) {
          field = field_match[1];
          word = field_match[2];
        }

        if (word.length > 0) {
          if (this.settings.diacritics) {
            regex = getPattern(word) || null;
          } else {
            regex = escape_regex(word);
          }

          if (regex && respect_word_boundaries) regex = "\\b" + regex;
        }

        tokens.push({
          string: word,
          regex: regex ? new RegExp(regex, 'iu') : null,
          field: field
        });
      });
      return tokens;
    }

    /**
     * Returns a function to be used to score individual results.
     *
     * Good matches will have a higher score than poor matches.
     * If an item is not a match, 0 will be returned by the function.
     *
     * @returns {T.ScoreFn}
     */
    getScoreFunction(query, options) {
      var search = this.prepareSearch(query, options);
      return this._getScoreFunction(search);
    }
    /**
     * @returns {T.ScoreFn}
     *
     */


    _getScoreFunction(search) {
      const tokens = search.tokens,
            token_count = tokens.length;

      if (!token_count) {
        return function () {
          return 0;
        };
      }

      const fields = search.options.fields,
            weights = search.weights,
            field_count = fields.length,
            getAttrFn = search.getAttrFn;

      if (!field_count) {
        return function () {
          return 1;
        };
      }
      /**
       * Calculates the score of an object
       * against the search query.
       *
       */


      const scoreObject = function () {
        if (field_count === 1) {
          return function (token, data) {
            const field = fields[0].field;
            return scoreValue(getAttrFn(data, field), token, weights[field] || 1);
          };
        }

        return function (token, data) {
          var sum = 0; // is the token specific to a field?

          if (token.field) {
            const value = getAttrFn(data, token.field);

            if (!token.regex && value) {
              sum += 1 / field_count;
            } else {
              sum += scoreValue(value, token, 1);
            }
          } else {
            iterate$1(weights, (weight, field) => {
              sum += scoreValue(getAttrFn(data, field), token, weight);
            });
          }

          return sum / field_count;
        };
      }();

      if (token_count === 1) {
        return function (data) {
          return scoreObject(tokens[0], data);
        };
      }

      if (search.options.conjunction === 'and') {
        return function (data) {
          var score,
              sum = 0;

          for (let token of tokens) {
            score = scoreObject(token, data);
            if (score <= 0) return 0;
            sum += score;
          }

          return sum / token_count;
        };
      } else {
        return function (data) {
          var sum = 0;
          iterate$1(tokens, token => {
            sum += scoreObject(token, data);
          });
          return sum / token_count;
        };
      }
    }

    /**
     * Returns a function that can be used to compare two
     * results, for sorting purposes. If no sorting should
     * be performed, `null` will be returned.
     *
     * @return function(a,b)
     */
    getSortFunction(query, options) {
      var search = this.prepareSearch(query, options);
      return this._getSortFunction(search);
    }

    _getSortFunction(search) {
      var implicit_score,
          sort_flds = [];
      const self = this,
            options = search.options,
            sort = !search.query && options.sort_empty ? options.sort_empty : options.sort;

      if (typeof sort == 'function') {
        return sort.bind(this);
      }
      /**
       * Fetches the specified sort field value
       * from a search result item.
       *
       */


      const get_field = function get_field(name, result) {
        if (name === '$score') return result.score;
        return search.getAttrFn(self.items[result.id], name);
      }; // parse options


      if (sort) {
        for (let s of sort) {
          if (search.query || s.field !== '$score') {
            sort_flds.push(s);
          }
        }
      } // the "$score" field is implied to be the primary
      // sort field, unless it's manually specified


      if (search.query) {
        implicit_score = true;

        for (let fld of sort_flds) {
          if (fld.field === '$score') {
            implicit_score = false;
            break;
          }
        }

        if (implicit_score) {
          sort_flds.unshift({
            field: '$score',
            direction: 'desc'
          });
        } // without a search.query, all items will have the same score

      } else {
        sort_flds = sort_flds.filter(fld => fld.field !== '$score');
      } // build function


      const sort_flds_count = sort_flds.length;

      if (!sort_flds_count) {
        return null;
      }

      return function (a, b) {
        var result, field;

        for (let sort_fld of sort_flds) {
          field = sort_fld.field;
          let multiplier = sort_fld.direction === 'desc' ? -1 : 1;
          result = multiplier * cmp(get_field(field, a), get_field(field, b));
          if (result) return result;
        }

        return 0;
      };
    }

    /**
     * Parses a search query and returns an object
     * with tokens and fields ready to be populated
     * with results.
     *
     */
    prepareSearch(query, optsUser) {
      const weights = {};
      var options = Object.assign({}, optsUser);
      propToArray(options, 'sort');
      propToArray(options, 'sort_empty'); // convert fields to new format

      if (options.fields) {
        propToArray(options, 'fields');
        const fields = [];
        options.fields.forEach(field => {
          if (typeof field == 'string') {
            field = {
              field: field,
              weight: 1
            };
          }

          fields.push(field);
          weights[field.field] = 'weight' in field ? field.weight : 1;
        });
        options.fields = fields;
      }

      return {
        options: options,
        query: query.toLowerCase().trim(),
        tokens: this.tokenize(query, options.respect_word_boundaries, weights),
        total: 0,
        items: [],
        weights: weights,
        getAttrFn: options.nesting ? getAttrNesting : getAttr$1
      };
    }

    /**
     * Searches through all items and returns a sorted array of matches.
     *
     */
    search(query, options) {
      var self = this,
          score,
          search;
      search = this.prepareSearch(query, options);
      options = search.options;
      query = search.query; // generate result scoring function

      const fn_score = options.score || self._getScoreFunction(search); // perform search and sort


      if (query.length) {
        iterate$1(self.items, (item, id) => {
          score = fn_score(item);

          if (options.filter === false || score > 0) {
            search.items.push({
              'score': score,
              'id': id
            });
          }
        });
      } else {
        iterate$1(self.items, (_, id) => {
          search.items.push({
            'score': 1,
            'id': id
          });
        });
      }

      const fn_sort = self._getSortFunction(search);

      if (fn_sort) search.items.sort(fn_sort); // apply limits

      search.total = search.items.length;

      if (typeof options.limit === 'number') {
        search.items = search.items.slice(0, options.limit);
      }

      return search;
    }

  }

  /**
   * Iterates over arrays and hashes.
   *
   * ```
   * iterate(this.items, function(item, id) {
   *    // invoked for each item
   * });
   * ```
   *
   */

  const iterate = (object, callback) => {
    if (Array.isArray(object)) {
      object.forEach(callback);
    } else {
      for (var key in object) {
        if (object.hasOwnProperty(key)) {
          callback(object[key], key);
        }
      }
    }
  };

  /**
   * Return a dom element from either a dom query string, jQuery object, a dom element or html string
   * https://stackoverflow.com/questions/494143/creating-a-new-dom-element-from-an-html-string-using-built-in-dom-methods-or-pro/35385518#35385518
   *
   * param query should be {}
   */

  const getDom = query => {
    if (query.jquery) {
      return query[0];
    }

    if (query instanceof HTMLElement) {
      return query;
    }

    if (isHtmlString(query)) {
      var tpl = document.createElement('template');
      tpl.innerHTML = query.trim(); // Never return a text node of whitespace as the result

      return tpl.content.firstChild;
    }

    return document.querySelector(query);
  };
  const isHtmlString = arg => {
    if (typeof arg === 'string' && arg.indexOf('<') > -1) {
      return true;
    }

    return false;
  };
  const escapeQuery = query => {
    return query.replace(/['"\\]/g, '\\$&');
  };
  /**
   * Dispatch an event
   *
   */

  const triggerEvent = (dom_el, event_name) => {
    var event = document.createEvent('HTMLEvents');
    event.initEvent(event_name, true, false);
    dom_el.dispatchEvent(event);
  };
  /**
   * Apply CSS rules to a dom element
   *
   */

  const applyCSS = (dom_el, css) => {
    Object.assign(dom_el.style, css);
  };
  /**
   * Add css classes
   *
   */

  const addClasses = (elmts, ...classes) => {
    var norm_classes = classesArray(classes);
    elmts = castAsArray(elmts);
    elmts.map(el => {
      norm_classes.map(cls => {
        el.classList.add(cls);
      });
    });
  };
  /**
   * Remove css classes
   *
   */

  const removeClasses = (elmts, ...classes) => {
    var norm_classes = classesArray(classes);
    elmts = castAsArray(elmts);
    elmts.map(el => {
      norm_classes.map(cls => {
        el.classList.remove(cls);
      });
    });
  };
  /**
   * Return arguments
   *
   */

  const classesArray = args => {
    var classes = [];
    iterate(args, _classes => {
      if (typeof _classes === 'string') {
        _classes = _classes.trim().split(/[\11\12\14\15\40]/);
      }

      if (Array.isArray(_classes)) {
        classes = classes.concat(_classes);
      }
    });
    return classes.filter(Boolean);
  };
  /**
   * Create an array from arg if it's not already an array
   *
   */

  const castAsArray = arg => {
    if (!Array.isArray(arg)) {
      arg = [arg];
    }

    return arg;
  };
  /**
   * Get the closest node to the evt.target matching the selector
   * Stops at wrapper
   *
   */

  const parentMatch = (target, selector, wrapper) => {
    if (wrapper && !wrapper.contains(target)) {
      return;
    }

    while (target && target.matches) {
      if (target.matches(selector)) {
        return target;
      }

      target = target.parentNode;
    }
  };
  /**
   * Get the first or last item from an array
   *
   * > 0 - right (last)
   * <= 0 - left (first)
   *
   */

  const getTail = (list, direction = 0) => {
    if (direction > 0) {
      return list[list.length - 1];
    }

    return list[0];
  };
  /**
   * Return true if an object is empty
   *
   */

  const isEmptyObject = obj => {
    return Object.keys(obj).length === 0;
  };
  /**
   * Get the index of an element amongst sibling nodes of the same type
   *
   */

  const nodeIndex = (el, amongst) => {
    if (!el) return -1;
    amongst = amongst || el.nodeName;
    var i = 0;

    while (el = el.previousElementSibling) {
      if (el.matches(amongst)) {
        i++;
      }
    }

    return i;
  };
  /**
   * Set attributes of an element
   *
   */

  const setAttr$1 = (el, attrs) => {
    iterate(attrs, (val, attr) => {
      if (val == null) {
        el.removeAttribute(attr);
      } else {
        el.setAttribute(attr, '' + val);
      }
    });
  };
  /**
   * Replace a node
   */

  const replaceNode = (existing, replacement) => {
    if (existing.parentNode) existing.parentNode.replaceChild(replacement, existing);
  };

  /**
   * highlight v3 | MIT license | Johann Burkard <jb@eaio.com>
   * Highlights arbitrary terms in a node.
   *
   * - Modified by Marshal <beatgates@gmail.com> 2011-6-24 (added regex)
   * - Modified by Brian Reavis <brian@thirdroute.com> 2012-8-27 (cleanup)
   */
  const highlight$1 = (element, regex) => {
    if (regex === null) return; // convet string to regex

    if (typeof regex === 'string') {
      if (!regex.length) return;
      regex = new RegExp(regex, 'i');
    } // Wrap matching part of text node with highlighting <span>, e.g.
    // Soccer  ->  <span class="highlight">Soc</span>cer  for regex = /soc/i


    const highlightText = node => {
      var match = node.data.match(regex);

      if (match && node.data.length > 0) {
        var spannode = document.createElement('span');
        spannode.className = 'highlight';
        var middlebit = node.splitText(match.index);
        middlebit.splitText(match[0].length);
        var middleclone = middlebit.cloneNode(true);
        spannode.appendChild(middleclone);
        replaceNode(middlebit, spannode);
        return 1;
      }

      return 0;
    }; // Recurse element node, looking for child text nodes to highlight, unless element
    // is childless, <script>, <style>, or already highlighted: <span class="hightlight">


    const highlightChildren = node => {
      if (node.nodeType === 1 && node.childNodes && !/(script|style)/i.test(node.tagName) && (node.className !== 'highlight' || node.tagName !== 'SPAN')) {
        Array.from(node.childNodes).forEach(element => {
          highlightRecursive(element);
        });
      }
    };

    const highlightRecursive = node => {
      if (node.nodeType === 3) {
        return highlightText(node);
      }

      highlightChildren(node);
      return 0;
    };

    highlightRecursive(element);
  };
  /**
   * removeHighlight fn copied from highlight v5 and
   * edited to remove with(), pass js strict mode, and use without jquery
   */

  const removeHighlight = el => {
    var elements = el.querySelectorAll("span.highlight");
    Array.prototype.forEach.call(elements, function (el) {
      var parent = el.parentNode;
      parent.replaceChild(el.firstChild, el);
      parent.normalize();
    });
  };

  const KEY_A = 65;
  const KEY_RETURN = 13;
  const KEY_ESC = 27;
  const KEY_LEFT = 37;
  const KEY_UP = 38;
  const KEY_RIGHT = 39;
  const KEY_DOWN = 40;
  const KEY_BACKSPACE = 8;
  const KEY_DELETE = 46;
  const KEY_TAB = 9;
  const IS_MAC = typeof navigator === 'undefined' ? false : /Mac/.test(navigator.userAgent);
  const KEY_SHORTCUT = IS_MAC ? 'metaKey' : 'ctrlKey'; // ctrl key or apple key for ma

  var defaults = {
    options: [],
    optgroups: [],
    plugins: [],
    delimiter: ',',
    splitOn: null,
    // regexp or string for splitting up values from a paste command
    persist: true,
    diacritics: true,
    create: null,
    createOnBlur: false,
    createFilter: null,
    highlight: true,
    openOnFocus: true,
    shouldOpen: null,
    maxOptions: 50,
    maxItems: null,
    hideSelected: null,
    duplicates: false,
    addPrecedence: false,
    selectOnTab: false,
    preload: null,
    allowEmptyOption: false,
    //closeAfterSelect: false,
    loadThrottle: 300,
    loadingClass: 'loading',
    dataAttr: null,
    //'data-data',
    optgroupField: 'optgroup',
    valueField: 'value',
    labelField: 'text',
    disabledField: 'disabled',
    optgroupLabelField: 'label',
    optgroupValueField: 'value',
    lockOptgroupOrder: false,
    sortField: '$order',
    searchField: ['text'],
    searchConjunction: 'and',
    mode: null,
    wrapperClass: 'ts-wrapper',
    controlClass: 'ts-control',
    dropdownClass: 'ts-dropdown',
    dropdownContentClass: 'ts-dropdown-content',
    itemClass: 'item',
    optionClass: 'option',
    dropdownParent: null,
    controlInput: '<input type="text" autocomplete="off" size="1" />',
    copyClassesToDropdown: false,
    placeholder: null,
    hidePlaceholder: null,
    shouldLoad: function (query) {
      return query.length > 0;
    },

    /*
    load                 : null, // function(query, callback) { ... }
    score                : null, // function(search) { ... }
    onInitialize         : null, // function() { ... }
    onChange             : null, // function(value) { ... }
    onItemAdd            : null, // function(value, $item) { ... }
    onItemRemove         : null, // function(value) { ... }
    onClear              : null, // function() { ... }
    onOptionAdd          : null, // function(value, data) { ... }
    onOptionRemove       : null, // function(value) { ... }
    onOptionClear        : null, // function() { ... }
    onOptionGroupAdd     : null, // function(id, data) { ... }
    onOptionGroupRemove  : null, // function(id) { ... }
    onOptionGroupClear   : null, // function() { ... }
    onDropdownOpen       : null, // function(dropdown) { ... }
    onDropdownClose      : null, // function(dropdown) { ... }
    onType               : null, // function(str) { ... }
    onDelete             : null, // function(values) { ... }
    */
    render: {
      /*
      item: null,
      optgroup: null,
      optgroup_header: null,
      option: null,
      option_create: null
      */
    }
  };

  /**
   * Converts a scalar to its best string representation
   * for hash keys and HTML attribute values.
   *
   * Transformations:
   *   'str'     -> 'str'
   *   null      -> ''
   *   undefined -> ''
   *   true      -> '1'
   *   false     -> '0'
   *   0         -> '0'
   *   1         -> '1'
   *
   */
  const hash_key = value => {
    if (typeof value === 'undefined' || value === null) return null;
    return get_hash(value);
  };
  const get_hash = value => {
    if (typeof value === 'boolean') return value ? '1' : '0';
    return value + '';
  };
  /**
   * Escapes a string for use within HTML.
   *
   */

  const escape_html = str => {
    return (str + '').replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
  };
  /**
   * Debounce the user provided load function
   *
   */

  const loadDebounce = (fn, delay) => {
    var timeout;
    return function (value, callback) {
      var self = this;

      if (timeout) {
        self.loading = Math.max(self.loading - 1, 0);
        clearTimeout(timeout);
      }

      timeout = setTimeout(function () {
        timeout = null;
        self.loadedSearches[value] = true;
        fn.call(self, value, callback);
      }, delay);
    };
  };
  /**
   * Debounce all fired events types listed in `types`
   * while executing the provided `fn`.
   *
   */

  const debounce_events = (self, types, fn) => {
    var type;
    var trigger = self.trigger;
    var event_args = {}; // override trigger method

    self.trigger = function () {
      var type = arguments[0];

      if (types.indexOf(type) !== -1) {
        event_args[type] = arguments;
      } else {
        return trigger.apply(self, arguments);
      }
    }; // invoke provided function


    fn.apply(self, []);
    self.trigger = trigger; // trigger queued events

    for (type of types) {
      if (type in event_args) {
        trigger.apply(self, event_args[type]);
      }
    }
  };
  /**
   * Determines the current selection within a text input control.
   * Returns an object containing:
   *   - start
   *   - length
   *
   */

  const getSelection = input => {
    return {
      start: input.selectionStart || 0,
      length: (input.selectionEnd || 0) - (input.selectionStart || 0)
    };
  };
  /**
   * Prevent default
   *
   */

  const preventDefault = (evt, stop = false) => {
    if (evt) {
      evt.preventDefault();

      if (stop) {
        evt.stopPropagation();
      }
    }
  };
  /**
   * Add event helper
   *
   */

  const addEvent = (target, type, callback, options) => {
    target.addEventListener(type, callback, options);
  };
  /**
   * Return true if the requested key is down
   * Will return false if more than one control character is pressed ( when [ctrl+shift+a] != [ctrl+a] )
   * The current evt may not always set ( eg calling advanceSelection() )
   *
   */

  const isKeyDown = (key_name, evt) => {
    if (!evt) {
      return false;
    }

    if (!evt[key_name]) {
      return false;
    }

    var count = (evt.altKey ? 1 : 0) + (evt.ctrlKey ? 1 : 0) + (evt.shiftKey ? 1 : 0) + (evt.metaKey ? 1 : 0);

    if (count === 1) {
      return true;
    }

    return false;
  };
  /**
   * Get the id of an element
   * If the id attribute is not set, set the attribute with the given id
   *
   */

  const getId = (el, id) => {
    const existing_id = el.getAttribute('id');

    if (existing_id) {
      return existing_id;
    }

    el.setAttribute('id', id);
    return id;
  };
  /**
   * Returns a string with backslashes added before characters that need to be escaped.
   */

  const addSlashes = str => {
    return str.replace(/[\\"']/g, '\\$&');
  };
  /**
   *
   */

  const append = (parent, node) => {
    if (node) parent.append(node);
  };

  function getSettings(input, settings_user) {
    var settings = Object.assign({}, defaults, settings_user);
    var attr_data = settings.dataAttr;
    var field_label = settings.labelField;
    var field_value = settings.valueField;
    var field_disabled = settings.disabledField;
    var field_optgroup = settings.optgroupField;
    var field_optgroup_label = settings.optgroupLabelField;
    var field_optgroup_value = settings.optgroupValueField;
    var tag_name = input.tagName.toLowerCase();
    var placeholder = input.getAttribute('placeholder') || input.getAttribute('data-placeholder');

    if (!placeholder && !settings.allowEmptyOption) {
      let option = input.querySelector('option[value=""]');

      if (option) {
        placeholder = option.textContent;
      }
    }

    var settings_element = {
      placeholder: placeholder,
      options: [],
      optgroups: [],
      items: [],
      maxItems: null
    };
    /**
     * Initialize from a <select> element.
     *
     */

    var init_select = () => {
      var tagName;
      var options = settings_element.options;
      var optionsMap = {};
      var group_count = 1;

      var readData = el => {
        var data = Object.assign({}, el.dataset); // get plain object from DOMStringMap

        var json = attr_data && data[attr_data];

        if (typeof json === 'string' && json.length) {
          data = Object.assign(data, JSON.parse(json));
        }

        return data;
      };

      var addOption = (option, group) => {
        var value = hash_key(option.value);
        if (value == null) return;
        if (!value && !settings.allowEmptyOption) return; // if the option already exists, it's probably been
        // duplicated in another optgroup. in this case, push
        // the current group to the "optgroup" property on the
        // existing option so that it's rendered in both places.

        if (optionsMap.hasOwnProperty(value)) {
          if (group) {
            var arr = optionsMap[value][field_optgroup];

            if (!arr) {
              optionsMap[value][field_optgroup] = group;
            } else if (!Array.isArray(arr)) {
              optionsMap[value][field_optgroup] = [arr, group];
            } else {
              arr.push(group);
            }
          }
        } else {
          var option_data = readData(option);
          option_data[field_label] = option_data[field_label] || option.textContent;
          option_data[field_value] = option_data[field_value] || value;
          option_data[field_disabled] = option_data[field_disabled] || option.disabled;
          option_data[field_optgroup] = option_data[field_optgroup] || group;
          option_data.$option = option;
          optionsMap[value] = option_data;
          options.push(option_data);
        }

        if (option.selected) {
          settings_element.items.push(value);
        }
      };

      var addGroup = optgroup => {
        var id, optgroup_data;
        optgroup_data = readData(optgroup);
        optgroup_data[field_optgroup_label] = optgroup_data[field_optgroup_label] || optgroup.getAttribute('label') || '';
        optgroup_data[field_optgroup_value] = optgroup_data[field_optgroup_value] || group_count++;
        optgroup_data[field_disabled] = optgroup_data[field_disabled] || optgroup.disabled;
        settings_element.optgroups.push(optgroup_data);
        id = optgroup_data[field_optgroup_value];
        iterate(optgroup.children, option => {
          addOption(option, id);
        });
      };

      settings_element.maxItems = input.hasAttribute('multiple') ? null : 1;
      iterate(input.children, child => {
        tagName = child.tagName.toLowerCase();

        if (tagName === 'optgroup') {
          addGroup(child);
        } else if (tagName === 'option') {
          addOption(child);
        }
      });
    };
    /**
     * Initialize from a <input type="text"> element.
     *
     */


    var init_textbox = () => {
      const data_raw = input.getAttribute(attr_data);

      if (!data_raw) {
        var value = input.value.trim() || '';
        if (!settings.allowEmptyOption && !value.length) return;
        const values = value.split(settings.delimiter);
        iterate(values, value => {
          const option = {};
          option[field_label] = value;
          option[field_value] = value;
          settings_element.options.push(option);
        });
        settings_element.items = values;
      } else {
        settings_element.options = JSON.parse(data_raw);
        iterate(settings_element.options, opt => {
          settings_element.items.push(opt[field_value]);
        });
      }
    };

    if (tag_name === 'select') {
      init_select();
    } else {
      init_textbox();
    }

    return Object.assign({}, defaults, settings_element, settings_user);
  }

  var instance_i = 0;
  class TomSelect extends MicroPlugin(MicroEvent) {
    // @deprecated 1.8
    constructor(input_arg, user_settings) {
      super();
      this.control_input = void 0;
      this.wrapper = void 0;
      this.dropdown = void 0;
      this.control = void 0;
      this.dropdown_content = void 0;
      this.focus_node = void 0;
      this.order = 0;
      this.settings = void 0;
      this.input = void 0;
      this.tabIndex = void 0;
      this.is_select_tag = void 0;
      this.rtl = void 0;
      this.inputId = void 0;
      this._destroy = void 0;
      this.sifter = void 0;
      this.isOpen = false;
      this.isDisabled = false;
      this.isRequired = void 0;
      this.isInvalid = false;
      this.isValid = true;
      this.isLocked = false;
      this.isFocused = false;
      this.isInputHidden = false;
      this.isSetup = false;
      this.ignoreFocus = false;
      this.ignoreHover = false;
      this.hasOptions = false;
      this.currentResults = void 0;
      this.lastValue = '';
      this.caretPos = 0;
      this.loading = 0;
      this.loadedSearches = {};
      this.activeOption = null;
      this.activeItems = [];
      this.optgroups = {};
      this.options = {};
      this.userOptions = {};
      this.items = [];
      instance_i++;
      var dir;
      var input = getDom(input_arg);

      if (input.tomselect) {
        throw new Error('Tom Select already initialized on this element');
      }

      input.tomselect = this; // detect rtl environment

      var computedStyle = window.getComputedStyle && window.getComputedStyle(input, null);
      dir = computedStyle.getPropertyValue('direction'); // setup default state

      const settings = getSettings(input, user_settings);
      this.settings = settings;
      this.input = input;
      this.tabIndex = input.tabIndex || 0;
      this.is_select_tag = input.tagName.toLowerCase() === 'select';
      this.rtl = /rtl/i.test(dir);
      this.inputId = getId(input, 'tomselect-' + instance_i);
      this.isRequired = input.required; // search system

      this.sifter = new Sifter(this.options, {
        diacritics: settings.diacritics
      }); // option-dependent defaults

      settings.mode = settings.mode || (settings.maxItems === 1 ? 'single' : 'multi');

      if (typeof settings.hideSelected !== 'boolean') {
        settings.hideSelected = settings.mode === 'multi';
      }

      if (typeof settings.hidePlaceholder !== 'boolean') {
        settings.hidePlaceholder = settings.mode !== 'multi';
      } // set up createFilter callback


      var filter = settings.createFilter;

      if (typeof filter !== 'function') {
        if (typeof filter === 'string') {
          filter = new RegExp(filter);
        }

        if (filter instanceof RegExp) {
          settings.createFilter = input => filter.test(input);
        } else {
          settings.createFilter = value => {
            return this.settings.duplicates || !this.options[value];
          };
        }
      }

      this.initializePlugins(settings.plugins);
      this.setupCallbacks();
      this.setupTemplates(); // Create all elements

      const wrapper = getDom('<div>');
      const control = getDom('<div>');

      const dropdown = this._render('dropdown');

      const dropdown_content = getDom(`<div role="listbox" tabindex="-1">`);
      const classes = this.input.getAttribute('class') || '';
      const inputMode = settings.mode;
      var control_input;
      addClasses(wrapper, settings.wrapperClass, classes, inputMode);
      addClasses(control, settings.controlClass);
      append(wrapper, control);
      addClasses(dropdown, settings.dropdownClass, inputMode);

      if (settings.copyClassesToDropdown) {
        addClasses(dropdown, classes);
      }

      addClasses(dropdown_content, settings.dropdownContentClass);
      append(dropdown, dropdown_content);
      getDom(settings.dropdownParent || wrapper).appendChild(dropdown); // default controlInput

      if (isHtmlString(settings.controlInput)) {
        control_input = getDom(settings.controlInput); // set attributes

        var attrs = ['autocorrect', 'autocapitalize', 'autocomplete'];
        iterate$1(attrs, attr => {
          if (input.getAttribute(attr)) {
            setAttr$1(control_input, {
              [attr]: input.getAttribute(attr)
            });
          }
        });
        control_input.tabIndex = -1;
        control.appendChild(control_input);
        this.focus_node = control_input; // dom element
      } else if (settings.controlInput) {
        control_input = getDom(settings.controlInput);
        this.focus_node = control_input;
      } else {
        control_input = getDom('<input/>');
        this.focus_node = control;
      }

      this.wrapper = wrapper;
      this.dropdown = dropdown;
      this.dropdown_content = dropdown_content;
      this.control = control;
      this.control_input = control_input;
      this.setup();
    }
    /**
     * set up event bindings.
     *
     */


    setup() {
      const self = this;
      const settings = self.settings;
      const control_input = self.control_input;
      const dropdown = self.dropdown;
      const dropdown_content = self.dropdown_content;
      const wrapper = self.wrapper;
      const control = self.control;
      const input = self.input;
      const focus_node = self.focus_node;
      const passive_event = {
        passive: true
      };
      const listboxId = self.inputId + '-ts-dropdown';
      setAttr$1(dropdown_content, {
        id: listboxId
      });
      setAttr$1(focus_node, {
        role: 'combobox',
        'aria-haspopup': 'listbox',
        'aria-expanded': 'false',
        'aria-controls': listboxId
      });
      const control_id = getId(focus_node, self.inputId + '-ts-control');
      const query = "label[for='" + escapeQuery(self.inputId) + "']";
      const label = document.querySelector(query);
      const label_click = self.focus.bind(self);

      if (label) {
        addEvent(label, 'click', label_click);
        setAttr$1(label, {
          for: control_id
        });
        const label_id = getId(label, self.inputId + '-ts-label');
        setAttr$1(focus_node, {
          'aria-labelledby': label_id
        });
        setAttr$1(dropdown_content, {
          'aria-labelledby': label_id
        });
      }

      wrapper.style.width = input.style.width;

      if (self.plugins.names.length) {
        const classes_plugins = 'plugin-' + self.plugins.names.join(' plugin-');
        addClasses([wrapper, dropdown], classes_plugins);
      }

      if ((settings.maxItems === null || settings.maxItems > 1) && self.is_select_tag) {
        setAttr$1(input, {
          multiple: 'multiple'
        });
      }

      if (settings.placeholder) {
        setAttr$1(control_input, {
          placeholder: settings.placeholder
        });
      } // if splitOn was not passed in, construct it from the delimiter to allow pasting universally


      if (!settings.splitOn && settings.delimiter) {
        settings.splitOn = new RegExp('\\s*' + escape_regex(settings.delimiter) + '+\\s*');
      } // debounce user defined load() if loadThrottle > 0
      // after initializePlugins() so plugins can create/modify user defined loaders


      if (settings.load && settings.loadThrottle) {
        settings.load = loadDebounce(settings.load, settings.loadThrottle);
      }

      self.control_input.type = input.type;
      addEvent(dropdown, 'mousemove', () => {
        self.ignoreHover = false;
      });
      addEvent(dropdown, 'mouseenter', e => {
        var target_match = parentMatch(e.target, '[data-selectable]', dropdown);
        if (target_match) self.onOptionHover(e, target_match);
      }, {
        capture: true
      }); // clicking on an option should select it

      addEvent(dropdown, 'click', evt => {
        const option = parentMatch(evt.target, '[data-selectable]');

        if (option) {
          self.onOptionSelect(evt, option);
          preventDefault(evt, true);
        }
      });
      addEvent(control, 'click', evt => {
        var target_match = parentMatch(evt.target, '[data-ts-item]', control);

        if (target_match && self.onItemSelect(evt, target_match)) {
          preventDefault(evt, true);
          return;
        } // retain focus (see control_input mousedown)


        if (control_input.value != '') {
          return;
        }

        self.onClick();
        preventDefault(evt, true);
      }); // keydown on focus_node for arrow_down/arrow_up

      addEvent(focus_node, 'keydown', e => self.onKeyDown(e)); // keypress and input/keyup

      addEvent(control_input, 'keypress', e => self.onKeyPress(e));
      addEvent(control_input, 'input', e => self.onInput(e));
      addEvent(focus_node, 'blur', e => self.onBlur(e));
      addEvent(focus_node, 'focus', e => self.onFocus(e));
      addEvent(control_input, 'paste', e => self.onPaste(e));

      const doc_mousedown = evt => {
        // blur if target is outside of this instance
        // dropdown is not always inside wrapper
        const target = evt.composedPath()[0];

        if (!wrapper.contains(target) && !dropdown.contains(target)) {
          if (self.isFocused) {
            self.blur();
          }

          self.inputState();
          return;
        } // retain focus by preventing native handling. if the
        // event target is the input it should not be modified.
        // otherwise, text selection within the input won't work.
        // Fixes bug #212 which is no covered by tests


        if (target == control_input && self.isOpen) {
          evt.stopPropagation(); // clicking anywhere in the control should not blur the control_input (which would close the dropdown)
        } else {
          preventDefault(evt, true);
        }
      };

      const win_scroll = () => {
        if (self.isOpen) {
          self.positionDropdown();
        }
      };

      addEvent(document, 'mousedown', doc_mousedown);
      addEvent(window, 'scroll', win_scroll, passive_event);
      addEvent(window, 'resize', win_scroll, passive_event);

      this._destroy = () => {
        document.removeEventListener('mousedown', doc_mousedown);
        window.removeEventListener('scroll', win_scroll);
        window.removeEventListener('resize', win_scroll);
        if (label) label.removeEventListener('click', label_click);
      }; // store original html and tab index so that they can be
      // restored when the destroy() method is called.


      this.revertSettings = {
        innerHTML: input.innerHTML,
        tabIndex: input.tabIndex
      };
      input.tabIndex = -1;
      input.insertAdjacentElement('afterend', self.wrapper);
      self.sync(false);
      settings.items = [];
      delete settings.optgroups;
      delete settings.options;
      addEvent(input, 'invalid', () => {
        if (self.isValid) {
          self.isValid = false;
          self.isInvalid = true;
          self.refreshState();
        }
      });
      self.updateOriginalInput();
      self.refreshItems();
      self.close(false);
      self.inputState();
      self.isSetup = true;

      if (input.disabled) {
        self.disable();
      } else {
        self.enable(); //sets tabIndex
      }

      self.on('change', this.onChange);
      addClasses(input, 'tomselected', 'ts-hidden-accessible');
      self.trigger('initialize'); // preload options

      if (settings.preload === true) {
        self.preload();
      }
    }
    /**
     * Register options and optgroups
     *
     */


    setupOptions(options = [], optgroups = []) {
      // build options table
      this.addOptions(options); // build optgroup table

      iterate$1(optgroups, optgroup => {
        this.registerOptionGroup(optgroup);
      });
    }
    /**
     * Sets up default rendering functions.
     */


    setupTemplates() {
      var self = this;
      var field_label = self.settings.labelField;
      var field_optgroup = self.settings.optgroupLabelField;
      var templates = {
        'optgroup': data => {
          let optgroup = document.createElement('div');
          optgroup.className = 'optgroup';
          optgroup.appendChild(data.options);
          return optgroup;
        },
        'optgroup_header': (data, escape) => {
          return '<div class="optgroup-header">' + escape(data[field_optgroup]) + '</div>';
        },
        'option': (data, escape) => {
          return '<div>' + escape(data[field_label]) + '</div>';
        },
        'item': (data, escape) => {
          return '<div>' + escape(data[field_label]) + '</div>';
        },
        'option_create': (data, escape) => {
          return '<div class="create">Add <strong>' + escape(data.input) + '</strong>&hellip;</div>';
        },
        'no_results': () => {
          return '<div class="no-results">No results found</div>';
        },
        'loading': () => {
          return '<div class="spinner"></div>';
        },
        'not_loading': () => {},
        'dropdown': () => {
          return '<div></div>';
        }
      };
      self.settings.render = Object.assign({}, templates, self.settings.render);
    }
    /**
     * Maps fired events to callbacks provided
     * in the settings used when creating the control.
     */


    setupCallbacks() {
      var key, fn;
      var callbacks = {
        'initialize': 'onInitialize',
        'change': 'onChange',
        'item_add': 'onItemAdd',
        'item_remove': 'onItemRemove',
        'item_select': 'onItemSelect',
        'clear': 'onClear',
        'option_add': 'onOptionAdd',
        'option_remove': 'onOptionRemove',
        'option_clear': 'onOptionClear',
        'optgroup_add': 'onOptionGroupAdd',
        'optgroup_remove': 'onOptionGroupRemove',
        'optgroup_clear': 'onOptionGroupClear',
        'dropdown_open': 'onDropdownOpen',
        'dropdown_close': 'onDropdownClose',
        'type': 'onType',
        'load': 'onLoad',
        'focus': 'onFocus',
        'blur': 'onBlur'
      };

      for (key in callbacks) {
        fn = this.settings[callbacks[key]];
        if (fn) this.on(key, fn);
      }
    }
    /**
     * Sync the Tom Select instance with the original input or select
     *
     */


    sync(get_settings = true) {
      const self = this;
      const settings = get_settings ? getSettings(self.input, {
        delimiter: self.settings.delimiter
      }) : self.settings;
      self.setupOptions(settings.options, settings.optgroups);
      self.setValue(settings.items || [], true); // silent prevents recursion

      self.lastQuery = null; // so updated options will be displayed in dropdown
    }
    /**
     * Triggered when the main control element
     * has a click event.
     *
     */


    onClick() {
      var self = this;

      if (self.activeItems.length > 0) {
        self.clearActiveItems();
        self.focus();
        return;
      }

      if (self.isFocused && self.isOpen) {
        self.blur();
      } else {
        self.focus();
      }
    }
    /**
     * @deprecated v1.7
     *
     */


    onMouseDown() {}
    /**
     * Triggered when the value of the control has been changed.
     * This should propagate the event to the original DOM
     * input / select element.
     */


    onChange() {
      triggerEvent(this.input, 'input');
      triggerEvent(this.input, 'change');
    }
    /**
     * Triggered on <input> paste.
     *
     */


    onPaste(e) {
      var self = this;

      if (self.isInputHidden || self.isLocked) {
        preventDefault(e);
        return;
      } // If a regex or string is included, this will split the pasted
      // input and create Items for each separate value


      if (!self.settings.splitOn) {
        return;
      } // Wait for pasted text to be recognized in value


      setTimeout(() => {
        var pastedText = self.inputValue();

        if (!pastedText.match(self.settings.splitOn)) {
          return;
        }

        var splitInput = pastedText.trim().split(self.settings.splitOn);
        iterate$1(splitInput, piece => {
          const hash = hash_key(piece);

          if (hash) {
            if (this.options[piece]) {
              self.addItem(piece);
            } else {
              self.createItem(piece);
            }
          }
        });
      }, 0);
    }
    /**
     * Triggered on <input> keypress.
     *
     */


    onKeyPress(e) {
      var self = this;

      if (self.isLocked) {
        preventDefault(e);
        return;
      }

      var character = String.fromCharCode(e.keyCode || e.which);

      if (self.settings.create && self.settings.mode === 'multi' && character === self.settings.delimiter) {
        self.createItem();
        preventDefault(e);
        return;
      }
    }
    /**
     * Triggered on <input> keydown.
     *
     */


    onKeyDown(e) {
      var self = this;
      self.ignoreHover = true;

      if (self.isLocked) {
        if (e.keyCode !== KEY_TAB) {
          preventDefault(e);
        }

        return;
      }

      switch (e.keyCode) {
        // ctrl+A: select all
        case KEY_A:
          if (isKeyDown(KEY_SHORTCUT, e)) {
            if (self.control_input.value == '') {
              preventDefault(e);
              self.selectAll();
              return;
            }
          }

          break;
        // esc: close dropdown

        case KEY_ESC:
          if (self.isOpen) {
            preventDefault(e, true);
            self.close();
          }

          self.clearActiveItems();
          return;
        // down: open dropdown or move selection down

        case KEY_DOWN:
          if (!self.isOpen && self.hasOptions) {
            self.open();
          } else if (self.activeOption) {
            let next = self.getAdjacent(self.activeOption, 1);
            if (next) self.setActiveOption(next);
          }

          preventDefault(e);
          return;
        // up: move selection up

        case KEY_UP:
          if (self.activeOption) {
            let prev = self.getAdjacent(self.activeOption, -1);
            if (prev) self.setActiveOption(prev);
          }

          preventDefault(e);
          return;
        // return: select active option

        case KEY_RETURN:
          if (self.canSelect(self.activeOption)) {
            self.onOptionSelect(e, self.activeOption);
            preventDefault(e); // if the option_create=null, the dropdown might be closed
          } else if (self.settings.create && self.createItem()) {
            preventDefault(e); // don't submit form when searching for a value
          } else if (document.activeElement == self.control_input && self.isOpen) {
            preventDefault(e);
          }

          return;
        // left: modifiy item selection to the left

        case KEY_LEFT:
          self.advanceSelection(-1, e);
          return;
        // right: modifiy item selection to the right

        case KEY_RIGHT:
          self.advanceSelection(1, e);
          return;
        // tab: select active option and/or create item

        case KEY_TAB:
          if (self.settings.selectOnTab) {
            if (self.canSelect(self.activeOption)) {
              self.onOptionSelect(e, self.activeOption); // prevent default [tab] behaviour of jump to the next field
              // if select isFull, then the dropdown won't be open and [tab] will work normally

              preventDefault(e);
            }

            if (self.settings.create && self.createItem()) {
              preventDefault(e);
            }
          }

          return;
        // delete|backspace: delete items

        case KEY_BACKSPACE:
        case KEY_DELETE:
          self.deleteSelection(e);
          return;
      } // don't enter text in the control_input when active items are selected


      if (self.isInputHidden && !isKeyDown(KEY_SHORTCUT, e)) {
        preventDefault(e);
      }
    }
    /**
     * Triggered on <input> keyup.
     *
     */


    onInput(e) {
      var self = this;

      if (self.isLocked) {
        return;
      }

      var value = self.inputValue();

      if (self.lastValue !== value) {
        self.lastValue = value;

        if (self.settings.shouldLoad.call(self, value)) {
          self.load(value);
        }

        self.refreshOptions();
        self.trigger('type', value);
      }
    }
    /**
     * Triggered when the user rolls over
     * an option in the autocomplete dropdown menu.
     *
     */


    onOptionHover(evt, option) {
      if (this.ignoreHover) return;
      this.setActiveOption(option, false);
    }
    /**
     * Triggered on <input> focus.
     *
     */


    onFocus(e) {
      var self = this;
      var wasFocused = self.isFocused;

      if (self.isDisabled) {
        self.blur();
        preventDefault(e);
        return;
      }

      if (self.ignoreFocus) return;
      self.isFocused = true;
      if (self.settings.preload === 'focus') self.preload();
      if (!wasFocused) self.trigger('focus');

      if (!self.activeItems.length) {
        self.showInput();
        self.refreshOptions(!!self.settings.openOnFocus);
      }

      self.refreshState();
    }
    /**
     * Triggered on <input> blur.
     *
     */


    onBlur(e) {
      if (document.hasFocus() === false) return;
      var self = this;
      if (!self.isFocused) return;
      self.isFocused = false;
      self.ignoreFocus = false;

      var deactivate = () => {
        self.close();
        self.setActiveItem();
        self.setCaret(self.items.length);
        self.trigger('blur');
      };

      if (self.settings.create && self.settings.createOnBlur) {
        self.createItem(null, deactivate);
      } else {
        deactivate();
      }
    }
    /**
     * Triggered when the user clicks on an option
     * in the autocomplete dropdown menu.
     *
     */


    onOptionSelect(evt, option) {
      var value,
          self = this; // should not be possible to trigger a option under a disabled optgroup

      if (option.parentElement && option.parentElement.matches('[data-disabled]')) {
        return;
      }

      if (option.classList.contains('create')) {
        self.createItem(null, () => {
          if (self.settings.closeAfterSelect) {
            self.close();
          }
        });
      } else {
        value = option.dataset.value;

        if (typeof value !== 'undefined') {
          self.lastQuery = null;
          self.addItem(value);

          if (self.settings.closeAfterSelect) {
            self.close();
          }

          if (!self.settings.hideSelected && evt.type && /click/.test(evt.type)) {
            self.setActiveOption(option);
          }
        }
      }
    }
    /**
     * Return true if the given option can be selected
     *
     */


    canSelect(option) {
      if (this.isOpen && option && this.dropdown_content.contains(option)) {
        return true;
      }

      return false;
    }
    /**
     * Triggered when the user clicks on an item
     * that has been selected.
     *
     */


    onItemSelect(evt, item) {
      var self = this;

      if (!self.isLocked && self.settings.mode === 'multi') {
        preventDefault(evt);
        self.setActiveItem(item, evt);
        return true;
      }

      return false;
    }
    /**
     * Determines whether or not to invoke
     * the user-provided option provider / loader
     *
     * Note, there is a subtle difference between
     * this.canLoad() and this.settings.shouldLoad();
     *
     *	- settings.shouldLoad() is a user-input validator.
     *	When false is returned, the not_loading template
     *	will be added to the dropdown
     *
     *	- canLoad() is lower level validator that checks
     * 	the Tom Select instance. There is no inherent user
     *	feedback when canLoad returns false
     *
     */


    canLoad(value) {
      if (!this.settings.load) return false;
      if (this.loadedSearches.hasOwnProperty(value)) return false;
      return true;
    }
    /**
     * Invokes the user-provided option provider / loader.
     *
     */


    load(value) {
      const self = this;
      if (!self.canLoad(value)) return;
      addClasses(self.wrapper, self.settings.loadingClass);
      self.loading++;
      const callback = self.loadCallback.bind(self);
      self.settings.load.call(self, value, callback);
    }
    /**
     * Invoked by the user-provided option provider
     *
     */


    loadCallback(options, optgroups) {
      const self = this;
      self.loading = Math.max(self.loading - 1, 0);
      self.lastQuery = null;
      self.clearActiveOption(); // when new results load, focus should be on first option

      self.setupOptions(options, optgroups);
      self.refreshOptions(self.isFocused && !self.isInputHidden);

      if (!self.loading) {
        removeClasses(self.wrapper, self.settings.loadingClass);
      }

      self.trigger('load', options, optgroups);
    }

    preload() {
      var classList = this.wrapper.classList;
      if (classList.contains('preloaded')) return;
      classList.add('preloaded');
      this.load('');
    }
    /**
     * Sets the input field of the control to the specified value.
     *
     */


    setTextboxValue(value = '') {
      var input = this.control_input;
      var changed = input.value !== value;

      if (changed) {
        input.value = value;
        triggerEvent(input, 'update');
        this.lastValue = value;
      }
    }
    /**
     * Returns the value of the control. If multiple items
     * can be selected (e.g. <select multiple>), this returns
     * an array. If only one item can be selected, this
     * returns a string.
     *
     */


    getValue() {
      if (this.is_select_tag && this.input.hasAttribute('multiple')) {
        return this.items;
      }

      return this.items.join(this.settings.delimiter);
    }
    /**
     * Resets the selected items to the given value.
     *
     */


    setValue(value, silent) {
      var events = silent ? [] : ['change'];
      debounce_events(this, events, () => {
        this.clear(silent);
        this.addItems(value, silent);
      });
    }
    /**
     * Resets the number of max items to the given value
     *
     */


    setMaxItems(value) {
      if (value === 0) value = null; //reset to unlimited items.

      this.settings.maxItems = value;
      this.refreshState();
    }
    /**
     * Sets the selected item.
     *
     */


    setActiveItem(item, e) {
      var self = this;
      var eventName;
      var i, begin, end, swap;
      var last;
      if (self.settings.mode === 'single') return; // clear the active selection

      if (!item) {
        self.clearActiveItems();

        if (self.isFocused) {
          self.showInput();
        }

        return;
      } // modify selection


      eventName = e && e.type.toLowerCase();

      if (eventName === 'click' && isKeyDown('shiftKey', e) && self.activeItems.length) {
        last = self.getLastActive();
        begin = Array.prototype.indexOf.call(self.control.children, last);
        end = Array.prototype.indexOf.call(self.control.children, item);

        if (begin > end) {
          swap = begin;
          begin = end;
          end = swap;
        }

        for (i = begin; i <= end; i++) {
          item = self.control.children[i];

          if (self.activeItems.indexOf(item) === -1) {
            self.setActiveItemClass(item);
          }
        }

        preventDefault(e);
      } else if (eventName === 'click' && isKeyDown(KEY_SHORTCUT, e) || eventName === 'keydown' && isKeyDown('shiftKey', e)) {
        if (item.classList.contains('active')) {
          self.removeActiveItem(item);
        } else {
          self.setActiveItemClass(item);
        }
      } else {
        self.clearActiveItems();
        self.setActiveItemClass(item);
      } // ensure control has focus


      self.hideInput();

      if (!self.isFocused) {
        self.focus();
      }
    }
    /**
     * Set the active and last-active classes
     *
     */


    setActiveItemClass(item) {
      const self = this;
      const last_active = self.control.querySelector('.last-active');
      if (last_active) removeClasses(last_active, 'last-active');
      addClasses(item, 'active last-active');
      self.trigger('item_select', item);

      if (self.activeItems.indexOf(item) == -1) {
        self.activeItems.push(item);
      }
    }
    /**
     * Remove active item
     *
     */


    removeActiveItem(item) {
      var idx = this.activeItems.indexOf(item);
      this.activeItems.splice(idx, 1);
      removeClasses(item, 'active');
    }
    /**
     * Clears all the active items
     *
     */


    clearActiveItems() {
      removeClasses(this.activeItems, 'active');
      this.activeItems = [];
    }
    /**
     * Sets the selected item in the dropdown menu
     * of available options.
     *
     */


    setActiveOption(option, scroll = true) {
      if (option === this.activeOption) {
        return;
      }

      this.clearActiveOption();
      if (!option) return;
      this.activeOption = option;
      setAttr$1(this.focus_node, {
        'aria-activedescendant': option.getAttribute('id')
      });
      setAttr$1(option, {
        'aria-selected': 'true'
      });
      addClasses(option, 'active');
      if (scroll) this.scrollToOption(option);
    }
    /**
     * Sets the dropdown_content scrollTop to display the option
     *
     */


    scrollToOption(option, behavior) {
      if (!option) return;
      const content = this.dropdown_content;
      const height_menu = content.clientHeight;
      const scrollTop = content.scrollTop || 0;
      const height_item = option.offsetHeight;
      const y = option.getBoundingClientRect().top - content.getBoundingClientRect().top + scrollTop;

      if (y + height_item > height_menu + scrollTop) {
        this.scroll(y - height_menu + height_item, behavior);
      } else if (y < scrollTop) {
        this.scroll(y, behavior);
      }
    }
    /**
     * Scroll the dropdown to the given position
     *
     */


    scroll(scrollTop, behavior) {
      const content = this.dropdown_content;

      if (behavior) {
        content.style.scrollBehavior = behavior;
      }

      content.scrollTop = scrollTop;
      content.style.scrollBehavior = '';
    }
    /**
     * Clears the active option
     *
     */


    clearActiveOption() {
      if (this.activeOption) {
        removeClasses(this.activeOption, 'active');
        setAttr$1(this.activeOption, {
          'aria-selected': null
        });
      }

      this.activeOption = null;
      setAttr$1(this.focus_node, {
        'aria-activedescendant': null
      });
    }
    /**
     * Selects all items (CTRL + A).
     */


    selectAll() {
      const self = this;
      if (self.settings.mode === 'single') return;
      const activeItems = self.controlChildren();
      if (!activeItems.length) return;
      self.hideInput();
      self.close();
      self.activeItems = activeItems;
      iterate$1(activeItems, item => {
        self.setActiveItemClass(item);
      });
    }
    /**
     * Determines if the control_input should be in a hidden or visible state
     *
     */


    inputState() {
      var self = this;
      if (!self.control.contains(self.control_input)) return;
      setAttr$1(self.control_input, {
        placeholder: self.settings.placeholder
      });

      if (self.activeItems.length > 0 || !self.isFocused && self.settings.hidePlaceholder && self.items.length > 0) {
        self.setTextboxValue();
        self.isInputHidden = true;
      } else {
        if (self.settings.hidePlaceholder && self.items.length > 0) {
          setAttr$1(self.control_input, {
            placeholder: ''
          });
        }

        self.isInputHidden = false;
      }

      self.wrapper.classList.toggle('input-hidden', self.isInputHidden);
    }
    /**
     * Hides the input element out of view, while
     * retaining its focus.
     * @deprecated 1.3
     */


    hideInput() {
      this.inputState();
    }
    /**
     * Restores input visibility.
     * @deprecated 1.3
     */


    showInput() {
      this.inputState();
    }
    /**
     * Get the input value
     */


    inputValue() {
      return this.control_input.value.trim();
    }
    /**
     * Gives the control focus.
     */


    focus() {
      var self = this;
      if (self.isDisabled) return;
      self.ignoreFocus = true;

      if (self.control_input.offsetWidth) {
        self.control_input.focus();
      } else {
        self.focus_node.focus();
      }

      setTimeout(() => {
        self.ignoreFocus = false;
        self.onFocus();
      }, 0);
    }
    /**
     * Forces the control out of focus.
     *
     */


    blur() {
      this.focus_node.blur();
      this.onBlur();
    }
    /**
     * Returns a function that scores an object
     * to show how good of a match it is to the
     * provided query.
     *
     * @return {function}
     */


    getScoreFunction(query) {
      return this.sifter.getScoreFunction(query, this.getSearchOptions());
    }
    /**
     * Returns search options for sifter (the system
     * for scoring and sorting results).
     *
     * @see https://github.com/orchidjs/sifter.js
     * @return {object}
     */


    getSearchOptions() {
      var settings = this.settings;
      var sort = settings.sortField;

      if (typeof settings.sortField === 'string') {
        sort = [{
          field: settings.sortField
        }];
      }

      return {
        fields: settings.searchField,
        conjunction: settings.searchConjunction,
        sort: sort,
        nesting: settings.nesting
      };
    }
    /**
     * Searches through available options and returns
     * a sorted array of matches.
     *
     */


    search(query) {
      var result, calculateScore;
      var self = this;
      var options = this.getSearchOptions(); // validate user-provided result scoring function

      if (self.settings.score) {
        calculateScore = self.settings.score.call(self, query);

        if (typeof calculateScore !== 'function') {
          throw new Error('Tom Select "score" setting must be a function that returns a function');
        }
      } // perform search


      if (query !== self.lastQuery) {
        self.lastQuery = query;
        result = self.sifter.search(query, Object.assign(options, {
          score: calculateScore
        }));
        self.currentResults = result;
      } else {
        result = Object.assign({}, self.currentResults);
      } // filter out selected items


      if (self.settings.hideSelected) {
        result.items = result.items.filter(item => {
          let hashed = hash_key(item.id);
          return !(hashed && self.items.indexOf(hashed) !== -1);
        });
      }

      return result;
    }
    /**
     * Refreshes the list of available options shown
     * in the autocomplete dropdown menu.
     *
     */


    refreshOptions(triggerDropdown = true) {
      var i, j, k, n, optgroup, optgroups, html, has_create_option, active_group;
      var create;
      const groups = {};
      const groups_order = [];
      var self = this;
      var query = self.inputValue();
      const same_query = query === self.lastQuery || query == '' && self.lastQuery == null;
      var results = self.search(query);
      var active_option = null;
      var show_dropdown = self.settings.shouldOpen || false;
      var dropdown_content = self.dropdown_content;

      if (same_query) {
        active_option = self.activeOption;

        if (active_option) {
          active_group = active_option.closest('[data-group]');
        }
      } // build markup


      n = results.items.length;

      if (typeof self.settings.maxOptions === 'number') {
        n = Math.min(n, self.settings.maxOptions);
      }

      if (n > 0) {
        show_dropdown = true;
      } // render and group available options individually


      for (i = 0; i < n; i++) {
        // get option dom element
        let item = results.items[i];
        if (!item) continue;
        let opt_value = item.id;
        let option = self.options[opt_value];
        if (option === undefined) continue;
        let opt_hash = get_hash(opt_value);
        let option_el = self.getOption(opt_hash, true); // toggle 'selected' class

        if (!self.settings.hideSelected) {
          option_el.classList.toggle('selected', self.items.includes(opt_hash));
        }

        optgroup = option[self.settings.optgroupField] || '';
        optgroups = Array.isArray(optgroup) ? optgroup : [optgroup];

        for (j = 0, k = optgroups && optgroups.length; j < k; j++) {
          optgroup = optgroups[j];

          if (!self.optgroups.hasOwnProperty(optgroup)) {
            optgroup = '';
          }

          let group_fragment = groups[optgroup];

          if (group_fragment === undefined) {
            group_fragment = document.createDocumentFragment();
            groups_order.push(optgroup);
          } // nodes can only have one parent, so if the option is in mutple groups, we need a clone


          if (j > 0) {
            option_el = option_el.cloneNode(true);
            setAttr$1(option_el, {
              id: option.$id + '-clone-' + j,
              'aria-selected': null
            });
            option_el.classList.add('ts-cloned');
            removeClasses(option_el, 'active'); // make sure we keep the activeOption in the same group

            if (self.activeOption && self.activeOption.dataset.value == opt_value) {
              if (active_group && active_group.dataset.group === optgroup.toString()) {
                active_option = option_el;
              }
            }
          }

          group_fragment.appendChild(option_el);
          groups[optgroup] = group_fragment;
        }
      } // sort optgroups


      if (self.settings.lockOptgroupOrder) {
        groups_order.sort((a, b) => {
          const grp_a = self.optgroups[a];
          const grp_b = self.optgroups[b];
          const a_order = grp_a && grp_a.$order || 0;
          const b_order = grp_b && grp_b.$order || 0;
          return a_order - b_order;
        });
      } // render optgroup headers & join groups


      html = document.createDocumentFragment();
      iterate$1(groups_order, optgroup => {
        let group_fragment = groups[optgroup];
        if (!group_fragment || !group_fragment.children.length) return;
        let group_heading = self.optgroups[optgroup];

        if (group_heading !== undefined) {
          let group_options = document.createDocumentFragment();
          let header = self.render('optgroup_header', group_heading);
          append(group_options, header);
          append(group_options, group_fragment);
          let group_html = self.render('optgroup', {
            group: group_heading,
            options: group_options
          });
          append(html, group_html);
        } else {
          append(html, group_fragment);
        }
      });
      dropdown_content.innerHTML = '';
      append(dropdown_content, html); // highlight matching terms inline

      if (self.settings.highlight) {
        removeHighlight(dropdown_content);

        if (results.query.length && results.tokens.length) {
          iterate$1(results.tokens, tok => {
            highlight$1(dropdown_content, tok.regex);
          });
        }
      } // helper method for adding templates to dropdown


      var add_template = template => {
        let content = self.render(template, {
          input: query
        });

        if (content) {
          show_dropdown = true;
          dropdown_content.insertBefore(content, dropdown_content.firstChild);
        }

        return content;
      }; // add loading message


      if (self.loading) {
        add_template('loading'); // invalid query
      } else if (!self.settings.shouldLoad.call(self, query)) {
        add_template('not_loading'); // add no_results message
      } else if (results.items.length === 0) {
        add_template('no_results');
      } // add create option


      has_create_option = self.canCreate(query);

      if (has_create_option) {
        create = add_template('option_create');
      } // activate


      self.hasOptions = results.items.length > 0 || has_create_option;

      if (show_dropdown) {
        if (results.items.length > 0) {
          if (!active_option && self.settings.mode === 'single' && self.items[0] != undefined) {
            active_option = self.getOption(self.items[0]);
          }

          if (!dropdown_content.contains(active_option)) {
            let active_index = 0;

            if (create && !self.settings.addPrecedence) {
              active_index = 1;
            }

            active_option = self.selectable()[active_index];
          }
        } else if (create) {
          active_option = create;
        }

        if (triggerDropdown && !self.isOpen) {
          self.open();
          self.scrollToOption(active_option, 'auto');
        }

        self.setActiveOption(active_option);
      } else {
        self.clearActiveOption();

        if (triggerDropdown && self.isOpen) {
          self.close(false); // if create_option=null, we want the dropdown to close but not reset the textbox value
        }
      }
    }
    /**
     * Return list of selectable options
     *
     */


    selectable() {
      return this.dropdown_content.querySelectorAll('[data-selectable]');
    }
    /**
     * Adds an available option. If it already exists,
     * nothing will happen. Note: this does not refresh
     * the options list dropdown (use `refreshOptions`
     * for that).
     *
     * Usage:
     *
     *   this.addOption(data)
     *
     */


    addOption(data, user_created = false) {
      const self = this; // @deprecated 1.7.7
      // use addOptions( array, user_created ) for adding multiple options

      if (Array.isArray(data)) {
        self.addOptions(data, user_created);
        return false;
      }

      const key = hash_key(data[self.settings.valueField]);

      if (key === null || self.options.hasOwnProperty(key)) {
        return false;
      }

      data.$order = data.$order || ++self.order;
      data.$id = self.inputId + '-opt-' + data.$order;
      self.options[key] = data;
      self.lastQuery = null;

      if (user_created) {
        self.userOptions[key] = user_created;
        self.trigger('option_add', key, data);
      }

      return key;
    }
    /**
     * Add multiple options
     *
     */


    addOptions(data, user_created = false) {
      iterate$1(data, dat => {
        this.addOption(dat, user_created);
      });
    }
    /**
     * @deprecated 1.7.7
     */


    registerOption(data) {
      return this.addOption(data);
    }
    /**
     * Registers an option group to the pool of option groups.
     *
     * @return {boolean|string}
     */


    registerOptionGroup(data) {
      var key = hash_key(data[this.settings.optgroupValueField]);
      if (key === null) return false;
      data.$order = data.$order || ++this.order;
      this.optgroups[key] = data;
      return key;
    }
    /**
     * Registers a new optgroup for options
     * to be bucketed into.
     *
     */


    addOptionGroup(id, data) {
      var hashed_id;
      data[this.settings.optgroupValueField] = id;

      if (hashed_id = this.registerOptionGroup(data)) {
        this.trigger('optgroup_add', hashed_id, data);
      }
    }
    /**
     * Removes an existing option group.
     *
     */


    removeOptionGroup(id) {
      if (this.optgroups.hasOwnProperty(id)) {
        delete this.optgroups[id];
        this.clearCache();
        this.trigger('optgroup_remove', id);
      }
    }
    /**
     * Clears all existing option groups.
     */


    clearOptionGroups() {
      this.optgroups = {};
      this.clearCache();
      this.trigger('optgroup_clear');
    }
    /**
     * Updates an option available for selection. If
     * it is visible in the selected items or options
     * dropdown, it will be re-rendered automatically.
     *
     */


    updateOption(value, data) {
      const self = this;
      var item_new;
      var index_item;
      const value_old = hash_key(value);
      const value_new = hash_key(data[self.settings.valueField]); // sanity checks

      if (value_old === null) return;
      const data_old = self.options[value_old];
      if (data_old == undefined) return;
      if (typeof value_new !== 'string') throw new Error('Value must be set in option data');
      const option = self.getOption(value_old);
      const item = self.getItem(value_old);
      data.$order = data.$order || data_old.$order;
      delete self.options[value_old]; // invalidate render cache
      // don't remove existing node yet, we'll remove it after replacing it

      self.uncacheValue(value_new);
      self.options[value_new] = data; // update the option if it's in the dropdown

      if (option) {
        if (self.dropdown_content.contains(option)) {
          const option_new = self._render('option', data);

          replaceNode(option, option_new);

          if (self.activeOption === option) {
            self.setActiveOption(option_new);
          }
        }

        option.remove();
      } // update the item if we have one


      if (item) {
        index_item = self.items.indexOf(value_old);

        if (index_item !== -1) {
          self.items.splice(index_item, 1, value_new);
        }

        item_new = self._render('item', data);
        if (item.classList.contains('active')) addClasses(item_new, 'active');
        replaceNode(item, item_new);
      } // invalidate last query because we might have updated the sortField


      self.lastQuery = null;
    }
    /**
     * Removes a single option.
     *
     */


    removeOption(value, silent) {
      const self = this;
      value = get_hash(value);
      self.uncacheValue(value);
      delete self.userOptions[value];
      delete self.options[value];
      self.lastQuery = null;
      self.trigger('option_remove', value);
      self.removeItem(value, silent);
    }
    /**
     * Clears all options.
     */


    clearOptions(filter) {
      const boundFilter = (filter || this.clearFilter).bind(this);
      this.loadedSearches = {};
      this.userOptions = {};
      this.clearCache();
      const selected = {};
      iterate$1(this.options, (option, key) => {
        if (boundFilter(option, key)) {
          selected[key] = option;
        }
      });
      this.options = this.sifter.items = selected;
      this.lastQuery = null;
      this.trigger('option_clear');
    }
    /**
     * Used by clearOptions() to decide whether or not an option should be removed
     * Return true to keep an option, false to remove
     *
     */


    clearFilter(option, value) {
      if (this.items.indexOf(value) >= 0) {
        return true;
      }

      return false;
    }
    /**
     * Returns the dom element of the option
     * matching the given value.
     *
     */


    getOption(value, create = false) {
      const hashed = hash_key(value);
      if (hashed === null) return null;
      const option = this.options[hashed];

      if (option != undefined) {
        if (option.$div) {
          return option.$div;
        }

        if (create) {
          return this._render('option', option);
        }
      }

      return null;
    }
    /**
     * Returns the dom element of the next or previous dom element of the same type
     * Note: adjacent options may not be adjacent DOM elements (optgroups)
     *
     */


    getAdjacent(option, direction, type = 'option') {
      var self = this,
          all;

      if (!option) {
        return null;
      }

      if (type == 'item') {
        all = self.controlChildren();
      } else {
        all = self.dropdown_content.querySelectorAll('[data-selectable]');
      }

      for (let i = 0; i < all.length; i++) {
        if (all[i] != option) {
          continue;
        }

        if (direction > 0) {
          return all[i + 1];
        }

        return all[i - 1];
      }

      return null;
    }
    /**
     * Returns the dom element of the item
     * matching the given value.
     *
     */


    getItem(item) {
      if (typeof item == 'object') {
        return item;
      }

      var value = hash_key(item);
      return value !== null ? this.control.querySelector(`[data-value="${addSlashes(value)}"]`) : null;
    }
    /**
     * "Selects" multiple items at once. Adds them to the list
     * at the current caret position.
     *
     */


    addItems(values, silent) {
      var self = this;
      var items = Array.isArray(values) ? values : [values];
      items = items.filter(x => self.items.indexOf(x) === -1);
      const last_item = items[items.length - 1];
      items.forEach(item => {
        self.isPending = item !== last_item;
        self.addItem(item, silent);
      });
    }
    /**
     * "Selects" an item. Adds it to the list
     * at the current caret position.
     *
     */


    addItem(value, silent) {
      var events = silent ? [] : ['change', 'dropdown_close'];
      debounce_events(this, events, () => {
        var item, wasFull;
        const self = this;
        const inputMode = self.settings.mode;
        const hashed = hash_key(value);

        if (hashed && self.items.indexOf(hashed) !== -1) {
          if (inputMode === 'single') {
            self.close();
          }

          if (inputMode === 'single' || !self.settings.duplicates) {
            return;
          }
        }

        if (hashed === null || !self.options.hasOwnProperty(hashed)) return;
        if (inputMode === 'single') self.clear(silent);
        if (inputMode === 'multi' && self.isFull()) return;
        item = self._render('item', self.options[hashed]);

        if (self.control.contains(item)) {
          // duplicates
          item = item.cloneNode(true);
        }

        wasFull = self.isFull();
        self.items.splice(self.caretPos, 0, hashed);
        self.insertAtCaret(item);

        if (self.isSetup) {
          // update menu / remove the option (if this is not one item being added as part of series)
          if (!self.isPending && self.settings.hideSelected) {
            let option = self.getOption(hashed);
            let next = self.getAdjacent(option, 1);

            if (next) {
              self.setActiveOption(next);
            }
          } // refreshOptions after setActiveOption(),
          // otherwise setActiveOption() will be called by refreshOptions() with the wrong value


          if (!self.isPending && !self.settings.closeAfterSelect) {
            self.refreshOptions(self.isFocused && inputMode !== 'single');
          } // hide the menu if the maximum number of items have been selected or no options are left


          if (self.settings.closeAfterSelect != false && self.isFull()) {
            self.close();
          } else if (!self.isPending) {
            self.positionDropdown();
          }

          self.trigger('item_add', hashed, item);

          if (!self.isPending) {
            self.updateOriginalInput({
              silent: silent
            });
          }
        }

        if (!self.isPending || !wasFull && self.isFull()) {
          self.inputState();
          self.refreshState();
        }
      });
    }
    /**
     * Removes the selected item matching
     * the provided value.
     *
     */


    removeItem(item = null, silent) {
      const self = this;
      item = self.getItem(item);
      if (!item) return;
      var i, idx;
      const value = item.dataset.value;
      i = nodeIndex(item);
      item.remove();

      if (item.classList.contains('active')) {
        idx = self.activeItems.indexOf(item);
        self.activeItems.splice(idx, 1);
        removeClasses(item, 'active');
      }

      self.items.splice(i, 1);
      self.lastQuery = null;

      if (!self.settings.persist && self.userOptions.hasOwnProperty(value)) {
        self.removeOption(value, silent);
      }

      if (i < self.caretPos) {
        self.setCaret(self.caretPos - 1);
      }

      self.updateOriginalInput({
        silent: silent
      });
      self.refreshState();
      self.positionDropdown();
      self.trigger('item_remove', value, item);
    }
    /**
     * Invokes the `create` method provided in the
     * TomSelect options that should provide the data
     * for the new item, given the user input.
     *
     * Once this completes, it will be added
     * to the item list.
     *
     */


    createItem(input = null, callback = () => {}) {
      // triggerDropdown parameter @deprecated 2.1.1
      if (arguments.length === 3) {
        callback = arguments[2];
      }

      if (typeof callback != 'function') {
        callback = () => {};
      }

      var self = this;
      var caret = self.caretPos;
      var output;
      input = input || self.inputValue();

      if (!self.canCreate(input)) {
        callback();
        return false;
      }

      self.lock();
      var created = false;

      var create = data => {
        self.unlock();
        if (!data || typeof data !== 'object') return callback();
        var value = hash_key(data[self.settings.valueField]);

        if (typeof value !== 'string') {
          return callback();
        }

        self.setTextboxValue();
        self.addOption(data, true);
        self.setCaret(caret);
        self.addItem(value);
        callback(data);
        created = true;
      };

      if (typeof self.settings.create === 'function') {
        output = self.settings.create.call(this, input, create);
      } else {
        output = {
          [self.settings.labelField]: input,
          [self.settings.valueField]: input
        };
      }

      if (!created) {
        create(output);
      }

      return true;
    }
    /**
     * Re-renders the selected item lists.
     */


    refreshItems() {
      var self = this;
      self.lastQuery = null;

      if (self.isSetup) {
        self.addItems(self.items);
      }

      self.updateOriginalInput();
      self.refreshState();
    }
    /**
     * Updates all state-dependent attributes
     * and CSS classes.
     */


    refreshState() {
      const self = this;
      self.refreshValidityState();
      const isFull = self.isFull();
      const isLocked = self.isLocked;
      self.wrapper.classList.toggle('rtl', self.rtl);
      const wrap_classList = self.wrapper.classList;
      wrap_classList.toggle('focus', self.isFocused);
      wrap_classList.toggle('disabled', self.isDisabled);
      wrap_classList.toggle('required', self.isRequired);
      wrap_classList.toggle('invalid', !self.isValid);
      wrap_classList.toggle('locked', isLocked);
      wrap_classList.toggle('full', isFull);
      wrap_classList.toggle('input-active', self.isFocused && !self.isInputHidden);
      wrap_classList.toggle('dropdown-active', self.isOpen);
      wrap_classList.toggle('has-options', isEmptyObject(self.options));
      wrap_classList.toggle('has-items', self.items.length > 0);
    }
    /**
     * Update the `required` attribute of both input and control input.
     *
     * The `required` property needs to be activated on the control input
     * for the error to be displayed at the right place. `required` also
     * needs to be temporarily deactivated on the input since the input is
     * hidden and can't show errors.
     */


    refreshValidityState() {
      var self = this;

      if (!self.input.validity) {
        return;
      }

      self.isValid = self.input.validity.valid;
      self.isInvalid = !self.isValid;
    }
    /**
     * Determines whether or not more items can be added
     * to the control without exceeding the user-defined maximum.
     *
     * @returns {boolean}
     */


    isFull() {
      return this.settings.maxItems !== null && this.items.length >= this.settings.maxItems;
    }
    /**
     * Refreshes the original <select> or <input>
     * element to reflect the current state.
     *
     */


    updateOriginalInput(opts = {}) {
      const self = this;
      var option, label;
      const empty_option = self.input.querySelector('option[value=""]');

      if (self.is_select_tag) {
        const selected = [];
        const has_selected = self.input.querySelectorAll('option:checked').length;

        function AddSelected(option_el, value, label) {
          if (!option_el) {
            option_el = getDom('<option value="' + escape_html(value) + '">' + escape_html(label) + '</option>');
          } // don't move empty option from top of list
          // fixes bug in firefox https://bugzilla.mozilla.org/show_bug.cgi?id=1725293


          if (option_el != empty_option) {
            self.input.append(option_el);
          }

          selected.push(option_el); // marking empty option as selected can break validation
          // fixes https://github.com/orchidjs/tom-select/issues/303

          if (option_el != empty_option || has_selected > 0) {
            option_el.selected = true;
          }

          return option_el;
        } // unselect all selected options


        self.input.querySelectorAll('option:checked').forEach(option_el => {
          option_el.selected = false;
        }); // nothing selected?

        if (self.items.length == 0 && self.settings.mode == 'single') {
          AddSelected(empty_option, "", ""); // order selected <option> tags for values in self.items
        } else {
          self.items.forEach(value => {
            option = self.options[value];
            label = option[self.settings.labelField] || '';

            if (selected.includes(option.$option)) {
              const reuse_opt = self.input.querySelector(`option[value="${addSlashes(value)}"]:not(:checked)`);
              AddSelected(reuse_opt, value, label);
            } else {
              option.$option = AddSelected(option.$option, value, label);
            }
          });
        }
      } else {
        self.input.value = self.getValue();
      }

      if (self.isSetup) {
        if (!opts.silent) {
          self.trigger('change', self.getValue());
        }
      }
    }
    /**
     * Shows the autocomplete dropdown containing
     * the available options.
     */


    open() {
      var self = this;
      if (self.isLocked || self.isOpen || self.settings.mode === 'multi' && self.isFull()) return;
      self.isOpen = true;
      setAttr$1(self.focus_node, {
        'aria-expanded': 'true'
      });
      self.refreshState();
      applyCSS(self.dropdown, {
        visibility: 'hidden',
        display: 'block'
      });
      self.positionDropdown();
      applyCSS(self.dropdown, {
        visibility: 'visible',
        display: 'block'
      });
      self.focus();
      self.trigger('dropdown_open', self.dropdown);
    }
    /**
     * Closes the autocomplete dropdown menu.
     */


    close(setTextboxValue = true) {
      var self = this;
      var trigger = self.isOpen;

      if (setTextboxValue) {
        // before blur() to prevent form onchange event
        self.setTextboxValue();

        if (self.settings.mode === 'single' && self.items.length) {
          self.hideInput();
        }
      }

      self.isOpen = false;
      setAttr$1(self.focus_node, {
        'aria-expanded': 'false'
      });
      applyCSS(self.dropdown, {
        display: 'none'
      });

      if (self.settings.hideSelected) {
        self.clearActiveOption();
      }

      self.refreshState();
      if (trigger) self.trigger('dropdown_close', self.dropdown);
    }
    /**
     * Calculates and applies the appropriate
     * position of the dropdown if dropdownParent = 'body'.
     * Otherwise, position is determined by css
     */


    positionDropdown() {
      if (this.settings.dropdownParent !== 'body') {
        return;
      }

      var context = this.control;
      var rect = context.getBoundingClientRect();
      var top = context.offsetHeight + rect.top + window.scrollY;
      var left = rect.left + window.scrollX;
      applyCSS(this.dropdown, {
        width: rect.width + 'px',
        top: top + 'px',
        left: left + 'px'
      });
    }
    /**
     * Resets / clears all selected items
     * from the control.
     *
     */


    clear(silent) {
      var self = this;
      if (!self.items.length) return;
      var items = self.controlChildren();
      iterate$1(items, item => {
        self.removeItem(item, true);
      });
      self.showInput();
      if (!silent) self.updateOriginalInput();
      self.trigger('clear');
    }
    /**
     * A helper method for inserting an element
     * at the current caret position.
     *
     */


    insertAtCaret(el) {
      const self = this;
      const caret = self.caretPos;
      const target = self.control;
      target.insertBefore(el, target.children[caret] || null);
      self.setCaret(caret + 1);
    }
    /**
     * Removes the current selected item(s).
     *
     */


    deleteSelection(e) {
      var direction, selection, caret, tail;
      var self = this;
      direction = e && e.keyCode === KEY_BACKSPACE ? -1 : 1;
      selection = getSelection(self.control_input); // determine items that will be removed

      const rm_items = [];

      if (self.activeItems.length) {
        tail = getTail(self.activeItems, direction);
        caret = nodeIndex(tail);

        if (direction > 0) {
          caret++;
        }

        iterate$1(self.activeItems, item => rm_items.push(item));
      } else if ((self.isFocused || self.settings.mode === 'single') && self.items.length) {
        const items = self.controlChildren();
        let rm_item;

        if (direction < 0 && selection.start === 0 && selection.length === 0) {
          rm_item = items[self.caretPos - 1];
        } else if (direction > 0 && selection.start === self.inputValue().length) {
          rm_item = items[self.caretPos];
        }

        if (rm_item !== undefined) {
          rm_items.push(rm_item);
        }
      }

      if (!self.shouldDelete(rm_items, e)) {
        return false;
      }

      preventDefault(e, true); // perform removal

      if (typeof caret !== 'undefined') {
        self.setCaret(caret);
      }

      while (rm_items.length) {
        self.removeItem(rm_items.pop());
      }

      self.showInput();
      self.positionDropdown();
      self.refreshOptions(false);
      return true;
    }
    /**
     * Return true if the items should be deleted
     */


    shouldDelete(items, evt) {
      const values = items.map(item => item.dataset.value); // allow the callback to abort

      if (!values.length || typeof this.settings.onDelete === 'function' && this.settings.onDelete(values, evt) === false) {
        return false;
      }

      return true;
    }
    /**
     * Selects the previous / next item (depending on the `direction` argument).
     *
     * > 0 - right
     * < 0 - left
     *
     */


    advanceSelection(direction, e) {
      var last_active,
          adjacent,
          self = this;
      if (self.rtl) direction *= -1;
      if (self.inputValue().length) return; // add or remove to active items

      if (isKeyDown(KEY_SHORTCUT, e) || isKeyDown('shiftKey', e)) {
        last_active = self.getLastActive(direction);

        if (last_active) {
          if (!last_active.classList.contains('active')) {
            adjacent = last_active;
          } else {
            adjacent = self.getAdjacent(last_active, direction, 'item');
          } // if no active item, get items adjacent to the control input

        } else if (direction > 0) {
          adjacent = self.control_input.nextElementSibling;
        } else {
          adjacent = self.control_input.previousElementSibling;
        }

        if (adjacent) {
          if (adjacent.classList.contains('active')) {
            self.removeActiveItem(last_active);
          }

          self.setActiveItemClass(adjacent); // mark as last_active !! after removeActiveItem() on last_active
        } // move caret to the left or right

      } else {
        self.moveCaret(direction);
      }
    }

    moveCaret(direction) {}
    /**
     * Get the last active item
     *
     */


    getLastActive(direction) {
      let last_active = this.control.querySelector('.last-active');

      if (last_active) {
        return last_active;
      }

      var result = this.control.querySelectorAll('.active');

      if (result) {
        return getTail(result, direction);
      }
    }
    /**
     * Moves the caret to the specified index.
     *
     * The input must be moved by leaving it in place and moving the
     * siblings, due to the fact that focus cannot be restored once lost
     * on mobile webkit devices
     *
     */


    setCaret(new_pos) {
      this.caretPos = this.items.length;
    }
    /**
     * Return list of item dom elements
     *
     */


    controlChildren() {
      return Array.from(this.control.querySelectorAll('[data-ts-item]'));
    }
    /**
     * Disables user input on the control. Used while
     * items are being asynchronously created.
     */


    lock() {
      this.isLocked = true;
      this.refreshState();
    }
    /**
     * Re-enables user input on the control.
     */


    unlock() {
      this.isLocked = false;
      this.refreshState();
    }
    /**
     * Disables user input on the control completely.
     * While disabled, it cannot receive focus.
     */


    disable() {
      var self = this;
      self.input.disabled = true;
      self.control_input.disabled = true;
      self.focus_node.tabIndex = -1;
      self.isDisabled = true;
      this.close();
      self.lock();
    }
    /**
     * Enables the control so that it can respond
     * to focus and user input.
     */


    enable() {
      var self = this;
      self.input.disabled = false;
      self.control_input.disabled = false;
      self.focus_node.tabIndex = self.tabIndex;
      self.isDisabled = false;
      self.unlock();
    }
    /**
     * Completely destroys the control and
     * unbinds all event listeners so that it can
     * be garbage collected.
     */


    destroy() {
      var self = this;
      var revertSettings = self.revertSettings;
      self.trigger('destroy');
      self.off();
      self.wrapper.remove();
      self.dropdown.remove();
      self.input.innerHTML = revertSettings.innerHTML;
      self.input.tabIndex = revertSettings.tabIndex;
      removeClasses(self.input, 'tomselected', 'ts-hidden-accessible');

      self._destroy();

      delete self.input.tomselect;
    }
    /**
     * A helper method for rendering "item" and
     * "option" templates, given the data.
     *
     */


    render(templateName, data) {
      var id, html;
      const self = this;

      if (typeof this.settings.render[templateName] !== 'function') {
        return null;
      } // render markup


      html = self.settings.render[templateName].call(this, data, escape_html);

      if (!html) {
        return null;
      }

      html = getDom(html); // add mandatory attributes

      if (templateName === 'option' || templateName === 'option_create') {
        if (data[self.settings.disabledField]) {
          setAttr$1(html, {
            'aria-disabled': 'true'
          });
        } else {
          setAttr$1(html, {
            'data-selectable': ''
          });
        }
      } else if (templateName === 'optgroup') {
        id = data.group[self.settings.optgroupValueField];
        setAttr$1(html, {
          'data-group': id
        });

        if (data.group[self.settings.disabledField]) {
          setAttr$1(html, {
            'data-disabled': ''
          });
        }
      }

      if (templateName === 'option' || templateName === 'item') {
        const value = get_hash(data[self.settings.valueField]);
        setAttr$1(html, {
          'data-value': value
        }); // make sure we have some classes if a template is overwritten

        if (templateName === 'item') {
          addClasses(html, self.settings.itemClass);
          setAttr$1(html, {
            'data-ts-item': ''
          });
        } else {
          addClasses(html, self.settings.optionClass);
          setAttr$1(html, {
            role: 'option',
            id: data.$id
          }); // update cache

          data.$div = html;
          self.options[value] = data;
        }
      }

      return html;
    }
    /**
     * Type guarded rendering
     *
     */


    _render(templateName, data) {
      const html = this.render(templateName, data);

      if (html == null) {
        throw 'HTMLElement expected';
      }

      return html;
    }
    /**
     * Clears the render cache for a template. If
     * no template is given, clears all render
     * caches.
     *
     */


    clearCache() {
      iterate$1(this.options, option => {
        if (option.$div) {
          option.$div.remove();
          delete option.$div;
        }
      });
    }
    /**
     * Removes a value from item and option caches
     *
     */


    uncacheValue(value) {
      const option_el = this.getOption(value);
      if (option_el) option_el.remove();
    }
    /**
     * Determines whether or not to display the
     * create item prompt, given a user input.
     *
     */


    canCreate(input) {
      return this.settings.create && input.length > 0 && this.settings.createFilter.call(this, input);
    }
    /**
     * Wraps this.`method` so that `new_fn` can be invoked 'before', 'after', or 'instead' of the original method
     *
     * this.hook('instead','onKeyDown',function( arg1, arg2 ...){
     *
     * });
     */


    hook(when, method, new_fn) {
      var self = this;
      var orig_method = self[method];

      self[method] = function () {
        var result, result_new;

        if (when === 'after') {
          result = orig_method.apply(self, arguments);
        }

        result_new = new_fn.apply(self, arguments);

        if (when === 'instead') {
          return result_new;
        }

        if (when === 'before') {
          result = orig_method.apply(self, arguments);
        }

        return result;
      };
    }

  }

  /**
   * Plugin: "change_listener" (Tom Select)
   * Copyright (c) contributors
   *
   * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
   * file except in compliance with the License. You may obtain a copy of the License at:
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software distributed under
   * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
   * ANY KIND, either express or implied. See the License for the specific language
   * governing permissions and limitations under the License.
   *
   */
  function change_listener () {
    addEvent(this.input, 'change', () => {
      this.sync();
    });
  }

  /**
   * Plugin: "restore_on_backspace" (Tom Select)
   * Copyright (c) contributors
   *
   * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
   * file except in compliance with the License. You may obtain a copy of the License at:
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software distributed under
   * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
   * ANY KIND, either express or implied. See the License for the specific language
   * governing permissions and limitations under the License.
   *
   */
  function checkbox_options () {
    var self = this;
    var orig_onOptionSelect = self.onOptionSelect;
    self.settings.hideSelected = false; // update the checkbox for an option

    var UpdateCheckbox = function UpdateCheckbox(option) {
      setTimeout(() => {
        var checkbox = option.querySelector('input');

        if (checkbox instanceof HTMLInputElement) {
          if (option.classList.contains('selected')) {
            checkbox.checked = true;
          } else {
            checkbox.checked = false;
          }
        }
      }, 1);
    }; // add checkbox to option template


    self.hook('after', 'setupTemplates', () => {
      var orig_render_option = self.settings.render.option;

      self.settings.render.option = (data, escape_html) => {
        var rendered = getDom(orig_render_option.call(self, data, escape_html));
        var checkbox = document.createElement('input');
        checkbox.addEventListener('click', function (evt) {
          preventDefault(evt);
        });
        checkbox.type = 'checkbox';
        const hashed = hash_key(data[self.settings.valueField]);

        if (hashed && self.items.indexOf(hashed) > -1) {
          checkbox.checked = true;
        }

        rendered.prepend(checkbox);
        return rendered;
      };
    }); // uncheck when item removed

    self.on('item_remove', value => {
      var option = self.getOption(value);

      if (option) {
        // if dropdown hasn't been opened yet, the option won't exist
        option.classList.remove('selected'); // selected class won't be removed yet

        UpdateCheckbox(option);
      }
    }); // check when item added

    self.on('item_add', value => {
      var option = self.getOption(value);

      if (option) {
        // if dropdown hasn't been opened yet, the option won't exist
        UpdateCheckbox(option);
      }
    }); // remove items when selected option is clicked

    self.hook('instead', 'onOptionSelect', (evt, option) => {
      if (option.classList.contains('selected')) {
        option.classList.remove('selected');
        self.removeItem(option.dataset.value);
        self.refreshOptions();
        preventDefault(evt, true);
        return;
      }

      orig_onOptionSelect.call(self, evt, option);
      UpdateCheckbox(option);
    });
  }

  /**
   * Plugin: "dropdown_header" (Tom Select)
   * Copyright (c) contributors
   *
   * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
   * file except in compliance with the License. You may obtain a copy of the License at:
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software distributed under
   * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
   * ANY KIND, either express or implied. See the License for the specific language
   * governing permissions and limitations under the License.
   *
   */
  function clear_button (userOptions) {
    const self = this;
    const options = Object.assign({
      className: 'clear-button',
      title: 'Clear All',
      html: data => {
        return `<div class="${data.className}" title="${data.title}">&#10799;</div>`;
      }
    }, userOptions);
    self.on('initialize', () => {
      var button = getDom(options.html(options));
      button.addEventListener('click', evt => {
        if (self.isDisabled) {
          return;
        }

        self.clear();

        if (self.settings.mode === 'single' && self.settings.allowEmptyOption) {
          self.addItem('');
        }

        evt.preventDefault();
        evt.stopPropagation();
      });
      self.control.appendChild(button);
    });
  }

  /**
   * Plugin: "drag_drop" (Tom Select)
   * Copyright (c) contributors
   *
   * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
   * file except in compliance with the License. You may obtain a copy of the License at:
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software distributed under
   * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
   * ANY KIND, either express or implied. See the License for the specific language
   * governing permissions and limitations under the License.
   *
   */
  function drag_drop () {
    var self = this;
    if (!$.fn.sortable) throw new Error('The "drag_drop" plugin requires jQuery UI "sortable".');
    if (self.settings.mode !== 'multi') return;
    var orig_lock = self.lock;
    var orig_unlock = self.unlock;
    self.hook('instead', 'lock', () => {
      var sortable = $(self.control).data('sortable');
      if (sortable) sortable.disable();
      return orig_lock.call(self);
    });
    self.hook('instead', 'unlock', () => {
      var sortable = $(self.control).data('sortable');
      if (sortable) sortable.enable();
      return orig_unlock.call(self);
    });
    self.on('initialize', () => {
      var $control = $(self.control).sortable({
        items: '[data-value]',
        forcePlaceholderSize: true,
        disabled: self.isLocked,
        start: (e, ui) => {
          ui.placeholder.css('width', ui.helper.css('width'));
          $control.css({
            overflow: 'visible'
          });
        },
        stop: () => {
          $control.css({
            overflow: 'hidden'
          });
          var values = [];
          $control.children('[data-value]').each(function () {
            if (this.dataset.value) values.push(this.dataset.value);
          });
          self.setValue(values);
        }
      });
    });
  }

  /**
   * Plugin: "dropdown_header" (Tom Select)
   * Copyright (c) contributors
   *
   * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
   * file except in compliance with the License. You may obtain a copy of the License at:
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software distributed under
   * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
   * ANY KIND, either express or implied. See the License for the specific language
   * governing permissions and limitations under the License.
   *
   */
  function dropdown_header (userOptions) {
    const self = this;
    const options = Object.assign({
      title: 'Untitled',
      headerClass: 'dropdown-header',
      titleRowClass: 'dropdown-header-title',
      labelClass: 'dropdown-header-label',
      closeClass: 'dropdown-header-close',
      html: data => {
        return '<div class="' + data.headerClass + '">' + '<div class="' + data.titleRowClass + '">' + '<span class="' + data.labelClass + '">' + data.title + '</span>' + '<a class="' + data.closeClass + '">&times;</a>' + '</div>' + '</div>';
      }
    }, userOptions);
    self.on('initialize', () => {
      var header = getDom(options.html(options));
      var close_link = header.querySelector('.' + options.closeClass);

      if (close_link) {
        close_link.addEventListener('click', evt => {
          preventDefault(evt, true);
          self.close();
        });
      }

      self.dropdown.insertBefore(header, self.dropdown.firstChild);
    });
  }

  /**
   * Plugin: "dropdown_input" (Tom Select)
   * Copyright (c) contributors
   *
   * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
   * file except in compliance with the License. You may obtain a copy of the License at:
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software distributed under
   * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
   * ANY KIND, either express or implied. See the License for the specific language
   * governing permissions and limitations under the License.
   *
   */
  function caret_position () {
    var self = this;
    /**
     * Moves the caret to the specified index.
     *
     * The input must be moved by leaving it in place and moving the
     * siblings, due to the fact that focus cannot be restored once lost
     * on mobile webkit devices
     *
     */

    self.hook('instead', 'setCaret', new_pos => {
      if (self.settings.mode === 'single' || !self.control.contains(self.control_input)) {
        new_pos = self.items.length;
      } else {
        new_pos = Math.max(0, Math.min(self.items.length, new_pos));

        if (new_pos != self.caretPos && !self.isPending) {
          self.controlChildren().forEach((child, j) => {
            if (j < new_pos) {
              self.control_input.insertAdjacentElement('beforebegin', child);
            } else {
              self.control.appendChild(child);
            }
          });
        }
      }

      self.caretPos = new_pos;
    });
    self.hook('instead', 'moveCaret', direction => {
      if (!self.isFocused) return; // move caret before or after selected items

      const last_active = self.getLastActive(direction);

      if (last_active) {
        const idx = nodeIndex(last_active);
        self.setCaret(direction > 0 ? idx + 1 : idx);
        self.setActiveItem();
        removeClasses(last_active, 'last-active'); // move caret left or right of current position
      } else {
        self.setCaret(self.caretPos + direction);
      }
    });
  }

  /**
   * Plugin: "dropdown_input" (Tom Select)
   * Copyright (c) contributors
   *
   * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
   * file except in compliance with the License. You may obtain a copy of the License at:
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software distributed under
   * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
   * ANY KIND, either express or implied. See the License for the specific language
   * governing permissions and limitations under the License.
   *
   */
  function dropdown_input () {
    const self = this;
    self.settings.shouldOpen = true; // make sure the input is shown even if there are no options to display in the dropdown

    self.hook('before', 'setup', () => {
      self.focus_node = self.control;
      addClasses(self.control_input, 'dropdown-input');
      const div = getDom('<div class="dropdown-input-wrap">');
      div.append(self.control_input);
      self.dropdown.insertBefore(div, self.dropdown.firstChild); // set a placeholder in the select control

      const placeholder = getDom('<input class="items-placeholder" tabindex="-1" />');
      placeholder.placeholder = self.settings.placeholder || '';
      self.control.append(placeholder);
    });
    self.on('initialize', () => {
      // set tabIndex on control to -1, otherwise [shift+tab] will put focus right back on control_input
      self.control_input.addEventListener('keydown', evt => {
        //addEvent(self.control_input,'keydown' as const,(evt:KeyboardEvent) =>{
        switch (evt.keyCode) {
          case KEY_ESC:
            if (self.isOpen) {
              preventDefault(evt, true);
              self.close();
            }

            self.clearActiveItems();
            return;

          case KEY_TAB:
            self.focus_node.tabIndex = -1;
            break;
        }

        return self.onKeyDown.call(self, evt);
      });
      self.on('blur', () => {
        self.focus_node.tabIndex = self.isDisabled ? -1 : self.tabIndex;
      }); // give the control_input focus when the dropdown is open

      self.on('dropdown_open', () => {
        self.control_input.focus();
      }); // prevent onBlur from closing when focus is on the control_input

      const orig_onBlur = self.onBlur;
      self.hook('instead', 'onBlur', evt => {
        if (evt && evt.relatedTarget == self.control_input) return;
        return orig_onBlur.call(self);
      });
      addEvent(self.control_input, 'blur', () => self.onBlur()); // return focus to control to allow further keyboard input

      self.hook('before', 'close', () => {
        if (!self.isOpen) return;
        self.focus_node.focus({
          preventScroll: true
        });
      });
    });
  }

  /**
   * Plugin: "input_autogrow" (Tom Select)
   *
   * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
   * file except in compliance with the License. You may obtain a copy of the License at:
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software distributed under
   * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
   * ANY KIND, either express or implied. See the License for the specific language
   * governing permissions and limitations under the License.
   *
   */
  function input_autogrow () {
    var self = this;
    self.on('initialize', () => {
      var test_input = document.createElement('span');
      var control = self.control_input;
      test_input.style.cssText = 'position:absolute; top:-99999px; left:-99999px; width:auto; padding:0; white-space:pre; ';
      self.wrapper.appendChild(test_input);
      var transfer_styles = ['letterSpacing', 'fontSize', 'fontFamily', 'fontWeight', 'textTransform'];

      for (const style_name of transfer_styles) {
        // @ts-ignore TS7015 https://stackoverflow.com/a/50506154/697576
        test_input.style[style_name] = control.style[style_name];
      }
      /**
       * Set the control width
       *
       */


      var resize = () => {
        test_input.textContent = control.value;
        control.style.width = test_input.clientWidth + 'px';
      };

      resize();
      self.on('update item_add item_remove', resize);
      addEvent(control, 'input', resize);
      addEvent(control, 'keyup', resize);
      addEvent(control, 'blur', resize);
      addEvent(control, 'update', resize);
    });
  }

  /**
   * Plugin: "input_autogrow" (Tom Select)
   *
   * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
   * file except in compliance with the License. You may obtain a copy of the License at:
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software distributed under
   * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
   * ANY KIND, either express or implied. See the License for the specific language
   * governing permissions and limitations under the License.
   *
   */
  function no_backspace_delete () {
    var self = this;
    var orig_deleteSelection = self.deleteSelection;
    this.hook('instead', 'deleteSelection', evt => {
      if (self.activeItems.length) {
        return orig_deleteSelection.call(self, evt);
      }

      return false;
    });
  }

  /**
   * Plugin: "no_active_items" (Tom Select)
   *
   * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
   * file except in compliance with the License. You may obtain a copy of the License at:
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software distributed under
   * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
   * ANY KIND, either express or implied. See the License for the specific language
   * governing permissions and limitations under the License.
   *
   */
  function no_active_items () {
    this.hook('instead', 'setActiveItem', () => {});
    this.hook('instead', 'selectAll', () => {});
  }

  /**
   * Plugin: "optgroup_columns" (Tom Select.js)
   * Copyright (c) contributors
   *
   * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
   * file except in compliance with the License. You may obtain a copy of the License at:
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software distributed under
   * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
   * ANY KIND, either express or implied. See the License for the specific language
   * governing permissions and limitations under the License.
   *
   */
  function optgroup_columns () {
    var self = this;
    var orig_keydown = self.onKeyDown;
    self.hook('instead', 'onKeyDown', evt => {
      var index, option, options, optgroup;

      if (!self.isOpen || !(evt.keyCode === KEY_LEFT || evt.keyCode === KEY_RIGHT)) {
        return orig_keydown.call(self, evt);
      }

      self.ignoreHover = true;
      optgroup = parentMatch(self.activeOption, '[data-group]');
      index = nodeIndex(self.activeOption, '[data-selectable]');

      if (!optgroup) {
        return;
      }

      if (evt.keyCode === KEY_LEFT) {
        optgroup = optgroup.previousSibling;
      } else {
        optgroup = optgroup.nextSibling;
      }

      if (!optgroup) {
        return;
      }

      options = optgroup.querySelectorAll('[data-selectable]');
      option = options[Math.min(options.length - 1, index)];

      if (option) {
        self.setActiveOption(option);
      }
    });
  }

  /**
   * Plugin: "remove_button" (Tom Select)
   * Copyright (c) contributors
   *
   * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
   * file except in compliance with the License. You may obtain a copy of the License at:
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software distributed under
   * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
   * ANY KIND, either express or implied. See the License for the specific language
   * governing permissions and limitations under the License.
   *
   */
  function remove_button (userOptions) {
    const options = Object.assign({
      label: '&times;',
      title: 'Remove',
      className: 'remove',
      append: true
    }, userOptions); //options.className = 'remove-single';

    var self = this; // override the render method to add remove button to each item

    if (!options.append) {
      return;
    }

    var html = '<a href="javascript:void(0)" class="' + options.className + '" tabindex="-1" title="' + escape_html(options.title) + '">' + options.label + '</a>';
    self.hook('after', 'setupTemplates', () => {
      var orig_render_item = self.settings.render.item;

      self.settings.render.item = (data, escape) => {
        var item = getDom(orig_render_item.call(self, data, escape));
        var close_button = getDom(html);
        item.appendChild(close_button);
        addEvent(close_button, 'mousedown', evt => {
          preventDefault(evt, true);
        });
        addEvent(close_button, 'click', evt => {
          // propagating will trigger the dropdown to show for single mode
          preventDefault(evt, true);
          if (self.isLocked) return;
          if (!self.shouldDelete([item], evt)) return;
          self.removeItem(item);
          self.refreshOptions(false);
          self.inputState();
        });
        return item;
      };
    });
  }

  /**
   * Plugin: "restore_on_backspace" (Tom Select)
   * Copyright (c) contributors
   *
   * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
   * file except in compliance with the License. You may obtain a copy of the License at:
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software distributed under
   * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
   * ANY KIND, either express or implied. See the License for the specific language
   * governing permissions and limitations under the License.
   *
   */
  function restore_on_backspace (userOptions) {
    const self = this;
    const options = Object.assign({
      text: option => {
        return option[self.settings.labelField];
      }
    }, userOptions);
    self.on('item_remove', function (value) {
      if (!self.isFocused) {
        return;
      }

      if (self.control_input.value.trim() === '') {
        var option = self.options[value];

        if (option) {
          self.setTextboxValue(options.text.call(self, option));
        }
      }
    });
  }

  /**
   * Plugin: "restore_on_backspace" (Tom Select)
   * Copyright (c) contributors
   *
   * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
   * file except in compliance with the License. You may obtain a copy of the License at:
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software distributed under
   * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
   * ANY KIND, either express or implied. See the License for the specific language
   * governing permissions and limitations under the License.
   *
   */
  function virtual_scroll () {
    const self = this;
    const orig_canLoad = self.canLoad;
    const orig_clearActiveOption = self.clearActiveOption;
    const orig_loadCallback = self.loadCallback;
    var pagination = {};
    var dropdown_content;
    var loading_more = false;
    var load_more_opt;
    var default_values = [];

    if (!self.settings.shouldLoadMore) {
      // return true if additional results should be loaded
      self.settings.shouldLoadMore = () => {
        const scroll_percent = dropdown_content.clientHeight / (dropdown_content.scrollHeight - dropdown_content.scrollTop);

        if (scroll_percent > 0.9) {
          return true;
        }

        if (self.activeOption) {
          var selectable = self.selectable();
          var index = Array.from(selectable).indexOf(self.activeOption);

          if (index >= selectable.length - 2) {
            return true;
          }
        }

        return false;
      };
    }

    if (!self.settings.firstUrl) {
      throw 'virtual_scroll plugin requires a firstUrl() method';
    } // in order for virtual scrolling to work,
    // options need to be ordered the same way they're returned from the remote data source


    self.settings.sortField = [{
      field: '$order'
    }, {
      field: '$score'
    }]; // can we load more results for given query?

    const canLoadMore = query => {
      if (typeof self.settings.maxOptions === 'number' && dropdown_content.children.length >= self.settings.maxOptions) {
        return false;
      }

      if (query in pagination && pagination[query]) {
        return true;
      }

      return false;
    };

    const clearFilter = (option, value) => {
      if (self.items.indexOf(value) >= 0 || default_values.indexOf(value) >= 0) {
        return true;
      }

      return false;
    }; // set the next url that will be


    self.setNextUrl = (value, next_url) => {
      pagination[value] = next_url;
    }; // getUrl() to be used in settings.load()


    self.getUrl = query => {
      if (query in pagination) {
        const next_url = pagination[query];
        pagination[query] = false;
        return next_url;
      } // if the user goes back to a previous query
      // we need to load the first page again


      pagination = {};
      return self.settings.firstUrl.call(self, query);
    }; // don't clear the active option (and cause unwanted dropdown scroll)
    // while loading more results


    self.hook('instead', 'clearActiveOption', () => {
      if (loading_more) {
        return;
      }

      return orig_clearActiveOption.call(self);
    }); // override the canLoad method

    self.hook('instead', 'canLoad', query => {
      // first time the query has been seen
      if (!(query in pagination)) {
        return orig_canLoad.call(self, query);
      }

      return canLoadMore(query);
    }); // wrap the load

    self.hook('instead', 'loadCallback', (options, optgroups) => {
      if (!loading_more) {
        self.clearOptions(clearFilter);
      } else if (load_more_opt) {
        const first_option = options[0];

        if (first_option !== undefined) {
          load_more_opt.dataset.value = first_option[self.settings.valueField];
        }
      }

      orig_loadCallback.call(self, options, optgroups);
      loading_more = false;
    }); // add templates to dropdown
    //	loading_more if we have another url in the queue
    //	no_more_results if we don't have another url in the queue

    self.hook('after', 'refreshOptions', () => {
      const query = self.lastValue;
      var option;

      if (canLoadMore(query)) {
        option = self.render('loading_more', {
          query: query
        });

        if (option) {
          option.setAttribute('data-selectable', ''); // so that navigating dropdown with [down] keypresses can navigate to this node

          load_more_opt = option;
        }
      } else if (query in pagination && !dropdown_content.querySelector('.no-results')) {
        option = self.render('no_more_results', {
          query: query
        });
      }

      if (option) {
        addClasses(option, self.settings.optionClass);
        dropdown_content.append(option);
      }
    }); // add scroll listener and default templates

    self.on('initialize', () => {
      default_values = Object.keys(self.options);
      dropdown_content = self.dropdown_content; // default templates

      self.settings.render = Object.assign({}, {
        loading_more: () => {
          return `<div class="loading-more-results">Loading more results ... </div>`;
        },
        no_more_results: () => {
          return `<div class="no-more-results">No more results</div>`;
        }
      }, self.settings.render); // watch dropdown content scroll position

      dropdown_content.addEventListener('scroll', () => {
        if (!self.settings.shouldLoadMore.call(self)) {
          return;
        } // !important: this will get checked again in load() but we still need to check here otherwise loading_more will be set to true


        if (!canLoadMore(self.lastValue)) {
          return;
        } // don't call load() too much


        if (loading_more) return;
        loading_more = true;
        self.load.call(self, self.lastValue);
      });
    });
  }

  TomSelect.define('change_listener', change_listener);
  TomSelect.define('checkbox_options', checkbox_options);
  TomSelect.define('clear_button', clear_button);
  TomSelect.define('drag_drop', drag_drop);
  TomSelect.define('dropdown_header', dropdown_header);
  TomSelect.define('caret_position', caret_position);
  TomSelect.define('dropdown_input', dropdown_input);
  TomSelect.define('input_autogrow', input_autogrow);
  TomSelect.define('no_backspace_delete', no_backspace_delete);
  TomSelect.define('no_active_items', no_active_items);
  TomSelect.define('optgroup_columns', optgroup_columns);
  TomSelect.define('remove_button', remove_button);
  TomSelect.define('restore_on_backspace', restore_on_backspace);
  TomSelect.define('virtual_scroll', virtual_scroll);

  function Autocomplete(Alpine) {
    Alpine.directive('autocomplete', (el, {}, {cleanup, evaluateLater}) => {

      const create = el.hasAttribute('create');
      const onCreate = evaluateLater(el.getAttribute('u-on:create'));

      Alpine.bind(el, {
        'u-init'() {

          const instance = new TomSelect(el, {
            maxItems: el.hasAttribute('multiple') ? null : 1,
            create,
            onOptionAdd(value) {
              onCreate(() => {}, {scope: {$event: value}});
            }                    
          });    

          cleanup(() => {
            instance.destroy();
          });
        }
      });
    });

  }

    // Alpine.directive('auto-complete', (el, {value, modifiers, expression, }, {Alpine, effect, evaluate, evaluateLater})=>{

      
    //  })
    // Alpine.directive('auto-complete-settings', (el, {value, modifiers, expression, }, {Alpine, effect, evaluate, evaluateLater})=>{

    //   let settings  = evaluate(expression)
    //   console.log(settings)
    //   let input = el.querySelector('input')
    //   var tomSelect = new TomSelect(input, {
    //       maxItems: null,
    //       valueField: 'value',
    //       labelField: 'text',
    //       searchField: 'text',
    //       options: evaluate("items"),
    //       items: evaluate('values'),
    //       persist: false,
    //       createOnBlur: true,
    //       create: true,
    //       ...settings,
    //   })
      

      
      
    //   Alpine.bind(el, {
    //     "u-init"(){
    //       let tomSelect = document.getElementById(this.id).querySelector('input')
    //       tomSelect = tomSelect.tomselect
          
    //       tomSelect.on('change', (val)=>{
    //         this.values = val.split(',')
    //         tomSelect.addOptions(this.items, true)
    //         tomSelect.refreshOptions()
    //       })
    //       tomSelect.on('option_add', (value, data)=>{
    //         let set = new Set(this.items)
    //         set.add(data)
    //         this.items = Array.from(set)
    //         tomSelect.addOptions(this.items, true)
    //         tomSelect.refreshOptions()
    //       })
    //     }
    //   })
    //  })

  function Modal(Alpine) {
    Alpine.directive('modal-backdrop', (el) => {
      Alpine.bind(el, {
        'u-on:click'() {
          const isOpen = el.parentNode.hasAttribute('u-modal-open');
          const isPersistent = el.parentNode.hasAttribute('persistent');

          if(isOpen && !isPersistent) {
            this.$modal.close();
          }
        }
      });
    });

    Alpine.directive('modal-content', (el) => {
      Alpine.bind(el, {
        'u-on:click.stop'() {
          // 
        }
      });
    });

    Alpine.directive('modal', el => {

      Alpine.bind(el, {
        'u-data'() {
          return {
            isOpen: false,
            close() {

              this.$data.isOpen = false;
              // el.removeAttribute('u-modal-open')
            },
          }
        },
        'u-bind:u-modal-open'() {
          return this.$data.isOpen;
        }
      });
    });

    Alpine.magic('modal', (el) => {
      return {
        open(name) {
          let query = "[u-modal]";
          if(name) query = query + `[name="${name}"]`;
          
          const el = document.querySelector(query);
          if(el) {
            el.focus();
            Alpine.$data(el).isOpen = true;
          }

        },
        close(name) {
          let query = "[u-modal-open]";
          if(name) query = query + `[name="${name}"]`;
          
          const el = document.querySelector(query);

          if(el) {
            Alpine.$data(el).isOpen = false;
          }
        }
      }
    });
  }

  var doc = typeof document === 'undefined' ? undefined : document;
  !!doc && 'content' in doc.createElement('template');
  !!doc && doc.createRange && 'createContextualFragment' in doc.createRange();

  function getAlignment(placement) {
    return placement.split('-')[1];
  }

  function getLengthFromAxis(axis) {
    return axis === 'y' ? 'height' : 'width';
  }

  function getSide(placement) {
    return placement.split('-')[0];
  }

  function getMainAxisFromPlacement(placement) {
    return ['top', 'bottom'].includes(getSide(placement)) ? 'x' : 'y';
  }

  function computeCoordsFromPlacement(_ref, placement, rtl) {
    let {
      reference,
      floating
    } = _ref;
    const commonX = reference.x + reference.width / 2 - floating.width / 2;
    const commonY = reference.y + reference.height / 2 - floating.height / 2;
    const mainAxis = getMainAxisFromPlacement(placement);
    const length = getLengthFromAxis(mainAxis);
    const commonAlign = reference[length] / 2 - floating[length] / 2;
    const side = getSide(placement);
    const isVertical = mainAxis === 'x';
    let coords;
    switch (side) {
      case 'top':
        coords = {
          x: commonX,
          y: reference.y - floating.height
        };
        break;
      case 'bottom':
        coords = {
          x: commonX,
          y: reference.y + reference.height
        };
        break;
      case 'right':
        coords = {
          x: reference.x + reference.width,
          y: commonY
        };
        break;
      case 'left':
        coords = {
          x: reference.x - floating.width,
          y: commonY
        };
        break;
      default:
        coords = {
          x: reference.x,
          y: reference.y
        };
    }
    switch (getAlignment(placement)) {
      case 'start':
        coords[mainAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
        break;
      case 'end':
        coords[mainAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
        break;
    }
    return coords;
  }

  /**
   * Computes the `x` and `y` coordinates that will place the floating element
   * next to a reference element when it is given a certain positioning strategy.
   *
   * This export does not have any `platform` interface logic. You will need to
   * write one for the platform you are using Floating UI with.
   */
  const computePosition$1 = async (reference, floating, config) => {
    const {
      placement = 'bottom',
      strategy = 'absolute',
      middleware = [],
      platform
    } = config;
    const validMiddleware = middleware.filter(Boolean);
    const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));
    let rects = await platform.getElementRects({
      reference,
      floating,
      strategy
    });
    let {
      x,
      y
    } = computeCoordsFromPlacement(rects, placement, rtl);
    let statefulPlacement = placement;
    let middlewareData = {};
    let resetCount = 0;
    for (let i = 0; i < validMiddleware.length; i++) {
      const {
        name,
        fn
      } = validMiddleware[i];
      const {
        x: nextX,
        y: nextY,
        data,
        reset
      } = await fn({
        x,
        y,
        initialPlacement: placement,
        placement: statefulPlacement,
        strategy,
        middlewareData,
        rects,
        platform,
        elements: {
          reference,
          floating
        }
      });
      x = nextX != null ? nextX : x;
      y = nextY != null ? nextY : y;
      middlewareData = {
        ...middlewareData,
        [name]: {
          ...middlewareData[name],
          ...data
        }
      };
      if (reset && resetCount <= 50) {
        resetCount++;
        if (typeof reset === 'object') {
          if (reset.placement) {
            statefulPlacement = reset.placement;
          }
          if (reset.rects) {
            rects = reset.rects === true ? await platform.getElementRects({
              reference,
              floating,
              strategy
            }) : reset.rects;
          }
          ({
            x,
            y
          } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
        }
        i = -1;
        continue;
      }
    }
    return {
      x,
      y,
      placement: statefulPlacement,
      strategy,
      middlewareData
    };
  };

  function evaluate(value, param) {
    return typeof value === 'function' ? value(param) : value;
  }

  function expandPaddingObject(padding) {
    return {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      ...padding
    };
  }

  function getSideObjectFromPadding(padding) {
    return typeof padding !== 'number' ? expandPaddingObject(padding) : {
      top: padding,
      right: padding,
      bottom: padding,
      left: padding
    };
  }

  function rectToClientRect(rect) {
    return {
      ...rect,
      top: rect.y,
      left: rect.x,
      right: rect.x + rect.width,
      bottom: rect.y + rect.height
    };
  }

  /**
   * Resolves with an object of overflow side offsets that determine how much the
   * element is overflowing a given clipping boundary on each side.
   * - positive = overflowing the boundary by that number of pixels
   * - negative = how many pixels left before it will overflow
   * - 0 = lies flush with the boundary
   * @see https://floating-ui.com/docs/detectOverflow
   */
  async function detectOverflow(state, options) {
    var _await$platform$isEle;
    if (options === void 0) {
      options = {};
    }
    const {
      x,
      y,
      platform,
      rects,
      elements,
      strategy
    } = state;
    const {
      boundary = 'clippingAncestors',
      rootBoundary = 'viewport',
      elementContext = 'floating',
      altBoundary = false,
      padding = 0
    } = evaluate(options, state);
    const paddingObject = getSideObjectFromPadding(padding);
    const altContext = elementContext === 'floating' ? 'reference' : 'floating';
    const element = elements[altBoundary ? altContext : elementContext];
    const clippingClientRect = rectToClientRect(await platform.getClippingRect({
      element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),
      boundary,
      rootBoundary,
      strategy
    }));
    const rect = elementContext === 'floating' ? {
      ...rects.floating,
      x,
      y
    } : rects.reference;
    const offsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating));
    const offsetScale = (await (platform.isElement == null ? void 0 : platform.isElement(offsetParent))) ? (await (platform.getScale == null ? void 0 : platform.getScale(offsetParent))) || {
      x: 1,
      y: 1
    } : {
      x: 1,
      y: 1
    };
    const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({
      rect,
      offsetParent,
      strategy
    }) : rect);
    return {
      top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,
      bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,
      left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,
      right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x
    };
  }

  const min$1 = Math.min;
  const max$1 = Math.max;

  function within(min$1$1, value, max$1$1) {
    return max$1(min$1$1, min$1(value, max$1$1));
  }

  /**
   * Provides data to position an inner element of the floating element so that it
   * appears centered to the reference element.
   * @see https://floating-ui.com/docs/arrow
   */
  const arrow = options => ({
    name: 'arrow',
    options,
    async fn(state) {
      const {
        x,
        y,
        placement,
        rects,
        platform,
        elements
      } = state;
      // Since `element` is required, we don't Partial<> the type.
      const {
        element,
        padding = 0
      } = evaluate(options, state) || {};
      if (element == null) {
        return {};
      }
      const paddingObject = getSideObjectFromPadding(padding);
      const coords = {
        x,
        y
      };
      const axis = getMainAxisFromPlacement(placement);
      const length = getLengthFromAxis(axis);
      const arrowDimensions = await platform.getDimensions(element);
      const isYAxis = axis === 'y';
      const minProp = isYAxis ? 'top' : 'left';
      const maxProp = isYAxis ? 'bottom' : 'right';
      const clientProp = isYAxis ? 'clientHeight' : 'clientWidth';
      const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];
      const startDiff = coords[axis] - rects.reference[axis];
      const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));
      let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;

      // DOM platform can return `window` as the `offsetParent`.
      if (!clientSize || !(await (platform.isElement == null ? void 0 : platform.isElement(arrowOffsetParent)))) {
        clientSize = elements.floating[clientProp] || rects.floating[length];
      }
      const centerToReference = endDiff / 2 - startDiff / 2;

      // If the padding is large enough that it causes the arrow to no longer be
      // centered, modify the padding so that it is centered.
      const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;
      const minPadding = min$1(paddingObject[minProp], largestPossiblePadding);
      const maxPadding = min$1(paddingObject[maxProp], largestPossiblePadding);

      // Make sure the arrow doesn't overflow the floating element if the center
      // point is outside the floating element's bounds.
      const min$1$1 = minPadding;
      const max = clientSize - arrowDimensions[length] - maxPadding;
      const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;
      const offset = within(min$1$1, center, max);

      // If the reference is small enough that the arrow's padding causes it to
      // to point to nothing for an aligned placement, adjust the offset of the
      // floating element itself. This stops `shift()` from taking action, but can
      // be worked around by calling it again after the `arrow()` if desired.
      const shouldAddOffset = getAlignment(placement) != null && center != offset && rects.reference[length] / 2 - (center < min$1$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;
      const alignmentOffset = shouldAddOffset ? center < min$1$1 ? min$1$1 - center : max - center : 0;
      return {
        [axis]: coords[axis] - alignmentOffset,
        data: {
          [axis]: offset,
          centerOffset: center - offset + alignmentOffset
        }
      };
    }
  });

  const oppositeSideMap = {
    left: 'right',
    right: 'left',
    bottom: 'top',
    top: 'bottom'
  };
  function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, side => oppositeSideMap[side]);
  }

  function getAlignmentSides(placement, rects, rtl) {
    if (rtl === void 0) {
      rtl = false;
    }
    const alignment = getAlignment(placement);
    const mainAxis = getMainAxisFromPlacement(placement);
    const length = getLengthFromAxis(mainAxis);
    let mainAlignmentSide = mainAxis === 'x' ? alignment === (rtl ? 'end' : 'start') ? 'right' : 'left' : alignment === 'start' ? 'bottom' : 'top';
    if (rects.reference[length] > rects.floating[length]) {
      mainAlignmentSide = getOppositePlacement(mainAlignmentSide);
    }
    return {
      main: mainAlignmentSide,
      cross: getOppositePlacement(mainAlignmentSide)
    };
  }

  const oppositeAlignmentMap = {
    start: 'end',
    end: 'start'
  };
  function getOppositeAlignmentPlacement(placement) {
    return placement.replace(/start|end/g, alignment => oppositeAlignmentMap[alignment]);
  }

  function getExpandedPlacements(placement) {
    const oppositePlacement = getOppositePlacement(placement);
    return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];
  }

  function getSideList(side, isStart, rtl) {
    const lr = ['left', 'right'];
    const rl = ['right', 'left'];
    const tb = ['top', 'bottom'];
    const bt = ['bottom', 'top'];
    switch (side) {
      case 'top':
      case 'bottom':
        if (rtl) return isStart ? rl : lr;
        return isStart ? lr : rl;
      case 'left':
      case 'right':
        return isStart ? tb : bt;
      default:
        return [];
    }
  }
  function getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {
    const alignment = getAlignment(placement);
    let list = getSideList(getSide(placement), direction === 'start', rtl);
    if (alignment) {
      list = list.map(side => side + "-" + alignment);
      if (flipAlignment) {
        list = list.concat(list.map(getOppositeAlignmentPlacement));
      }
    }
    return list;
  }

  /**
   * Optimizes the visibility of the floating element by flipping the `placement`
   * in order to keep it in view when the preferred placement(s) will overflow the
   * clipping boundary. Alternative to `autoPlacement`.
   * @see https://floating-ui.com/docs/flip
   */
  const flip = function (options) {
    if (options === void 0) {
      options = {};
    }
    return {
      name: 'flip',
      options,
      async fn(state) {
        var _middlewareData$flip;
        const {
          placement,
          middlewareData,
          rects,
          initialPlacement,
          platform,
          elements
        } = state;
        const {
          mainAxis: checkMainAxis = true,
          crossAxis: checkCrossAxis = true,
          fallbackPlacements: specifiedFallbackPlacements,
          fallbackStrategy = 'bestFit',
          fallbackAxisSideDirection = 'none',
          flipAlignment = true,
          ...detectOverflowOptions
        } = evaluate(options, state);
        const side = getSide(placement);
        const isBasePlacement = getSide(initialPlacement) === initialPlacement;
        const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));
        const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));
        if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== 'none') {
          fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));
        }
        const placements = [initialPlacement, ...fallbackPlacements];
        const overflow = await detectOverflow(state, detectOverflowOptions);
        const overflows = [];
        let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];
        if (checkMainAxis) {
          overflows.push(overflow[side]);
        }
        if (checkCrossAxis) {
          const {
            main,
            cross
          } = getAlignmentSides(placement, rects, rtl);
          overflows.push(overflow[main], overflow[cross]);
        }
        overflowsData = [...overflowsData, {
          placement,
          overflows
        }];

        // One or more sides is overflowing.
        if (!overflows.every(side => side <= 0)) {
          var _middlewareData$flip2, _overflowsData$filter;
          const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;
          const nextPlacement = placements[nextIndex];
          if (nextPlacement) {
            // Try next placement and re-run the lifecycle.
            return {
              data: {
                index: nextIndex,
                overflows: overflowsData
              },
              reset: {
                placement: nextPlacement
              }
            };
          }

          // First, find the candidates that fit on the mainAxis side of overflow,
          // then find the placement that fits the best on the main crossAxis side.
          let resetPlacement = (_overflowsData$filter = overflowsData.filter(d => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;

          // Otherwise fallback.
          if (!resetPlacement) {
            switch (fallbackStrategy) {
              case 'bestFit':
                {
                  var _overflowsData$map$so;
                  const placement = (_overflowsData$map$so = overflowsData.map(d => [d.placement, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0];
                  if (placement) {
                    resetPlacement = placement;
                  }
                  break;
                }
              case 'initialPlacement':
                resetPlacement = initialPlacement;
                break;
            }
          }
          if (placement !== resetPlacement) {
            return {
              reset: {
                placement: resetPlacement
              }
            };
          }
        }
        return {};
      }
    };
  };

  async function convertValueToCoords(state, options) {
    const {
      placement,
      platform,
      elements
    } = state;
    const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));
    const side = getSide(placement);
    const alignment = getAlignment(placement);
    const isVertical = getMainAxisFromPlacement(placement) === 'x';
    const mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;
    const crossAxisMulti = rtl && isVertical ? -1 : 1;
    const rawValue = evaluate(options, state);

    // eslint-disable-next-line prefer-const
    let {
      mainAxis,
      crossAxis,
      alignmentAxis
    } = typeof rawValue === 'number' ? {
      mainAxis: rawValue,
      crossAxis: 0,
      alignmentAxis: null
    } : {
      mainAxis: 0,
      crossAxis: 0,
      alignmentAxis: null,
      ...rawValue
    };
    if (alignment && typeof alignmentAxis === 'number') {
      crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;
    }
    return isVertical ? {
      x: crossAxis * crossAxisMulti,
      y: mainAxis * mainAxisMulti
    } : {
      x: mainAxis * mainAxisMulti,
      y: crossAxis * crossAxisMulti
    };
  }

  /**
   * Modifies the placement by translating the floating element along the
   * specified axes.
   * A number (shorthand for `mainAxis` or distance), or an axes configuration
   * object may be passed.
   * @see https://floating-ui.com/docs/offset
   */
  const offset = function (options) {
    if (options === void 0) {
      options = 0;
    }
    return {
      name: 'offset',
      options,
      async fn(state) {
        const {
          x,
          y
        } = state;
        const diffCoords = await convertValueToCoords(state, options);
        return {
          x: x + diffCoords.x,
          y: y + diffCoords.y,
          data: diffCoords
        };
      }
    };
  };

  function getCrossAxis(axis) {
    return axis === 'x' ? 'y' : 'x';
  }

  /**
   * Optimizes the visibility of the floating element by shifting it in order to
   * keep it in view when it will overflow the clipping boundary.
   * @see https://floating-ui.com/docs/shift
   */
  const shift = function (options) {
    if (options === void 0) {
      options = {};
    }
    return {
      name: 'shift',
      options,
      async fn(state) {
        const {
          x,
          y,
          placement
        } = state;
        const {
          mainAxis: checkMainAxis = true,
          crossAxis: checkCrossAxis = false,
          limiter = {
            fn: _ref => {
              let {
                x,
                y
              } = _ref;
              return {
                x,
                y
              };
            }
          },
          ...detectOverflowOptions
        } = evaluate(options, state);
        const coords = {
          x,
          y
        };
        const overflow = await detectOverflow(state, detectOverflowOptions);
        const mainAxis = getMainAxisFromPlacement(getSide(placement));
        const crossAxis = getCrossAxis(mainAxis);
        let mainAxisCoord = coords[mainAxis];
        let crossAxisCoord = coords[crossAxis];
        if (checkMainAxis) {
          const minSide = mainAxis === 'y' ? 'top' : 'left';
          const maxSide = mainAxis === 'y' ? 'bottom' : 'right';
          const min = mainAxisCoord + overflow[minSide];
          const max = mainAxisCoord - overflow[maxSide];
          mainAxisCoord = within(min, mainAxisCoord, max);
        }
        if (checkCrossAxis) {
          const minSide = crossAxis === 'y' ? 'top' : 'left';
          const maxSide = crossAxis === 'y' ? 'bottom' : 'right';
          const min = crossAxisCoord + overflow[minSide];
          const max = crossAxisCoord - overflow[maxSide];
          crossAxisCoord = within(min, crossAxisCoord, max);
        }
        const limitedCoords = limiter.fn({
          ...state,
          [mainAxis]: mainAxisCoord,
          [crossAxis]: crossAxisCoord
        });
        return {
          ...limitedCoords,
          data: {
            x: limitedCoords.x - x,
            y: limitedCoords.y - y
          }
        };
      }
    };
  };

  function getWindow(node) {
    var _node$ownerDocument;
    return (node == null ? void 0 : (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
  }

  function getComputedStyle$1(element) {
    return getWindow(element).getComputedStyle(element);
  }

  function isNode(value) {
    return value instanceof getWindow(value).Node;
  }
  function getNodeName(node) {
    if (isNode(node)) {
      return (node.nodeName || '').toLowerCase();
    }
    // Mocked nodes in testing environments may not be instances of Node. By
    // returning `#document` an infinite loop won't occur.
    // https://github.com/floating-ui/floating-ui/issues/2317
    return '#document';
  }

  function isHTMLElement(value) {
    return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;
  }
  function isShadowRoot(node) {
    // Browsers without `ShadowRoot` support.
    if (typeof ShadowRoot === 'undefined') {
      return false;
    }
    return node instanceof getWindow(node).ShadowRoot || node instanceof ShadowRoot;
  }
  function isOverflowElement(element) {
    const {
      overflow,
      overflowX,
      overflowY,
      display
    } = getComputedStyle$1(element);
    return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !['inline', 'contents'].includes(display);
  }
  function isTableElement(element) {
    return ['table', 'td', 'th'].includes(getNodeName(element));
  }
  function isContainingBlock(element) {
    const safari = isSafari();
    const css = getComputedStyle$1(element);

    // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block
    return css.transform !== 'none' || css.perspective !== 'none' || (css.containerType ? css.containerType !== 'normal' : false) || !safari && (css.backdropFilter ? css.backdropFilter !== 'none' : false) || !safari && (css.filter ? css.filter !== 'none' : false) || ['transform', 'perspective', 'filter'].some(value => (css.willChange || '').includes(value)) || ['paint', 'layout', 'strict', 'content'].some(value => (css.contain || '').includes(value));
  }
  function isSafari() {
    if (typeof CSS === 'undefined' || !CSS.supports) return false;
    return CSS.supports('-webkit-backdrop-filter', 'none');
  }
  function isLastTraversableNode(node) {
    return ['html', 'body', '#document'].includes(getNodeName(node));
  }

  const min = Math.min;
  const max = Math.max;
  const round = Math.round;
  const floor = Math.floor;
  const createCoords = v => ({
    x: v,
    y: v
  });

  function getCssDimensions(element) {
    const css = getComputedStyle$1(element);
    // In testing environments, the `width` and `height` properties are empty
    // strings for SVG elements, returning NaN. Fallback to `0` in this case.
    let width = parseFloat(css.width) || 0;
    let height = parseFloat(css.height) || 0;
    const hasOffset = isHTMLElement(element);
    const offsetWidth = hasOffset ? element.offsetWidth : width;
    const offsetHeight = hasOffset ? element.offsetHeight : height;
    const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;
    if (shouldFallback) {
      width = offsetWidth;
      height = offsetHeight;
    }
    return {
      width,
      height,
      $: shouldFallback
    };
  }

  function isElement(value) {
    return value instanceof Element || value instanceof getWindow(value).Element;
  }

  function unwrapElement(element) {
    return !isElement(element) ? element.contextElement : element;
  }

  function getScale(element) {
    const domElement = unwrapElement(element);
    if (!isHTMLElement(domElement)) {
      return createCoords(1);
    }
    const rect = domElement.getBoundingClientRect();
    const {
      width,
      height,
      $
    } = getCssDimensions(domElement);
    let x = ($ ? round(rect.width) : rect.width) / width;
    let y = ($ ? round(rect.height) : rect.height) / height;

    // 0, NaN, or Infinity should always fallback to 1.

    if (!x || !Number.isFinite(x)) {
      x = 1;
    }
    if (!y || !Number.isFinite(y)) {
      y = 1;
    }
    return {
      x,
      y
    };
  }

  const noOffsets = /*#__PURE__*/createCoords(0);
  function getVisualOffsets(element) {
    const win = getWindow(element);
    if (!isSafari() || !win.visualViewport) {
      return noOffsets;
    }
    return {
      x: win.visualViewport.offsetLeft,
      y: win.visualViewport.offsetTop
    };
  }
  function shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {
    if (isFixed === void 0) {
      isFixed = false;
    }
    if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {
      return false;
    }
    return isFixed;
  }

  function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
    if (includeScale === void 0) {
      includeScale = false;
    }
    if (isFixedStrategy === void 0) {
      isFixedStrategy = false;
    }
    const clientRect = element.getBoundingClientRect();
    const domElement = unwrapElement(element);
    let scale = createCoords(1);
    if (includeScale) {
      if (offsetParent) {
        if (isElement(offsetParent)) {
          scale = getScale(offsetParent);
        }
      } else {
        scale = getScale(element);
      }
    }
    const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);
    let x = (clientRect.left + visualOffsets.x) / scale.x;
    let y = (clientRect.top + visualOffsets.y) / scale.y;
    let width = clientRect.width / scale.x;
    let height = clientRect.height / scale.y;
    if (domElement) {
      const win = getWindow(domElement);
      const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;
      let currentIFrame = win.frameElement;
      while (currentIFrame && offsetParent && offsetWin !== win) {
        const iframeScale = getScale(currentIFrame);
        const iframeRect = currentIFrame.getBoundingClientRect();
        const css = getComputedStyle(currentIFrame);
        const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;
        const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;
        x *= iframeScale.x;
        y *= iframeScale.y;
        width *= iframeScale.x;
        height *= iframeScale.y;
        x += left;
        y += top;
        currentIFrame = getWindow(currentIFrame).frameElement;
      }
    }
    return rectToClientRect({
      width,
      height,
      x,
      y
    });
  }

  function getNodeScroll(element) {
    if (isElement(element)) {
      return {
        scrollLeft: element.scrollLeft,
        scrollTop: element.scrollTop
      };
    }
    return {
      scrollLeft: element.pageXOffset,
      scrollTop: element.pageYOffset
    };
  }

  function getDocumentElement(node) {
    var _ref;
    return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;
  }

  function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
    let {
      rect,
      offsetParent,
      strategy
    } = _ref;
    const isOffsetParentAnElement = isHTMLElement(offsetParent);
    const documentElement = getDocumentElement(offsetParent);
    if (offsetParent === documentElement) {
      return rect;
    }
    let scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    let scale = createCoords(1);
    const offsets = createCoords(0);
    if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== 'fixed') {
      if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }
      if (isHTMLElement(offsetParent)) {
        const offsetRect = getBoundingClientRect(offsetParent);
        scale = getScale(offsetParent);
        offsets.x = offsetRect.x + offsetParent.clientLeft;
        offsets.y = offsetRect.y + offsetParent.clientTop;
      }
    }
    return {
      width: rect.width * scale.x,
      height: rect.height * scale.y,
      x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,
      y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y
    };
  }

  function getClientRects(element) {
    return Array.from(element.getClientRects());
  }

  function getWindowScrollBarX(element) {
    // If <html> has a CSS width greater than the viewport, then this will be
    // incorrect for RTL.
    return getBoundingClientRect(getDocumentElement(element)).left + getNodeScroll(element).scrollLeft;
  }

  // Gets the entire size of the scrollable document area, even extending outside
  // of the `<html>` and `<body>` rect bounds if horizontally scrollable.
  function getDocumentRect(element) {
    const html = getDocumentElement(element);
    const scroll = getNodeScroll(element);
    const body = element.ownerDocument.body;
    const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);
    const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);
    let x = -scroll.scrollLeft + getWindowScrollBarX(element);
    const y = -scroll.scrollTop;
    if (getComputedStyle$1(body).direction === 'rtl') {
      x += max(html.clientWidth, body.clientWidth) - width;
    }
    return {
      width,
      height,
      x,
      y
    };
  }

  function getParentNode(node) {
    if (getNodeName(node) === 'html') {
      return node;
    }
    const result =
    // Step into the shadow DOM of the parent of a slotted node.
    node.assignedSlot ||
    // DOM Element detected.
    node.parentNode ||
    // ShadowRoot detected.
    isShadowRoot(node) && node.host ||
    // Fallback.
    getDocumentElement(node);
    return isShadowRoot(result) ? result.host : result;
  }

  function getNearestOverflowAncestor(node) {
    const parentNode = getParentNode(node);
    if (isLastTraversableNode(parentNode)) {
      return node.ownerDocument ? node.ownerDocument.body : node.body;
    }
    if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
      return parentNode;
    }
    return getNearestOverflowAncestor(parentNode);
  }

  function getOverflowAncestors(node, list) {
    var _node$ownerDocument;
    if (list === void 0) {
      list = [];
    }
    const scrollableAncestor = getNearestOverflowAncestor(node);
    const isBody = scrollableAncestor === ((_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.body);
    const win = getWindow(scrollableAncestor);
    if (isBody) {
      return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : []);
    }
    return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor));
  }

  function getViewportRect(element, strategy) {
    const win = getWindow(element);
    const html = getDocumentElement(element);
    const visualViewport = win.visualViewport;
    let width = html.clientWidth;
    let height = html.clientHeight;
    let x = 0;
    let y = 0;
    if (visualViewport) {
      width = visualViewport.width;
      height = visualViewport.height;
      const visualViewportBased = isSafari();
      if (!visualViewportBased || visualViewportBased && strategy === 'fixed') {
        x = visualViewport.offsetLeft;
        y = visualViewport.offsetTop;
      }
    }
    return {
      width,
      height,
      x,
      y
    };
  }

  // Returns the inner client rect, subtracting scrollbars if present.
  function getInnerBoundingClientRect(element, strategy) {
    const clientRect = getBoundingClientRect(element, true, strategy === 'fixed');
    const top = clientRect.top + element.clientTop;
    const left = clientRect.left + element.clientLeft;
    const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);
    const width = element.clientWidth * scale.x;
    const height = element.clientHeight * scale.y;
    const x = left * scale.x;
    const y = top * scale.y;
    return {
      width,
      height,
      x,
      y
    };
  }
  function getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {
    let rect;
    if (clippingAncestor === 'viewport') {
      rect = getViewportRect(element, strategy);
    } else if (clippingAncestor === 'document') {
      rect = getDocumentRect(getDocumentElement(element));
    } else if (isElement(clippingAncestor)) {
      rect = getInnerBoundingClientRect(clippingAncestor, strategy);
    } else {
      const visualOffsets = getVisualOffsets(element);
      rect = {
        ...clippingAncestor,
        x: clippingAncestor.x - visualOffsets.x,
        y: clippingAncestor.y - visualOffsets.y
      };
    }
    return rectToClientRect(rect);
  }
  function hasFixedPositionAncestor(element, stopNode) {
    const parentNode = getParentNode(element);
    if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {
      return false;
    }
    return getComputedStyle$1(parentNode).position === 'fixed' || hasFixedPositionAncestor(parentNode, stopNode);
  }

  // A "clipping ancestor" is an `overflow` element with the characteristic of
  // clipping (or hiding) child elements. This returns all clipping ancestors
  // of the given element up the tree.
  function getClippingElementAncestors(element, cache) {
    const cachedResult = cache.get(element);
    if (cachedResult) {
      return cachedResult;
    }
    let result = getOverflowAncestors(element).filter(el => isElement(el) && getNodeName(el) !== 'body');
    let currentContainingBlockComputedStyle = null;
    const elementIsFixed = getComputedStyle$1(element).position === 'fixed';
    let currentNode = elementIsFixed ? getParentNode(element) : element;

    // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block
    while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {
      const computedStyle = getComputedStyle$1(currentNode);
      const currentNodeIsContaining = isContainingBlock(currentNode);
      if (!currentNodeIsContaining && computedStyle.position === 'fixed') {
        currentContainingBlockComputedStyle = null;
      }
      const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === 'static' && !!currentContainingBlockComputedStyle && ['absolute', 'fixed'].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);
      if (shouldDropCurrentNode) {
        // Drop non-containing blocks.
        result = result.filter(ancestor => ancestor !== currentNode);
      } else {
        // Record last containing block for next iteration.
        currentContainingBlockComputedStyle = computedStyle;
      }
      currentNode = getParentNode(currentNode);
    }
    cache.set(element, result);
    return result;
  }

  // Gets the maximum area that the element is visible in due to any number of
  // clipping ancestors.
  function getClippingRect(_ref) {
    let {
      element,
      boundary,
      rootBoundary,
      strategy
    } = _ref;
    const elementClippingAncestors = boundary === 'clippingAncestors' ? getClippingElementAncestors(element, this._c) : [].concat(boundary);
    const clippingAncestors = [...elementClippingAncestors, rootBoundary];
    const firstClippingAncestor = clippingAncestors[0];
    const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
      const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
      accRect.top = max(rect.top, accRect.top);
      accRect.right = min(rect.right, accRect.right);
      accRect.bottom = min(rect.bottom, accRect.bottom);
      accRect.left = max(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
    return {
      width: clippingRect.right - clippingRect.left,
      height: clippingRect.bottom - clippingRect.top,
      x: clippingRect.left,
      y: clippingRect.top
    };
  }

  function getDimensions(element) {
    return getCssDimensions(element);
  }

  function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
    const isOffsetParentAnElement = isHTMLElement(offsetParent);
    const documentElement = getDocumentElement(offsetParent);
    const isFixed = strategy === 'fixed';
    const rect = getBoundingClientRect(element, true, isFixed, offsetParent);
    let scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    const offsets = createCoords(0);
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }
      if (isHTMLElement(offsetParent)) {
        const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);
        offsets.x = offsetRect.x + offsetParent.clientLeft;
        offsets.y = offsetRect.y + offsetParent.clientTop;
      } else if (documentElement) {
        offsets.x = getWindowScrollBarX(documentElement);
      }
    }
    return {
      x: rect.left + scroll.scrollLeft - offsets.x,
      y: rect.top + scroll.scrollTop - offsets.y,
      width: rect.width,
      height: rect.height
    };
  }

  function getTrueOffsetParent(element, polyfill) {
    if (!isHTMLElement(element) || getComputedStyle$1(element).position === 'fixed') {
      return null;
    }
    if (polyfill) {
      return polyfill(element);
    }
    return element.offsetParent;
  }
  function getContainingBlock(element) {
    let currentNode = getParentNode(element);
    while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {
      if (isContainingBlock(currentNode)) {
        return currentNode;
      } else {
        currentNode = getParentNode(currentNode);
      }
    }
    return null;
  }

  // Gets the closest ancestor positioned element. Handles some edge cases,
  // such as table ancestors and cross browser bugs.
  function getOffsetParent(element, polyfill) {
    const window = getWindow(element);
    if (!isHTMLElement(element)) {
      return window;
    }
    let offsetParent = getTrueOffsetParent(element, polyfill);
    while (offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === 'static') {
      offsetParent = getTrueOffsetParent(offsetParent, polyfill);
    }
    if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle$1(offsetParent).position === 'static' && !isContainingBlock(offsetParent))) {
      return window;
    }
    return offsetParent || getContainingBlock(element) || window;
  }

  const getElementRects = async function (_ref) {
    let {
      reference,
      floating,
      strategy
    } = _ref;
    const getOffsetParentFn = this.getOffsetParent || getOffsetParent;
    const getDimensionsFn = this.getDimensions;
    return {
      reference: getRectRelativeToOffsetParent(reference, await getOffsetParentFn(floating), strategy),
      floating: {
        x: 0,
        y: 0,
        ...(await getDimensionsFn(floating))
      }
    };
  };

  function isRTL(element) {
    return getComputedStyle(element).direction === 'rtl';
  }

  const platform = {
    convertOffsetParentRelativeRectToViewportRelativeRect,
    getDocumentElement,
    getClippingRect,
    getOffsetParent,
    getElementRects,
    getClientRects,
    getDimensions,
    getScale,
    isElement,
    isRTL
  };

  // https://samthor.au/2021/observing-dom/
  function observeMove(element, onMove) {
    let io = null;
    let timeoutId;
    const root = getDocumentElement(element);
    function cleanup() {
      clearTimeout(timeoutId);
      io && io.disconnect();
      io = null;
    }
    function refresh(skip, threshold) {
      if (skip === void 0) {
        skip = false;
      }
      if (threshold === void 0) {
        threshold = 1;
      }
      cleanup();
      const {
        left,
        top,
        width,
        height
      } = element.getBoundingClientRect();
      if (!skip) {
        onMove();
      }
      if (!width || !height) {
        return;
      }
      const insetTop = floor(top);
      const insetRight = floor(root.clientWidth - (left + width));
      const insetBottom = floor(root.clientHeight - (top + height));
      const insetLeft = floor(left);
      const rootMargin = -insetTop + "px " + -insetRight + "px " + -insetBottom + "px " + -insetLeft + "px";
      const options = {
        rootMargin,
        threshold: max(0, min(1, threshold)) || 1
      };
      let isFirstUpdate = true;
      function handleObserve(entries) {
        const ratio = entries[0].intersectionRatio;
        if (ratio !== threshold) {
          if (!isFirstUpdate) {
            return refresh();
          }
          if (!ratio) {
            timeoutId = setTimeout(() => {
              refresh(false, 1e-7);
            }, 100);
          } else {
            refresh(false, ratio);
          }
        }
        isFirstUpdate = false;
      }

      // Older browsers don't support a `document` as the root and will throw an
      // error.
      try {
        io = new IntersectionObserver(handleObserve, {
          ...options,
          // Handle <iframe>s
          root: root.ownerDocument
        });
      } catch (e) {
        io = new IntersectionObserver(handleObserve, options);
      }
      io.observe(element);
    }
    refresh(true);
    return cleanup;
  }

  /**
   * Automatically updates the position of the floating element when necessary.
   * Should only be called when the floating element is mounted on the DOM or
   * visible on the screen.
   * @returns cleanup function that should be invoked when the floating element is
   * removed from the DOM or hidden from the screen.
   * @see https://floating-ui.com/docs/autoUpdate
   */
  function autoUpdate(reference, floating, update, options) {
    if (options === void 0) {
      options = {};
    }
    const {
      ancestorScroll = true,
      ancestorResize = true,
      elementResize = typeof ResizeObserver === 'function',
      layoutShift = typeof IntersectionObserver === 'function',
      animationFrame = false
    } = options;
    const referenceEl = unwrapElement(reference);
    const ancestors = ancestorScroll || ancestorResize ? [...(referenceEl ? getOverflowAncestors(referenceEl) : []), ...getOverflowAncestors(floating)] : [];
    ancestors.forEach(ancestor => {
      ancestorScroll && ancestor.addEventListener('scroll', update, {
        passive: true
      });
      ancestorResize && ancestor.addEventListener('resize', update);
    });
    const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;
    let reobserveFrame = -1;
    let resizeObserver = null;
    if (elementResize) {
      resizeObserver = new ResizeObserver(_ref => {
        let [firstEntry] = _ref;
        if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {
          // Prevent update loops when using the `size` middleware.
          // https://github.com/floating-ui/floating-ui/issues/1740
          resizeObserver.unobserve(floating);
          cancelAnimationFrame(reobserveFrame);
          reobserveFrame = requestAnimationFrame(() => {
            resizeObserver && resizeObserver.observe(floating);
          });
        }
        update();
      });
      if (referenceEl && !animationFrame) {
        resizeObserver.observe(referenceEl);
      }
      resizeObserver.observe(floating);
    }
    let frameId;
    let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
    if (animationFrame) {
      frameLoop();
    }
    function frameLoop() {
      const nextRefRect = getBoundingClientRect(reference);
      if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {
        update();
      }
      prevRefRect = nextRefRect;
      frameId = requestAnimationFrame(frameLoop);
    }
    update();
    return () => {
      ancestors.forEach(ancestor => {
        ancestorScroll && ancestor.removeEventListener('scroll', update);
        ancestorResize && ancestor.removeEventListener('resize', update);
      });
      cleanupIo && cleanupIo();
      resizeObserver && resizeObserver.disconnect();
      resizeObserver = null;
      if (animationFrame) {
        cancelAnimationFrame(frameId);
      }
    };
  }

  /**
   * Computes the `x` and `y` coordinates that will place the floating element
   * next to a reference element when it is given a certain CSS positioning
   * strategy.
   */
  const computePosition = (reference, floating, options) => {
    // This caches the expensive `getClippingElementAncestors` function so that
    // multiple lifecycle resets re-use the same result. It only lives for a
    // single call. If other functions become expensive, we can add them as well.
    const cache = new Map();
    const mergedOptions = {
      platform,
      ...options
    };
    const platformWithCache = {
      ...mergedOptions.platform,
      _c: cache
    };
    return computePosition$1(reference, floating, {
      ...mergedOptions,
      platform: platformWithCache
    });
  };

  //popup using floating-ui 
    //popup is the base componenet for rest of componenets like popover, tooltip, dropdown,
    function Popup(Alpine) {
      Alpine.directive("popup", (el) => {
        const edge = el.querySelector('[u-popup-edge]');
        
        const target =
          document.querySelector(el.getAttribute("u-popup-target")) ?? el.parentNode;
        const floatingEl = el;
        
        target.setAttribute('u-popup-reference', '');
        
        const offsetValue = el.getAttribute("u-popup-offset") ?? 0;
        const placement = el.getAttribute("u-popup-placement") ?? "bottom";
        const shiftMargin = el.getAttribute("u-popup-margin") ?? 4;
        const arrowEl = el.querySelector("[u-popup-arrow]");
        const trigger = el.getAttribute("u-popup-trigger") ?? "click";
        const arrowMargin = el.getAttribute("u-popup-arrow-margin") ?? 4;
        const flipAble = el.hasAttribute('u-popup-flip') ?? true;
        const shiftAble = el.hasAttribute('u-popup-shift') ?? true;
    
        let cleanUp;
    
        function updatePosition() {
          computePosition(target, floatingEl, {
            placement,
            middleware: [
              offset(offsetValue? offsetValue : arrowEl? 6: 0),
              flipAble? flip(): "",
              shiftAble? shift({ padding: shiftMargin }): "",
              arrowEl ? arrow({ element: arrowEl, padding: arrowMargin }) : "",
            ],
          }).then(({ x, y, placement, middlewareData }) => {
            Object.assign(floatingEl.style, {
              left: `${x}px`,
              top: `${y}px`,
            });
    
            // setting the arrow position if arrow exists
            if (arrowEl) {
              const { x: arrowX, y: arrowY } = middlewareData.arrow;
              const staticSide = {
                top: "bottom",
                right: "left",
                bottom: "top",
                left: "right",
              }[placement.split("-")[0]];
              const rotateDeg = {
                bottom: 0,
                left: 90,
                top: 180,
                right: 270,
              }[placement.split("-")[0]];
              
              Object.assign(arrowEl.style, {
                left: arrowX != null ? `${arrowX}px` : "",
                top: arrowY != null ? `${arrowY}px` : "",
                right: "",
                bottom: "",
                [staticSide]: "-8px",
                transform: `rotate(${rotateDeg}deg)`
                
              });
            }

            // for persisting floatingEl when hover over it
            if(edge) {
              const edgeSide = {
                bottom: "borderBottomWidth",
                left: "borderLeftWidth",
                top: "borderTopWidth",
                right: "borderRightWidth",
              }[placement.split("-")[0]];
    
              Object.assign(edge.style, {
                borderWidth: '0px',
                [edgeSide]: `${15 + offsetValue}px`,
              });
            }
          });
        }

        const popupController = {
          show() {
            Object.assign(el.style, {
              display: "block",
            });
            cleanUp = autoUpdate(target, floatingEl, () => {
              updatePosition();
            });
          },
          hide() {
            Object.assign(el.style, {
              display: "none",
            });
            if (cleanUp) {
              cleanUp();
            }
          },
          toggle() {
            if (el.style.display === "block") {
              this.hide();
            } else {
              this.show();
            }
          },
        };

        Alpine.bind(target, () => ({
          "u-data"() {
            return popupController;
          },
        }));

        if (trigger == "focus") {
          Alpine.bind(target, () => ({
            "u-on:focus"() {
              popupController.show();
            },
            "u-on:blur"() {
              popupController.hide();
            },
          }));
        } else if(trigger == 'hover') {
          Alpine.bind(target, () => ({
            "u-on:mouseenter"() {
              popupController.show();
            },
            "u-on:mouseleave"() {
              popupController.hide();
            },
          }));
        }else {
          Alpine.bind(target, () => ({
            "u-on:click"() {
              popupController.show();
            },
            "u-on:click.outside"() {
              popupController.hide();
            },
          }));
        }
        Alpine.bind(floatingEl, () => ({
          "u-on:mouseenter"() {
            floatingEl.focus();
          },
          "u-on:focus"() {
            floatingEl.focus();
          },
          "u-on:keyup.escape.window"(){
            popupController.hide();
          }
        }));

        //if the persistant is false
        if(!edge){
          Alpine.bind(floatingEl, () => ({
            "u-on:mouseenter"() {
              popupController.hide();
            },
            "u-on:focus"() {
              popupController.hide();
            },
          }));
        }
        
      });
    }
    























  // export function Popup(Alpine) {

  //     // use @floating-ui/dom similar to yesvelte
  //     Alpine.directive('popup', (el, {}, {evaluate, cleanup}) => {
  //         const trigger = el.getAttribute('trigger')
  //         const placement = el.getAttribute('placement')
  //         const target = el.getAttribute('target')

  //         // let targetEl;

  //         // if(target) {
  //         //     targetEl = evaluate(target) ?? el.previousElementSibling
  //         // } else {
  //         //     targetEl = el.previousElementSibling;
  //         // }

  //         // let instance = tippy(targetEl, {
  //         //     // hideOnClick: true,
  //         //     arrow: true,
  //         //     // placement: placement,
  //         //     // trigger: trigger,
  //         //     content: (reference) => reference.innerHTML
  //         // })[0]

  //         // cleanup(() => {
  //         //     instance.destroy()
  //         // })        
  //     })
  // }

  function Input(Alpine) {
    
      Alpine.directive("input", (el) => {
        Alpine.bind(el, {
          // initial value
          'u-init'() {
            if(el.value) {
              this.$data[el.getAttribute('name')] = el.value;
            } else {
              el.value = this.$data[el.getAttribute('name')];
            }
          },
          "u-on:input"(e) {
            this.$data[el.getAttribute("name")] = e.target.value;
          },
        });
        // input
      });
    }

  function Textarea(Alpine) {
      Alpine.directive('textarea', (el) => {

          // Alpine.bind(el, {
          //     'u-on:input'(e) {
          //         this.$data[el.getAttribute('name')] = e.target.value
          //     }
          // })
      });
  }

  function attr($el, key, value) {
    if (typeof value === "undefined") {
      const result = $el.getAttribute(key);

      if (result === "false") return false;
      if (result === "true") return true;

      return $el.getAttribute(key);
    }

    if (value == "") {
      $el.removeAttribute(key);
    } else if (value === true) {
      $el.setAttribute(key, "");
    } else {
      $el.setAttribute(key, value);
    }
  }
  function getAttr($el, key) {
    const value = attr($el, key);

    if (value === "") return true;
    if (!value) return false;

    return value;
  }

  function removeAttr($el, key) {
    attr($el, key, "");
  }
  function setAttr($el, key, value = true) {
    attr($el, key, value);
  }

  function query($el, key, callback) {
    return $el.querySelectorAll(key).forEach((el) => callback(el));
  }
  function queryAttr($el, key, callback) {
    return query($el, `[${key}]`, callback);
  }

  function Tabs(Alpine) {
      Alpine.directive('tabs', (el, first, second)=>{
          let tabItems = [];
          let tabPanels = [];
          let activeTab  = 0;

          el.querySelectorAll('[u-tabs-item]').forEach((item) => {

              tabItems.push(item);
              let index = tabItems.indexOf(item);
              if(getAttr(item, 'u-tabs-item-active')){
                  activeTab = index;
              }
              item.onclick = (event)=>{
                  queryAttr(el, 'u-tabs-item-active', (e)=>{
                      removeAttr(e, 'u-tabs-item-active');
                  });
                  queryAttr(el, 'u-tabs-panel-active', (e)=>{
                      removeAttr(e, 'u-tabs-panel-active');
                  });
                  setAttr(item, 'u-tabs-item-active', true);
                  setAttr(tabPanels[index], 'u-tabs-panel-active', true);
              };
          },);

          el.querySelectorAll('[u-tabs-panel]').forEach(panel => {
              tabPanels.push(panel);
          });

          
          setAttr(tabPanels[activeTab], 'u-tabs-panel-active', true);
          setAttr(tabItems[activeTab], 'u-tabs-item-active', true);
      



      });
  }

  function Dropdown(Alpine){
    Alpine.directive('dropdown', (el, {}, {Alpine})=>{
     
    });


  }

  const globalWindow = window;
  function CodeJar(editor, highlight, opt = {}) {
      const options = {
          tab: '\t',
          indentOn: /[({\[]$/,
          moveToNewLine: /^[)}\]]/,
          spellcheck: false,
          catchTab: true,
          preserveIdent: true,
          addClosing: true,
          history: true,
          window: globalWindow,
          ...opt,
      };
      const window = options.window;
      const document = window.document;
      const listeners = [];
      const history = [];
      let at = -1;
      let focus = false;
      let onUpdate = () => void 0;
      let prev; // code content prior keydown event
      editor.setAttribute('contenteditable', 'plaintext-only');
      editor.setAttribute('spellcheck', options.spellcheck ? 'true' : 'false');
      editor.style.outline = 'none';
      editor.style.overflowWrap = 'break-word';
      editor.style.overflowY = 'auto';
      editor.style.whiteSpace = 'pre-wrap';
      const doHighlight = (editor, pos) => {
          highlight(editor, pos);
      };
      let isLegacy = false; // true if plaintext-only is not supported
      if (editor.contentEditable !== 'plaintext-only')
          isLegacy = true;
      if (isLegacy)
          editor.setAttribute('contenteditable', 'true');
      const debounceHighlight = debounce(() => {
          const pos = save();
          doHighlight(editor, pos);
          restore(pos);
      }, 30);
      let recording = false;
      const shouldRecord = (event) => {
          return !isUndo(event) && !isRedo(event)
              && event.key !== 'Meta'
              && event.key !== 'Control'
              && event.key !== 'Alt'
              && !event.key.startsWith('Arrow');
      };
      const debounceRecordHistory = debounce((event) => {
          if (shouldRecord(event)) {
              recordHistory();
              recording = false;
          }
      }, 300);
      const on = (type, fn) => {
          listeners.push([type, fn]);
          editor.addEventListener(type, fn);
      };
      on('keydown', event => {
          if (event.defaultPrevented)
              return;
          prev = toString();
          if (options.preserveIdent)
              handleNewLine(event);
          else
              legacyNewLineFix(event);
          if (options.catchTab)
              handleTabCharacters(event);
          if (options.addClosing)
              handleSelfClosingCharacters(event);
          if (options.history) {
              handleUndoRedo(event);
              if (shouldRecord(event) && !recording) {
                  recordHistory();
                  recording = true;
              }
          }
          if (isLegacy && !isCopy(event))
              restore(save());
      });
      on('keyup', event => {
          if (event.defaultPrevented)
              return;
          if (event.isComposing)
              return;
          if (prev !== toString())
              debounceHighlight();
          debounceRecordHistory(event);
          onUpdate(toString());
      });
      on('focus', _event => {
          focus = true;
      });
      on('blur', _event => {
          focus = false;
      });
      on('paste', event => {
          recordHistory();
          handlePaste(event);
          recordHistory();
          onUpdate(toString());
      });
      on('cut', event => {
          recordHistory();
          handleCut(event);
          recordHistory();
          onUpdate(toString());
      });
      function save() {
          const s = getSelection();
          const pos = { start: 0, end: 0, dir: undefined };
          let { anchorNode, anchorOffset, focusNode, focusOffset } = s;
          if (!anchorNode || !focusNode)
              throw 'error1';
          // If the anchor and focus are the editor element, return either a full
          // highlight or a start/end cursor position depending on the selection
          if (anchorNode === editor && focusNode === editor) {
              pos.start = (anchorOffset > 0 && editor.textContent) ? editor.textContent.length : 0;
              pos.end = (focusOffset > 0 && editor.textContent) ? editor.textContent.length : 0;
              pos.dir = (focusOffset >= anchorOffset) ? '->' : '<-';
              return pos;
          }
          // Selection anchor and focus are expected to be text nodes,
          // so normalize them.
          if (anchorNode.nodeType === Node.ELEMENT_NODE) {
              const node = document.createTextNode('');
              anchorNode.insertBefore(node, anchorNode.childNodes[anchorOffset]);
              anchorNode = node;
              anchorOffset = 0;
          }
          if (focusNode.nodeType === Node.ELEMENT_NODE) {
              const node = document.createTextNode('');
              focusNode.insertBefore(node, focusNode.childNodes[focusOffset]);
              focusNode = node;
              focusOffset = 0;
          }
          visit(editor, el => {
              if (el === anchorNode && el === focusNode) {
                  pos.start += anchorOffset;
                  pos.end += focusOffset;
                  pos.dir = anchorOffset <= focusOffset ? '->' : '<-';
                  return 'stop';
              }
              if (el === anchorNode) {
                  pos.start += anchorOffset;
                  if (!pos.dir) {
                      pos.dir = '->';
                  }
                  else {
                      return 'stop';
                  }
              }
              else if (el === focusNode) {
                  pos.end += focusOffset;
                  if (!pos.dir) {
                      pos.dir = '<-';
                  }
                  else {
                      return 'stop';
                  }
              }
              if (el.nodeType === Node.TEXT_NODE) {
                  if (pos.dir != '->')
                      pos.start += el.nodeValue.length;
                  if (pos.dir != '<-')
                      pos.end += el.nodeValue.length;
              }
          });
          editor.normalize(); // collapse empty text nodes
          return pos;
      }
      function restore(pos) {
          const s = getSelection();
          let startNode, startOffset = 0;
          let endNode, endOffset = 0;
          if (!pos.dir)
              pos.dir = '->';
          if (pos.start < 0)
              pos.start = 0;
          if (pos.end < 0)
              pos.end = 0;
          // Flip start and end if the direction reversed
          if (pos.dir == '<-') {
              const { start, end } = pos;
              pos.start = end;
              pos.end = start;
          }
          let current = 0;
          visit(editor, el => {
              if (el.nodeType !== Node.TEXT_NODE)
                  return;
              const len = (el.nodeValue || '').length;
              if (current + len > pos.start) {
                  if (!startNode) {
                      startNode = el;
                      startOffset = pos.start - current;
                  }
                  if (current + len > pos.end) {
                      endNode = el;
                      endOffset = pos.end - current;
                      return 'stop';
                  }
              }
              current += len;
          });
          if (!startNode)
              startNode = editor, startOffset = editor.childNodes.length;
          if (!endNode)
              endNode = editor, endOffset = editor.childNodes.length;
          // Flip back the selection
          if (pos.dir == '<-') {
              [startNode, startOffset, endNode, endOffset] = [endNode, endOffset, startNode, startOffset];
          }
          {
              // If nodes not editable, create a text node.
              const startEl = uneditable(startNode);
              if (startEl) {
                  const node = document.createTextNode('');
                  startEl.parentNode?.insertBefore(node, startEl);
                  startNode = node;
                  startOffset = 0;
              }
              const endEl = uneditable(endNode);
              if (endEl) {
                  const node = document.createTextNode('');
                  endEl.parentNode?.insertBefore(node, endEl);
                  endNode = node;
                  endOffset = 0;
              }
          }
          s.setBaseAndExtent(startNode, startOffset, endNode, endOffset);
          editor.normalize(); // collapse empty text nodes
      }
      function uneditable(node) {
          while (node && node !== editor) {
              if (node.nodeType === Node.ELEMENT_NODE) {
                  const el = node;
                  if (el.getAttribute('contenteditable') == 'false') {
                      return el;
                  }
              }
              node = node.parentNode;
          }
      }
      function beforeCursor() {
          const s = getSelection();
          const r0 = s.getRangeAt(0);
          const r = document.createRange();
          r.selectNodeContents(editor);
          r.setEnd(r0.startContainer, r0.startOffset);
          return r.toString();
      }
      function afterCursor() {
          const s = getSelection();
          const r0 = s.getRangeAt(0);
          const r = document.createRange();
          r.selectNodeContents(editor);
          r.setStart(r0.endContainer, r0.endOffset);
          return r.toString();
      }
      function handleNewLine(event) {
          if (event.key === 'Enter') {
              const before = beforeCursor();
              const after = afterCursor();
              let [padding] = findPadding(before);
              let newLinePadding = padding;
              // If last symbol is "{" ident new line
              if (options.indentOn.test(before)) {
                  newLinePadding += options.tab;
              }
              // Preserve padding
              if (newLinePadding.length > 0) {
                  preventDefault(event);
                  event.stopPropagation();
                  insert('\n' + newLinePadding);
              }
              else {
                  legacyNewLineFix(event);
              }
              // Place adjacent "}" on next line
              if (newLinePadding !== padding && options.moveToNewLine.test(after)) {
                  const pos = save();
                  insert('\n' + padding);
                  restore(pos);
              }
          }
      }
      function legacyNewLineFix(event) {
          // Firefox does not support plaintext-only mode
          // and puts <div><br></div> on Enter. Let's help.
          if (isLegacy && event.key === 'Enter') {
              preventDefault(event);
              event.stopPropagation();
              if (afterCursor() == '') {
                  insert('\n ');
                  const pos = save();
                  pos.start = --pos.end;
                  restore(pos);
              }
              else {
                  insert('\n');
              }
          }
      }
      function handleSelfClosingCharacters(event) {
          const open = `([{'"`;
          const close = `)]}'"`;
          if (open.includes(event.key)) {
              preventDefault(event);
              const pos = save();
              const wrapText = pos.start == pos.end ? '' : getSelection().toString();
              const text = event.key + wrapText + close[open.indexOf(event.key)];
              insert(text);
              pos.start++;
              pos.end++;
              restore(pos);
          }
      }
      function handleTabCharacters(event) {
          if (event.key === 'Tab') {
              preventDefault(event);
              if (event.shiftKey) {
                  const before = beforeCursor();
                  let [padding, start] = findPadding(before);
                  if (padding.length > 0) {
                      const pos = save();
                      // Remove full length tab or just remaining padding
                      const len = Math.min(options.tab.length, padding.length);
                      restore({ start, end: start + len });
                      document.execCommand('delete');
                      pos.start -= len;
                      pos.end -= len;
                      restore(pos);
                  }
              }
              else {
                  insert(options.tab);
              }
          }
      }
      function handleUndoRedo(event) {
          if (isUndo(event)) {
              preventDefault(event);
              at--;
              const record = history[at];
              if (record) {
                  editor.innerHTML = record.html;
                  restore(record.pos);
              }
              if (at < 0)
                  at = 0;
          }
          if (isRedo(event)) {
              preventDefault(event);
              at++;
              const record = history[at];
              if (record) {
                  editor.innerHTML = record.html;
                  restore(record.pos);
              }
              if (at >= history.length)
                  at--;
          }
      }
      function recordHistory() {
          if (!focus)
              return;
          const html = editor.innerHTML;
          const pos = save();
          const lastRecord = history[at];
          if (lastRecord) {
              if (lastRecord.html === html
                  && lastRecord.pos.start === pos.start
                  && lastRecord.pos.end === pos.end)
                  return;
          }
          at++;
          history[at] = { html, pos };
          history.splice(at + 1);
          const maxHistory = 300;
          if (at > maxHistory) {
              at = maxHistory;
              history.splice(0, 1);
          }
      }
      function handlePaste(event) {
          if (event.defaultPrevented)
              return;
          preventDefault(event);
          const originalEvent = event.originalEvent ?? event;
          const text = originalEvent.clipboardData.getData('text/plain').replace(/\r\n?/g, '\n');
          const pos = save();
          insert(text);
          doHighlight(editor);
          restore({
              start: Math.min(pos.start, pos.end) + text.length,
              end: Math.min(pos.start, pos.end) + text.length,
              dir: '<-',
          });
      }
      function handleCut(event) {
          const pos = save();
          const selection = getSelection();
          const originalEvent = event.originalEvent ?? event;
          originalEvent.clipboardData.setData('text/plain', selection.toString());
          document.execCommand('delete');
          doHighlight(editor);
          restore({
              start: Math.min(pos.start, pos.end),
              end: Math.min(pos.start, pos.end),
              dir: '<-',
          });
          preventDefault(event);
      }
      function visit(editor, visitor) {
          const queue = [];
          if (editor.firstChild)
              queue.push(editor.firstChild);
          let el = queue.pop();
          while (el) {
              if (visitor(el) === 'stop')
                  break;
              if (el.nextSibling)
                  queue.push(el.nextSibling);
              if (el.firstChild)
                  queue.push(el.firstChild);
              el = queue.pop();
          }
      }
      function isCtrl(event) {
          return event.metaKey || event.ctrlKey;
      }
      function isUndo(event) {
          return isCtrl(event) && !event.shiftKey && getKeyCode(event) === 'Z';
      }
      function isRedo(event) {
          return isCtrl(event) && event.shiftKey && getKeyCode(event) === 'Z';
      }
      function isCopy(event) {
          return isCtrl(event) && getKeyCode(event) === 'C';
      }
      function getKeyCode(event) {
          let key = event.key || event.keyCode || event.which;
          if (!key)
              return undefined;
          return (typeof key === 'string' ? key : String.fromCharCode(key)).toUpperCase();
      }
      function insert(text) {
          text = text
              .replace(/&/g, '&amp;')
              .replace(/</g, '&lt;')
              .replace(/>/g, '&gt;')
              .replace(/"/g, '&quot;')
              .replace(/'/g, '&#039;');
          document.execCommand('insertHTML', false, text);
      }
      function debounce(cb, wait) {
          let timeout = 0;
          return (...args) => {
              clearTimeout(timeout);
              timeout = window.setTimeout(() => cb(...args), wait);
          };
      }
      function findPadding(text) {
          // Find beginning of previous line.
          let i = text.length - 1;
          while (i >= 0 && text[i] !== '\n')
              i--;
          i++;
          // Find padding of the line.
          let j = i;
          while (j < text.length && /[ \t]/.test(text[j]))
              j++;
          return [text.substring(i, j) || '', i, j];
      }
      function toString() {
          return editor.textContent || '';
      }
      function preventDefault(event) {
          event.preventDefault();
      }
      function getSelection() {
          if (editor.parentNode?.nodeType == Node.DOCUMENT_FRAGMENT_NODE) {
              return editor.parentNode.getSelection();
          }
          return window.getSelection();
      }
      return {
          updateOptions(newOptions) {
              Object.assign(options, newOptions);
          },
          updateCode(code) {
              editor.textContent = code;
              doHighlight(editor);
              onUpdate(code);
          },
          onUpdate(callback) {
              onUpdate = callback;
          },
          toString,
          save,
          restore,
          recordHistory,
          destroy() {
              for (let [type, fn] of listeners) {
                  editor.removeEventListener(type, fn);
              }
          },
      };
  }

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function getDefaultExportFromCjs (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  /* eslint-disable no-multi-assign */

  function deepFreeze(obj) {
    if (obj instanceof Map) {
      obj.clear =
        obj.delete =
        obj.set =
          function () {
            throw new Error('map is read-only');
          };
    } else if (obj instanceof Set) {
      obj.add =
        obj.clear =
        obj.delete =
          function () {
            throw new Error('set is read-only');
          };
    }

    // Freeze self
    Object.freeze(obj);

    Object.getOwnPropertyNames(obj).forEach((name) => {
      const prop = obj[name];
      const type = typeof prop;

      // Freeze prop if it is an object or function and also not already frozen
      if ((type === 'object' || type === 'function') && !Object.isFrozen(prop)) {
        deepFreeze(prop);
      }
    });

    return obj;
  }

  /** @typedef {import('highlight.js').CallbackResponse} CallbackResponse */
  /** @typedef {import('highlight.js').CompiledMode} CompiledMode */
  /** @implements CallbackResponse */

  class Response {
    /**
     * @param {CompiledMode} mode
     */
    constructor(mode) {
      // eslint-disable-next-line no-undefined
      if (mode.data === undefined) mode.data = {};

      this.data = mode.data;
      this.isMatchIgnored = false;
    }

    ignoreMatch() {
      this.isMatchIgnored = true;
    }
  }

  /**
   * @param {string} value
   * @returns {string}
   */
  function escapeHTML$1(value) {
    return value
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#x27;');
  }

  /**
   * performs a shallow merge of multiple objects into one
   *
   * @template T
   * @param {T} original
   * @param {Record<string,any>[]} objects
   * @returns {T} a single new object
   */
  function inherit$1(original, ...objects) {
    /** @type Record<string,any> */
    const result = Object.create(null);

    for (const key in original) {
      result[key] = original[key];
    }
    objects.forEach(function(obj) {
      for (const key in obj) {
        result[key] = obj[key];
      }
    });
    return /** @type {T} */ (result);
  }

  /**
   * @typedef {object} Renderer
   * @property {(text: string) => void} addText
   * @property {(node: Node) => void} openNode
   * @property {(node: Node) => void} closeNode
   * @property {() => string} value
   */

  /** @typedef {{scope?: string, language?: string, sublanguage?: boolean}} Node */
  /** @typedef {{walk: (r: Renderer) => void}} Tree */
  /** */

  const SPAN_CLOSE = '</span>';

  /**
   * Determines if a node needs to be wrapped in <span>
   *
   * @param {Node} node */
  const emitsWrappingTags = (node) => {
    // rarely we can have a sublanguage where language is undefined
    // TODO: track down why
    return !!node.scope;
  };

  /**
   *
   * @param {string} name
   * @param {{prefix:string}} options
   */
  const scopeToCSSClass = (name, { prefix }) => {
    // sub-language
    if (name.startsWith("language:")) {
      return name.replace("language:", "language-");
    }
    // tiered scope: comment.line
    if (name.includes(".")) {
      const pieces = name.split(".");
      return [
        `${prefix}${pieces.shift()}`,
        ...(pieces.map((x, i) => `${x}${"_".repeat(i + 1)}`))
      ].join(" ");
    }
    // simple scope
    return `${prefix}${name}`;
  };

  /** @type {Renderer} */
  class HTMLRenderer {
    /**
     * Creates a new HTMLRenderer
     *
     * @param {Tree} parseTree - the parse tree (must support `walk` API)
     * @param {{classPrefix: string}} options
     */
    constructor(parseTree, options) {
      this.buffer = "";
      this.classPrefix = options.classPrefix;
      parseTree.walk(this);
    }

    /**
     * Adds texts to the output stream
     *
     * @param {string} text */
    addText(text) {
      this.buffer += escapeHTML$1(text);
    }

    /**
     * Adds a node open to the output stream (if needed)
     *
     * @param {Node} node */
    openNode(node) {
      if (!emitsWrappingTags(node)) return;

      const className = scopeToCSSClass(node.scope,
        { prefix: this.classPrefix });
      this.span(className);
    }

    /**
     * Adds a node close to the output stream (if needed)
     *
     * @param {Node} node */
    closeNode(node) {
      if (!emitsWrappingTags(node)) return;

      this.buffer += SPAN_CLOSE;
    }

    /**
     * returns the accumulated buffer
    */
    value() {
      return this.buffer;
    }

    // helpers

    /**
     * Builds a span element
     *
     * @param {string} className */
    span(className) {
      this.buffer += `<span class="${className}">`;
    }
  }

  /** @typedef {{scope?: string, language?: string, sublanguage?: boolean, children: Node[]} | string} Node */
  /** @typedef {{scope?: string, language?: string, sublanguage?: boolean, children: Node[]} } DataNode */
  /** @typedef {import('highlight.js').Emitter} Emitter */
  /**  */

  /** @returns {DataNode} */
  const newNode = (opts = {}) => {
    /** @type DataNode */
    const result = { children: [] };
    Object.assign(result, opts);
    return result;
  };

  class TokenTree {
    constructor() {
      /** @type DataNode */
      this.rootNode = newNode();
      this.stack = [this.rootNode];
    }

    get top() {
      return this.stack[this.stack.length - 1];
    }

    get root() { return this.rootNode; }

    /** @param {Node} node */
    add(node) {
      this.top.children.push(node);
    }

    /** @param {string} scope */
    openNode(scope) {
      /** @type Node */
      const node = newNode({ scope });
      this.add(node);
      this.stack.push(node);
    }

    closeNode() {
      if (this.stack.length > 1) {
        return this.stack.pop();
      }
      // eslint-disable-next-line no-undefined
      return undefined;
    }

    closeAllNodes() {
      while (this.closeNode());
    }

    toJSON() {
      return JSON.stringify(this.rootNode, null, 4);
    }

    /**
     * @typedef { import("./html_renderer").Renderer } Renderer
     * @param {Renderer} builder
     */
    walk(builder) {
      // this does not
      return this.constructor._walk(builder, this.rootNode);
      // this works
      // return TokenTree._walk(builder, this.rootNode);
    }

    /**
     * @param {Renderer} builder
     * @param {Node} node
     */
    static _walk(builder, node) {
      if (typeof node === "string") {
        builder.addText(node);
      } else if (node.children) {
        builder.openNode(node);
        node.children.forEach((child) => this._walk(builder, child));
        builder.closeNode(node);
      }
      return builder;
    }

    /**
     * @param {Node} node
     */
    static _collapse(node) {
      if (typeof node === "string") return;
      if (!node.children) return;

      if (node.children.every(el => typeof el === "string")) {
        // node.text = node.children.join("");
        // delete node.children;
        node.children = [node.children.join("")];
      } else {
        node.children.forEach((child) => {
          TokenTree._collapse(child);
        });
      }
    }
  }

  /**
    Currently this is all private API, but this is the minimal API necessary
    that an Emitter must implement to fully support the parser.

    Minimal interface:

    - addText(text)
    - __addSublanguage(emitter, subLanguageName)
    - startScope(scope)
    - endScope()
    - finalize()
    - toHTML()

  */

  /**
   * @implements {Emitter}
   */
  class TokenTreeEmitter extends TokenTree {
    /**
     * @param {*} options
     */
    constructor(options) {
      super();
      this.options = options;
    }

    /**
     * @param {string} text
     */
    addText(text) {
      if (text === "") { return; }

      this.add(text);
    }

    /** @param {string} scope */
    startScope(scope) {
      this.openNode(scope);
    }

    endScope() {
      this.closeNode();
    }

    /**
     * @param {Emitter & {root: DataNode}} emitter
     * @param {string} name
     */
    __addSublanguage(emitter, name) {
      /** @type DataNode */
      const node = emitter.root;
      if (name) node.scope = `language:${name}`;

      this.add(node);
    }

    toHTML() {
      const renderer = new HTMLRenderer(this, this.options);
      return renderer.value();
    }

    finalize() {
      this.closeAllNodes();
      return true;
    }
  }

  /**
   * @param {string} value
   * @returns {RegExp}
   * */

  /**
   * @param {RegExp | string } re
   * @returns {string}
   */
  function source(re) {
    if (!re) return null;
    if (typeof re === "string") return re;

    return re.source;
  }

  /**
   * @param {RegExp | string } re
   * @returns {string}
   */
  function lookahead(re) {
    return concat('(?=', re, ')');
  }

  /**
   * @param {RegExp | string } re
   * @returns {string}
   */
  function anyNumberOfTimes(re) {
    return concat('(?:', re, ')*');
  }

  /**
   * @param {RegExp | string } re
   * @returns {string}
   */
  function optional(re) {
    return concat('(?:', re, ')?');
  }

  /**
   * @param {...(RegExp | string) } args
   * @returns {string}
   */
  function concat(...args) {
    const joined = args.map((x) => source(x)).join("");
    return joined;
  }

  /**
   * @param { Array<string | RegExp | Object> } args
   * @returns {object}
   */
  function stripOptionsFromArgs(args) {
    const opts = args[args.length - 1];

    if (typeof opts === 'object' && opts.constructor === Object) {
      args.splice(args.length - 1, 1);
      return opts;
    } else {
      return {};
    }
  }

  /** @typedef { {capture?: boolean} } RegexEitherOptions */

  /**
   * Any of the passed expresssions may match
   *
   * Creates a huge this | this | that | that match
   * @param {(RegExp | string)[] | [...(RegExp | string)[], RegexEitherOptions]} args
   * @returns {string}
   */
  function either(...args) {
    /** @type { object & {capture?: boolean} }  */
    const opts = stripOptionsFromArgs(args);
    const joined = '('
      + (opts.capture ? "" : "?:")
      + args.map((x) => source(x)).join("|") + ")";
    return joined;
  }

  /**
   * @param {RegExp | string} re
   * @returns {number}
   */
  function countMatchGroups(re) {
    return (new RegExp(re.toString() + '|')).exec('').length - 1;
  }

  /**
   * Does lexeme start with a regular expression match at the beginning
   * @param {RegExp} re
   * @param {string} lexeme
   */
  function startsWith(re, lexeme) {
    const match = re && re.exec(lexeme);
    return match && match.index === 0;
  }

  // BACKREF_RE matches an open parenthesis or backreference. To avoid
  // an incorrect parse, it additionally matches the following:
  // - [...] elements, where the meaning of parentheses and escapes change
  // - other escape sequences, so we do not misparse escape sequences as
  //   interesting elements
  // - non-matching or lookahead parentheses, which do not capture. These
  //   follow the '(' with a '?'.
  const BACKREF_RE = /\[(?:[^\\\]]|\\.)*\]|\(\??|\\([1-9][0-9]*)|\\./;

  // **INTERNAL** Not intended for outside usage
  // join logically computes regexps.join(separator), but fixes the
  // backreferences so they continue to match.
  // it also places each individual regular expression into it's own
  // match group, keeping track of the sequencing of those match groups
  // is currently an exercise for the caller. :-)
  /**
   * @param {(string | RegExp)[]} regexps
   * @param {{joinWith: string}} opts
   * @returns {string}
   */
  function _rewriteBackreferences(regexps, { joinWith }) {
    let numCaptures = 0;

    return regexps.map((regex) => {
      numCaptures += 1;
      const offset = numCaptures;
      let re = source(regex);
      let out = '';

      while (re.length > 0) {
        const match = BACKREF_RE.exec(re);
        if (!match) {
          out += re;
          break;
        }
        out += re.substring(0, match.index);
        re = re.substring(match.index + match[0].length);
        if (match[0][0] === '\\' && match[1]) {
          // Adjust the backreference.
          out += '\\' + String(Number(match[1]) + offset);
        } else {
          out += match[0];
          if (match[0] === '(') {
            numCaptures++;
          }
        }
      }
      return out;
    }).map(re => `(${re})`).join(joinWith);
  }

  /** @typedef {import('highlight.js').Mode} Mode */
  /** @typedef {import('highlight.js').ModeCallback} ModeCallback */

  // Common regexps
  const MATCH_NOTHING_RE = /\b\B/;
  const IDENT_RE = '[a-zA-Z]\\w*';
  const UNDERSCORE_IDENT_RE = '[a-zA-Z_]\\w*';
  const NUMBER_RE = '\\b\\d+(\\.\\d+)?';
  const C_NUMBER_RE = '(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)'; // 0x..., 0..., decimal, float
  const BINARY_NUMBER_RE = '\\b(0b[01]+)'; // 0b...
  const RE_STARTERS_RE = '!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~';

  /**
  * @param { Partial<Mode> & {binary?: string | RegExp} } opts
  */
  const SHEBANG = (opts = {}) => {
    const beginShebang = /^#![ ]*\//;
    if (opts.binary) {
      opts.begin = concat(
        beginShebang,
        /.*\b/,
        opts.binary,
        /\b.*/);
    }
    return inherit$1({
      scope: 'meta',
      begin: beginShebang,
      end: /$/,
      relevance: 0,
      /** @type {ModeCallback} */
      "on:begin": (m, resp) => {
        if (m.index !== 0) resp.ignoreMatch();
      }
    }, opts);
  };

  // Common modes
  const BACKSLASH_ESCAPE = {
    begin: '\\\\[\\s\\S]', relevance: 0
  };
  const APOS_STRING_MODE = {
    scope: 'string',
    begin: '\'',
    end: '\'',
    illegal: '\\n',
    contains: [BACKSLASH_ESCAPE]
  };
  const QUOTE_STRING_MODE = {
    scope: 'string',
    begin: '"',
    end: '"',
    illegal: '\\n',
    contains: [BACKSLASH_ESCAPE]
  };
  const PHRASAL_WORDS_MODE = {
    begin: /\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\b/
  };
  /**
   * Creates a comment mode
   *
   * @param {string | RegExp} begin
   * @param {string | RegExp} end
   * @param {Mode | {}} [modeOptions]
   * @returns {Partial<Mode>}
   */
  const COMMENT = function(begin, end, modeOptions = {}) {
    const mode = inherit$1(
      {
        scope: 'comment',
        begin,
        end,
        contains: []
      },
      modeOptions
    );
    mode.contains.push({
      scope: 'doctag',
      // hack to avoid the space from being included. the space is necessary to
      // match here to prevent the plain text rule below from gobbling up doctags
      begin: '[ ]*(?=(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):)',
      end: /(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):/,
      excludeBegin: true,
      relevance: 0
    });
    const ENGLISH_WORD = either(
      // list of common 1 and 2 letter words in English
      "I",
      "a",
      "is",
      "so",
      "us",
      "to",
      "at",
      "if",
      "in",
      "it",
      "on",
      // note: this is not an exhaustive list of contractions, just popular ones
      /[A-Za-z]+['](d|ve|re|ll|t|s|n)/, // contractions - can't we'd they're let's, etc
      /[A-Za-z]+[-][a-z]+/, // `no-way`, etc.
      /[A-Za-z][a-z]{2,}/ // allow capitalized words at beginning of sentences
    );
    // looking like plain text, more likely to be a comment
    mode.contains.push(
      {
        // TODO: how to include ", (, ) without breaking grammars that use these for
        // comment delimiters?
        // begin: /[ ]+([()"]?([A-Za-z'-]{3,}|is|a|I|so|us|[tT][oO]|at|if|in|it|on)[.]?[()":]?([.][ ]|[ ]|\))){3}/
        // ---

        // this tries to find sequences of 3 english words in a row (without any
        // "programming" type syntax) this gives us a strong signal that we've
        // TRULY found a comment - vs perhaps scanning with the wrong language.
        // It's possible to find something that LOOKS like the start of the
        // comment - but then if there is no readable text - good chance it is a
        // false match and not a comment.
        //
        // for a visual example please see:
        // https://github.com/highlightjs/highlight.js/issues/2827

        begin: concat(
          /[ ]+/, // necessary to prevent us gobbling up doctags like /* @author Bob Mcgill */
          '(',
          ENGLISH_WORD,
          /[.]?[:]?([.][ ]|[ ])/,
          '){3}') // look for 3 words in a row
      }
    );
    return mode;
  };
  const C_LINE_COMMENT_MODE = COMMENT('//', '$');
  const C_BLOCK_COMMENT_MODE = COMMENT('/\\*', '\\*/');
  const HASH_COMMENT_MODE = COMMENT('#', '$');
  const NUMBER_MODE = {
    scope: 'number',
    begin: NUMBER_RE,
    relevance: 0
  };
  const C_NUMBER_MODE = {
    scope: 'number',
    begin: C_NUMBER_RE,
    relevance: 0
  };
  const BINARY_NUMBER_MODE = {
    scope: 'number',
    begin: BINARY_NUMBER_RE,
    relevance: 0
  };
  const REGEXP_MODE = {
    // this outer rule makes sure we actually have a WHOLE regex and not simply
    // an expression such as:
    //
    //     3 / something
    //
    // (which will then blow up when regex's `illegal` sees the newline)
    begin: /(?=\/[^/\n]*\/)/,
    contains: [{
      scope: 'regexp',
      begin: /\//,
      end: /\/[gimuy]*/,
      illegal: /\n/,
      contains: [
        BACKSLASH_ESCAPE,
        {
          begin: /\[/,
          end: /\]/,
          relevance: 0,
          contains: [BACKSLASH_ESCAPE]
        }
      ]
    }]
  };
  const TITLE_MODE = {
    scope: 'title',
    begin: IDENT_RE,
    relevance: 0
  };
  const UNDERSCORE_TITLE_MODE = {
    scope: 'title',
    begin: UNDERSCORE_IDENT_RE,
    relevance: 0
  };
  const METHOD_GUARD = {
    // excludes method names from keyword processing
    begin: '\\.\\s*' + UNDERSCORE_IDENT_RE,
    relevance: 0
  };

  /**
   * Adds end same as begin mechanics to a mode
   *
   * Your mode must include at least a single () match group as that first match
   * group is what is used for comparison
   * @param {Partial<Mode>} mode
   */
  const END_SAME_AS_BEGIN = function(mode) {
    return Object.assign(mode,
      {
        /** @type {ModeCallback} */
        'on:begin': (m, resp) => { resp.data._beginMatch = m[1]; },
        /** @type {ModeCallback} */
        'on:end': (m, resp) => { if (resp.data._beginMatch !== m[1]) resp.ignoreMatch(); }
      });
  };

  var MODES = /*#__PURE__*/Object.freeze({
    __proto__: null,
    MATCH_NOTHING_RE: MATCH_NOTHING_RE,
    IDENT_RE: IDENT_RE,
    UNDERSCORE_IDENT_RE: UNDERSCORE_IDENT_RE,
    NUMBER_RE: NUMBER_RE,
    C_NUMBER_RE: C_NUMBER_RE,
    BINARY_NUMBER_RE: BINARY_NUMBER_RE,
    RE_STARTERS_RE: RE_STARTERS_RE,
    SHEBANG: SHEBANG,
    BACKSLASH_ESCAPE: BACKSLASH_ESCAPE,
    APOS_STRING_MODE: APOS_STRING_MODE,
    QUOTE_STRING_MODE: QUOTE_STRING_MODE,
    PHRASAL_WORDS_MODE: PHRASAL_WORDS_MODE,
    COMMENT: COMMENT,
    C_LINE_COMMENT_MODE: C_LINE_COMMENT_MODE,
    C_BLOCK_COMMENT_MODE: C_BLOCK_COMMENT_MODE,
    HASH_COMMENT_MODE: HASH_COMMENT_MODE,
    NUMBER_MODE: NUMBER_MODE,
    C_NUMBER_MODE: C_NUMBER_MODE,
    BINARY_NUMBER_MODE: BINARY_NUMBER_MODE,
    REGEXP_MODE: REGEXP_MODE,
    TITLE_MODE: TITLE_MODE,
    UNDERSCORE_TITLE_MODE: UNDERSCORE_TITLE_MODE,
    METHOD_GUARD: METHOD_GUARD,
    END_SAME_AS_BEGIN: END_SAME_AS_BEGIN
  });

  /**
  @typedef {import('highlight.js').CallbackResponse} CallbackResponse
  @typedef {import('highlight.js').CompilerExt} CompilerExt
  */

  // Grammar extensions / plugins
  // See: https://github.com/highlightjs/highlight.js/issues/2833

  // Grammar extensions allow "syntactic sugar" to be added to the grammar modes
  // without requiring any underlying changes to the compiler internals.

  // `compileMatch` being the perfect small example of now allowing a grammar
  // author to write `match` when they desire to match a single expression rather
  // than being forced to use `begin`.  The extension then just moves `match` into
  // `begin` when it runs.  Ie, no features have been added, but we've just made
  // the experience of writing (and reading grammars) a little bit nicer.

  // ------

  // TODO: We need negative look-behind support to do this properly
  /**
   * Skip a match if it has a preceding dot
   *
   * This is used for `beginKeywords` to prevent matching expressions such as
   * `bob.keyword.do()`. The mode compiler automatically wires this up as a
   * special _internal_ 'on:begin' callback for modes with `beginKeywords`
   * @param {RegExpMatchArray} match
   * @param {CallbackResponse} response
   */
  function skipIfHasPrecedingDot(match, response) {
    const before = match.input[match.index - 1];
    if (before === ".") {
      response.ignoreMatch();
    }
  }

  /**
   *
   * @type {CompilerExt}
   */
  function scopeClassName(mode, _parent) {
    // eslint-disable-next-line no-undefined
    if (mode.className !== undefined) {
      mode.scope = mode.className;
      delete mode.className;
    }
  }

  /**
   * `beginKeywords` syntactic sugar
   * @type {CompilerExt}
   */
  function beginKeywords(mode, parent) {
    if (!parent) return;
    if (!mode.beginKeywords) return;

    // for languages with keywords that include non-word characters checking for
    // a word boundary is not sufficient, so instead we check for a word boundary
    // or whitespace - this does no harm in any case since our keyword engine
    // doesn't allow spaces in keywords anyways and we still check for the boundary
    // first
    mode.begin = '\\b(' + mode.beginKeywords.split(' ').join('|') + ')(?!\\.)(?=\\b|\\s)';
    mode.__beforeBegin = skipIfHasPrecedingDot;
    mode.keywords = mode.keywords || mode.beginKeywords;
    delete mode.beginKeywords;

    // prevents double relevance, the keywords themselves provide
    // relevance, the mode doesn't need to double it
    // eslint-disable-next-line no-undefined
    if (mode.relevance === undefined) mode.relevance = 0;
  }

  /**
   * Allow `illegal` to contain an array of illegal values
   * @type {CompilerExt}
   */
  function compileIllegal(mode, _parent) {
    if (!Array.isArray(mode.illegal)) return;

    mode.illegal = either(...mode.illegal);
  }

  /**
   * `match` to match a single expression for readability
   * @type {CompilerExt}
   */
  function compileMatch(mode, _parent) {
    if (!mode.match) return;
    if (mode.begin || mode.end) throw new Error("begin & end are not supported with match");

    mode.begin = mode.match;
    delete mode.match;
  }

  /**
   * provides the default 1 relevance to all modes
   * @type {CompilerExt}
   */
  function compileRelevance(mode, _parent) {
    // eslint-disable-next-line no-undefined
    if (mode.relevance === undefined) mode.relevance = 1;
  }

  // allow beforeMatch to act as a "qualifier" for the match
  // the full match begin must be [beforeMatch][begin]
  const beforeMatchExt = (mode, parent) => {
    if (!mode.beforeMatch) return;
    // starts conflicts with endsParent which we need to make sure the child
    // rule is not matched multiple times
    if (mode.starts) throw new Error("beforeMatch cannot be used with starts");

    const originalMode = Object.assign({}, mode);
    Object.keys(mode).forEach((key) => { delete mode[key]; });

    mode.keywords = originalMode.keywords;
    mode.begin = concat(originalMode.beforeMatch, lookahead(originalMode.begin));
    mode.starts = {
      relevance: 0,
      contains: [
        Object.assign(originalMode, { endsParent: true })
      ]
    };
    mode.relevance = 0;

    delete originalMode.beforeMatch;
  };

  // keywords that should have no default relevance value
  const COMMON_KEYWORDS = [
    'of',
    'and',
    'for',
    'in',
    'not',
    'or',
    'if',
    'then',
    'parent', // common variable name
    'list', // common variable name
    'value' // common variable name
  ];

  const DEFAULT_KEYWORD_SCOPE = "keyword";

  /**
   * Given raw keywords from a language definition, compile them.
   *
   * @param {string | Record<string,string|string[]> | Array<string>} rawKeywords
   * @param {boolean} caseInsensitive
   */
  function compileKeywords(rawKeywords, caseInsensitive, scopeName = DEFAULT_KEYWORD_SCOPE) {
    /** @type {import("highlight.js/private").KeywordDict} */
    const compiledKeywords = Object.create(null);

    // input can be a string of keywords, an array of keywords, or a object with
    // named keys representing scopeName (which can then point to a string or array)
    if (typeof rawKeywords === 'string') {
      compileList(scopeName, rawKeywords.split(" "));
    } else if (Array.isArray(rawKeywords)) {
      compileList(scopeName, rawKeywords);
    } else {
      Object.keys(rawKeywords).forEach(function(scopeName) {
        // collapse all our objects back into the parent object
        Object.assign(
          compiledKeywords,
          compileKeywords(rawKeywords[scopeName], caseInsensitive, scopeName)
        );
      });
    }
    return compiledKeywords;

    // ---

    /**
     * Compiles an individual list of keywords
     *
     * Ex: "for if when while|5"
     *
     * @param {string} scopeName
     * @param {Array<string>} keywordList
     */
    function compileList(scopeName, keywordList) {
      if (caseInsensitive) {
        keywordList = keywordList.map(x => x.toLowerCase());
      }
      keywordList.forEach(function(keyword) {
        const pair = keyword.split('|');
        compiledKeywords[pair[0]] = [scopeName, scoreForKeyword(pair[0], pair[1])];
      });
    }
  }

  /**
   * Returns the proper score for a given keyword
   *
   * Also takes into account comment keywords, which will be scored 0 UNLESS
   * another score has been manually assigned.
   * @param {string} keyword
   * @param {string} [providedScore]
   */
  function scoreForKeyword(keyword, providedScore) {
    // manual scores always win over common keywords
    // so you can force a score of 1 if you really insist
    if (providedScore) {
      return Number(providedScore);
    }

    return commonKeyword(keyword) ? 0 : 1;
  }

  /**
   * Determines if a given keyword is common or not
   *
   * @param {string} keyword */
  function commonKeyword(keyword) {
    return COMMON_KEYWORDS.includes(keyword.toLowerCase());
  }

  /*

  For the reasoning behind this please see:
  https://github.com/highlightjs/highlight.js/issues/2880#issuecomment-747275419

  */

  /**
   * @type {Record<string, boolean>}
   */
  const seenDeprecations = {};

  /**
   * @param {string} message
   */
  const error$1 = (message) => {
    console.error(message);
  };

  /**
   * @param {string} message
   * @param {any} args
   */
  const warn = (message, ...args) => {
    console.log(`WARN: ${message}`, ...args);
  };

  /**
   * @param {string} version
   * @param {string} message
   */
  const deprecated = (version, message) => {
    if (seenDeprecations[`${version}/${message}`]) return;

    console.log(`Deprecated as of ${version}. ${message}`);
    seenDeprecations[`${version}/${message}`] = true;
  };

  /* eslint-disable no-throw-literal */

  /**
  @typedef {import('highlight.js').CompiledMode} CompiledMode
  */

  const MultiClassError = new Error();

  /**
   * Renumbers labeled scope names to account for additional inner match
   * groups that otherwise would break everything.
   *
   * Lets say we 3 match scopes:
   *
   *   { 1 => ..., 2 => ..., 3 => ... }
   *
   * So what we need is a clean match like this:
   *
   *   (a)(b)(c) => [ "a", "b", "c" ]
   *
   * But this falls apart with inner match groups:
   *
   * (a)(((b)))(c) => ["a", "b", "b", "b", "c" ]
   *
   * Our scopes are now "out of alignment" and we're repeating `b` 3 times.
   * What needs to happen is the numbers are remapped:
   *
   *   { 1 => ..., 2 => ..., 5 => ... }
   *
   * We also need to know that the ONLY groups that should be output
   * are 1, 2, and 5.  This function handles this behavior.
   *
   * @param {CompiledMode} mode
   * @param {Array<RegExp | string>} regexes
   * @param {{key: "beginScope"|"endScope"}} opts
   */
  function remapScopeNames(mode, regexes, { key }) {
    let offset = 0;
    const scopeNames = mode[key];
    /** @type Record<number,boolean> */
    const emit = {};
    /** @type Record<number,string> */
    const positions = {};

    for (let i = 1; i <= regexes.length; i++) {
      positions[i + offset] = scopeNames[i];
      emit[i + offset] = true;
      offset += countMatchGroups(regexes[i - 1]);
    }
    // we use _emit to keep track of which match groups are "top-level" to avoid double
    // output from inside match groups
    mode[key] = positions;
    mode[key]._emit = emit;
    mode[key]._multi = true;
  }

  /**
   * @param {CompiledMode} mode
   */
  function beginMultiClass(mode) {
    if (!Array.isArray(mode.begin)) return;

    if (mode.skip || mode.excludeBegin || mode.returnBegin) {
      error$1("skip, excludeBegin, returnBegin not compatible with beginScope: {}");
      throw MultiClassError;
    }

    if (typeof mode.beginScope !== "object" || mode.beginScope === null) {
      error$1("beginScope must be object");
      throw MultiClassError;
    }

    remapScopeNames(mode, mode.begin, { key: "beginScope" });
    mode.begin = _rewriteBackreferences(mode.begin, { joinWith: "" });
  }

  /**
   * @param {CompiledMode} mode
   */
  function endMultiClass(mode) {
    if (!Array.isArray(mode.end)) return;

    if (mode.skip || mode.excludeEnd || mode.returnEnd) {
      error$1("skip, excludeEnd, returnEnd not compatible with endScope: {}");
      throw MultiClassError;
    }

    if (typeof mode.endScope !== "object" || mode.endScope === null) {
      error$1("endScope must be object");
      throw MultiClassError;
    }

    remapScopeNames(mode, mode.end, { key: "endScope" });
    mode.end = _rewriteBackreferences(mode.end, { joinWith: "" });
  }

  /**
   * this exists only to allow `scope: {}` to be used beside `match:`
   * Otherwise `beginScope` would necessary and that would look weird

    {
      match: [ /def/, /\w+/ ]
      scope: { 1: "keyword" , 2: "title" }
    }

   * @param {CompiledMode} mode
   */
  function scopeSugar(mode) {
    if (mode.scope && typeof mode.scope === "object" && mode.scope !== null) {
      mode.beginScope = mode.scope;
      delete mode.scope;
    }
  }

  /**
   * @param {CompiledMode} mode
   */
  function MultiClass(mode) {
    scopeSugar(mode);

    if (typeof mode.beginScope === "string") {
      mode.beginScope = { _wrap: mode.beginScope };
    }
    if (typeof mode.endScope === "string") {
      mode.endScope = { _wrap: mode.endScope };
    }

    beginMultiClass(mode);
    endMultiClass(mode);
  }

  /**
  @typedef {import('highlight.js').Mode} Mode
  @typedef {import('highlight.js').CompiledMode} CompiledMode
  @typedef {import('highlight.js').Language} Language
  @typedef {import('highlight.js').HLJSPlugin} HLJSPlugin
  @typedef {import('highlight.js').CompiledLanguage} CompiledLanguage
  */

  // compilation

  /**
   * Compiles a language definition result
   *
   * Given the raw result of a language definition (Language), compiles this so
   * that it is ready for highlighting code.
   * @param {Language} language
   * @returns {CompiledLanguage}
   */
  function compileLanguage(language) {
    /**
     * Builds a regex with the case sensitivity of the current language
     *
     * @param {RegExp | string} value
     * @param {boolean} [global]
     */
    function langRe(value, global) {
      return new RegExp(
        source(value),
        'm'
        + (language.case_insensitive ? 'i' : '')
        + (language.unicodeRegex ? 'u' : '')
        + (global ? 'g' : '')
      );
    }

    /**
      Stores multiple regular expressions and allows you to quickly search for
      them all in a string simultaneously - returning the first match.  It does
      this by creating a huge (a|b|c) regex - each individual item wrapped with ()
      and joined by `|` - using match groups to track position.  When a match is
      found checking which position in the array has content allows us to figure
      out which of the original regexes / match groups triggered the match.

      The match object itself (the result of `Regex.exec`) is returned but also
      enhanced by merging in any meta-data that was registered with the regex.
      This is how we keep track of which mode matched, and what type of rule
      (`illegal`, `begin`, end, etc).
    */
    class MultiRegex {
      constructor() {
        this.matchIndexes = {};
        // @ts-ignore
        this.regexes = [];
        this.matchAt = 1;
        this.position = 0;
      }

      // @ts-ignore
      addRule(re, opts) {
        opts.position = this.position++;
        // @ts-ignore
        this.matchIndexes[this.matchAt] = opts;
        this.regexes.push([opts, re]);
        this.matchAt += countMatchGroups(re) + 1;
      }

      compile() {
        if (this.regexes.length === 0) {
          // avoids the need to check length every time exec is called
          // @ts-ignore
          this.exec = () => null;
        }
        const terminators = this.regexes.map(el => el[1]);
        this.matcherRe = langRe(_rewriteBackreferences(terminators, { joinWith: '|' }), true);
        this.lastIndex = 0;
      }

      /** @param {string} s */
      exec(s) {
        this.matcherRe.lastIndex = this.lastIndex;
        const match = this.matcherRe.exec(s);
        if (!match) { return null; }

        // eslint-disable-next-line no-undefined
        const i = match.findIndex((el, i) => i > 0 && el !== undefined);
        // @ts-ignore
        const matchData = this.matchIndexes[i];
        // trim off any earlier non-relevant match groups (ie, the other regex
        // match groups that make up the multi-matcher)
        match.splice(0, i);

        return Object.assign(match, matchData);
      }
    }

    /*
      Created to solve the key deficiently with MultiRegex - there is no way to
      test for multiple matches at a single location.  Why would we need to do
      that?  In the future a more dynamic engine will allow certain matches to be
      ignored.  An example: if we matched say the 3rd regex in a large group but
      decided to ignore it - we'd need to started testing again at the 4th
      regex... but MultiRegex itself gives us no real way to do that.

      So what this class creates MultiRegexs on the fly for whatever search
      position they are needed.

      NOTE: These additional MultiRegex objects are created dynamically.  For most
      grammars most of the time we will never actually need anything more than the
      first MultiRegex - so this shouldn't have too much overhead.

      Say this is our search group, and we match regex3, but wish to ignore it.

        regex1 | regex2 | regex3 | regex4 | regex5    ' ie, startAt = 0

      What we need is a new MultiRegex that only includes the remaining
      possibilities:

        regex4 | regex5                               ' ie, startAt = 3

      This class wraps all that complexity up in a simple API... `startAt` decides
      where in the array of expressions to start doing the matching. It
      auto-increments, so if a match is found at position 2, then startAt will be
      set to 3.  If the end is reached startAt will return to 0.

      MOST of the time the parser will be setting startAt manually to 0.
    */
    class ResumableMultiRegex {
      constructor() {
        // @ts-ignore
        this.rules = [];
        // @ts-ignore
        this.multiRegexes = [];
        this.count = 0;

        this.lastIndex = 0;
        this.regexIndex = 0;
      }

      // @ts-ignore
      getMatcher(index) {
        if (this.multiRegexes[index]) return this.multiRegexes[index];

        const matcher = new MultiRegex();
        this.rules.slice(index).forEach(([re, opts]) => matcher.addRule(re, opts));
        matcher.compile();
        this.multiRegexes[index] = matcher;
        return matcher;
      }

      resumingScanAtSamePosition() {
        return this.regexIndex !== 0;
      }

      considerAll() {
        this.regexIndex = 0;
      }

      // @ts-ignore
      addRule(re, opts) {
        this.rules.push([re, opts]);
        if (opts.type === "begin") this.count++;
      }

      /** @param {string} s */
      exec(s) {
        const m = this.getMatcher(this.regexIndex);
        m.lastIndex = this.lastIndex;
        let result = m.exec(s);

        // The following is because we have no easy way to say "resume scanning at the
        // existing position but also skip the current rule ONLY". What happens is
        // all prior rules are also skipped which can result in matching the wrong
        // thing. Example of matching "booger":

        // our matcher is [string, "booger", number]
        //
        // ....booger....

        // if "booger" is ignored then we'd really need a regex to scan from the
        // SAME position for only: [string, number] but ignoring "booger" (if it
        // was the first match), a simple resume would scan ahead who knows how
        // far looking only for "number", ignoring potential string matches (or
        // future "booger" matches that might be valid.)

        // So what we do: We execute two matchers, one resuming at the same
        // position, but the second full matcher starting at the position after:

        //     /--- resume first regex match here (for [number])
        //     |/---- full match here for [string, "booger", number]
        //     vv
        // ....booger....

        // Which ever results in a match first is then used. So this 3-4 step
        // process essentially allows us to say "match at this position, excluding
        // a prior rule that was ignored".
        //
        // 1. Match "booger" first, ignore. Also proves that [string] does non match.
        // 2. Resume matching for [number]
        // 3. Match at index + 1 for [string, "booger", number]
        // 4. If #2 and #3 result in matches, which came first?
        if (this.resumingScanAtSamePosition()) {
          if (result && result.index === this.lastIndex) ; else { // use the second matcher result
            const m2 = this.getMatcher(0);
            m2.lastIndex = this.lastIndex + 1;
            result = m2.exec(s);
          }
        }

        if (result) {
          this.regexIndex += result.position + 1;
          if (this.regexIndex === this.count) {
            // wrap-around to considering all matches again
            this.considerAll();
          }
        }

        return result;
      }
    }

    /**
     * Given a mode, builds a huge ResumableMultiRegex that can be used to walk
     * the content and find matches.
     *
     * @param {CompiledMode} mode
     * @returns {ResumableMultiRegex}
     */
    function buildModeRegex(mode) {
      const mm = new ResumableMultiRegex();

      mode.contains.forEach(term => mm.addRule(term.begin, { rule: term, type: "begin" }));

      if (mode.terminatorEnd) {
        mm.addRule(mode.terminatorEnd, { type: "end" });
      }
      if (mode.illegal) {
        mm.addRule(mode.illegal, { type: "illegal" });
      }

      return mm;
    }

    /** skip vs abort vs ignore
     *
     * @skip   - The mode is still entered and exited normally (and contains rules apply),
     *           but all content is held and added to the parent buffer rather than being
     *           output when the mode ends.  Mostly used with `sublanguage` to build up
     *           a single large buffer than can be parsed by sublanguage.
     *
     *             - The mode begin ands ends normally.
     *             - Content matched is added to the parent mode buffer.
     *             - The parser cursor is moved forward normally.
     *
     * @abort  - A hack placeholder until we have ignore.  Aborts the mode (as if it
     *           never matched) but DOES NOT continue to match subsequent `contains`
     *           modes.  Abort is bad/suboptimal because it can result in modes
     *           farther down not getting applied because an earlier rule eats the
     *           content but then aborts.
     *
     *             - The mode does not begin.
     *             - Content matched by `begin` is added to the mode buffer.
     *             - The parser cursor is moved forward accordingly.
     *
     * @ignore - Ignores the mode (as if it never matched) and continues to match any
     *           subsequent `contains` modes.  Ignore isn't technically possible with
     *           the current parser implementation.
     *
     *             - The mode does not begin.
     *             - Content matched by `begin` is ignored.
     *             - The parser cursor is not moved forward.
     */

    /**
     * Compiles an individual mode
     *
     * This can raise an error if the mode contains certain detectable known logic
     * issues.
     * @param {Mode} mode
     * @param {CompiledMode | null} [parent]
     * @returns {CompiledMode | never}
     */
    function compileMode(mode, parent) {
      const cmode = /** @type CompiledMode */ (mode);
      if (mode.isCompiled) return cmode;

      [
        scopeClassName,
        // do this early so compiler extensions generally don't have to worry about
        // the distinction between match/begin
        compileMatch,
        MultiClass,
        beforeMatchExt
      ].forEach(ext => ext(mode, parent));

      language.compilerExtensions.forEach(ext => ext(mode, parent));

      // __beforeBegin is considered private API, internal use only
      mode.__beforeBegin = null;

      [
        beginKeywords,
        // do this later so compiler extensions that come earlier have access to the
        // raw array if they wanted to perhaps manipulate it, etc.
        compileIllegal,
        // default to 1 relevance if not specified
        compileRelevance
      ].forEach(ext => ext(mode, parent));

      mode.isCompiled = true;

      let keywordPattern = null;
      if (typeof mode.keywords === "object" && mode.keywords.$pattern) {
        // we need a copy because keywords might be compiled multiple times
        // so we can't go deleting $pattern from the original on the first
        // pass
        mode.keywords = Object.assign({}, mode.keywords);
        keywordPattern = mode.keywords.$pattern;
        delete mode.keywords.$pattern;
      }
      keywordPattern = keywordPattern || /\w+/;

      if (mode.keywords) {
        mode.keywords = compileKeywords(mode.keywords, language.case_insensitive);
      }

      cmode.keywordPatternRe = langRe(keywordPattern, true);

      if (parent) {
        if (!mode.begin) mode.begin = /\B|\b/;
        cmode.beginRe = langRe(cmode.begin);
        if (!mode.end && !mode.endsWithParent) mode.end = /\B|\b/;
        if (mode.end) cmode.endRe = langRe(cmode.end);
        cmode.terminatorEnd = source(cmode.end) || '';
        if (mode.endsWithParent && parent.terminatorEnd) {
          cmode.terminatorEnd += (mode.end ? '|' : '') + parent.terminatorEnd;
        }
      }
      if (mode.illegal) cmode.illegalRe = langRe(/** @type {RegExp | string} */ (mode.illegal));
      if (!mode.contains) mode.contains = [];

      mode.contains = [].concat(...mode.contains.map(function(c) {
        return expandOrCloneMode(c === 'self' ? mode : c);
      }));
      mode.contains.forEach(function(c) { compileMode(/** @type Mode */ (c), cmode); });

      if (mode.starts) {
        compileMode(mode.starts, parent);
      }

      cmode.matcher = buildModeRegex(cmode);
      return cmode;
    }

    if (!language.compilerExtensions) language.compilerExtensions = [];

    // self is not valid at the top-level
    if (language.contains && language.contains.includes('self')) {
      throw new Error("ERR: contains `self` is not supported at the top-level of a language.  See documentation.");
    }

    // we need a null object, which inherit will guarantee
    language.classNameAliases = inherit$1(language.classNameAliases || {});

    return compileMode(/** @type Mode */ (language));
  }

  /**
   * Determines if a mode has a dependency on it's parent or not
   *
   * If a mode does have a parent dependency then often we need to clone it if
   * it's used in multiple places so that each copy points to the correct parent,
   * where-as modes without a parent can often safely be re-used at the bottom of
   * a mode chain.
   *
   * @param {Mode | null} mode
   * @returns {boolean} - is there a dependency on the parent?
   * */
  function dependencyOnParent(mode) {
    if (!mode) return false;

    return mode.endsWithParent || dependencyOnParent(mode.starts);
  }

  /**
   * Expands a mode or clones it if necessary
   *
   * This is necessary for modes with parental dependenceis (see notes on
   * `dependencyOnParent`) and for nodes that have `variants` - which must then be
   * exploded into their own individual modes at compile time.
   *
   * @param {Mode} mode
   * @returns {Mode | Mode[]}
   * */
  function expandOrCloneMode(mode) {
    if (mode.variants && !mode.cachedVariants) {
      mode.cachedVariants = mode.variants.map(function(variant) {
        return inherit$1(mode, { variants: null }, variant);
      });
    }

    // EXPAND
    // if we have variants then essentially "replace" the mode with the variants
    // this happens in compileMode, where this function is called from
    if (mode.cachedVariants) {
      return mode.cachedVariants;
    }

    // CLONE
    // if we have dependencies on parents then we need a unique
    // instance of ourselves, so we can be reused with many
    // different parents without issue
    if (dependencyOnParent(mode)) {
      return inherit$1(mode, { starts: mode.starts ? inherit$1(mode.starts) : null });
    }

    if (Object.isFrozen(mode)) {
      return inherit$1(mode);
    }

    // no special dependency issues, just return ourselves
    return mode;
  }

  var version = "11.8.0";

  class HTMLInjectionError extends Error {
    constructor(reason, html) {
      super(reason);
      this.name = "HTMLInjectionError";
      this.html = html;
    }
  }

  /*
  Syntax highlighting with language autodetection.
  https://highlightjs.org/
  */


  /**
  @typedef {import('highlight.js').Mode} Mode
  @typedef {import('highlight.js').CompiledMode} CompiledMode
  @typedef {import('highlight.js').CompiledScope} CompiledScope
  @typedef {import('highlight.js').Language} Language
  @typedef {import('highlight.js').HLJSApi} HLJSApi
  @typedef {import('highlight.js').HLJSPlugin} HLJSPlugin
  @typedef {import('highlight.js').PluginEvent} PluginEvent
  @typedef {import('highlight.js').HLJSOptions} HLJSOptions
  @typedef {import('highlight.js').LanguageFn} LanguageFn
  @typedef {import('highlight.js').HighlightedHTMLElement} HighlightedHTMLElement
  @typedef {import('highlight.js').BeforeHighlightContext} BeforeHighlightContext
  @typedef {import('highlight.js/private').MatchType} MatchType
  @typedef {import('highlight.js/private').KeywordData} KeywordData
  @typedef {import('highlight.js/private').EnhancedMatch} EnhancedMatch
  @typedef {import('highlight.js/private').AnnotatedError} AnnotatedError
  @typedef {import('highlight.js').AutoHighlightResult} AutoHighlightResult
  @typedef {import('highlight.js').HighlightOptions} HighlightOptions
  @typedef {import('highlight.js').HighlightResult} HighlightResult
  */


  const escape = escapeHTML$1;
  const inherit = inherit$1;
  const NO_MATCH = Symbol("nomatch");
  const MAX_KEYWORD_HITS = 7;

  /**
   * @param {any} hljs - object that is extended (legacy)
   * @returns {HLJSApi}
   */
  const HLJS = function(hljs) {
    // Global internal variables used within the highlight.js library.
    /** @type {Record<string, Language>} */
    const languages = Object.create(null);
    /** @type {Record<string, string>} */
    const aliases = Object.create(null);
    /** @type {HLJSPlugin[]} */
    const plugins = [];

    // safe/production mode - swallows more errors, tries to keep running
    // even if a single syntax or parse hits a fatal error
    let SAFE_MODE = true;
    const LANGUAGE_NOT_FOUND = "Could not find the language '{}', did you forget to load/include a language module?";
    /** @type {Language} */
    const PLAINTEXT_LANGUAGE = { disableAutodetect: true, name: 'Plain text', contains: [] };

    // Global options used when within external APIs. This is modified when
    // calling the `hljs.configure` function.
    /** @type HLJSOptions */
    let options = {
      ignoreUnescapedHTML: false,
      throwUnescapedHTML: false,
      noHighlightRe: /^(no-?highlight)$/i,
      languageDetectRe: /\blang(?:uage)?-([\w-]+)\b/i,
      classPrefix: 'hljs-',
      cssSelector: 'pre code',
      languages: null,
      // beta configuration options, subject to change, welcome to discuss
      // https://github.com/highlightjs/highlight.js/issues/1086
      __emitter: TokenTreeEmitter
    };

    /* Utility functions */

    /**
     * Tests a language name to see if highlighting should be skipped
     * @param {string} languageName
     */
    function shouldNotHighlight(languageName) {
      return options.noHighlightRe.test(languageName);
    }

    /**
     * @param {HighlightedHTMLElement} block - the HTML element to determine language for
     */
    function blockLanguage(block) {
      let classes = block.className + ' ';

      classes += block.parentNode ? block.parentNode.className : '';

      // language-* takes precedence over non-prefixed class names.
      const match = options.languageDetectRe.exec(classes);
      if (match) {
        const language = getLanguage(match[1]);
        if (!language) {
          warn(LANGUAGE_NOT_FOUND.replace("{}", match[1]));
          warn("Falling back to no-highlight mode for this block.", block);
        }
        return language ? match[1] : 'no-highlight';
      }

      return classes
        .split(/\s+/)
        .find((_class) => shouldNotHighlight(_class) || getLanguage(_class));
    }

    /**
     * Core highlighting function.
     *
     * OLD API
     * highlight(lang, code, ignoreIllegals, continuation)
     *
     * NEW API
     * highlight(code, {lang, ignoreIllegals})
     *
     * @param {string} codeOrLanguageName - the language to use for highlighting
     * @param {string | HighlightOptions} optionsOrCode - the code to highlight
     * @param {boolean} [ignoreIllegals] - whether to ignore illegal matches, default is to bail
     *
     * @returns {HighlightResult} Result - an object that represents the result
     * @property {string} language - the language name
     * @property {number} relevance - the relevance score
     * @property {string} value - the highlighted HTML code
     * @property {string} code - the original raw code
     * @property {CompiledMode} top - top of the current mode stack
     * @property {boolean} illegal - indicates whether any illegal matches were found
    */
    function highlight(codeOrLanguageName, optionsOrCode, ignoreIllegals) {
      let code = "";
      let languageName = "";
      if (typeof optionsOrCode === "object") {
        code = codeOrLanguageName;
        ignoreIllegals = optionsOrCode.ignoreIllegals;
        languageName = optionsOrCode.language;
      } else {
        // old API
        deprecated("10.7.0", "highlight(lang, code, ...args) has been deprecated.");
        deprecated("10.7.0", "Please use highlight(code, options) instead.\nhttps://github.com/highlightjs/highlight.js/issues/2277");
        languageName = codeOrLanguageName;
        code = optionsOrCode;
      }

      // https://github.com/highlightjs/highlight.js/issues/3149
      // eslint-disable-next-line no-undefined
      if (ignoreIllegals === undefined) { ignoreIllegals = true; }

      /** @type {BeforeHighlightContext} */
      const context = {
        code,
        language: languageName
      };
      // the plugin can change the desired language or the code to be highlighted
      // just be changing the object it was passed
      fire("before:highlight", context);

      // a before plugin can usurp the result completely by providing it's own
      // in which case we don't even need to call highlight
      const result = context.result
        ? context.result
        : _highlight(context.language, context.code, ignoreIllegals);

      result.code = context.code;
      // the plugin can change anything in result to suite it
      fire("after:highlight", result);

      return result;
    }

    /**
     * private highlight that's used internally and does not fire callbacks
     *
     * @param {string} languageName - the language to use for highlighting
     * @param {string} codeToHighlight - the code to highlight
     * @param {boolean?} [ignoreIllegals] - whether to ignore illegal matches, default is to bail
     * @param {CompiledMode?} [continuation] - current continuation mode, if any
     * @returns {HighlightResult} - result of the highlight operation
    */
    function _highlight(languageName, codeToHighlight, ignoreIllegals, continuation) {
      const keywordHits = Object.create(null);

      /**
       * Return keyword data if a match is a keyword
       * @param {CompiledMode} mode - current mode
       * @param {string} matchText - the textual match
       * @returns {KeywordData | false}
       */
      function keywordData(mode, matchText) {
        return mode.keywords[matchText];
      }

      function processKeywords() {
        if (!top.keywords) {
          emitter.addText(modeBuffer);
          return;
        }

        let lastIndex = 0;
        top.keywordPatternRe.lastIndex = 0;
        let match = top.keywordPatternRe.exec(modeBuffer);
        let buf = "";

        while (match) {
          buf += modeBuffer.substring(lastIndex, match.index);
          const word = language.case_insensitive ? match[0].toLowerCase() : match[0];
          const data = keywordData(top, word);
          if (data) {
            const [kind, keywordRelevance] = data;
            emitter.addText(buf);
            buf = "";

            keywordHits[word] = (keywordHits[word] || 0) + 1;
            if (keywordHits[word] <= MAX_KEYWORD_HITS) relevance += keywordRelevance;
            if (kind.startsWith("_")) {
              // _ implied for relevance only, do not highlight
              // by applying a class name
              buf += match[0];
            } else {
              const cssClass = language.classNameAliases[kind] || kind;
              emitKeyword(match[0], cssClass);
            }
          } else {
            buf += match[0];
          }
          lastIndex = top.keywordPatternRe.lastIndex;
          match = top.keywordPatternRe.exec(modeBuffer);
        }
        buf += modeBuffer.substring(lastIndex);
        emitter.addText(buf);
      }

      function processSubLanguage() {
        if (modeBuffer === "") return;
        /** @type HighlightResult */
        let result = null;

        if (typeof top.subLanguage === 'string') {
          if (!languages[top.subLanguage]) {
            emitter.addText(modeBuffer);
            return;
          }
          result = _highlight(top.subLanguage, modeBuffer, true, continuations[top.subLanguage]);
          continuations[top.subLanguage] = /** @type {CompiledMode} */ (result._top);
        } else {
          result = highlightAuto(modeBuffer, top.subLanguage.length ? top.subLanguage : null);
        }

        // Counting embedded language score towards the host language may be disabled
        // with zeroing the containing mode relevance. Use case in point is Markdown that
        // allows XML everywhere and makes every XML snippet to have a much larger Markdown
        // score.
        if (top.relevance > 0) {
          relevance += result.relevance;
        }
        emitter.__addSublanguage(result._emitter, result.language);
      }

      function processBuffer() {
        if (top.subLanguage != null) {
          processSubLanguage();
        } else {
          processKeywords();
        }
        modeBuffer = '';
      }

      /**
       * @param {string} text
       * @param {string} scope
       */
      function emitKeyword(keyword, scope) {
        if (keyword === "") return;

        emitter.startScope(scope);
        emitter.addText(keyword);
        emitter.endScope();
      }

      /**
       * @param {CompiledScope} scope
       * @param {RegExpMatchArray} match
       */
      function emitMultiClass(scope, match) {
        let i = 1;
        const max = match.length - 1;
        while (i <= max) {
          if (!scope._emit[i]) { i++; continue; }
          const klass = language.classNameAliases[scope[i]] || scope[i];
          const text = match[i];
          if (klass) {
            emitKeyword(text, klass);
          } else {
            modeBuffer = text;
            processKeywords();
            modeBuffer = "";
          }
          i++;
        }
      }

      /**
       * @param {CompiledMode} mode - new mode to start
       * @param {RegExpMatchArray} match
       */
      function startNewMode(mode, match) {
        if (mode.scope && typeof mode.scope === "string") {
          emitter.openNode(language.classNameAliases[mode.scope] || mode.scope);
        }
        if (mode.beginScope) {
          // beginScope just wraps the begin match itself in a scope
          if (mode.beginScope._wrap) {
            emitKeyword(modeBuffer, language.classNameAliases[mode.beginScope._wrap] || mode.beginScope._wrap);
            modeBuffer = "";
          } else if (mode.beginScope._multi) {
            // at this point modeBuffer should just be the match
            emitMultiClass(mode.beginScope, match);
            modeBuffer = "";
          }
        }

        top = Object.create(mode, { parent: { value: top } });
        return top;
      }

      /**
       * @param {CompiledMode } mode - the mode to potentially end
       * @param {RegExpMatchArray} match - the latest match
       * @param {string} matchPlusRemainder - match plus remainder of content
       * @returns {CompiledMode | void} - the next mode, or if void continue on in current mode
       */
      function endOfMode(mode, match, matchPlusRemainder) {
        let matched = startsWith(mode.endRe, matchPlusRemainder);

        if (matched) {
          if (mode["on:end"]) {
            const resp = new Response(mode);
            mode["on:end"](match, resp);
            if (resp.isMatchIgnored) matched = false;
          }

          if (matched) {
            while (mode.endsParent && mode.parent) {
              mode = mode.parent;
            }
            return mode;
          }
        }
        // even if on:end fires an `ignore` it's still possible
        // that we might trigger the end node because of a parent mode
        if (mode.endsWithParent) {
          return endOfMode(mode.parent, match, matchPlusRemainder);
        }
      }

      /**
       * Handle matching but then ignoring a sequence of text
       *
       * @param {string} lexeme - string containing full match text
       */
      function doIgnore(lexeme) {
        if (top.matcher.regexIndex === 0) {
          // no more regexes to potentially match here, so we move the cursor forward one
          // space
          modeBuffer += lexeme[0];
          return 1;
        } else {
          // no need to move the cursor, we still have additional regexes to try and
          // match at this very spot
          resumeScanAtSamePosition = true;
          return 0;
        }
      }

      /**
       * Handle the start of a new potential mode match
       *
       * @param {EnhancedMatch} match - the current match
       * @returns {number} how far to advance the parse cursor
       */
      function doBeginMatch(match) {
        const lexeme = match[0];
        const newMode = match.rule;

        const resp = new Response(newMode);
        // first internal before callbacks, then the public ones
        const beforeCallbacks = [newMode.__beforeBegin, newMode["on:begin"]];
        for (const cb of beforeCallbacks) {
          if (!cb) continue;
          cb(match, resp);
          if (resp.isMatchIgnored) return doIgnore(lexeme);
        }

        if (newMode.skip) {
          modeBuffer += lexeme;
        } else {
          if (newMode.excludeBegin) {
            modeBuffer += lexeme;
          }
          processBuffer();
          if (!newMode.returnBegin && !newMode.excludeBegin) {
            modeBuffer = lexeme;
          }
        }
        startNewMode(newMode, match);
        return newMode.returnBegin ? 0 : lexeme.length;
      }

      /**
       * Handle the potential end of mode
       *
       * @param {RegExpMatchArray} match - the current match
       */
      function doEndMatch(match) {
        const lexeme = match[0];
        const matchPlusRemainder = codeToHighlight.substring(match.index);

        const endMode = endOfMode(top, match, matchPlusRemainder);
        if (!endMode) { return NO_MATCH; }

        const origin = top;
        if (top.endScope && top.endScope._wrap) {
          processBuffer();
          emitKeyword(lexeme, top.endScope._wrap);
        } else if (top.endScope && top.endScope._multi) {
          processBuffer();
          emitMultiClass(top.endScope, match);
        } else if (origin.skip) {
          modeBuffer += lexeme;
        } else {
          if (!(origin.returnEnd || origin.excludeEnd)) {
            modeBuffer += lexeme;
          }
          processBuffer();
          if (origin.excludeEnd) {
            modeBuffer = lexeme;
          }
        }
        do {
          if (top.scope) {
            emitter.closeNode();
          }
          if (!top.skip && !top.subLanguage) {
            relevance += top.relevance;
          }
          top = top.parent;
        } while (top !== endMode.parent);
        if (endMode.starts) {
          startNewMode(endMode.starts, match);
        }
        return origin.returnEnd ? 0 : lexeme.length;
      }

      function processContinuations() {
        const list = [];
        for (let current = top; current !== language; current = current.parent) {
          if (current.scope) {
            list.unshift(current.scope);
          }
        }
        list.forEach(item => emitter.openNode(item));
      }

      /** @type {{type?: MatchType, index?: number, rule?: Mode}}} */
      let lastMatch = {};

      /**
       *  Process an individual match
       *
       * @param {string} textBeforeMatch - text preceding the match (since the last match)
       * @param {EnhancedMatch} [match] - the match itself
       */
      function processLexeme(textBeforeMatch, match) {
        const lexeme = match && match[0];

        // add non-matched text to the current mode buffer
        modeBuffer += textBeforeMatch;

        if (lexeme == null) {
          processBuffer();
          return 0;
        }

        // we've found a 0 width match and we're stuck, so we need to advance
        // this happens when we have badly behaved rules that have optional matchers to the degree that
        // sometimes they can end up matching nothing at all
        // Ref: https://github.com/highlightjs/highlight.js/issues/2140
        if (lastMatch.type === "begin" && match.type === "end" && lastMatch.index === match.index && lexeme === "") {
          // spit the "skipped" character that our regex choked on back into the output sequence
          modeBuffer += codeToHighlight.slice(match.index, match.index + 1);
          if (!SAFE_MODE) {
            /** @type {AnnotatedError} */
            const err = new Error(`0 width match regex (${languageName})`);
            err.languageName = languageName;
            err.badRule = lastMatch.rule;
            throw err;
          }
          return 1;
        }
        lastMatch = match;

        if (match.type === "begin") {
          return doBeginMatch(match);
        } else if (match.type === "illegal" && !ignoreIllegals) {
          // illegal match, we do not continue processing
          /** @type {AnnotatedError} */
          const err = new Error('Illegal lexeme "' + lexeme + '" for mode "' + (top.scope || '<unnamed>') + '"');
          err.mode = top;
          throw err;
        } else if (match.type === "end") {
          const processed = doEndMatch(match);
          if (processed !== NO_MATCH) {
            return processed;
          }
        }

        // edge case for when illegal matches $ (end of line) which is technically
        // a 0 width match but not a begin/end match so it's not caught by the
        // first handler (when ignoreIllegals is true)
        if (match.type === "illegal" && lexeme === "") {
          // advance so we aren't stuck in an infinite loop
          return 1;
        }

        // infinite loops are BAD, this is a last ditch catch all. if we have a
        // decent number of iterations yet our index (cursor position in our
        // parsing) still 3x behind our index then something is very wrong
        // so we bail
        if (iterations > 100000 && iterations > match.index * 3) {
          const err = new Error('potential infinite loop, way more iterations than matches');
          throw err;
        }

        /*
        Why might be find ourselves here?  An potential end match that was
        triggered but could not be completed.  IE, `doEndMatch` returned NO_MATCH.
        (this could be because a callback requests the match be ignored, etc)

        This causes no real harm other than stopping a few times too many.
        */

        modeBuffer += lexeme;
        return lexeme.length;
      }

      const language = getLanguage(languageName);
      if (!language) {
        error$1(LANGUAGE_NOT_FOUND.replace("{}", languageName));
        throw new Error('Unknown language: "' + languageName + '"');
      }

      const md = compileLanguage(language);
      let result = '';
      /** @type {CompiledMode} */
      let top = continuation || md;
      /** @type Record<string,CompiledMode> */
      const continuations = {}; // keep continuations for sub-languages
      const emitter = new options.__emitter(options);
      processContinuations();
      let modeBuffer = '';
      let relevance = 0;
      let index = 0;
      let iterations = 0;
      let resumeScanAtSamePosition = false;

      try {
        if (!language.__emitTokens) {
          top.matcher.considerAll();

          for (;;) {
            iterations++;
            if (resumeScanAtSamePosition) {
              // only regexes not matched previously will now be
              // considered for a potential match
              resumeScanAtSamePosition = false;
            } else {
              top.matcher.considerAll();
            }
            top.matcher.lastIndex = index;

            const match = top.matcher.exec(codeToHighlight);
            // console.log("match", match[0], match.rule && match.rule.begin)

            if (!match) break;

            const beforeMatch = codeToHighlight.substring(index, match.index);
            const processedCount = processLexeme(beforeMatch, match);
            index = match.index + processedCount;
          }
          processLexeme(codeToHighlight.substring(index));
        } else {
          language.__emitTokens(codeToHighlight, emitter);
        }

        emitter.finalize();
        result = emitter.toHTML();

        return {
          language: languageName,
          value: result,
          relevance,
          illegal: false,
          _emitter: emitter,
          _top: top
        };
      } catch (err) {
        if (err.message && err.message.includes('Illegal')) {
          return {
            language: languageName,
            value: escape(codeToHighlight),
            illegal: true,
            relevance: 0,
            _illegalBy: {
              message: err.message,
              index,
              context: codeToHighlight.slice(index - 100, index + 100),
              mode: err.mode,
              resultSoFar: result
            },
            _emitter: emitter
          };
        } else if (SAFE_MODE) {
          return {
            language: languageName,
            value: escape(codeToHighlight),
            illegal: false,
            relevance: 0,
            errorRaised: err,
            _emitter: emitter,
            _top: top
          };
        } else {
          throw err;
        }
      }
    }

    /**
     * returns a valid highlight result, without actually doing any actual work,
     * auto highlight starts with this and it's possible for small snippets that
     * auto-detection may not find a better match
     * @param {string} code
     * @returns {HighlightResult}
     */
    function justTextHighlightResult(code) {
      const result = {
        value: escape(code),
        illegal: false,
        relevance: 0,
        _top: PLAINTEXT_LANGUAGE,
        _emitter: new options.__emitter(options)
      };
      result._emitter.addText(code);
      return result;
    }

    /**
    Highlighting with language detection. Accepts a string with the code to
    highlight. Returns an object with the following properties:

    - language (detected language)
    - relevance (int)
    - value (an HTML string with highlighting markup)
    - secondBest (object with the same structure for second-best heuristically
      detected language, may be absent)

      @param {string} code
      @param {Array<string>} [languageSubset]
      @returns {AutoHighlightResult}
    */
    function highlightAuto(code, languageSubset) {
      languageSubset = languageSubset || options.languages || Object.keys(languages);
      const plaintext = justTextHighlightResult(code);

      const results = languageSubset.filter(getLanguage).filter(autoDetection).map(name =>
        _highlight(name, code, false)
      );
      results.unshift(plaintext); // plaintext is always an option

      const sorted = results.sort((a, b) => {
        // sort base on relevance
        if (a.relevance !== b.relevance) return b.relevance - a.relevance;

        // always award the tie to the base language
        // ie if C++ and Arduino are tied, it's more likely to be C++
        if (a.language && b.language) {
          if (getLanguage(a.language).supersetOf === b.language) {
            return 1;
          } else if (getLanguage(b.language).supersetOf === a.language) {
            return -1;
          }
        }

        // otherwise say they are equal, which has the effect of sorting on
        // relevance while preserving the original ordering - which is how ties
        // have historically been settled, ie the language that comes first always
        // wins in the case of a tie
        return 0;
      });

      const [best, secondBest] = sorted;

      /** @type {AutoHighlightResult} */
      const result = best;
      result.secondBest = secondBest;

      return result;
    }

    /**
     * Builds new class name for block given the language name
     *
     * @param {HTMLElement} element
     * @param {string} [currentLang]
     * @param {string} [resultLang]
     */
    function updateClassName(element, currentLang, resultLang) {
      const language = (currentLang && aliases[currentLang]) || resultLang;

      element.classList.add("hljs");
      element.classList.add(`language-${language}`);
    }

    /**
     * Applies highlighting to a DOM node containing code.
     *
     * @param {HighlightedHTMLElement} element - the HTML element to highlight
    */
    function highlightElement(element) {
      /** @type HTMLElement */
      let node = null;
      const language = blockLanguage(element);

      if (shouldNotHighlight(language)) return;

      fire("before:highlightElement",
        { el: element, language });

      // we should be all text, no child nodes (unescaped HTML) - this is possibly
      // an HTML injection attack - it's likely too late if this is already in
      // production (the code has likely already done its damage by the time
      // we're seeing it)... but we yell loudly about this so that hopefully it's
      // more likely to be caught in development before making it to production
      if (element.children.length > 0) {
        if (!options.ignoreUnescapedHTML) {
          console.warn("One of your code blocks includes unescaped HTML. This is a potentially serious security risk.");
          console.warn("https://github.com/highlightjs/highlight.js/wiki/security");
          console.warn("The element with unescaped HTML:");
          console.warn(element);
        }
        if (options.throwUnescapedHTML) {
          const err = new HTMLInjectionError(
            "One of your code blocks includes unescaped HTML.",
            element.innerHTML
          );
          throw err;
        }
      }

      node = element;
      const text = node.textContent;
      const result = language ? highlight(text, { language, ignoreIllegals: true }) : highlightAuto(text);

      element.innerHTML = result.value;
      updateClassName(element, language, result.language);
      element.result = {
        language: result.language,
        // TODO: remove with version 11.0
        re: result.relevance,
        relevance: result.relevance
      };
      if (result.secondBest) {
        element.secondBest = {
          language: result.secondBest.language,
          relevance: result.secondBest.relevance
        };
      }

      fire("after:highlightElement", { el: element, result, text });
    }

    /**
     * Updates highlight.js global options with the passed options
     *
     * @param {Partial<HLJSOptions>} userOptions
     */
    function configure(userOptions) {
      options = inherit(options, userOptions);
    }

    // TODO: remove v12, deprecated
    const initHighlighting = () => {
      highlightAll();
      deprecated("10.6.0", "initHighlighting() deprecated.  Use highlightAll() now.");
    };

    // TODO: remove v12, deprecated
    function initHighlightingOnLoad() {
      highlightAll();
      deprecated("10.6.0", "initHighlightingOnLoad() deprecated.  Use highlightAll() now.");
    }

    let wantsHighlight = false;

    /**
     * auto-highlights all pre>code elements on the page
     */
    function highlightAll() {
      // if we are called too early in the loading process
      if (document.readyState === "loading") {
        wantsHighlight = true;
        return;
      }

      const blocks = document.querySelectorAll(options.cssSelector);
      blocks.forEach(highlightElement);
    }

    function boot() {
      // if a highlight was requested before DOM was loaded, do now
      if (wantsHighlight) highlightAll();
    }

    // make sure we are in the browser environment
    if (typeof window !== 'undefined' && window.addEventListener) {
      window.addEventListener('DOMContentLoaded', boot, false);
    }

    /**
     * Register a language grammar module
     *
     * @param {string} languageName
     * @param {LanguageFn} languageDefinition
     */
    function registerLanguage(languageName, languageDefinition) {
      let lang = null;
      try {
        lang = languageDefinition(hljs);
      } catch (error$1$1) {
        error$1("Language definition for '{}' could not be registered.".replace("{}", languageName));
        // hard or soft error
        if (!SAFE_MODE) { throw error$1$1; } else { error$1(error$1$1); }
        // languages that have serious errors are replaced with essentially a
        // "plaintext" stand-in so that the code blocks will still get normal
        // css classes applied to them - and one bad language won't break the
        // entire highlighter
        lang = PLAINTEXT_LANGUAGE;
      }
      // give it a temporary name if it doesn't have one in the meta-data
      if (!lang.name) lang.name = languageName;
      languages[languageName] = lang;
      lang.rawDefinition = languageDefinition.bind(null, hljs);

      if (lang.aliases) {
        registerAliases(lang.aliases, { languageName });
      }
    }

    /**
     * Remove a language grammar module
     *
     * @param {string} languageName
     */
    function unregisterLanguage(languageName) {
      delete languages[languageName];
      for (const alias of Object.keys(aliases)) {
        if (aliases[alias] === languageName) {
          delete aliases[alias];
        }
      }
    }

    /**
     * @returns {string[]} List of language internal names
     */
    function listLanguages() {
      return Object.keys(languages);
    }

    /**
     * @param {string} name - name of the language to retrieve
     * @returns {Language | undefined}
     */
    function getLanguage(name) {
      name = (name || '').toLowerCase();
      return languages[name] || languages[aliases[name]];
    }

    /**
     *
     * @param {string|string[]} aliasList - single alias or list of aliases
     * @param {{languageName: string}} opts
     */
    function registerAliases(aliasList, { languageName }) {
      if (typeof aliasList === 'string') {
        aliasList = [aliasList];
      }
      aliasList.forEach(alias => { aliases[alias.toLowerCase()] = languageName; });
    }

    /**
     * Determines if a given language has auto-detection enabled
     * @param {string} name - name of the language
     */
    function autoDetection(name) {
      const lang = getLanguage(name);
      return lang && !lang.disableAutodetect;
    }

    /**
     * Upgrades the old highlightBlock plugins to the new
     * highlightElement API
     * @param {HLJSPlugin} plugin
     */
    function upgradePluginAPI(plugin) {
      // TODO: remove with v12
      if (plugin["before:highlightBlock"] && !plugin["before:highlightElement"]) {
        plugin["before:highlightElement"] = (data) => {
          plugin["before:highlightBlock"](
            Object.assign({ block: data.el }, data)
          );
        };
      }
      if (plugin["after:highlightBlock"] && !plugin["after:highlightElement"]) {
        plugin["after:highlightElement"] = (data) => {
          plugin["after:highlightBlock"](
            Object.assign({ block: data.el }, data)
          );
        };
      }
    }

    /**
     * @param {HLJSPlugin} plugin
     */
    function addPlugin(plugin) {
      upgradePluginAPI(plugin);
      plugins.push(plugin);
    }

    /**
     * @param {HLJSPlugin} plugin
     */
    function removePlugin(plugin) {
      const index = plugins.indexOf(plugin);
      if (index !== -1) {
        plugins.splice(index, 1);
      }
    }

    /**
     *
     * @param {PluginEvent} event
     * @param {any} args
     */
    function fire(event, args) {
      const cb = event;
      plugins.forEach(function(plugin) {
        if (plugin[cb]) {
          plugin[cb](args);
        }
      });
    }

    /**
     * DEPRECATED
     * @param {HighlightedHTMLElement} el
     */
    function deprecateHighlightBlock(el) {
      deprecated("10.7.0", "highlightBlock will be removed entirely in v12.0");
      deprecated("10.7.0", "Please use highlightElement now.");

      return highlightElement(el);
    }

    /* Interface definition */
    Object.assign(hljs, {
      highlight,
      highlightAuto,
      highlightAll,
      highlightElement,
      // TODO: Remove with v12 API
      highlightBlock: deprecateHighlightBlock,
      configure,
      initHighlighting,
      initHighlightingOnLoad,
      registerLanguage,
      unregisterLanguage,
      listLanguages,
      getLanguage,
      registerAliases,
      autoDetection,
      inherit,
      addPlugin,
      removePlugin
    });

    hljs.debugMode = function() { SAFE_MODE = false; };
    hljs.safeMode = function() { SAFE_MODE = true; };
    hljs.versionString = version;

    hljs.regex = {
      concat: concat,
      lookahead: lookahead,
      either: either,
      optional: optional,
      anyNumberOfTimes: anyNumberOfTimes
    };

    for (const key in MODES) {
      // @ts-ignore
      if (typeof MODES[key] === "object") {
        // @ts-ignore
        deepFreeze(MODES[key]);
      }
    }

    // merge all the modes/regexes into our main object
    Object.assign(hljs, MODES);

    return hljs;
  };

  // Other names for the variable may break build script
  const highlight = HLJS({});

  // returns a new instance of the highlighter to be used for extensions
  // check https://github.com/wooorm/lowlight/issues/47
  highlight.newInstance = () => HLJS({});

  var core = highlight;
  highlight.HighlightJS = highlight;
  highlight.default = highlight;

  /*
  Language: 1C:Enterprise
  Author: Stanislav Belov <stbelov@gmail.com>
  Description: built-in language 1C:Enterprise (v7, v8)
  Category: enterprise
  */

  var _1c_1;
  var hasRequired_1c;

  function require_1c () {
  	if (hasRequired_1c) return _1c_1;
  	hasRequired_1c = 1;
  	function _1c(hljs) {
  	  // общий паттерн для определения идентификаторов
  	  const UNDERSCORE_IDENT_RE = '[A-Za-zА-Яа-яёЁ_][A-Za-zА-Яа-яёЁ_0-9]+';

  	  // v7 уникальные ключевые слова, отсутствующие в v8 ==> keyword
  	  const v7_keywords =
  	  'далее ';

  	  // v8 ключевые слова ==> keyword
  	  const v8_keywords =
  	  'возврат вызватьисключение выполнить для если и из или иначе иначеесли исключение каждого конецесли '
  	  + 'конецпопытки конеццикла не новый перейти перем по пока попытка прервать продолжить тогда цикл экспорт ';

  	  // keyword : ключевые слова
  	  const KEYWORD = v7_keywords + v8_keywords;

  	  // v7 уникальные директивы, отсутствующие в v8 ==> meta-keyword
  	  const v7_meta_keywords =
  	  'загрузитьизфайла ';

  	  // v8 ключевые слова в инструкциях препроцессора, директивах компиляции, аннотациях ==> meta-keyword
  	  const v8_meta_keywords =
  	  'вебклиент вместо внешнеесоединение клиент конецобласти мобильноеприложениеклиент мобильноеприложениесервер '
  	  + 'наклиенте наклиентенасервере наклиентенасерверебезконтекста насервере насерверебезконтекста область перед '
  	  + 'после сервер толстыйклиентобычноеприложение толстыйклиентуправляемоеприложение тонкийклиент ';

  	  // meta-keyword : ключевые слова в инструкциях препроцессора, директивах компиляции, аннотациях
  	  const METAKEYWORD = v7_meta_keywords + v8_meta_keywords;

  	  // v7 системные константы ==> built_in
  	  const v7_system_constants =
  	  'разделительстраниц разделительстрок символтабуляции ';

  	  // v7 уникальные методы глобального контекста, отсутствующие в v8 ==> built_in
  	  const v7_global_context_methods =
  	  'ansitooem oemtoansi ввестивидсубконто ввестиперечисление ввестипериод ввестиплансчетов выбранныйплансчетов '
  	  + 'датагод датамесяц датачисло заголовоксистемы значениевстроку значениеизстроки каталогиб каталогпользователя '
  	  + 'кодсимв конгода конецпериодаби конецрассчитанногопериодаби конецстандартногоинтервала конквартала конмесяца '
  	  + 'коннедели лог лог10 максимальноеколичествосубконто названиеинтерфейса названиенабораправ назначитьвид '
  	  + 'назначитьсчет найтиссылки началопериодаби началостандартногоинтервала начгода начквартала начмесяца '
  	  + 'начнедели номерднягода номерднянедели номернеделигода обработкаожидания основнойжурналрасчетов '
  	  + 'основнойплансчетов основнойязык очиститьокносообщений периодстр получитьвремята получитьдатута '
  	  + 'получитьдокументта получитьзначенияотбора получитьпозициюта получитьпустоезначение получитьта '
  	  + 'префиксавтонумерации пропись пустоезначение разм разобратьпозициюдокумента рассчитатьрегистрына '
  	  + 'рассчитатьрегистрыпо симв создатьобъект статусвозврата стрколичествострок сформироватьпозициюдокумента '
  	  + 'счетпокоду текущеевремя типзначения типзначениястр установитьтана установитьтапо фиксшаблон шаблон ';

  	  // v8 методы глобального контекста ==> built_in
  	  const v8_global_context_methods =
  	  'acos asin atan base64значение base64строка cos exp log log10 pow sin sqrt tan xmlзначение xmlстрока '
  	  + 'xmlтип xmlтипзнч активноеокно безопасныйрежим безопасныйрежимразделенияданных булево ввестидату ввестизначение '
  	  + 'ввестистроку ввестичисло возможностьчтенияxml вопрос восстановитьзначение врег выгрузитьжурналрегистрации '
  	  + 'выполнитьобработкуоповещения выполнитьпроверкуправдоступа вычислить год данныеформывзначение дата день деньгода '
  	  + 'деньнедели добавитьмесяц заблокироватьданныедляредактирования заблокироватьработупользователя завершитьработусистемы '
  	  + 'загрузитьвнешнююкомпоненту закрытьсправку записатьjson записатьxml записатьдатуjson записьжурналарегистрации '
  	  + 'заполнитьзначениясвойств запроситьразрешениепользователя запуститьприложение запуститьсистему зафиксироватьтранзакцию '
  	  + 'значениевданныеформы значениевстрокувнутр значениевфайл значениезаполнено значениеизстрокивнутр значениеизфайла '
  	  + 'изxmlтипа импортмоделиxdto имякомпьютера имяпользователя инициализироватьпредопределенныеданные информацияобошибке '
  	  + 'каталогбиблиотекимобильногоустройства каталогвременныхфайлов каталогдокументов каталогпрограммы кодироватьстроку '
  	  + 'кодлокализацииинформационнойбазы кодсимвола командасистемы конецгода конецдня конецквартала конецмесяца конецминуты '
  	  + 'конецнедели конецчаса конфигурациябазыданныхизмененадинамически конфигурацияизменена копироватьданныеформы '
  	  + 'копироватьфайл краткоепредставлениеошибки лев макс местноевремя месяц мин минута монопольныйрежим найти '
  	  + 'найтинедопустимыесимволыxml найтиокнопонавигационнойссылке найтипомеченныенаудаление найтипоссылкам найтифайлы '
  	  + 'началогода началодня началоквартала началомесяца началоминуты началонедели началочаса начатьзапросразрешенияпользователя '
  	  + 'начатьзапускприложения начатькопированиефайла начатьперемещениефайла начатьподключениевнешнейкомпоненты '
  	  + 'начатьподключениерасширенияработыскриптографией начатьподключениерасширенияработысфайлами начатьпоискфайлов '
  	  + 'начатьполучениекаталогавременныхфайлов начатьполучениекаталогадокументов начатьполучениерабочегокаталогаданныхпользователя '
  	  + 'начатьполучениефайлов начатьпомещениефайла начатьпомещениефайлов начатьсозданиедвоичныхданныхизфайла начатьсозданиекаталога '
  	  + 'начатьтранзакцию начатьудалениефайлов начатьустановкувнешнейкомпоненты начатьустановкурасширенияработыскриптографией '
  	  + 'начатьустановкурасширенияработысфайлами неделягода необходимостьзавершениясоединения номерсеансаинформационнойбазы '
  	  + 'номерсоединенияинформационнойбазы нрег нстр обновитьинтерфейс обновитьнумерациюобъектов обновитьповторноиспользуемыезначения '
  	  + 'обработкапрерыванияпользователя объединитьфайлы окр описаниеошибки оповестить оповеститьобизменении '
  	  + 'отключитьобработчикзапросанастроекклиенталицензирования отключитьобработчикожидания отключитьобработчикоповещения '
  	  + 'открытьзначение открытьиндекссправки открытьсодержаниесправки открытьсправку открытьформу открытьформумодально '
  	  + 'отменитьтранзакцию очиститьжурналрегистрации очиститьнастройкипользователя очиститьсообщения параметрыдоступа '
  	  + 'перейтипонавигационнойссылке переместитьфайл подключитьвнешнююкомпоненту '
  	  + 'подключитьобработчикзапросанастроекклиенталицензирования подключитьобработчикожидания подключитьобработчикоповещения '
  	  + 'подключитьрасширениеработыскриптографией подключитьрасширениеработысфайлами подробноепредставлениеошибки '
  	  + 'показатьвводдаты показатьвводзначения показатьвводстроки показатьвводчисла показатьвопрос показатьзначение '
  	  + 'показатьинформациюобошибке показатьнакарте показатьоповещениепользователя показатьпредупреждение полноеимяпользователя '
  	  + 'получитьcomобъект получитьxmlтип получитьадреспоместоположению получитьблокировкусеансов получитьвремязавершенияспящегосеанса '
  	  + 'получитьвремязасыпанияпассивногосеанса получитьвремяожиданияблокировкиданных получитьданныевыбора '
  	  + 'получитьдополнительныйпараметрклиенталицензирования получитьдопустимыекодылокализации получитьдопустимыечасовыепояса '
  	  + 'получитьзаголовокклиентскогоприложения получитьзаголовоксистемы получитьзначенияотборажурналарегистрации '
  	  + 'получитьидентификаторконфигурации получитьизвременногохранилища получитьимявременногофайла '
  	  + 'получитьимяклиенталицензирования получитьинформациюэкрановклиента получитьиспользованиежурналарегистрации '
  	  + 'получитьиспользованиесобытияжурналарегистрации получитькраткийзаголовокприложения получитьмакетоформления '
  	  + 'получитьмаскувсефайлы получитьмаскувсефайлыклиента получитьмаскувсефайлысервера получитьместоположениепоадресу '
  	  + 'получитьминимальнуюдлинупаролейпользователей получитьнавигационнуюссылку получитьнавигационнуюссылкуинформационнойбазы '
  	  + 'получитьобновлениеконфигурациибазыданных получитьобновлениепредопределенныхданныхинформационнойбазы получитьобщиймакет '
  	  + 'получитьобщуюформу получитьокна получитьоперативнуюотметкувремени получитьотключениебезопасногорежима '
  	  + 'получитьпараметрыфункциональныхопцийинтерфейса получитьполноеимяпредопределенногозначения '
  	  + 'получитьпредставлениянавигационныхссылок получитьпроверкусложностипаролейпользователей получитьразделительпути '
  	  + 'получитьразделительпутиклиента получитьразделительпутисервера получитьсеансыинформационнойбазы '
  	  + 'получитьскоростьклиентскогосоединения получитьсоединенияинформационнойбазы получитьсообщенияпользователю '
  	  + 'получитьсоответствиеобъектаиформы получитьсоставстандартногоинтерфейсаodata получитьструктурухранениябазыданных '
  	  + 'получитьтекущийсеансинформационнойбазы получитьфайл получитьфайлы получитьформу получитьфункциональнуюопцию '
  	  + 'получитьфункциональнуюопциюинтерфейса получитьчасовойпоясинформационнойбазы пользователиос поместитьвовременноехранилище '
  	  + 'поместитьфайл поместитьфайлы прав праводоступа предопределенноезначение представлениекодалокализации представлениепериода '
  	  + 'представлениеправа представлениеприложения представлениесобытияжурналарегистрации представлениечасовогопояса предупреждение '
  	  + 'прекратитьработусистемы привилегированныйрежим продолжитьвызов прочитатьjson прочитатьxml прочитатьдатуjson пустаястрока '
  	  + 'рабочийкаталогданныхпользователя разблокироватьданныедляредактирования разделитьфайл разорватьсоединениесвнешнимисточникомданных '
  	  + 'раскодироватьстроку рольдоступна секунда сигнал символ скопироватьжурналрегистрации смещениелетнеговремени '
  	  + 'смещениестандартноговремени соединитьбуферыдвоичныхданных создатькаталог создатьфабрикуxdto сокрл сокрлп сокрп сообщить '
  	  + 'состояние сохранитьзначение сохранитьнастройкипользователя сред стрдлина стрзаканчиваетсяна стрзаменить стрнайти стрначинаетсяс '
  	  + 'строка строкасоединенияинформационнойбазы стрполучитьстроку стрразделить стрсоединить стрсравнить стрчисловхождений '
  	  + 'стрчислострок стршаблон текущаядата текущаядатасеанса текущаяуниверсальнаядата текущаяуниверсальнаядатавмиллисекундах '
  	  + 'текущийвариантинтерфейсаклиентскогоприложения текущийвариантосновногошрифтаклиентскогоприложения текущийкодлокализации '
  	  + 'текущийрежимзапуска текущийязык текущийязыксистемы тип типзнч транзакцияактивна трег удалитьданныеинформационнойбазы '
  	  + 'удалитьизвременногохранилища удалитьобъекты удалитьфайлы универсальноевремя установитьбезопасныйрежим '
  	  + 'установитьбезопасныйрежимразделенияданных установитьблокировкусеансов установитьвнешнююкомпоненту '
  	  + 'установитьвремязавершенияспящегосеанса установитьвремязасыпанияпассивногосеанса установитьвремяожиданияблокировкиданных '
  	  + 'установитьзаголовокклиентскогоприложения установитьзаголовоксистемы установитьиспользованиежурналарегистрации '
  	  + 'установитьиспользованиесобытияжурналарегистрации установитькраткийзаголовокприложения '
  	  + 'установитьминимальнуюдлинупаролейпользователей установитьмонопольныйрежим установитьнастройкиклиенталицензирования '
  	  + 'установитьобновлениепредопределенныхданныхинформационнойбазы установитьотключениебезопасногорежима '
  	  + 'установитьпараметрыфункциональныхопцийинтерфейса установитьпривилегированныйрежим '
  	  + 'установитьпроверкусложностипаролейпользователей установитьрасширениеработыскриптографией '
  	  + 'установитьрасширениеработысфайлами установитьсоединениесвнешнимисточникомданных установитьсоответствиеобъектаиформы '
  	  + 'установитьсоставстандартногоинтерфейсаodata установитьчасовойпоясинформационнойбазы установитьчасовойпояссеанса '
  	  + 'формат цел час часовойпояс часовойпояссеанса число числопрописью этоадресвременногохранилища ';

  	  // v8 свойства глобального контекста ==> built_in
  	  const v8_global_context_property =
  	  'wsссылки библиотекакартинок библиотекамакетовоформлениякомпоновкиданных библиотекастилей бизнеспроцессы '
  	  + 'внешниеисточникиданных внешниеобработки внешниеотчеты встроенныепокупки главныйинтерфейс главныйстиль '
  	  + 'документы доставляемыеуведомления журналыдокументов задачи информацияобинтернетсоединении использованиерабочейдаты '
  	  + 'историяработыпользователя константы критерииотбора метаданные обработки отображениерекламы отправкадоставляемыхуведомлений '
  	  + 'отчеты панельзадачос параметрзапуска параметрысеанса перечисления планывидоврасчета планывидовхарактеристик '
  	  + 'планыобмена планысчетов полнотекстовыйпоиск пользователиинформационнойбазы последовательности проверкавстроенныхпокупок '
  	  + 'рабочаядата расширенияконфигурации регистрыбухгалтерии регистрынакопления регистрырасчета регистрысведений '
  	  + 'регламентныезадания сериализаторxdto справочники средствагеопозиционирования средствакриптографии средствамультимедиа '
  	  + 'средстваотображениярекламы средствапочты средствателефонии фабрикаxdto файловыепотоки фоновыезадания хранилищанастроек '
  	  + 'хранилищевариантовотчетов хранилищенастроекданныхформ хранилищеобщихнастроек хранилищепользовательскихнастроекдинамическихсписков '
  	  + 'хранилищепользовательскихнастроекотчетов хранилищесистемныхнастроек ';

  	  // built_in : встроенные или библиотечные объекты (константы, классы, функции)
  	  const BUILTIN =
  	  v7_system_constants
  	  + v7_global_context_methods + v8_global_context_methods
  	  + v8_global_context_property;

  	  // v8 системные наборы значений ==> class
  	  const v8_system_sets_of_values =
  	  'webцвета windowsцвета windowsшрифты библиотекакартинок рамкистиля символы цветастиля шрифтыстиля ';

  	  // v8 системные перечисления - интерфейсные ==> class
  	  const v8_system_enums_interface =
  	  'автоматическоесохранениеданныхформывнастройках автонумерациявформе автораздвижениесерий '
  	  + 'анимациядиаграммы вариантвыравниванияэлементовизаголовков вариантуправлениявысотойтаблицы '
  	  + 'вертикальнаяпрокруткаформы вертикальноеположение вертикальноеположениеэлемента видгруппыформы '
  	  + 'виддекорацииформы виддополненияэлементаформы видизмененияданных видкнопкиформы видпереключателя '
  	  + 'видподписейкдиаграмме видполяформы видфлажка влияниеразмеранапузырекдиаграммы горизонтальноеположение '
  	  + 'горизонтальноеположениеэлемента группировкаколонок группировкаподчиненныхэлементовформы '
  	  + 'группыиэлементы действиеперетаскивания дополнительныйрежимотображения допустимыедействияперетаскивания '
  	  + 'интервалмеждуэлементамиформы использованиевывода использованиеполосыпрокрутки '
  	  + 'используемоезначениеточкибиржевойдиаграммы историявыборапривводе источникзначенийоситочекдиаграммы '
  	  + 'источникзначенияразмерапузырькадиаграммы категориягруппыкоманд максимумсерий начальноеотображениедерева '
  	  + 'начальноеотображениесписка обновлениетекстаредактирования ориентациядендрограммы ориентациядиаграммы '
  	  + 'ориентацияметокдиаграммы ориентацияметоксводнойдиаграммы ориентацияэлементаформы отображениевдиаграмме '
  	  + 'отображениевлегендедиаграммы отображениегруппыкнопок отображениезаголовкашкалыдиаграммы '
  	  + 'отображениезначенийсводнойдиаграммы отображениезначенияизмерительнойдиаграммы '
  	  + 'отображениеинтерваладиаграммыганта отображениекнопки отображениекнопкивыбора отображениеобсужденийформы '
  	  + 'отображениеобычнойгруппы отображениеотрицательныхзначенийпузырьковойдиаграммы отображениепанелипоиска '
  	  + 'отображениеподсказки отображениепредупрежденияприредактировании отображениеразметкиполосырегулирования '
  	  + 'отображениестраницформы отображениетаблицы отображениетекстазначениядиаграммыганта '
  	  + 'отображениеуправленияобычнойгруппы отображениефигурыкнопки палитрацветовдиаграммы поведениеобычнойгруппы '
  	  + 'поддержкамасштабадендрограммы поддержкамасштабадиаграммыганта поддержкамасштабасводнойдиаграммы '
  	  + 'поисквтаблицепривводе положениезаголовкаэлементаформы положениекартинкикнопкиформы '
  	  + 'положениекартинкиэлементаграфическойсхемы положениекоманднойпанелиформы положениекоманднойпанелиэлементаформы '
  	  + 'положениеопорнойточкиотрисовки положениеподписейкдиаграмме положениеподписейшкалызначенийизмерительнойдиаграммы '
  	  + 'положениесостоянияпросмотра положениестрокипоиска положениетекстасоединительнойлинии положениеуправленияпоиском '
  	  + 'положениешкалывремени порядокотображенияточекгоризонтальнойгистограммы порядоксерийвлегендедиаграммы '
  	  + 'размеркартинки расположениезаголовкашкалыдиаграммы растягиваниеповертикалидиаграммыганта '
  	  + 'режимавтоотображениясостояния режимвводастроктаблицы режимвыборанезаполненного режимвыделениядаты '
  	  + 'режимвыделениястрокитаблицы режимвыделениятаблицы режимизмененияразмера режимизменениясвязанногозначения '
  	  + 'режимиспользованиядиалогапечати режимиспользованияпараметракоманды режиммасштабированияпросмотра '
  	  + 'режимосновногоокнаклиентскогоприложения режимоткрытияокнаформы режимотображениявыделения '
  	  + 'режимотображениягеографическойсхемы режимотображениязначенийсерии режимотрисовкисеткиграфическойсхемы '
  	  + 'режимполупрозрачностидиаграммы режимпробеловдиаграммы режимразмещениянастранице режимредактированияколонки '
  	  + 'режимсглаживаниядиаграммы режимсглаживанияиндикатора режимсписказадач сквозноевыравнивание '
  	  + 'сохранениеданныхформывнастройках способзаполнениятекстазаголовкашкалыдиаграммы '
  	  + 'способопределенияограничивающегозначениядиаграммы стандартнаягруппакоманд стандартноеоформление '
  	  + 'статусоповещенияпользователя стильстрелки типаппроксимациилиниитрендадиаграммы типдиаграммы '
  	  + 'типединицышкалывремени типимпортасерийслоягеографическойсхемы типлиниигеографическойсхемы типлиниидиаграммы '
  	  + 'типмаркерагеографическойсхемы типмаркерадиаграммы типобластиоформления '
  	  + 'типорганизацииисточникаданныхгеографическойсхемы типотображениясериислоягеографическойсхемы '
  	  + 'типотображенияточечногообъектагеографическойсхемы типотображенияшкалыэлементалегендыгеографическойсхемы '
  	  + 'типпоискаобъектовгеографическойсхемы типпроекциигеографическойсхемы типразмещенияизмерений '
  	  + 'типразмещенияреквизитовизмерений типрамкиэлементауправления типсводнойдиаграммы '
  	  + 'типсвязидиаграммыганта типсоединениязначенийпосериямдиаграммы типсоединенияточекдиаграммы '
  	  + 'типсоединительнойлинии типстороныэлементаграфическойсхемы типформыотчета типшкалырадарнойдиаграммы '
  	  + 'факторлиниитрендадиаграммы фигуракнопки фигурыграфическойсхемы фиксациявтаблице форматдняшкалывремени '
  	  + 'форматкартинки ширинаподчиненныхэлементовформы ';

  	  // v8 системные перечисления - свойства прикладных объектов ==> class
  	  const v8_system_enums_objects_properties =
  	  'виддвижениябухгалтерии виддвижениянакопления видпериодарегистрарасчета видсчета видточкимаршрутабизнеспроцесса '
  	  + 'использованиеагрегатарегистранакопления использованиегруппиэлементов использованиережимапроведения '
  	  + 'использованиесреза периодичностьагрегатарегистранакопления режимавтовремя режимзаписидокумента режимпроведениядокумента ';

  	  // v8 системные перечисления - планы обмена ==> class
  	  const v8_system_enums_exchange_plans =
  	  'авторегистрацияизменений допустимыйномерсообщения отправкаэлементаданных получениеэлементаданных ';

  	  // v8 системные перечисления - табличный документ ==> class
  	  const v8_system_enums_tabular_document =
  	  'использованиерасшифровкитабличногодокумента ориентациястраницы положениеитоговколоноксводнойтаблицы '
  	  + 'положениеитоговстроксводнойтаблицы положениетекстаотносительнокартинки расположениезаголовкагруппировкитабличногодокумента '
  	  + 'способчтениязначенийтабличногодокумента типдвустороннейпечати типзаполненияобластитабличногодокумента '
  	  + 'типкурсоровтабличногодокумента типлиниирисункатабличногодокумента типлинииячейкитабличногодокумента '
  	  + 'типнаправленияпереходатабличногодокумента типотображениявыделениятабличногодокумента типотображениялинийсводнойтаблицы '
  	  + 'типразмещениятекстатабличногодокумента типрисункатабличногодокумента типсмещениятабличногодокумента '
  	  + 'типузоратабличногодокумента типфайлатабличногодокумента точностьпечати чередованиерасположениястраниц ';

  	  // v8 системные перечисления - планировщик ==> class
  	  const v8_system_enums_sheduler =
  	  'отображениевремениэлементовпланировщика ';

  	  // v8 системные перечисления - форматированный документ ==> class
  	  const v8_system_enums_formatted_document =
  	  'типфайлаформатированногодокумента ';

  	  // v8 системные перечисления - запрос ==> class
  	  const v8_system_enums_query =
  	  'обходрезультатазапроса типзаписизапроса ';

  	  // v8 системные перечисления - построитель отчета ==> class
  	  const v8_system_enums_report_builder =
  	  'видзаполнениярасшифровкипостроителяотчета типдобавленияпредставлений типизмеренияпостроителяотчета типразмещенияитогов ';

  	  // v8 системные перечисления - работа с файлами ==> class
  	  const v8_system_enums_files =
  	  'доступкфайлу режимдиалогавыборафайла режимоткрытияфайла ';

  	  // v8 системные перечисления - построитель запроса ==> class
  	  const v8_system_enums_query_builder =
  	  'типизмеренияпостроителязапроса ';

  	  // v8 системные перечисления - анализ данных ==> class
  	  const v8_system_enums_data_analysis =
  	  'видданныханализа методкластеризации типединицыинтервалавременианализаданных типзаполнениятаблицырезультатаанализаданных '
  	  + 'типиспользованиячисловыхзначенийанализаданных типисточникаданныхпоискаассоциаций типколонкианализаданныхдереворешений '
  	  + 'типколонкианализаданныхкластеризация типколонкианализаданныхобщаястатистика типколонкианализаданныхпоискассоциаций '
  	  + 'типколонкианализаданныхпоискпоследовательностей типколонкимоделипрогноза типмерырасстоянияанализаданных '
  	  + 'типотсеченияправилассоциации типполяанализаданных типстандартизациианализаданных типупорядочиванияправилассоциациианализаданных '
  	  + 'типупорядочиванияшаблоновпоследовательностейанализаданных типупрощениядереварешений ';

  	  // v8 системные перечисления - xml, json, xs, dom, xdto, web-сервисы ==> class
  	  const v8_system_enums_xml_json_xs_dom_xdto_ws =
  	  'wsнаправлениепараметра вариантxpathxs вариантзаписидатыjson вариантпростоготипаxs видгруппымоделиxs видфасетаxdto '
  	  + 'действиепостроителяdom завершенностьпростоготипаxs завершенностьсоставноготипаxs завершенностьсхемыxs запрещенныеподстановкиxs '
  	  + 'исключениягруппподстановкиxs категорияиспользованияатрибутаxs категорияограниченияидентичностиxs категорияограниченияпространствименxs '
  	  + 'методнаследованияxs модельсодержимогоxs назначениетипаxml недопустимыеподстановкиxs обработкапробельныхсимволовxs обработкасодержимогоxs '
  	  + 'ограничениезначенияxs параметрыотбораузловdom переносстрокjson позициявдокументеdom пробельныесимволыxml типатрибутаxml типзначенияjson '
  	  + 'типканоническогоxml типкомпонентыxs типпроверкиxml типрезультатаdomxpath типузлаdom типузлаxml формаxml формапредставленияxs '
  	  + 'форматдатыjson экранированиесимволовjson ';

  	  // v8 системные перечисления - система компоновки данных ==> class
  	  const v8_system_enums_data_composition_system =
  	  'видсравнениякомпоновкиданных действиеобработкирасшифровкикомпоновкиданных направлениесортировкикомпоновкиданных '
  	  + 'расположениевложенныхэлементоврезультатакомпоновкиданных расположениеитоговкомпоновкиданных расположениегруппировкикомпоновкиданных '
  	  + 'расположениеполейгруппировкикомпоновкиданных расположениеполякомпоновкиданных расположениереквизитовкомпоновкиданных '
  	  + 'расположениересурсовкомпоновкиданных типбухгалтерскогоостаткакомпоновкиданных типвыводатекстакомпоновкиданных '
  	  + 'типгруппировкикомпоновкиданных типгруппыэлементовотборакомпоновкиданных типдополненияпериодакомпоновкиданных '
  	  + 'типзаголовкаполейкомпоновкиданных типмакетагруппировкикомпоновкиданных типмакетаобластикомпоновкиданных типостаткакомпоновкиданных '
  	  + 'типпериодакомпоновкиданных типразмещениятекстакомпоновкиданных типсвязинаборовданныхкомпоновкиданных типэлементарезультатакомпоновкиданных '
  	  + 'расположениелегендыдиаграммыкомпоновкиданных типпримененияотборакомпоновкиданных режимотображенияэлементанастройкикомпоновкиданных '
  	  + 'режимотображениянастроеккомпоновкиданных состояниеэлементанастройкикомпоновкиданных способвосстановлениянастроеккомпоновкиданных '
  	  + 'режимкомпоновкирезультата использованиепараметракомпоновкиданных автопозицияресурсовкомпоновкиданных '
  	  + 'вариантиспользованиягруппировкикомпоновкиданных расположениересурсоввдиаграммекомпоновкиданных фиксациякомпоновкиданных '
  	  + 'использованиеусловногооформлениякомпоновкиданных ';

  	  // v8 системные перечисления - почта ==> class
  	  const v8_system_enums_email =
  	  'важностьинтернетпочтовогосообщения обработкатекстаинтернетпочтовогосообщения способкодированияинтернетпочтовоговложения '
  	  + 'способкодированиянеasciiсимволовинтернетпочтовогосообщения типтекстапочтовогосообщения протоколинтернетпочты '
  	  + 'статусразборапочтовогосообщения ';

  	  // v8 системные перечисления - журнал регистрации ==> class
  	  const v8_system_enums_logbook =
  	  'режимтранзакциизаписижурналарегистрации статустранзакциизаписижурналарегистрации уровеньжурналарегистрации ';

  	  // v8 системные перечисления - криптография ==> class
  	  const v8_system_enums_cryptography =
  	  'расположениехранилищасертификатовкриптографии режимвключениясертификатовкриптографии режимпроверкисертификатакриптографии '
  	  + 'типхранилищасертификатовкриптографии ';

  	  // v8 системные перечисления - ZIP ==> class
  	  const v8_system_enums_zip =
  	  'кодировкаименфайловвzipфайле методсжатияzip методшифрованияzip режимвосстановленияпутейфайловzip режимобработкиподкаталоговzip '
  	  + 'режимсохраненияпутейzip уровеньсжатияzip ';

  	  // v8 системные перечисления -
  	  // Блокировка данных, Фоновые задания, Автоматизированное тестирование,
  	  // Доставляемые уведомления, Встроенные покупки, Интернет, Работа с двоичными данными ==> class
  	  const v8_system_enums_other =
  	  'звуковоеоповещение направлениепереходакстроке позициявпотоке порядокбайтов режимблокировкиданных режимуправленияблокировкойданных '
  	  + 'сервисвстроенныхпокупок состояниефоновогозадания типподписчикадоставляемыхуведомлений уровеньиспользованиязащищенногосоединенияftp ';

  	  // v8 системные перечисления - схема запроса ==> class
  	  const v8_system_enums_request_schema =
  	  'направлениепорядкасхемызапроса типдополненияпериодамисхемызапроса типконтрольнойточкисхемызапроса типобъединениясхемызапроса '
  	  + 'типпараметрадоступнойтаблицысхемызапроса типсоединениясхемызапроса ';

  	  // v8 системные перечисления - свойства объектов метаданных ==> class
  	  const v8_system_enums_properties_of_metadata_objects =
  	  'httpметод автоиспользованиеобщегореквизита автопрефиксномеразадачи вариантвстроенногоязыка видиерархии видрегистранакопления '
  	  + 'видтаблицывнешнегоисточникаданных записьдвиженийприпроведении заполнениепоследовательностей индексирование '
  	  + 'использованиебазыпланавидоврасчета использованиебыстроговыбора использованиеобщегореквизита использованиеподчинения '
  	  + 'использованиеполнотекстовогопоиска использованиеразделяемыхданныхобщегореквизита использованиереквизита '
  	  + 'назначениеиспользованияприложения назначениерасширенияконфигурации направлениепередачи обновлениепредопределенныхданных '
  	  + 'оперативноепроведение основноепредставлениевидарасчета основноепредставлениевидахарактеристики основноепредставлениезадачи '
  	  + 'основноепредставлениепланаобмена основноепредставлениесправочника основноепредставлениесчета перемещениеграницыприпроведении '
  	  + 'периодичностьномерабизнеспроцесса периодичностьномерадокумента периодичностьрегистрарасчета периодичностьрегистрасведений '
  	  + 'повторноеиспользованиевозвращаемыхзначений полнотекстовыйпоискпривводепостроке принадлежностьобъекта проведение '
  	  + 'разделениеаутентификацииобщегореквизита разделениеданныхобщегореквизита разделениерасширенийконфигурацииобщегореквизита '
  	  + 'режимавтонумерацииобъектов режимзаписирегистра режимиспользованиямодальности '
  	  + 'режимиспользованиясинхронныхвызововрасширенийплатформыивнешнихкомпонент режимповторногоиспользованиясеансов '
  	  + 'режимполученияданныхвыборапривводепостроке режимсовместимости режимсовместимостиинтерфейса '
  	  + 'режимуправленияблокировкойданныхпоумолчанию сериикодовпланавидовхарактеристик сериикодовпланасчетов '
  	  + 'сериикодовсправочника созданиепривводе способвыбора способпоискастрокипривводепостроке способредактирования '
  	  + 'типданныхтаблицывнешнегоисточникаданных типкодапланавидоврасчета типкодасправочника типмакета типномерабизнеспроцесса '
  	  + 'типномерадокумента типномеразадачи типформы удалениедвижений ';

  	  // v8 системные перечисления - разные ==> class
  	  const v8_system_enums_differents =
  	  'важностьпроблемыприменениярасширенияконфигурации вариантинтерфейсаклиентскогоприложения вариантмасштабаформклиентскогоприложения '
  	  + 'вариантосновногошрифтаклиентскогоприложения вариантстандартногопериода вариантстандартнойдатыначала видграницы видкартинки '
  	  + 'видотображенияполнотекстовогопоиска видрамки видсравнения видцвета видчисловогозначения видшрифта допустимаядлина допустимыйзнак '
  	  + 'использованиеbyteordermark использованиеметаданныхполнотекстовогопоиска источникрасширенийконфигурации клавиша кодвозвратадиалога '
  	  + 'кодировкаxbase кодировкатекста направлениепоиска направлениесортировки обновлениепредопределенныхданных обновлениеприизмененииданных '
  	  + 'отображениепанелиразделов проверказаполнения режимдиалогавопрос режимзапускаклиентскогоприложения режимокругления режимоткрытияформприложения '
  	  + 'режимполнотекстовогопоиска скоростьклиентскогосоединения состояниевнешнегоисточникаданных состояниеобновленияконфигурациибазыданных '
  	  + 'способвыборасертификатаwindows способкодированиястроки статуссообщения типвнешнейкомпоненты типплатформы типповеденияклавишиenter '
  	  + 'типэлементаинформацииовыполненииобновленияконфигурациибазыданных уровеньизоляциитранзакций хешфункция частидаты';

  	  // class: встроенные наборы значений, системные перечисления (содержат дочерние значения, обращения к которым через разыменование)
  	  const CLASS =
  	  v8_system_sets_of_values
  	  + v8_system_enums_interface
  	  + v8_system_enums_objects_properties
  	  + v8_system_enums_exchange_plans
  	  + v8_system_enums_tabular_document
  	  + v8_system_enums_sheduler
  	  + v8_system_enums_formatted_document
  	  + v8_system_enums_query
  	  + v8_system_enums_report_builder
  	  + v8_system_enums_files
  	  + v8_system_enums_query_builder
  	  + v8_system_enums_data_analysis
  	  + v8_system_enums_xml_json_xs_dom_xdto_ws
  	  + v8_system_enums_data_composition_system
  	  + v8_system_enums_email
  	  + v8_system_enums_logbook
  	  + v8_system_enums_cryptography
  	  + v8_system_enums_zip
  	  + v8_system_enums_other
  	  + v8_system_enums_request_schema
  	  + v8_system_enums_properties_of_metadata_objects
  	  + v8_system_enums_differents;

  	  // v8 общие объекты (у объектов есть конструктор, экземпляры создаются методом НОВЫЙ) ==> type
  	  const v8_shared_object =
  	  'comобъект ftpсоединение httpзапрос httpсервисответ httpсоединение wsопределения wsпрокси xbase анализданных аннотацияxs '
  	  + 'блокировкаданных буфердвоичныхданных включениеxs выражениекомпоновкиданных генераторслучайныхчисел географическаясхема '
  	  + 'географическиекоординаты графическаясхема группамоделиxs данныерасшифровкикомпоновкиданных двоичныеданные дендрограмма '
  	  + 'диаграмма диаграммаганта диалогвыборафайла диалогвыборацвета диалогвыборашрифта диалограсписаниярегламентногозадания '
  	  + 'диалогредактированиястандартногопериода диапазон документdom документhtml документацияxs доставляемоеуведомление '
  	  + 'записьdom записьfastinfoset записьhtml записьjson записьxml записьzipфайла записьданных записьтекста записьузловdom '
  	  + 'запрос защищенноесоединениеopenssl значенияполейрасшифровкикомпоновкиданных извлечениетекста импортxs интернетпочта '
  	  + 'интернетпочтовоесообщение интернетпочтовыйпрофиль интернетпрокси интернетсоединение информациядляприложенияxs '
  	  + 'использованиеатрибутаxs использованиесобытияжурналарегистрации источникдоступныхнастроеккомпоновкиданных '
  	  + 'итераторузловdom картинка квалификаторыдаты квалификаторыдвоичныхданных квалификаторыстроки квалификаторычисла '
  	  + 'компоновщикмакетакомпоновкиданных компоновщикнастроеккомпоновкиданных конструктормакетаоформлениякомпоновкиданных '
  	  + 'конструкторнастроеккомпоновкиданных конструкторформатнойстроки линия макеткомпоновкиданных макетобластикомпоновкиданных '
  	  + 'макетоформлениякомпоновкиданных маскаxs менеджеркриптографии наборсхемxml настройкикомпоновкиданных настройкисериализацииjson '
  	  + 'обработкакартинок обработкарасшифровкикомпоновкиданных обходдереваdom объявлениеатрибутаxs объявлениенотацииxs '
  	  + 'объявлениеэлементаxs описаниеиспользованиясобытиядоступжурналарегистрации '
  	  + 'описаниеиспользованиясобытияотказвдоступежурналарегистрации описаниеобработкирасшифровкикомпоновкиданных '
  	  + 'описаниепередаваемогофайла описаниетипов определениегруппыатрибутовxs определениегруппымоделиxs '
  	  + 'определениеограниченияидентичностиxs определениепростоготипаxs определениесоставноготипаxs определениетипадокументаdom '
  	  + 'определенияxpathxs отборкомпоновкиданных пакетотображаемыхдокументов параметрвыбора параметркомпоновкиданных '
  	  + 'параметрызаписиjson параметрызаписиxml параметрычтенияxml переопределениеxs планировщик полеанализаданных '
  	  + 'полекомпоновкиданных построительdom построительзапроса построительотчета построительотчетаанализаданных '
  	  + 'построительсхемxml поток потоквпамяти почта почтовоесообщение преобразованиеxsl преобразованиекканоническомуxml '
  	  + 'процессорвыводарезультатакомпоновкиданныхвколлекциюзначений процессорвыводарезультатакомпоновкиданныхвтабличныйдокумент '
  	  + 'процессоркомпоновкиданных разыменовательпространствименdom рамка расписаниерегламентногозадания расширенноеимяxml '
  	  + 'результатчтенияданных своднаядиаграмма связьпараметравыбора связьпотипу связьпотипукомпоновкиданных сериализаторxdto '
  	  + 'сертификатклиентаwindows сертификатклиентафайл сертификаткриптографии сертификатыудостоверяющихцентровwindows '
  	  + 'сертификатыудостоверяющихцентровфайл сжатиеданных системнаяинформация сообщениепользователю сочетаниеклавиш '
  	  + 'сравнениезначений стандартнаядатаначала стандартныйпериод схемаxml схемакомпоновкиданных табличныйдокумент '
  	  + 'текстовыйдокумент тестируемоеприложение типданныхxml уникальныйидентификатор фабрикаxdto файл файловыйпоток '
  	  + 'фасетдлиныxs фасетколичестваразрядовдробнойчастиxs фасетмаксимальноговключающегозначенияxs '
  	  + 'фасетмаксимальногоисключающегозначенияxs фасетмаксимальнойдлиныxs фасетминимальноговключающегозначенияxs '
  	  + 'фасетминимальногоисключающегозначенияxs фасетминимальнойдлиныxs фасетобразцаxs фасетобщегоколичестваразрядовxs '
  	  + 'фасетперечисленияxs фасетпробельныхсимволовxs фильтрузловdom форматированнаястрока форматированныйдокумент '
  	  + 'фрагментxs хешированиеданных хранилищезначения цвет чтениеfastinfoset чтениеhtml чтениеjson чтениеxml чтениеzipфайла '
  	  + 'чтениеданных чтениетекста чтениеузловdom шрифт элементрезультатакомпоновкиданных ';

  	  // v8 универсальные коллекции значений ==> type
  	  const v8_universal_collection =
  	  'comsafearray деревозначений массив соответствие списокзначений структура таблицазначений фиксированнаяструктура '
  	  + 'фиксированноесоответствие фиксированныймассив ';

  	  // type : встроенные типы
  	  const TYPE =
  	  v8_shared_object
  	  + v8_universal_collection;

  	  // literal : примитивные типы
  	  const LITERAL = 'null истина ложь неопределено';

  	  // number : числа
  	  const NUMBERS = hljs.inherit(hljs.NUMBER_MODE);

  	  // string : строки
  	  const STRINGS = {
  	    className: 'string',
  	    begin: '"|\\|',
  	    end: '"|$',
  	    contains: [ { begin: '""' } ]
  	  };

  	  // number : даты
  	  const DATE = {
  	    begin: "'",
  	    end: "'",
  	    excludeBegin: true,
  	    excludeEnd: true,
  	    contains: [
  	      {
  	        className: 'number',
  	        begin: '\\d{4}([\\.\\\\/:-]?\\d{2}){0,5}'
  	      }
  	    ]
  	  };

  	  // comment : комментарии
  	  const COMMENTS = hljs.inherit(hljs.C_LINE_COMMENT_MODE);

  	  // meta : инструкции препроцессора, директивы компиляции
  	  const META = {
  	    className: 'meta',

  	    begin: '#|&',
  	    end: '$',
  	    keywords: {
  	      $pattern: UNDERSCORE_IDENT_RE,
  	      keyword: KEYWORD + METAKEYWORD
  	    },
  	    contains: [ COMMENTS ]
  	  };

  	  // symbol : метка goto
  	  const SYMBOL = {
  	    className: 'symbol',
  	    begin: '~',
  	    end: ';|:',
  	    excludeEnd: true
  	  };

  	  // function : объявление процедур и функций
  	  const FUNCTION = {
  	    className: 'function',
  	    variants: [
  	      {
  	        begin: 'процедура|функция',
  	        end: '\\)',
  	        keywords: 'процедура функция'
  	      },
  	      {
  	        begin: 'конецпроцедуры|конецфункции',
  	        keywords: 'конецпроцедуры конецфункции'
  	      }
  	    ],
  	    contains: [
  	      {
  	        begin: '\\(',
  	        end: '\\)',
  	        endsParent: true,
  	        contains: [
  	          {
  	            className: 'params',
  	            begin: UNDERSCORE_IDENT_RE,
  	            end: ',',
  	            excludeEnd: true,
  	            endsWithParent: true,
  	            keywords: {
  	              $pattern: UNDERSCORE_IDENT_RE,
  	              keyword: 'знач',
  	              literal: LITERAL
  	            },
  	            contains: [
  	              NUMBERS,
  	              STRINGS,
  	              DATE
  	            ]
  	          },
  	          COMMENTS
  	        ]
  	      },
  	      hljs.inherit(hljs.TITLE_MODE, { begin: UNDERSCORE_IDENT_RE })
  	    ]
  	  };

  	  return {
  	    name: '1C:Enterprise',
  	    case_insensitive: true,
  	    keywords: {
  	      $pattern: UNDERSCORE_IDENT_RE,
  	      keyword: KEYWORD,
  	      built_in: BUILTIN,
  	      class: CLASS,
  	      type: TYPE,
  	      literal: LITERAL
  	    },
  	    contains: [
  	      META,
  	      FUNCTION,
  	      COMMENTS,
  	      SYMBOL,
  	      NUMBERS,
  	      STRINGS,
  	      DATE
  	    ]
  	  };
  	}

  	_1c_1 = _1c;
  	return _1c_1;
  }

  /*
  Language: Augmented Backus-Naur Form
  Author: Alex McKibben <alex@nullscope.net>
  Website: https://tools.ietf.org/html/rfc5234
  Audit: 2020
  */

  var abnf_1;
  var hasRequiredAbnf;

  function requireAbnf () {
  	if (hasRequiredAbnf) return abnf_1;
  	hasRequiredAbnf = 1;
  	/** @type LanguageFn */
  	function abnf(hljs) {
  	  const regex = hljs.regex;
  	  const IDENT = /^[a-zA-Z][a-zA-Z0-9-]*/;

  	  const KEYWORDS = [
  	    "ALPHA",
  	    "BIT",
  	    "CHAR",
  	    "CR",
  	    "CRLF",
  	    "CTL",
  	    "DIGIT",
  	    "DQUOTE",
  	    "HEXDIG",
  	    "HTAB",
  	    "LF",
  	    "LWSP",
  	    "OCTET",
  	    "SP",
  	    "VCHAR",
  	    "WSP"
  	  ];

  	  const COMMENT = hljs.COMMENT(/;/, /$/);

  	  const TERMINAL_BINARY = {
  	    scope: "symbol",
  	    match: /%b[0-1]+(-[0-1]+|(\.[0-1]+)+)?/
  	  };

  	  const TERMINAL_DECIMAL = {
  	    scope: "symbol",
  	    match: /%d[0-9]+(-[0-9]+|(\.[0-9]+)+)?/
  	  };

  	  const TERMINAL_HEXADECIMAL = {
  	    scope: "symbol",
  	    match: /%x[0-9A-F]+(-[0-9A-F]+|(\.[0-9A-F]+)+)?/
  	  };

  	  const CASE_SENSITIVITY = {
  	    scope: "symbol",
  	    match: /%[si](?=".*")/
  	  };

  	  const RULE_DECLARATION = {
  	    scope: "attribute",
  	    match: regex.concat(IDENT, /(?=\s*=)/)
  	  };

  	  const ASSIGNMENT = {
  	    scope: "operator",
  	    match: /=\/?/
  	  };

  	  return {
  	    name: 'Augmented Backus-Naur Form',
  	    illegal: /[!@#$^&',?+~`|:]/,
  	    keywords: KEYWORDS,
  	    contains: [
  	      ASSIGNMENT,
  	      RULE_DECLARATION,
  	      COMMENT,
  	      TERMINAL_BINARY,
  	      TERMINAL_DECIMAL,
  	      TERMINAL_HEXADECIMAL,
  	      CASE_SENSITIVITY,
  	      hljs.QUOTE_STRING_MODE,
  	      hljs.NUMBER_MODE
  	    ]
  	  };
  	}

  	abnf_1 = abnf;
  	return abnf_1;
  }

  /*
   Language: Apache Access Log
   Author: Oleg Efimov <efimovov@gmail.com>
   Description: Apache/Nginx Access Logs
   Website: https://httpd.apache.org/docs/2.4/logs.html#accesslog
   Category: web, logs
   Audit: 2020
   */

  var accesslog_1;
  var hasRequiredAccesslog;

  function requireAccesslog () {
  	if (hasRequiredAccesslog) return accesslog_1;
  	hasRequiredAccesslog = 1;
  	/** @type LanguageFn */
  	function accesslog(hljs) {
  	  const regex = hljs.regex;
  	  // https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods
  	  const HTTP_VERBS = [
  	    "GET",
  	    "POST",
  	    "HEAD",
  	    "PUT",
  	    "DELETE",
  	    "CONNECT",
  	    "OPTIONS",
  	    "PATCH",
  	    "TRACE"
  	  ];
  	  return {
  	    name: 'Apache Access Log',
  	    contains: [
  	      // IP
  	      {
  	        className: 'number',
  	        begin: /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}(:\d{1,5})?\b/,
  	        relevance: 5
  	      },
  	      // Other numbers
  	      {
  	        className: 'number',
  	        begin: /\b\d+\b/,
  	        relevance: 0
  	      },
  	      // Requests
  	      {
  	        className: 'string',
  	        begin: regex.concat(/"/, regex.either(...HTTP_VERBS)),
  	        end: /"/,
  	        keywords: HTTP_VERBS,
  	        illegal: /\n/,
  	        relevance: 5,
  	        contains: [
  	          {
  	            begin: /HTTP\/[12]\.\d'/,
  	            relevance: 5
  	          }
  	        ]
  	      },
  	      // Dates
  	      {
  	        className: 'string',
  	        // dates must have a certain length, this prevents matching
  	        // simple array accesses a[123] and [] and other common patterns
  	        // found in other languages
  	        begin: /\[\d[^\]\n]{8,}\]/,
  	        illegal: /\n/,
  	        relevance: 1
  	      },
  	      {
  	        className: 'string',
  	        begin: /\[/,
  	        end: /\]/,
  	        illegal: /\n/,
  	        relevance: 0
  	      },
  	      // User agent / relevance boost
  	      {
  	        className: 'string',
  	        begin: /"Mozilla\/\d\.\d \(/,
  	        end: /"/,
  	        illegal: /\n/,
  	        relevance: 3
  	      },
  	      // Strings
  	      {
  	        className: 'string',
  	        begin: /"/,
  	        end: /"/,
  	        illegal: /\n/,
  	        relevance: 0
  	      }
  	    ]
  	  };
  	}

  	accesslog_1 = accesslog;
  	return accesslog_1;
  }

  /*
  Language: ActionScript
  Author: Alexander Myadzel <myadzel@gmail.com>
  Category: scripting
  Audit: 2020
  */

  var actionscript_1;
  var hasRequiredActionscript;

  function requireActionscript () {
  	if (hasRequiredActionscript) return actionscript_1;
  	hasRequiredActionscript = 1;
  	/** @type LanguageFn */
  	function actionscript(hljs) {
  	  const regex = hljs.regex;
  	  const IDENT_RE = /[a-zA-Z_$][a-zA-Z0-9_$]*/;
  	  const PKG_NAME_RE = regex.concat(
  	    IDENT_RE,
  	    regex.concat("(\\.", IDENT_RE, ")*")
  	  );
  	  const IDENT_FUNC_RETURN_TYPE_RE = /([*]|[a-zA-Z_$][a-zA-Z0-9_$]*)/;

  	  const AS3_REST_ARG_MODE = {
  	    className: 'rest_arg',
  	    begin: /[.]{3}/,
  	    end: IDENT_RE,
  	    relevance: 10
  	  };

  	  const KEYWORDS = [
  	    "as",
  	    "break",
  	    "case",
  	    "catch",
  	    "class",
  	    "const",
  	    "continue",
  	    "default",
  	    "delete",
  	    "do",
  	    "dynamic",
  	    "each",
  	    "else",
  	    "extends",
  	    "final",
  	    "finally",
  	    "for",
  	    "function",
  	    "get",
  	    "if",
  	    "implements",
  	    "import",
  	    "in",
  	    "include",
  	    "instanceof",
  	    "interface",
  	    "internal",
  	    "is",
  	    "namespace",
  	    "native",
  	    "new",
  	    "override",
  	    "package",
  	    "private",
  	    "protected",
  	    "public",
  	    "return",
  	    "set",
  	    "static",
  	    "super",
  	    "switch",
  	    "this",
  	    "throw",
  	    "try",
  	    "typeof",
  	    "use",
  	    "var",
  	    "void",
  	    "while",
  	    "with"
  	  ];
  	  const LITERALS = [
  	    "true",
  	    "false",
  	    "null",
  	    "undefined"
  	  ];

  	  return {
  	    name: 'ActionScript',
  	    aliases: [ 'as' ],
  	    keywords: {
  	      keyword: KEYWORDS,
  	      literal: LITERALS
  	    },
  	    contains: [
  	      hljs.APOS_STRING_MODE,
  	      hljs.QUOTE_STRING_MODE,
  	      hljs.C_LINE_COMMENT_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE,
  	      hljs.C_NUMBER_MODE,
  	      {
  	        match: [
  	          /\bpackage/,
  	          /\s+/,
  	          PKG_NAME_RE
  	        ],
  	        className: {
  	          1: "keyword",
  	          3: "title.class"
  	        }
  	      },
  	      {
  	        match: [
  	          /\b(?:class|interface|extends|implements)/,
  	          /\s+/,
  	          IDENT_RE
  	        ],
  	        className: {
  	          1: "keyword",
  	          3: "title.class"
  	        }
  	      },
  	      {
  	        className: 'meta',
  	        beginKeywords: 'import include',
  	        end: /;/,
  	        keywords: { keyword: 'import include' }
  	      },
  	      {
  	        beginKeywords: 'function',
  	        end: /[{;]/,
  	        excludeEnd: true,
  	        illegal: /\S/,
  	        contains: [
  	          hljs.inherit(hljs.TITLE_MODE, { className: "title.function" }),
  	          {
  	            className: 'params',
  	            begin: /\(/,
  	            end: /\)/,
  	            contains: [
  	              hljs.APOS_STRING_MODE,
  	              hljs.QUOTE_STRING_MODE,
  	              hljs.C_LINE_COMMENT_MODE,
  	              hljs.C_BLOCK_COMMENT_MODE,
  	              AS3_REST_ARG_MODE
  	            ]
  	          },
  	          { begin: regex.concat(/:\s*/, IDENT_FUNC_RETURN_TYPE_RE) }
  	        ]
  	      },
  	      hljs.METHOD_GUARD
  	    ],
  	    illegal: /#/
  	  };
  	}

  	actionscript_1 = actionscript;
  	return actionscript_1;
  }

  /*
  Language: Ada
  Author: Lars Schulna <kartoffelbrei.mit.muskatnuss@gmail.org>
  Description: Ada is a general-purpose programming language that has great support for saftey critical and real-time applications.
               It has been developed by the DoD and thus has been used in military and safety-critical applications (like civil aviation).
               The first version appeared in the 80s, but it's still actively developed today with
               the newest standard being Ada2012.
  */

  var ada_1;
  var hasRequiredAda;

  function requireAda () {
  	if (hasRequiredAda) return ada_1;
  	hasRequiredAda = 1;
  	// We try to support full Ada2012
  	//
  	// We highlight all appearances of types, keywords, literals (string, char, number, bool)
  	// and titles (user defined function/procedure/package)
  	// CSS classes are set accordingly
  	//
  	// Languages causing problems for language detection:
  	// xml (broken by Foo : Bar type), elm (broken by Foo : Bar type), vbscript-html (broken by body keyword)
  	// sql (ada default.txt has a lot of sql keywords)

  	/** @type LanguageFn */
  	function ada(hljs) {
  	  // Regular expression for Ada numeric literals.
  	  // stolen form the VHDL highlighter

  	  // Decimal literal:
  	  const INTEGER_RE = '\\d(_|\\d)*';
  	  const EXPONENT_RE = '[eE][-+]?' + INTEGER_RE;
  	  const DECIMAL_LITERAL_RE = INTEGER_RE + '(\\.' + INTEGER_RE + ')?' + '(' + EXPONENT_RE + ')?';

  	  // Based literal:
  	  const BASED_INTEGER_RE = '\\w+';
  	  const BASED_LITERAL_RE = INTEGER_RE + '#' + BASED_INTEGER_RE + '(\\.' + BASED_INTEGER_RE + ')?' + '#' + '(' + EXPONENT_RE + ')?';

  	  const NUMBER_RE = '\\b(' + BASED_LITERAL_RE + '|' + DECIMAL_LITERAL_RE + ')';

  	  // Identifier regex
  	  const ID_REGEX = '[A-Za-z](_?[A-Za-z0-9.])*';

  	  // bad chars, only allowed in literals
  	  const BAD_CHARS = `[]\\{\\}%#'"`;

  	  // Ada doesn't have block comments, only line comments
  	  const COMMENTS = hljs.COMMENT('--', '$');

  	  // variable declarations of the form
  	  // Foo : Bar := Baz;
  	  // where only Bar will be highlighted
  	  const VAR_DECLS = {
  	    // TODO: These spaces are not required by the Ada syntax
  	    // however, I have yet to see handwritten Ada code where
  	    // someone does not put spaces around :
  	    begin: '\\s+:\\s+',
  	    end: '\\s*(:=|;|\\)|=>|$)',
  	    // endsWithParent: true,
  	    // returnBegin: true,
  	    illegal: BAD_CHARS,
  	    contains: [
  	      {
  	        // workaround to avoid highlighting
  	        // named loops and declare blocks
  	        beginKeywords: 'loop for declare others',
  	        endsParent: true
  	      },
  	      {
  	        // properly highlight all modifiers
  	        className: 'keyword',
  	        beginKeywords: 'not null constant access function procedure in out aliased exception'
  	      },
  	      {
  	        className: 'type',
  	        begin: ID_REGEX,
  	        endsParent: true,
  	        relevance: 0
  	      }
  	    ]
  	  };

  	  const KEYWORDS = [
  	    "abort",
  	    "else",
  	    "new",
  	    "return",
  	    "abs",
  	    "elsif",
  	    "not",
  	    "reverse",
  	    "abstract",
  	    "end",
  	    "accept",
  	    "entry",
  	    "select",
  	    "access",
  	    "exception",
  	    "of",
  	    "separate",
  	    "aliased",
  	    "exit",
  	    "or",
  	    "some",
  	    "all",
  	    "others",
  	    "subtype",
  	    "and",
  	    "for",
  	    "out",
  	    "synchronized",
  	    "array",
  	    "function",
  	    "overriding",
  	    "at",
  	    "tagged",
  	    "generic",
  	    "package",
  	    "task",
  	    "begin",
  	    "goto",
  	    "pragma",
  	    "terminate",
  	    "body",
  	    "private",
  	    "then",
  	    "if",
  	    "procedure",
  	    "type",
  	    "case",
  	    "in",
  	    "protected",
  	    "constant",
  	    "interface",
  	    "is",
  	    "raise",
  	    "use",
  	    "declare",
  	    "range",
  	    "delay",
  	    "limited",
  	    "record",
  	    "when",
  	    "delta",
  	    "loop",
  	    "rem",
  	    "while",
  	    "digits",
  	    "renames",
  	    "with",
  	    "do",
  	    "mod",
  	    "requeue",
  	    "xor"
  	  ];

  	  return {
  	    name: 'Ada',
  	    case_insensitive: true,
  	    keywords: {
  	      keyword: KEYWORDS,
  	      literal: [
  	        "True",
  	        "False"
  	      ]
  	    },
  	    contains: [
  	      COMMENTS,
  	      // strings "foobar"
  	      {
  	        className: 'string',
  	        begin: /"/,
  	        end: /"/,
  	        contains: [
  	          {
  	            begin: /""/,
  	            relevance: 0
  	          }
  	        ]
  	      },
  	      // characters ''
  	      {
  	        // character literals always contain one char
  	        className: 'string',
  	        begin: /'.'/
  	      },
  	      {
  	        // number literals
  	        className: 'number',
  	        begin: NUMBER_RE,
  	        relevance: 0
  	      },
  	      {
  	        // Attributes
  	        className: 'symbol',
  	        begin: "'" + ID_REGEX
  	      },
  	      {
  	        // package definition, maybe inside generic
  	        className: 'title',
  	        begin: '(\\bwith\\s+)?(\\bprivate\\s+)?\\bpackage\\s+(\\bbody\\s+)?',
  	        end: '(is|$)',
  	        keywords: 'package body',
  	        excludeBegin: true,
  	        excludeEnd: true,
  	        illegal: BAD_CHARS
  	      },
  	      {
  	        // function/procedure declaration/definition
  	        // maybe inside generic
  	        begin: '(\\b(with|overriding)\\s+)?\\b(function|procedure)\\s+',
  	        end: '(\\bis|\\bwith|\\brenames|\\)\\s*;)',
  	        keywords: 'overriding function procedure with is renames return',
  	        // we need to re-match the 'function' keyword, so that
  	        // the title mode below matches only exactly once
  	        returnBegin: true,
  	        contains:
  	                [
  	                  COMMENTS,
  	                  {
  	                    // name of the function/procedure
  	                    className: 'title',
  	                    begin: '(\\bwith\\s+)?\\b(function|procedure)\\s+',
  	                    end: '(\\(|\\s+|$)',
  	                    excludeBegin: true,
  	                    excludeEnd: true,
  	                    illegal: BAD_CHARS
  	                  },
  	                  // 'self'
  	                  // // parameter types
  	                  VAR_DECLS,
  	                  {
  	                    // return type
  	                    className: 'type',
  	                    begin: '\\breturn\\s+',
  	                    end: '(\\s+|;|$)',
  	                    keywords: 'return',
  	                    excludeBegin: true,
  	                    excludeEnd: true,
  	                    // we are done with functions
  	                    endsParent: true,
  	                    illegal: BAD_CHARS

  	                  }
  	                ]
  	      },
  	      {
  	        // new type declarations
  	        // maybe inside generic
  	        className: 'type',
  	        begin: '\\b(sub)?type\\s+',
  	        end: '\\s+',
  	        keywords: 'type',
  	        excludeBegin: true,
  	        illegal: BAD_CHARS
  	      },

  	      // see comment above the definition
  	      VAR_DECLS

  	      // no markup
  	      // relevance boosters for small snippets
  	      // {begin: '\\s*=>\\s*'},
  	      // {begin: '\\s*:=\\s*'},
  	      // {begin: '\\s+:=\\s+'},
  	    ]
  	  };
  	}

  	ada_1 = ada;
  	return ada_1;
  }

  /*
  Language: AngelScript
  Author: Melissa Geels <melissa@nimble.tools>
  Category: scripting
  Website: https://www.angelcode.com/angelscript/
  */

  var angelscript_1;
  var hasRequiredAngelscript;

  function requireAngelscript () {
  	if (hasRequiredAngelscript) return angelscript_1;
  	hasRequiredAngelscript = 1;
  	/** @type LanguageFn */
  	function angelscript(hljs) {
  	  const builtInTypeMode = {
  	    className: 'built_in',
  	    begin: '\\b(void|bool|int8|int16|int32|int64|int|uint8|uint16|uint32|uint64|uint|string|ref|array|double|float|auto|dictionary)'
  	  };

  	  const objectHandleMode = {
  	    className: 'symbol',
  	    begin: '[a-zA-Z0-9_]+@'
  	  };

  	  const genericMode = {
  	    className: 'keyword',
  	    begin: '<',
  	    end: '>',
  	    contains: [
  	      builtInTypeMode,
  	      objectHandleMode
  	    ]
  	  };

  	  builtInTypeMode.contains = [ genericMode ];
  	  objectHandleMode.contains = [ genericMode ];

  	  const KEYWORDS = [
  	    "for",
  	    "in|0",
  	    "break",
  	    "continue",
  	    "while",
  	    "do|0",
  	    "return",
  	    "if",
  	    "else",
  	    "case",
  	    "switch",
  	    "namespace",
  	    "is",
  	    "cast",
  	    "or",
  	    "and",
  	    "xor",
  	    "not",
  	    "get|0",
  	    "in",
  	    "inout|10",
  	    "out",
  	    "override",
  	    "set|0",
  	    "private",
  	    "public",
  	    "const",
  	    "default|0",
  	    "final",
  	    "shared",
  	    "external",
  	    "mixin|10",
  	    "enum",
  	    "typedef",
  	    "funcdef",
  	    "this",
  	    "super",
  	    "import",
  	    "from",
  	    "interface",
  	    "abstract|0",
  	    "try",
  	    "catch",
  	    "protected",
  	    "explicit",
  	    "property"
  	  ];

  	  return {
  	    name: 'AngelScript',
  	    aliases: [ 'asc' ],

  	    keywords: KEYWORDS,

  	    // avoid close detection with C# and JS
  	    illegal: '(^using\\s+[A-Za-z0-9_\\.]+;$|\\bfunction\\s*[^\\(])',

  	    contains: [
  	      { // 'strings'
  	        className: 'string',
  	        begin: '\'',
  	        end: '\'',
  	        illegal: '\\n',
  	        contains: [ hljs.BACKSLASH_ESCAPE ],
  	        relevance: 0
  	      },

  	      // """heredoc strings"""
  	      {
  	        className: 'string',
  	        begin: '"""',
  	        end: '"""'
  	      },

  	      { // "strings"
  	        className: 'string',
  	        begin: '"',
  	        end: '"',
  	        illegal: '\\n',
  	        contains: [ hljs.BACKSLASH_ESCAPE ],
  	        relevance: 0
  	      },

  	      hljs.C_LINE_COMMENT_MODE, // single-line comments
  	      hljs.C_BLOCK_COMMENT_MODE, // comment blocks

  	      { // metadata
  	        className: 'string',
  	        begin: '^\\s*\\[',
  	        end: '\\]'
  	      },

  	      { // interface or namespace declaration
  	        beginKeywords: 'interface namespace',
  	        end: /\{/,
  	        illegal: '[;.\\-]',
  	        contains: [
  	          { // interface or namespace name
  	            className: 'symbol',
  	            begin: '[a-zA-Z0-9_]+'
  	          }
  	        ]
  	      },

  	      { // class declaration
  	        beginKeywords: 'class',
  	        end: /\{/,
  	        illegal: '[;.\\-]',
  	        contains: [
  	          { // class name
  	            className: 'symbol',
  	            begin: '[a-zA-Z0-9_]+',
  	            contains: [
  	              {
  	                begin: '[:,]\\s*',
  	                contains: [
  	                  {
  	                    className: 'symbol',
  	                    begin: '[a-zA-Z0-9_]+'
  	                  }
  	                ]
  	              }
  	            ]
  	          }
  	        ]
  	      },

  	      builtInTypeMode, // built-in types
  	      objectHandleMode, // object handles

  	      { // literals
  	        className: 'literal',
  	        begin: '\\b(null|true|false)'
  	      },

  	      { // numbers
  	        className: 'number',
  	        relevance: 0,
  	        begin: '(-?)(\\b0[xXbBoOdD][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?f?|\\.\\d+f?)([eE][-+]?\\d+f?)?)'
  	      }
  	    ]
  	  };
  	}

  	angelscript_1 = angelscript;
  	return angelscript_1;
  }

  /*
  Language: Apache config
  Author: Ruslan Keba <rukeba@gmail.com>
  Contributors: Ivan Sagalaev <maniac@softwaremaniacs.org>
  Website: https://httpd.apache.org
  Description: language definition for Apache configuration files (httpd.conf & .htaccess)
  Category: config, web
  Audit: 2020
  */

  var apache_1;
  var hasRequiredApache;

  function requireApache () {
  	if (hasRequiredApache) return apache_1;
  	hasRequiredApache = 1;
  	/** @type LanguageFn */
  	function apache(hljs) {
  	  const NUMBER_REF = {
  	    className: 'number',
  	    begin: /[$%]\d+/
  	  };
  	  const NUMBER = {
  	    className: 'number',
  	    begin: /\b\d+/
  	  };
  	  const IP_ADDRESS = {
  	    className: "number",
  	    begin: /\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}(:\d{1,5})?/
  	  };
  	  const PORT_NUMBER = {
  	    className: "number",
  	    begin: /:\d{1,5}/
  	  };
  	  return {
  	    name: 'Apache config',
  	    aliases: [ 'apacheconf' ],
  	    case_insensitive: true,
  	    contains: [
  	      hljs.HASH_COMMENT_MODE,
  	      {
  	        className: 'section',
  	        begin: /<\/?/,
  	        end: />/,
  	        contains: [
  	          IP_ADDRESS,
  	          PORT_NUMBER,
  	          // low relevance prevents us from claming XML/HTML where this rule would
  	          // match strings inside of XML tags
  	          hljs.inherit(hljs.QUOTE_STRING_MODE, { relevance: 0 })
  	        ]
  	      },
  	      {
  	        className: 'attribute',
  	        begin: /\w+/,
  	        relevance: 0,
  	        // keywords aren’t needed for highlighting per se, they only boost relevance
  	        // for a very generally defined mode (starts with a word, ends with line-end
  	        keywords: { _: [
  	          "order",
  	          "deny",
  	          "allow",
  	          "setenv",
  	          "rewriterule",
  	          "rewriteengine",
  	          "rewritecond",
  	          "documentroot",
  	          "sethandler",
  	          "errordocument",
  	          "loadmodule",
  	          "options",
  	          "header",
  	          "listen",
  	          "serverroot",
  	          "servername"
  	        ] },
  	        starts: {
  	          end: /$/,
  	          relevance: 0,
  	          keywords: { literal: 'on off all deny allow' },
  	          contains: [
  	            {
  	              className: 'meta',
  	              begin: /\s\[/,
  	              end: /\]$/
  	            },
  	            {
  	              className: 'variable',
  	              begin: /[\$%]\{/,
  	              end: /\}/,
  	              contains: [
  	                'self',
  	                NUMBER_REF
  	              ]
  	            },
  	            IP_ADDRESS,
  	            NUMBER,
  	            hljs.QUOTE_STRING_MODE
  	          ]
  	        }
  	      }
  	    ],
  	    illegal: /\S/
  	  };
  	}

  	apache_1 = apache;
  	return apache_1;
  }

  /*
  Language: AppleScript
  Authors: Nathan Grigg <nathan@nathanamy.org>, Dr. Drang <drdrang@gmail.com>
  Category: scripting
  Website: https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/introduction/ASLR_intro.html
  Audit: 2020
  */

  var applescript_1;
  var hasRequiredApplescript;

  function requireApplescript () {
  	if (hasRequiredApplescript) return applescript_1;
  	hasRequiredApplescript = 1;
  	/** @type LanguageFn */
  	function applescript(hljs) {
  	  const regex = hljs.regex;
  	  const STRING = hljs.inherit(
  	    hljs.QUOTE_STRING_MODE, { illegal: null });
  	  const PARAMS = {
  	    className: 'params',
  	    begin: /\(/,
  	    end: /\)/,
  	    contains: [
  	      'self',
  	      hljs.C_NUMBER_MODE,
  	      STRING
  	    ]
  	  };
  	  const COMMENT_MODE_1 = hljs.COMMENT(/--/, /$/);
  	  const COMMENT_MODE_2 = hljs.COMMENT(
  	    /\(\*/,
  	    /\*\)/,
  	    { contains: [
  	      'self', // allow nesting
  	      COMMENT_MODE_1
  	    ] }
  	  );
  	  const COMMENTS = [
  	    COMMENT_MODE_1,
  	    COMMENT_MODE_2,
  	    hljs.HASH_COMMENT_MODE
  	  ];

  	  const KEYWORD_PATTERNS = [
  	    /apart from/,
  	    /aside from/,
  	    /instead of/,
  	    /out of/,
  	    /greater than/,
  	    /isn't|(doesn't|does not) (equal|come before|come after|contain)/,
  	    /(greater|less) than( or equal)?/,
  	    /(starts?|ends|begins?) with/,
  	    /contained by/,
  	    /comes (before|after)/,
  	    /a (ref|reference)/,
  	    /POSIX (file|path)/,
  	    /(date|time) string/,
  	    /quoted form/
  	  ];

  	  const BUILT_IN_PATTERNS = [
  	    /clipboard info/,
  	    /the clipboard/,
  	    /info for/,
  	    /list (disks|folder)/,
  	    /mount volume/,
  	    /path to/,
  	    /(close|open for) access/,
  	    /(get|set) eof/,
  	    /current date/,
  	    /do shell script/,
  	    /get volume settings/,
  	    /random number/,
  	    /set volume/,
  	    /system attribute/,
  	    /system info/,
  	    /time to GMT/,
  	    /(load|run|store) script/,
  	    /scripting components/,
  	    /ASCII (character|number)/,
  	    /localized string/,
  	    /choose (application|color|file|file name|folder|from list|remote application|URL)/,
  	    /display (alert|dialog)/
  	  ];

  	  return {
  	    name: 'AppleScript',
  	    aliases: [ 'osascript' ],
  	    keywords: {
  	      keyword:
  	        'about above after against and around as at back before beginning '
  	        + 'behind below beneath beside between but by considering '
  	        + 'contain contains continue copy div does eighth else end equal '
  	        + 'equals error every exit fifth first for fourth from front '
  	        + 'get given global if ignoring in into is it its last local me '
  	        + 'middle mod my ninth not of on onto or over prop property put ref '
  	        + 'reference repeat returning script second set seventh since '
  	        + 'sixth some tell tenth that the|0 then third through thru '
  	        + 'timeout times to transaction try until where while whose with '
  	        + 'without',
  	      literal:
  	        'AppleScript false linefeed return pi quote result space tab true',
  	      built_in:
  	        'alias application boolean class constant date file integer list '
  	        + 'number real record string text '
  	        + 'activate beep count delay launch log offset read round '
  	        + 'run say summarize write '
  	        + 'character characters contents day frontmost id item length '
  	        + 'month name|0 paragraph paragraphs rest reverse running time version '
  	        + 'weekday word words year'
  	    },
  	    contains: [
  	      STRING,
  	      hljs.C_NUMBER_MODE,
  	      {
  	        className: 'built_in',
  	        begin: regex.concat(
  	          /\b/,
  	          regex.either(...BUILT_IN_PATTERNS),
  	          /\b/
  	        )
  	      },
  	      {
  	        className: 'built_in',
  	        begin: /^\s*return\b/
  	      },
  	      {
  	        className: 'literal',
  	        begin:
  	          /\b(text item delimiters|current application|missing value)\b/
  	      },
  	      {
  	        className: 'keyword',
  	        begin: regex.concat(
  	          /\b/,
  	          regex.either(...KEYWORD_PATTERNS),
  	          /\b/
  	        )
  	      },
  	      {
  	        beginKeywords: 'on',
  	        illegal: /[${=;\n]/,
  	        contains: [
  	          hljs.UNDERSCORE_TITLE_MODE,
  	          PARAMS
  	        ]
  	      },
  	      ...COMMENTS
  	    ],
  	    illegal: /\/\/|->|=>|\[\[/
  	  };
  	}

  	applescript_1 = applescript;
  	return applescript_1;
  }

  /*
   Language: ArcGIS Arcade
   Category: scripting
   Author: John Foster <jfoster@esri.com>
   Website: https://developers.arcgis.com/arcade/
   Description: ArcGIS Arcade is an expression language used in many Esri ArcGIS products such as Pro, Online, Server, Runtime, JavaScript, and Python
  */

  var arcade_1;
  var hasRequiredArcade;

  function requireArcade () {
  	if (hasRequiredArcade) return arcade_1;
  	hasRequiredArcade = 1;
  	/** @type LanguageFn */
  	function arcade(hljs) {
  	  const IDENT_RE = '[A-Za-z_][0-9A-Za-z_]*';
  	  const KEYWORDS = {
  	    keyword: [
  	      "if",
  	      "for",
  	      "while",
  	      "var",
  	      "new",
  	      "function",
  	      "do",
  	      "return",
  	      "void",
  	      "else",
  	      "break"
  	    ],
  	    literal: [
  	      "BackSlash",
  	      "DoubleQuote",
  	      "false",
  	      "ForwardSlash",
  	      "Infinity",
  	      "NaN",
  	      "NewLine",
  	      "null",
  	      "PI",
  	      "SingleQuote",
  	      "Tab",
  	      "TextFormatting",
  	      "true",
  	      "undefined"
  	    ],
  	    built_in: [
  	      "Abs",
  	      "Acos",
  	      "All",
  	      "Angle",
  	      "Any",
  	      "Area",
  	      "AreaGeodetic",
  	      "Array",
  	      "Asin",
  	      "Atan",
  	      "Atan2",
  	      "Attachments",
  	      "Average",
  	      "Back",
  	      "Bearing",
  	      "Boolean",
  	      "Buffer",
  	      "BufferGeodetic",
  	      "Ceil",
  	      "Centroid",
  	      "Clip",
  	      "Concatenate",
  	      "Console",
  	      "Constrain",
  	      "Contains",
  	      "ConvertDirection",
  	      "Cos",
  	      "Count",
  	      "Crosses",
  	      "Cut",
  	      "Date",
  	      "DateAdd",
  	      "DateDiff",
  	      "Day",
  	      "Decode",
  	      "DefaultValue",
  	      "Densify",
  	      "DensifyGeodetic",
  	      "Dictionary",
  	      "Difference",
  	      "Disjoint",
  	      "Distance",
  	      "DistanceGeodetic",
  	      "Distinct",
  	      "Domain",
  	      "DomainCode",
  	      "DomainName",
  	      "EnvelopeIntersects",
  	      "Equals",
  	      "Erase",
  	      "Exp",
  	      "Expects",
  	      "Extent",
  	      "Feature",
  	      "FeatureSet",
  	      "FeatureSetByAssociation",
  	      "FeatureSetById",
  	      "FeatureSetByName",
  	      "FeatureSetByPortalItem",
  	      "FeatureSetByRelationshipName",
  	      "Filter",
  	      "Find",
  	      "First",
  	      "Floor",
  	      "FromCharCode",
  	      "FromCodePoint",
  	      "FromJSON",
  	      "GdbVersion",
  	      "Generalize",
  	      "Geometry",
  	      "GetFeatureSet",
  	      "GetUser",
  	      "GroupBy",
  	      "Guid",
  	      "Hash",
  	      "HasKey",
  	      "Hour",
  	      "IIf",
  	      "Includes",
  	      "IndexOf",
  	      "Insert",
  	      "Intersection",
  	      "Intersects",
  	      "IsEmpty",
  	      "IsNan",
  	      "ISOMonth",
  	      "ISOWeek",
  	      "ISOWeekday",
  	      "ISOYear",
  	      "IsSelfIntersecting",
  	      "IsSimple",
  	      "Left|0",
  	      "Length",
  	      "Length3D",
  	      "LengthGeodetic",
  	      "Log",
  	      "Lower",
  	      "Map",
  	      "Max",
  	      "Mean",
  	      "Mid",
  	      "Millisecond",
  	      "Min",
  	      "Minute",
  	      "Month",
  	      "MultiPartToSinglePart",
  	      "Multipoint",
  	      "NextSequenceValue",
  	      "None",
  	      "Now",
  	      "Number",
  	      "Offset|0",
  	      "OrderBy",
  	      "Overlaps",
  	      "Point",
  	      "Polygon",
  	      "Polyline",
  	      "Pop",
  	      "Portal",
  	      "Pow",
  	      "Proper",
  	      "Push",
  	      "Random",
  	      "Reduce",
  	      "Relate",
  	      "Replace",
  	      "Resize",
  	      "Reverse",
  	      "Right|0",
  	      "RingIsClockwise",
  	      "Rotate",
  	      "Round",
  	      "Schema",
  	      "Second",
  	      "SetGeometry",
  	      "Simplify",
  	      "Sin",
  	      "Slice",
  	      "Sort",
  	      "Splice",
  	      "Split",
  	      "Sqrt",
  	      "Stdev",
  	      "SubtypeCode",
  	      "SubtypeName",
  	      "Subtypes",
  	      "Sum",
  	      "SymmetricDifference",
  	      "Tan",
  	      "Text",
  	      "Timestamp",
  	      "ToCharCode",
  	      "ToCodePoint",
  	      "Today",
  	      "ToHex",
  	      "ToLocal",
  	      "Top|0",
  	      "Touches",
  	      "ToUTC",
  	      "TrackAccelerationAt",
  	      "TrackAccelerationWindow",
  	      "TrackCurrentAcceleration",
  	      "TrackCurrentDistance",
  	      "TrackCurrentSpeed",
  	      "TrackCurrentTime",
  	      "TrackDistanceAt",
  	      "TrackDistanceWindow",
  	      "TrackDuration",
  	      "TrackFieldWindow",
  	      "TrackGeometryWindow",
  	      "TrackIndex",
  	      "TrackSpeedAt",
  	      "TrackSpeedWindow",
  	      "TrackStartTime",
  	      "TrackWindow",
  	      "Trim",
  	      "TypeOf",
  	      "Union",
  	      "Upper",
  	      "UrlEncode",
  	      "Variance",
  	      "Week",
  	      "Weekday",
  	      "When",
  	      "Within",
  	      "Year"
  	    ]
  	  };
  	  const SYMBOL = {
  	    className: 'symbol',
  	    begin: '\\$[datastore|feature|layer|map|measure|sourcefeature|sourcelayer|targetfeature|targetlayer|value|view]+'
  	  };
  	  const NUMBER = {
  	    className: 'number',
  	    variants: [
  	      { begin: '\\b(0[bB][01]+)' },
  	      { begin: '\\b(0[oO][0-7]+)' },
  	      { begin: hljs.C_NUMBER_RE }
  	    ],
  	    relevance: 0
  	  };
  	  const SUBST = {
  	    className: 'subst',
  	    begin: '\\$\\{',
  	    end: '\\}',
  	    keywords: KEYWORDS,
  	    contains: [] // defined later
  	  };
  	  const TEMPLATE_STRING = {
  	    className: 'string',
  	    begin: '`',
  	    end: '`',
  	    contains: [
  	      hljs.BACKSLASH_ESCAPE,
  	      SUBST
  	    ]
  	  };
  	  SUBST.contains = [
  	    hljs.APOS_STRING_MODE,
  	    hljs.QUOTE_STRING_MODE,
  	    TEMPLATE_STRING,
  	    NUMBER,
  	    hljs.REGEXP_MODE
  	  ];
  	  const PARAMS_CONTAINS = SUBST.contains.concat([
  	    hljs.C_BLOCK_COMMENT_MODE,
  	    hljs.C_LINE_COMMENT_MODE
  	  ]);

  	  return {
  	    name: 'ArcGIS Arcade',
  	    case_insensitive: true,
  	    keywords: KEYWORDS,
  	    contains: [
  	      hljs.APOS_STRING_MODE,
  	      hljs.QUOTE_STRING_MODE,
  	      TEMPLATE_STRING,
  	      hljs.C_LINE_COMMENT_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE,
  	      SYMBOL,
  	      NUMBER,
  	      { // object attr container
  	        begin: /[{,]\s*/,
  	        relevance: 0,
  	        contains: [
  	          {
  	            begin: IDENT_RE + '\\s*:',
  	            returnBegin: true,
  	            relevance: 0,
  	            contains: [
  	              {
  	                className: 'attr',
  	                begin: IDENT_RE,
  	                relevance: 0
  	              }
  	            ]
  	          }
  	        ]
  	      },
  	      { // "value" container
  	        begin: '(' + hljs.RE_STARTERS_RE + '|\\b(return)\\b)\\s*',
  	        keywords: 'return',
  	        contains: [
  	          hljs.C_LINE_COMMENT_MODE,
  	          hljs.C_BLOCK_COMMENT_MODE,
  	          hljs.REGEXP_MODE,
  	          {
  	            className: 'function',
  	            begin: '(\\(.*?\\)|' + IDENT_RE + ')\\s*=>',
  	            returnBegin: true,
  	            end: '\\s*=>',
  	            contains: [
  	              {
  	                className: 'params',
  	                variants: [
  	                  { begin: IDENT_RE },
  	                  { begin: /\(\s*\)/ },
  	                  {
  	                    begin: /\(/,
  	                    end: /\)/,
  	                    excludeBegin: true,
  	                    excludeEnd: true,
  	                    keywords: KEYWORDS,
  	                    contains: PARAMS_CONTAINS
  	                  }
  	                ]
  	              }
  	            ]
  	          }
  	        ],
  	        relevance: 0
  	      },
  	      {
  	        beginKeywords: 'function',
  	        end: /\{/,
  	        excludeEnd: true,
  	        contains: [
  	          hljs.inherit(hljs.TITLE_MODE, {
  	            className: "title.function",
  	            begin: IDENT_RE
  	          }),
  	          {
  	            className: 'params',
  	            begin: /\(/,
  	            end: /\)/,
  	            excludeBegin: true,
  	            excludeEnd: true,
  	            contains: PARAMS_CONTAINS
  	          }
  	        ],
  	        illegal: /\[|%/
  	      },
  	      { begin: /\$[(.]/ }
  	    ],
  	    illegal: /#(?!!)/
  	  };
  	}

  	arcade_1 = arcade;
  	return arcade_1;
  }

  /*
  Language: C++
  Category: common, system
  Website: https://isocpp.org
  */

  var arduino_1;
  var hasRequiredArduino;

  function requireArduino () {
  	if (hasRequiredArduino) return arduino_1;
  	hasRequiredArduino = 1;
  	/** @type LanguageFn */
  	function cPlusPlus(hljs) {
  	  const regex = hljs.regex;
  	  // added for historic reasons because `hljs.C_LINE_COMMENT_MODE` does
  	  // not include such support nor can we be sure all the grammars depending
  	  // on it would desire this behavior
  	  const C_LINE_COMMENT_MODE = hljs.COMMENT('//', '$', { contains: [ { begin: /\\\n/ } ] });
  	  const DECLTYPE_AUTO_RE = 'decltype\\(auto\\)';
  	  const NAMESPACE_RE = '[a-zA-Z_]\\w*::';
  	  const TEMPLATE_ARGUMENT_RE = '<[^<>]+>';
  	  const FUNCTION_TYPE_RE = '(?!struct)('
  	    + DECLTYPE_AUTO_RE + '|'
  	    + regex.optional(NAMESPACE_RE)
  	    + '[a-zA-Z_]\\w*' + regex.optional(TEMPLATE_ARGUMENT_RE)
  	  + ')';

  	  const CPP_PRIMITIVE_TYPES = {
  	    className: 'type',
  	    begin: '\\b[a-z\\d_]*_t\\b'
  	  };

  	  // https://en.cppreference.com/w/cpp/language/escape
  	  // \\ \x \xFF \u2837 \u00323747 \374
  	  const CHARACTER_ESCAPES = '\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\S)';
  	  const STRINGS = {
  	    className: 'string',
  	    variants: [
  	      {
  	        begin: '(u8?|U|L)?"',
  	        end: '"',
  	        illegal: '\\n',
  	        contains: [ hljs.BACKSLASH_ESCAPE ]
  	      },
  	      {
  	        begin: '(u8?|U|L)?\'(' + CHARACTER_ESCAPES + '|.)',
  	        end: '\'',
  	        illegal: '.'
  	      },
  	      hljs.END_SAME_AS_BEGIN({
  	        begin: /(?:u8?|U|L)?R"([^()\\ ]{0,16})\(/,
  	        end: /\)([^()\\ ]{0,16})"/
  	      })
  	    ]
  	  };

  	  const NUMBERS = {
  	    className: 'number',
  	    variants: [
  	      { begin: '\\b(0b[01\']+)' },
  	      { begin: '(-?)\\b([\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)' },
  	      { begin: '(-?)(\\b0[xX][a-fA-F0-9\']+|(\\b[\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)([eE][-+]?[\\d\']+)?)' }
  	    ],
  	    relevance: 0
  	  };

  	  const PREPROCESSOR = {
  	    className: 'meta',
  	    begin: /#\s*[a-z]+\b/,
  	    end: /$/,
  	    keywords: { keyword:
  	        'if else elif endif define undef warning error line '
  	        + 'pragma _Pragma ifdef ifndef include' },
  	    contains: [
  	      {
  	        begin: /\\\n/,
  	        relevance: 0
  	      },
  	      hljs.inherit(STRINGS, { className: 'string' }),
  	      {
  	        className: 'string',
  	        begin: /<.*?>/
  	      },
  	      C_LINE_COMMENT_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE
  	    ]
  	  };

  	  const TITLE_MODE = {
  	    className: 'title',
  	    begin: regex.optional(NAMESPACE_RE) + hljs.IDENT_RE,
  	    relevance: 0
  	  };

  	  const FUNCTION_TITLE = regex.optional(NAMESPACE_RE) + hljs.IDENT_RE + '\\s*\\(';

  	  // https://en.cppreference.com/w/cpp/keyword
  	  const RESERVED_KEYWORDS = [
  	    'alignas',
  	    'alignof',
  	    'and',
  	    'and_eq',
  	    'asm',
  	    'atomic_cancel',
  	    'atomic_commit',
  	    'atomic_noexcept',
  	    'auto',
  	    'bitand',
  	    'bitor',
  	    'break',
  	    'case',
  	    'catch',
  	    'class',
  	    'co_await',
  	    'co_return',
  	    'co_yield',
  	    'compl',
  	    'concept',
  	    'const_cast|10',
  	    'consteval',
  	    'constexpr',
  	    'constinit',
  	    'continue',
  	    'decltype',
  	    'default',
  	    'delete',
  	    'do',
  	    'dynamic_cast|10',
  	    'else',
  	    'enum',
  	    'explicit',
  	    'export',
  	    'extern',
  	    'false',
  	    'final',
  	    'for',
  	    'friend',
  	    'goto',
  	    'if',
  	    'import',
  	    'inline',
  	    'module',
  	    'mutable',
  	    'namespace',
  	    'new',
  	    'noexcept',
  	    'not',
  	    'not_eq',
  	    'nullptr',
  	    'operator',
  	    'or',
  	    'or_eq',
  	    'override',
  	    'private',
  	    'protected',
  	    'public',
  	    'reflexpr',
  	    'register',
  	    'reinterpret_cast|10',
  	    'requires',
  	    'return',
  	    'sizeof',
  	    'static_assert',
  	    'static_cast|10',
  	    'struct',
  	    'switch',
  	    'synchronized',
  	    'template',
  	    'this',
  	    'thread_local',
  	    'throw',
  	    'transaction_safe',
  	    'transaction_safe_dynamic',
  	    'true',
  	    'try',
  	    'typedef',
  	    'typeid',
  	    'typename',
  	    'union',
  	    'using',
  	    'virtual',
  	    'volatile',
  	    'while',
  	    'xor',
  	    'xor_eq'
  	  ];

  	  // https://en.cppreference.com/w/cpp/keyword
  	  const RESERVED_TYPES = [
  	    'bool',
  	    'char',
  	    'char16_t',
  	    'char32_t',
  	    'char8_t',
  	    'double',
  	    'float',
  	    'int',
  	    'long',
  	    'short',
  	    'void',
  	    'wchar_t',
  	    'unsigned',
  	    'signed',
  	    'const',
  	    'static'
  	  ];

  	  const TYPE_HINTS = [
  	    'any',
  	    'auto_ptr',
  	    'barrier',
  	    'binary_semaphore',
  	    'bitset',
  	    'complex',
  	    'condition_variable',
  	    'condition_variable_any',
  	    'counting_semaphore',
  	    'deque',
  	    'false_type',
  	    'future',
  	    'imaginary',
  	    'initializer_list',
  	    'istringstream',
  	    'jthread',
  	    'latch',
  	    'lock_guard',
  	    'multimap',
  	    'multiset',
  	    'mutex',
  	    'optional',
  	    'ostringstream',
  	    'packaged_task',
  	    'pair',
  	    'promise',
  	    'priority_queue',
  	    'queue',
  	    'recursive_mutex',
  	    'recursive_timed_mutex',
  	    'scoped_lock',
  	    'set',
  	    'shared_future',
  	    'shared_lock',
  	    'shared_mutex',
  	    'shared_timed_mutex',
  	    'shared_ptr',
  	    'stack',
  	    'string_view',
  	    'stringstream',
  	    'timed_mutex',
  	    'thread',
  	    'true_type',
  	    'tuple',
  	    'unique_lock',
  	    'unique_ptr',
  	    'unordered_map',
  	    'unordered_multimap',
  	    'unordered_multiset',
  	    'unordered_set',
  	    'variant',
  	    'vector',
  	    'weak_ptr',
  	    'wstring',
  	    'wstring_view'
  	  ];

  	  const FUNCTION_HINTS = [
  	    'abort',
  	    'abs',
  	    'acos',
  	    'apply',
  	    'as_const',
  	    'asin',
  	    'atan',
  	    'atan2',
  	    'calloc',
  	    'ceil',
  	    'cerr',
  	    'cin',
  	    'clog',
  	    'cos',
  	    'cosh',
  	    'cout',
  	    'declval',
  	    'endl',
  	    'exchange',
  	    'exit',
  	    'exp',
  	    'fabs',
  	    'floor',
  	    'fmod',
  	    'forward',
  	    'fprintf',
  	    'fputs',
  	    'free',
  	    'frexp',
  	    'fscanf',
  	    'future',
  	    'invoke',
  	    'isalnum',
  	    'isalpha',
  	    'iscntrl',
  	    'isdigit',
  	    'isgraph',
  	    'islower',
  	    'isprint',
  	    'ispunct',
  	    'isspace',
  	    'isupper',
  	    'isxdigit',
  	    'labs',
  	    'launder',
  	    'ldexp',
  	    'log',
  	    'log10',
  	    'make_pair',
  	    'make_shared',
  	    'make_shared_for_overwrite',
  	    'make_tuple',
  	    'make_unique',
  	    'malloc',
  	    'memchr',
  	    'memcmp',
  	    'memcpy',
  	    'memset',
  	    'modf',
  	    'move',
  	    'pow',
  	    'printf',
  	    'putchar',
  	    'puts',
  	    'realloc',
  	    'scanf',
  	    'sin',
  	    'sinh',
  	    'snprintf',
  	    'sprintf',
  	    'sqrt',
  	    'sscanf',
  	    'std',
  	    'stderr',
  	    'stdin',
  	    'stdout',
  	    'strcat',
  	    'strchr',
  	    'strcmp',
  	    'strcpy',
  	    'strcspn',
  	    'strlen',
  	    'strncat',
  	    'strncmp',
  	    'strncpy',
  	    'strpbrk',
  	    'strrchr',
  	    'strspn',
  	    'strstr',
  	    'swap',
  	    'tan',
  	    'tanh',
  	    'terminate',
  	    'to_underlying',
  	    'tolower',
  	    'toupper',
  	    'vfprintf',
  	    'visit',
  	    'vprintf',
  	    'vsprintf'
  	  ];

  	  const LITERALS = [
  	    'NULL',
  	    'false',
  	    'nullopt',
  	    'nullptr',
  	    'true'
  	  ];

  	  // https://en.cppreference.com/w/cpp/keyword
  	  const BUILT_IN = [ '_Pragma' ];

  	  const CPP_KEYWORDS = {
  	    type: RESERVED_TYPES,
  	    keyword: RESERVED_KEYWORDS,
  	    literal: LITERALS,
  	    built_in: BUILT_IN,
  	    _type_hints: TYPE_HINTS
  	  };

  	  const FUNCTION_DISPATCH = {
  	    className: 'function.dispatch',
  	    relevance: 0,
  	    keywords: {
  	      // Only for relevance, not highlighting.
  	      _hint: FUNCTION_HINTS },
  	    begin: regex.concat(
  	      /\b/,
  	      /(?!decltype)/,
  	      /(?!if)/,
  	      /(?!for)/,
  	      /(?!switch)/,
  	      /(?!while)/,
  	      hljs.IDENT_RE,
  	      regex.lookahead(/(<[^<>]+>|)\s*\(/))
  	  };

  	  const EXPRESSION_CONTAINS = [
  	    FUNCTION_DISPATCH,
  	    PREPROCESSOR,
  	    CPP_PRIMITIVE_TYPES,
  	    C_LINE_COMMENT_MODE,
  	    hljs.C_BLOCK_COMMENT_MODE,
  	    NUMBERS,
  	    STRINGS
  	  ];

  	  const EXPRESSION_CONTEXT = {
  	    // This mode covers expression context where we can't expect a function
  	    // definition and shouldn't highlight anything that looks like one:
  	    // `return some()`, `else if()`, `(x*sum(1, 2))`
  	    variants: [
  	      {
  	        begin: /=/,
  	        end: /;/
  	      },
  	      {
  	        begin: /\(/,
  	        end: /\)/
  	      },
  	      {
  	        beginKeywords: 'new throw return else',
  	        end: /;/
  	      }
  	    ],
  	    keywords: CPP_KEYWORDS,
  	    contains: EXPRESSION_CONTAINS.concat([
  	      {
  	        begin: /\(/,
  	        end: /\)/,
  	        keywords: CPP_KEYWORDS,
  	        contains: EXPRESSION_CONTAINS.concat([ 'self' ]),
  	        relevance: 0
  	      }
  	    ]),
  	    relevance: 0
  	  };

  	  const FUNCTION_DECLARATION = {
  	    className: 'function',
  	    begin: '(' + FUNCTION_TYPE_RE + '[\\*&\\s]+)+' + FUNCTION_TITLE,
  	    returnBegin: true,
  	    end: /[{;=]/,
  	    excludeEnd: true,
  	    keywords: CPP_KEYWORDS,
  	    illegal: /[^\w\s\*&:<>.]/,
  	    contains: [
  	      { // to prevent it from being confused as the function title
  	        begin: DECLTYPE_AUTO_RE,
  	        keywords: CPP_KEYWORDS,
  	        relevance: 0
  	      },
  	      {
  	        begin: FUNCTION_TITLE,
  	        returnBegin: true,
  	        contains: [ TITLE_MODE ],
  	        relevance: 0
  	      },
  	      // needed because we do not have look-behind on the below rule
  	      // to prevent it from grabbing the final : in a :: pair
  	      {
  	        begin: /::/,
  	        relevance: 0
  	      },
  	      // initializers
  	      {
  	        begin: /:/,
  	        endsWithParent: true,
  	        contains: [
  	          STRINGS,
  	          NUMBERS
  	        ]
  	      },
  	      // allow for multiple declarations, e.g.:
  	      // extern void f(int), g(char);
  	      {
  	        relevance: 0,
  	        match: /,/
  	      },
  	      {
  	        className: 'params',
  	        begin: /\(/,
  	        end: /\)/,
  	        keywords: CPP_KEYWORDS,
  	        relevance: 0,
  	        contains: [
  	          C_LINE_COMMENT_MODE,
  	          hljs.C_BLOCK_COMMENT_MODE,
  	          STRINGS,
  	          NUMBERS,
  	          CPP_PRIMITIVE_TYPES,
  	          // Count matching parentheses.
  	          {
  	            begin: /\(/,
  	            end: /\)/,
  	            keywords: CPP_KEYWORDS,
  	            relevance: 0,
  	            contains: [
  	              'self',
  	              C_LINE_COMMENT_MODE,
  	              hljs.C_BLOCK_COMMENT_MODE,
  	              STRINGS,
  	              NUMBERS,
  	              CPP_PRIMITIVE_TYPES
  	            ]
  	          }
  	        ]
  	      },
  	      CPP_PRIMITIVE_TYPES,
  	      C_LINE_COMMENT_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE,
  	      PREPROCESSOR
  	    ]
  	  };

  	  return {
  	    name: 'C++',
  	    aliases: [
  	      'cc',
  	      'c++',
  	      'h++',
  	      'hpp',
  	      'hh',
  	      'hxx',
  	      'cxx'
  	    ],
  	    keywords: CPP_KEYWORDS,
  	    illegal: '</',
  	    classNameAliases: { 'function.dispatch': 'built_in' },
  	    contains: [].concat(
  	      EXPRESSION_CONTEXT,
  	      FUNCTION_DECLARATION,
  	      FUNCTION_DISPATCH,
  	      EXPRESSION_CONTAINS,
  	      [
  	        PREPROCESSOR,
  	        { // containers: ie, `vector <int> rooms (9);`
  	          begin: '\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array|tuple|optional|variant|function)\\s*<(?!<)',
  	          end: '>',
  	          keywords: CPP_KEYWORDS,
  	          contains: [
  	            'self',
  	            CPP_PRIMITIVE_TYPES
  	          ]
  	        },
  	        {
  	          begin: hljs.IDENT_RE + '::',
  	          keywords: CPP_KEYWORDS
  	        },
  	        {
  	          match: [
  	            // extra complexity to deal with `enum class` and `enum struct`
  	            /\b(?:enum(?:\s+(?:class|struct))?|class|struct|union)/,
  	            /\s+/,
  	            /\w+/
  	          ],
  	          className: {
  	            1: 'keyword',
  	            3: 'title.class'
  	          }
  	        }
  	      ])
  	  };
  	}

  	/*
  	Language: Arduino
  	Author: Stefania Mellai <s.mellai@arduino.cc>
  	Description: The Arduino® Language is a superset of C++. This rules are designed to highlight the Arduino® source code. For info about language see http://www.arduino.cc.
  	Website: https://www.arduino.cc
  	*/

  	/** @type LanguageFn */
  	function arduino(hljs) {
  	  const ARDUINO_KW = {
  	    type: [
  	      "boolean",
  	      "byte",
  	      "word",
  	      "String"
  	    ],
  	    built_in: [
  	      "KeyboardController",
  	      "MouseController",
  	      "SoftwareSerial",
  	      "EthernetServer",
  	      "EthernetClient",
  	      "LiquidCrystal",
  	      "RobotControl",
  	      "GSMVoiceCall",
  	      "EthernetUDP",
  	      "EsploraTFT",
  	      "HttpClient",
  	      "RobotMotor",
  	      "WiFiClient",
  	      "GSMScanner",
  	      "FileSystem",
  	      "Scheduler",
  	      "GSMServer",
  	      "YunClient",
  	      "YunServer",
  	      "IPAddress",
  	      "GSMClient",
  	      "GSMModem",
  	      "Keyboard",
  	      "Ethernet",
  	      "Console",
  	      "GSMBand",
  	      "Esplora",
  	      "Stepper",
  	      "Process",
  	      "WiFiUDP",
  	      "GSM_SMS",
  	      "Mailbox",
  	      "USBHost",
  	      "Firmata",
  	      "PImage",
  	      "Client",
  	      "Server",
  	      "GSMPIN",
  	      "FileIO",
  	      "Bridge",
  	      "Serial",
  	      "EEPROM",
  	      "Stream",
  	      "Mouse",
  	      "Audio",
  	      "Servo",
  	      "File",
  	      "Task",
  	      "GPRS",
  	      "WiFi",
  	      "Wire",
  	      "TFT",
  	      "GSM",
  	      "SPI",
  	      "SD"
  	    ],
  	    _hints: [
  	      "setup",
  	      "loop",
  	      "runShellCommandAsynchronously",
  	      "analogWriteResolution",
  	      "retrieveCallingNumber",
  	      "printFirmwareVersion",
  	      "analogReadResolution",
  	      "sendDigitalPortPair",
  	      "noListenOnLocalhost",
  	      "readJoystickButton",
  	      "setFirmwareVersion",
  	      "readJoystickSwitch",
  	      "scrollDisplayRight",
  	      "getVoiceCallStatus",
  	      "scrollDisplayLeft",
  	      "writeMicroseconds",
  	      "delayMicroseconds",
  	      "beginTransmission",
  	      "getSignalStrength",
  	      "runAsynchronously",
  	      "getAsynchronously",
  	      "listenOnLocalhost",
  	      "getCurrentCarrier",
  	      "readAccelerometer",
  	      "messageAvailable",
  	      "sendDigitalPorts",
  	      "lineFollowConfig",
  	      "countryNameWrite",
  	      "runShellCommand",
  	      "readStringUntil",
  	      "rewindDirectory",
  	      "readTemperature",
  	      "setClockDivider",
  	      "readLightSensor",
  	      "endTransmission",
  	      "analogReference",
  	      "detachInterrupt",
  	      "countryNameRead",
  	      "attachInterrupt",
  	      "encryptionType",
  	      "readBytesUntil",
  	      "robotNameWrite",
  	      "readMicrophone",
  	      "robotNameRead",
  	      "cityNameWrite",
  	      "userNameWrite",
  	      "readJoystickY",
  	      "readJoystickX",
  	      "mouseReleased",
  	      "openNextFile",
  	      "scanNetworks",
  	      "noInterrupts",
  	      "digitalWrite",
  	      "beginSpeaker",
  	      "mousePressed",
  	      "isActionDone",
  	      "mouseDragged",
  	      "displayLogos",
  	      "noAutoscroll",
  	      "addParameter",
  	      "remoteNumber",
  	      "getModifiers",
  	      "keyboardRead",
  	      "userNameRead",
  	      "waitContinue",
  	      "processInput",
  	      "parseCommand",
  	      "printVersion",
  	      "readNetworks",
  	      "writeMessage",
  	      "blinkVersion",
  	      "cityNameRead",
  	      "readMessage",
  	      "setDataMode",
  	      "parsePacket",
  	      "isListening",
  	      "setBitOrder",
  	      "beginPacket",
  	      "isDirectory",
  	      "motorsWrite",
  	      "drawCompass",
  	      "digitalRead",
  	      "clearScreen",
  	      "serialEvent",
  	      "rightToLeft",
  	      "setTextSize",
  	      "leftToRight",
  	      "requestFrom",
  	      "keyReleased",
  	      "compassRead",
  	      "analogWrite",
  	      "interrupts",
  	      "WiFiServer",
  	      "disconnect",
  	      "playMelody",
  	      "parseFloat",
  	      "autoscroll",
  	      "getPINUsed",
  	      "setPINUsed",
  	      "setTimeout",
  	      "sendAnalog",
  	      "readSlider",
  	      "analogRead",
  	      "beginWrite",
  	      "createChar",
  	      "motorsStop",
  	      "keyPressed",
  	      "tempoWrite",
  	      "readButton",
  	      "subnetMask",
  	      "debugPrint",
  	      "macAddress",
  	      "writeGreen",
  	      "randomSeed",
  	      "attachGPRS",
  	      "readString",
  	      "sendString",
  	      "remotePort",
  	      "releaseAll",
  	      "mouseMoved",
  	      "background",
  	      "getXChange",
  	      "getYChange",
  	      "answerCall",
  	      "getResult",
  	      "voiceCall",
  	      "endPacket",
  	      "constrain",
  	      "getSocket",
  	      "writeJSON",
  	      "getButton",
  	      "available",
  	      "connected",
  	      "findUntil",
  	      "readBytes",
  	      "exitValue",
  	      "readGreen",
  	      "writeBlue",
  	      "startLoop",
  	      "IPAddress",
  	      "isPressed",
  	      "sendSysex",
  	      "pauseMode",
  	      "gatewayIP",
  	      "setCursor",
  	      "getOemKey",
  	      "tuneWrite",
  	      "noDisplay",
  	      "loadImage",
  	      "switchPIN",
  	      "onRequest",
  	      "onReceive",
  	      "changePIN",
  	      "playFile",
  	      "noBuffer",
  	      "parseInt",
  	      "overflow",
  	      "checkPIN",
  	      "knobRead",
  	      "beginTFT",
  	      "bitClear",
  	      "updateIR",
  	      "bitWrite",
  	      "position",
  	      "writeRGB",
  	      "highByte",
  	      "writeRed",
  	      "setSpeed",
  	      "readBlue",
  	      "noStroke",
  	      "remoteIP",
  	      "transfer",
  	      "shutdown",
  	      "hangCall",
  	      "beginSMS",
  	      "endWrite",
  	      "attached",
  	      "maintain",
  	      "noCursor",
  	      "checkReg",
  	      "checkPUK",
  	      "shiftOut",
  	      "isValid",
  	      "shiftIn",
  	      "pulseIn",
  	      "connect",
  	      "println",
  	      "localIP",
  	      "pinMode",
  	      "getIMEI",
  	      "display",
  	      "noBlink",
  	      "process",
  	      "getBand",
  	      "running",
  	      "beginSD",
  	      "drawBMP",
  	      "lowByte",
  	      "setBand",
  	      "release",
  	      "bitRead",
  	      "prepare",
  	      "pointTo",
  	      "readRed",
  	      "setMode",
  	      "noFill",
  	      "remove",
  	      "listen",
  	      "stroke",
  	      "detach",
  	      "attach",
  	      "noTone",
  	      "exists",
  	      "buffer",
  	      "height",
  	      "bitSet",
  	      "circle",
  	      "config",
  	      "cursor",
  	      "random",
  	      "IRread",
  	      "setDNS",
  	      "endSMS",
  	      "getKey",
  	      "micros",
  	      "millis",
  	      "begin",
  	      "print",
  	      "write",
  	      "ready",
  	      "flush",
  	      "width",
  	      "isPIN",
  	      "blink",
  	      "clear",
  	      "press",
  	      "mkdir",
  	      "rmdir",
  	      "close",
  	      "point",
  	      "yield",
  	      "image",
  	      "BSSID",
  	      "click",
  	      "delay",
  	      "read",
  	      "text",
  	      "move",
  	      "peek",
  	      "beep",
  	      "rect",
  	      "line",
  	      "open",
  	      "seek",
  	      "fill",
  	      "size",
  	      "turn",
  	      "stop",
  	      "home",
  	      "find",
  	      "step",
  	      "tone",
  	      "sqrt",
  	      "RSSI",
  	      "SSID",
  	      "end",
  	      "bit",
  	      "tan",
  	      "cos",
  	      "sin",
  	      "pow",
  	      "map",
  	      "abs",
  	      "max",
  	      "min",
  	      "get",
  	      "run",
  	      "put"
  	    ],
  	    literal: [
  	      "DIGITAL_MESSAGE",
  	      "FIRMATA_STRING",
  	      "ANALOG_MESSAGE",
  	      "REPORT_DIGITAL",
  	      "REPORT_ANALOG",
  	      "INPUT_PULLUP",
  	      "SET_PIN_MODE",
  	      "INTERNAL2V56",
  	      "SYSTEM_RESET",
  	      "LED_BUILTIN",
  	      "INTERNAL1V1",
  	      "SYSEX_START",
  	      "INTERNAL",
  	      "EXTERNAL",
  	      "DEFAULT",
  	      "OUTPUT",
  	      "INPUT",
  	      "HIGH",
  	      "LOW"
  	    ]
  	  };

  	  const ARDUINO = cPlusPlus(hljs);

  	  const kws = /** @type {Record<string,any>} */ (ARDUINO.keywords);

  	  kws.type = [
  	    ...kws.type,
  	    ...ARDUINO_KW.type
  	  ];
  	  kws.literal = [
  	    ...kws.literal,
  	    ...ARDUINO_KW.literal
  	  ];
  	  kws.built_in = [
  	    ...kws.built_in,
  	    ...ARDUINO_KW.built_in
  	  ];
  	  kws._hints = ARDUINO_KW._hints;

  	  ARDUINO.name = 'Arduino';
  	  ARDUINO.aliases = [ 'ino' ];
  	  ARDUINO.supersetOf = "cpp";

  	  return ARDUINO;
  	}

  	arduino_1 = arduino;
  	return arduino_1;
  }

  /*
  Language: ARM Assembly
  Author: Dan Panzarella <alsoelp@gmail.com>
  Description: ARM Assembly including Thumb and Thumb2 instructions
  Category: assembler
  */

  var armasm_1;
  var hasRequiredArmasm;

  function requireArmasm () {
  	if (hasRequiredArmasm) return armasm_1;
  	hasRequiredArmasm = 1;
  	/** @type LanguageFn */
  	function armasm(hljs) {
  	  // local labels: %?[FB]?[AT]?\d{1,2}\w+

  	  const COMMENT = { variants: [
  	    hljs.COMMENT('^[ \\t]*(?=#)', '$', {
  	      relevance: 0,
  	      excludeBegin: true
  	    }),
  	    hljs.COMMENT('[;@]', '$', { relevance: 0 }),
  	    hljs.C_LINE_COMMENT_MODE,
  	    hljs.C_BLOCK_COMMENT_MODE
  	  ] };

  	  return {
  	    name: 'ARM Assembly',
  	    case_insensitive: true,
  	    aliases: [ 'arm' ],
  	    keywords: {
  	      $pattern: '\\.?' + hljs.IDENT_RE,
  	      meta:
  	        // GNU preprocs
  	        '.2byte .4byte .align .ascii .asciz .balign .byte .code .data .else .end .endif .endm .endr .equ .err .exitm .extern .global .hword .if .ifdef .ifndef .include .irp .long .macro .rept .req .section .set .skip .space .text .word .arm .thumb .code16 .code32 .force_thumb .thumb_func .ltorg '
  	        // ARM directives
  	        + 'ALIAS ALIGN ARM AREA ASSERT ATTR CN CODE CODE16 CODE32 COMMON CP DATA DCB DCD DCDU DCDO DCFD DCFDU DCI DCQ DCQU DCW DCWU DN ELIF ELSE END ENDFUNC ENDIF ENDP ENTRY EQU EXPORT EXPORTAS EXTERN FIELD FILL FUNCTION GBLA GBLL GBLS GET GLOBAL IF IMPORT INCBIN INCLUDE INFO KEEP LCLA LCLL LCLS LTORG MACRO MAP MEND MEXIT NOFP OPT PRESERVE8 PROC QN READONLY RELOC REQUIRE REQUIRE8 RLIST FN ROUT SETA SETL SETS SN SPACE SUBT THUMB THUMBX TTL WHILE WEND ',
  	      built_in:
  	        'r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 ' // standard registers
  	        + 'pc lr sp ip sl sb fp ' // typical regs plus backward compatibility
  	        + 'a1 a2 a3 a4 v1 v2 v3 v4 v5 v6 v7 v8 f0 f1 f2 f3 f4 f5 f6 f7 ' // more regs and fp
  	        + 'p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14 p15 ' // coprocessor regs
  	        + 'c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15 ' // more coproc
  	        + 'q0 q1 q2 q3 q4 q5 q6 q7 q8 q9 q10 q11 q12 q13 q14 q15 ' // advanced SIMD NEON regs

  	        // program status registers
  	        + 'cpsr_c cpsr_x cpsr_s cpsr_f cpsr_cx cpsr_cxs cpsr_xs cpsr_xsf cpsr_sf cpsr_cxsf '
  	        + 'spsr_c spsr_x spsr_s spsr_f spsr_cx spsr_cxs spsr_xs spsr_xsf spsr_sf spsr_cxsf '

  	        // NEON and VFP registers
  	        + 's0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 '
  	        + 's16 s17 s18 s19 s20 s21 s22 s23 s24 s25 s26 s27 s28 s29 s30 s31 '
  	        + 'd0 d1 d2 d3 d4 d5 d6 d7 d8 d9 d10 d11 d12 d13 d14 d15 '
  	        + 'd16 d17 d18 d19 d20 d21 d22 d23 d24 d25 d26 d27 d28 d29 d30 d31 '

  	        + '{PC} {VAR} {TRUE} {FALSE} {OPT} {CONFIG} {ENDIAN} {CODESIZE} {CPU} {FPU} {ARCHITECTURE} {PCSTOREOFFSET} {ARMASM_VERSION} {INTER} {ROPI} {RWPI} {SWST} {NOSWST} . @'
  	    },
  	    contains: [
  	      {
  	        className: 'keyword',
  	        begin: '\\b(' // mnemonics
  	            + 'adc|'
  	            + '(qd?|sh?|u[qh]?)?add(8|16)?|usada?8|(q|sh?|u[qh]?)?(as|sa)x|'
  	            + 'and|adrl?|sbc|rs[bc]|asr|b[lx]?|blx|bxj|cbn?z|tb[bh]|bic|'
  	            + 'bfc|bfi|[su]bfx|bkpt|cdp2?|clz|clrex|cmp|cmn|cpsi[ed]|cps|'
  	            + 'setend|dbg|dmb|dsb|eor|isb|it[te]{0,3}|lsl|lsr|ror|rrx|'
  	            + 'ldm(([id][ab])|f[ds])?|ldr((s|ex)?[bhd])?|movt?|mvn|mra|mar|'
  	            + 'mul|[us]mull|smul[bwt][bt]|smu[as]d|smmul|smmla|'
  	            + 'mla|umlaal|smlal?([wbt][bt]|d)|mls|smlsl?[ds]|smc|svc|sev|'
  	            + 'mia([bt]{2}|ph)?|mrr?c2?|mcrr2?|mrs|msr|orr|orn|pkh(tb|bt)|rbit|'
  	            + 'rev(16|sh)?|sel|[su]sat(16)?|nop|pop|push|rfe([id][ab])?|'
  	            + 'stm([id][ab])?|str(ex)?[bhd]?|(qd?)?sub|(sh?|q|u[qh]?)?sub(8|16)|'
  	            + '[su]xt(a?h|a?b(16)?)|srs([id][ab])?|swpb?|swi|smi|tst|teq|'
  	            + 'wfe|wfi|yield'
  	        + ')'
  	        + '(eq|ne|cs|cc|mi|pl|vs|vc|hi|ls|ge|lt|gt|le|al|hs|lo)?' // condition codes
  	        + '[sptrx]?' // legal postfixes
  	        + '(?=\\s)' // followed by space
  	      },
  	      COMMENT,
  	      hljs.QUOTE_STRING_MODE,
  	      {
  	        className: 'string',
  	        begin: '\'',
  	        end: '[^\\\\]\'',
  	        relevance: 0
  	      },
  	      {
  	        className: 'title',
  	        begin: '\\|',
  	        end: '\\|',
  	        illegal: '\\n',
  	        relevance: 0
  	      },
  	      {
  	        className: 'number',
  	        variants: [
  	          { // hex
  	            begin: '[#$=]?0x[0-9a-f]+' },
  	          { // bin
  	            begin: '[#$=]?0b[01]+' },
  	          { // literal
  	            begin: '[#$=]\\d+' },
  	          { // bare number
  	            begin: '\\b\\d+' }
  	        ],
  	        relevance: 0
  	      },
  	      {
  	        className: 'symbol',
  	        variants: [
  	          { // GNU ARM syntax
  	            begin: '^[ \\t]*[a-z_\\.\\$][a-z0-9_\\.\\$]+:' },
  	          { // ARM syntax
  	            begin: '^[a-z_\\.\\$][a-z0-9_\\.\\$]+' },
  	          { // label reference
  	            begin: '[=#]\\w+' }
  	        ],
  	        relevance: 0
  	      }
  	    ]
  	  };
  	}

  	armasm_1 = armasm;
  	return armasm_1;
  }

  /*
  Language: HTML, XML
  Website: https://www.w3.org/XML/
  Category: common, web
  Audit: 2020
  */

  var xml_1;
  var hasRequiredXml;

  function requireXml () {
  	if (hasRequiredXml) return xml_1;
  	hasRequiredXml = 1;
  	/** @type LanguageFn */
  	function xml(hljs) {
  	  const regex = hljs.regex;
  	  // XML names can have the following additional letters: https://www.w3.org/TR/xml/#NT-NameChar
  	  // OTHER_NAME_CHARS = /[:\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]/;
  	  // Element names start with NAME_START_CHAR followed by optional other Unicode letters, ASCII digits, hyphens, underscores, and periods
  	  // const TAG_NAME_RE = regex.concat(/[A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/, regex.optional(/[A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*:/), /[A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*/);;
  	  // const XML_IDENT_RE = /[A-Z_a-z:\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]+/;
  	  // const TAG_NAME_RE = regex.concat(/[A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/, regex.optional(/[A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*:/), /[A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*/);
  	  // however, to cater for performance and more Unicode support rely simply on the Unicode letter class
  	  const TAG_NAME_RE = regex.concat(/[\p{L}_]/u, regex.optional(/[\p{L}0-9_.-]*:/u), /[\p{L}0-9_.-]*/u);
  	  const XML_IDENT_RE = /[\p{L}0-9._:-]+/u;
  	  const XML_ENTITIES = {
  	    className: 'symbol',
  	    begin: /&[a-z]+;|&#[0-9]+;|&#x[a-f0-9]+;/
  	  };
  	  const XML_META_KEYWORDS = {
  	    begin: /\s/,
  	    contains: [
  	      {
  	        className: 'keyword',
  	        begin: /#?[a-z_][a-z1-9_-]+/,
  	        illegal: /\n/
  	      }
  	    ]
  	  };
  	  const XML_META_PAR_KEYWORDS = hljs.inherit(XML_META_KEYWORDS, {
  	    begin: /\(/,
  	    end: /\)/
  	  });
  	  const APOS_META_STRING_MODE = hljs.inherit(hljs.APOS_STRING_MODE, { className: 'string' });
  	  const QUOTE_META_STRING_MODE = hljs.inherit(hljs.QUOTE_STRING_MODE, { className: 'string' });
  	  const TAG_INTERNALS = {
  	    endsWithParent: true,
  	    illegal: /</,
  	    relevance: 0,
  	    contains: [
  	      {
  	        className: 'attr',
  	        begin: XML_IDENT_RE,
  	        relevance: 0
  	      },
  	      {
  	        begin: /=\s*/,
  	        relevance: 0,
  	        contains: [
  	          {
  	            className: 'string',
  	            endsParent: true,
  	            variants: [
  	              {
  	                begin: /"/,
  	                end: /"/,
  	                contains: [ XML_ENTITIES ]
  	              },
  	              {
  	                begin: /'/,
  	                end: /'/,
  	                contains: [ XML_ENTITIES ]
  	              },
  	              { begin: /[^\s"'=<>`]+/ }
  	            ]
  	          }
  	        ]
  	      }
  	    ]
  	  };
  	  return {
  	    name: 'HTML, XML',
  	    aliases: [
  	      'html',
  	      'xhtml',
  	      'rss',
  	      'atom',
  	      'xjb',
  	      'xsd',
  	      'xsl',
  	      'plist',
  	      'wsf',
  	      'svg'
  	    ],
  	    case_insensitive: true,
  	    unicodeRegex: true,
  	    contains: [
  	      {
  	        className: 'meta',
  	        begin: /<![a-z]/,
  	        end: />/,
  	        relevance: 10,
  	        contains: [
  	          XML_META_KEYWORDS,
  	          QUOTE_META_STRING_MODE,
  	          APOS_META_STRING_MODE,
  	          XML_META_PAR_KEYWORDS,
  	          {
  	            begin: /\[/,
  	            end: /\]/,
  	            contains: [
  	              {
  	                className: 'meta',
  	                begin: /<![a-z]/,
  	                end: />/,
  	                contains: [
  	                  XML_META_KEYWORDS,
  	                  XML_META_PAR_KEYWORDS,
  	                  QUOTE_META_STRING_MODE,
  	                  APOS_META_STRING_MODE
  	                ]
  	              }
  	            ]
  	          }
  	        ]
  	      },
  	      hljs.COMMENT(
  	        /<!--/,
  	        /-->/,
  	        { relevance: 10 }
  	      ),
  	      {
  	        begin: /<!\[CDATA\[/,
  	        end: /\]\]>/,
  	        relevance: 10
  	      },
  	      XML_ENTITIES,
  	      // xml processing instructions
  	      {
  	        className: 'meta',
  	        end: /\?>/,
  	        variants: [
  	          {
  	            begin: /<\?xml/,
  	            relevance: 10,
  	            contains: [
  	              QUOTE_META_STRING_MODE
  	            ]
  	          },
  	          {
  	            begin: /<\?[a-z][a-z0-9]+/,
  	          }
  	        ]

  	      },
  	      {
  	        className: 'tag',
  	        /*
  	        The lookahead pattern (?=...) ensures that 'begin' only matches
  	        '<style' as a single word, followed by a whitespace or an
  	        ending bracket.
  	        */
  	        begin: /<style(?=\s|>)/,
  	        end: />/,
  	        keywords: { name: 'style' },
  	        contains: [ TAG_INTERNALS ],
  	        starts: {
  	          end: /<\/style>/,
  	          returnEnd: true,
  	          subLanguage: [
  	            'css',
  	            'xml'
  	          ]
  	        }
  	      },
  	      {
  	        className: 'tag',
  	        // See the comment in the <style tag about the lookahead pattern
  	        begin: /<script(?=\s|>)/,
  	        end: />/,
  	        keywords: { name: 'script' },
  	        contains: [ TAG_INTERNALS ],
  	        starts: {
  	          end: /<\/script>/,
  	          returnEnd: true,
  	          subLanguage: [
  	            'javascript',
  	            'handlebars',
  	            'xml'
  	          ]
  	        }
  	      },
  	      // we need this for now for jSX
  	      {
  	        className: 'tag',
  	        begin: /<>|<\/>/
  	      },
  	      // open tag
  	      {
  	        className: 'tag',
  	        begin: regex.concat(
  	          /</,
  	          regex.lookahead(regex.concat(
  	            TAG_NAME_RE,
  	            // <tag/>
  	            // <tag>
  	            // <tag ...
  	            regex.either(/\/>/, />/, /\s/)
  	          ))
  	        ),
  	        end: /\/?>/,
  	        contains: [
  	          {
  	            className: 'name',
  	            begin: TAG_NAME_RE,
  	            relevance: 0,
  	            starts: TAG_INTERNALS
  	          }
  	        ]
  	      },
  	      // close tag
  	      {
  	        className: 'tag',
  	        begin: regex.concat(
  	          /<\//,
  	          regex.lookahead(regex.concat(
  	            TAG_NAME_RE, />/
  	          ))
  	        ),
  	        contains: [
  	          {
  	            className: 'name',
  	            begin: TAG_NAME_RE,
  	            relevance: 0
  	          },
  	          {
  	            begin: />/,
  	            relevance: 0,
  	            endsParent: true
  	          }
  	        ]
  	      }
  	    ]
  	  };
  	}

  	xml_1 = xml;
  	return xml_1;
  }

  /*
  Language: AsciiDoc
  Requires: xml.js
  Author: Dan Allen <dan.j.allen@gmail.com>
  Website: http://asciidoc.org
  Description: A semantic, text-based document format that can be exported to HTML, DocBook and other backends.
  Category: markup
  */

  var asciidoc_1;
  var hasRequiredAsciidoc;

  function requireAsciidoc () {
  	if (hasRequiredAsciidoc) return asciidoc_1;
  	hasRequiredAsciidoc = 1;
  	/** @type LanguageFn */
  	function asciidoc(hljs) {
  	  const regex = hljs.regex;
  	  const HORIZONTAL_RULE = {
  	    begin: '^\'{3,}[ \\t]*$',
  	    relevance: 10
  	  };
  	  const ESCAPED_FORMATTING = [
  	    // escaped constrained formatting marks (i.e., \* \_ or \`)
  	    { begin: /\\[*_`]/ },
  	    // escaped unconstrained formatting marks (i.e., \\** \\__ or \\``)
  	    // must ignore until the next formatting marks
  	    // this rule might not be 100% compliant with Asciidoctor 2.0 but we are entering undefined behavior territory...
  	    { begin: /\\\\\*{2}[^\n]*?\*{2}/ },
  	    { begin: /\\\\_{2}[^\n]*_{2}/ },
  	    { begin: /\\\\`{2}[^\n]*`{2}/ },
  	    // guard: constrained formatting mark may not be preceded by ":", ";" or
  	    // "}". match these so the constrained rule doesn't see them
  	    { begin: /[:;}][*_`](?![*_`])/ }
  	  ];
  	  const STRONG = [
  	    // inline unconstrained strong (single line)
  	    {
  	      className: 'strong',
  	      begin: /\*{2}([^\n]+?)\*{2}/
  	    },
  	    // inline unconstrained strong (multi-line)
  	    {
  	      className: 'strong',
  	      begin: regex.concat(
  	        /\*\*/,
  	        /((\*(?!\*)|\\[^\n]|[^*\n\\])+\n)+/,
  	        /(\*(?!\*)|\\[^\n]|[^*\n\\])*/,
  	        /\*\*/
  	      ),
  	      relevance: 0
  	    },
  	    // inline constrained strong (single line)
  	    {
  	      className: 'strong',
  	      // must not precede or follow a word character
  	      begin: /\B\*(\S|\S[^\n]*?\S)\*(?!\w)/
  	    },
  	    // inline constrained strong (multi-line)
  	    {
  	      className: 'strong',
  	      // must not precede or follow a word character
  	      begin: /\*[^\s]([^\n]+\n)+([^\n]+)\*/
  	    }
  	  ];
  	  const EMPHASIS = [
  	    // inline unconstrained emphasis (single line)
  	    {
  	      className: 'emphasis',
  	      begin: /_{2}([^\n]+?)_{2}/
  	    },
  	    // inline unconstrained emphasis (multi-line)
  	    {
  	      className: 'emphasis',
  	      begin: regex.concat(
  	        /__/,
  	        /((_(?!_)|\\[^\n]|[^_\n\\])+\n)+/,
  	        /(_(?!_)|\\[^\n]|[^_\n\\])*/,
  	        /__/
  	      ),
  	      relevance: 0
  	    },
  	    // inline constrained emphasis (single line)
  	    {
  	      className: 'emphasis',
  	      // must not precede or follow a word character
  	      begin: /\b_(\S|\S[^\n]*?\S)_(?!\w)/
  	    },
  	    // inline constrained emphasis (multi-line)
  	    {
  	      className: 'emphasis',
  	      // must not precede or follow a word character
  	      begin: /_[^\s]([^\n]+\n)+([^\n]+)_/
  	    },
  	    // inline constrained emphasis using single quote (legacy)
  	    {
  	      className: 'emphasis',
  	      // must not follow a word character or be followed by a single quote or space
  	      begin: '\\B\'(?![\'\\s])',
  	      end: '(\\n{2}|\')',
  	      // allow escaped single quote followed by word char
  	      contains: [
  	        {
  	          begin: '\\\\\'\\w',
  	          relevance: 0
  	        }
  	      ],
  	      relevance: 0
  	    }
  	  ];
  	  const ADMONITION = {
  	    className: 'symbol',
  	    begin: '^(NOTE|TIP|IMPORTANT|WARNING|CAUTION):\\s+',
  	    relevance: 10
  	  };
  	  const BULLET_LIST = {
  	    className: 'bullet',
  	    begin: '^(\\*+|-+|\\.+|[^\\n]+?::)\\s+'
  	  };

  	  return {
  	    name: 'AsciiDoc',
  	    aliases: [ 'adoc' ],
  	    contains: [
  	      // block comment
  	      hljs.COMMENT(
  	        '^/{4,}\\n',
  	        '\\n/{4,}$',
  	        // can also be done as...
  	        // '^/{4,}$',
  	        // '^/{4,}$',
  	        { relevance: 10 }
  	      ),
  	      // line comment
  	      hljs.COMMENT(
  	        '^//',
  	        '$',
  	        { relevance: 0 }
  	      ),
  	      // title
  	      {
  	        className: 'title',
  	        begin: '^\\.\\w.*$'
  	      },
  	      // example, admonition & sidebar blocks
  	      {
  	        begin: '^[=\\*]{4,}\\n',
  	        end: '\\n^[=\\*]{4,}$',
  	        relevance: 10
  	      },
  	      // headings
  	      {
  	        className: 'section',
  	        relevance: 10,
  	        variants: [
  	          { begin: '^(={1,6})[ \t].+?([ \t]\\1)?$' },
  	          { begin: '^[^\\[\\]\\n]+?\\n[=\\-~\\^\\+]{2,}$' }
  	        ]
  	      },
  	      // document attributes
  	      {
  	        className: 'meta',
  	        begin: '^:.+?:',
  	        end: '\\s',
  	        excludeEnd: true,
  	        relevance: 10
  	      },
  	      // block attributes
  	      {
  	        className: 'meta',
  	        begin: '^\\[.+?\\]$',
  	        relevance: 0
  	      },
  	      // quoteblocks
  	      {
  	        className: 'quote',
  	        begin: '^_{4,}\\n',
  	        end: '\\n_{4,}$',
  	        relevance: 10
  	      },
  	      // listing and literal blocks
  	      {
  	        className: 'code',
  	        begin: '^[\\-\\.]{4,}\\n',
  	        end: '\\n[\\-\\.]{4,}$',
  	        relevance: 10
  	      },
  	      // passthrough blocks
  	      {
  	        begin: '^\\+{4,}\\n',
  	        end: '\\n\\+{4,}$',
  	        contains: [
  	          {
  	            begin: '<',
  	            end: '>',
  	            subLanguage: 'xml',
  	            relevance: 0
  	          }
  	        ],
  	        relevance: 10
  	      },

  	      BULLET_LIST,
  	      ADMONITION,
  	      ...ESCAPED_FORMATTING,
  	      ...STRONG,
  	      ...EMPHASIS,

  	      // inline smart quotes
  	      {
  	        className: 'string',
  	        variants: [
  	          { begin: "``.+?''" },
  	          { begin: "`.+?'" }
  	        ]
  	      },
  	      // inline unconstrained emphasis
  	      {
  	        className: 'code',
  	        begin: /`{2}/,
  	        end: /(\n{2}|`{2})/
  	      },
  	      // inline code snippets (TODO should get same treatment as strong and emphasis)
  	      {
  	        className: 'code',
  	        begin: '(`.+?`|\\+.+?\\+)',
  	        relevance: 0
  	      },
  	      // indented literal block
  	      {
  	        className: 'code',
  	        begin: '^[ \\t]',
  	        end: '$',
  	        relevance: 0
  	      },
  	      HORIZONTAL_RULE,
  	      // images and links
  	      {
  	        begin: '(link:)?(http|https|ftp|file|irc|image:?):\\S+?\\[[^[]*?\\]',
  	        returnBegin: true,
  	        contains: [
  	          {
  	            begin: '(link|image:?):',
  	            relevance: 0
  	          },
  	          {
  	            className: 'link',
  	            begin: '\\w',
  	            end: '[^\\[]+',
  	            relevance: 0
  	          },
  	          {
  	            className: 'string',
  	            begin: '\\[',
  	            end: '\\]',
  	            excludeBegin: true,
  	            excludeEnd: true,
  	            relevance: 0
  	          }
  	        ],
  	        relevance: 10
  	      }
  	    ]
  	  };
  	}

  	asciidoc_1 = asciidoc;
  	return asciidoc_1;
  }

  /*
  Language: AspectJ
  Author: Hakan Ozler <ozler.hakan@gmail.com>
  Website: https://www.eclipse.org/aspectj/
  Description: Syntax Highlighting for the AspectJ Language which is a general-purpose aspect-oriented extension to the Java programming language.
  Audit: 2020
  */

  var aspectj_1;
  var hasRequiredAspectj;

  function requireAspectj () {
  	if (hasRequiredAspectj) return aspectj_1;
  	hasRequiredAspectj = 1;
  	/** @type LanguageFn */
  	function aspectj(hljs) {
  	  const regex = hljs.regex;
  	  const KEYWORDS = [
  	    "false",
  	    "synchronized",
  	    "int",
  	    "abstract",
  	    "float",
  	    "private",
  	    "char",
  	    "boolean",
  	    "static",
  	    "null",
  	    "if",
  	    "const",
  	    "for",
  	    "true",
  	    "while",
  	    "long",
  	    "throw",
  	    "strictfp",
  	    "finally",
  	    "protected",
  	    "import",
  	    "native",
  	    "final",
  	    "return",
  	    "void",
  	    "enum",
  	    "else",
  	    "extends",
  	    "implements",
  	    "break",
  	    "transient",
  	    "new",
  	    "catch",
  	    "instanceof",
  	    "byte",
  	    "super",
  	    "volatile",
  	    "case",
  	    "assert",
  	    "short",
  	    "package",
  	    "default",
  	    "double",
  	    "public",
  	    "try",
  	    "this",
  	    "switch",
  	    "continue",
  	    "throws",
  	    "privileged",
  	    "aspectOf",
  	    "adviceexecution",
  	    "proceed",
  	    "cflowbelow",
  	    "cflow",
  	    "initialization",
  	    "preinitialization",
  	    "staticinitialization",
  	    "withincode",
  	    "target",
  	    "within",
  	    "execution",
  	    "getWithinTypeName",
  	    "handler",
  	    "thisJoinPoint",
  	    "thisJoinPointStaticPart",
  	    "thisEnclosingJoinPointStaticPart",
  	    "declare",
  	    "parents",
  	    "warning",
  	    "error",
  	    "soft",
  	    "precedence",
  	    "thisAspectInstance"
  	  ];
  	  const SHORTKEYS = [
  	    "get",
  	    "set",
  	    "args",
  	    "call"
  	  ];

  	  return {
  	    name: 'AspectJ',
  	    keywords: KEYWORDS,
  	    illegal: /<\/|#/,
  	    contains: [
  	      hljs.COMMENT(
  	        /\/\*\*/,
  	        /\*\//,
  	        {
  	          relevance: 0,
  	          contains: [
  	            {
  	              // eat up @'s in emails to prevent them to be recognized as doctags
  	              begin: /\w+@/,
  	              relevance: 0
  	            },
  	            {
  	              className: 'doctag',
  	              begin: /@[A-Za-z]+/
  	            }
  	          ]
  	        }
  	      ),
  	      hljs.C_LINE_COMMENT_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE,
  	      hljs.APOS_STRING_MODE,
  	      hljs.QUOTE_STRING_MODE,
  	      {
  	        className: 'class',
  	        beginKeywords: 'aspect',
  	        end: /[{;=]/,
  	        excludeEnd: true,
  	        illegal: /[:;"\[\]]/,
  	        contains: [
  	          { beginKeywords: 'extends implements pertypewithin perthis pertarget percflowbelow percflow issingleton' },
  	          hljs.UNDERSCORE_TITLE_MODE,
  	          {
  	            begin: /\([^\)]*/,
  	            end: /[)]+/,
  	            keywords: KEYWORDS.concat(SHORTKEYS),
  	            excludeEnd: false
  	          }
  	        ]
  	      },
  	      {
  	        className: 'class',
  	        beginKeywords: 'class interface',
  	        end: /[{;=]/,
  	        excludeEnd: true,
  	        relevance: 0,
  	        keywords: 'class interface',
  	        illegal: /[:"\[\]]/,
  	        contains: [
  	          { beginKeywords: 'extends implements' },
  	          hljs.UNDERSCORE_TITLE_MODE
  	        ]
  	      },
  	      {
  	        // AspectJ Constructs
  	        beginKeywords: 'pointcut after before around throwing returning',
  	        end: /[)]/,
  	        excludeEnd: false,
  	        illegal: /["\[\]]/,
  	        contains: [
  	          {
  	            begin: regex.concat(hljs.UNDERSCORE_IDENT_RE, /\s*\(/),
  	            returnBegin: true,
  	            contains: [ hljs.UNDERSCORE_TITLE_MODE ]
  	          }
  	        ]
  	      },
  	      {
  	        begin: /[:]/,
  	        returnBegin: true,
  	        end: /[{;]/,
  	        relevance: 0,
  	        excludeEnd: false,
  	        keywords: KEYWORDS,
  	        illegal: /["\[\]]/,
  	        contains: [
  	          {
  	            begin: regex.concat(hljs.UNDERSCORE_IDENT_RE, /\s*\(/),
  	            keywords: KEYWORDS.concat(SHORTKEYS),
  	            relevance: 0
  	          },
  	          hljs.QUOTE_STRING_MODE
  	        ]
  	      },
  	      {
  	        // this prevents 'new Name(...), or throw ...' from being recognized as a function definition
  	        beginKeywords: 'new throw',
  	        relevance: 0
  	      },
  	      {
  	        // the function class is a bit different for AspectJ compared to the Java language
  	        className: 'function',
  	        begin: /\w+ +\w+(\.\w+)?\s*\([^\)]*\)\s*((throws)[\w\s,]+)?[\{;]/,
  	        returnBegin: true,
  	        end: /[{;=]/,
  	        keywords: KEYWORDS,
  	        excludeEnd: true,
  	        contains: [
  	          {
  	            begin: regex.concat(hljs.UNDERSCORE_IDENT_RE, /\s*\(/),
  	            returnBegin: true,
  	            relevance: 0,
  	            contains: [ hljs.UNDERSCORE_TITLE_MODE ]
  	          },
  	          {
  	            className: 'params',
  	            begin: /\(/,
  	            end: /\)/,
  	            relevance: 0,
  	            keywords: KEYWORDS,
  	            contains: [
  	              hljs.APOS_STRING_MODE,
  	              hljs.QUOTE_STRING_MODE,
  	              hljs.C_NUMBER_MODE,
  	              hljs.C_BLOCK_COMMENT_MODE
  	            ]
  	          },
  	          hljs.C_LINE_COMMENT_MODE,
  	          hljs.C_BLOCK_COMMENT_MODE
  	        ]
  	      },
  	      hljs.C_NUMBER_MODE,
  	      {
  	        // annotation is also used in this language
  	        className: 'meta',
  	        begin: /@[A-Za-z]+/
  	      }
  	    ]
  	  };
  	}

  	aspectj_1 = aspectj;
  	return aspectj_1;
  }

  /*
  Language: AutoHotkey
  Author: Seongwon Lee <dlimpid@gmail.com>
  Description: AutoHotkey language definition
  Category: scripting
  */

  var autohotkey_1;
  var hasRequiredAutohotkey;

  function requireAutohotkey () {
  	if (hasRequiredAutohotkey) return autohotkey_1;
  	hasRequiredAutohotkey = 1;
  	/** @type LanguageFn */
  	function autohotkey(hljs) {
  	  const BACKTICK_ESCAPE = { begin: '`[\\s\\S]' };

  	  return {
  	    name: 'AutoHotkey',
  	    case_insensitive: true,
  	    aliases: [ 'ahk' ],
  	    keywords: {
  	      keyword: 'Break Continue Critical Exit ExitApp Gosub Goto New OnExit Pause return SetBatchLines SetTimer Suspend Thread Throw Until ahk_id ahk_class ahk_pid ahk_exe ahk_group',
  	      literal: 'true false NOT AND OR',
  	      built_in: 'ComSpec Clipboard ClipboardAll ErrorLevel'
  	    },
  	    contains: [
  	      BACKTICK_ESCAPE,
  	      hljs.inherit(hljs.QUOTE_STRING_MODE, { contains: [ BACKTICK_ESCAPE ] }),
  	      hljs.COMMENT(';', '$', { relevance: 0 }),
  	      hljs.C_BLOCK_COMMENT_MODE,
  	      {
  	        className: 'number',
  	        begin: hljs.NUMBER_RE,
  	        relevance: 0
  	      },
  	      {
  	        // subst would be the most accurate however fails the point of
  	        // highlighting. variable is comparably the most accurate that actually
  	        // has some effect
  	        className: 'variable',
  	        begin: '%[a-zA-Z0-9#_$@]+%'
  	      },
  	      {
  	        className: 'built_in',
  	        begin: '^\\s*\\w+\\s*(,|%)'
  	        // I don't really know if this is totally relevant
  	      },
  	      {
  	        // symbol would be most accurate however is highlighted just like
  	        // built_in and that makes up a lot of AutoHotkey code meaning that it
  	        // would fail to highlight anything
  	        className: 'title',
  	        variants: [
  	          { begin: '^[^\\n";]+::(?!=)' },
  	          {
  	            begin: '^[^\\n";]+:(?!=)',
  	            // zero relevance as it catches a lot of things
  	            // followed by a single ':' in many languages
  	            relevance: 0
  	          }
  	        ]
  	      },
  	      {
  	        className: 'meta',
  	        begin: '^\\s*#\\w+',
  	        end: '$',
  	        relevance: 0
  	      },
  	      {
  	        className: 'built_in',
  	        begin: 'A_[a-zA-Z0-9]+'
  	      },
  	      {
  	        // consecutive commas, not for highlighting but just for relevance
  	        begin: ',\\s*,' }
  	    ]
  	  };
  	}

  	autohotkey_1 = autohotkey;
  	return autohotkey_1;
  }

  /*
  Language: AutoIt
  Author: Manh Tuan <junookyo@gmail.com>
  Description: AutoIt language definition
  Category: scripting
  */

  var autoit_1;
  var hasRequiredAutoit;

  function requireAutoit () {
  	if (hasRequiredAutoit) return autoit_1;
  	hasRequiredAutoit = 1;
  	/** @type LanguageFn */
  	function autoit(hljs) {
  	  const KEYWORDS = 'ByRef Case Const ContinueCase ContinueLoop '
  	        + 'Dim Do Else ElseIf EndFunc EndIf EndSelect '
  	        + 'EndSwitch EndWith Enum Exit ExitLoop For Func '
  	        + 'Global If In Local Next ReDim Return Select Static '
  	        + 'Step Switch Then To Until Volatile WEnd While With';

  	  const DIRECTIVES = [
  	    "EndRegion",
  	    "forcedef",
  	    "forceref",
  	    "ignorefunc",
  	    "include",
  	    "include-once",
  	    "NoTrayIcon",
  	    "OnAutoItStartRegister",
  	    "pragma",
  	    "Region",
  	    "RequireAdmin",
  	    "Tidy_Off",
  	    "Tidy_On",
  	    "Tidy_Parameters"
  	  ];

  	  const LITERAL = 'True False And Null Not Or Default';

  	  const BUILT_IN =
  	          'Abs ACos AdlibRegister AdlibUnRegister Asc AscW ASin Assign ATan AutoItSetOption AutoItWinGetTitle AutoItWinSetTitle Beep Binary BinaryLen BinaryMid BinaryToString BitAND BitNOT BitOR BitRotate BitShift BitXOR BlockInput Break Call CDTray Ceiling Chr ChrW ClipGet ClipPut ConsoleRead ConsoleWrite ConsoleWriteError ControlClick ControlCommand ControlDisable ControlEnable ControlFocus ControlGetFocus ControlGetHandle ControlGetPos ControlGetText ControlHide ControlListView ControlMove ControlSend ControlSetText ControlShow ControlTreeView Cos Dec DirCopy DirCreate DirGetSize DirMove DirRemove DllCall DllCallAddress DllCallbackFree DllCallbackGetPtr DllCallbackRegister DllClose DllOpen DllStructCreate DllStructGetData DllStructGetPtr DllStructGetSize DllStructSetData DriveGetDrive DriveGetFileSystem DriveGetLabel DriveGetSerial DriveGetType DriveMapAdd DriveMapDel DriveMapGet DriveSetLabel DriveSpaceFree DriveSpaceTotal DriveStatus EnvGet EnvSet EnvUpdate Eval Execute Exp FileChangeDir FileClose FileCopy FileCreateNTFSLink FileCreateShortcut FileDelete FileExists FileFindFirstFile FileFindNextFile FileFlush FileGetAttrib FileGetEncoding FileGetLongName FileGetPos FileGetShortcut FileGetShortName FileGetSize FileGetTime FileGetVersion FileInstall FileMove FileOpen FileOpenDialog FileRead FileReadLine FileReadToArray FileRecycle FileRecycleEmpty FileSaveDialog FileSelectFolder FileSetAttrib FileSetEnd FileSetPos FileSetTime FileWrite FileWriteLine Floor FtpSetProxy FuncName GUICreate GUICtrlCreateAvi GUICtrlCreateButton GUICtrlCreateCheckbox GUICtrlCreateCombo GUICtrlCreateContextMenu GUICtrlCreateDate GUICtrlCreateDummy GUICtrlCreateEdit GUICtrlCreateGraphic GUICtrlCreateGroup GUICtrlCreateIcon GUICtrlCreateInput GUICtrlCreateLabel GUICtrlCreateList GUICtrlCreateListView GUICtrlCreateListViewItem GUICtrlCreateMenu GUICtrlCreateMenuItem GUICtrlCreateMonthCal GUICtrlCreateObj GUICtrlCreatePic GUICtrlCreateProgress GUICtrlCreateRadio GUICtrlCreateSlider GUICtrlCreateTab GUICtrlCreateTabItem GUICtrlCreateTreeView GUICtrlCreateTreeViewItem GUICtrlCreateUpdown GUICtrlDelete GUICtrlGetHandle GUICtrlGetState GUICtrlRead GUICtrlRecvMsg GUICtrlRegisterListViewSort GUICtrlSendMsg GUICtrlSendToDummy GUICtrlSetBkColor GUICtrlSetColor GUICtrlSetCursor GUICtrlSetData GUICtrlSetDefBkColor GUICtrlSetDefColor GUICtrlSetFont GUICtrlSetGraphic GUICtrlSetImage GUICtrlSetLimit GUICtrlSetOnEvent GUICtrlSetPos GUICtrlSetResizing GUICtrlSetState GUICtrlSetStyle GUICtrlSetTip GUIDelete GUIGetCursorInfo GUIGetMsg GUIGetStyle GUIRegisterMsg GUISetAccelerators GUISetBkColor GUISetCoord GUISetCursor GUISetFont GUISetHelp GUISetIcon GUISetOnEvent GUISetState GUISetStyle GUIStartGroup GUISwitch Hex HotKeySet HttpSetProxy HttpSetUserAgent HWnd InetClose InetGet InetGetInfo InetGetSize InetRead IniDelete IniRead IniReadSection IniReadSectionNames IniRenameSection IniWrite IniWriteSection InputBox Int IsAdmin IsArray IsBinary IsBool IsDeclared IsDllStruct IsFloat IsFunc IsHWnd IsInt IsKeyword IsNumber IsObj IsPtr IsString Log MemGetStats Mod MouseClick MouseClickDrag MouseDown MouseGetCursor MouseGetPos MouseMove MouseUp MouseWheel MsgBox Number ObjCreate ObjCreateInterface ObjEvent ObjGet ObjName OnAutoItExitRegister OnAutoItExitUnRegister Ping PixelChecksum PixelGetColor PixelSearch ProcessClose ProcessExists ProcessGetStats ProcessList ProcessSetPriority ProcessWait ProcessWaitClose ProgressOff ProgressOn ProgressSet Ptr Random RegDelete RegEnumKey RegEnumVal RegRead RegWrite Round Run RunAs RunAsWait RunWait Send SendKeepActive SetError SetExtended ShellExecute ShellExecuteWait Shutdown Sin Sleep SoundPlay SoundSetWaveVolume SplashImageOn SplashOff SplashTextOn Sqrt SRandom StatusbarGetText StderrRead StdinWrite StdioClose StdoutRead String StringAddCR StringCompare StringFormat StringFromASCIIArray StringInStr StringIsAlNum StringIsAlpha StringIsASCII StringIsDigit StringIsFloat StringIsInt StringIsLower StringIsSpace StringIsUpper StringIsXDigit StringLeft StringLen StringLower StringMid StringRegExp StringRegExpReplace StringReplace StringReverse StringRight StringSplit StringStripCR StringStripWS StringToASCIIArray StringToBinary StringTrimLeft StringTrimRight StringUpper Tan TCPAccept TCPCloseSocket TCPConnect TCPListen TCPNameToIP TCPRecv TCPSend TCPShutdown, UDPShutdown TCPStartup, UDPStartup TimerDiff TimerInit ToolTip TrayCreateItem TrayCreateMenu TrayGetMsg TrayItemDelete TrayItemGetHandle TrayItemGetState TrayItemGetText TrayItemSetOnEvent TrayItemSetState TrayItemSetText TraySetClick TraySetIcon TraySetOnEvent TraySetPauseIcon TraySetState TraySetToolTip TrayTip UBound UDPBind UDPCloseSocket UDPOpen UDPRecv UDPSend VarGetType WinActivate WinActive WinClose WinExists WinFlash WinGetCaretPos WinGetClassList WinGetClientSize WinGetHandle WinGetPos WinGetProcess WinGetState WinGetText WinGetTitle WinKill WinList WinMenuSelectItem WinMinimizeAll WinMinimizeAllUndo WinMove WinSetOnTop WinSetState WinSetTitle WinSetTrans WinWait WinWaitActive WinWaitClose WinWaitNotActive';

  	  const COMMENT = { variants: [
  	    hljs.COMMENT(';', '$', { relevance: 0 }),
  	    hljs.COMMENT('#cs', '#ce'),
  	    hljs.COMMENT('#comments-start', '#comments-end')
  	  ] };

  	  const VARIABLE = { begin: '\\$[A-z0-9_]+' };

  	  const STRING = {
  	    className: 'string',
  	    variants: [
  	      {
  	        begin: /"/,
  	        end: /"/,
  	        contains: [
  	          {
  	            begin: /""/,
  	            relevance: 0
  	          }
  	        ]
  	      },
  	      {
  	        begin: /'/,
  	        end: /'/,
  	        contains: [
  	          {
  	            begin: /''/,
  	            relevance: 0
  	          }
  	        ]
  	      }
  	    ]
  	  };

  	  const NUMBER = { variants: [
  	    hljs.BINARY_NUMBER_MODE,
  	    hljs.C_NUMBER_MODE
  	  ] };

  	  const PREPROCESSOR = {
  	    className: 'meta',
  	    begin: '#',
  	    end: '$',
  	    keywords: { keyword: DIRECTIVES },
  	    contains: [
  	      {
  	        begin: /\\\n/,
  	        relevance: 0
  	      },
  	      {
  	        beginKeywords: 'include',
  	        keywords: { keyword: 'include' },
  	        end: '$',
  	        contains: [
  	          STRING,
  	          {
  	            className: 'string',
  	            variants: [
  	              {
  	                begin: '<',
  	                end: '>'
  	              },
  	              {
  	                begin: /"/,
  	                end: /"/,
  	                contains: [
  	                  {
  	                    begin: /""/,
  	                    relevance: 0
  	                  }
  	                ]
  	              },
  	              {
  	                begin: /'/,
  	                end: /'/,
  	                contains: [
  	                  {
  	                    begin: /''/,
  	                    relevance: 0
  	                  }
  	                ]
  	              }
  	            ]
  	          }
  	        ]
  	      },
  	      STRING,
  	      COMMENT
  	    ]
  	  };

  	  const CONSTANT = {
  	    className: 'symbol',
  	    // begin: '@',
  	    // end: '$',
  	    // keywords: 'AppDataCommonDir AppDataDir AutoItExe AutoItPID AutoItVersion AutoItX64 COM_EventObj CommonFilesDir Compiled ComputerName ComSpec CPUArch CR CRLF DesktopCommonDir DesktopDepth DesktopDir DesktopHeight DesktopRefresh DesktopWidth DocumentsCommonDir error exitCode exitMethod extended FavoritesCommonDir FavoritesDir GUI_CtrlHandle GUI_CtrlId GUI_DragFile GUI_DragId GUI_DropId GUI_WinHandle HomeDrive HomePath HomeShare HotKeyPressed HOUR IPAddress1 IPAddress2 IPAddress3 IPAddress4 KBLayout LF LocalAppDataDir LogonDNSDomain LogonDomain LogonServer MDAY MIN MON MSEC MUILang MyDocumentsDir NumParams OSArch OSBuild OSLang OSServicePack OSType OSVersion ProgramFilesDir ProgramsCommonDir ProgramsDir ScriptDir ScriptFullPath ScriptLineNumber ScriptName SEC StartMenuCommonDir StartMenuDir StartupCommonDir StartupDir SW_DISABLE SW_ENABLE SW_HIDE SW_LOCK SW_MAXIMIZE SW_MINIMIZE SW_RESTORE SW_SHOW SW_SHOWDEFAULT SW_SHOWMAXIMIZED SW_SHOWMINIMIZED SW_SHOWMINNOACTIVE SW_SHOWNA SW_SHOWNOACTIVATE SW_SHOWNORMAL SW_UNLOCK SystemDir TAB TempDir TRAY_ID TrayIconFlashing TrayIconVisible UserName UserProfileDir WDAY WindowsDir WorkingDir YDAY YEAR',
  	    // relevance: 5
  	    begin: '@[A-z0-9_]+'
  	  };

  	  const FUNCTION = {
  	    beginKeywords: 'Func',
  	    end: '$',
  	    illegal: '\\$|\\[|%',
  	    contains: [
  	      hljs.inherit(hljs.UNDERSCORE_TITLE_MODE, { className: "title.function" }),
  	      {
  	        className: 'params',
  	        begin: '\\(',
  	        end: '\\)',
  	        contains: [
  	          VARIABLE,
  	          STRING,
  	          NUMBER
  	        ]
  	      }
  	    ]
  	  };

  	  return {
  	    name: 'AutoIt',
  	    case_insensitive: true,
  	    illegal: /\/\*/,
  	    keywords: {
  	      keyword: KEYWORDS,
  	      built_in: BUILT_IN,
  	      literal: LITERAL
  	    },
  	    contains: [
  	      COMMENT,
  	      VARIABLE,
  	      STRING,
  	      NUMBER,
  	      PREPROCESSOR,
  	      CONSTANT,
  	      FUNCTION
  	    ]
  	  };
  	}

  	autoit_1 = autoit;
  	return autoit_1;
  }

  /*
  Language: AVR Assembly
  Author: Vladimir Ermakov <vooon341@gmail.com>
  Category: assembler
  Website: https://www.microchip.com/webdoc/avrassembler/avrassembler.wb_instruction_list.html
  */

  var avrasm_1;
  var hasRequiredAvrasm;

  function requireAvrasm () {
  	if (hasRequiredAvrasm) return avrasm_1;
  	hasRequiredAvrasm = 1;
  	/** @type LanguageFn */
  	function avrasm(hljs) {
  	  return {
  	    name: 'AVR Assembly',
  	    case_insensitive: true,
  	    keywords: {
  	      $pattern: '\\.?' + hljs.IDENT_RE,
  	      keyword:
  	        /* mnemonic */
  	        'adc add adiw and andi asr bclr bld brbc brbs brcc brcs break breq brge brhc brhs '
  	        + 'brid brie brlo brlt brmi brne brpl brsh brtc brts brvc brvs bset bst call cbi cbr '
  	        + 'clc clh cli cln clr cls clt clv clz com cp cpc cpi cpse dec eicall eijmp elpm eor '
  	        + 'fmul fmuls fmulsu icall ijmp in inc jmp ld ldd ldi lds lpm lsl lsr mov movw mul '
  	        + 'muls mulsu neg nop or ori out pop push rcall ret reti rjmp rol ror sbc sbr sbrc sbrs '
  	        + 'sec seh sbi sbci sbic sbis sbiw sei sen ser ses set sev sez sleep spm st std sts sub '
  	        + 'subi swap tst wdr',
  	      built_in:
  	        /* general purpose registers */
  	        'r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 '
  	        + 'r23 r24 r25 r26 r27 r28 r29 r30 r31 x|0 xh xl y|0 yh yl z|0 zh zl '
  	        /* IO Registers (ATMega128) */
  	        + 'ucsr1c udr1 ucsr1a ucsr1b ubrr1l ubrr1h ucsr0c ubrr0h tccr3c tccr3a tccr3b tcnt3h '
  	        + 'tcnt3l ocr3ah ocr3al ocr3bh ocr3bl ocr3ch ocr3cl icr3h icr3l etimsk etifr tccr1c '
  	        + 'ocr1ch ocr1cl twcr twdr twar twsr twbr osccal xmcra xmcrb eicra spmcsr spmcr portg '
  	        + 'ddrg ping portf ddrf sreg sph spl xdiv rampz eicrb eimsk gimsk gicr eifr gifr timsk '
  	        + 'tifr mcucr mcucsr tccr0 tcnt0 ocr0 assr tccr1a tccr1b tcnt1h tcnt1l ocr1ah ocr1al '
  	        + 'ocr1bh ocr1bl icr1h icr1l tccr2 tcnt2 ocr2 ocdr wdtcr sfior eearh eearl eedr eecr '
  	        + 'porta ddra pina portb ddrb pinb portc ddrc pinc portd ddrd pind spdr spsr spcr udr0 '
  	        + 'ucsr0a ucsr0b ubrr0l acsr admux adcsr adch adcl porte ddre pine pinf',
  	      meta:
  	        '.byte .cseg .db .def .device .dseg .dw .endmacro .equ .eseg .exit .include .list '
  	        + '.listmac .macro .nolist .org .set'
  	    },
  	    contains: [
  	      hljs.C_BLOCK_COMMENT_MODE,
  	      hljs.COMMENT(
  	        ';',
  	        '$',
  	        { relevance: 0 }
  	      ),
  	      hljs.C_NUMBER_MODE, // 0x..., decimal, float
  	      hljs.BINARY_NUMBER_MODE, // 0b...
  	      {
  	        className: 'number',
  	        begin: '\\b(\\$[a-zA-Z0-9]+|0o[0-7]+)' // $..., 0o...
  	      },
  	      hljs.QUOTE_STRING_MODE,
  	      {
  	        className: 'string',
  	        begin: '\'',
  	        end: '[^\\\\]\'',
  	        illegal: '[^\\\\][^\']'
  	      },
  	      {
  	        className: 'symbol',
  	        begin: '^[A-Za-z0-9_.$]+:'
  	      },
  	      {
  	        className: 'meta',
  	        begin: '#',
  	        end: '$'
  	      },
  	      { // substitution within a macro
  	        className: 'subst',
  	        begin: '@[0-9]+'
  	      }
  	    ]
  	  };
  	}

  	avrasm_1 = avrasm;
  	return avrasm_1;
  }

  /*
  Language: Awk
  Author: Matthew Daly <matthewbdaly@gmail.com>
  Website: https://www.gnu.org/software/gawk/manual/gawk.html
  Description: language definition for Awk scripts
  */

  var awk_1;
  var hasRequiredAwk;

  function requireAwk () {
  	if (hasRequiredAwk) return awk_1;
  	hasRequiredAwk = 1;
  	/** @type LanguageFn */
  	function awk(hljs) {
  	  const VARIABLE = {
  	    className: 'variable',
  	    variants: [
  	      { begin: /\$[\w\d#@][\w\d_]*/ },
  	      { begin: /\$\{(.*?)\}/ }
  	    ]
  	  };
  	  const KEYWORDS = 'BEGIN END if else while do for in break continue delete next nextfile function func exit|10';
  	  const STRING = {
  	    className: 'string',
  	    contains: [ hljs.BACKSLASH_ESCAPE ],
  	    variants: [
  	      {
  	        begin: /(u|b)?r?'''/,
  	        end: /'''/,
  	        relevance: 10
  	      },
  	      {
  	        begin: /(u|b)?r?"""/,
  	        end: /"""/,
  	        relevance: 10
  	      },
  	      {
  	        begin: /(u|r|ur)'/,
  	        end: /'/,
  	        relevance: 10
  	      },
  	      {
  	        begin: /(u|r|ur)"/,
  	        end: /"/,
  	        relevance: 10
  	      },
  	      {
  	        begin: /(b|br)'/,
  	        end: /'/
  	      },
  	      {
  	        begin: /(b|br)"/,
  	        end: /"/
  	      },
  	      hljs.APOS_STRING_MODE,
  	      hljs.QUOTE_STRING_MODE
  	    ]
  	  };
  	  return {
  	    name: 'Awk',
  	    keywords: { keyword: KEYWORDS },
  	    contains: [
  	      VARIABLE,
  	      STRING,
  	      hljs.REGEXP_MODE,
  	      hljs.HASH_COMMENT_MODE,
  	      hljs.NUMBER_MODE
  	    ]
  	  };
  	}

  	awk_1 = awk;
  	return awk_1;
  }

  /*
  Language: Microsoft X++
  Description: X++ is a language used in Microsoft Dynamics 365, Dynamics AX, and Axapta.
  Author: Dmitri Roudakov <dmitri@roudakov.ru>
  Website: https://dynamics.microsoft.com/en-us/ax-overview/
  Category: enterprise
  */

  var axapta_1;
  var hasRequiredAxapta;

  function requireAxapta () {
  	if (hasRequiredAxapta) return axapta_1;
  	hasRequiredAxapta = 1;
  	/** @type LanguageFn */
  	function axapta(hljs) {
  	  const IDENT_RE = hljs.UNDERSCORE_IDENT_RE;
  	  const BUILT_IN_KEYWORDS = [
  	    'anytype',
  	    'boolean',
  	    'byte',
  	    'char',
  	    'container',
  	    'date',
  	    'double',
  	    'enum',
  	    'guid',
  	    'int',
  	    'int64',
  	    'long',
  	    'real',
  	    'short',
  	    'str',
  	    'utcdatetime',
  	    'var'
  	  ];

  	  const LITERAL_KEYWORDS = [
  	    'default',
  	    'false',
  	    'null',
  	    'true'
  	  ];

  	  const NORMAL_KEYWORDS = [
  	    'abstract',
  	    'as',
  	    'asc',
  	    'avg',
  	    'break',
  	    'breakpoint',
  	    'by',
  	    'byref',
  	    'case',
  	    'catch',
  	    'changecompany',
  	    'class',
  	    'client',
  	    'client',
  	    'common',
  	    'const',
  	    'continue',
  	    'count',
  	    'crosscompany',
  	    'delegate',
  	    'delete_from',
  	    'desc',
  	    'display',
  	    'div',
  	    'do',
  	    'edit',
  	    'else',
  	    'eventhandler',
  	    'exists',
  	    'extends',
  	    'final',
  	    'finally',
  	    'firstfast',
  	    'firstonly',
  	    'firstonly1',
  	    'firstonly10',
  	    'firstonly100',
  	    'firstonly1000',
  	    'flush',
  	    'for',
  	    'forceliterals',
  	    'forcenestedloop',
  	    'forceplaceholders',
  	    'forceselectorder',
  	    'forupdate',
  	    'from',
  	    'generateonly',
  	    'group',
  	    'hint',
  	    'if',
  	    'implements',
  	    'in',
  	    'index',
  	    'insert_recordset',
  	    'interface',
  	    'internal',
  	    'is',
  	    'join',
  	    'like',
  	    'maxof',
  	    'minof',
  	    'mod',
  	    'namespace',
  	    'new',
  	    'next',
  	    'nofetch',
  	    'notexists',
  	    'optimisticlock',
  	    'order',
  	    'outer',
  	    'pessimisticlock',
  	    'print',
  	    'private',
  	    'protected',
  	    'public',
  	    'readonly',
  	    'repeatableread',
  	    'retry',
  	    'return',
  	    'reverse',
  	    'select',
  	    'server',
  	    'setting',
  	    'static',
  	    'sum',
  	    'super',
  	    'switch',
  	    'this',
  	    'throw',
  	    'try',
  	    'ttsabort',
  	    'ttsbegin',
  	    'ttscommit',
  	    'unchecked',
  	    'update_recordset',
  	    'using',
  	    'validtimestate',
  	    'void',
  	    'where',
  	    'while'
  	  ];

  	  const KEYWORDS = {
  	    keyword: NORMAL_KEYWORDS,
  	    built_in: BUILT_IN_KEYWORDS,
  	    literal: LITERAL_KEYWORDS
  	  };

  	  const CLASS_DEFINITION = {
  	    variants: [
  	      { match: [
  	        /(class|interface)\s+/,
  	        IDENT_RE,
  	        /\s+(extends|implements)\s+/,
  	        IDENT_RE
  	      ] },
  	      { match: [
  	        /class\s+/,
  	        IDENT_RE
  	      ] }
  	    ],
  	    scope: {
  	      2: "title.class",
  	      4: "title.class.inherited"
  	    },
  	    keywords: KEYWORDS
  	  };

  	  return {
  	    name: 'X++',
  	    aliases: [ 'x++' ],
  	    keywords: KEYWORDS,
  	    contains: [
  	      hljs.C_LINE_COMMENT_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE,
  	      hljs.APOS_STRING_MODE,
  	      hljs.QUOTE_STRING_MODE,
  	      hljs.C_NUMBER_MODE,
  	      {
  	        className: 'meta',
  	        begin: '#',
  	        end: '$'
  	      },
  	      CLASS_DEFINITION
  	    ]
  	  };
  	}

  	axapta_1 = axapta;
  	return axapta_1;
  }

  /*
  Language: Bash
  Author: vah <vahtenberg@gmail.com>
  Contributrors: Benjamin Pannell <contact@sierrasoftworks.com>
  Website: https://www.gnu.org/software/bash/
  Category: common
  */

  var bash_1;
  var hasRequiredBash;

  function requireBash () {
  	if (hasRequiredBash) return bash_1;
  	hasRequiredBash = 1;
  	/** @type LanguageFn */
  	function bash(hljs) {
  	  const regex = hljs.regex;
  	  const VAR = {};
  	  const BRACED_VAR = {
  	    begin: /\$\{/,
  	    end: /\}/,
  	    contains: [
  	      "self",
  	      {
  	        begin: /:-/,
  	        contains: [ VAR ]
  	      } // default values
  	    ]
  	  };
  	  Object.assign(VAR, {
  	    className: 'variable',
  	    variants: [
  	      { begin: regex.concat(/\$[\w\d#@][\w\d_]*/,
  	        // negative look-ahead tries to avoid matching patterns that are not
  	        // Perl at all like $ident$, @ident@, etc.
  	        `(?![\\w\\d])(?![$])`) },
  	      BRACED_VAR
  	    ]
  	  });

  	  const SUBST = {
  	    className: 'subst',
  	    begin: /\$\(/,
  	    end: /\)/,
  	    contains: [ hljs.BACKSLASH_ESCAPE ]
  	  };
  	  const HERE_DOC = {
  	    begin: /<<-?\s*(?=\w+)/,
  	    starts: { contains: [
  	      hljs.END_SAME_AS_BEGIN({
  	        begin: /(\w+)/,
  	        end: /(\w+)/,
  	        className: 'string'
  	      })
  	    ] }
  	  };
  	  const QUOTE_STRING = {
  	    className: 'string',
  	    begin: /"/,
  	    end: /"/,
  	    contains: [
  	      hljs.BACKSLASH_ESCAPE,
  	      VAR,
  	      SUBST
  	    ]
  	  };
  	  SUBST.contains.push(QUOTE_STRING);
  	  const ESCAPED_QUOTE = {
  	    className: '',
  	    begin: /\\"/

  	  };
  	  const APOS_STRING = {
  	    className: 'string',
  	    begin: /'/,
  	    end: /'/
  	  };
  	  const ARITHMETIC = {
  	    begin: /\$?\(\(/,
  	    end: /\)\)/,
  	    contains: [
  	      {
  	        begin: /\d+#[0-9a-f]+/,
  	        className: "number"
  	      },
  	      hljs.NUMBER_MODE,
  	      VAR
  	    ]
  	  };
  	  const SH_LIKE_SHELLS = [
  	    "fish",
  	    "bash",
  	    "zsh",
  	    "sh",
  	    "csh",
  	    "ksh",
  	    "tcsh",
  	    "dash",
  	    "scsh",
  	  ];
  	  const KNOWN_SHEBANG = hljs.SHEBANG({
  	    binary: `(${SH_LIKE_SHELLS.join("|")})`,
  	    relevance: 10
  	  });
  	  const FUNCTION = {
  	    className: 'function',
  	    begin: /\w[\w\d_]*\s*\(\s*\)\s*\{/,
  	    returnBegin: true,
  	    contains: [ hljs.inherit(hljs.TITLE_MODE, { begin: /\w[\w\d_]*/ }) ],
  	    relevance: 0
  	  };

  	  const KEYWORDS = [
  	    "if",
  	    "then",
  	    "else",
  	    "elif",
  	    "fi",
  	    "for",
  	    "while",
  	    "until",
  	    "in",
  	    "do",
  	    "done",
  	    "case",
  	    "esac",
  	    "function",
  	    "select"
  	  ];

  	  const LITERALS = [
  	    "true",
  	    "false"
  	  ];

  	  // to consume paths to prevent keyword matches inside them
  	  const PATH_MODE = { match: /(\/[a-z._-]+)+/ };

  	  // http://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html
  	  const SHELL_BUILT_INS = [
  	    "break",
  	    "cd",
  	    "continue",
  	    "eval",
  	    "exec",
  	    "exit",
  	    "export",
  	    "getopts",
  	    "hash",
  	    "pwd",
  	    "readonly",
  	    "return",
  	    "shift",
  	    "test",
  	    "times",
  	    "trap",
  	    "umask",
  	    "unset"
  	  ];

  	  const BASH_BUILT_INS = [
  	    "alias",
  	    "bind",
  	    "builtin",
  	    "caller",
  	    "command",
  	    "declare",
  	    "echo",
  	    "enable",
  	    "help",
  	    "let",
  	    "local",
  	    "logout",
  	    "mapfile",
  	    "printf",
  	    "read",
  	    "readarray",
  	    "source",
  	    "type",
  	    "typeset",
  	    "ulimit",
  	    "unalias"
  	  ];

  	  const ZSH_BUILT_INS = [
  	    "autoload",
  	    "bg",
  	    "bindkey",
  	    "bye",
  	    "cap",
  	    "chdir",
  	    "clone",
  	    "comparguments",
  	    "compcall",
  	    "compctl",
  	    "compdescribe",
  	    "compfiles",
  	    "compgroups",
  	    "compquote",
  	    "comptags",
  	    "comptry",
  	    "compvalues",
  	    "dirs",
  	    "disable",
  	    "disown",
  	    "echotc",
  	    "echoti",
  	    "emulate",
  	    "fc",
  	    "fg",
  	    "float",
  	    "functions",
  	    "getcap",
  	    "getln",
  	    "history",
  	    "integer",
  	    "jobs",
  	    "kill",
  	    "limit",
  	    "log",
  	    "noglob",
  	    "popd",
  	    "print",
  	    "pushd",
  	    "pushln",
  	    "rehash",
  	    "sched",
  	    "setcap",
  	    "setopt",
  	    "stat",
  	    "suspend",
  	    "ttyctl",
  	    "unfunction",
  	    "unhash",
  	    "unlimit",
  	    "unsetopt",
  	    "vared",
  	    "wait",
  	    "whence",
  	    "where",
  	    "which",
  	    "zcompile",
  	    "zformat",
  	    "zftp",
  	    "zle",
  	    "zmodload",
  	    "zparseopts",
  	    "zprof",
  	    "zpty",
  	    "zregexparse",
  	    "zsocket",
  	    "zstyle",
  	    "ztcp"
  	  ];

  	  const GNU_CORE_UTILS = [
  	    "chcon",
  	    "chgrp",
  	    "chown",
  	    "chmod",
  	    "cp",
  	    "dd",
  	    "df",
  	    "dir",
  	    "dircolors",
  	    "ln",
  	    "ls",
  	    "mkdir",
  	    "mkfifo",
  	    "mknod",
  	    "mktemp",
  	    "mv",
  	    "realpath",
  	    "rm",
  	    "rmdir",
  	    "shred",
  	    "sync",
  	    "touch",
  	    "truncate",
  	    "vdir",
  	    "b2sum",
  	    "base32",
  	    "base64",
  	    "cat",
  	    "cksum",
  	    "comm",
  	    "csplit",
  	    "cut",
  	    "expand",
  	    "fmt",
  	    "fold",
  	    "head",
  	    "join",
  	    "md5sum",
  	    "nl",
  	    "numfmt",
  	    "od",
  	    "paste",
  	    "ptx",
  	    "pr",
  	    "sha1sum",
  	    "sha224sum",
  	    "sha256sum",
  	    "sha384sum",
  	    "sha512sum",
  	    "shuf",
  	    "sort",
  	    "split",
  	    "sum",
  	    "tac",
  	    "tail",
  	    "tr",
  	    "tsort",
  	    "unexpand",
  	    "uniq",
  	    "wc",
  	    "arch",
  	    "basename",
  	    "chroot",
  	    "date",
  	    "dirname",
  	    "du",
  	    "echo",
  	    "env",
  	    "expr",
  	    "factor",
  	    // "false", // keyword literal already
  	    "groups",
  	    "hostid",
  	    "id",
  	    "link",
  	    "logname",
  	    "nice",
  	    "nohup",
  	    "nproc",
  	    "pathchk",
  	    "pinky",
  	    "printenv",
  	    "printf",
  	    "pwd",
  	    "readlink",
  	    "runcon",
  	    "seq",
  	    "sleep",
  	    "stat",
  	    "stdbuf",
  	    "stty",
  	    "tee",
  	    "test",
  	    "timeout",
  	    // "true", // keyword literal already
  	    "tty",
  	    "uname",
  	    "unlink",
  	    "uptime",
  	    "users",
  	    "who",
  	    "whoami",
  	    "yes"
  	  ];

  	  return {
  	    name: 'Bash',
  	    aliases: [ 'sh' ],
  	    keywords: {
  	      $pattern: /\b[a-z][a-z0-9._-]+\b/,
  	      keyword: KEYWORDS,
  	      literal: LITERALS,
  	      built_in: [
  	        ...SHELL_BUILT_INS,
  	        ...BASH_BUILT_INS,
  	        // Shell modifiers
  	        "set",
  	        "shopt",
  	        ...ZSH_BUILT_INS,
  	        ...GNU_CORE_UTILS
  	      ]
  	    },
  	    contains: [
  	      KNOWN_SHEBANG, // to catch known shells and boost relevancy
  	      hljs.SHEBANG(), // to catch unknown shells but still highlight the shebang
  	      FUNCTION,
  	      ARITHMETIC,
  	      hljs.HASH_COMMENT_MODE,
  	      HERE_DOC,
  	      PATH_MODE,
  	      QUOTE_STRING,
  	      ESCAPED_QUOTE,
  	      APOS_STRING,
  	      VAR
  	    ]
  	  };
  	}

  	bash_1 = bash;
  	return bash_1;
  }

  /*
  Language: BASIC
  Author: Raphaël Assénat <raph@raphnet.net>
  Description: Based on the BASIC reference from the Tandy 1000 guide
  Website: https://en.wikipedia.org/wiki/Tandy_1000
  */

  var basic_1;
  var hasRequiredBasic;

  function requireBasic () {
  	if (hasRequiredBasic) return basic_1;
  	hasRequiredBasic = 1;
  	/** @type LanguageFn */
  	function basic(hljs) {
  	  const KEYWORDS = [
  	    "ABS",
  	    "ASC",
  	    "AND",
  	    "ATN",
  	    "AUTO|0",
  	    "BEEP",
  	    "BLOAD|10",
  	    "BSAVE|10",
  	    "CALL",
  	    "CALLS",
  	    "CDBL",
  	    "CHAIN",
  	    "CHDIR",
  	    "CHR$|10",
  	    "CINT",
  	    "CIRCLE",
  	    "CLEAR",
  	    "CLOSE",
  	    "CLS",
  	    "COLOR",
  	    "COM",
  	    "COMMON",
  	    "CONT",
  	    "COS",
  	    "CSNG",
  	    "CSRLIN",
  	    "CVD",
  	    "CVI",
  	    "CVS",
  	    "DATA",
  	    "DATE$",
  	    "DEFDBL",
  	    "DEFINT",
  	    "DEFSNG",
  	    "DEFSTR",
  	    "DEF|0",
  	    "SEG",
  	    "USR",
  	    "DELETE",
  	    "DIM",
  	    "DRAW",
  	    "EDIT",
  	    "END",
  	    "ENVIRON",
  	    "ENVIRON$",
  	    "EOF",
  	    "EQV",
  	    "ERASE",
  	    "ERDEV",
  	    "ERDEV$",
  	    "ERL",
  	    "ERR",
  	    "ERROR",
  	    "EXP",
  	    "FIELD",
  	    "FILES",
  	    "FIX",
  	    "FOR|0",
  	    "FRE",
  	    "GET",
  	    "GOSUB|10",
  	    "GOTO",
  	    "HEX$",
  	    "IF",
  	    "THEN",
  	    "ELSE|0",
  	    "INKEY$",
  	    "INP",
  	    "INPUT",
  	    "INPUT#",
  	    "INPUT$",
  	    "INSTR",
  	    "IMP",
  	    "INT",
  	    "IOCTL",
  	    "IOCTL$",
  	    "KEY",
  	    "ON",
  	    "OFF",
  	    "LIST",
  	    "KILL",
  	    "LEFT$",
  	    "LEN",
  	    "LET",
  	    "LINE",
  	    "LLIST",
  	    "LOAD",
  	    "LOC",
  	    "LOCATE",
  	    "LOF",
  	    "LOG",
  	    "LPRINT",
  	    "USING",
  	    "LSET",
  	    "MERGE",
  	    "MID$",
  	    "MKDIR",
  	    "MKD$",
  	    "MKI$",
  	    "MKS$",
  	    "MOD",
  	    "NAME",
  	    "NEW",
  	    "NEXT",
  	    "NOISE",
  	    "NOT",
  	    "OCT$",
  	    "ON",
  	    "OR",
  	    "PEN",
  	    "PLAY",
  	    "STRIG",
  	    "OPEN",
  	    "OPTION",
  	    "BASE",
  	    "OUT",
  	    "PAINT",
  	    "PALETTE",
  	    "PCOPY",
  	    "PEEK",
  	    "PMAP",
  	    "POINT",
  	    "POKE",
  	    "POS",
  	    "PRINT",
  	    "PRINT]",
  	    "PSET",
  	    "PRESET",
  	    "PUT",
  	    "RANDOMIZE",
  	    "READ",
  	    "REM",
  	    "RENUM",
  	    "RESET|0",
  	    "RESTORE",
  	    "RESUME",
  	    "RETURN|0",
  	    "RIGHT$",
  	    "RMDIR",
  	    "RND",
  	    "RSET",
  	    "RUN",
  	    "SAVE",
  	    "SCREEN",
  	    "SGN",
  	    "SHELL",
  	    "SIN",
  	    "SOUND",
  	    "SPACE$",
  	    "SPC",
  	    "SQR",
  	    "STEP",
  	    "STICK",
  	    "STOP",
  	    "STR$",
  	    "STRING$",
  	    "SWAP",
  	    "SYSTEM",
  	    "TAB",
  	    "TAN",
  	    "TIME$",
  	    "TIMER",
  	    "TROFF",
  	    "TRON",
  	    "TO",
  	    "USR",
  	    "VAL",
  	    "VARPTR",
  	    "VARPTR$",
  	    "VIEW",
  	    "WAIT",
  	    "WHILE",
  	    "WEND",
  	    "WIDTH",
  	    "WINDOW",
  	    "WRITE",
  	    "XOR"
  	  ];

  	  return {
  	    name: 'BASIC',
  	    case_insensitive: true,
  	    illegal: '^\.',
  	    // Support explicitly typed variables that end with $%! or #.
  	    keywords: {
  	      $pattern: '[a-zA-Z][a-zA-Z0-9_$%!#]*',
  	      keyword: KEYWORDS
  	    },
  	    contains: [
  	      hljs.QUOTE_STRING_MODE,
  	      hljs.COMMENT('REM', '$', { relevance: 10 }),
  	      hljs.COMMENT('\'', '$', { relevance: 0 }),
  	      {
  	        // Match line numbers
  	        className: 'symbol',
  	        begin: '^[0-9]+ ',
  	        relevance: 10
  	      },
  	      {
  	        // Match typed numeric constants (1000, 12.34!, 1.2e5, 1.5#, 1.2D2)
  	        className: 'number',
  	        begin: '\\b\\d+(\\.\\d+)?([edED]\\d+)?[#\!]?',
  	        relevance: 0
  	      },
  	      {
  	        // Match hexadecimal numbers (&Hxxxx)
  	        className: 'number',
  	        begin: '(&[hH][0-9a-fA-F]{1,4})'
  	      },
  	      {
  	        // Match octal numbers (&Oxxxxxx)
  	        className: 'number',
  	        begin: '(&[oO][0-7]{1,6})'
  	      }
  	    ]
  	  };
  	}

  	basic_1 = basic;
  	return basic_1;
  }

  /*
  Language: Backus–Naur Form
  Website: https://en.wikipedia.org/wiki/Backus–Naur_form
  Author: Oleg Efimov <efimovov@gmail.com>
  */

  var bnf_1;
  var hasRequiredBnf;

  function requireBnf () {
  	if (hasRequiredBnf) return bnf_1;
  	hasRequiredBnf = 1;
  	/** @type LanguageFn */
  	function bnf(hljs) {
  	  return {
  	    name: 'Backus–Naur Form',
  	    contains: [
  	      // Attribute
  	      {
  	        className: 'attribute',
  	        begin: /</,
  	        end: />/
  	      },
  	      // Specific
  	      {
  	        begin: /::=/,
  	        end: /$/,
  	        contains: [
  	          {
  	            begin: /</,
  	            end: />/
  	          },
  	          // Common
  	          hljs.C_LINE_COMMENT_MODE,
  	          hljs.C_BLOCK_COMMENT_MODE,
  	          hljs.APOS_STRING_MODE,
  	          hljs.QUOTE_STRING_MODE
  	        ]
  	      }
  	    ]
  	  };
  	}

  	bnf_1 = bnf;
  	return bnf_1;
  }

  /*
  Language: Brainfuck
  Author: Evgeny Stepanischev <imbolk@gmail.com>
  Website: https://esolangs.org/wiki/Brainfuck
  */

  var brainfuck_1;
  var hasRequiredBrainfuck;

  function requireBrainfuck () {
  	if (hasRequiredBrainfuck) return brainfuck_1;
  	hasRequiredBrainfuck = 1;
  	/** @type LanguageFn */
  	function brainfuck(hljs) {
  	  const LITERAL = {
  	    className: 'literal',
  	    begin: /[+-]+/,
  	    relevance: 0
  	  };
  	  return {
  	    name: 'Brainfuck',
  	    aliases: [ 'bf' ],
  	    contains: [
  	      hljs.COMMENT(
  	        /[^\[\]\.,\+\-<> \r\n]/,
  	        /[\[\]\.,\+\-<> \r\n]/,
  	        {
  	          contains: [
  	            {
  	              match: /[ ]+[^\[\]\.,\+\-<> \r\n]/,
  	              relevance: 0
  	            }
  	          ],
  	          returnEnd: true,
  	          relevance: 0
  	        }
  	      ),
  	      {
  	        className: 'title',
  	        begin: '[\\[\\]]',
  	        relevance: 0
  	      },
  	      {
  	        className: 'string',
  	        begin: '[\\.,]',
  	        relevance: 0
  	      },
  	      {
  	        // this mode works as the only relevance counter
  	        // it looks ahead to find the start of a run of literals
  	        // so only the runs are counted as relevant
  	        begin: /(?=\+\+|--)/,
  	        contains: [ LITERAL ]
  	      },
  	      LITERAL
  	    ]
  	  };
  	}

  	brainfuck_1 = brainfuck;
  	return brainfuck_1;
  }

  /*
  Language: C
  Category: common, system
  Website: https://en.wikipedia.org/wiki/C_(programming_language)
  */

  var c_1;
  var hasRequiredC;

  function requireC () {
  	if (hasRequiredC) return c_1;
  	hasRequiredC = 1;
  	/** @type LanguageFn */
  	function c(hljs) {
  	  const regex = hljs.regex;
  	  // added for historic reasons because `hljs.C_LINE_COMMENT_MODE` does
  	  // not include such support nor can we be sure all the grammars depending
  	  // on it would desire this behavior
  	  const C_LINE_COMMENT_MODE = hljs.COMMENT('//', '$', { contains: [ { begin: /\\\n/ } ] });
  	  const DECLTYPE_AUTO_RE = 'decltype\\(auto\\)';
  	  const NAMESPACE_RE = '[a-zA-Z_]\\w*::';
  	  const TEMPLATE_ARGUMENT_RE = '<[^<>]+>';
  	  const FUNCTION_TYPE_RE = '('
  	    + DECLTYPE_AUTO_RE + '|'
  	    + regex.optional(NAMESPACE_RE)
  	    + '[a-zA-Z_]\\w*' + regex.optional(TEMPLATE_ARGUMENT_RE)
  	  + ')';


  	  const TYPES = {
  	    className: 'type',
  	    variants: [
  	      { begin: '\\b[a-z\\d_]*_t\\b' },
  	      { match: /\batomic_[a-z]{3,6}\b/ }
  	    ]

  	  };

  	  // https://en.cppreference.com/w/cpp/language/escape
  	  // \\ \x \xFF \u2837 \u00323747 \374
  	  const CHARACTER_ESCAPES = '\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\S)';
  	  const STRINGS = {
  	    className: 'string',
  	    variants: [
  	      {
  	        begin: '(u8?|U|L)?"',
  	        end: '"',
  	        illegal: '\\n',
  	        contains: [ hljs.BACKSLASH_ESCAPE ]
  	      },
  	      {
  	        begin: '(u8?|U|L)?\'(' + CHARACTER_ESCAPES + "|.)",
  	        end: '\'',
  	        illegal: '.'
  	      },
  	      hljs.END_SAME_AS_BEGIN({
  	        begin: /(?:u8?|U|L)?R"([^()\\ ]{0,16})\(/,
  	        end: /\)([^()\\ ]{0,16})"/
  	      })
  	    ]
  	  };

  	  const NUMBERS = {
  	    className: 'number',
  	    variants: [
  	      { begin: '\\b(0b[01\']+)' },
  	      { begin: '(-?)\\b([\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)' },
  	      { begin: '(-?)(\\b0[xX][a-fA-F0-9\']+|(\\b[\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)([eE][-+]?[\\d\']+)?)' }
  	    ],
  	    relevance: 0
  	  };

  	  const PREPROCESSOR = {
  	    className: 'meta',
  	    begin: /#\s*[a-z]+\b/,
  	    end: /$/,
  	    keywords: { keyword:
  	        'if else elif endif define undef warning error line '
  	        + 'pragma _Pragma ifdef ifndef include' },
  	    contains: [
  	      {
  	        begin: /\\\n/,
  	        relevance: 0
  	      },
  	      hljs.inherit(STRINGS, { className: 'string' }),
  	      {
  	        className: 'string',
  	        begin: /<.*?>/
  	      },
  	      C_LINE_COMMENT_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE
  	    ]
  	  };

  	  const TITLE_MODE = {
  	    className: 'title',
  	    begin: regex.optional(NAMESPACE_RE) + hljs.IDENT_RE,
  	    relevance: 0
  	  };

  	  const FUNCTION_TITLE = regex.optional(NAMESPACE_RE) + hljs.IDENT_RE + '\\s*\\(';

  	  const C_KEYWORDS = [
  	    "asm",
  	    "auto",
  	    "break",
  	    "case",
  	    "continue",
  	    "default",
  	    "do",
  	    "else",
  	    "enum",
  	    "extern",
  	    "for",
  	    "fortran",
  	    "goto",
  	    "if",
  	    "inline",
  	    "register",
  	    "restrict",
  	    "return",
  	    "sizeof",
  	    "struct",
  	    "switch",
  	    "typedef",
  	    "union",
  	    "volatile",
  	    "while",
  	    "_Alignas",
  	    "_Alignof",
  	    "_Atomic",
  	    "_Generic",
  	    "_Noreturn",
  	    "_Static_assert",
  	    "_Thread_local",
  	    // aliases
  	    "alignas",
  	    "alignof",
  	    "noreturn",
  	    "static_assert",
  	    "thread_local",
  	    // not a C keyword but is, for all intents and purposes, treated exactly like one.
  	    "_Pragma"
  	  ];

  	  const C_TYPES = [
  	    "float",
  	    "double",
  	    "signed",
  	    "unsigned",
  	    "int",
  	    "short",
  	    "long",
  	    "char",
  	    "void",
  	    "_Bool",
  	    "_Complex",
  	    "_Imaginary",
  	    "_Decimal32",
  	    "_Decimal64",
  	    "_Decimal128",
  	    // modifiers
  	    "const",
  	    "static",
  	    // aliases
  	    "complex",
  	    "bool",
  	    "imaginary"
  	  ];

  	  const KEYWORDS = {
  	    keyword: C_KEYWORDS,
  	    type: C_TYPES,
  	    literal: 'true false NULL',
  	    // TODO: apply hinting work similar to what was done in cpp.js
  	    built_in: 'std string wstring cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream '
  	      + 'auto_ptr deque list queue stack vector map set pair bitset multiset multimap unordered_set '
  	      + 'unordered_map unordered_multiset unordered_multimap priority_queue make_pair array shared_ptr abort terminate abs acos '
  	      + 'asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp '
  	      + 'fscanf future isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper '
  	      + 'isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow '
  	      + 'printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp '
  	      + 'strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan '
  	      + 'vfprintf vprintf vsprintf endl initializer_list unique_ptr',
  	  };

  	  const EXPRESSION_CONTAINS = [
  	    PREPROCESSOR,
  	    TYPES,
  	    C_LINE_COMMENT_MODE,
  	    hljs.C_BLOCK_COMMENT_MODE,
  	    NUMBERS,
  	    STRINGS
  	  ];

  	  const EXPRESSION_CONTEXT = {
  	    // This mode covers expression context where we can't expect a function
  	    // definition and shouldn't highlight anything that looks like one:
  	    // `return some()`, `else if()`, `(x*sum(1, 2))`
  	    variants: [
  	      {
  	        begin: /=/,
  	        end: /;/
  	      },
  	      {
  	        begin: /\(/,
  	        end: /\)/
  	      },
  	      {
  	        beginKeywords: 'new throw return else',
  	        end: /;/
  	      }
  	    ],
  	    keywords: KEYWORDS,
  	    contains: EXPRESSION_CONTAINS.concat([
  	      {
  	        begin: /\(/,
  	        end: /\)/,
  	        keywords: KEYWORDS,
  	        contains: EXPRESSION_CONTAINS.concat([ 'self' ]),
  	        relevance: 0
  	      }
  	    ]),
  	    relevance: 0
  	  };

  	  const FUNCTION_DECLARATION = {
  	    begin: '(' + FUNCTION_TYPE_RE + '[\\*&\\s]+)+' + FUNCTION_TITLE,
  	    returnBegin: true,
  	    end: /[{;=]/,
  	    excludeEnd: true,
  	    keywords: KEYWORDS,
  	    illegal: /[^\w\s\*&:<>.]/,
  	    contains: [
  	      { // to prevent it from being confused as the function title
  	        begin: DECLTYPE_AUTO_RE,
  	        keywords: KEYWORDS,
  	        relevance: 0
  	      },
  	      {
  	        begin: FUNCTION_TITLE,
  	        returnBegin: true,
  	        contains: [ hljs.inherit(TITLE_MODE, { className: "title.function" }) ],
  	        relevance: 0
  	      },
  	      // allow for multiple declarations, e.g.:
  	      // extern void f(int), g(char);
  	      {
  	        relevance: 0,
  	        match: /,/
  	      },
  	      {
  	        className: 'params',
  	        begin: /\(/,
  	        end: /\)/,
  	        keywords: KEYWORDS,
  	        relevance: 0,
  	        contains: [
  	          C_LINE_COMMENT_MODE,
  	          hljs.C_BLOCK_COMMENT_MODE,
  	          STRINGS,
  	          NUMBERS,
  	          TYPES,
  	          // Count matching parentheses.
  	          {
  	            begin: /\(/,
  	            end: /\)/,
  	            keywords: KEYWORDS,
  	            relevance: 0,
  	            contains: [
  	              'self',
  	              C_LINE_COMMENT_MODE,
  	              hljs.C_BLOCK_COMMENT_MODE,
  	              STRINGS,
  	              NUMBERS,
  	              TYPES
  	            ]
  	          }
  	        ]
  	      },
  	      TYPES,
  	      C_LINE_COMMENT_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE,
  	      PREPROCESSOR
  	    ]
  	  };

  	  return {
  	    name: "C",
  	    aliases: [ 'h' ],
  	    keywords: KEYWORDS,
  	    // Until differentiations are added between `c` and `cpp`, `c` will
  	    // not be auto-detected to avoid auto-detect conflicts between C and C++
  	    disableAutodetect: true,
  	    illegal: '</',
  	    contains: [].concat(
  	      EXPRESSION_CONTEXT,
  	      FUNCTION_DECLARATION,
  	      EXPRESSION_CONTAINS,
  	      [
  	        PREPROCESSOR,
  	        {
  	          begin: hljs.IDENT_RE + '::',
  	          keywords: KEYWORDS
  	        },
  	        {
  	          className: 'class',
  	          beginKeywords: 'enum class struct union',
  	          end: /[{;:<>=]/,
  	          contains: [
  	            { beginKeywords: "final class struct" },
  	            hljs.TITLE_MODE
  	          ]
  	        }
  	      ]),
  	    exports: {
  	      preprocessor: PREPROCESSOR,
  	      strings: STRINGS,
  	      keywords: KEYWORDS
  	    }
  	  };
  	}

  	c_1 = c;
  	return c_1;
  }

  /*
  Language: C/AL
  Author: Kenneth Fuglsang Christensen <kfuglsang@gmail.com>
  Description: Provides highlighting of Microsoft Dynamics NAV C/AL code files
  Website: https://docs.microsoft.com/en-us/dynamics-nav/programming-in-c-al
  */

  var cal_1;
  var hasRequiredCal;

  function requireCal () {
  	if (hasRequiredCal) return cal_1;
  	hasRequiredCal = 1;
  	/** @type LanguageFn */
  	function cal(hljs) {
  	  const regex = hljs.regex;
  	  const KEYWORDS = [
  	    "div",
  	    "mod",
  	    "in",
  	    "and",
  	    "or",
  	    "not",
  	    "xor",
  	    "asserterror",
  	    "begin",
  	    "case",
  	    "do",
  	    "downto",
  	    "else",
  	    "end",
  	    "exit",
  	    "for",
  	    "local",
  	    "if",
  	    "of",
  	    "repeat",
  	    "then",
  	    "to",
  	    "until",
  	    "while",
  	    "with",
  	    "var"
  	  ];
  	  const LITERALS = 'false true';
  	  const COMMENT_MODES = [
  	    hljs.C_LINE_COMMENT_MODE,
  	    hljs.COMMENT(
  	      /\{/,
  	      /\}/,
  	      { relevance: 0 }
  	    ),
  	    hljs.COMMENT(
  	      /\(\*/,
  	      /\*\)/,
  	      { relevance: 10 }
  	    )
  	  ];
  	  const STRING = {
  	    className: 'string',
  	    begin: /'/,
  	    end: /'/,
  	    contains: [ { begin: /''/ } ]
  	  };
  	  const CHAR_STRING = {
  	    className: 'string',
  	    begin: /(#\d+)+/
  	  };
  	  const DATE = {
  	    className: 'number',
  	    begin: '\\b\\d+(\\.\\d+)?(DT|D|T)',
  	    relevance: 0
  	  };
  	  const DBL_QUOTED_VARIABLE = {
  	    className: 'string', // not a string technically but makes sense to be highlighted in the same style
  	    begin: '"',
  	    end: '"'
  	  };

  	  const PROCEDURE = {
  	    match: [
  	      /procedure/,
  	      /\s+/,
  	      /[a-zA-Z_][\w@]*/,
  	      /\s*/
  	    ],
  	    scope: {
  	      1: "keyword",
  	      3: "title.function"
  	    },
  	    contains: [
  	      {
  	        className: 'params',
  	        begin: /\(/,
  	        end: /\)/,
  	        keywords: KEYWORDS,
  	        contains: [
  	          STRING,
  	          CHAR_STRING,
  	          hljs.NUMBER_MODE
  	        ]
  	      },
  	      ...COMMENT_MODES
  	    ]
  	  };

  	  const OBJECT_TYPES = [
  	    "Table",
  	    "Form",
  	    "Report",
  	    "Dataport",
  	    "Codeunit",
  	    "XMLport",
  	    "MenuSuite",
  	    "Page",
  	    "Query"
  	  ];
  	  const OBJECT = {
  	    match: [
  	      /OBJECT/,
  	      /\s+/,
  	      regex.either(...OBJECT_TYPES),
  	      /\s+/,
  	      /\d+/,
  	      /\s+(?=[^\s])/,
  	      /.*/,
  	      /$/
  	    ],
  	    relevance: 3,
  	    scope: {
  	      1: "keyword",
  	      3: "type",
  	      5: "number",
  	      7: "title"
  	    }
  	  };

  	  const PROPERTY = {
  	    match: /[\w]+(?=\=)/,
  	    scope: "attribute",
  	    relevance: 0
  	  };

  	  return {
  	    name: 'C/AL',
  	    case_insensitive: true,
  	    keywords: {
  	      keyword: KEYWORDS,
  	      literal: LITERALS
  	    },
  	    illegal: /\/\*/,
  	    contains: [
  	      PROPERTY,
  	      STRING,
  	      CHAR_STRING,
  	      DATE,
  	      DBL_QUOTED_VARIABLE,
  	      hljs.NUMBER_MODE,
  	      OBJECT,
  	      PROCEDURE
  	    ]
  	  };
  	}

  	cal_1 = cal;
  	return cal_1;
  }

  /*
  Language: Cap’n Proto
  Author: Oleg Efimov <efimovov@gmail.com>
  Description: Cap’n Proto message definition format
  Website: https://capnproto.org/capnp-tool.html
  Category: protocols
  */

  var capnproto_1;
  var hasRequiredCapnproto;

  function requireCapnproto () {
  	if (hasRequiredCapnproto) return capnproto_1;
  	hasRequiredCapnproto = 1;
  	/** @type LanguageFn */
  	function capnproto(hljs) {
  	  const KEYWORDS = [
  	    "struct",
  	    "enum",
  	    "interface",
  	    "union",
  	    "group",
  	    "import",
  	    "using",
  	    "const",
  	    "annotation",
  	    "extends",
  	    "in",
  	    "of",
  	    "on",
  	    "as",
  	    "with",
  	    "from",
  	    "fixed"
  	  ];
  	  const TYPES = [
  	    "Void",
  	    "Bool",
  	    "Int8",
  	    "Int16",
  	    "Int32",
  	    "Int64",
  	    "UInt8",
  	    "UInt16",
  	    "UInt32",
  	    "UInt64",
  	    "Float32",
  	    "Float64",
  	    "Text",
  	    "Data",
  	    "AnyPointer",
  	    "AnyStruct",
  	    "Capability",
  	    "List"
  	  ];
  	  const LITERALS = [
  	    "true",
  	    "false"
  	  ];
  	  const CLASS_DEFINITION = {
  	    variants: [
  	      { match: [
  	        /(struct|enum|interface)/,
  	        /\s+/,
  	        hljs.IDENT_RE
  	      ] },
  	      { match: [
  	        /extends/,
  	        /\s*\(/,
  	        hljs.IDENT_RE,
  	        /\s*\)/
  	      ] }
  	    ],
  	    scope: {
  	      1: "keyword",
  	      3: "title.class"
  	    }
  	  };
  	  return {
  	    name: 'Cap’n Proto',
  	    aliases: [ 'capnp' ],
  	    keywords: {
  	      keyword: KEYWORDS,
  	      type: TYPES,
  	      literal: LITERALS
  	    },
  	    contains: [
  	      hljs.QUOTE_STRING_MODE,
  	      hljs.NUMBER_MODE,
  	      hljs.HASH_COMMENT_MODE,
  	      {
  	        className: 'meta',
  	        begin: /@0x[\w\d]{16};/,
  	        illegal: /\n/
  	      },
  	      {
  	        className: 'symbol',
  	        begin: /@\d+\b/
  	      },
  	      CLASS_DEFINITION
  	    ]
  	  };
  	}

  	capnproto_1 = capnproto;
  	return capnproto_1;
  }

  /*
  Language: Ceylon
  Author: Lucas Werkmeister <mail@lucaswerkmeister.de>
  Website: https://ceylon-lang.org
  */

  var ceylon_1;
  var hasRequiredCeylon;

  function requireCeylon () {
  	if (hasRequiredCeylon) return ceylon_1;
  	hasRequiredCeylon = 1;
  	/** @type LanguageFn */
  	function ceylon(hljs) {
  	  // 2.3. Identifiers and keywords
  	  const KEYWORDS = [
  	    "assembly",
  	    "module",
  	    "package",
  	    "import",
  	    "alias",
  	    "class",
  	    "interface",
  	    "object",
  	    "given",
  	    "value",
  	    "assign",
  	    "void",
  	    "function",
  	    "new",
  	    "of",
  	    "extends",
  	    "satisfies",
  	    "abstracts",
  	    "in",
  	    "out",
  	    "return",
  	    "break",
  	    "continue",
  	    "throw",
  	    "assert",
  	    "dynamic",
  	    "if",
  	    "else",
  	    "switch",
  	    "case",
  	    "for",
  	    "while",
  	    "try",
  	    "catch",
  	    "finally",
  	    "then",
  	    "let",
  	    "this",
  	    "outer",
  	    "super",
  	    "is",
  	    "exists",
  	    "nonempty"
  	  ];
  	  // 7.4.1 Declaration Modifiers
  	  const DECLARATION_MODIFIERS = [
  	    "shared",
  	    "abstract",
  	    "formal",
  	    "default",
  	    "actual",
  	    "variable",
  	    "late",
  	    "native",
  	    "deprecated",
  	    "final",
  	    "sealed",
  	    "annotation",
  	    "suppressWarnings",
  	    "small"
  	  ];
  	  // 7.4.2 Documentation
  	  const DOCUMENTATION = [
  	    "doc",
  	    "by",
  	    "license",
  	    "see",
  	    "throws",
  	    "tagged"
  	  ];
  	  const SUBST = {
  	    className: 'subst',
  	    excludeBegin: true,
  	    excludeEnd: true,
  	    begin: /``/,
  	    end: /``/,
  	    keywords: KEYWORDS,
  	    relevance: 10
  	  };
  	  const EXPRESSIONS = [
  	    {
  	      // verbatim string
  	      className: 'string',
  	      begin: '"""',
  	      end: '"""',
  	      relevance: 10
  	    },
  	    {
  	      // string literal or template
  	      className: 'string',
  	      begin: '"',
  	      end: '"',
  	      contains: [ SUBST ]
  	    },
  	    {
  	      // character literal
  	      className: 'string',
  	      begin: "'",
  	      end: "'"
  	    },
  	    {
  	      // numeric literal
  	      className: 'number',
  	      begin: '#[0-9a-fA-F_]+|\\$[01_]+|[0-9_]+(?:\\.[0-9_](?:[eE][+-]?\\d+)?)?[kMGTPmunpf]?',
  	      relevance: 0
  	    }
  	  ];
  	  SUBST.contains = EXPRESSIONS;

  	  return {
  	    name: 'Ceylon',
  	    keywords: {
  	      keyword: KEYWORDS.concat(DECLARATION_MODIFIERS),
  	      meta: DOCUMENTATION
  	    },
  	    illegal: '\\$[^01]|#[^0-9a-fA-F]',
  	    contains: [
  	      hljs.C_LINE_COMMENT_MODE,
  	      hljs.COMMENT('/\\*', '\\*/', { contains: [ 'self' ] }),
  	      {
  	        // compiler annotation
  	        className: 'meta',
  	        begin: '@[a-z]\\w*(?::"[^"]*")?'
  	      }
  	    ].concat(EXPRESSIONS)
  	  };
  	}

  	ceylon_1 = ceylon;
  	return ceylon_1;
  }

  /*
  Language: Clean
  Author: Camil Staps <info@camilstaps.nl>
  Category: functional
  Website: http://clean.cs.ru.nl
  */

  var clean_1;
  var hasRequiredClean;

  function requireClean () {
  	if (hasRequiredClean) return clean_1;
  	hasRequiredClean = 1;
  	/** @type LanguageFn */
  	function clean(hljs) {
  	  const KEYWORDS = [
  	    "if",
  	    "let",
  	    "in",
  	    "with",
  	    "where",
  	    "case",
  	    "of",
  	    "class",
  	    "instance",
  	    "otherwise",
  	    "implementation",
  	    "definition",
  	    "system",
  	    "module",
  	    "from",
  	    "import",
  	    "qualified",
  	    "as",
  	    "special",
  	    "code",
  	    "inline",
  	    "foreign",
  	    "export",
  	    "ccall",
  	    "stdcall",
  	    "generic",
  	    "derive",
  	    "infix",
  	    "infixl",
  	    "infixr"
  	  ];
  	  return {
  	    name: 'Clean',
  	    aliases: [
  	      'icl',
  	      'dcl'
  	    ],
  	    keywords: {
  	      keyword: KEYWORDS,
  	      built_in:
  	        'Int Real Char Bool',
  	      literal:
  	        'True False'
  	    },
  	    contains: [
  	      hljs.C_LINE_COMMENT_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE,
  	      hljs.APOS_STRING_MODE,
  	      hljs.QUOTE_STRING_MODE,
  	      hljs.C_NUMBER_MODE,
  	      { // relevance booster
  	        begin: '->|<-[|:]?|#!?|>>=|\\{\\||\\|\\}|:==|=:|<>' }
  	    ]
  	  };
  	}

  	clean_1 = clean;
  	return clean_1;
  }

  /*
  Language: Clojure
  Description: Clojure syntax (based on lisp.js)
  Author: mfornos
  Website: https://clojure.org
  Category: lisp
  */

  var clojure_1;
  var hasRequiredClojure;

  function requireClojure () {
  	if (hasRequiredClojure) return clojure_1;
  	hasRequiredClojure = 1;
  	/** @type LanguageFn */
  	function clojure(hljs) {
  	  const SYMBOLSTART = 'a-zA-Z_\\-!.?+*=<>&\'';
  	  const SYMBOL_RE = '[#]?[' + SYMBOLSTART + '][' + SYMBOLSTART + '0-9/;:$#]*';
  	  const globals = 'def defonce defprotocol defstruct defmulti defmethod defn- defn defmacro deftype defrecord';
  	  const keywords = {
  	    $pattern: SYMBOL_RE,
  	    built_in:
  	      // Clojure keywords
  	      globals + ' '
  	      + 'cond apply if-not if-let if not not= =|0 <|0 >|0 <=|0 >=|0 ==|0 +|0 /|0 *|0 -|0 rem '
  	      + 'quot neg? pos? delay? symbol? keyword? true? false? integer? empty? coll? list? '
  	      + 'set? ifn? fn? associative? sequential? sorted? counted? reversible? number? decimal? '
  	      + 'class? distinct? isa? float? rational? reduced? ratio? odd? even? char? seq? vector? '
  	      + 'string? map? nil? contains? zero? instance? not-every? not-any? libspec? -> ->> .. . '
  	      + 'inc compare do dotimes mapcat take remove take-while drop letfn drop-last take-last '
  	      + 'drop-while while intern condp case reduced cycle split-at split-with repeat replicate '
  	      + 'iterate range merge zipmap declare line-seq sort comparator sort-by dorun doall nthnext '
  	      + 'nthrest partition eval doseq await await-for let agent atom send send-off release-pending-sends '
  	      + 'add-watch mapv filterv remove-watch agent-error restart-agent set-error-handler error-handler '
  	      + 'set-error-mode! error-mode shutdown-agents quote var fn loop recur throw try monitor-enter '
  	      + 'monitor-exit macroexpand macroexpand-1 for dosync and or '
  	      + 'when when-not when-let comp juxt partial sequence memoize constantly complement identity assert '
  	      + 'peek pop doto proxy first rest cons cast coll last butlast '
  	      + 'sigs reify second ffirst fnext nfirst nnext meta with-meta ns in-ns create-ns import '
  	      + 'refer keys select-keys vals key val rseq name namespace promise into transient persistent! conj! '
  	      + 'assoc! dissoc! pop! disj! use class type num float double short byte boolean bigint biginteger '
  	      + 'bigdec print-method print-dup throw-if printf format load compile get-in update-in pr pr-on newline '
  	      + 'flush read slurp read-line subvec with-open memfn time re-find re-groups rand-int rand mod locking '
  	      + 'assert-valid-fdecl alias resolve ref deref refset swap! reset! set-validator! compare-and-set! alter-meta! '
  	      + 'reset-meta! commute get-validator alter ref-set ref-history-count ref-min-history ref-max-history ensure sync io! '
  	      + 'new next conj set! to-array future future-call into-array aset gen-class reduce map filter find empty '
  	      + 'hash-map hash-set sorted-map sorted-map-by sorted-set sorted-set-by vec vector seq flatten reverse assoc dissoc list '
  	      + 'disj get union difference intersection extend extend-type extend-protocol int nth delay count concat chunk chunk-buffer '
  	      + 'chunk-append chunk-first chunk-rest max min dec unchecked-inc-int unchecked-inc unchecked-dec-inc unchecked-dec unchecked-negate '
  	      + 'unchecked-add-int unchecked-add unchecked-subtract-int unchecked-subtract chunk-next chunk-cons chunked-seq? prn vary-meta '
  	      + 'lazy-seq spread list* str find-keyword keyword symbol gensym force rationalize'
  	  };

  	  const SYMBOL = {
  	    begin: SYMBOL_RE,
  	    relevance: 0
  	  };
  	  const NUMBER = {
  	    scope: 'number',
  	    relevance: 0,
  	    variants: [
  	      { match: /[-+]?0[xX][0-9a-fA-F]+N?/ }, // hexadecimal                 // 0x2a
  	      { match: /[-+]?0[0-7]+N?/ }, // octal                       // 052
  	      { match: /[-+]?[1-9][0-9]?[rR][0-9a-zA-Z]+N?/ }, // variable radix from 2 to 36 // 2r101010, 8r52, 36r16
  	      { match: /[-+]?[0-9]+\/[0-9]+N?/ }, // ratio                       // 1/2
  	      { match: /[-+]?[0-9]+((\.[0-9]*([eE][+-]?[0-9]+)?M?)|([eE][+-]?[0-9]+M?|M))/ }, // float        // 0.42 4.2E-1M 42E1 42M
  	      { match: /[-+]?([1-9][0-9]*|0)N?/ }, // int (don't match leading 0) // 42 42N
  	    ]
  	  };
  	  const CHARACTER = {
  	    scope: 'character',
  	    variants: [
  	      { match: /\\o[0-3]?[0-7]{1,2}/ }, // Unicode Octal 0 - 377
  	      { match: /\\u[0-9a-fA-F]{4}/ }, // Unicode Hex 0000 - FFFF
  	      { match: /\\(newline|space|tab|formfeed|backspace|return)/ }, // special characters
  	      {
  	        match: /\\\S/,
  	        relevance: 0
  	      } // any non-whitespace char
  	    ]
  	  };
  	  const REGEX = {
  	    scope: 'regex',
  	    begin: /#"/,
  	    end: /"/,
  	    contains: [ hljs.BACKSLASH_ESCAPE ]
  	  };
  	  const STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null });
  	  const COMMA = {
  	    scope: 'punctuation',
  	    match: /,/,
  	    relevance: 0
  	  };
  	  const COMMENT = hljs.COMMENT(
  	    ';',
  	    '$',
  	    { relevance: 0 }
  	  );
  	  const LITERAL = {
  	    className: 'literal',
  	    begin: /\b(true|false|nil)\b/
  	  };
  	  const COLLECTION = {
  	    begin: "\\[|(#::?" + SYMBOL_RE + ")?\\{",
  	    end: '[\\]\\}]',
  	    relevance: 0
  	  };
  	  const KEY = {
  	    className: 'symbol',
  	    begin: '[:]{1,2}' + SYMBOL_RE
  	  };
  	  const LIST = {
  	    begin: '\\(',
  	    end: '\\)'
  	  };
  	  const BODY = {
  	    endsWithParent: true,
  	    relevance: 0
  	  };
  	  const NAME = {
  	    keywords: keywords,
  	    className: 'name',
  	    begin: SYMBOL_RE,
  	    relevance: 0,
  	    starts: BODY
  	  };
  	  const DEFAULT_CONTAINS = [
  	    COMMA,
  	    LIST,
  	    CHARACTER,
  	    REGEX,
  	    STRING,
  	    COMMENT,
  	    KEY,
  	    COLLECTION,
  	    NUMBER,
  	    LITERAL,
  	    SYMBOL
  	  ];

  	  const GLOBAL = {
  	    beginKeywords: globals,
  	    keywords: {
  	      $pattern: SYMBOL_RE,
  	      keyword: globals
  	    },
  	    end: '(\\[|#|\\d|"|:|\\{|\\)|\\(|$)',
  	    contains: [
  	      {
  	        className: 'title',
  	        begin: SYMBOL_RE,
  	        relevance: 0,
  	        excludeEnd: true,
  	        // we can only have a single title
  	        endsParent: true
  	      }
  	    ].concat(DEFAULT_CONTAINS)
  	  };

  	  LIST.contains = [
  	    GLOBAL,
  	    NAME,
  	    BODY
  	  ];
  	  BODY.contains = DEFAULT_CONTAINS;
  	  COLLECTION.contains = DEFAULT_CONTAINS;

  	  return {
  	    name: 'Clojure',
  	    aliases: [
  	      'clj',
  	      'edn'
  	    ],
  	    illegal: /\S/,
  	    contains: [
  	      COMMA,
  	      LIST,
  	      CHARACTER,
  	      REGEX,
  	      STRING,
  	      COMMENT,
  	      KEY,
  	      COLLECTION,
  	      NUMBER,
  	      LITERAL
  	    ]
  	  };
  	}

  	clojure_1 = clojure;
  	return clojure_1;
  }

  /*
  Language: Clojure REPL
  Description: Clojure REPL sessions
  Author: Ivan Sagalaev <maniac@softwaremaniacs.org>
  Requires: clojure.js
  Website: https://clojure.org
  Category: lisp
  */

  var clojureRepl_1;
  var hasRequiredClojureRepl;

  function requireClojureRepl () {
  	if (hasRequiredClojureRepl) return clojureRepl_1;
  	hasRequiredClojureRepl = 1;
  	/** @type LanguageFn */
  	function clojureRepl(hljs) {
  	  return {
  	    name: 'Clojure REPL',
  	    contains: [
  	      {
  	        className: 'meta.prompt',
  	        begin: /^([\w.-]+|\s*#_)?=>/,
  	        starts: {
  	          end: /$/,
  	          subLanguage: 'clojure'
  	        }
  	      }
  	    ]
  	  };
  	}

  	clojureRepl_1 = clojureRepl;
  	return clojureRepl_1;
  }

  /*
  Language: CMake
  Description: CMake is an open-source cross-platform system for build automation.
  Author: Igor Kalnitsky <igor@kalnitsky.org>
  Website: https://cmake.org
  */

  var cmake_1;
  var hasRequiredCmake;

  function requireCmake () {
  	if (hasRequiredCmake) return cmake_1;
  	hasRequiredCmake = 1;
  	/** @type LanguageFn */
  	function cmake(hljs) {
  	  return {
  	    name: 'CMake',
  	    aliases: [ 'cmake.in' ],
  	    case_insensitive: true,
  	    keywords: { keyword:
  	        // scripting commands
  	        'break cmake_host_system_information cmake_minimum_required cmake_parse_arguments '
  	        + 'cmake_policy configure_file continue elseif else endforeach endfunction endif endmacro '
  	        + 'endwhile execute_process file find_file find_library find_package find_path '
  	        + 'find_program foreach function get_cmake_property get_directory_property '
  	        + 'get_filename_component get_property if include include_guard list macro '
  	        + 'mark_as_advanced math message option return separate_arguments '
  	        + 'set_directory_properties set_property set site_name string unset variable_watch while '
  	        // project commands
  	        + 'add_compile_definitions add_compile_options add_custom_command add_custom_target '
  	        + 'add_definitions add_dependencies add_executable add_library add_link_options '
  	        + 'add_subdirectory add_test aux_source_directory build_command create_test_sourcelist '
  	        + 'define_property enable_language enable_testing export fltk_wrap_ui '
  	        + 'get_source_file_property get_target_property get_test_property include_directories '
  	        + 'include_external_msproject include_regular_expression install link_directories '
  	        + 'link_libraries load_cache project qt_wrap_cpp qt_wrap_ui remove_definitions '
  	        + 'set_source_files_properties set_target_properties set_tests_properties source_group '
  	        + 'target_compile_definitions target_compile_features target_compile_options '
  	        + 'target_include_directories target_link_directories target_link_libraries '
  	        + 'target_link_options target_sources try_compile try_run '
  	        // CTest commands
  	        + 'ctest_build ctest_configure ctest_coverage ctest_empty_binary_directory ctest_memcheck '
  	        + 'ctest_read_custom_files ctest_run_script ctest_sleep ctest_start ctest_submit '
  	        + 'ctest_test ctest_update ctest_upload '
  	        // deprecated commands
  	        + 'build_name exec_program export_library_dependencies install_files install_programs '
  	        + 'install_targets load_command make_directory output_required_files remove '
  	        + 'subdir_depends subdirs use_mangled_mesa utility_source variable_requires write_file '
  	        + 'qt5_use_modules qt5_use_package qt5_wrap_cpp '
  	        // core keywords
  	        + 'on off true false and or not command policy target test exists is_newer_than '
  	        + 'is_directory is_symlink is_absolute matches less greater equal less_equal '
  	        + 'greater_equal strless strgreater strequal strless_equal strgreater_equal version_less '
  	        + 'version_greater version_equal version_less_equal version_greater_equal in_list defined' },
  	    contains: [
  	      {
  	        className: 'variable',
  	        begin: /\$\{/,
  	        end: /\}/
  	      },
  	      hljs.COMMENT(/#\[\[/, /]]/),
  	      hljs.HASH_COMMENT_MODE,
  	      hljs.QUOTE_STRING_MODE,
  	      hljs.NUMBER_MODE
  	    ]
  	  };
  	}

  	cmake_1 = cmake;
  	return cmake_1;
  }

  var coffeescript_1;
  var hasRequiredCoffeescript;

  function requireCoffeescript () {
  	if (hasRequiredCoffeescript) return coffeescript_1;
  	hasRequiredCoffeescript = 1;
  	const KEYWORDS = [
  	  "as", // for exports
  	  "in",
  	  "of",
  	  "if",
  	  "for",
  	  "while",
  	  "finally",
  	  "var",
  	  "new",
  	  "function",
  	  "do",
  	  "return",
  	  "void",
  	  "else",
  	  "break",
  	  "catch",
  	  "instanceof",
  	  "with",
  	  "throw",
  	  "case",
  	  "default",
  	  "try",
  	  "switch",
  	  "continue",
  	  "typeof",
  	  "delete",
  	  "let",
  	  "yield",
  	  "const",
  	  "class",
  	  // JS handles these with a special rule
  	  // "get",
  	  // "set",
  	  "debugger",
  	  "async",
  	  "await",
  	  "static",
  	  "import",
  	  "from",
  	  "export",
  	  "extends"
  	];
  	const LITERALS = [
  	  "true",
  	  "false",
  	  "null",
  	  "undefined",
  	  "NaN",
  	  "Infinity"
  	];

  	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects
  	const TYPES = [
  	  // Fundamental objects
  	  "Object",
  	  "Function",
  	  "Boolean",
  	  "Symbol",
  	  // numbers and dates
  	  "Math",
  	  "Date",
  	  "Number",
  	  "BigInt",
  	  // text
  	  "String",
  	  "RegExp",
  	  // Indexed collections
  	  "Array",
  	  "Float32Array",
  	  "Float64Array",
  	  "Int8Array",
  	  "Uint8Array",
  	  "Uint8ClampedArray",
  	  "Int16Array",
  	  "Int32Array",
  	  "Uint16Array",
  	  "Uint32Array",
  	  "BigInt64Array",
  	  "BigUint64Array",
  	  // Keyed collections
  	  "Set",
  	  "Map",
  	  "WeakSet",
  	  "WeakMap",
  	  // Structured data
  	  "ArrayBuffer",
  	  "SharedArrayBuffer",
  	  "Atomics",
  	  "DataView",
  	  "JSON",
  	  // Control abstraction objects
  	  "Promise",
  	  "Generator",
  	  "GeneratorFunction",
  	  "AsyncFunction",
  	  // Reflection
  	  "Reflect",
  	  "Proxy",
  	  // Internationalization
  	  "Intl",
  	  // WebAssembly
  	  "WebAssembly"
  	];

  	const ERROR_TYPES = [
  	  "Error",
  	  "EvalError",
  	  "InternalError",
  	  "RangeError",
  	  "ReferenceError",
  	  "SyntaxError",
  	  "TypeError",
  	  "URIError"
  	];

  	const BUILT_IN_GLOBALS = [
  	  "setInterval",
  	  "setTimeout",
  	  "clearInterval",
  	  "clearTimeout",

  	  "require",
  	  "exports",

  	  "eval",
  	  "isFinite",
  	  "isNaN",
  	  "parseFloat",
  	  "parseInt",
  	  "decodeURI",
  	  "decodeURIComponent",
  	  "encodeURI",
  	  "encodeURIComponent",
  	  "escape",
  	  "unescape"
  	];

  	const BUILT_INS = [].concat(
  	  BUILT_IN_GLOBALS,
  	  TYPES,
  	  ERROR_TYPES
  	);

  	/*
  	Language: CoffeeScript
  	Author: Dmytrii Nagirniak <dnagir@gmail.com>
  	Contributors: Oleg Efimov <efimovov@gmail.com>, Cédric Néhémie <cedric.nehemie@gmail.com>
  	Description: CoffeeScript is a programming language that transcompiles to JavaScript. For info about language see http://coffeescript.org/
  	Category: scripting
  	Website: https://coffeescript.org
  	*/

  	/** @type LanguageFn */
  	function coffeescript(hljs) {
  	  const COFFEE_BUILT_INS = [
  	    'npm',
  	    'print'
  	  ];
  	  const COFFEE_LITERALS = [
  	    'yes',
  	    'no',
  	    'on',
  	    'off'
  	  ];
  	  const COFFEE_KEYWORDS = [
  	    'then',
  	    'unless',
  	    'until',
  	    'loop',
  	    'by',
  	    'when',
  	    'and',
  	    'or',
  	    'is',
  	    'isnt',
  	    'not'
  	  ];
  	  const NOT_VALID_KEYWORDS = [
  	    "var",
  	    "const",
  	    "let",
  	    "function",
  	    "static"
  	  ];
  	  const excluding = (list) =>
  	    (kw) => !list.includes(kw);
  	  const KEYWORDS$1 = {
  	    keyword: KEYWORDS.concat(COFFEE_KEYWORDS).filter(excluding(NOT_VALID_KEYWORDS)),
  	    literal: LITERALS.concat(COFFEE_LITERALS),
  	    built_in: BUILT_INS.concat(COFFEE_BUILT_INS)
  	  };
  	  const JS_IDENT_RE = '[A-Za-z$_][0-9A-Za-z$_]*';
  	  const SUBST = {
  	    className: 'subst',
  	    begin: /#\{/,
  	    end: /\}/,
  	    keywords: KEYWORDS$1
  	  };
  	  const EXPRESSIONS = [
  	    hljs.BINARY_NUMBER_MODE,
  	    hljs.inherit(hljs.C_NUMBER_MODE, { starts: {
  	      end: '(\\s*/)?',
  	      relevance: 0
  	    } }), // a number tries to eat the following slash to prevent treating it as a regexp
  	    {
  	      className: 'string',
  	      variants: [
  	        {
  	          begin: /'''/,
  	          end: /'''/,
  	          contains: [ hljs.BACKSLASH_ESCAPE ]
  	        },
  	        {
  	          begin: /'/,
  	          end: /'/,
  	          contains: [ hljs.BACKSLASH_ESCAPE ]
  	        },
  	        {
  	          begin: /"""/,
  	          end: /"""/,
  	          contains: [
  	            hljs.BACKSLASH_ESCAPE,
  	            SUBST
  	          ]
  	        },
  	        {
  	          begin: /"/,
  	          end: /"/,
  	          contains: [
  	            hljs.BACKSLASH_ESCAPE,
  	            SUBST
  	          ]
  	        }
  	      ]
  	    },
  	    {
  	      className: 'regexp',
  	      variants: [
  	        {
  	          begin: '///',
  	          end: '///',
  	          contains: [
  	            SUBST,
  	            hljs.HASH_COMMENT_MODE
  	          ]
  	        },
  	        {
  	          begin: '//[gim]{0,3}(?=\\W)',
  	          relevance: 0
  	        },
  	        {
  	          // regex can't start with space to parse x / 2 / 3 as two divisions
  	          // regex can't start with *, and it supports an "illegal" in the main mode
  	          begin: /\/(?![ *]).*?(?![\\]).\/[gim]{0,3}(?=\W)/ }
  	      ]
  	    },
  	    { begin: '@' + JS_IDENT_RE // relevance booster
  	    },
  	    {
  	      subLanguage: 'javascript',
  	      excludeBegin: true,
  	      excludeEnd: true,
  	      variants: [
  	        {
  	          begin: '```',
  	          end: '```'
  	        },
  	        {
  	          begin: '`',
  	          end: '`'
  	        }
  	      ]
  	    }
  	  ];
  	  SUBST.contains = EXPRESSIONS;

  	  const TITLE = hljs.inherit(hljs.TITLE_MODE, { begin: JS_IDENT_RE });
  	  const POSSIBLE_PARAMS_RE = '(\\(.*\\)\\s*)?\\B[-=]>';
  	  const PARAMS = {
  	    className: 'params',
  	    begin: '\\([^\\(]',
  	    returnBegin: true,
  	    /* We need another contained nameless mode to not have every nested
  	    pair of parens to be called "params" */
  	    contains: [
  	      {
  	        begin: /\(/,
  	        end: /\)/,
  	        keywords: KEYWORDS$1,
  	        contains: [ 'self' ].concat(EXPRESSIONS)
  	      }
  	    ]
  	  };

  	  const CLASS_DEFINITION = {
  	    variants: [
  	      { match: [
  	        /class\s+/,
  	        JS_IDENT_RE,
  	        /\s+extends\s+/,
  	        JS_IDENT_RE
  	      ] },
  	      { match: [
  	        /class\s+/,
  	        JS_IDENT_RE
  	      ] }
  	    ],
  	    scope: {
  	      2: "title.class",
  	      4: "title.class.inherited"
  	    },
  	    keywords: KEYWORDS$1
  	  };

  	  return {
  	    name: 'CoffeeScript',
  	    aliases: [
  	      'coffee',
  	      'cson',
  	      'iced'
  	    ],
  	    keywords: KEYWORDS$1,
  	    illegal: /\/\*/,
  	    contains: [
  	      ...EXPRESSIONS,
  	      hljs.COMMENT('###', '###'),
  	      hljs.HASH_COMMENT_MODE,
  	      {
  	        className: 'function',
  	        begin: '^\\s*' + JS_IDENT_RE + '\\s*=\\s*' + POSSIBLE_PARAMS_RE,
  	        end: '[-=]>',
  	        returnBegin: true,
  	        contains: [
  	          TITLE,
  	          PARAMS
  	        ]
  	      },
  	      {
  	        // anonymous function start
  	        begin: /[:\(,=]\s*/,
  	        relevance: 0,
  	        contains: [
  	          {
  	            className: 'function',
  	            begin: POSSIBLE_PARAMS_RE,
  	            end: '[-=]>',
  	            returnBegin: true,
  	            contains: [ PARAMS ]
  	          }
  	        ]
  	      },
  	      CLASS_DEFINITION,
  	      {
  	        begin: JS_IDENT_RE + ':',
  	        end: ':',
  	        returnBegin: true,
  	        returnEnd: true,
  	        relevance: 0
  	      }
  	    ]
  	  };
  	}

  	coffeescript_1 = coffeescript;
  	return coffeescript_1;
  }

  /*
  Language: Coq
  Author: Stephan Boyer <stephan@stephanboyer.com>
  Category: functional
  Website: https://coq.inria.fr
  */

  var coq_1;
  var hasRequiredCoq;

  function requireCoq () {
  	if (hasRequiredCoq) return coq_1;
  	hasRequiredCoq = 1;
  	/** @type LanguageFn */
  	function coq(hljs) {
  	  const KEYWORDS = [
  	    "_|0",
  	    "as",
  	    "at",
  	    "cofix",
  	    "else",
  	    "end",
  	    "exists",
  	    "exists2",
  	    "fix",
  	    "for",
  	    "forall",
  	    "fun",
  	    "if",
  	    "IF",
  	    "in",
  	    "let",
  	    "match",
  	    "mod",
  	    "Prop",
  	    "return",
  	    "Set",
  	    "then",
  	    "Type",
  	    "using",
  	    "where",
  	    "with",
  	    "Abort",
  	    "About",
  	    "Add",
  	    "Admit",
  	    "Admitted",
  	    "All",
  	    "Arguments",
  	    "Assumptions",
  	    "Axiom",
  	    "Back",
  	    "BackTo",
  	    "Backtrack",
  	    "Bind",
  	    "Blacklist",
  	    "Canonical",
  	    "Cd",
  	    "Check",
  	    "Class",
  	    "Classes",
  	    "Close",
  	    "Coercion",
  	    "Coercions",
  	    "CoFixpoint",
  	    "CoInductive",
  	    "Collection",
  	    "Combined",
  	    "Compute",
  	    "Conjecture",
  	    "Conjectures",
  	    "Constant",
  	    "constr",
  	    "Constraint",
  	    "Constructors",
  	    "Context",
  	    "Corollary",
  	    "CreateHintDb",
  	    "Cut",
  	    "Declare",
  	    "Defined",
  	    "Definition",
  	    "Delimit",
  	    "Dependencies",
  	    "Dependent",
  	    "Derive",
  	    "Drop",
  	    "eauto",
  	    "End",
  	    "Equality",
  	    "Eval",
  	    "Example",
  	    "Existential",
  	    "Existentials",
  	    "Existing",
  	    "Export",
  	    "exporting",
  	    "Extern",
  	    "Extract",
  	    "Extraction",
  	    "Fact",
  	    "Field",
  	    "Fields",
  	    "File",
  	    "Fixpoint",
  	    "Focus",
  	    "for",
  	    "From",
  	    "Function",
  	    "Functional",
  	    "Generalizable",
  	    "Global",
  	    "Goal",
  	    "Grab",
  	    "Grammar",
  	    "Graph",
  	    "Guarded",
  	    "Heap",
  	    "Hint",
  	    "HintDb",
  	    "Hints",
  	    "Hypotheses",
  	    "Hypothesis",
  	    "ident",
  	    "Identity",
  	    "If",
  	    "Immediate",
  	    "Implicit",
  	    "Import",
  	    "Include",
  	    "Inductive",
  	    "Infix",
  	    "Info",
  	    "Initial",
  	    "Inline",
  	    "Inspect",
  	    "Instance",
  	    "Instances",
  	    "Intro",
  	    "Intros",
  	    "Inversion",
  	    "Inversion_clear",
  	    "Language",
  	    "Left",
  	    "Lemma",
  	    "Let",
  	    "Libraries",
  	    "Library",
  	    "Load",
  	    "LoadPath",
  	    "Local",
  	    "Locate",
  	    "Ltac",
  	    "ML",
  	    "Mode",
  	    "Module",
  	    "Modules",
  	    "Monomorphic",
  	    "Morphism",
  	    "Next",
  	    "NoInline",
  	    "Notation",
  	    "Obligation",
  	    "Obligations",
  	    "Opaque",
  	    "Open",
  	    "Optimize",
  	    "Options",
  	    "Parameter",
  	    "Parameters",
  	    "Parametric",
  	    "Path",
  	    "Paths",
  	    "pattern",
  	    "Polymorphic",
  	    "Preterm",
  	    "Print",
  	    "Printing",
  	    "Program",
  	    "Projections",
  	    "Proof",
  	    "Proposition",
  	    "Pwd",
  	    "Qed",
  	    "Quit",
  	    "Rec",
  	    "Record",
  	    "Recursive",
  	    "Redirect",
  	    "Relation",
  	    "Remark",
  	    "Remove",
  	    "Require",
  	    "Reserved",
  	    "Reset",
  	    "Resolve",
  	    "Restart",
  	    "Rewrite",
  	    "Right",
  	    "Ring",
  	    "Rings",
  	    "Save",
  	    "Scheme",
  	    "Scope",
  	    "Scopes",
  	    "Script",
  	    "Search",
  	    "SearchAbout",
  	    "SearchHead",
  	    "SearchPattern",
  	    "SearchRewrite",
  	    "Section",
  	    "Separate",
  	    "Set",
  	    "Setoid",
  	    "Show",
  	    "Solve",
  	    "Sorted",
  	    "Step",
  	    "Strategies",
  	    "Strategy",
  	    "Structure",
  	    "SubClass",
  	    "Table",
  	    "Tables",
  	    "Tactic",
  	    "Term",
  	    "Test",
  	    "Theorem",
  	    "Time",
  	    "Timeout",
  	    "Transparent",
  	    "Type",
  	    "Typeclasses",
  	    "Types",
  	    "Undelimit",
  	    "Undo",
  	    "Unfocus",
  	    "Unfocused",
  	    "Unfold",
  	    "Universe",
  	    "Universes",
  	    "Unset",
  	    "Unshelve",
  	    "using",
  	    "Variable",
  	    "Variables",
  	    "Variant",
  	    "Verbose",
  	    "Visibility",
  	    "where",
  	    "with"
  	  ];
  	  const BUILT_INS = [
  	    "abstract",
  	    "absurd",
  	    "admit",
  	    "after",
  	    "apply",
  	    "as",
  	    "assert",
  	    "assumption",
  	    "at",
  	    "auto",
  	    "autorewrite",
  	    "autounfold",
  	    "before",
  	    "bottom",
  	    "btauto",
  	    "by",
  	    "case",
  	    "case_eq",
  	    "cbn",
  	    "cbv",
  	    "change",
  	    "classical_left",
  	    "classical_right",
  	    "clear",
  	    "clearbody",
  	    "cofix",
  	    "compare",
  	    "compute",
  	    "congruence",
  	    "constr_eq",
  	    "constructor",
  	    "contradict",
  	    "contradiction",
  	    "cut",
  	    "cutrewrite",
  	    "cycle",
  	    "decide",
  	    "decompose",
  	    "dependent",
  	    "destruct",
  	    "destruction",
  	    "dintuition",
  	    "discriminate",
  	    "discrR",
  	    "do",
  	    "double",
  	    "dtauto",
  	    "eapply",
  	    "eassumption",
  	    "eauto",
  	    "ecase",
  	    "econstructor",
  	    "edestruct",
  	    "ediscriminate",
  	    "eelim",
  	    "eexact",
  	    "eexists",
  	    "einduction",
  	    "einjection",
  	    "eleft",
  	    "elim",
  	    "elimtype",
  	    "enough",
  	    "equality",
  	    "erewrite",
  	    "eright",
  	    "esimplify_eq",
  	    "esplit",
  	    "evar",
  	    "exact",
  	    "exactly_once",
  	    "exfalso",
  	    "exists",
  	    "f_equal",
  	    "fail",
  	    "field",
  	    "field_simplify",
  	    "field_simplify_eq",
  	    "first",
  	    "firstorder",
  	    "fix",
  	    "fold",
  	    "fourier",
  	    "functional",
  	    "generalize",
  	    "generalizing",
  	    "gfail",
  	    "give_up",
  	    "has_evar",
  	    "hnf",
  	    "idtac",
  	    "in",
  	    "induction",
  	    "injection",
  	    "instantiate",
  	    "intro",
  	    "intro_pattern",
  	    "intros",
  	    "intuition",
  	    "inversion",
  	    "inversion_clear",
  	    "is_evar",
  	    "is_var",
  	    "lapply",
  	    "lazy",
  	    "left",
  	    "lia",
  	    "lra",
  	    "move",
  	    "native_compute",
  	    "nia",
  	    "nsatz",
  	    "omega",
  	    "once",
  	    "pattern",
  	    "pose",
  	    "progress",
  	    "proof",
  	    "psatz",
  	    "quote",
  	    "record",
  	    "red",
  	    "refine",
  	    "reflexivity",
  	    "remember",
  	    "rename",
  	    "repeat",
  	    "replace",
  	    "revert",
  	    "revgoals",
  	    "rewrite",
  	    "rewrite_strat",
  	    "right",
  	    "ring",
  	    "ring_simplify",
  	    "rtauto",
  	    "set",
  	    "setoid_reflexivity",
  	    "setoid_replace",
  	    "setoid_rewrite",
  	    "setoid_symmetry",
  	    "setoid_transitivity",
  	    "shelve",
  	    "shelve_unifiable",
  	    "simpl",
  	    "simple",
  	    "simplify_eq",
  	    "solve",
  	    "specialize",
  	    "split",
  	    "split_Rabs",
  	    "split_Rmult",
  	    "stepl",
  	    "stepr",
  	    "subst",
  	    "sum",
  	    "swap",
  	    "symmetry",
  	    "tactic",
  	    "tauto",
  	    "time",
  	    "timeout",
  	    "top",
  	    "transitivity",
  	    "trivial",
  	    "try",
  	    "tryif",
  	    "unfold",
  	    "unify",
  	    "until",
  	    "using",
  	    "vm_compute",
  	    "with"
  	  ];
  	  return {
  	    name: 'Coq',
  	    keywords: {
  	      keyword: KEYWORDS,
  	      built_in: BUILT_INS
  	    },
  	    contains: [
  	      hljs.QUOTE_STRING_MODE,
  	      hljs.COMMENT('\\(\\*', '\\*\\)'),
  	      hljs.C_NUMBER_MODE,
  	      {
  	        className: 'type',
  	        excludeBegin: true,
  	        begin: '\\|\\s*',
  	        end: '\\w+'
  	      },
  	      { // relevance booster
  	        begin: /[-=]>/ }
  	    ]
  	  };
  	}

  	coq_1 = coq;
  	return coq_1;
  }

  /*
  Language: Caché Object Script
  Author: Nikita Savchenko <zitros.lab@gmail.com>
  Category: enterprise, scripting
  Website: https://cedocs.intersystems.com/latest/csp/docbook/DocBook.UI.Page.cls
  */

  var cos_1;
  var hasRequiredCos;

  function requireCos () {
  	if (hasRequiredCos) return cos_1;
  	hasRequiredCos = 1;
  	/** @type LanguageFn */
  	function cos(hljs) {
  	  const STRINGS = {
  	    className: 'string',
  	    variants: [
  	      {
  	        begin: '"',
  	        end: '"',
  	        contains: [
  	          { // escaped
  	            begin: "\"\"",
  	            relevance: 0
  	          }
  	        ]
  	      }
  	    ]
  	  };

  	  const NUMBERS = {
  	    className: "number",
  	    begin: "\\b(\\d+(\\.\\d*)?|\\.\\d+)",
  	    relevance: 0
  	  };

  	  const COS_KEYWORDS =
  	    'property parameter class classmethod clientmethod extends as break '
  	    + 'catch close continue do d|0 else elseif for goto halt hang h|0 if job '
  	    + 'j|0 kill k|0 lock l|0 merge new open quit q|0 read r|0 return set s|0 '
  	    + 'tcommit throw trollback try tstart use view while write w|0 xecute x|0 '
  	    + 'zkill znspace zn ztrap zwrite zw zzdump zzwrite print zbreak zinsert '
  	    + 'zload zprint zremove zsave zzprint mv mvcall mvcrt mvdim mvprint zquit '
  	    + 'zsync ascii';

  	  // registered function - no need in them due to all functions are highlighted,
  	  // but I'll just leave this here.

  	  // "$bit", "$bitcount",
  	  // "$bitfind", "$bitlogic", "$case", "$char", "$classmethod", "$classname",
  	  // "$compile", "$data", "$decimal", "$double", "$extract", "$factor",
  	  // "$find", "$fnumber", "$get", "$increment", "$inumber", "$isobject",
  	  // "$isvaliddouble", "$isvalidnum", "$justify", "$length", "$list",
  	  // "$listbuild", "$listdata", "$listfind", "$listfromstring", "$listget",
  	  // "$listlength", "$listnext", "$listsame", "$listtostring", "$listvalid",
  	  // "$locate", "$match", "$method", "$name", "$nconvert", "$next",
  	  // "$normalize", "$now", "$number", "$order", "$parameter", "$piece",
  	  // "$prefetchoff", "$prefetchon", "$property", "$qlength", "$qsubscript",
  	  // "$query", "$random", "$replace", "$reverse", "$sconvert", "$select",
  	  // "$sortbegin", "$sortend", "$stack", "$text", "$translate", "$view",
  	  // "$wascii", "$wchar", "$wextract", "$wfind", "$wiswide", "$wlength",
  	  // "$wreverse", "$xecute", "$zabs", "$zarccos", "$zarcsin", "$zarctan",
  	  // "$zcos", "$zcot", "$zcsc", "$zdate", "$zdateh", "$zdatetime",
  	  // "$zdatetimeh", "$zexp", "$zhex", "$zln", "$zlog", "$zpower", "$zsec",
  	  // "$zsin", "$zsqr", "$ztan", "$ztime", "$ztimeh", "$zboolean",
  	  // "$zconvert", "$zcrc", "$zcyc", "$zdascii", "$zdchar", "$zf",
  	  // "$ziswide", "$zlascii", "$zlchar", "$zname", "$zposition", "$zqascii",
  	  // "$zqchar", "$zsearch", "$zseek", "$zstrip", "$zwascii", "$zwchar",
  	  // "$zwidth", "$zwpack", "$zwbpack", "$zwunpack", "$zwbunpack", "$zzenkaku",
  	  // "$change", "$mv", "$mvat", "$mvfmt", "$mvfmts", "$mviconv",
  	  // "$mviconvs", "$mvinmat", "$mvlover", "$mvoconv", "$mvoconvs", "$mvraise",
  	  // "$mvtrans", "$mvv", "$mvname", "$zbitand", "$zbitcount", "$zbitfind",
  	  // "$zbitget", "$zbitlen", "$zbitnot", "$zbitor", "$zbitset", "$zbitstr",
  	  // "$zbitxor", "$zincrement", "$znext", "$zorder", "$zprevious", "$zsort",
  	  // "device", "$ecode", "$estack", "$etrap", "$halt", "$horolog",
  	  // "$io", "$job", "$key", "$namespace", "$principal", "$quit", "$roles",
  	  // "$storage", "$system", "$test", "$this", "$tlevel", "$username",
  	  // "$x", "$y", "$za", "$zb", "$zchild", "$zeof", "$zeos", "$zerror",
  	  // "$zhorolog", "$zio", "$zjob", "$zmode", "$znspace", "$zparent", "$zpi",
  	  // "$zpos", "$zreference", "$zstorage", "$ztimestamp", "$ztimezone",
  	  // "$ztrap", "$zversion"

  	  return {
  	    name: 'Caché Object Script',
  	    case_insensitive: true,
  	    aliases: [ "cls" ],
  	    keywords: COS_KEYWORDS,
  	    contains: [
  	      NUMBERS,
  	      STRINGS,
  	      hljs.C_LINE_COMMENT_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE,
  	      {
  	        className: "comment",
  	        begin: /;/,
  	        end: "$",
  	        relevance: 0
  	      },
  	      { // Functions and user-defined functions: write $ztime(60*60*3), $$myFunc(10), $$^Val(1)
  	        className: "built_in",
  	        begin: /(?:\$\$?|\.\.)\^?[a-zA-Z]+/
  	      },
  	      { // Macro command: quit $$$OK
  	        className: "built_in",
  	        begin: /\$\$\$[a-zA-Z]+/
  	      },
  	      { // Special (global) variables: write %request.Content; Built-in classes: %Library.Integer
  	        className: "built_in",
  	        begin: /%[a-z]+(?:\.[a-z]+)*/
  	      },
  	      { // Global variable: set ^globalName = 12 write ^globalName
  	        className: "symbol",
  	        begin: /\^%?[a-zA-Z][\w]*/
  	      },
  	      { // Some control constructions: do ##class(Package.ClassName).Method(), ##super()
  	        className: "keyword",
  	        begin: /##class|##super|#define|#dim/
  	      },
  	      // sub-languages: are not fully supported by hljs by 11/15/2015
  	      // left for the future implementation.
  	      {
  	        begin: /&sql\(/,
  	        end: /\)/,
  	        excludeBegin: true,
  	        excludeEnd: true,
  	        subLanguage: "sql"
  	      },
  	      {
  	        begin: /&(js|jscript|javascript)</,
  	        end: />/,
  	        excludeBegin: true,
  	        excludeEnd: true,
  	        subLanguage: "javascript"
  	      },
  	      {
  	        // this brakes first and last tag, but this is the only way to embed a valid html
  	        begin: /&html<\s*</,
  	        end: />\s*>/,
  	        subLanguage: "xml"
  	      }
  	    ]
  	  };
  	}

  	cos_1 = cos;
  	return cos_1;
  }

  /*
  Language: C++
  Category: common, system
  Website: https://isocpp.org
  */

  var cpp_1;
  var hasRequiredCpp;

  function requireCpp () {
  	if (hasRequiredCpp) return cpp_1;
  	hasRequiredCpp = 1;
  	/** @type LanguageFn */
  	function cpp(hljs) {
  	  const regex = hljs.regex;
  	  // added for historic reasons because `hljs.C_LINE_COMMENT_MODE` does
  	  // not include such support nor can we be sure all the grammars depending
  	  // on it would desire this behavior
  	  const C_LINE_COMMENT_MODE = hljs.COMMENT('//', '$', { contains: [ { begin: /\\\n/ } ] });
  	  const DECLTYPE_AUTO_RE = 'decltype\\(auto\\)';
  	  const NAMESPACE_RE = '[a-zA-Z_]\\w*::';
  	  const TEMPLATE_ARGUMENT_RE = '<[^<>]+>';
  	  const FUNCTION_TYPE_RE = '(?!struct)('
  	    + DECLTYPE_AUTO_RE + '|'
  	    + regex.optional(NAMESPACE_RE)
  	    + '[a-zA-Z_]\\w*' + regex.optional(TEMPLATE_ARGUMENT_RE)
  	  + ')';

  	  const CPP_PRIMITIVE_TYPES = {
  	    className: 'type',
  	    begin: '\\b[a-z\\d_]*_t\\b'
  	  };

  	  // https://en.cppreference.com/w/cpp/language/escape
  	  // \\ \x \xFF \u2837 \u00323747 \374
  	  const CHARACTER_ESCAPES = '\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\S)';
  	  const STRINGS = {
  	    className: 'string',
  	    variants: [
  	      {
  	        begin: '(u8?|U|L)?"',
  	        end: '"',
  	        illegal: '\\n',
  	        contains: [ hljs.BACKSLASH_ESCAPE ]
  	      },
  	      {
  	        begin: '(u8?|U|L)?\'(' + CHARACTER_ESCAPES + '|.)',
  	        end: '\'',
  	        illegal: '.'
  	      },
  	      hljs.END_SAME_AS_BEGIN({
  	        begin: /(?:u8?|U|L)?R"([^()\\ ]{0,16})\(/,
  	        end: /\)([^()\\ ]{0,16})"/
  	      })
  	    ]
  	  };

  	  const NUMBERS = {
  	    className: 'number',
  	    variants: [
  	      { begin: '\\b(0b[01\']+)' },
  	      { begin: '(-?)\\b([\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)' },
  	      { begin: '(-?)(\\b0[xX][a-fA-F0-9\']+|(\\b[\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)([eE][-+]?[\\d\']+)?)' }
  	    ],
  	    relevance: 0
  	  };

  	  const PREPROCESSOR = {
  	    className: 'meta',
  	    begin: /#\s*[a-z]+\b/,
  	    end: /$/,
  	    keywords: { keyword:
  	        'if else elif endif define undef warning error line '
  	        + 'pragma _Pragma ifdef ifndef include' },
  	    contains: [
  	      {
  	        begin: /\\\n/,
  	        relevance: 0
  	      },
  	      hljs.inherit(STRINGS, { className: 'string' }),
  	      {
  	        className: 'string',
  	        begin: /<.*?>/
  	      },
  	      C_LINE_COMMENT_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE
  	    ]
  	  };

  	  const TITLE_MODE = {
  	    className: 'title',
  	    begin: regex.optional(NAMESPACE_RE) + hljs.IDENT_RE,
  	    relevance: 0
  	  };

  	  const FUNCTION_TITLE = regex.optional(NAMESPACE_RE) + hljs.IDENT_RE + '\\s*\\(';

  	  // https://en.cppreference.com/w/cpp/keyword
  	  const RESERVED_KEYWORDS = [
  	    'alignas',
  	    'alignof',
  	    'and',
  	    'and_eq',
  	    'asm',
  	    'atomic_cancel',
  	    'atomic_commit',
  	    'atomic_noexcept',
  	    'auto',
  	    'bitand',
  	    'bitor',
  	    'break',
  	    'case',
  	    'catch',
  	    'class',
  	    'co_await',
  	    'co_return',
  	    'co_yield',
  	    'compl',
  	    'concept',
  	    'const_cast|10',
  	    'consteval',
  	    'constexpr',
  	    'constinit',
  	    'continue',
  	    'decltype',
  	    'default',
  	    'delete',
  	    'do',
  	    'dynamic_cast|10',
  	    'else',
  	    'enum',
  	    'explicit',
  	    'export',
  	    'extern',
  	    'false',
  	    'final',
  	    'for',
  	    'friend',
  	    'goto',
  	    'if',
  	    'import',
  	    'inline',
  	    'module',
  	    'mutable',
  	    'namespace',
  	    'new',
  	    'noexcept',
  	    'not',
  	    'not_eq',
  	    'nullptr',
  	    'operator',
  	    'or',
  	    'or_eq',
  	    'override',
  	    'private',
  	    'protected',
  	    'public',
  	    'reflexpr',
  	    'register',
  	    'reinterpret_cast|10',
  	    'requires',
  	    'return',
  	    'sizeof',
  	    'static_assert',
  	    'static_cast|10',
  	    'struct',
  	    'switch',
  	    'synchronized',
  	    'template',
  	    'this',
  	    'thread_local',
  	    'throw',
  	    'transaction_safe',
  	    'transaction_safe_dynamic',
  	    'true',
  	    'try',
  	    'typedef',
  	    'typeid',
  	    'typename',
  	    'union',
  	    'using',
  	    'virtual',
  	    'volatile',
  	    'while',
  	    'xor',
  	    'xor_eq'
  	  ];

  	  // https://en.cppreference.com/w/cpp/keyword
  	  const RESERVED_TYPES = [
  	    'bool',
  	    'char',
  	    'char16_t',
  	    'char32_t',
  	    'char8_t',
  	    'double',
  	    'float',
  	    'int',
  	    'long',
  	    'short',
  	    'void',
  	    'wchar_t',
  	    'unsigned',
  	    'signed',
  	    'const',
  	    'static'
  	  ];

  	  const TYPE_HINTS = [
  	    'any',
  	    'auto_ptr',
  	    'barrier',
  	    'binary_semaphore',
  	    'bitset',
  	    'complex',
  	    'condition_variable',
  	    'condition_variable_any',
  	    'counting_semaphore',
  	    'deque',
  	    'false_type',
  	    'future',
  	    'imaginary',
  	    'initializer_list',
  	    'istringstream',
  	    'jthread',
  	    'latch',
  	    'lock_guard',
  	    'multimap',
  	    'multiset',
  	    'mutex',
  	    'optional',
  	    'ostringstream',
  	    'packaged_task',
  	    'pair',
  	    'promise',
  	    'priority_queue',
  	    'queue',
  	    'recursive_mutex',
  	    'recursive_timed_mutex',
  	    'scoped_lock',
  	    'set',
  	    'shared_future',
  	    'shared_lock',
  	    'shared_mutex',
  	    'shared_timed_mutex',
  	    'shared_ptr',
  	    'stack',
  	    'string_view',
  	    'stringstream',
  	    'timed_mutex',
  	    'thread',
  	    'true_type',
  	    'tuple',
  	    'unique_lock',
  	    'unique_ptr',
  	    'unordered_map',
  	    'unordered_multimap',
  	    'unordered_multiset',
  	    'unordered_set',
  	    'variant',
  	    'vector',
  	    'weak_ptr',
  	    'wstring',
  	    'wstring_view'
  	  ];

  	  const FUNCTION_HINTS = [
  	    'abort',
  	    'abs',
  	    'acos',
  	    'apply',
  	    'as_const',
  	    'asin',
  	    'atan',
  	    'atan2',
  	    'calloc',
  	    'ceil',
  	    'cerr',
  	    'cin',
  	    'clog',
  	    'cos',
  	    'cosh',
  	    'cout',
  	    'declval',
  	    'endl',
  	    'exchange',
  	    'exit',
  	    'exp',
  	    'fabs',
  	    'floor',
  	    'fmod',
  	    'forward',
  	    'fprintf',
  	    'fputs',
  	    'free',
  	    'frexp',
  	    'fscanf',
  	    'future',
  	    'invoke',
  	    'isalnum',
  	    'isalpha',
  	    'iscntrl',
  	    'isdigit',
  	    'isgraph',
  	    'islower',
  	    'isprint',
  	    'ispunct',
  	    'isspace',
  	    'isupper',
  	    'isxdigit',
  	    'labs',
  	    'launder',
  	    'ldexp',
  	    'log',
  	    'log10',
  	    'make_pair',
  	    'make_shared',
  	    'make_shared_for_overwrite',
  	    'make_tuple',
  	    'make_unique',
  	    'malloc',
  	    'memchr',
  	    'memcmp',
  	    'memcpy',
  	    'memset',
  	    'modf',
  	    'move',
  	    'pow',
  	    'printf',
  	    'putchar',
  	    'puts',
  	    'realloc',
  	    'scanf',
  	    'sin',
  	    'sinh',
  	    'snprintf',
  	    'sprintf',
  	    'sqrt',
  	    'sscanf',
  	    'std',
  	    'stderr',
  	    'stdin',
  	    'stdout',
  	    'strcat',
  	    'strchr',
  	    'strcmp',
  	    'strcpy',
  	    'strcspn',
  	    'strlen',
  	    'strncat',
  	    'strncmp',
  	    'strncpy',
  	    'strpbrk',
  	    'strrchr',
  	    'strspn',
  	    'strstr',
  	    'swap',
  	    'tan',
  	    'tanh',
  	    'terminate',
  	    'to_underlying',
  	    'tolower',
  	    'toupper',
  	    'vfprintf',
  	    'visit',
  	    'vprintf',
  	    'vsprintf'
  	  ];

  	  const LITERALS = [
  	    'NULL',
  	    'false',
  	    'nullopt',
  	    'nullptr',
  	    'true'
  	  ];

  	  // https://en.cppreference.com/w/cpp/keyword
  	  const BUILT_IN = [ '_Pragma' ];

  	  const CPP_KEYWORDS = {
  	    type: RESERVED_TYPES,
  	    keyword: RESERVED_KEYWORDS,
  	    literal: LITERALS,
  	    built_in: BUILT_IN,
  	    _type_hints: TYPE_HINTS
  	  };

  	  const FUNCTION_DISPATCH = {
  	    className: 'function.dispatch',
  	    relevance: 0,
  	    keywords: {
  	      // Only for relevance, not highlighting.
  	      _hint: FUNCTION_HINTS },
  	    begin: regex.concat(
  	      /\b/,
  	      /(?!decltype)/,
  	      /(?!if)/,
  	      /(?!for)/,
  	      /(?!switch)/,
  	      /(?!while)/,
  	      hljs.IDENT_RE,
  	      regex.lookahead(/(<[^<>]+>|)\s*\(/))
  	  };

  	  const EXPRESSION_CONTAINS = [
  	    FUNCTION_DISPATCH,
  	    PREPROCESSOR,
  	    CPP_PRIMITIVE_TYPES,
  	    C_LINE_COMMENT_MODE,
  	    hljs.C_BLOCK_COMMENT_MODE,
  	    NUMBERS,
  	    STRINGS
  	  ];

  	  const EXPRESSION_CONTEXT = {
  	    // This mode covers expression context where we can't expect a function
  	    // definition and shouldn't highlight anything that looks like one:
  	    // `return some()`, `else if()`, `(x*sum(1, 2))`
  	    variants: [
  	      {
  	        begin: /=/,
  	        end: /;/
  	      },
  	      {
  	        begin: /\(/,
  	        end: /\)/
  	      },
  	      {
  	        beginKeywords: 'new throw return else',
  	        end: /;/
  	      }
  	    ],
  	    keywords: CPP_KEYWORDS,
  	    contains: EXPRESSION_CONTAINS.concat([
  	      {
  	        begin: /\(/,
  	        end: /\)/,
  	        keywords: CPP_KEYWORDS,
  	        contains: EXPRESSION_CONTAINS.concat([ 'self' ]),
  	        relevance: 0
  	      }
  	    ]),
  	    relevance: 0
  	  };

  	  const FUNCTION_DECLARATION = {
  	    className: 'function',
  	    begin: '(' + FUNCTION_TYPE_RE + '[\\*&\\s]+)+' + FUNCTION_TITLE,
  	    returnBegin: true,
  	    end: /[{;=]/,
  	    excludeEnd: true,
  	    keywords: CPP_KEYWORDS,
  	    illegal: /[^\w\s\*&:<>.]/,
  	    contains: [
  	      { // to prevent it from being confused as the function title
  	        begin: DECLTYPE_AUTO_RE,
  	        keywords: CPP_KEYWORDS,
  	        relevance: 0
  	      },
  	      {
  	        begin: FUNCTION_TITLE,
  	        returnBegin: true,
  	        contains: [ TITLE_MODE ],
  	        relevance: 0
  	      },
  	      // needed because we do not have look-behind on the below rule
  	      // to prevent it from grabbing the final : in a :: pair
  	      {
  	        begin: /::/,
  	        relevance: 0
  	      },
  	      // initializers
  	      {
  	        begin: /:/,
  	        endsWithParent: true,
  	        contains: [
  	          STRINGS,
  	          NUMBERS
  	        ]
  	      },
  	      // allow for multiple declarations, e.g.:
  	      // extern void f(int), g(char);
  	      {
  	        relevance: 0,
  	        match: /,/
  	      },
  	      {
  	        className: 'params',
  	        begin: /\(/,
  	        end: /\)/,
  	        keywords: CPP_KEYWORDS,
  	        relevance: 0,
  	        contains: [
  	          C_LINE_COMMENT_MODE,
  	          hljs.C_BLOCK_COMMENT_MODE,
  	          STRINGS,
  	          NUMBERS,
  	          CPP_PRIMITIVE_TYPES,
  	          // Count matching parentheses.
  	          {
  	            begin: /\(/,
  	            end: /\)/,
  	            keywords: CPP_KEYWORDS,
  	            relevance: 0,
  	            contains: [
  	              'self',
  	              C_LINE_COMMENT_MODE,
  	              hljs.C_BLOCK_COMMENT_MODE,
  	              STRINGS,
  	              NUMBERS,
  	              CPP_PRIMITIVE_TYPES
  	            ]
  	          }
  	        ]
  	      },
  	      CPP_PRIMITIVE_TYPES,
  	      C_LINE_COMMENT_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE,
  	      PREPROCESSOR
  	    ]
  	  };

  	  return {
  	    name: 'C++',
  	    aliases: [
  	      'cc',
  	      'c++',
  	      'h++',
  	      'hpp',
  	      'hh',
  	      'hxx',
  	      'cxx'
  	    ],
  	    keywords: CPP_KEYWORDS,
  	    illegal: '</',
  	    classNameAliases: { 'function.dispatch': 'built_in' },
  	    contains: [].concat(
  	      EXPRESSION_CONTEXT,
  	      FUNCTION_DECLARATION,
  	      FUNCTION_DISPATCH,
  	      EXPRESSION_CONTAINS,
  	      [
  	        PREPROCESSOR,
  	        { // containers: ie, `vector <int> rooms (9);`
  	          begin: '\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array|tuple|optional|variant|function)\\s*<(?!<)',
  	          end: '>',
  	          keywords: CPP_KEYWORDS,
  	          contains: [
  	            'self',
  	            CPP_PRIMITIVE_TYPES
  	          ]
  	        },
  	        {
  	          begin: hljs.IDENT_RE + '::',
  	          keywords: CPP_KEYWORDS
  	        },
  	        {
  	          match: [
  	            // extra complexity to deal with `enum class` and `enum struct`
  	            /\b(?:enum(?:\s+(?:class|struct))?|class|struct|union)/,
  	            /\s+/,
  	            /\w+/
  	          ],
  	          className: {
  	            1: 'keyword',
  	            3: 'title.class'
  	          }
  	        }
  	      ])
  	  };
  	}

  	cpp_1 = cpp;
  	return cpp_1;
  }

  /*
  Language: crmsh
  Author: Kristoffer Gronlund <kgronlund@suse.com>
  Website: http://crmsh.github.io
  Description: Syntax Highlighting for the crmsh DSL
  Category: config
  */

  var crmsh_1;
  var hasRequiredCrmsh;

  function requireCrmsh () {
  	if (hasRequiredCrmsh) return crmsh_1;
  	hasRequiredCrmsh = 1;
  	/** @type LanguageFn */
  	function crmsh(hljs) {
  	  const RESOURCES = 'primitive rsc_template';
  	  const COMMANDS = 'group clone ms master location colocation order fencing_topology '
  	      + 'rsc_ticket acl_target acl_group user role '
  	      + 'tag xml';
  	  const PROPERTY_SETS = 'property rsc_defaults op_defaults';
  	  const KEYWORDS = 'params meta operations op rule attributes utilization';
  	  const OPERATORS = 'read write deny defined not_defined in_range date spec in '
  	      + 'ref reference attribute type xpath version and or lt gt tag '
  	      + 'lte gte eq ne \\';
  	  const TYPES = 'number string';
  	  const LITERALS = 'Master Started Slave Stopped start promote demote stop monitor true false';

  	  return {
  	    name: 'crmsh',
  	    aliases: [
  	      'crm',
  	      'pcmk'
  	    ],
  	    case_insensitive: true,
  	    keywords: {
  	      keyword: KEYWORDS + ' ' + OPERATORS + ' ' + TYPES,
  	      literal: LITERALS
  	    },
  	    contains: [
  	      hljs.HASH_COMMENT_MODE,
  	      {
  	        beginKeywords: 'node',
  	        starts: {
  	          end: '\\s*([\\w_-]+:)?',
  	          starts: {
  	            className: 'title',
  	            end: '\\s*[\\$\\w_][\\w_-]*'
  	          }
  	        }
  	      },
  	      {
  	        beginKeywords: RESOURCES,
  	        starts: {
  	          className: 'title',
  	          end: '\\s*[\\$\\w_][\\w_-]*',
  	          starts: { end: '\\s*@?[\\w_][\\w_\\.:-]*' }
  	        }
  	      },
  	      {
  	        begin: '\\b(' + COMMANDS.split(' ').join('|') + ')\\s+',
  	        keywords: COMMANDS,
  	        starts: {
  	          className: 'title',
  	          end: '[\\$\\w_][\\w_-]*'
  	        }
  	      },
  	      {
  	        beginKeywords: PROPERTY_SETS,
  	        starts: {
  	          className: 'title',
  	          end: '\\s*([\\w_-]+:)?'
  	        }
  	      },
  	      hljs.QUOTE_STRING_MODE,
  	      {
  	        className: 'meta',
  	        begin: '(ocf|systemd|service|lsb):[\\w_:-]+',
  	        relevance: 0
  	      },
  	      {
  	        className: 'number',
  	        begin: '\\b\\d+(\\.\\d+)?(ms|s|h|m)?',
  	        relevance: 0
  	      },
  	      {
  	        className: 'literal',
  	        begin: '[-]?(infinity|inf)',
  	        relevance: 0
  	      },
  	      {
  	        className: 'attr',
  	        begin: /([A-Za-z$_#][\w_-]+)=/,
  	        relevance: 0
  	      },
  	      {
  	        className: 'tag',
  	        begin: '</?',
  	        end: '/?>',
  	        relevance: 0
  	      }
  	    ]
  	  };
  	}

  	crmsh_1 = crmsh;
  	return crmsh_1;
  }

  /*
  Language: Crystal
  Author: TSUYUSATO Kitsune <make.just.on@gmail.com>
  Website: https://crystal-lang.org
  */

  var crystal_1;
  var hasRequiredCrystal;

  function requireCrystal () {
  	if (hasRequiredCrystal) return crystal_1;
  	hasRequiredCrystal = 1;
  	/** @type LanguageFn */
  	function crystal(hljs) {
  	  const INT_SUFFIX = '(_?[ui](8|16|32|64|128))?';
  	  const FLOAT_SUFFIX = '(_?f(32|64))?';
  	  const CRYSTAL_IDENT_RE = '[a-zA-Z_]\\w*[!?=]?';
  	  const CRYSTAL_METHOD_RE = '[a-zA-Z_]\\w*[!?=]?|[-+~]@|<<|>>|[=!]~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~|]|//|//=|&[-+*]=?|&\\*\\*|\\[\\][=?]?';
  	  const CRYSTAL_PATH_RE = '[A-Za-z_]\\w*(::\\w+)*(\\?|!)?';
  	  const CRYSTAL_KEYWORDS = {
  	    $pattern: CRYSTAL_IDENT_RE,
  	    keyword:
  	      'abstract alias annotation as as? asm begin break case class def do else elsif end ensure enum extend for fun if '
  	      + 'include instance_sizeof is_a? lib macro module next nil? of out pointerof private protected rescue responds_to? '
  	      + 'return require select self sizeof struct super then type typeof union uninitialized unless until verbatim when while with yield '
  	      + '__DIR__ __END_LINE__ __FILE__ __LINE__',
  	    literal: 'false nil true'
  	  };
  	  const SUBST = {
  	    className: 'subst',
  	    begin: /#\{/,
  	    end: /\}/,
  	    keywords: CRYSTAL_KEYWORDS
  	  };
  	  // borrowed from Ruby
  	  const VARIABLE = {
  	    // negative-look forward attemps to prevent false matches like:
  	    // @ident@ or $ident$ that might indicate this is not ruby at all
  	    className: "variable",
  	    begin: '(\\$\\W)|((\\$|@@?)(\\w+))(?=[^@$?])' + `(?![A-Za-z])(?![@$?'])`
  	  };
  	  const EXPANSION = {
  	    className: 'template-variable',
  	    variants: [
  	      {
  	        begin: '\\{\\{',
  	        end: '\\}\\}'
  	      },
  	      {
  	        begin: '\\{%',
  	        end: '%\\}'
  	      }
  	    ],
  	    keywords: CRYSTAL_KEYWORDS
  	  };

  	  function recursiveParen(begin, end) {
  	    const
  	        contains = [
  	          {
  	            begin: begin,
  	            end: end
  	          }
  	        ];
  	    contains[0].contains = contains;
  	    return contains;
  	  }
  	  const STRING = {
  	    className: 'string',
  	    contains: [
  	      hljs.BACKSLASH_ESCAPE,
  	      SUBST
  	    ],
  	    variants: [
  	      {
  	        begin: /'/,
  	        end: /'/
  	      },
  	      {
  	        begin: /"/,
  	        end: /"/
  	      },
  	      {
  	        begin: /`/,
  	        end: /`/
  	      },
  	      {
  	        begin: '%[Qwi]?\\(',
  	        end: '\\)',
  	        contains: recursiveParen('\\(', '\\)')
  	      },
  	      {
  	        begin: '%[Qwi]?\\[',
  	        end: '\\]',
  	        contains: recursiveParen('\\[', '\\]')
  	      },
  	      {
  	        begin: '%[Qwi]?\\{',
  	        end: /\}/,
  	        contains: recursiveParen(/\{/, /\}/)
  	      },
  	      {
  	        begin: '%[Qwi]?<',
  	        end: '>',
  	        contains: recursiveParen('<', '>')
  	      },
  	      {
  	        begin: '%[Qwi]?\\|',
  	        end: '\\|'
  	      },
  	      {
  	        begin: /<<-\w+$/,
  	        end: /^\s*\w+$/
  	      }
  	    ],
  	    relevance: 0
  	  };
  	  const Q_STRING = {
  	    className: 'string',
  	    variants: [
  	      {
  	        begin: '%q\\(',
  	        end: '\\)',
  	        contains: recursiveParen('\\(', '\\)')
  	      },
  	      {
  	        begin: '%q\\[',
  	        end: '\\]',
  	        contains: recursiveParen('\\[', '\\]')
  	      },
  	      {
  	        begin: '%q\\{',
  	        end: /\}/,
  	        contains: recursiveParen(/\{/, /\}/)
  	      },
  	      {
  	        begin: '%q<',
  	        end: '>',
  	        contains: recursiveParen('<', '>')
  	      },
  	      {
  	        begin: '%q\\|',
  	        end: '\\|'
  	      },
  	      {
  	        begin: /<<-'\w+'$/,
  	        end: /^\s*\w+$/
  	      }
  	    ],
  	    relevance: 0
  	  };
  	  const REGEXP = {
  	    begin: '(?!%\\})(' + hljs.RE_STARTERS_RE + '|\\n|\\b(case|if|select|unless|until|when|while)\\b)\\s*',
  	    keywords: 'case if select unless until when while',
  	    contains: [
  	      {
  	        className: 'regexp',
  	        contains: [
  	          hljs.BACKSLASH_ESCAPE,
  	          SUBST
  	        ],
  	        variants: [
  	          {
  	            begin: '//[a-z]*',
  	            relevance: 0
  	          },
  	          {
  	            begin: '/(?!\\/)',
  	            end: '/[a-z]*'
  	          }
  	        ]
  	      }
  	    ],
  	    relevance: 0
  	  };
  	  const REGEXP2 = {
  	    className: 'regexp',
  	    contains: [
  	      hljs.BACKSLASH_ESCAPE,
  	      SUBST
  	    ],
  	    variants: [
  	      {
  	        begin: '%r\\(',
  	        end: '\\)',
  	        contains: recursiveParen('\\(', '\\)')
  	      },
  	      {
  	        begin: '%r\\[',
  	        end: '\\]',
  	        contains: recursiveParen('\\[', '\\]')
  	      },
  	      {
  	        begin: '%r\\{',
  	        end: /\}/,
  	        contains: recursiveParen(/\{/, /\}/)
  	      },
  	      {
  	        begin: '%r<',
  	        end: '>',
  	        contains: recursiveParen('<', '>')
  	      },
  	      {
  	        begin: '%r\\|',
  	        end: '\\|'
  	      }
  	    ],
  	    relevance: 0
  	  };
  	  const ATTRIBUTE = {
  	    className: 'meta',
  	    begin: '@\\[',
  	    end: '\\]',
  	    contains: [ hljs.inherit(hljs.QUOTE_STRING_MODE, { className: 'string' }) ]
  	  };
  	  const CRYSTAL_DEFAULT_CONTAINS = [
  	    EXPANSION,
  	    STRING,
  	    Q_STRING,
  	    REGEXP2,
  	    REGEXP,
  	    ATTRIBUTE,
  	    VARIABLE,
  	    hljs.HASH_COMMENT_MODE,
  	    {
  	      className: 'class',
  	      beginKeywords: 'class module struct',
  	      end: '$|;',
  	      illegal: /=/,
  	      contains: [
  	        hljs.HASH_COMMENT_MODE,
  	        hljs.inherit(hljs.TITLE_MODE, { begin: CRYSTAL_PATH_RE }),
  	        { // relevance booster for inheritance
  	          begin: '<' }
  	      ]
  	    },
  	    {
  	      className: 'class',
  	      beginKeywords: 'lib enum union',
  	      end: '$|;',
  	      illegal: /=/,
  	      contains: [
  	        hljs.HASH_COMMENT_MODE,
  	        hljs.inherit(hljs.TITLE_MODE, { begin: CRYSTAL_PATH_RE })
  	      ]
  	    },
  	    {
  	      beginKeywords: 'annotation',
  	      end: '$|;',
  	      illegal: /=/,
  	      contains: [
  	        hljs.HASH_COMMENT_MODE,
  	        hljs.inherit(hljs.TITLE_MODE, { begin: CRYSTAL_PATH_RE })
  	      ],
  	      relevance: 2
  	    },
  	    {
  	      className: 'function',
  	      beginKeywords: 'def',
  	      end: /\B\b/,
  	      contains: [
  	        hljs.inherit(hljs.TITLE_MODE, {
  	          begin: CRYSTAL_METHOD_RE,
  	          endsParent: true
  	        })
  	      ]
  	    },
  	    {
  	      className: 'function',
  	      beginKeywords: 'fun macro',
  	      end: /\B\b/,
  	      contains: [
  	        hljs.inherit(hljs.TITLE_MODE, {
  	          begin: CRYSTAL_METHOD_RE,
  	          endsParent: true
  	        })
  	      ],
  	      relevance: 2
  	    },
  	    {
  	      className: 'symbol',
  	      begin: hljs.UNDERSCORE_IDENT_RE + '(!|\\?)?:',
  	      relevance: 0
  	    },
  	    {
  	      className: 'symbol',
  	      begin: ':',
  	      contains: [
  	        STRING,
  	        { begin: CRYSTAL_METHOD_RE }
  	      ],
  	      relevance: 0
  	    },
  	    {
  	      className: 'number',
  	      variants: [
  	        { begin: '\\b0b([01_]+)' + INT_SUFFIX },
  	        { begin: '\\b0o([0-7_]+)' + INT_SUFFIX },
  	        { begin: '\\b0x([A-Fa-f0-9_]+)' + INT_SUFFIX },
  	        { begin: '\\b([1-9][0-9_]*[0-9]|[0-9])(\\.[0-9][0-9_]*)?([eE]_?[-+]?[0-9_]*)?' + FLOAT_SUFFIX + '(?!_)' },
  	        { begin: '\\b([1-9][0-9_]*|0)' + INT_SUFFIX }
  	      ],
  	      relevance: 0
  	    }
  	  ];
  	  SUBST.contains = CRYSTAL_DEFAULT_CONTAINS;
  	  EXPANSION.contains = CRYSTAL_DEFAULT_CONTAINS.slice(1); // without EXPANSION

  	  return {
  	    name: 'Crystal',
  	    aliases: [ 'cr' ],
  	    keywords: CRYSTAL_KEYWORDS,
  	    contains: CRYSTAL_DEFAULT_CONTAINS
  	  };
  	}

  	crystal_1 = crystal;
  	return crystal_1;
  }

  /*
  Language: C#
  Author: Jason Diamond <jason@diamond.name>
  Contributor: Nicolas LLOBERA <nllobera@gmail.com>, Pieter Vantorre <pietervantorre@gmail.com>, David Pine <david.pine@microsoft.com>
  Website: https://docs.microsoft.com/dotnet/csharp/
  Category: common
  */

  var csharp_1;
  var hasRequiredCsharp;

  function requireCsharp () {
  	if (hasRequiredCsharp) return csharp_1;
  	hasRequiredCsharp = 1;
  	/** @type LanguageFn */
  	function csharp(hljs) {
  	  const BUILT_IN_KEYWORDS = [
  	    'bool',
  	    'byte',
  	    'char',
  	    'decimal',
  	    'delegate',
  	    'double',
  	    'dynamic',
  	    'enum',
  	    'float',
  	    'int',
  	    'long',
  	    'nint',
  	    'nuint',
  	    'object',
  	    'sbyte',
  	    'short',
  	    'string',
  	    'ulong',
  	    'uint',
  	    'ushort'
  	  ];
  	  const FUNCTION_MODIFIERS = [
  	    'public',
  	    'private',
  	    'protected',
  	    'static',
  	    'internal',
  	    'protected',
  	    'abstract',
  	    'async',
  	    'extern',
  	    'override',
  	    'unsafe',
  	    'virtual',
  	    'new',
  	    'sealed',
  	    'partial'
  	  ];
  	  const LITERAL_KEYWORDS = [
  	    'default',
  	    'false',
  	    'null',
  	    'true'
  	  ];
  	  const NORMAL_KEYWORDS = [
  	    'abstract',
  	    'as',
  	    'base',
  	    'break',
  	    'case',
  	    'catch',
  	    'class',
  	    'const',
  	    'continue',
  	    'do',
  	    'else',
  	    'event',
  	    'explicit',
  	    'extern',
  	    'finally',
  	    'fixed',
  	    'for',
  	    'foreach',
  	    'goto',
  	    'if',
  	    'implicit',
  	    'in',
  	    'interface',
  	    'internal',
  	    'is',
  	    'lock',
  	    'namespace',
  	    'new',
  	    'operator',
  	    'out',
  	    'override',
  	    'params',
  	    'private',
  	    'protected',
  	    'public',
  	    'readonly',
  	    'record',
  	    'ref',
  	    'return',
  	    'scoped',
  	    'sealed',
  	    'sizeof',
  	    'stackalloc',
  	    'static',
  	    'struct',
  	    'switch',
  	    'this',
  	    'throw',
  	    'try',
  	    'typeof',
  	    'unchecked',
  	    'unsafe',
  	    'using',
  	    'virtual',
  	    'void',
  	    'volatile',
  	    'while'
  	  ];
  	  const CONTEXTUAL_KEYWORDS = [
  	    'add',
  	    'alias',
  	    'and',
  	    'ascending',
  	    'async',
  	    'await',
  	    'by',
  	    'descending',
  	    'equals',
  	    'from',
  	    'get',
  	    'global',
  	    'group',
  	    'init',
  	    'into',
  	    'join',
  	    'let',
  	    'nameof',
  	    'not',
  	    'notnull',
  	    'on',
  	    'or',
  	    'orderby',
  	    'partial',
  	    'remove',
  	    'select',
  	    'set',
  	    'unmanaged',
  	    'value|0',
  	    'var',
  	    'when',
  	    'where',
  	    'with',
  	    'yield'
  	  ];

  	  const KEYWORDS = {
  	    keyword: NORMAL_KEYWORDS.concat(CONTEXTUAL_KEYWORDS),
  	    built_in: BUILT_IN_KEYWORDS,
  	    literal: LITERAL_KEYWORDS
  	  };
  	  const TITLE_MODE = hljs.inherit(hljs.TITLE_MODE, { begin: '[a-zA-Z](\\.?\\w)*' });
  	  const NUMBERS = {
  	    className: 'number',
  	    variants: [
  	      { begin: '\\b(0b[01\']+)' },
  	      { begin: '(-?)\\b([\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)(u|U|l|L|ul|UL|f|F|b|B)' },
  	      { begin: '(-?)(\\b0[xX][a-fA-F0-9\']+|(\\b[\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)([eE][-+]?[\\d\']+)?)' }
  	    ],
  	    relevance: 0
  	  };
  	  const VERBATIM_STRING = {
  	    className: 'string',
  	    begin: '@"',
  	    end: '"',
  	    contains: [ { begin: '""' } ]
  	  };
  	  const VERBATIM_STRING_NO_LF = hljs.inherit(VERBATIM_STRING, { illegal: /\n/ });
  	  const SUBST = {
  	    className: 'subst',
  	    begin: /\{/,
  	    end: /\}/,
  	    keywords: KEYWORDS
  	  };
  	  const SUBST_NO_LF = hljs.inherit(SUBST, { illegal: /\n/ });
  	  const INTERPOLATED_STRING = {
  	    className: 'string',
  	    begin: /\$"/,
  	    end: '"',
  	    illegal: /\n/,
  	    contains: [
  	      { begin: /\{\{/ },
  	      { begin: /\}\}/ },
  	      hljs.BACKSLASH_ESCAPE,
  	      SUBST_NO_LF
  	    ]
  	  };
  	  const INTERPOLATED_VERBATIM_STRING = {
  	    className: 'string',
  	    begin: /\$@"/,
  	    end: '"',
  	    contains: [
  	      { begin: /\{\{/ },
  	      { begin: /\}\}/ },
  	      { begin: '""' },
  	      SUBST
  	    ]
  	  };
  	  const INTERPOLATED_VERBATIM_STRING_NO_LF = hljs.inherit(INTERPOLATED_VERBATIM_STRING, {
  	    illegal: /\n/,
  	    contains: [
  	      { begin: /\{\{/ },
  	      { begin: /\}\}/ },
  	      { begin: '""' },
  	      SUBST_NO_LF
  	    ]
  	  });
  	  SUBST.contains = [
  	    INTERPOLATED_VERBATIM_STRING,
  	    INTERPOLATED_STRING,
  	    VERBATIM_STRING,
  	    hljs.APOS_STRING_MODE,
  	    hljs.QUOTE_STRING_MODE,
  	    NUMBERS,
  	    hljs.C_BLOCK_COMMENT_MODE
  	  ];
  	  SUBST_NO_LF.contains = [
  	    INTERPOLATED_VERBATIM_STRING_NO_LF,
  	    INTERPOLATED_STRING,
  	    VERBATIM_STRING_NO_LF,
  	    hljs.APOS_STRING_MODE,
  	    hljs.QUOTE_STRING_MODE,
  	    NUMBERS,
  	    hljs.inherit(hljs.C_BLOCK_COMMENT_MODE, { illegal: /\n/ })
  	  ];
  	  const STRING = { variants: [
  	    INTERPOLATED_VERBATIM_STRING,
  	    INTERPOLATED_STRING,
  	    VERBATIM_STRING,
  	    hljs.APOS_STRING_MODE,
  	    hljs.QUOTE_STRING_MODE
  	  ] };

  	  const GENERIC_MODIFIER = {
  	    begin: "<",
  	    end: ">",
  	    contains: [
  	      { beginKeywords: "in out" },
  	      TITLE_MODE
  	    ]
  	  };
  	  const TYPE_IDENT_RE = hljs.IDENT_RE + '(<' + hljs.IDENT_RE + '(\\s*,\\s*' + hljs.IDENT_RE + ')*>)?(\\[\\])?';
  	  const AT_IDENTIFIER = {
  	    // prevents expressions like `@class` from incorrect flagging
  	    // `class` as a keyword
  	    begin: "@" + hljs.IDENT_RE,
  	    relevance: 0
  	  };

  	  return {
  	    name: 'C#',
  	    aliases: [
  	      'cs',
  	      'c#'
  	    ],
  	    keywords: KEYWORDS,
  	    illegal: /::/,
  	    contains: [
  	      hljs.COMMENT(
  	        '///',
  	        '$',
  	        {
  	          returnBegin: true,
  	          contains: [
  	            {
  	              className: 'doctag',
  	              variants: [
  	                {
  	                  begin: '///',
  	                  relevance: 0
  	                },
  	                { begin: '<!--|-->' },
  	                {
  	                  begin: '</?',
  	                  end: '>'
  	                }
  	              ]
  	            }
  	          ]
  	        }
  	      ),
  	      hljs.C_LINE_COMMENT_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE,
  	      {
  	        className: 'meta',
  	        begin: '#',
  	        end: '$',
  	        keywords: { keyword: 'if else elif endif define undef warning error line region endregion pragma checksum' }
  	      },
  	      STRING,
  	      NUMBERS,
  	      {
  	        beginKeywords: 'class interface',
  	        relevance: 0,
  	        end: /[{;=]/,
  	        illegal: /[^\s:,]/,
  	        contains: [
  	          { beginKeywords: "where class" },
  	          TITLE_MODE,
  	          GENERIC_MODIFIER,
  	          hljs.C_LINE_COMMENT_MODE,
  	          hljs.C_BLOCK_COMMENT_MODE
  	        ]
  	      },
  	      {
  	        beginKeywords: 'namespace',
  	        relevance: 0,
  	        end: /[{;=]/,
  	        illegal: /[^\s:]/,
  	        contains: [
  	          TITLE_MODE,
  	          hljs.C_LINE_COMMENT_MODE,
  	          hljs.C_BLOCK_COMMENT_MODE
  	        ]
  	      },
  	      {
  	        beginKeywords: 'record',
  	        relevance: 0,
  	        end: /[{;=]/,
  	        illegal: /[^\s:]/,
  	        contains: [
  	          TITLE_MODE,
  	          GENERIC_MODIFIER,
  	          hljs.C_LINE_COMMENT_MODE,
  	          hljs.C_BLOCK_COMMENT_MODE
  	        ]
  	      },
  	      {
  	        // [Attributes("")]
  	        className: 'meta',
  	        begin: '^\\s*\\[(?=[\\w])',
  	        excludeBegin: true,
  	        end: '\\]',
  	        excludeEnd: true,
  	        contains: [
  	          {
  	            className: 'string',
  	            begin: /"/,
  	            end: /"/
  	          }
  	        ]
  	      },
  	      {
  	        // Expression keywords prevent 'keyword Name(...)' from being
  	        // recognized as a function definition
  	        beginKeywords: 'new return throw await else',
  	        relevance: 0
  	      },
  	      {
  	        className: 'function',
  	        begin: '(' + TYPE_IDENT_RE + '\\s+)+' + hljs.IDENT_RE + '\\s*(<[^=]+>\\s*)?\\(',
  	        returnBegin: true,
  	        end: /\s*[{;=]/,
  	        excludeEnd: true,
  	        keywords: KEYWORDS,
  	        contains: [
  	          // prevents these from being highlighted `title`
  	          {
  	            beginKeywords: FUNCTION_MODIFIERS.join(" "),
  	            relevance: 0
  	          },
  	          {
  	            begin: hljs.IDENT_RE + '\\s*(<[^=]+>\\s*)?\\(',
  	            returnBegin: true,
  	            contains: [
  	              hljs.TITLE_MODE,
  	              GENERIC_MODIFIER
  	            ],
  	            relevance: 0
  	          },
  	          { match: /\(\)/ },
  	          {
  	            className: 'params',
  	            begin: /\(/,
  	            end: /\)/,
  	            excludeBegin: true,
  	            excludeEnd: true,
  	            keywords: KEYWORDS,
  	            relevance: 0,
  	            contains: [
  	              STRING,
  	              NUMBERS,
  	              hljs.C_BLOCK_COMMENT_MODE
  	            ]
  	          },
  	          hljs.C_LINE_COMMENT_MODE,
  	          hljs.C_BLOCK_COMMENT_MODE
  	        ]
  	      },
  	      AT_IDENTIFIER
  	    ]
  	  };
  	}

  	csharp_1 = csharp;
  	return csharp_1;
  }

  /*
  Language: CSP
  Description: Content Security Policy definition highlighting
  Author: Taras <oxdef@oxdef.info>
  Website: https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP

  vim: ts=2 sw=2 st=2
  */

  var csp_1;
  var hasRequiredCsp;

  function requireCsp () {
  	if (hasRequiredCsp) return csp_1;
  	hasRequiredCsp = 1;
  	/** @type LanguageFn */
  	function csp(hljs) {
  	  const KEYWORDS = [
  	    "base-uri",
  	    "child-src",
  	    "connect-src",
  	    "default-src",
  	    "font-src",
  	    "form-action",
  	    "frame-ancestors",
  	    "frame-src",
  	    "img-src",
  	    "manifest-src",
  	    "media-src",
  	    "object-src",
  	    "plugin-types",
  	    "report-uri",
  	    "sandbox",
  	    "script-src",
  	    "style-src",
  	    "trusted-types",
  	    "unsafe-hashes",
  	    "worker-src"
  	  ];
  	  return {
  	    name: 'CSP',
  	    case_insensitive: false,
  	    keywords: {
  	      $pattern: '[a-zA-Z][a-zA-Z0-9_-]*',
  	      keyword: KEYWORDS
  	    },
  	    contains: [
  	      {
  	        className: 'string',
  	        begin: "'",
  	        end: "'"
  	      },
  	      {
  	        className: 'attribute',
  	        begin: '^Content',
  	        end: ':',
  	        excludeEnd: true
  	      }
  	    ]
  	  };
  	}

  	csp_1 = csp;
  	return csp_1;
  }

  var css_1;
  var hasRequiredCss;

  function requireCss () {
  	if (hasRequiredCss) return css_1;
  	hasRequiredCss = 1;
  	const MODES = (hljs) => {
  	  return {
  	    IMPORTANT: {
  	      scope: 'meta',
  	      begin: '!important'
  	    },
  	    BLOCK_COMMENT: hljs.C_BLOCK_COMMENT_MODE,
  	    HEXCOLOR: {
  	      scope: 'number',
  	      begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/
  	    },
  	    FUNCTION_DISPATCH: {
  	      className: "built_in",
  	      begin: /[\w-]+(?=\()/
  	    },
  	    ATTRIBUTE_SELECTOR_MODE: {
  	      scope: 'selector-attr',
  	      begin: /\[/,
  	      end: /\]/,
  	      illegal: '$',
  	      contains: [
  	        hljs.APOS_STRING_MODE,
  	        hljs.QUOTE_STRING_MODE
  	      ]
  	    },
  	    CSS_NUMBER_MODE: {
  	      scope: 'number',
  	      begin: hljs.NUMBER_RE + '(' +
  	        '%|em|ex|ch|rem' +
  	        '|vw|vh|vmin|vmax' +
  	        '|cm|mm|in|pt|pc|px' +
  	        '|deg|grad|rad|turn' +
  	        '|s|ms' +
  	        '|Hz|kHz' +
  	        '|dpi|dpcm|dppx' +
  	        ')?',
  	      relevance: 0
  	    },
  	    CSS_VARIABLE: {
  	      className: "attr",
  	      begin: /--[A-Za-z][A-Za-z0-9_-]*/
  	    }
  	  };
  	};

  	const TAGS = [
  	  'a',
  	  'abbr',
  	  'address',
  	  'article',
  	  'aside',
  	  'audio',
  	  'b',
  	  'blockquote',
  	  'body',
  	  'button',
  	  'canvas',
  	  'caption',
  	  'cite',
  	  'code',
  	  'dd',
  	  'del',
  	  'details',
  	  'dfn',
  	  'div',
  	  'dl',
  	  'dt',
  	  'em',
  	  'fieldset',
  	  'figcaption',
  	  'figure',
  	  'footer',
  	  'form',
  	  'h1',
  	  'h2',
  	  'h3',
  	  'h4',
  	  'h5',
  	  'h6',
  	  'header',
  	  'hgroup',
  	  'html',
  	  'i',
  	  'iframe',
  	  'img',
  	  'input',
  	  'ins',
  	  'kbd',
  	  'label',
  	  'legend',
  	  'li',
  	  'main',
  	  'mark',
  	  'menu',
  	  'nav',
  	  'object',
  	  'ol',
  	  'p',
  	  'q',
  	  'quote',
  	  'samp',
  	  'section',
  	  'span',
  	  'strong',
  	  'summary',
  	  'sup',
  	  'table',
  	  'tbody',
  	  'td',
  	  'textarea',
  	  'tfoot',
  	  'th',
  	  'thead',
  	  'time',
  	  'tr',
  	  'ul',
  	  'var',
  	  'video'
  	];

  	const MEDIA_FEATURES = [
  	  'any-hover',
  	  'any-pointer',
  	  'aspect-ratio',
  	  'color',
  	  'color-gamut',
  	  'color-index',
  	  'device-aspect-ratio',
  	  'device-height',
  	  'device-width',
  	  'display-mode',
  	  'forced-colors',
  	  'grid',
  	  'height',
  	  'hover',
  	  'inverted-colors',
  	  'monochrome',
  	  'orientation',
  	  'overflow-block',
  	  'overflow-inline',
  	  'pointer',
  	  'prefers-color-scheme',
  	  'prefers-contrast',
  	  'prefers-reduced-motion',
  	  'prefers-reduced-transparency',
  	  'resolution',
  	  'scan',
  	  'scripting',
  	  'update',
  	  'width',
  	  // TODO: find a better solution?
  	  'min-width',
  	  'max-width',
  	  'min-height',
  	  'max-height'
  	];

  	// https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes
  	const PSEUDO_CLASSES = [
  	  'active',
  	  'any-link',
  	  'blank',
  	  'checked',
  	  'current',
  	  'default',
  	  'defined',
  	  'dir', // dir()
  	  'disabled',
  	  'drop',
  	  'empty',
  	  'enabled',
  	  'first',
  	  'first-child',
  	  'first-of-type',
  	  'fullscreen',
  	  'future',
  	  'focus',
  	  'focus-visible',
  	  'focus-within',
  	  'has', // has()
  	  'host', // host or host()
  	  'host-context', // host-context()
  	  'hover',
  	  'indeterminate',
  	  'in-range',
  	  'invalid',
  	  'is', // is()
  	  'lang', // lang()
  	  'last-child',
  	  'last-of-type',
  	  'left',
  	  'link',
  	  'local-link',
  	  'not', // not()
  	  'nth-child', // nth-child()
  	  'nth-col', // nth-col()
  	  'nth-last-child', // nth-last-child()
  	  'nth-last-col', // nth-last-col()
  	  'nth-last-of-type', //nth-last-of-type()
  	  'nth-of-type', //nth-of-type()
  	  'only-child',
  	  'only-of-type',
  	  'optional',
  	  'out-of-range',
  	  'past',
  	  'placeholder-shown',
  	  'read-only',
  	  'read-write',
  	  'required',
  	  'right',
  	  'root',
  	  'scope',
  	  'target',
  	  'target-within',
  	  'user-invalid',
  	  'valid',
  	  'visited',
  	  'where' // where()
  	];

  	// https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements
  	const PSEUDO_ELEMENTS = [
  	  'after',
  	  'backdrop',
  	  'before',
  	  'cue',
  	  'cue-region',
  	  'first-letter',
  	  'first-line',
  	  'grammar-error',
  	  'marker',
  	  'part',
  	  'placeholder',
  	  'selection',
  	  'slotted',
  	  'spelling-error'
  	];

  	const ATTRIBUTES = [
  	  'align-content',
  	  'align-items',
  	  'align-self',
  	  'all',
  	  'animation',
  	  'animation-delay',
  	  'animation-direction',
  	  'animation-duration',
  	  'animation-fill-mode',
  	  'animation-iteration-count',
  	  'animation-name',
  	  'animation-play-state',
  	  'animation-timing-function',
  	  'backface-visibility',
  	  'background',
  	  'background-attachment',
  	  'background-blend-mode',
  	  'background-clip',
  	  'background-color',
  	  'background-image',
  	  'background-origin',
  	  'background-position',
  	  'background-repeat',
  	  'background-size',
  	  'block-size',
  	  'border',
  	  'border-block',
  	  'border-block-color',
  	  'border-block-end',
  	  'border-block-end-color',
  	  'border-block-end-style',
  	  'border-block-end-width',
  	  'border-block-start',
  	  'border-block-start-color',
  	  'border-block-start-style',
  	  'border-block-start-width',
  	  'border-block-style',
  	  'border-block-width',
  	  'border-bottom',
  	  'border-bottom-color',
  	  'border-bottom-left-radius',
  	  'border-bottom-right-radius',
  	  'border-bottom-style',
  	  'border-bottom-width',
  	  'border-collapse',
  	  'border-color',
  	  'border-image',
  	  'border-image-outset',
  	  'border-image-repeat',
  	  'border-image-slice',
  	  'border-image-source',
  	  'border-image-width',
  	  'border-inline',
  	  'border-inline-color',
  	  'border-inline-end',
  	  'border-inline-end-color',
  	  'border-inline-end-style',
  	  'border-inline-end-width',
  	  'border-inline-start',
  	  'border-inline-start-color',
  	  'border-inline-start-style',
  	  'border-inline-start-width',
  	  'border-inline-style',
  	  'border-inline-width',
  	  'border-left',
  	  'border-left-color',
  	  'border-left-style',
  	  'border-left-width',
  	  'border-radius',
  	  'border-right',
  	  'border-right-color',
  	  'border-right-style',
  	  'border-right-width',
  	  'border-spacing',
  	  'border-style',
  	  'border-top',
  	  'border-top-color',
  	  'border-top-left-radius',
  	  'border-top-right-radius',
  	  'border-top-style',
  	  'border-top-width',
  	  'border-width',
  	  'bottom',
  	  'box-decoration-break',
  	  'box-shadow',
  	  'box-sizing',
  	  'break-after',
  	  'break-before',
  	  'break-inside',
  	  'caption-side',
  	  'caret-color',
  	  'clear',
  	  'clip',
  	  'clip-path',
  	  'clip-rule',
  	  'color',
  	  'column-count',
  	  'column-fill',
  	  'column-gap',
  	  'column-rule',
  	  'column-rule-color',
  	  'column-rule-style',
  	  'column-rule-width',
  	  'column-span',
  	  'column-width',
  	  'columns',
  	  'contain',
  	  'content',
  	  'content-visibility',
  	  'counter-increment',
  	  'counter-reset',
  	  'cue',
  	  'cue-after',
  	  'cue-before',
  	  'cursor',
  	  'direction',
  	  'display',
  	  'empty-cells',
  	  'filter',
  	  'flex',
  	  'flex-basis',
  	  'flex-direction',
  	  'flex-flow',
  	  'flex-grow',
  	  'flex-shrink',
  	  'flex-wrap',
  	  'float',
  	  'flow',
  	  'font',
  	  'font-display',
  	  'font-family',
  	  'font-feature-settings',
  	  'font-kerning',
  	  'font-language-override',
  	  'font-size',
  	  'font-size-adjust',
  	  'font-smoothing',
  	  'font-stretch',
  	  'font-style',
  	  'font-synthesis',
  	  'font-variant',
  	  'font-variant-caps',
  	  'font-variant-east-asian',
  	  'font-variant-ligatures',
  	  'font-variant-numeric',
  	  'font-variant-position',
  	  'font-variation-settings',
  	  'font-weight',
  	  'gap',
  	  'glyph-orientation-vertical',
  	  'grid',
  	  'grid-area',
  	  'grid-auto-columns',
  	  'grid-auto-flow',
  	  'grid-auto-rows',
  	  'grid-column',
  	  'grid-column-end',
  	  'grid-column-start',
  	  'grid-gap',
  	  'grid-row',
  	  'grid-row-end',
  	  'grid-row-start',
  	  'grid-template',
  	  'grid-template-areas',
  	  'grid-template-columns',
  	  'grid-template-rows',
  	  'hanging-punctuation',
  	  'height',
  	  'hyphens',
  	  'icon',
  	  'image-orientation',
  	  'image-rendering',
  	  'image-resolution',
  	  'ime-mode',
  	  'inline-size',
  	  'isolation',
  	  'justify-content',
  	  'left',
  	  'letter-spacing',
  	  'line-break',
  	  'line-height',
  	  'list-style',
  	  'list-style-image',
  	  'list-style-position',
  	  'list-style-type',
  	  'margin',
  	  'margin-block',
  	  'margin-block-end',
  	  'margin-block-start',
  	  'margin-bottom',
  	  'margin-inline',
  	  'margin-inline-end',
  	  'margin-inline-start',
  	  'margin-left',
  	  'margin-right',
  	  'margin-top',
  	  'marks',
  	  'mask',
  	  'mask-border',
  	  'mask-border-mode',
  	  'mask-border-outset',
  	  'mask-border-repeat',
  	  'mask-border-slice',
  	  'mask-border-source',
  	  'mask-border-width',
  	  'mask-clip',
  	  'mask-composite',
  	  'mask-image',
  	  'mask-mode',
  	  'mask-origin',
  	  'mask-position',
  	  'mask-repeat',
  	  'mask-size',
  	  'mask-type',
  	  'max-block-size',
  	  'max-height',
  	  'max-inline-size',
  	  'max-width',
  	  'min-block-size',
  	  'min-height',
  	  'min-inline-size',
  	  'min-width',
  	  'mix-blend-mode',
  	  'nav-down',
  	  'nav-index',
  	  'nav-left',
  	  'nav-right',
  	  'nav-up',
  	  'none',
  	  'normal',
  	  'object-fit',
  	  'object-position',
  	  'opacity',
  	  'order',
  	  'orphans',
  	  'outline',
  	  'outline-color',
  	  'outline-offset',
  	  'outline-style',
  	  'outline-width',
  	  'overflow',
  	  'overflow-wrap',
  	  'overflow-x',
  	  'overflow-y',
  	  'padding',
  	  'padding-block',
  	  'padding-block-end',
  	  'padding-block-start',
  	  'padding-bottom',
  	  'padding-inline',
  	  'padding-inline-end',
  	  'padding-inline-start',
  	  'padding-left',
  	  'padding-right',
  	  'padding-top',
  	  'page-break-after',
  	  'page-break-before',
  	  'page-break-inside',
  	  'pause',
  	  'pause-after',
  	  'pause-before',
  	  'perspective',
  	  'perspective-origin',
  	  'pointer-events',
  	  'position',
  	  'quotes',
  	  'resize',
  	  'rest',
  	  'rest-after',
  	  'rest-before',
  	  'right',
  	  'row-gap',
  	  'scroll-margin',
  	  'scroll-margin-block',
  	  'scroll-margin-block-end',
  	  'scroll-margin-block-start',
  	  'scroll-margin-bottom',
  	  'scroll-margin-inline',
  	  'scroll-margin-inline-end',
  	  'scroll-margin-inline-start',
  	  'scroll-margin-left',
  	  'scroll-margin-right',
  	  'scroll-margin-top',
  	  'scroll-padding',
  	  'scroll-padding-block',
  	  'scroll-padding-block-end',
  	  'scroll-padding-block-start',
  	  'scroll-padding-bottom',
  	  'scroll-padding-inline',
  	  'scroll-padding-inline-end',
  	  'scroll-padding-inline-start',
  	  'scroll-padding-left',
  	  'scroll-padding-right',
  	  'scroll-padding-top',
  	  'scroll-snap-align',
  	  'scroll-snap-stop',
  	  'scroll-snap-type',
  	  'scrollbar-color',
  	  'scrollbar-gutter',
  	  'scrollbar-width',
  	  'shape-image-threshold',
  	  'shape-margin',
  	  'shape-outside',
  	  'speak',
  	  'speak-as',
  	  'src', // @font-face
  	  'tab-size',
  	  'table-layout',
  	  'text-align',
  	  'text-align-all',
  	  'text-align-last',
  	  'text-combine-upright',
  	  'text-decoration',
  	  'text-decoration-color',
  	  'text-decoration-line',
  	  'text-decoration-style',
  	  'text-emphasis',
  	  'text-emphasis-color',
  	  'text-emphasis-position',
  	  'text-emphasis-style',
  	  'text-indent',
  	  'text-justify',
  	  'text-orientation',
  	  'text-overflow',
  	  'text-rendering',
  	  'text-shadow',
  	  'text-transform',
  	  'text-underline-position',
  	  'top',
  	  'transform',
  	  'transform-box',
  	  'transform-origin',
  	  'transform-style',
  	  'transition',
  	  'transition-delay',
  	  'transition-duration',
  	  'transition-property',
  	  'transition-timing-function',
  	  'unicode-bidi',
  	  'vertical-align',
  	  'visibility',
  	  'voice-balance',
  	  'voice-duration',
  	  'voice-family',
  	  'voice-pitch',
  	  'voice-range',
  	  'voice-rate',
  	  'voice-stress',
  	  'voice-volume',
  	  'white-space',
  	  'widows',
  	  'width',
  	  'will-change',
  	  'word-break',
  	  'word-spacing',
  	  'word-wrap',
  	  'writing-mode',
  	  'z-index'
  	  // reverse makes sure longer attributes `font-weight` are matched fully
  	  // instead of getting false positives on say `font`
  	].reverse();

  	/*
  	Language: CSS
  	Category: common, css, web
  	Website: https://developer.mozilla.org/en-US/docs/Web/CSS
  	*/

  	/** @type LanguageFn */
  	function css(hljs) {
  	  const regex = hljs.regex;
  	  const modes = MODES(hljs);
  	  const VENDOR_PREFIX = { begin: /-(webkit|moz|ms|o)-(?=[a-z])/ };
  	  const AT_MODIFIERS = "and or not only";
  	  const AT_PROPERTY_RE = /@-?\w[\w]*(-\w+)*/; // @-webkit-keyframes
  	  const IDENT_RE = '[a-zA-Z-][a-zA-Z0-9_-]*';
  	  const STRINGS = [
  	    hljs.APOS_STRING_MODE,
  	    hljs.QUOTE_STRING_MODE
  	  ];

  	  return {
  	    name: 'CSS',
  	    case_insensitive: true,
  	    illegal: /[=|'\$]/,
  	    keywords: { keyframePosition: "from to" },
  	    classNameAliases: {
  	      // for visual continuity with `tag {}` and because we
  	      // don't have a great class for this?
  	      keyframePosition: "selector-tag" },
  	    contains: [
  	      modes.BLOCK_COMMENT,
  	      VENDOR_PREFIX,
  	      // to recognize keyframe 40% etc which are outside the scope of our
  	      // attribute value mode
  	      modes.CSS_NUMBER_MODE,
  	      {
  	        className: 'selector-id',
  	        begin: /#[A-Za-z0-9_-]+/,
  	        relevance: 0
  	      },
  	      {
  	        className: 'selector-class',
  	        begin: '\\.' + IDENT_RE,
  	        relevance: 0
  	      },
  	      modes.ATTRIBUTE_SELECTOR_MODE,
  	      {
  	        className: 'selector-pseudo',
  	        variants: [
  	          { begin: ':(' + PSEUDO_CLASSES.join('|') + ')' },
  	          { begin: ':(:)?(' + PSEUDO_ELEMENTS.join('|') + ')' }
  	        ]
  	      },
  	      // we may actually need this (12/2020)
  	      // { // pseudo-selector params
  	      //   begin: /\(/,
  	      //   end: /\)/,
  	      //   contains: [ hljs.CSS_NUMBER_MODE ]
  	      // },
  	      modes.CSS_VARIABLE,
  	      {
  	        className: 'attribute',
  	        begin: '\\b(' + ATTRIBUTES.join('|') + ')\\b'
  	      },
  	      // attribute values
  	      {
  	        begin: /:/,
  	        end: /[;}{]/,
  	        contains: [
  	          modes.BLOCK_COMMENT,
  	          modes.HEXCOLOR,
  	          modes.IMPORTANT,
  	          modes.CSS_NUMBER_MODE,
  	          ...STRINGS,
  	          // needed to highlight these as strings and to avoid issues with
  	          // illegal characters that might be inside urls that would tigger the
  	          // languages illegal stack
  	          {
  	            begin: /(url|data-uri)\(/,
  	            end: /\)/,
  	            relevance: 0, // from keywords
  	            keywords: { built_in: "url data-uri" },
  	            contains: [
  	              ...STRINGS,
  	              {
  	                className: "string",
  	                // any character other than `)` as in `url()` will be the start
  	                // of a string, which ends with `)` (from the parent mode)
  	                begin: /[^)]/,
  	                endsWithParent: true,
  	                excludeEnd: true
  	              }
  	            ]
  	          },
  	          modes.FUNCTION_DISPATCH
  	        ]
  	      },
  	      {
  	        begin: regex.lookahead(/@/),
  	        end: '[{;]',
  	        relevance: 0,
  	        illegal: /:/, // break on Less variables @var: ...
  	        contains: [
  	          {
  	            className: 'keyword',
  	            begin: AT_PROPERTY_RE
  	          },
  	          {
  	            begin: /\s/,
  	            endsWithParent: true,
  	            excludeEnd: true,
  	            relevance: 0,
  	            keywords: {
  	              $pattern: /[a-z-]+/,
  	              keyword: AT_MODIFIERS,
  	              attribute: MEDIA_FEATURES.join(" ")
  	            },
  	            contains: [
  	              {
  	                begin: /[a-z-]+(?=:)/,
  	                className: "attribute"
  	              },
  	              ...STRINGS,
  	              modes.CSS_NUMBER_MODE
  	            ]
  	          }
  	        ]
  	      },
  	      {
  	        className: 'selector-tag',
  	        begin: '\\b(' + TAGS.join('|') + ')\\b'
  	      }
  	    ]
  	  };
  	}

  	css_1 = css;
  	return css_1;
  }

  /*
  Language: D
  Author: Aleksandar Ruzicic <aleksandar@ruzicic.info>
  Description: D is a language with C-like syntax and static typing. It pragmatically combines efficiency, control, and modeling power, with safety and programmer productivity.
  Version: 1.0a
  Website: https://dlang.org
  Date: 2012-04-08
  */

  var d_1;
  var hasRequiredD;

  function requireD () {
  	if (hasRequiredD) return d_1;
  	hasRequiredD = 1;
  	/**
  	 * Known issues:
  	 *
  	 * - invalid hex string literals will be recognized as a double quoted strings
  	 *   but 'x' at the beginning of string will not be matched
  	 *
  	 * - delimited string literals are not checked for matching end delimiter
  	 *   (not possible to do with js regexp)
  	 *
  	 * - content of token string is colored as a string (i.e. no keyword coloring inside a token string)
  	 *   also, content of token string is not validated to contain only valid D tokens
  	 *
  	 * - special token sequence rule is not strictly following D grammar (anything following #line
  	 *   up to the end of line is matched as special token sequence)
  	 */

  	/** @type LanguageFn */
  	function d(hljs) {
  	  /**
  	   * Language keywords
  	   *
  	   * @type {Object}
  	   */
  	  const D_KEYWORDS = {
  	    $pattern: hljs.UNDERSCORE_IDENT_RE,
  	    keyword:
  	      'abstract alias align asm assert auto body break byte case cast catch class '
  	      + 'const continue debug default delete deprecated do else enum export extern final '
  	      + 'finally for foreach foreach_reverse|10 goto if immutable import in inout int '
  	      + 'interface invariant is lazy macro mixin module new nothrow out override package '
  	      + 'pragma private protected public pure ref return scope shared static struct '
  	      + 'super switch synchronized template this throw try typedef typeid typeof union '
  	      + 'unittest version void volatile while with __FILE__ __LINE__ __gshared|10 '
  	      + '__thread __traits __DATE__ __EOF__ __TIME__ __TIMESTAMP__ __VENDOR__ __VERSION__',
  	    built_in:
  	      'bool cdouble cent cfloat char creal dchar delegate double dstring float function '
  	      + 'idouble ifloat ireal long real short string ubyte ucent uint ulong ushort wchar '
  	      + 'wstring',
  	    literal:
  	      'false null true'
  	  };

  	  /**
  	   * Number literal regexps
  	   *
  	   * @type {String}
  	   */
  	  const decimal_integer_re = '(0|[1-9][\\d_]*)';
  	  const decimal_integer_nosus_re = '(0|[1-9][\\d_]*|\\d[\\d_]*|[\\d_]+?\\d)';
  	  const binary_integer_re = '0[bB][01_]+';
  	  const hexadecimal_digits_re = '([\\da-fA-F][\\da-fA-F_]*|_[\\da-fA-F][\\da-fA-F_]*)';
  	  const hexadecimal_integer_re = '0[xX]' + hexadecimal_digits_re;

  	  const decimal_exponent_re = '([eE][+-]?' + decimal_integer_nosus_re + ')';
  	  const decimal_float_re = '(' + decimal_integer_nosus_re + '(\\.\\d*|' + decimal_exponent_re + ')|'
  	                + '\\d+\\.' + decimal_integer_nosus_re + '|'
  	                + '\\.' + decimal_integer_re + decimal_exponent_re + '?'
  	              + ')';
  	  const hexadecimal_float_re = '(0[xX]('
  	                  + hexadecimal_digits_re + '\\.' + hexadecimal_digits_re + '|'
  	                  + '\\.?' + hexadecimal_digits_re
  	                 + ')[pP][+-]?' + decimal_integer_nosus_re + ')';

  	  const integer_re = '('
  	      + decimal_integer_re + '|'
  	      + binary_integer_re + '|'
  	       + hexadecimal_integer_re
  	    + ')';

  	  const float_re = '('
  	      + hexadecimal_float_re + '|'
  	      + decimal_float_re
  	    + ')';

  	  /**
  	   * Escape sequence supported in D string and character literals
  	   *
  	   * @type {String}
  	   */
  	  const escape_sequence_re = '\\\\('
  	              + '[\'"\\?\\\\abfnrtv]|' // common escapes
  	              + 'u[\\dA-Fa-f]{4}|' // four hex digit unicode codepoint
  	              + '[0-7]{1,3}|' // one to three octal digit ascii char code
  	              + 'x[\\dA-Fa-f]{2}|' // two hex digit ascii char code
  	              + 'U[\\dA-Fa-f]{8}' // eight hex digit unicode codepoint
  	              + ')|'
  	              + '&[a-zA-Z\\d]{2,};'; // named character entity

  	  /**
  	   * D integer number literals
  	   *
  	   * @type {Object}
  	   */
  	  const D_INTEGER_MODE = {
  	    className: 'number',
  	    begin: '\\b' + integer_re + '(L|u|U|Lu|LU|uL|UL)?',
  	    relevance: 0
  	  };

  	  /**
  	   * [D_FLOAT_MODE description]
  	   * @type {Object}
  	   */
  	  const D_FLOAT_MODE = {
  	    className: 'number',
  	    begin: '\\b('
  	        + float_re + '([fF]|L|i|[fF]i|Li)?|'
  	        + integer_re + '(i|[fF]i|Li)'
  	      + ')',
  	    relevance: 0
  	  };

  	  /**
  	   * D character literal
  	   *
  	   * @type {Object}
  	   */
  	  const D_CHARACTER_MODE = {
  	    className: 'string',
  	    begin: '\'(' + escape_sequence_re + '|.)',
  	    end: '\'',
  	    illegal: '.'
  	  };

  	  /**
  	   * D string escape sequence
  	   *
  	   * @type {Object}
  	   */
  	  const D_ESCAPE_SEQUENCE = {
  	    begin: escape_sequence_re,
  	    relevance: 0
  	  };

  	  /**
  	   * D double quoted string literal
  	   *
  	   * @type {Object}
  	   */
  	  const D_STRING_MODE = {
  	    className: 'string',
  	    begin: '"',
  	    contains: [ D_ESCAPE_SEQUENCE ],
  	    end: '"[cwd]?'
  	  };

  	  /**
  	   * D wysiwyg and delimited string literals
  	   *
  	   * @type {Object}
  	   */
  	  const D_WYSIWYG_DELIMITED_STRING_MODE = {
  	    className: 'string',
  	    begin: '[rq]"',
  	    end: '"[cwd]?',
  	    relevance: 5
  	  };

  	  /**
  	   * D alternate wysiwyg string literal
  	   *
  	   * @type {Object}
  	   */
  	  const D_ALTERNATE_WYSIWYG_STRING_MODE = {
  	    className: 'string',
  	    begin: '`',
  	    end: '`[cwd]?'
  	  };

  	  /**
  	   * D hexadecimal string literal
  	   *
  	   * @type {Object}
  	   */
  	  const D_HEX_STRING_MODE = {
  	    className: 'string',
  	    begin: 'x"[\\da-fA-F\\s\\n\\r]*"[cwd]?',
  	    relevance: 10
  	  };

  	  /**
  	   * D delimited string literal
  	   *
  	   * @type {Object}
  	   */
  	  const D_TOKEN_STRING_MODE = {
  	    className: 'string',
  	    begin: 'q"\\{',
  	    end: '\\}"'
  	  };

  	  /**
  	   * Hashbang support
  	   *
  	   * @type {Object}
  	   */
  	  const D_HASHBANG_MODE = {
  	    className: 'meta',
  	    begin: '^#!',
  	    end: '$',
  	    relevance: 5
  	  };

  	  /**
  	   * D special token sequence
  	   *
  	   * @type {Object}
  	   */
  	  const D_SPECIAL_TOKEN_SEQUENCE_MODE = {
  	    className: 'meta',
  	    begin: '#(line)',
  	    end: '$',
  	    relevance: 5
  	  };

  	  /**
  	   * D attributes
  	   *
  	   * @type {Object}
  	   */
  	  const D_ATTRIBUTE_MODE = {
  	    className: 'keyword',
  	    begin: '@[a-zA-Z_][a-zA-Z_\\d]*'
  	  };

  	  /**
  	   * D nesting comment
  	   *
  	   * @type {Object}
  	   */
  	  const D_NESTING_COMMENT_MODE = hljs.COMMENT(
  	    '\\/\\+',
  	    '\\+\\/',
  	    {
  	      contains: [ 'self' ],
  	      relevance: 10
  	    }
  	  );

  	  return {
  	    name: 'D',
  	    keywords: D_KEYWORDS,
  	    contains: [
  	      hljs.C_LINE_COMMENT_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE,
  	      D_NESTING_COMMENT_MODE,
  	      D_HEX_STRING_MODE,
  	      D_STRING_MODE,
  	      D_WYSIWYG_DELIMITED_STRING_MODE,
  	      D_ALTERNATE_WYSIWYG_STRING_MODE,
  	      D_TOKEN_STRING_MODE,
  	      D_FLOAT_MODE,
  	      D_INTEGER_MODE,
  	      D_CHARACTER_MODE,
  	      D_HASHBANG_MODE,
  	      D_SPECIAL_TOKEN_SEQUENCE_MODE,
  	      D_ATTRIBUTE_MODE
  	    ]
  	  };
  	}

  	d_1 = d;
  	return d_1;
  }

  /*
  Language: Markdown
  Requires: xml.js
  Author: John Crepezzi <john.crepezzi@gmail.com>
  Website: https://daringfireball.net/projects/markdown/
  Category: common, markup
  */

  var markdown_1;
  var hasRequiredMarkdown;

  function requireMarkdown () {
  	if (hasRequiredMarkdown) return markdown_1;
  	hasRequiredMarkdown = 1;
  	function markdown(hljs) {
  	  const regex = hljs.regex;
  	  const INLINE_HTML = {
  	    begin: /<\/?[A-Za-z_]/,
  	    end: '>',
  	    subLanguage: 'xml',
  	    relevance: 0
  	  };
  	  const HORIZONTAL_RULE = {
  	    begin: '^[-\\*]{3,}',
  	    end: '$'
  	  };
  	  const CODE = {
  	    className: 'code',
  	    variants: [
  	      // TODO: fix to allow these to work with sublanguage also
  	      { begin: '(`{3,})[^`](.|\\n)*?\\1`*[ ]*' },
  	      { begin: '(~{3,})[^~](.|\\n)*?\\1~*[ ]*' },
  	      // needed to allow markdown as a sublanguage to work
  	      {
  	        begin: '```',
  	        end: '```+[ ]*$'
  	      },
  	      {
  	        begin: '~~~',
  	        end: '~~~+[ ]*$'
  	      },
  	      { begin: '`.+?`' },
  	      {
  	        begin: '(?=^( {4}|\\t))',
  	        // use contains to gobble up multiple lines to allow the block to be whatever size
  	        // but only have a single open/close tag vs one per line
  	        contains: [
  	          {
  	            begin: '^( {4}|\\t)',
  	            end: '(\\n)$'
  	          }
  	        ],
  	        relevance: 0
  	      }
  	    ]
  	  };
  	  const LIST = {
  	    className: 'bullet',
  	    begin: '^[ \t]*([*+-]|(\\d+\\.))(?=\\s+)',
  	    end: '\\s+',
  	    excludeEnd: true
  	  };
  	  const LINK_REFERENCE = {
  	    begin: /^\[[^\n]+\]:/,
  	    returnBegin: true,
  	    contains: [
  	      {
  	        className: 'symbol',
  	        begin: /\[/,
  	        end: /\]/,
  	        excludeBegin: true,
  	        excludeEnd: true
  	      },
  	      {
  	        className: 'link',
  	        begin: /:\s*/,
  	        end: /$/,
  	        excludeBegin: true
  	      }
  	    ]
  	  };
  	  const URL_SCHEME = /[A-Za-z][A-Za-z0-9+.-]*/;
  	  const LINK = {
  	    variants: [
  	      // too much like nested array access in so many languages
  	      // to have any real relevance
  	      {
  	        begin: /\[.+?\]\[.*?\]/,
  	        relevance: 0
  	      },
  	      // popular internet URLs
  	      {
  	        begin: /\[.+?\]\(((data|javascript|mailto):|(?:http|ftp)s?:\/\/).*?\)/,
  	        relevance: 2
  	      },
  	      {
  	        begin: regex.concat(/\[.+?\]\(/, URL_SCHEME, /:\/\/.*?\)/),
  	        relevance: 2
  	      },
  	      // relative urls
  	      {
  	        begin: /\[.+?\]\([./?&#].*?\)/,
  	        relevance: 1
  	      },
  	      // whatever else, lower relevance (might not be a link at all)
  	      {
  	        begin: /\[.*?\]\(.*?\)/,
  	        relevance: 0
  	      }
  	    ],
  	    returnBegin: true,
  	    contains: [
  	      {
  	        // empty strings for alt or link text
  	        match: /\[(?=\])/ },
  	      {
  	        className: 'string',
  	        relevance: 0,
  	        begin: '\\[',
  	        end: '\\]',
  	        excludeBegin: true,
  	        returnEnd: true
  	      },
  	      {
  	        className: 'link',
  	        relevance: 0,
  	        begin: '\\]\\(',
  	        end: '\\)',
  	        excludeBegin: true,
  	        excludeEnd: true
  	      },
  	      {
  	        className: 'symbol',
  	        relevance: 0,
  	        begin: '\\]\\[',
  	        end: '\\]',
  	        excludeBegin: true,
  	        excludeEnd: true
  	      }
  	    ]
  	  };
  	  const BOLD = {
  	    className: 'strong',
  	    contains: [], // defined later
  	    variants: [
  	      {
  	        begin: /_{2}(?!\s)/,
  	        end: /_{2}/
  	      },
  	      {
  	        begin: /\*{2}(?!\s)/,
  	        end: /\*{2}/
  	      }
  	    ]
  	  };
  	  const ITALIC = {
  	    className: 'emphasis',
  	    contains: [], // defined later
  	    variants: [
  	      {
  	        begin: /\*(?![*\s])/,
  	        end: /\*/
  	      },
  	      {
  	        begin: /_(?![_\s])/,
  	        end: /_/,
  	        relevance: 0
  	      }
  	    ]
  	  };

  	  // 3 level deep nesting is not allowed because it would create confusion
  	  // in cases like `***testing***` because where we don't know if the last
  	  // `***` is starting a new bold/italic or finishing the last one
  	  const BOLD_WITHOUT_ITALIC = hljs.inherit(BOLD, { contains: [] });
  	  const ITALIC_WITHOUT_BOLD = hljs.inherit(ITALIC, { contains: [] });
  	  BOLD.contains.push(ITALIC_WITHOUT_BOLD);
  	  ITALIC.contains.push(BOLD_WITHOUT_ITALIC);

  	  let CONTAINABLE = [
  	    INLINE_HTML,
  	    LINK
  	  ];

  	  [
  	    BOLD,
  	    ITALIC,
  	    BOLD_WITHOUT_ITALIC,
  	    ITALIC_WITHOUT_BOLD
  	  ].forEach(m => {
  	    m.contains = m.contains.concat(CONTAINABLE);
  	  });

  	  CONTAINABLE = CONTAINABLE.concat(BOLD, ITALIC);

  	  const HEADER = {
  	    className: 'section',
  	    variants: [
  	      {
  	        begin: '^#{1,6}',
  	        end: '$',
  	        contains: CONTAINABLE
  	      },
  	      {
  	        begin: '(?=^.+?\\n[=-]{2,}$)',
  	        contains: [
  	          { begin: '^[=-]*$' },
  	          {
  	            begin: '^',
  	            end: "\\n",
  	            contains: CONTAINABLE
  	          }
  	        ]
  	      }
  	    ]
  	  };

  	  const BLOCKQUOTE = {
  	    className: 'quote',
  	    begin: '^>\\s+',
  	    contains: CONTAINABLE,
  	    end: '$'
  	  };

  	  return {
  	    name: 'Markdown',
  	    aliases: [
  	      'md',
  	      'mkdown',
  	      'mkd'
  	    ],
  	    contains: [
  	      HEADER,
  	      INLINE_HTML,
  	      LIST,
  	      BOLD,
  	      ITALIC,
  	      BLOCKQUOTE,
  	      CODE,
  	      HORIZONTAL_RULE,
  	      LINK,
  	      LINK_REFERENCE
  	    ]
  	  };
  	}

  	markdown_1 = markdown;
  	return markdown_1;
  }

  /*
  Language: Dart
  Requires: markdown.js
  Author: Maxim Dikun <dikmax@gmail.com>
  Description: Dart a modern, object-oriented language developed by Google. For more information see https://www.dartlang.org/
  Website: https://dart.dev
  Category: scripting
  */

  var dart_1;
  var hasRequiredDart;

  function requireDart () {
  	if (hasRequiredDart) return dart_1;
  	hasRequiredDart = 1;
  	/** @type LanguageFn */
  	function dart(hljs) {
  	  const SUBST = {
  	    className: 'subst',
  	    variants: [ { begin: '\\$[A-Za-z0-9_]+' } ]
  	  };

  	  const BRACED_SUBST = {
  	    className: 'subst',
  	    variants: [
  	      {
  	        begin: /\$\{/,
  	        end: /\}/
  	      }
  	    ],
  	    keywords: 'true false null this is new super'
  	  };

  	  const STRING = {
  	    className: 'string',
  	    variants: [
  	      {
  	        begin: 'r\'\'\'',
  	        end: '\'\'\''
  	      },
  	      {
  	        begin: 'r"""',
  	        end: '"""'
  	      },
  	      {
  	        begin: 'r\'',
  	        end: '\'',
  	        illegal: '\\n'
  	      },
  	      {
  	        begin: 'r"',
  	        end: '"',
  	        illegal: '\\n'
  	      },
  	      {
  	        begin: '\'\'\'',
  	        end: '\'\'\'',
  	        contains: [
  	          hljs.BACKSLASH_ESCAPE,
  	          SUBST,
  	          BRACED_SUBST
  	        ]
  	      },
  	      {
  	        begin: '"""',
  	        end: '"""',
  	        contains: [
  	          hljs.BACKSLASH_ESCAPE,
  	          SUBST,
  	          BRACED_SUBST
  	        ]
  	      },
  	      {
  	        begin: '\'',
  	        end: '\'',
  	        illegal: '\\n',
  	        contains: [
  	          hljs.BACKSLASH_ESCAPE,
  	          SUBST,
  	          BRACED_SUBST
  	        ]
  	      },
  	      {
  	        begin: '"',
  	        end: '"',
  	        illegal: '\\n',
  	        contains: [
  	          hljs.BACKSLASH_ESCAPE,
  	          SUBST,
  	          BRACED_SUBST
  	        ]
  	      }
  	    ]
  	  };
  	  BRACED_SUBST.contains = [
  	    hljs.C_NUMBER_MODE,
  	    STRING
  	  ];

  	  const BUILT_IN_TYPES = [
  	    // dart:core
  	    'Comparable',
  	    'DateTime',
  	    'Duration',
  	    'Function',
  	    'Iterable',
  	    'Iterator',
  	    'List',
  	    'Map',
  	    'Match',
  	    'Object',
  	    'Pattern',
  	    'RegExp',
  	    'Set',
  	    'Stopwatch',
  	    'String',
  	    'StringBuffer',
  	    'StringSink',
  	    'Symbol',
  	    'Type',
  	    'Uri',
  	    'bool',
  	    'double',
  	    'int',
  	    'num',
  	    // dart:html
  	    'Element',
  	    'ElementList'
  	  ];
  	  const NULLABLE_BUILT_IN_TYPES = BUILT_IN_TYPES.map((e) => `${e}?`);

  	  const BASIC_KEYWORDS = [
  	    "abstract",
  	    "as",
  	    "assert",
  	    "async",
  	    "await",
  	    "base",
  	    "break",
  	    "case",
  	    "catch",
  	    "class",
  	    "const",
  	    "continue",
  	    "covariant",
  	    "default",
  	    "deferred",
  	    "do",
  	    "dynamic",
  	    "else",
  	    "enum",
  	    "export",
  	    "extends",
  	    "extension",
  	    "external",
  	    "factory",
  	    "false",
  	    "final",
  	    "finally",
  	    "for",
  	    "Function",
  	    "get",
  	    "hide",
  	    "if",
  	    "implements",
  	    "import",
  	    "in",
  	    "interface",
  	    "is",
  	    "late",
  	    "library",
  	    "mixin",
  	    "new",
  	    "null",
  	    "on",
  	    "operator",
  	    "part",
  	    "required",
  	    "rethrow",
  	    "return",
  	    "sealed",
  	    "set",
  	    "show",
  	    "static",
  	    "super",
  	    "switch",
  	    "sync",
  	    "this",
  	    "throw",
  	    "true",
  	    "try",
  	    "typedef",
  	    "var",
  	    "void",
  	    "when",
  	    "while",
  	    "with",
  	    "yield"
  	  ];

  	  const KEYWORDS = {
  	    keyword: BASIC_KEYWORDS,
  	    built_in:
  	      BUILT_IN_TYPES
  	        .concat(NULLABLE_BUILT_IN_TYPES)
  	        .concat([
  	          // dart:core
  	          'Never',
  	          'Null',
  	          'dynamic',
  	          'print',
  	          // dart:html
  	          'document',
  	          'querySelector',
  	          'querySelectorAll',
  	          'window'
  	        ]),
  	    $pattern: /[A-Za-z][A-Za-z0-9_]*\??/
  	  };

  	  return {
  	    name: 'Dart',
  	    keywords: KEYWORDS,
  	    contains: [
  	      STRING,
  	      hljs.COMMENT(
  	        /\/\*\*(?!\/)/,
  	        /\*\//,
  	        {
  	          subLanguage: 'markdown',
  	          relevance: 0
  	        }
  	      ),
  	      hljs.COMMENT(
  	        /\/{3,} ?/,
  	        /$/, { contains: [
  	          {
  	            subLanguage: 'markdown',
  	            begin: '.',
  	            end: '$',
  	            relevance: 0
  	          }
  	        ] }
  	      ),
  	      hljs.C_LINE_COMMENT_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE,
  	      {
  	        className: 'class',
  	        beginKeywords: 'class interface',
  	        end: /\{/,
  	        excludeEnd: true,
  	        contains: [
  	          { beginKeywords: 'extends implements' },
  	          hljs.UNDERSCORE_TITLE_MODE
  	        ]
  	      },
  	      hljs.C_NUMBER_MODE,
  	      {
  	        className: 'meta',
  	        begin: '@[A-Za-z]+'
  	      },
  	      { begin: '=>' // No markup, just a relevance booster
  	      }
  	    ]
  	  };
  	}

  	dart_1 = dart;
  	return dart_1;
  }

  /*
  Language: Delphi
  Website: https://www.embarcadero.com/products/delphi
  */

  var delphi_1;
  var hasRequiredDelphi;

  function requireDelphi () {
  	if (hasRequiredDelphi) return delphi_1;
  	hasRequiredDelphi = 1;
  	/** @type LanguageFn */
  	function delphi(hljs) {
  	  const KEYWORDS = [
  	    "exports",
  	    "register",
  	    "file",
  	    "shl",
  	    "array",
  	    "record",
  	    "property",
  	    "for",
  	    "mod",
  	    "while",
  	    "set",
  	    "ally",
  	    "label",
  	    "uses",
  	    "raise",
  	    "not",
  	    "stored",
  	    "class",
  	    "safecall",
  	    "var",
  	    "interface",
  	    "or",
  	    "private",
  	    "static",
  	    "exit",
  	    "index",
  	    "inherited",
  	    "to",
  	    "else",
  	    "stdcall",
  	    "override",
  	    "shr",
  	    "asm",
  	    "far",
  	    "resourcestring",
  	    "finalization",
  	    "packed",
  	    "virtual",
  	    "out",
  	    "and",
  	    "protected",
  	    "library",
  	    "do",
  	    "xorwrite",
  	    "goto",
  	    "near",
  	    "function",
  	    "end",
  	    "div",
  	    "overload",
  	    "object",
  	    "unit",
  	    "begin",
  	    "string",
  	    "on",
  	    "inline",
  	    "repeat",
  	    "until",
  	    "destructor",
  	    "write",
  	    "message",
  	    "program",
  	    "with",
  	    "read",
  	    "initialization",
  	    "except",
  	    "default",
  	    "nil",
  	    "if",
  	    "case",
  	    "cdecl",
  	    "in",
  	    "downto",
  	    "threadvar",
  	    "of",
  	    "try",
  	    "pascal",
  	    "const",
  	    "external",
  	    "constructor",
  	    "type",
  	    "public",
  	    "then",
  	    "implementation",
  	    "finally",
  	    "published",
  	    "procedure",
  	    "absolute",
  	    "reintroduce",
  	    "operator",
  	    "as",
  	    "is",
  	    "abstract",
  	    "alias",
  	    "assembler",
  	    "bitpacked",
  	    "break",
  	    "continue",
  	    "cppdecl",
  	    "cvar",
  	    "enumerator",
  	    "experimental",
  	    "platform",
  	    "deprecated",
  	    "unimplemented",
  	    "dynamic",
  	    "export",
  	    "far16",
  	    "forward",
  	    "generic",
  	    "helper",
  	    "implements",
  	    "interrupt",
  	    "iochecks",
  	    "local",
  	    "name",
  	    "nodefault",
  	    "noreturn",
  	    "nostackframe",
  	    "oldfpccall",
  	    "otherwise",
  	    "saveregisters",
  	    "softfloat",
  	    "specialize",
  	    "strict",
  	    "unaligned",
  	    "varargs"
  	  ];
  	  const COMMENT_MODES = [
  	    hljs.C_LINE_COMMENT_MODE,
  	    hljs.COMMENT(/\{/, /\}/, { relevance: 0 }),
  	    hljs.COMMENT(/\(\*/, /\*\)/, { relevance: 10 })
  	  ];
  	  const DIRECTIVE = {
  	    className: 'meta',
  	    variants: [
  	      {
  	        begin: /\{\$/,
  	        end: /\}/
  	      },
  	      {
  	        begin: /\(\*\$/,
  	        end: /\*\)/
  	      }
  	    ]
  	  };
  	  const STRING = {
  	    className: 'string',
  	    begin: /'/,
  	    end: /'/,
  	    contains: [ { begin: /''/ } ]
  	  };
  	  const NUMBER = {
  	    className: 'number',
  	    relevance: 0,
  	    // Source: https://www.freepascal.org/docs-html/ref/refse6.html
  	    variants: [
  	      {
  	        // Hexadecimal notation, e.g., $7F.
  	        begin: '\\$[0-9A-Fa-f]+' },
  	      {
  	        // Octal notation, e.g., &42.
  	        begin: '&[0-7]+' },
  	      {
  	        // Binary notation, e.g., %1010.
  	        begin: '%[01]+' }
  	    ]
  	  };
  	  const CHAR_STRING = {
  	    className: 'string',
  	    begin: /(#\d+)+/
  	  };
  	  const CLASS = {
  	    begin: hljs.IDENT_RE + '\\s*=\\s*class\\s*\\(',
  	    returnBegin: true,
  	    contains: [ hljs.TITLE_MODE ]
  	  };
  	  const FUNCTION = {
  	    className: 'function',
  	    beginKeywords: 'function constructor destructor procedure',
  	    end: /[:;]/,
  	    keywords: 'function constructor|10 destructor|10 procedure|10',
  	    contains: [
  	      hljs.TITLE_MODE,
  	      {
  	        className: 'params',
  	        begin: /\(/,
  	        end: /\)/,
  	        keywords: KEYWORDS,
  	        contains: [
  	          STRING,
  	          CHAR_STRING,
  	          DIRECTIVE
  	        ].concat(COMMENT_MODES)
  	      },
  	      DIRECTIVE
  	    ].concat(COMMENT_MODES)
  	  };
  	  return {
  	    name: 'Delphi',
  	    aliases: [
  	      'dpr',
  	      'dfm',
  	      'pas',
  	      'pascal'
  	    ],
  	    case_insensitive: true,
  	    keywords: KEYWORDS,
  	    illegal: /"|\$[G-Zg-z]|\/\*|<\/|\|/,
  	    contains: [
  	      STRING,
  	      CHAR_STRING,
  	      hljs.NUMBER_MODE,
  	      NUMBER,
  	      CLASS,
  	      FUNCTION,
  	      DIRECTIVE
  	    ].concat(COMMENT_MODES)
  	  };
  	}

  	delphi_1 = delphi;
  	return delphi_1;
  }

  /*
  Language: Diff
  Description: Unified and context diff
  Author: Vasily Polovnyov <vast@whiteants.net>
  Website: https://www.gnu.org/software/diffutils/
  Category: common
  */

  var diff_1;
  var hasRequiredDiff;

  function requireDiff () {
  	if (hasRequiredDiff) return diff_1;
  	hasRequiredDiff = 1;
  	/** @type LanguageFn */
  	function diff(hljs) {
  	  const regex = hljs.regex;
  	  return {
  	    name: 'Diff',
  	    aliases: [ 'patch' ],
  	    contains: [
  	      {
  	        className: 'meta',
  	        relevance: 10,
  	        match: regex.either(
  	          /^@@ +-\d+,\d+ +\+\d+,\d+ +@@/,
  	          /^\*\*\* +\d+,\d+ +\*\*\*\*$/,
  	          /^--- +\d+,\d+ +----$/
  	        )
  	      },
  	      {
  	        className: 'comment',
  	        variants: [
  	          {
  	            begin: regex.either(
  	              /Index: /,
  	              /^index/,
  	              /={3,}/,
  	              /^-{3}/,
  	              /^\*{3} /,
  	              /^\+{3}/,
  	              /^diff --git/
  	            ),
  	            end: /$/
  	          },
  	          { match: /^\*{15}$/ }
  	        ]
  	      },
  	      {
  	        className: 'addition',
  	        begin: /^\+/,
  	        end: /$/
  	      },
  	      {
  	        className: 'deletion',
  	        begin: /^-/,
  	        end: /$/
  	      },
  	      {
  	        className: 'addition',
  	        begin: /^!/,
  	        end: /$/
  	      }
  	    ]
  	  };
  	}

  	diff_1 = diff;
  	return diff_1;
  }

  /*
  Language: Django
  Description: Django is a high-level Python Web framework that encourages rapid development and clean, pragmatic design.
  Requires: xml.js
  Author: Ivan Sagalaev <maniac@softwaremaniacs.org>
  Contributors: Ilya Baryshev <baryshev@gmail.com>
  Website: https://www.djangoproject.com
  Category: template
  */

  var django_1;
  var hasRequiredDjango;

  function requireDjango () {
  	if (hasRequiredDjango) return django_1;
  	hasRequiredDjango = 1;
  	/** @type LanguageFn */
  	function django(hljs) {
  	  const FILTER = {
  	    begin: /\|[A-Za-z]+:?/,
  	    keywords: { name:
  	        'truncatewords removetags linebreaksbr yesno get_digit timesince random striptags '
  	        + 'filesizeformat escape linebreaks length_is ljust rjust cut urlize fix_ampersands '
  	        + 'title floatformat capfirst pprint divisibleby add make_list unordered_list urlencode '
  	        + 'timeuntil urlizetrunc wordcount stringformat linenumbers slice date dictsort '
  	        + 'dictsortreversed default_if_none pluralize lower join center default '
  	        + 'truncatewords_html upper length phone2numeric wordwrap time addslashes slugify first '
  	        + 'escapejs force_escape iriencode last safe safeseq truncatechars localize unlocalize '
  	        + 'localtime utc timezone' },
  	    contains: [
  	      hljs.QUOTE_STRING_MODE,
  	      hljs.APOS_STRING_MODE
  	    ]
  	  };

  	  return {
  	    name: 'Django',
  	    aliases: [ 'jinja' ],
  	    case_insensitive: true,
  	    subLanguage: 'xml',
  	    contains: [
  	      hljs.COMMENT(/\{%\s*comment\s*%\}/, /\{%\s*endcomment\s*%\}/),
  	      hljs.COMMENT(/\{#/, /#\}/),
  	      {
  	        className: 'template-tag',
  	        begin: /\{%/,
  	        end: /%\}/,
  	        contains: [
  	          {
  	            className: 'name',
  	            begin: /\w+/,
  	            keywords: { name:
  	                'comment endcomment load templatetag ifchanged endifchanged if endif firstof for '
  	                + 'endfor ifnotequal endifnotequal widthratio extends include spaceless '
  	                + 'endspaceless regroup ifequal endifequal ssi now with cycle url filter '
  	                + 'endfilter debug block endblock else autoescape endautoescape csrf_token empty elif '
  	                + 'endwith static trans blocktrans endblocktrans get_static_prefix get_media_prefix '
  	                + 'plural get_current_language language get_available_languages '
  	                + 'get_current_language_bidi get_language_info get_language_info_list localize '
  	                + 'endlocalize localtime endlocaltime timezone endtimezone get_current_timezone '
  	                + 'verbatim' },
  	            starts: {
  	              endsWithParent: true,
  	              keywords: 'in by as',
  	              contains: [ FILTER ],
  	              relevance: 0
  	            }
  	          }
  	        ]
  	      },
  	      {
  	        className: 'template-variable',
  	        begin: /\{\{/,
  	        end: /\}\}/,
  	        contains: [ FILTER ]
  	      }
  	    ]
  	  };
  	}

  	django_1 = django;
  	return django_1;
  }

  /*
  Language: DNS Zone
  Author: Tim Schumacher <tim@datenknoten.me>
  Category: config
  Website: https://en.wikipedia.org/wiki/Zone_file
  */

  var dns_1;
  var hasRequiredDns;

  function requireDns () {
  	if (hasRequiredDns) return dns_1;
  	hasRequiredDns = 1;
  	/** @type LanguageFn */
  	function dns(hljs) {
  	  const KEYWORDS = [
  	    "IN",
  	    "A",
  	    "AAAA",
  	    "AFSDB",
  	    "APL",
  	    "CAA",
  	    "CDNSKEY",
  	    "CDS",
  	    "CERT",
  	    "CNAME",
  	    "DHCID",
  	    "DLV",
  	    "DNAME",
  	    "DNSKEY",
  	    "DS",
  	    "HIP",
  	    "IPSECKEY",
  	    "KEY",
  	    "KX",
  	    "LOC",
  	    "MX",
  	    "NAPTR",
  	    "NS",
  	    "NSEC",
  	    "NSEC3",
  	    "NSEC3PARAM",
  	    "PTR",
  	    "RRSIG",
  	    "RP",
  	    "SIG",
  	    "SOA",
  	    "SRV",
  	    "SSHFP",
  	    "TA",
  	    "TKEY",
  	    "TLSA",
  	    "TSIG",
  	    "TXT"
  	  ];
  	  return {
  	    name: 'DNS Zone',
  	    aliases: [
  	      'bind',
  	      'zone'
  	    ],
  	    keywords: KEYWORDS,
  	    contains: [
  	      hljs.COMMENT(';', '$', { relevance: 0 }),
  	      {
  	        className: 'meta',
  	        begin: /^\$(TTL|GENERATE|INCLUDE|ORIGIN)\b/
  	      },
  	      // IPv6
  	      {
  	        className: 'number',
  	        begin: '((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))\\b'
  	      },
  	      // IPv4
  	      {
  	        className: 'number',
  	        begin: '((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\b'
  	      },
  	      hljs.inherit(hljs.NUMBER_MODE, { begin: /\b\d+[dhwm]?/ })
  	    ]
  	  };
  	}

  	dns_1 = dns;
  	return dns_1;
  }

  /*
  Language: Dockerfile
  Requires: bash.js
  Author: Alexis Hénaut <alexis@henaut.net>
  Description: language definition for Dockerfile files
  Website: https://docs.docker.com/engine/reference/builder/
  Category: config
  */

  var dockerfile_1;
  var hasRequiredDockerfile;

  function requireDockerfile () {
  	if (hasRequiredDockerfile) return dockerfile_1;
  	hasRequiredDockerfile = 1;
  	/** @type LanguageFn */
  	function dockerfile(hljs) {
  	  const KEYWORDS = [
  	    "from",
  	    "maintainer",
  	    "expose",
  	    "env",
  	    "arg",
  	    "user",
  	    "onbuild",
  	    "stopsignal"
  	  ];
  	  return {
  	    name: 'Dockerfile',
  	    aliases: [ 'docker' ],
  	    case_insensitive: true,
  	    keywords: KEYWORDS,
  	    contains: [
  	      hljs.HASH_COMMENT_MODE,
  	      hljs.APOS_STRING_MODE,
  	      hljs.QUOTE_STRING_MODE,
  	      hljs.NUMBER_MODE,
  	      {
  	        beginKeywords: 'run cmd entrypoint volume add copy workdir label healthcheck shell',
  	        starts: {
  	          end: /[^\\]$/,
  	          subLanguage: 'bash'
  	        }
  	      }
  	    ],
  	    illegal: '</'
  	  };
  	}

  	dockerfile_1 = dockerfile;
  	return dockerfile_1;
  }

  /*
  Language: Batch file (DOS)
  Author: Alexander Makarov <sam@rmcreative.ru>
  Contributors: Anton Kochkov <anton.kochkov@gmail.com>
  Website: https://en.wikipedia.org/wiki/Batch_file
  */

  var dos_1;
  var hasRequiredDos;

  function requireDos () {
  	if (hasRequiredDos) return dos_1;
  	hasRequiredDos = 1;
  	/** @type LanguageFn */
  	function dos(hljs) {
  	  const COMMENT = hljs.COMMENT(
  	    /^\s*@?rem\b/, /$/,
  	    { relevance: 10 }
  	  );
  	  const LABEL = {
  	    className: 'symbol',
  	    begin: '^\\s*[A-Za-z._?][A-Za-z0-9_$#@~.?]*(:|\\s+label)',
  	    relevance: 0
  	  };
  	  const KEYWORDS = [
  	    "if",
  	    "else",
  	    "goto",
  	    "for",
  	    "in",
  	    "do",
  	    "call",
  	    "exit",
  	    "not",
  	    "exist",
  	    "errorlevel",
  	    "defined",
  	    "equ",
  	    "neq",
  	    "lss",
  	    "leq",
  	    "gtr",
  	    "geq"
  	  ];
  	  const BUILT_INS = [
  	    "prn",
  	    "nul",
  	    "lpt3",
  	    "lpt2",
  	    "lpt1",
  	    "con",
  	    "com4",
  	    "com3",
  	    "com2",
  	    "com1",
  	    "aux",
  	    "shift",
  	    "cd",
  	    "dir",
  	    "echo",
  	    "setlocal",
  	    "endlocal",
  	    "set",
  	    "pause",
  	    "copy",
  	    "append",
  	    "assoc",
  	    "at",
  	    "attrib",
  	    "break",
  	    "cacls",
  	    "cd",
  	    "chcp",
  	    "chdir",
  	    "chkdsk",
  	    "chkntfs",
  	    "cls",
  	    "cmd",
  	    "color",
  	    "comp",
  	    "compact",
  	    "convert",
  	    "date",
  	    "dir",
  	    "diskcomp",
  	    "diskcopy",
  	    "doskey",
  	    "erase",
  	    "fs",
  	    "find",
  	    "findstr",
  	    "format",
  	    "ftype",
  	    "graftabl",
  	    "help",
  	    "keyb",
  	    "label",
  	    "md",
  	    "mkdir",
  	    "mode",
  	    "more",
  	    "move",
  	    "path",
  	    "pause",
  	    "print",
  	    "popd",
  	    "pushd",
  	    "promt",
  	    "rd",
  	    "recover",
  	    "rem",
  	    "rename",
  	    "replace",
  	    "restore",
  	    "rmdir",
  	    "shift",
  	    "sort",
  	    "start",
  	    "subst",
  	    "time",
  	    "title",
  	    "tree",
  	    "type",
  	    "ver",
  	    "verify",
  	    "vol",
  	    // winutils
  	    "ping",
  	    "net",
  	    "ipconfig",
  	    "taskkill",
  	    "xcopy",
  	    "ren",
  	    "del"
  	  ];
  	  return {
  	    name: 'Batch file (DOS)',
  	    aliases: [
  	      'bat',
  	      'cmd'
  	    ],
  	    case_insensitive: true,
  	    illegal: /\/\*/,
  	    keywords: {
  	      keyword: KEYWORDS,
  	      built_in: BUILT_INS
  	    },
  	    contains: [
  	      {
  	        className: 'variable',
  	        begin: /%%[^ ]|%[^ ]+?%|![^ ]+?!/
  	      },
  	      {
  	        className: 'function',
  	        begin: LABEL.begin,
  	        end: 'goto:eof',
  	        contains: [
  	          hljs.inherit(hljs.TITLE_MODE, { begin: '([_a-zA-Z]\\w*\\.)*([_a-zA-Z]\\w*:)?[_a-zA-Z]\\w*' }),
  	          COMMENT
  	        ]
  	      },
  	      {
  	        className: 'number',
  	        begin: '\\b\\d+',
  	        relevance: 0
  	      },
  	      COMMENT
  	    ]
  	  };
  	}

  	dos_1 = dos;
  	return dos_1;
  }

  /*
   Language: dsconfig
   Description: dsconfig batch configuration language for LDAP directory servers
   Contributors: Jacob Childress <jacobc@gmail.com>
   Category: enterprise, config
   */

  var dsconfig_1;
  var hasRequiredDsconfig;

  function requireDsconfig () {
  	if (hasRequiredDsconfig) return dsconfig_1;
  	hasRequiredDsconfig = 1;
  	/** @type LanguageFn */
  	function dsconfig(hljs) {
  	  const QUOTED_PROPERTY = {
  	    className: 'string',
  	    begin: /"/,
  	    end: /"/
  	  };
  	  const APOS_PROPERTY = {
  	    className: 'string',
  	    begin: /'/,
  	    end: /'/
  	  };
  	  const UNQUOTED_PROPERTY = {
  	    className: 'string',
  	    begin: /[\w\-?]+:\w+/,
  	    end: /\W/,
  	    relevance: 0
  	  };
  	  const VALUELESS_PROPERTY = {
  	    className: 'string',
  	    begin: /\w+(\-\w+)*/,
  	    end: /(?=\W)/,
  	    relevance: 0
  	  };

  	  return {
  	    keywords: 'dsconfig',
  	    contains: [
  	      {
  	        className: 'keyword',
  	        begin: '^dsconfig',
  	        end: /\s/,
  	        excludeEnd: true,
  	        relevance: 10
  	      },
  	      {
  	        className: 'built_in',
  	        begin: /(list|create|get|set|delete)-(\w+)/,
  	        end: /\s/,
  	        excludeEnd: true,
  	        illegal: '!@#$%^&*()',
  	        relevance: 10
  	      },
  	      {
  	        className: 'built_in',
  	        begin: /--(\w+)/,
  	        end: /\s/,
  	        excludeEnd: true
  	      },
  	      QUOTED_PROPERTY,
  	      APOS_PROPERTY,
  	      UNQUOTED_PROPERTY,
  	      VALUELESS_PROPERTY,
  	      hljs.HASH_COMMENT_MODE
  	    ]
  	  };
  	}

  	dsconfig_1 = dsconfig;
  	return dsconfig_1;
  }

  /*
  Language: Device Tree
  Description: *.dts files used in the Linux kernel
  Author: Martin Braun <martin.braun@ettus.com>, Moritz Fischer <moritz.fischer@ettus.com>
  Website: https://elinux.org/Device_Tree_Reference
  Category: config
  */

  var dts_1;
  var hasRequiredDts;

  function requireDts () {
  	if (hasRequiredDts) return dts_1;
  	hasRequiredDts = 1;
  	/** @type LanguageFn */
  	function dts(hljs) {
  	  const STRINGS = {
  	    className: 'string',
  	    variants: [
  	      hljs.inherit(hljs.QUOTE_STRING_MODE, { begin: '((u8?|U)|L)?"' }),
  	      {
  	        begin: '(u8?|U)?R"',
  	        end: '"',
  	        contains: [ hljs.BACKSLASH_ESCAPE ]
  	      },
  	      {
  	        begin: '\'\\\\?.',
  	        end: '\'',
  	        illegal: '.'
  	      }
  	    ]
  	  };

  	  const NUMBERS = {
  	    className: 'number',
  	    variants: [
  	      { begin: '\\b(\\d+(\\.\\d*)?|\\.\\d+)(u|U|l|L|ul|UL|f|F)' },
  	      { begin: hljs.C_NUMBER_RE }
  	    ],
  	    relevance: 0
  	  };

  	  const PREPROCESSOR = {
  	    className: 'meta',
  	    begin: '#',
  	    end: '$',
  	    keywords: { keyword: 'if else elif endif define undef ifdef ifndef' },
  	    contains: [
  	      {
  	        begin: /\\\n/,
  	        relevance: 0
  	      },
  	      {
  	        beginKeywords: 'include',
  	        end: '$',
  	        keywords: { keyword: 'include' },
  	        contains: [
  	          hljs.inherit(STRINGS, { className: 'string' }),
  	          {
  	            className: 'string',
  	            begin: '<',
  	            end: '>',
  	            illegal: '\\n'
  	          }
  	        ]
  	      },
  	      STRINGS,
  	      hljs.C_LINE_COMMENT_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE
  	    ]
  	  };

  	  const REFERENCE = {
  	    className: 'variable',
  	    begin: /&[a-z\d_]*\b/
  	  };

  	  const KEYWORD = {
  	    className: 'keyword',
  	    begin: '/[a-z][a-z\\d-]*/'
  	  };

  	  const LABEL = {
  	    className: 'symbol',
  	    begin: '^\\s*[a-zA-Z_][a-zA-Z\\d_]*:'
  	  };

  	  const CELL_PROPERTY = {
  	    className: 'params',
  	    relevance: 0,
  	    begin: '<',
  	    end: '>',
  	    contains: [
  	      NUMBERS,
  	      REFERENCE
  	    ]
  	  };

  	  const NODE = {
  	    className: 'title.class',
  	    begin: /[a-zA-Z_][a-zA-Z\d_@-]*(?=\s\{)/,
  	    relevance: 0.2
  	  };

  	  const ROOT_NODE = {
  	    className: 'title.class',
  	    begin: /^\/(?=\s*\{)/,
  	    relevance: 10
  	  };

  	  // TODO: `attribute` might be the right scope here, unsure
  	  // I'm not sure if all these key names have semantic meaning or not
  	  const ATTR_NO_VALUE = {
  	    match: /[a-z][a-z-,]+(?=;)/,
  	    relevance: 0,
  	    scope: "attr"
  	  };
  	  const ATTR = {
  	    relevance: 0,
  	    match: [
  	      /[a-z][a-z-,]+/,
  	      /\s*/,
  	      /=/
  	    ],
  	    scope: {
  	      1: "attr",
  	      3: "operator"
  	    }
  	  };

  	  const PUNC = {
  	    scope: "punctuation",
  	    relevance: 0,
  	    // `};` combined is just to avoid tons of useless punctuation nodes
  	    match: /\};|[;{}]/
  	  };

  	  return {
  	    name: 'Device Tree',
  	    contains: [
  	      ROOT_NODE,
  	      REFERENCE,
  	      KEYWORD,
  	      LABEL,
  	      NODE,
  	      ATTR,
  	      ATTR_NO_VALUE,
  	      CELL_PROPERTY,
  	      hljs.C_LINE_COMMENT_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE,
  	      NUMBERS,
  	      STRINGS,
  	      PREPROCESSOR,
  	      PUNC,
  	      {
  	        begin: hljs.IDENT_RE + '::',
  	        keywords: ""
  	      }
  	    ]
  	  };
  	}

  	dts_1 = dts;
  	return dts_1;
  }

  /*
  Language: Dust
  Requires: xml.js
  Author: Michael Allen <michael.allen@benefitfocus.com>
  Description: Matcher for dust.js templates.
  Website: https://www.dustjs.com
  Category: template
  */

  var dust_1;
  var hasRequiredDust;

  function requireDust () {
  	if (hasRequiredDust) return dust_1;
  	hasRequiredDust = 1;
  	/** @type LanguageFn */
  	function dust(hljs) {
  	  const EXPRESSION_KEYWORDS = 'if eq ne lt lte gt gte select default math sep';
  	  return {
  	    name: 'Dust',
  	    aliases: [ 'dst' ],
  	    case_insensitive: true,
  	    subLanguage: 'xml',
  	    contains: [
  	      {
  	        className: 'template-tag',
  	        begin: /\{[#\/]/,
  	        end: /\}/,
  	        illegal: /;/,
  	        contains: [
  	          {
  	            className: 'name',
  	            begin: /[a-zA-Z\.-]+/,
  	            starts: {
  	              endsWithParent: true,
  	              relevance: 0,
  	              contains: [ hljs.QUOTE_STRING_MODE ]
  	            }
  	          }
  	        ]
  	      },
  	      {
  	        className: 'template-variable',
  	        begin: /\{/,
  	        end: /\}/,
  	        illegal: /;/,
  	        keywords: EXPRESSION_KEYWORDS
  	      }
  	    ]
  	  };
  	}

  	dust_1 = dust;
  	return dust_1;
  }

  /*
  Language: Extended Backus-Naur Form
  Author: Alex McKibben <alex@nullscope.net>
  Website: https://en.wikipedia.org/wiki/Extended_Backus–Naur_form
  */

  var ebnf_1;
  var hasRequiredEbnf;

  function requireEbnf () {
  	if (hasRequiredEbnf) return ebnf_1;
  	hasRequiredEbnf = 1;
  	/** @type LanguageFn */
  	function ebnf(hljs) {
  	  const commentMode = hljs.COMMENT(/\(\*/, /\*\)/);

  	  const nonTerminalMode = {
  	    className: "attribute",
  	    begin: /^[ ]*[a-zA-Z]+([\s_-]+[a-zA-Z]+)*/
  	  };

  	  const specialSequenceMode = {
  	    className: "meta",
  	    begin: /\?.*\?/
  	  };

  	  const ruleBodyMode = {
  	    begin: /=/,
  	    end: /[.;]/,
  	    contains: [
  	      commentMode,
  	      specialSequenceMode,
  	      {
  	        // terminals
  	        className: 'string',
  	        variants: [
  	          hljs.APOS_STRING_MODE,
  	          hljs.QUOTE_STRING_MODE,
  	          {
  	            begin: '`',
  	            end: '`'
  	          }
  	        ]
  	      }
  	    ]
  	  };

  	  return {
  	    name: 'Extended Backus-Naur Form',
  	    illegal: /\S/,
  	    contains: [
  	      commentMode,
  	      nonTerminalMode,
  	      ruleBodyMode
  	    ]
  	  };
  	}

  	ebnf_1 = ebnf;
  	return ebnf_1;
  }

  /*
  Language: Elixir
  Author: Josh Adams <josh@isotope11.com>
  Description: language definition for Elixir source code files (.ex and .exs).  Based on ruby language support.
  Category: functional
  Website: https://elixir-lang.org
  */

  var elixir_1;
  var hasRequiredElixir;

  function requireElixir () {
  	if (hasRequiredElixir) return elixir_1;
  	hasRequiredElixir = 1;
  	/** @type LanguageFn */
  	function elixir(hljs) {
  	  const regex = hljs.regex;
  	  const ELIXIR_IDENT_RE = '[a-zA-Z_][a-zA-Z0-9_.]*(!|\\?)?';
  	  const ELIXIR_METHOD_RE = '[a-zA-Z_]\\w*[!?=]?|[-+~]@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?';
  	  const KEYWORDS = [
  	    "after",
  	    "alias",
  	    "and",
  	    "case",
  	    "catch",
  	    "cond",
  	    "defstruct",
  	    "defguard",
  	    "do",
  	    "else",
  	    "end",
  	    "fn",
  	    "for",
  	    "if",
  	    "import",
  	    "in",
  	    "not",
  	    "or",
  	    "quote",
  	    "raise",
  	    "receive",
  	    "require",
  	    "reraise",
  	    "rescue",
  	    "try",
  	    "unless",
  	    "unquote",
  	    "unquote_splicing",
  	    "use",
  	    "when",
  	    "with|0"
  	  ];
  	  const LITERALS = [
  	    "false",
  	    "nil",
  	    "true"
  	  ];
  	  const KWS = {
  	    $pattern: ELIXIR_IDENT_RE,
  	    keyword: KEYWORDS,
  	    literal: LITERALS
  	  };
  	  const SUBST = {
  	    className: 'subst',
  	    begin: /#\{/,
  	    end: /\}/,
  	    keywords: KWS
  	  };
  	  const NUMBER = {
  	    className: 'number',
  	    begin: '(\\b0o[0-7_]+)|(\\b0b[01_]+)|(\\b0x[0-9a-fA-F_]+)|(-?\\b[0-9][0-9_]*(\\.[0-9_]+([eE][-+]?[0-9]+)?)?)',
  	    relevance: 0
  	  };
  	  // TODO: could be tightened
  	  // https://elixir-lang.readthedocs.io/en/latest/intro/18.html
  	  // but you also need to include closing delemeters in the escape list per
  	  // individual sigil mode from what I can tell,
  	  // ie: \} might or might not be an escape depending on the sigil used
  	  const ESCAPES_RE = /\\[\s\S]/;
  	  // const ESCAPES_RE = /\\["'\\abdefnrstv0]/;
  	  const BACKSLASH_ESCAPE = {
  	    match: ESCAPES_RE,
  	    scope: "char.escape",
  	    relevance: 0
  	  };
  	  const SIGIL_DELIMITERS = '[/|([{<"\']';
  	  const SIGIL_DELIMITER_MODES = [
  	    {
  	      begin: /"/,
  	      end: /"/
  	    },
  	    {
  	      begin: /'/,
  	      end: /'/
  	    },
  	    {
  	      begin: /\//,
  	      end: /\//
  	    },
  	    {
  	      begin: /\|/,
  	      end: /\|/
  	    },
  	    {
  	      begin: /\(/,
  	      end: /\)/
  	    },
  	    {
  	      begin: /\[/,
  	      end: /\]/
  	    },
  	    {
  	      begin: /\{/,
  	      end: /\}/
  	    },
  	    {
  	      begin: /</,
  	      end: />/
  	    }
  	  ];
  	  const escapeSigilEnd = (end) => {
  	    return {
  	      scope: "char.escape",
  	      begin: regex.concat(/\\/, end),
  	      relevance: 0
  	    };
  	  };
  	  const LOWERCASE_SIGIL = {
  	    className: 'string',
  	    begin: '~[a-z]' + '(?=' + SIGIL_DELIMITERS + ')',
  	    contains: SIGIL_DELIMITER_MODES.map(x => hljs.inherit(x,
  	      { contains: [
  	        escapeSigilEnd(x.end),
  	        BACKSLASH_ESCAPE,
  	        SUBST
  	      ] }
  	    ))
  	  };

  	  const UPCASE_SIGIL = {
  	    className: 'string',
  	    begin: '~[A-Z]' + '(?=' + SIGIL_DELIMITERS + ')',
  	    contains: SIGIL_DELIMITER_MODES.map(x => hljs.inherit(x,
  	      { contains: [ escapeSigilEnd(x.end) ] }
  	    ))
  	  };

  	  const REGEX_SIGIL = {
  	    className: 'regex',
  	    variants: [
  	      {
  	        begin: '~r' + '(?=' + SIGIL_DELIMITERS + ')',
  	        contains: SIGIL_DELIMITER_MODES.map(x => hljs.inherit(x,
  	          {
  	            end: regex.concat(x.end, /[uismxfU]{0,7}/),
  	            contains: [
  	              escapeSigilEnd(x.end),
  	              BACKSLASH_ESCAPE,
  	              SUBST
  	            ]
  	          }
  	        ))
  	      },
  	      {
  	        begin: '~R' + '(?=' + SIGIL_DELIMITERS + ')',
  	        contains: SIGIL_DELIMITER_MODES.map(x => hljs.inherit(x,
  	          {
  	            end: regex.concat(x.end, /[uismxfU]{0,7}/),
  	            contains: [ escapeSigilEnd(x.end) ]
  	          })
  	        )
  	      }
  	    ]
  	  };

  	  const STRING = {
  	    className: 'string',
  	    contains: [
  	      hljs.BACKSLASH_ESCAPE,
  	      SUBST
  	    ],
  	    variants: [
  	      {
  	        begin: /"""/,
  	        end: /"""/
  	      },
  	      {
  	        begin: /'''/,
  	        end: /'''/
  	      },
  	      {
  	        begin: /~S"""/,
  	        end: /"""/,
  	        contains: [] // override default
  	      },
  	      {
  	        begin: /~S"/,
  	        end: /"/,
  	        contains: [] // override default
  	      },
  	      {
  	        begin: /~S'''/,
  	        end: /'''/,
  	        contains: [] // override default
  	      },
  	      {
  	        begin: /~S'/,
  	        end: /'/,
  	        contains: [] // override default
  	      },
  	      {
  	        begin: /'/,
  	        end: /'/
  	      },
  	      {
  	        begin: /"/,
  	        end: /"/
  	      }
  	    ]
  	  };
  	  const FUNCTION = {
  	    className: 'function',
  	    beginKeywords: 'def defp defmacro defmacrop',
  	    end: /\B\b/, // the mode is ended by the title
  	    contains: [
  	      hljs.inherit(hljs.TITLE_MODE, {
  	        begin: ELIXIR_IDENT_RE,
  	        endsParent: true
  	      })
  	    ]
  	  };
  	  const CLASS = hljs.inherit(FUNCTION, {
  	    className: 'class',
  	    beginKeywords: 'defimpl defmodule defprotocol defrecord',
  	    end: /\bdo\b|$|;/
  	  });
  	  const ELIXIR_DEFAULT_CONTAINS = [
  	    STRING,
  	    REGEX_SIGIL,
  	    UPCASE_SIGIL,
  	    LOWERCASE_SIGIL,
  	    hljs.HASH_COMMENT_MODE,
  	    CLASS,
  	    FUNCTION,
  	    { begin: '::' },
  	    {
  	      className: 'symbol',
  	      begin: ':(?![\\s:])',
  	      contains: [
  	        STRING,
  	        { begin: ELIXIR_METHOD_RE }
  	      ],
  	      relevance: 0
  	    },
  	    {
  	      className: 'symbol',
  	      begin: ELIXIR_IDENT_RE + ':(?!:)',
  	      relevance: 0
  	    },
  	    { // Usage of a module, struct, etc.
  	      className: 'title.class',
  	      begin: /(\b[A-Z][a-zA-Z0-9_]+)/,
  	      relevance: 0
  	    },
  	    NUMBER,
  	    {
  	      className: 'variable',
  	      begin: '(\\$\\W)|((\\$|@@?)(\\w+))'
  	    }
  	    // -> has been removed, capnproto always uses this grammar construct
  	  ];
  	  SUBST.contains = ELIXIR_DEFAULT_CONTAINS;

  	  return {
  	    name: 'Elixir',
  	    aliases: [
  	      'ex',
  	      'exs'
  	    ],
  	    keywords: KWS,
  	    contains: ELIXIR_DEFAULT_CONTAINS
  	  };
  	}

  	elixir_1 = elixir;
  	return elixir_1;
  }

  /*
  Language: Elm
  Author: Janis Voigtlaender <janis.voigtlaender@gmail.com>
  Website: https://elm-lang.org
  Category: functional
  */

  var elm_1;
  var hasRequiredElm;

  function requireElm () {
  	if (hasRequiredElm) return elm_1;
  	hasRequiredElm = 1;
  	/** @type LanguageFn */
  	function elm(hljs) {
  	  const COMMENT = { variants: [
  	    hljs.COMMENT('--', '$'),
  	    hljs.COMMENT(
  	      /\{-/,
  	      /-\}/,
  	      { contains: [ 'self' ] }
  	    )
  	  ] };

  	  const CONSTRUCTOR = {
  	    className: 'type',
  	    begin: '\\b[A-Z][\\w\']*', // TODO: other constructors (built-in, infix).
  	    relevance: 0
  	  };

  	  const LIST = {
  	    begin: '\\(',
  	    end: '\\)',
  	    illegal: '"',
  	    contains: [
  	      {
  	        className: 'type',
  	        begin: '\\b[A-Z][\\w]*(\\((\\.\\.|,|\\w+)\\))?'
  	      },
  	      COMMENT
  	    ]
  	  };

  	  const RECORD = {
  	    begin: /\{/,
  	    end: /\}/,
  	    contains: LIST.contains
  	  };

  	  const CHARACTER = {
  	    className: 'string',
  	    begin: '\'\\\\?.',
  	    end: '\'',
  	    illegal: '.'
  	  };

  	  const KEYWORDS = [
  	    "let",
  	    "in",
  	    "if",
  	    "then",
  	    "else",
  	    "case",
  	    "of",
  	    "where",
  	    "module",
  	    "import",
  	    "exposing",
  	    "type",
  	    "alias",
  	    "as",
  	    "infix",
  	    "infixl",
  	    "infixr",
  	    "port",
  	    "effect",
  	    "command",
  	    "subscription"
  	  ];

  	  return {
  	    name: 'Elm',
  	    keywords: KEYWORDS,
  	    contains: [

  	      // Top-level constructions.

  	      {
  	        beginKeywords: 'port effect module',
  	        end: 'exposing',
  	        keywords: 'port effect module where command subscription exposing',
  	        contains: [
  	          LIST,
  	          COMMENT
  	        ],
  	        illegal: '\\W\\.|;'
  	      },
  	      {
  	        begin: 'import',
  	        end: '$',
  	        keywords: 'import as exposing',
  	        contains: [
  	          LIST,
  	          COMMENT
  	        ],
  	        illegal: '\\W\\.|;'
  	      },
  	      {
  	        begin: 'type',
  	        end: '$',
  	        keywords: 'type alias',
  	        contains: [
  	          CONSTRUCTOR,
  	          LIST,
  	          RECORD,
  	          COMMENT
  	        ]
  	      },
  	      {
  	        beginKeywords: 'infix infixl infixr',
  	        end: '$',
  	        contains: [
  	          hljs.C_NUMBER_MODE,
  	          COMMENT
  	        ]
  	      },
  	      {
  	        begin: 'port',
  	        end: '$',
  	        keywords: 'port',
  	        contains: [ COMMENT ]
  	      },

  	      // Literals and names.
  	      CHARACTER,
  	      hljs.QUOTE_STRING_MODE,
  	      hljs.C_NUMBER_MODE,
  	      CONSTRUCTOR,
  	      hljs.inherit(hljs.TITLE_MODE, { begin: '^[_a-z][\\w\']*' }),
  	      COMMENT,

  	      { // No markup, relevance booster
  	        begin: '->|<-' }
  	    ],
  	    illegal: /;/
  	  };
  	}

  	elm_1 = elm;
  	return elm_1;
  }

  /*
  Language: Ruby
  Description: Ruby is a dynamic, open source programming language with a focus on simplicity and productivity.
  Website: https://www.ruby-lang.org/
  Author: Anton Kovalyov <anton@kovalyov.net>
  Contributors: Peter Leonov <gojpeg@yandex.ru>, Vasily Polovnyov <vast@whiteants.net>, Loren Segal <lsegal@soen.ca>, Pascal Hurni <phi@ruby-reactive.org>, Cedric Sohrauer <sohrauer@googlemail.com>
  Category: common
  */

  var ruby_1;
  var hasRequiredRuby;

  function requireRuby () {
  	if (hasRequiredRuby) return ruby_1;
  	hasRequiredRuby = 1;
  	function ruby(hljs) {
  	  const regex = hljs.regex;
  	  const RUBY_METHOD_RE = '([a-zA-Z_]\\w*[!?=]?|[-+~]@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?)';
  	  // TODO: move concepts like CAMEL_CASE into `modes.js`
  	  const CLASS_NAME_RE = regex.either(
  	    /\b([A-Z]+[a-z0-9]+)+/,
  	    // ends in caps
  	    /\b([A-Z]+[a-z0-9]+)+[A-Z]+/,
  	  )
  	  ;
  	  const CLASS_NAME_WITH_NAMESPACE_RE = regex.concat(CLASS_NAME_RE, /(::\w+)*/);
  	  // very popular ruby built-ins that one might even assume
  	  // are actual keywords (despite that not being the case)
  	  const PSEUDO_KWS = [
  	    "include",
  	    "extend",
  	    "prepend",
  	    "public",
  	    "private",
  	    "protected",
  	    "raise",
  	    "throw"
  	  ];
  	  const RUBY_KEYWORDS = {
  	    "variable.constant": [
  	      "__FILE__",
  	      "__LINE__",
  	      "__ENCODING__"
  	    ],
  	    "variable.language": [
  	      "self",
  	      "super",
  	    ],
  	    keyword: [
  	      "alias",
  	      "and",
  	      "begin",
  	      "BEGIN",
  	      "break",
  	      "case",
  	      "class",
  	      "defined",
  	      "do",
  	      "else",
  	      "elsif",
  	      "end",
  	      "END",
  	      "ensure",
  	      "for",
  	      "if",
  	      "in",
  	      "module",
  	      "next",
  	      "not",
  	      "or",
  	      "redo",
  	      "require",
  	      "rescue",
  	      "retry",
  	      "return",
  	      "then",
  	      "undef",
  	      "unless",
  	      "until",
  	      "when",
  	      "while",
  	      "yield",
  	      ...PSEUDO_KWS
  	    ],
  	    built_in: [
  	      "proc",
  	      "lambda",
  	      "attr_accessor",
  	      "attr_reader",
  	      "attr_writer",
  	      "define_method",
  	      "private_constant",
  	      "module_function"
  	    ],
  	    literal: [
  	      "true",
  	      "false",
  	      "nil"
  	    ]
  	  };
  	  const YARDOCTAG = {
  	    className: 'doctag',
  	    begin: '@[A-Za-z]+'
  	  };
  	  const IRB_OBJECT = {
  	    begin: '#<',
  	    end: '>'
  	  };
  	  const COMMENT_MODES = [
  	    hljs.COMMENT(
  	      '#',
  	      '$',
  	      { contains: [ YARDOCTAG ] }
  	    ),
  	    hljs.COMMENT(
  	      '^=begin',
  	      '^=end',
  	      {
  	        contains: [ YARDOCTAG ],
  	        relevance: 10
  	      }
  	    ),
  	    hljs.COMMENT('^__END__', hljs.MATCH_NOTHING_RE)
  	  ];
  	  const SUBST = {
  	    className: 'subst',
  	    begin: /#\{/,
  	    end: /\}/,
  	    keywords: RUBY_KEYWORDS
  	  };
  	  const STRING = {
  	    className: 'string',
  	    contains: [
  	      hljs.BACKSLASH_ESCAPE,
  	      SUBST
  	    ],
  	    variants: [
  	      {
  	        begin: /'/,
  	        end: /'/
  	      },
  	      {
  	        begin: /"/,
  	        end: /"/
  	      },
  	      {
  	        begin: /`/,
  	        end: /`/
  	      },
  	      {
  	        begin: /%[qQwWx]?\(/,
  	        end: /\)/
  	      },
  	      {
  	        begin: /%[qQwWx]?\[/,
  	        end: /\]/
  	      },
  	      {
  	        begin: /%[qQwWx]?\{/,
  	        end: /\}/
  	      },
  	      {
  	        begin: /%[qQwWx]?</,
  	        end: />/
  	      },
  	      {
  	        begin: /%[qQwWx]?\//,
  	        end: /\//
  	      },
  	      {
  	        begin: /%[qQwWx]?%/,
  	        end: /%/
  	      },
  	      {
  	        begin: /%[qQwWx]?-/,
  	        end: /-/
  	      },
  	      {
  	        begin: /%[qQwWx]?\|/,
  	        end: /\|/
  	      },
  	      // in the following expressions, \B in the beginning suppresses recognition of ?-sequences
  	      // where ? is the last character of a preceding identifier, as in: `func?4`
  	      { begin: /\B\?(\\\d{1,3})/ },
  	      { begin: /\B\?(\\x[A-Fa-f0-9]{1,2})/ },
  	      { begin: /\B\?(\\u\{?[A-Fa-f0-9]{1,6}\}?)/ },
  	      { begin: /\B\?(\\M-\\C-|\\M-\\c|\\c\\M-|\\M-|\\C-\\M-)[\x20-\x7e]/ },
  	      { begin: /\B\?\\(c|C-)[\x20-\x7e]/ },
  	      { begin: /\B\?\\?\S/ },
  	      // heredocs
  	      {
  	        // this guard makes sure that we have an entire heredoc and not a false
  	        // positive (auto-detect, etc.)
  	        begin: regex.concat(
  	          /<<[-~]?'?/,
  	          regex.lookahead(/(\w+)(?=\W)[^\n]*\n(?:[^\n]*\n)*?\s*\1\b/)
  	        ),
  	        contains: [
  	          hljs.END_SAME_AS_BEGIN({
  	            begin: /(\w+)/,
  	            end: /(\w+)/,
  	            contains: [
  	              hljs.BACKSLASH_ESCAPE,
  	              SUBST
  	            ]
  	          })
  	        ]
  	      }
  	    ]
  	  };

  	  // Ruby syntax is underdocumented, but this grammar seems to be accurate
  	  // as of version 2.7.2 (confirmed with (irb and `Ripper.sexp(...)`)
  	  // https://docs.ruby-lang.org/en/2.7.0/doc/syntax/literals_rdoc.html#label-Numbers
  	  const decimal = '[1-9](_?[0-9])*|0';
  	  const digits = '[0-9](_?[0-9])*';
  	  const NUMBER = {
  	    className: 'number',
  	    relevance: 0,
  	    variants: [
  	      // decimal integer/float, optionally exponential or rational, optionally imaginary
  	      { begin: `\\b(${decimal})(\\.(${digits}))?([eE][+-]?(${digits})|r)?i?\\b` },

  	      // explicit decimal/binary/octal/hexadecimal integer,
  	      // optionally rational and/or imaginary
  	      { begin: "\\b0[dD][0-9](_?[0-9])*r?i?\\b" },
  	      { begin: "\\b0[bB][0-1](_?[0-1])*r?i?\\b" },
  	      { begin: "\\b0[oO][0-7](_?[0-7])*r?i?\\b" },
  	      { begin: "\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*r?i?\\b" },

  	      // 0-prefixed implicit octal integer, optionally rational and/or imaginary
  	      { begin: "\\b0(_?[0-7])+r?i?\\b" }
  	    ]
  	  };

  	  const PARAMS = {
  	    variants: [
  	      {
  	        match: /\(\)/,
  	      },
  	      {
  	        className: 'params',
  	        begin: /\(/,
  	        end: /(?=\))/,
  	        excludeBegin: true,
  	        endsParent: true,
  	        keywords: RUBY_KEYWORDS,
  	      }
  	    ]
  	  };

  	  const INCLUDE_EXTEND = {
  	    match: [
  	      /(include|extend)\s+/,
  	      CLASS_NAME_WITH_NAMESPACE_RE
  	    ],
  	    scope: {
  	      2: "title.class"
  	    },
  	    keywords: RUBY_KEYWORDS
  	  };

  	  const CLASS_DEFINITION = {
  	    variants: [
  	      {
  	        match: [
  	          /class\s+/,
  	          CLASS_NAME_WITH_NAMESPACE_RE,
  	          /\s+<\s+/,
  	          CLASS_NAME_WITH_NAMESPACE_RE
  	        ]
  	      },
  	      {
  	        match: [
  	          /\b(class|module)\s+/,
  	          CLASS_NAME_WITH_NAMESPACE_RE
  	        ]
  	      }
  	    ],
  	    scope: {
  	      2: "title.class",
  	      4: "title.class.inherited"
  	    },
  	    keywords: RUBY_KEYWORDS
  	  };

  	  const UPPER_CASE_CONSTANT = {
  	    relevance: 0,
  	    match: /\b[A-Z][A-Z_0-9]+\b/,
  	    className: "variable.constant"
  	  };

  	  const METHOD_DEFINITION = {
  	    match: [
  	      /def/, /\s+/,
  	      RUBY_METHOD_RE
  	    ],
  	    scope: {
  	      1: "keyword",
  	      3: "title.function"
  	    },
  	    contains: [
  	      PARAMS
  	    ]
  	  };

  	  const OBJECT_CREATION = {
  	    relevance: 0,
  	    match: [
  	      CLASS_NAME_WITH_NAMESPACE_RE,
  	      /\.new[. (]/
  	    ],
  	    scope: {
  	      1: "title.class"
  	    }
  	  };

  	  // CamelCase
  	  const CLASS_REFERENCE = {
  	    relevance: 0,
  	    match: CLASS_NAME_RE,
  	    scope: "title.class"
  	  };

  	  const RUBY_DEFAULT_CONTAINS = [
  	    STRING,
  	    CLASS_DEFINITION,
  	    INCLUDE_EXTEND,
  	    OBJECT_CREATION,
  	    UPPER_CASE_CONSTANT,
  	    CLASS_REFERENCE,
  	    METHOD_DEFINITION,
  	    {
  	      // swallow namespace qualifiers before symbols
  	      begin: hljs.IDENT_RE + '::' },
  	    {
  	      className: 'symbol',
  	      begin: hljs.UNDERSCORE_IDENT_RE + '(!|\\?)?:',
  	      relevance: 0
  	    },
  	    {
  	      className: 'symbol',
  	      begin: ':(?!\\s)',
  	      contains: [
  	        STRING,
  	        { begin: RUBY_METHOD_RE }
  	      ],
  	      relevance: 0
  	    },
  	    NUMBER,
  	    {
  	      // negative-look forward attempts to prevent false matches like:
  	      // @ident@ or $ident$ that might indicate this is not ruby at all
  	      className: "variable",
  	      begin: '(\\$\\W)|((\\$|@@?)(\\w+))(?=[^@$?])' + `(?![A-Za-z])(?![@$?'])`
  	    },
  	    {
  	      className: 'params',
  	      begin: /\|/,
  	      end: /\|/,
  	      excludeBegin: true,
  	      excludeEnd: true,
  	      relevance: 0, // this could be a lot of things (in other languages) other than params
  	      keywords: RUBY_KEYWORDS
  	    },
  	    { // regexp container
  	      begin: '(' + hljs.RE_STARTERS_RE + '|unless)\\s*',
  	      keywords: 'unless',
  	      contains: [
  	        {
  	          className: 'regexp',
  	          contains: [
  	            hljs.BACKSLASH_ESCAPE,
  	            SUBST
  	          ],
  	          illegal: /\n/,
  	          variants: [
  	            {
  	              begin: '/',
  	              end: '/[a-z]*'
  	            },
  	            {
  	              begin: /%r\{/,
  	              end: /\}[a-z]*/
  	            },
  	            {
  	              begin: '%r\\(',
  	              end: '\\)[a-z]*'
  	            },
  	            {
  	              begin: '%r!',
  	              end: '![a-z]*'
  	            },
  	            {
  	              begin: '%r\\[',
  	              end: '\\][a-z]*'
  	            }
  	          ]
  	        }
  	      ].concat(IRB_OBJECT, COMMENT_MODES),
  	      relevance: 0
  	    }
  	  ].concat(IRB_OBJECT, COMMENT_MODES);

  	  SUBST.contains = RUBY_DEFAULT_CONTAINS;
  	  PARAMS.contains = RUBY_DEFAULT_CONTAINS;

  	  // >>
  	  // ?>
  	  const SIMPLE_PROMPT = "[>?]>";
  	  // irb(main):001:0>
  	  const DEFAULT_PROMPT = "[\\w#]+\\(\\w+\\):\\d+:\\d+[>*]";
  	  const RVM_PROMPT = "(\\w+-)?\\d+\\.\\d+\\.\\d+(p\\d+)?[^\\d][^>]+>";

  	  const IRB_DEFAULT = [
  	    {
  	      begin: /^\s*=>/,
  	      starts: {
  	        end: '$',
  	        contains: RUBY_DEFAULT_CONTAINS
  	      }
  	    },
  	    {
  	      className: 'meta.prompt',
  	      begin: '^(' + SIMPLE_PROMPT + "|" + DEFAULT_PROMPT + '|' + RVM_PROMPT + ')(?=[ ])',
  	      starts: {
  	        end: '$',
  	        keywords: RUBY_KEYWORDS,
  	        contains: RUBY_DEFAULT_CONTAINS
  	      }
  	    }
  	  ];

  	  COMMENT_MODES.unshift(IRB_OBJECT);

  	  return {
  	    name: 'Ruby',
  	    aliases: [
  	      'rb',
  	      'gemspec',
  	      'podspec',
  	      'thor',
  	      'irb'
  	    ],
  	    keywords: RUBY_KEYWORDS,
  	    illegal: /\/\*/,
  	    contains: [ hljs.SHEBANG({ binary: "ruby" }) ]
  	      .concat(IRB_DEFAULT)
  	      .concat(COMMENT_MODES)
  	      .concat(RUBY_DEFAULT_CONTAINS)
  	  };
  	}

  	ruby_1 = ruby;
  	return ruby_1;
  }

  /*
  Language: ERB (Embedded Ruby)
  Requires: xml.js, ruby.js
  Author: Lucas Mazza <lucastmazza@gmail.com>
  Contributors: Kassio Borges <kassioborgesm@gmail.com>
  Description: "Bridge" language defining fragments of Ruby in HTML within <% .. %>
  Website: https://ruby-doc.org/stdlib-2.6.5/libdoc/erb/rdoc/ERB.html
  Category: template
  */

  var erb_1;
  var hasRequiredErb;

  function requireErb () {
  	if (hasRequiredErb) return erb_1;
  	hasRequiredErb = 1;
  	/** @type LanguageFn */
  	function erb(hljs) {
  	  return {
  	    name: 'ERB',
  	    subLanguage: 'xml',
  	    contains: [
  	      hljs.COMMENT('<%#', '%>'),
  	      {
  	        begin: '<%[%=-]?',
  	        end: '[%-]?%>',
  	        subLanguage: 'ruby',
  	        excludeBegin: true,
  	        excludeEnd: true
  	      }
  	    ]
  	  };
  	}

  	erb_1 = erb;
  	return erb_1;
  }

  /*
  Language: Erlang REPL
  Author: Sergey Ignatov <sergey@ignatov.spb.su>
  Website: https://www.erlang.org
  Category: functional
  */

  var erlangRepl_1;
  var hasRequiredErlangRepl;

  function requireErlangRepl () {
  	if (hasRequiredErlangRepl) return erlangRepl_1;
  	hasRequiredErlangRepl = 1;
  	/** @type LanguageFn */
  	function erlangRepl(hljs) {
  	  const regex = hljs.regex;
  	  return {
  	    name: 'Erlang REPL',
  	    keywords: {
  	      built_in:
  	        'spawn spawn_link self',
  	      keyword:
  	        'after and andalso|10 band begin bnot bor bsl bsr bxor case catch cond div end fun if '
  	        + 'let not of or orelse|10 query receive rem try when xor'
  	    },
  	    contains: [
  	      {
  	        className: 'meta.prompt',
  	        begin: '^[0-9]+> ',
  	        relevance: 10
  	      },
  	      hljs.COMMENT('%', '$'),
  	      {
  	        className: 'number',
  	        begin: '\\b(\\d+(_\\d+)*#[a-fA-F0-9]+(_[a-fA-F0-9]+)*|\\d+(_\\d+)*(\\.\\d+(_\\d+)*)?([eE][-+]?\\d+)?)',
  	        relevance: 0
  	      },
  	      hljs.APOS_STRING_MODE,
  	      hljs.QUOTE_STRING_MODE,
  	      { begin: regex.concat(
  	        /\?(::)?/,
  	        /([A-Z]\w*)/, // at least one identifier
  	        /((::)[A-Z]\w*)*/ // perhaps more
  	      ) },
  	      { begin: '->' },
  	      { begin: 'ok' },
  	      { begin: '!' },
  	      {
  	        begin: '(\\b[a-z\'][a-zA-Z0-9_\']*:[a-z\'][a-zA-Z0-9_\']*)|(\\b[a-z\'][a-zA-Z0-9_\']*)',
  	        relevance: 0
  	      },
  	      {
  	        begin: '[A-Z][a-zA-Z0-9_\']*',
  	        relevance: 0
  	      }
  	    ]
  	  };
  	}

  	erlangRepl_1 = erlangRepl;
  	return erlangRepl_1;
  }

  /*
  Language: Erlang
  Description: Erlang is a general-purpose functional language, with strict evaluation, single assignment, and dynamic typing.
  Author: Nikolay Zakharov <nikolay.desh@gmail.com>, Dmitry Kovega <arhibot@gmail.com>
  Website: https://www.erlang.org
  Category: functional
  */

  var erlang_1;
  var hasRequiredErlang;

  function requireErlang () {
  	if (hasRequiredErlang) return erlang_1;
  	hasRequiredErlang = 1;
  	/** @type LanguageFn */
  	function erlang(hljs) {
  	  const BASIC_ATOM_RE = '[a-z\'][a-zA-Z0-9_\']*';
  	  const FUNCTION_NAME_RE = '(' + BASIC_ATOM_RE + ':' + BASIC_ATOM_RE + '|' + BASIC_ATOM_RE + ')';
  	  const ERLANG_RESERVED = {
  	    keyword:
  	      'after and andalso|10 band begin bnot bor bsl bzr bxor case catch cond div end fun if '
  	      + 'let not of orelse|10 query receive rem try when xor',
  	    literal:
  	      'false true'
  	  };

  	  const COMMENT = hljs.COMMENT('%', '$');
  	  const NUMBER = {
  	    className: 'number',
  	    begin: '\\b(\\d+(_\\d+)*#[a-fA-F0-9]+(_[a-fA-F0-9]+)*|\\d+(_\\d+)*(\\.\\d+(_\\d+)*)?([eE][-+]?\\d+)?)',
  	    relevance: 0
  	  };
  	  const NAMED_FUN = { begin: 'fun\\s+' + BASIC_ATOM_RE + '/\\d+' };
  	  const FUNCTION_CALL = {
  	    begin: FUNCTION_NAME_RE + '\\(',
  	    end: '\\)',
  	    returnBegin: true,
  	    relevance: 0,
  	    contains: [
  	      {
  	        begin: FUNCTION_NAME_RE,
  	        relevance: 0
  	      },
  	      {
  	        begin: '\\(',
  	        end: '\\)',
  	        endsWithParent: true,
  	        returnEnd: true,
  	        relevance: 0
  	        // "contains" defined later
  	      }
  	    ]
  	  };
  	  const TUPLE = {
  	    begin: /\{/,
  	    end: /\}/,
  	    relevance: 0
  	    // "contains" defined later
  	  };
  	  const VAR1 = {
  	    begin: '\\b_([A-Z][A-Za-z0-9_]*)?',
  	    relevance: 0
  	  };
  	  const VAR2 = {
  	    begin: '[A-Z][a-zA-Z0-9_]*',
  	    relevance: 0
  	  };
  	  const RECORD_ACCESS = {
  	    begin: '#' + hljs.UNDERSCORE_IDENT_RE,
  	    relevance: 0,
  	    returnBegin: true,
  	    contains: [
  	      {
  	        begin: '#' + hljs.UNDERSCORE_IDENT_RE,
  	        relevance: 0
  	      },
  	      {
  	        begin: /\{/,
  	        end: /\}/,
  	        relevance: 0
  	        // "contains" defined later
  	      }
  	    ]
  	  };

  	  const BLOCK_STATEMENTS = {
  	    beginKeywords: 'fun receive if try case',
  	    end: 'end',
  	    keywords: ERLANG_RESERVED
  	  };
  	  BLOCK_STATEMENTS.contains = [
  	    COMMENT,
  	    NAMED_FUN,
  	    hljs.inherit(hljs.APOS_STRING_MODE, { className: '' }),
  	    BLOCK_STATEMENTS,
  	    FUNCTION_CALL,
  	    hljs.QUOTE_STRING_MODE,
  	    NUMBER,
  	    TUPLE,
  	    VAR1,
  	    VAR2,
  	    RECORD_ACCESS
  	  ];

  	  const BASIC_MODES = [
  	    COMMENT,
  	    NAMED_FUN,
  	    BLOCK_STATEMENTS,
  	    FUNCTION_CALL,
  	    hljs.QUOTE_STRING_MODE,
  	    NUMBER,
  	    TUPLE,
  	    VAR1,
  	    VAR2,
  	    RECORD_ACCESS
  	  ];
  	  FUNCTION_CALL.contains[1].contains = BASIC_MODES;
  	  TUPLE.contains = BASIC_MODES;
  	  RECORD_ACCESS.contains[1].contains = BASIC_MODES;

  	  const DIRECTIVES = [
  	    "-module",
  	    "-record",
  	    "-undef",
  	    "-export",
  	    "-ifdef",
  	    "-ifndef",
  	    "-author",
  	    "-copyright",
  	    "-doc",
  	    "-vsn",
  	    "-import",
  	    "-include",
  	    "-include_lib",
  	    "-compile",
  	    "-define",
  	    "-else",
  	    "-endif",
  	    "-file",
  	    "-behaviour",
  	    "-behavior",
  	    "-spec"
  	  ];

  	  const PARAMS = {
  	    className: 'params',
  	    begin: '\\(',
  	    end: '\\)',
  	    contains: BASIC_MODES
  	  };
  	  return {
  	    name: 'Erlang',
  	    aliases: [ 'erl' ],
  	    keywords: ERLANG_RESERVED,
  	    illegal: '(</|\\*=|\\+=|-=|/\\*|\\*/|\\(\\*|\\*\\))',
  	    contains: [
  	      {
  	        className: 'function',
  	        begin: '^' + BASIC_ATOM_RE + '\\s*\\(',
  	        end: '->',
  	        returnBegin: true,
  	        illegal: '\\(|#|//|/\\*|\\\\|:|;',
  	        contains: [
  	          PARAMS,
  	          hljs.inherit(hljs.TITLE_MODE, { begin: BASIC_ATOM_RE })
  	        ],
  	        starts: {
  	          end: ';|\\.',
  	          keywords: ERLANG_RESERVED,
  	          contains: BASIC_MODES
  	        }
  	      },
  	      COMMENT,
  	      {
  	        begin: '^-',
  	        end: '\\.',
  	        relevance: 0,
  	        excludeEnd: true,
  	        returnBegin: true,
  	        keywords: {
  	          $pattern: '-' + hljs.IDENT_RE,
  	          keyword: DIRECTIVES.map(x => `${x}|1.5`).join(" ")
  	        },
  	        contains: [ PARAMS ]
  	      },
  	      NUMBER,
  	      hljs.QUOTE_STRING_MODE,
  	      RECORD_ACCESS,
  	      VAR1,
  	      VAR2,
  	      TUPLE,
  	      { begin: /\.$/ } // relevance booster
  	    ]
  	  };
  	}

  	erlang_1 = erlang;
  	return erlang_1;
  }

  /*
  Language: Excel formulae
  Author: Victor Zhou <OiCMudkips@users.noreply.github.com>
  Description: Excel formulae
  Website: https://products.office.com/en-us/excel/
  */

  var excel_1;
  var hasRequiredExcel;

  function requireExcel () {
  	if (hasRequiredExcel) return excel_1;
  	hasRequiredExcel = 1;
  	/** @type LanguageFn */
  	function excel(hljs) {
  	  // built-in functions imported from https://web.archive.org/web/20160513042710/https://support.office.com/en-us/article/Excel-functions-alphabetical-b3944572-255d-4efb-bb96-c6d90033e188
  	  const BUILT_INS = [
  	    "ABS",
  	    "ACCRINT",
  	    "ACCRINTM",
  	    "ACOS",
  	    "ACOSH",
  	    "ACOT",
  	    "ACOTH",
  	    "AGGREGATE",
  	    "ADDRESS",
  	    "AMORDEGRC",
  	    "AMORLINC",
  	    "AND",
  	    "ARABIC",
  	    "AREAS",
  	    "ASC",
  	    "ASIN",
  	    "ASINH",
  	    "ATAN",
  	    "ATAN2",
  	    "ATANH",
  	    "AVEDEV",
  	    "AVERAGE",
  	    "AVERAGEA",
  	    "AVERAGEIF",
  	    "AVERAGEIFS",
  	    "BAHTTEXT",
  	    "BASE",
  	    "BESSELI",
  	    "BESSELJ",
  	    "BESSELK",
  	    "BESSELY",
  	    "BETADIST",
  	    "BETA.DIST",
  	    "BETAINV",
  	    "BETA.INV",
  	    "BIN2DEC",
  	    "BIN2HEX",
  	    "BIN2OCT",
  	    "BINOMDIST",
  	    "BINOM.DIST",
  	    "BINOM.DIST.RANGE",
  	    "BINOM.INV",
  	    "BITAND",
  	    "BITLSHIFT",
  	    "BITOR",
  	    "BITRSHIFT",
  	    "BITXOR",
  	    "CALL",
  	    "CEILING",
  	    "CEILING.MATH",
  	    "CEILING.PRECISE",
  	    "CELL",
  	    "CHAR",
  	    "CHIDIST",
  	    "CHIINV",
  	    "CHITEST",
  	    "CHISQ.DIST",
  	    "CHISQ.DIST.RT",
  	    "CHISQ.INV",
  	    "CHISQ.INV.RT",
  	    "CHISQ.TEST",
  	    "CHOOSE",
  	    "CLEAN",
  	    "CODE",
  	    "COLUMN",
  	    "COLUMNS",
  	    "COMBIN",
  	    "COMBINA",
  	    "COMPLEX",
  	    "CONCAT",
  	    "CONCATENATE",
  	    "CONFIDENCE",
  	    "CONFIDENCE.NORM",
  	    "CONFIDENCE.T",
  	    "CONVERT",
  	    "CORREL",
  	    "COS",
  	    "COSH",
  	    "COT",
  	    "COTH",
  	    "COUNT",
  	    "COUNTA",
  	    "COUNTBLANK",
  	    "COUNTIF",
  	    "COUNTIFS",
  	    "COUPDAYBS",
  	    "COUPDAYS",
  	    "COUPDAYSNC",
  	    "COUPNCD",
  	    "COUPNUM",
  	    "COUPPCD",
  	    "COVAR",
  	    "COVARIANCE.P",
  	    "COVARIANCE.S",
  	    "CRITBINOM",
  	    "CSC",
  	    "CSCH",
  	    "CUBEKPIMEMBER",
  	    "CUBEMEMBER",
  	    "CUBEMEMBERPROPERTY",
  	    "CUBERANKEDMEMBER",
  	    "CUBESET",
  	    "CUBESETCOUNT",
  	    "CUBEVALUE",
  	    "CUMIPMT",
  	    "CUMPRINC",
  	    "DATE",
  	    "DATEDIF",
  	    "DATEVALUE",
  	    "DAVERAGE",
  	    "DAY",
  	    "DAYS",
  	    "DAYS360",
  	    "DB",
  	    "DBCS",
  	    "DCOUNT",
  	    "DCOUNTA",
  	    "DDB",
  	    "DEC2BIN",
  	    "DEC2HEX",
  	    "DEC2OCT",
  	    "DECIMAL",
  	    "DEGREES",
  	    "DELTA",
  	    "DEVSQ",
  	    "DGET",
  	    "DISC",
  	    "DMAX",
  	    "DMIN",
  	    "DOLLAR",
  	    "DOLLARDE",
  	    "DOLLARFR",
  	    "DPRODUCT",
  	    "DSTDEV",
  	    "DSTDEVP",
  	    "DSUM",
  	    "DURATION",
  	    "DVAR",
  	    "DVARP",
  	    "EDATE",
  	    "EFFECT",
  	    "ENCODEURL",
  	    "EOMONTH",
  	    "ERF",
  	    "ERF.PRECISE",
  	    "ERFC",
  	    "ERFC.PRECISE",
  	    "ERROR.TYPE",
  	    "EUROCONVERT",
  	    "EVEN",
  	    "EXACT",
  	    "EXP",
  	    "EXPON.DIST",
  	    "EXPONDIST",
  	    "FACT",
  	    "FACTDOUBLE",
  	    "FALSE|0",
  	    "F.DIST",
  	    "FDIST",
  	    "F.DIST.RT",
  	    "FILTERXML",
  	    "FIND",
  	    "FINDB",
  	    "F.INV",
  	    "F.INV.RT",
  	    "FINV",
  	    "FISHER",
  	    "FISHERINV",
  	    "FIXED",
  	    "FLOOR",
  	    "FLOOR.MATH",
  	    "FLOOR.PRECISE",
  	    "FORECAST",
  	    "FORECAST.ETS",
  	    "FORECAST.ETS.CONFINT",
  	    "FORECAST.ETS.SEASONALITY",
  	    "FORECAST.ETS.STAT",
  	    "FORECAST.LINEAR",
  	    "FORMULATEXT",
  	    "FREQUENCY",
  	    "F.TEST",
  	    "FTEST",
  	    "FV",
  	    "FVSCHEDULE",
  	    "GAMMA",
  	    "GAMMA.DIST",
  	    "GAMMADIST",
  	    "GAMMA.INV",
  	    "GAMMAINV",
  	    "GAMMALN",
  	    "GAMMALN.PRECISE",
  	    "GAUSS",
  	    "GCD",
  	    "GEOMEAN",
  	    "GESTEP",
  	    "GETPIVOTDATA",
  	    "GROWTH",
  	    "HARMEAN",
  	    "HEX2BIN",
  	    "HEX2DEC",
  	    "HEX2OCT",
  	    "HLOOKUP",
  	    "HOUR",
  	    "HYPERLINK",
  	    "HYPGEOM.DIST",
  	    "HYPGEOMDIST",
  	    "IF",
  	    "IFERROR",
  	    "IFNA",
  	    "IFS",
  	    "IMABS",
  	    "IMAGINARY",
  	    "IMARGUMENT",
  	    "IMCONJUGATE",
  	    "IMCOS",
  	    "IMCOSH",
  	    "IMCOT",
  	    "IMCSC",
  	    "IMCSCH",
  	    "IMDIV",
  	    "IMEXP",
  	    "IMLN",
  	    "IMLOG10",
  	    "IMLOG2",
  	    "IMPOWER",
  	    "IMPRODUCT",
  	    "IMREAL",
  	    "IMSEC",
  	    "IMSECH",
  	    "IMSIN",
  	    "IMSINH",
  	    "IMSQRT",
  	    "IMSUB",
  	    "IMSUM",
  	    "IMTAN",
  	    "INDEX",
  	    "INDIRECT",
  	    "INFO",
  	    "INT",
  	    "INTERCEPT",
  	    "INTRATE",
  	    "IPMT",
  	    "IRR",
  	    "ISBLANK",
  	    "ISERR",
  	    "ISERROR",
  	    "ISEVEN",
  	    "ISFORMULA",
  	    "ISLOGICAL",
  	    "ISNA",
  	    "ISNONTEXT",
  	    "ISNUMBER",
  	    "ISODD",
  	    "ISREF",
  	    "ISTEXT",
  	    "ISO.CEILING",
  	    "ISOWEEKNUM",
  	    "ISPMT",
  	    "JIS",
  	    "KURT",
  	    "LARGE",
  	    "LCM",
  	    "LEFT",
  	    "LEFTB",
  	    "LEN",
  	    "LENB",
  	    "LINEST",
  	    "LN",
  	    "LOG",
  	    "LOG10",
  	    "LOGEST",
  	    "LOGINV",
  	    "LOGNORM.DIST",
  	    "LOGNORMDIST",
  	    "LOGNORM.INV",
  	    "LOOKUP",
  	    "LOWER",
  	    "MATCH",
  	    "MAX",
  	    "MAXA",
  	    "MAXIFS",
  	    "MDETERM",
  	    "MDURATION",
  	    "MEDIAN",
  	    "MID",
  	    "MIDBs",
  	    "MIN",
  	    "MINIFS",
  	    "MINA",
  	    "MINUTE",
  	    "MINVERSE",
  	    "MIRR",
  	    "MMULT",
  	    "MOD",
  	    "MODE",
  	    "MODE.MULT",
  	    "MODE.SNGL",
  	    "MONTH",
  	    "MROUND",
  	    "MULTINOMIAL",
  	    "MUNIT",
  	    "N",
  	    "NA",
  	    "NEGBINOM.DIST",
  	    "NEGBINOMDIST",
  	    "NETWORKDAYS",
  	    "NETWORKDAYS.INTL",
  	    "NOMINAL",
  	    "NORM.DIST",
  	    "NORMDIST",
  	    "NORMINV",
  	    "NORM.INV",
  	    "NORM.S.DIST",
  	    "NORMSDIST",
  	    "NORM.S.INV",
  	    "NORMSINV",
  	    "NOT",
  	    "NOW",
  	    "NPER",
  	    "NPV",
  	    "NUMBERVALUE",
  	    "OCT2BIN",
  	    "OCT2DEC",
  	    "OCT2HEX",
  	    "ODD",
  	    "ODDFPRICE",
  	    "ODDFYIELD",
  	    "ODDLPRICE",
  	    "ODDLYIELD",
  	    "OFFSET",
  	    "OR",
  	    "PDURATION",
  	    "PEARSON",
  	    "PERCENTILE.EXC",
  	    "PERCENTILE.INC",
  	    "PERCENTILE",
  	    "PERCENTRANK.EXC",
  	    "PERCENTRANK.INC",
  	    "PERCENTRANK",
  	    "PERMUT",
  	    "PERMUTATIONA",
  	    "PHI",
  	    "PHONETIC",
  	    "PI",
  	    "PMT",
  	    "POISSON.DIST",
  	    "POISSON",
  	    "POWER",
  	    "PPMT",
  	    "PRICE",
  	    "PRICEDISC",
  	    "PRICEMAT",
  	    "PROB",
  	    "PRODUCT",
  	    "PROPER",
  	    "PV",
  	    "QUARTILE",
  	    "QUARTILE.EXC",
  	    "QUARTILE.INC",
  	    "QUOTIENT",
  	    "RADIANS",
  	    "RAND",
  	    "RANDBETWEEN",
  	    "RANK.AVG",
  	    "RANK.EQ",
  	    "RANK",
  	    "RATE",
  	    "RECEIVED",
  	    "REGISTER.ID",
  	    "REPLACE",
  	    "REPLACEB",
  	    "REPT",
  	    "RIGHT",
  	    "RIGHTB",
  	    "ROMAN",
  	    "ROUND",
  	    "ROUNDDOWN",
  	    "ROUNDUP",
  	    "ROW",
  	    "ROWS",
  	    "RRI",
  	    "RSQ",
  	    "RTD",
  	    "SEARCH",
  	    "SEARCHB",
  	    "SEC",
  	    "SECH",
  	    "SECOND",
  	    "SERIESSUM",
  	    "SHEET",
  	    "SHEETS",
  	    "SIGN",
  	    "SIN",
  	    "SINH",
  	    "SKEW",
  	    "SKEW.P",
  	    "SLN",
  	    "SLOPE",
  	    "SMALL",
  	    "SQL.REQUEST",
  	    "SQRT",
  	    "SQRTPI",
  	    "STANDARDIZE",
  	    "STDEV",
  	    "STDEV.P",
  	    "STDEV.S",
  	    "STDEVA",
  	    "STDEVP",
  	    "STDEVPA",
  	    "STEYX",
  	    "SUBSTITUTE",
  	    "SUBTOTAL",
  	    "SUM",
  	    "SUMIF",
  	    "SUMIFS",
  	    "SUMPRODUCT",
  	    "SUMSQ",
  	    "SUMX2MY2",
  	    "SUMX2PY2",
  	    "SUMXMY2",
  	    "SWITCH",
  	    "SYD",
  	    "T",
  	    "TAN",
  	    "TANH",
  	    "TBILLEQ",
  	    "TBILLPRICE",
  	    "TBILLYIELD",
  	    "T.DIST",
  	    "T.DIST.2T",
  	    "T.DIST.RT",
  	    "TDIST",
  	    "TEXT",
  	    "TEXTJOIN",
  	    "TIME",
  	    "TIMEVALUE",
  	    "T.INV",
  	    "T.INV.2T",
  	    "TINV",
  	    "TODAY",
  	    "TRANSPOSE",
  	    "TREND",
  	    "TRIM",
  	    "TRIMMEAN",
  	    "TRUE|0",
  	    "TRUNC",
  	    "T.TEST",
  	    "TTEST",
  	    "TYPE",
  	    "UNICHAR",
  	    "UNICODE",
  	    "UPPER",
  	    "VALUE",
  	    "VAR",
  	    "VAR.P",
  	    "VAR.S",
  	    "VARA",
  	    "VARP",
  	    "VARPA",
  	    "VDB",
  	    "VLOOKUP",
  	    "WEBSERVICE",
  	    "WEEKDAY",
  	    "WEEKNUM",
  	    "WEIBULL",
  	    "WEIBULL.DIST",
  	    "WORKDAY",
  	    "WORKDAY.INTL",
  	    "XIRR",
  	    "XNPV",
  	    "XOR",
  	    "YEAR",
  	    "YEARFRAC",
  	    "YIELD",
  	    "YIELDDISC",
  	    "YIELDMAT",
  	    "Z.TEST",
  	    "ZTEST"
  	  ];
  	  return {
  	    name: 'Excel formulae',
  	    aliases: [
  	      'xlsx',
  	      'xls'
  	    ],
  	    case_insensitive: true,
  	    keywords: {
  	      $pattern: /[a-zA-Z][\w\.]*/,
  	      built_in: BUILT_INS
  	    },
  	    contains: [
  	      {
  	        /* matches a beginning equal sign found in Excel formula examples */
  	        begin: /^=/,
  	        end: /[^=]/,
  	        returnEnd: true,
  	        illegal: /=/, /* only allow single equal sign at front of line */
  	        relevance: 10
  	      },
  	      /* technically, there can be more than 2 letters in column names, but this prevents conflict with some keywords */
  	      {
  	        /* matches a reference to a single cell */
  	        className: 'symbol',
  	        begin: /\b[A-Z]{1,2}\d+\b/,
  	        end: /[^\d]/,
  	        excludeEnd: true,
  	        relevance: 0
  	      },
  	      {
  	        /* matches a reference to a range of cells */
  	        className: 'symbol',
  	        begin: /[A-Z]{0,2}\d*:[A-Z]{0,2}\d*/,
  	        relevance: 0
  	      },
  	      hljs.BACKSLASH_ESCAPE,
  	      hljs.QUOTE_STRING_MODE,
  	      {
  	        className: 'number',
  	        begin: hljs.NUMBER_RE + '(%)?',
  	        relevance: 0
  	      },
  	      /* Excel formula comments are done by putting the comment in a function call to N() */
  	      hljs.COMMENT(/\bN\(/, /\)/,
  	        {
  	          excludeBegin: true,
  	          excludeEnd: true,
  	          illegal: /\n/
  	        })
  	    ]
  	  };
  	}

  	excel_1 = excel;
  	return excel_1;
  }

  /*
  Language: FIX
  Author: Brent Bradbury <brent@brentium.com>
  */

  var fix_1;
  var hasRequiredFix;

  function requireFix () {
  	if (hasRequiredFix) return fix_1;
  	hasRequiredFix = 1;
  	/** @type LanguageFn */
  	function fix(hljs) {
  	  return {
  	    name: 'FIX',
  	    contains: [
  	      {
  	        begin: /[^\u2401\u0001]+/,
  	        end: /[\u2401\u0001]/,
  	        excludeEnd: true,
  	        returnBegin: true,
  	        returnEnd: false,
  	        contains: [
  	          {
  	            begin: /([^\u2401\u0001=]+)/,
  	            end: /=([^\u2401\u0001=]+)/,
  	            returnEnd: true,
  	            returnBegin: false,
  	            className: 'attr'
  	          },
  	          {
  	            begin: /=/,
  	            end: /([\u2401\u0001])/,
  	            excludeEnd: true,
  	            excludeBegin: true,
  	            className: 'string'
  	          }
  	        ]
  	      }
  	    ],
  	    case_insensitive: true
  	  };
  	}

  	fix_1 = fix;
  	return fix_1;
  }

  /*
   Language: Flix
   Category: functional
   Author: Magnus Madsen <mmadsen@uwaterloo.ca>
   Website: https://flix.dev/
   */

  var flix_1;
  var hasRequiredFlix;

  function requireFlix () {
  	if (hasRequiredFlix) return flix_1;
  	hasRequiredFlix = 1;
  	/** @type LanguageFn */
  	function flix(hljs) {
  	  const CHAR = {
  	    className: 'string',
  	    begin: /'(.|\\[xXuU][a-zA-Z0-9]+)'/
  	  };

  	  const STRING = {
  	    className: 'string',
  	    variants: [
  	      {
  	        begin: '"',
  	        end: '"'
  	      }
  	    ]
  	  };

  	  const NAME = {
  	    className: 'title',
  	    relevance: 0,
  	    begin: /[^0-9\n\t "'(),.`{}\[\]:;][^\n\t "'(),.`{}\[\]:;]+|[^0-9\n\t "'(),.`{}\[\]:;=]/
  	  };

  	  const METHOD = {
  	    className: 'function',
  	    beginKeywords: 'def',
  	    end: /[:={\[(\n;]/,
  	    excludeEnd: true,
  	    contains: [ NAME ]
  	  };

  	  return {
  	    name: 'Flix',
  	    keywords: {
  	      keyword: [
  	        "case",
  	        "class",
  	        "def",
  	        "else",
  	        "enum",
  	        "if",
  	        "impl",
  	        "import",
  	        "in",
  	        "lat",
  	        "rel",
  	        "index",
  	        "let",
  	        "match",
  	        "namespace",
  	        "switch",
  	        "type",
  	        "yield",
  	        "with"
  	      ],
  	      literal: [
  	        "true",
  	        "false"
  	      ]
  	    },
  	    contains: [
  	      hljs.C_LINE_COMMENT_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE,
  	      CHAR,
  	      STRING,
  	      METHOD,
  	      hljs.C_NUMBER_MODE
  	    ]
  	  };
  	}

  	flix_1 = flix;
  	return flix_1;
  }

  /*
  Language: Fortran
  Author: Anthony Scemama <scemama@irsamc.ups-tlse.fr>
  Website: https://en.wikipedia.org/wiki/Fortran
  Category: scientific
  */

  var fortran_1;
  var hasRequiredFortran;

  function requireFortran () {
  	if (hasRequiredFortran) return fortran_1;
  	hasRequiredFortran = 1;
  	/** @type LanguageFn */
  	function fortran(hljs) {
  	  const regex = hljs.regex;
  	  const PARAMS = {
  	    className: 'params',
  	    begin: '\\(',
  	    end: '\\)'
  	  };

  	  const COMMENT = { variants: [
  	    hljs.COMMENT('!', '$', { relevance: 0 }),
  	    // allow FORTRAN 77 style comments
  	    hljs.COMMENT('^C[ ]', '$', { relevance: 0 }),
  	    hljs.COMMENT('^C$', '$', { relevance: 0 })
  	  ] };

  	  // regex in both fortran and irpf90 should match
  	  const OPTIONAL_NUMBER_SUFFIX = /(_[a-z_\d]+)?/;
  	  const OPTIONAL_NUMBER_EXP = /([de][+-]?\d+)?/;
  	  const NUMBER = {
  	    className: 'number',
  	    variants: [
  	      { begin: regex.concat(/\b\d+/, /\.(\d*)/, OPTIONAL_NUMBER_EXP, OPTIONAL_NUMBER_SUFFIX) },
  	      { begin: regex.concat(/\b\d+/, OPTIONAL_NUMBER_EXP, OPTIONAL_NUMBER_SUFFIX) },
  	      { begin: regex.concat(/\.\d+/, OPTIONAL_NUMBER_EXP, OPTIONAL_NUMBER_SUFFIX) }
  	    ],
  	    relevance: 0
  	  };

  	  const FUNCTION_DEF = {
  	    className: 'function',
  	    beginKeywords: 'subroutine function program',
  	    illegal: '[${=\\n]',
  	    contains: [
  	      hljs.UNDERSCORE_TITLE_MODE,
  	      PARAMS
  	    ]
  	  };

  	  const STRING = {
  	    className: 'string',
  	    relevance: 0,
  	    variants: [
  	      hljs.APOS_STRING_MODE,
  	      hljs.QUOTE_STRING_MODE
  	    ]
  	  };

  	  const KEYWORDS = [
  	    "kind",
  	    "do",
  	    "concurrent",
  	    "local",
  	    "shared",
  	    "while",
  	    "private",
  	    "call",
  	    "intrinsic",
  	    "where",
  	    "elsewhere",
  	    "type",
  	    "endtype",
  	    "endmodule",
  	    "endselect",
  	    "endinterface",
  	    "end",
  	    "enddo",
  	    "endif",
  	    "if",
  	    "forall",
  	    "endforall",
  	    "only",
  	    "contains",
  	    "default",
  	    "return",
  	    "stop",
  	    "then",
  	    "block",
  	    "endblock",
  	    "endassociate",
  	    "public",
  	    "subroutine|10",
  	    "function",
  	    "program",
  	    ".and.",
  	    ".or.",
  	    ".not.",
  	    ".le.",
  	    ".eq.",
  	    ".ge.",
  	    ".gt.",
  	    ".lt.",
  	    "goto",
  	    "save",
  	    "else",
  	    "use",
  	    "module",
  	    "select",
  	    "case",
  	    "access",
  	    "blank",
  	    "direct",
  	    "exist",
  	    "file",
  	    "fmt",
  	    "form",
  	    "formatted",
  	    "iostat",
  	    "name",
  	    "named",
  	    "nextrec",
  	    "number",
  	    "opened",
  	    "rec",
  	    "recl",
  	    "sequential",
  	    "status",
  	    "unformatted",
  	    "unit",
  	    "continue",
  	    "format",
  	    "pause",
  	    "cycle",
  	    "exit",
  	    "c_null_char",
  	    "c_alert",
  	    "c_backspace",
  	    "c_form_feed",
  	    "flush",
  	    "wait",
  	    "decimal",
  	    "round",
  	    "iomsg",
  	    "synchronous",
  	    "nopass",
  	    "non_overridable",
  	    "pass",
  	    "protected",
  	    "volatile",
  	    "abstract",
  	    "extends",
  	    "import",
  	    "non_intrinsic",
  	    "value",
  	    "deferred",
  	    "generic",
  	    "final",
  	    "enumerator",
  	    "class",
  	    "associate",
  	    "bind",
  	    "enum",
  	    "c_int",
  	    "c_short",
  	    "c_long",
  	    "c_long_long",
  	    "c_signed_char",
  	    "c_size_t",
  	    "c_int8_t",
  	    "c_int16_t",
  	    "c_int32_t",
  	    "c_int64_t",
  	    "c_int_least8_t",
  	    "c_int_least16_t",
  	    "c_int_least32_t",
  	    "c_int_least64_t",
  	    "c_int_fast8_t",
  	    "c_int_fast16_t",
  	    "c_int_fast32_t",
  	    "c_int_fast64_t",
  	    "c_intmax_t",
  	    "C_intptr_t",
  	    "c_float",
  	    "c_double",
  	    "c_long_double",
  	    "c_float_complex",
  	    "c_double_complex",
  	    "c_long_double_complex",
  	    "c_bool",
  	    "c_char",
  	    "c_null_ptr",
  	    "c_null_funptr",
  	    "c_new_line",
  	    "c_carriage_return",
  	    "c_horizontal_tab",
  	    "c_vertical_tab",
  	    "iso_c_binding",
  	    "c_loc",
  	    "c_funloc",
  	    "c_associated",
  	    "c_f_pointer",
  	    "c_ptr",
  	    "c_funptr",
  	    "iso_fortran_env",
  	    "character_storage_size",
  	    "error_unit",
  	    "file_storage_size",
  	    "input_unit",
  	    "iostat_end",
  	    "iostat_eor",
  	    "numeric_storage_size",
  	    "output_unit",
  	    "c_f_procpointer",
  	    "ieee_arithmetic",
  	    "ieee_support_underflow_control",
  	    "ieee_get_underflow_mode",
  	    "ieee_set_underflow_mode",
  	    "newunit",
  	    "contiguous",
  	    "recursive",
  	    "pad",
  	    "position",
  	    "action",
  	    "delim",
  	    "readwrite",
  	    "eor",
  	    "advance",
  	    "nml",
  	    "interface",
  	    "procedure",
  	    "namelist",
  	    "include",
  	    "sequence",
  	    "elemental",
  	    "pure",
  	    "impure",
  	    "integer",
  	    "real",
  	    "character",
  	    "complex",
  	    "logical",
  	    "codimension",
  	    "dimension",
  	    "allocatable|10",
  	    "parameter",
  	    "external",
  	    "implicit|10",
  	    "none",
  	    "double",
  	    "precision",
  	    "assign",
  	    "intent",
  	    "optional",
  	    "pointer",
  	    "target",
  	    "in",
  	    "out",
  	    "common",
  	    "equivalence",
  	    "data"
  	  ];
  	  const LITERALS = [
  	    ".False.",
  	    ".True."
  	  ];
  	  const BUILT_INS = [
  	    "alog",
  	    "alog10",
  	    "amax0",
  	    "amax1",
  	    "amin0",
  	    "amin1",
  	    "amod",
  	    "cabs",
  	    "ccos",
  	    "cexp",
  	    "clog",
  	    "csin",
  	    "csqrt",
  	    "dabs",
  	    "dacos",
  	    "dasin",
  	    "datan",
  	    "datan2",
  	    "dcos",
  	    "dcosh",
  	    "ddim",
  	    "dexp",
  	    "dint",
  	    "dlog",
  	    "dlog10",
  	    "dmax1",
  	    "dmin1",
  	    "dmod",
  	    "dnint",
  	    "dsign",
  	    "dsin",
  	    "dsinh",
  	    "dsqrt",
  	    "dtan",
  	    "dtanh",
  	    "float",
  	    "iabs",
  	    "idim",
  	    "idint",
  	    "idnint",
  	    "ifix",
  	    "isign",
  	    "max0",
  	    "max1",
  	    "min0",
  	    "min1",
  	    "sngl",
  	    "algama",
  	    "cdabs",
  	    "cdcos",
  	    "cdexp",
  	    "cdlog",
  	    "cdsin",
  	    "cdsqrt",
  	    "cqabs",
  	    "cqcos",
  	    "cqexp",
  	    "cqlog",
  	    "cqsin",
  	    "cqsqrt",
  	    "dcmplx",
  	    "dconjg",
  	    "derf",
  	    "derfc",
  	    "dfloat",
  	    "dgamma",
  	    "dimag",
  	    "dlgama",
  	    "iqint",
  	    "qabs",
  	    "qacos",
  	    "qasin",
  	    "qatan",
  	    "qatan2",
  	    "qcmplx",
  	    "qconjg",
  	    "qcos",
  	    "qcosh",
  	    "qdim",
  	    "qerf",
  	    "qerfc",
  	    "qexp",
  	    "qgamma",
  	    "qimag",
  	    "qlgama",
  	    "qlog",
  	    "qlog10",
  	    "qmax1",
  	    "qmin1",
  	    "qmod",
  	    "qnint",
  	    "qsign",
  	    "qsin",
  	    "qsinh",
  	    "qsqrt",
  	    "qtan",
  	    "qtanh",
  	    "abs",
  	    "acos",
  	    "aimag",
  	    "aint",
  	    "anint",
  	    "asin",
  	    "atan",
  	    "atan2",
  	    "char",
  	    "cmplx",
  	    "conjg",
  	    "cos",
  	    "cosh",
  	    "exp",
  	    "ichar",
  	    "index",
  	    "int",
  	    "log",
  	    "log10",
  	    "max",
  	    "min",
  	    "nint",
  	    "sign",
  	    "sin",
  	    "sinh",
  	    "sqrt",
  	    "tan",
  	    "tanh",
  	    "print",
  	    "write",
  	    "dim",
  	    "lge",
  	    "lgt",
  	    "lle",
  	    "llt",
  	    "mod",
  	    "nullify",
  	    "allocate",
  	    "deallocate",
  	    "adjustl",
  	    "adjustr",
  	    "all",
  	    "allocated",
  	    "any",
  	    "associated",
  	    "bit_size",
  	    "btest",
  	    "ceiling",
  	    "count",
  	    "cshift",
  	    "date_and_time",
  	    "digits",
  	    "dot_product",
  	    "eoshift",
  	    "epsilon",
  	    "exponent",
  	    "floor",
  	    "fraction",
  	    "huge",
  	    "iand",
  	    "ibclr",
  	    "ibits",
  	    "ibset",
  	    "ieor",
  	    "ior",
  	    "ishft",
  	    "ishftc",
  	    "lbound",
  	    "len_trim",
  	    "matmul",
  	    "maxexponent",
  	    "maxloc",
  	    "maxval",
  	    "merge",
  	    "minexponent",
  	    "minloc",
  	    "minval",
  	    "modulo",
  	    "mvbits",
  	    "nearest",
  	    "pack",
  	    "present",
  	    "product",
  	    "radix",
  	    "random_number",
  	    "random_seed",
  	    "range",
  	    "repeat",
  	    "reshape",
  	    "rrspacing",
  	    "scale",
  	    "scan",
  	    "selected_int_kind",
  	    "selected_real_kind",
  	    "set_exponent",
  	    "shape",
  	    "size",
  	    "spacing",
  	    "spread",
  	    "sum",
  	    "system_clock",
  	    "tiny",
  	    "transpose",
  	    "trim",
  	    "ubound",
  	    "unpack",
  	    "verify",
  	    "achar",
  	    "iachar",
  	    "transfer",
  	    "dble",
  	    "entry",
  	    "dprod",
  	    "cpu_time",
  	    "command_argument_count",
  	    "get_command",
  	    "get_command_argument",
  	    "get_environment_variable",
  	    "is_iostat_end",
  	    "ieee_arithmetic",
  	    "ieee_support_underflow_control",
  	    "ieee_get_underflow_mode",
  	    "ieee_set_underflow_mode",
  	    "is_iostat_eor",
  	    "move_alloc",
  	    "new_line",
  	    "selected_char_kind",
  	    "same_type_as",
  	    "extends_type_of",
  	    "acosh",
  	    "asinh",
  	    "atanh",
  	    "bessel_j0",
  	    "bessel_j1",
  	    "bessel_jn",
  	    "bessel_y0",
  	    "bessel_y1",
  	    "bessel_yn",
  	    "erf",
  	    "erfc",
  	    "erfc_scaled",
  	    "gamma",
  	    "log_gamma",
  	    "hypot",
  	    "norm2",
  	    "atomic_define",
  	    "atomic_ref",
  	    "execute_command_line",
  	    "leadz",
  	    "trailz",
  	    "storage_size",
  	    "merge_bits",
  	    "bge",
  	    "bgt",
  	    "ble",
  	    "blt",
  	    "dshiftl",
  	    "dshiftr",
  	    "findloc",
  	    "iall",
  	    "iany",
  	    "iparity",
  	    "image_index",
  	    "lcobound",
  	    "ucobound",
  	    "maskl",
  	    "maskr",
  	    "num_images",
  	    "parity",
  	    "popcnt",
  	    "poppar",
  	    "shifta",
  	    "shiftl",
  	    "shiftr",
  	    "this_image",
  	    "sync",
  	    "change",
  	    "team",
  	    "co_broadcast",
  	    "co_max",
  	    "co_min",
  	    "co_sum",
  	    "co_reduce"
  	  ];
  	  return {
  	    name: 'Fortran',
  	    case_insensitive: true,
  	    aliases: [
  	      'f90',
  	      'f95'
  	    ],
  	    keywords: {
  	      keyword: KEYWORDS,
  	      literal: LITERALS,
  	      built_in: BUILT_INS
  	    },
  	    illegal: /\/\*/,
  	    contains: [
  	      STRING,
  	      FUNCTION_DEF,
  	      // allow `C = value` for assignments so they aren't misdetected
  	      // as Fortran 77 style comments
  	      {
  	        begin: /^C\s*=(?!=)/,
  	        relevance: 0
  	      },
  	      COMMENT,
  	      NUMBER
  	    ]
  	  };
  	}

  	fortran_1 = fortran;
  	return fortran_1;
  }

  /**
   * @param {string} value
   * @returns {RegExp}
   * */

  var fsharp_1;
  var hasRequiredFsharp;

  function requireFsharp () {
  	if (hasRequiredFsharp) return fsharp_1;
  	hasRequiredFsharp = 1;
  	function escape(value) {
  	  return new RegExp(value.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&'), 'm');
  	}

  	/**
  	 * @param {RegExp | string } re
  	 * @returns {string}
  	 */
  	function source(re) {
  	  if (!re) return null;
  	  if (typeof re === "string") return re;

  	  return re.source;
  	}

  	/**
  	 * @param {RegExp | string } re
  	 * @returns {string}
  	 */
  	function lookahead(re) {
  	  return concat('(?=', re, ')');
  	}

  	/**
  	 * @param {...(RegExp | string) } args
  	 * @returns {string}
  	 */
  	function concat(...args) {
  	  const joined = args.map((x) => source(x)).join("");
  	  return joined;
  	}

  	/**
  	 * @param { Array<string | RegExp | Object> } args
  	 * @returns {object}
  	 */
  	function stripOptionsFromArgs(args) {
  	  const opts = args[args.length - 1];

  	  if (typeof opts === 'object' && opts.constructor === Object) {
  	    args.splice(args.length - 1, 1);
  	    return opts;
  	  } else {
  	    return {};
  	  }
  	}

  	/** @typedef { {capture?: boolean} } RegexEitherOptions */

  	/**
  	 * Any of the passed expresssions may match
  	 *
  	 * Creates a huge this | this | that | that match
  	 * @param {(RegExp | string)[] | [...(RegExp | string)[], RegexEitherOptions]} args
  	 * @returns {string}
  	 */
  	function either(...args) {
  	  /** @type { object & {capture?: boolean} }  */
  	  const opts = stripOptionsFromArgs(args);
  	  const joined = '('
  	    + (opts.capture ? "" : "?:")
  	    + args.map((x) => source(x)).join("|") + ")";
  	  return joined;
  	}

  	/*
  	Language: F#
  	Author: Jonas Follesø <jonas@follesoe.no>
  	Contributors: Troy Kershaw <hello@troykershaw.com>, Henrik Feldt <henrik@haf.se>, Melvyn Laïly <melvyn.laily@gmail.com>
  	Website: https://docs.microsoft.com/en-us/dotnet/fsharp/
  	Category: functional
  	*/

  	/** @type LanguageFn */
  	function fsharp(hljs) {
  	  const KEYWORDS = [
  	    "abstract",
  	    "and",
  	    "as",
  	    "assert",
  	    "base",
  	    "begin",
  	    "class",
  	    "default",
  	    "delegate",
  	    "do",
  	    "done",
  	    "downcast",
  	    "downto",
  	    "elif",
  	    "else",
  	    "end",
  	    "exception",
  	    "extern",
  	    // "false", // literal
  	    "finally",
  	    "fixed",
  	    "for",
  	    "fun",
  	    "function",
  	    "global",
  	    "if",
  	    "in",
  	    "inherit",
  	    "inline",
  	    "interface",
  	    "internal",
  	    "lazy",
  	    "let",
  	    "match",
  	    "member",
  	    "module",
  	    "mutable",
  	    "namespace",
  	    "new",
  	    // "not", // built_in
  	    // "null", // literal
  	    "of",
  	    "open",
  	    "or",
  	    "override",
  	    "private",
  	    "public",
  	    "rec",
  	    "return",
  	    "static",
  	    "struct",
  	    "then",
  	    "to",
  	    // "true", // literal
  	    "try",
  	    "type",
  	    "upcast",
  	    "use",
  	    "val",
  	    "void",
  	    "when",
  	    "while",
  	    "with",
  	    "yield"
  	  ];

  	  const BANG_KEYWORD_MODE = {
  	    // monad builder keywords (matches before non-bang keywords)
  	    scope: 'keyword',
  	    match: /\b(yield|return|let|do|match|use)!/
  	  };

  	  const PREPROCESSOR_KEYWORDS = [
  	    "if",
  	    "else",
  	    "endif",
  	    "line",
  	    "nowarn",
  	    "light",
  	    "r",
  	    "i",
  	    "I",
  	    "load",
  	    "time",
  	    "help",
  	    "quit"
  	  ];

  	  const LITERALS = [
  	    "true",
  	    "false",
  	    "null",
  	    "Some",
  	    "None",
  	    "Ok",
  	    "Error",
  	    "infinity",
  	    "infinityf",
  	    "nan",
  	    "nanf"
  	  ];

  	  const SPECIAL_IDENTIFIERS = [
  	    "__LINE__",
  	    "__SOURCE_DIRECTORY__",
  	    "__SOURCE_FILE__"
  	  ];

  	  // Since it's possible to re-bind/shadow names (e.g. let char = 'c'),
  	  // these builtin types should only be matched when a type name is expected.
  	  const KNOWN_TYPES = [
  	    // basic types
  	    "bool",
  	    "byte",
  	    "sbyte",
  	    "int8",
  	    "int16",
  	    "int32",
  	    "uint8",
  	    "uint16",
  	    "uint32",
  	    "int",
  	    "uint",
  	    "int64",
  	    "uint64",
  	    "nativeint",
  	    "unativeint",
  	    "decimal",
  	    "float",
  	    "double",
  	    "float32",
  	    "single",
  	    "char",
  	    "string",
  	    "unit",
  	    "bigint",
  	    // other native types or lowercase aliases
  	    "option",
  	    "voption",
  	    "list",
  	    "array",
  	    "seq",
  	    "byref",
  	    "exn",
  	    "inref",
  	    "nativeptr",
  	    "obj",
  	    "outref",
  	    "voidptr",
  	    // other important FSharp types
  	    "Result"
  	  ];

  	  const BUILTINS = [
  	    // Somewhat arbitrary list of builtin functions and values.
  	    // Most of them are declared in Microsoft.FSharp.Core
  	    // I tried to stay relevant by adding only the most idiomatic
  	    // and most used symbols that are not already declared as types.
  	    "not",
  	    "ref",
  	    "raise",
  	    "reraise",
  	    "dict",
  	    "readOnlyDict",
  	    "set",
  	    "get",
  	    "enum",
  	    "sizeof",
  	    "typeof",
  	    "typedefof",
  	    "nameof",
  	    "nullArg",
  	    "invalidArg",
  	    "invalidOp",
  	    "id",
  	    "fst",
  	    "snd",
  	    "ignore",
  	    "lock",
  	    "using",
  	    "box",
  	    "unbox",
  	    "tryUnbox",
  	    "printf",
  	    "printfn",
  	    "sprintf",
  	    "eprintf",
  	    "eprintfn",
  	    "fprintf",
  	    "fprintfn",
  	    "failwith",
  	    "failwithf"
  	  ];

  	  const ALL_KEYWORDS = {
  	    keyword: KEYWORDS,
  	    literal: LITERALS,
  	    built_in: BUILTINS,
  	    'variable.constant': SPECIAL_IDENTIFIERS
  	  };

  	  // (* potentially multi-line Meta Language style comment *)
  	  const ML_COMMENT =
  	    hljs.COMMENT(/\(\*(?!\))/, /\*\)/, {
  	      contains: ["self"]
  	    });
  	  // Either a multi-line (* Meta Language style comment *) or a single line // C style comment.
  	  const COMMENT = {
  	    variants: [
  	      ML_COMMENT,
  	      hljs.C_LINE_COMMENT_MODE,
  	    ]
  	  };

  	  // Most identifiers can contain apostrophes
  	  const IDENTIFIER_RE = /[a-zA-Z_](\w|')*/;

  	  const QUOTED_IDENTIFIER = {
  	    scope: 'variable',
  	    begin: /``/,
  	    end: /``/
  	  };

  	  // 'a or ^a where a can be a ``quoted identifier``
  	  const BEGIN_GENERIC_TYPE_SYMBOL_RE = /\B('|\^)/;
  	  const GENERIC_TYPE_SYMBOL = {
  	    scope: 'symbol',
  	    variants: [
  	      // the type name is a quoted identifier:
  	      { match: concat(BEGIN_GENERIC_TYPE_SYMBOL_RE, /``.*?``/) },
  	      // the type name is a normal identifier (we don't use IDENTIFIER_RE because there cannot be another apostrophe here):
  	      { match: concat(BEGIN_GENERIC_TYPE_SYMBOL_RE, hljs.UNDERSCORE_IDENT_RE) }
  	    ],
  	    relevance: 0
  	  };

  	  const makeOperatorMode = function({ includeEqual }) {
  	    // List or symbolic operator characters from the FSharp Spec 4.1, minus the dot, and with `?` added, used for nullable operators.
  	    let allOperatorChars;
  	    if (includeEqual)
  	      allOperatorChars = "!%&*+-/<=>@^|~?";
  	    else
  	      allOperatorChars = "!%&*+-/<>@^|~?";
  	    const OPERATOR_CHARS = Array.from(allOperatorChars);
  	    const OPERATOR_CHAR_RE = concat('[', ...OPERATOR_CHARS.map(escape), ']');
  	    // The lone dot operator is special. It cannot be redefined, and we don't want to highlight it. It can be used as part of a multi-chars operator though.
  	    const OPERATOR_CHAR_OR_DOT_RE = either(OPERATOR_CHAR_RE, /\./);
  	    // When a dot is present, it must be followed by another operator char:
  	    const OPERATOR_FIRST_CHAR_OF_MULTIPLE_RE = concat(OPERATOR_CHAR_OR_DOT_RE, lookahead(OPERATOR_CHAR_OR_DOT_RE));
  	    const SYMBOLIC_OPERATOR_RE = either(
  	      concat(OPERATOR_FIRST_CHAR_OF_MULTIPLE_RE, OPERATOR_CHAR_OR_DOT_RE, '*'), // Matches at least 2 chars operators
  	      concat(OPERATOR_CHAR_RE, '+'), // Matches at least one char operators
  	    );
  	    return {
  	      scope: 'operator',
  	      match: either(
  	        // symbolic operators:
  	        SYMBOLIC_OPERATOR_RE,
  	        // other symbolic keywords:
  	        // Type casting and conversion operators:
  	        /:\?>/,
  	        /:\?/,
  	        /:>/,
  	        /:=/, // Reference cell assignment
  	        /::?/, // : or ::
  	        /\$/), // A single $ can be used as an operator
  	      relevance: 0
  	    };
  	  };

  	  const OPERATOR = makeOperatorMode({ includeEqual: true });
  	  // This variant is used when matching '=' should end a parent mode:
  	  const OPERATOR_WITHOUT_EQUAL = makeOperatorMode({ includeEqual: false });

  	  const makeTypeAnnotationMode = function(prefix, prefixScope) {
  	    return {
  	      begin: concat( // a type annotation is a
  	        prefix,            // should be a colon or the 'of' keyword
  	        lookahead(   // that has to be followed by
  	          concat(
  	            /\s*/,         // optional space
  	            either(  // then either of:
  	              /\w/,        // word
  	              /'/,         // generic type name
  	              /\^/,        // generic type name
  	              /#/,         // flexible type name
  	              /``/,        // quoted type name
  	              /\(/,        // parens type expression
  	              /{\|/,       // anonymous type annotation
  	      )))),
  	      beginScope: prefixScope,
  	      // BUG: because ending with \n is necessary for some cases, multi-line type annotations are not properly supported.
  	      // Examples where \n is required at the end:
  	      // - abstract member definitions in classes: abstract Property : int * string
  	      // - return type annotations: let f f' = f' () : returnTypeAnnotation
  	      // - record fields definitions: { A : int \n B : string }
  	      end: lookahead(
  	        either(
  	          /\n/,
  	          /=/)),
  	      relevance: 0,
  	      // we need the known types, and we need the type constraint keywords and literals. e.g.: when 'a : null
  	      keywords: hljs.inherit(ALL_KEYWORDS, { type: KNOWN_TYPES }),
  	      contains: [
  	        COMMENT,
  	        GENERIC_TYPE_SYMBOL,
  	        hljs.inherit(QUOTED_IDENTIFIER, { scope: null }), // match to avoid strange patterns inside that may break the parsing
  	        OPERATOR_WITHOUT_EQUAL
  	      ]
  	    };
  	  };

  	  const TYPE_ANNOTATION = makeTypeAnnotationMode(/:/, 'operator');
  	  const DISCRIMINATED_UNION_TYPE_ANNOTATION = makeTypeAnnotationMode(/\bof\b/, 'keyword');

  	  // type MyType<'a> = ...
  	  const TYPE_DECLARATION = {
  	    begin: [
  	      /(^|\s+)/, // prevents matching the following: `match s.stype with`
  	      /type/,
  	      /\s+/,
  	      IDENTIFIER_RE
  	    ],
  	    beginScope: {
  	      2: 'keyword',
  	      4: 'title.class'
  	    },
  	    end: lookahead(/\(|=|$/),
  	    keywords: ALL_KEYWORDS, // match keywords in type constraints. e.g.: when 'a : null
  	    contains: [
  	      COMMENT,
  	      hljs.inherit(QUOTED_IDENTIFIER, { scope: null }), // match to avoid strange patterns inside that may break the parsing
  	      GENERIC_TYPE_SYMBOL,
  	      {
  	        // For visual consistency, highlight type brackets as operators.
  	        scope: 'operator',
  	        match: /<|>/
  	      },
  	      TYPE_ANNOTATION // generic types can have constraints, which are type annotations. e.g. type MyType<'T when 'T : delegate<obj * string>> =
  	    ]
  	  };

  	  const COMPUTATION_EXPRESSION = {
  	    // computation expressions:
  	    scope: 'computation-expression',
  	    // BUG: might conflict with record deconstruction. e.g. let f { Name = name } = name // will highlight f
  	    match: /\b[_a-z]\w*(?=\s*\{)/
  	  };

  	  const PREPROCESSOR = {
  	    // preprocessor directives and fsi commands:
  	    begin: [
  	      /^\s*/,
  	      concat(/#/, either(...PREPROCESSOR_KEYWORDS)),
  	      /\b/
  	    ],
  	    beginScope: { 2: 'meta' },
  	    end: lookahead(/\s|$/)
  	  };

  	  // TODO: this definition is missing support for type suffixes and octal notation.
  	  // BUG: range operator without any space is wrongly interpreted as a single number (e.g. 1..10 )
  	  const NUMBER = {
  	    variants: [
  	      hljs.BINARY_NUMBER_MODE,
  	      hljs.C_NUMBER_MODE
  	    ]
  	  };

  	  // All the following string definitions are potentially multi-line.
  	  // BUG: these definitions are missing support for byte strings (suffixed with B)

  	  // "..."
  	  const QUOTED_STRING = {
  	    scope: 'string',
  	    begin: /"/,
  	    end: /"/,
  	    contains: [
  	      hljs.BACKSLASH_ESCAPE
  	    ]
  	  };
  	  // @"..."
  	  const VERBATIM_STRING = {
  	    scope: 'string',
  	    begin: /@"/,
  	    end: /"/,
  	    contains: [
  	      {
  	        match: /""/ // escaped "
  	      },
  	      hljs.BACKSLASH_ESCAPE
  	    ]
  	  };
  	  // """..."""
  	  const TRIPLE_QUOTED_STRING = {
  	    scope: 'string',
  	    begin: /"""/,
  	    end: /"""/,
  	    relevance: 2
  	  };
  	  const SUBST = {
  	    scope: 'subst',
  	    begin: /\{/,
  	    end: /\}/,
  	    keywords: ALL_KEYWORDS
  	  };
  	  // $"...{1+1}..."
  	  const INTERPOLATED_STRING = {
  	    scope: 'string',
  	    begin: /\$"/,
  	    end: /"/,
  	    contains: [
  	      {
  	        match: /\{\{/ // escaped {
  	      },
  	      {
  	        match: /\}\}/ // escaped }
  	      },
  	      hljs.BACKSLASH_ESCAPE,
  	      SUBST
  	    ]
  	  };
  	  // $@"...{1+1}..."
  	  const INTERPOLATED_VERBATIM_STRING = {
  	    scope: 'string',
  	    begin: /(\$@|@\$)"/,
  	    end: /"/,
  	    contains: [
  	      {
  	        match: /\{\{/ // escaped {
  	      },
  	      {
  	        match: /\}\}/ // escaped }
  	      },
  	      {
  	        match: /""/
  	      },
  	      hljs.BACKSLASH_ESCAPE,
  	      SUBST
  	    ]
  	  };
  	  // $"""...{1+1}..."""
  	  const INTERPOLATED_TRIPLE_QUOTED_STRING = {
  	    scope: 'string',
  	    begin: /\$"""/,
  	    end: /"""/,
  	    contains: [
  	      {
  	        match: /\{\{/ // escaped {
  	      },
  	      {
  	        match: /\}\}/ // escaped }
  	      },
  	      SUBST
  	    ],
  	    relevance: 2
  	  };
  	  // '.'
  	  const CHAR_LITERAL = {
  	    scope: 'string',
  	    match: concat(
  	      /'/,
  	      either(
  	        /[^\\']/, // either a single non escaped char...
  	        /\\(?:.|\d{3}|x[a-fA-F\d]{2}|u[a-fA-F\d]{4}|U[a-fA-F\d]{8})/ // ...or an escape sequence
  	      ),
  	      /'/
  	    )
  	  };
  	  // F# allows a lot of things inside string placeholders.
  	  // Things that don't currently seem allowed by the compiler: types definition, attributes usage.
  	  // (Strictly speaking, some of the followings are only allowed inside triple quoted interpolated strings...)
  	  SUBST.contains = [
  	    INTERPOLATED_VERBATIM_STRING,
  	    INTERPOLATED_STRING,
  	    VERBATIM_STRING,
  	    QUOTED_STRING,
  	    CHAR_LITERAL,
  	    BANG_KEYWORD_MODE,
  	    COMMENT,
  	    QUOTED_IDENTIFIER,
  	    TYPE_ANNOTATION,
  	    COMPUTATION_EXPRESSION,
  	    PREPROCESSOR,
  	    NUMBER,
  	    GENERIC_TYPE_SYMBOL,
  	    OPERATOR
  	  ];
  	  const STRING = {
  	    variants: [
  	      INTERPOLATED_TRIPLE_QUOTED_STRING,
  	      INTERPOLATED_VERBATIM_STRING,
  	      INTERPOLATED_STRING,
  	      TRIPLE_QUOTED_STRING,
  	      VERBATIM_STRING,
  	      QUOTED_STRING,
  	      CHAR_LITERAL
  	    ]
  	  };

  	  return {
  	    name: 'F#',
  	    aliases: [
  	      'fs',
  	      'f#'
  	    ],
  	    keywords: ALL_KEYWORDS,
  	    illegal: /\/\*/,
  	    classNameAliases: {
  	      'computation-expression': 'keyword'
  	    },
  	    contains: [
  	      BANG_KEYWORD_MODE,
  	      STRING,
  	      COMMENT,
  	      QUOTED_IDENTIFIER,
  	      TYPE_DECLARATION,
  	      {
  	        // e.g. [<Attributes("")>] or [<``module``: MyCustomAttributeThatWorksOnModules>]
  	        // or [<Sealed; NoEquality; NoComparison; CompiledName("FSharpAsync`1")>]
  	        scope: 'meta',
  	        begin: /\[</,
  	        end: />\]/,
  	        relevance: 2,
  	        contains: [
  	          QUOTED_IDENTIFIER,
  	          // can contain any constant value
  	          TRIPLE_QUOTED_STRING,
  	          VERBATIM_STRING,
  	          QUOTED_STRING,
  	          CHAR_LITERAL,
  	          NUMBER
  	        ]
  	      },
  	      DISCRIMINATED_UNION_TYPE_ANNOTATION,
  	      TYPE_ANNOTATION,
  	      COMPUTATION_EXPRESSION,
  	      PREPROCESSOR,
  	      NUMBER,
  	      GENERIC_TYPE_SYMBOL,
  	      OPERATOR
  	    ]
  	  };
  	}

  	fsharp_1 = fsharp;
  	return fsharp_1;
  }

  /*
   Language: GAMS
   Author: Stefan Bechert <stefan.bechert@gmx.net>
   Contributors: Oleg Efimov <efimovov@gmail.com>, Mikko Kouhia <mikko.kouhia@iki.fi>
   Description: The General Algebraic Modeling System language
   Website: https://www.gams.com
   Category: scientific
   */

  var gams_1;
  var hasRequiredGams;

  function requireGams () {
  	if (hasRequiredGams) return gams_1;
  	hasRequiredGams = 1;
  	/** @type LanguageFn */
  	function gams(hljs) {
  	  const regex = hljs.regex;
  	  const KEYWORDS = {
  	    keyword:
  	      'abort acronym acronyms alias all and assign binary card diag display '
  	      + 'else eq file files for free ge gt if integer le loop lt maximizing '
  	      + 'minimizing model models ne negative no not option options or ord '
  	      + 'positive prod put putpage puttl repeat sameas semicont semiint smax '
  	      + 'smin solve sos1 sos2 sum system table then until using while xor yes',
  	    literal:
  	      'eps inf na',
  	    built_in:
  	      'abs arccos arcsin arctan arctan2 Beta betaReg binomial ceil centropy '
  	      + 'cos cosh cvPower div div0 eDist entropy errorf execSeed exp fact '
  	      + 'floor frac gamma gammaReg log logBeta logGamma log10 log2 mapVal max '
  	      + 'min mod ncpCM ncpF ncpVUpow ncpVUsin normal pi poly power '
  	      + 'randBinomial randLinear randTriangle round rPower sigmoid sign '
  	      + 'signPower sin sinh slexp sllog10 slrec sqexp sqlog10 sqr sqrec sqrt '
  	      + 'tan tanh trunc uniform uniformInt vcPower bool_and bool_eqv bool_imp '
  	      + 'bool_not bool_or bool_xor ifThen rel_eq rel_ge rel_gt rel_le rel_lt '
  	      + 'rel_ne gday gdow ghour gleap gmillisec gminute gmonth gsecond gyear '
  	      + 'jdate jnow jstart jtime errorLevel execError gamsRelease gamsVersion '
  	      + 'handleCollect handleDelete handleStatus handleSubmit heapFree '
  	      + 'heapLimit heapSize jobHandle jobKill jobStatus jobTerminate '
  	      + 'licenseLevel licenseStatus maxExecError sleep timeClose timeComp '
  	      + 'timeElapsed timeExec timeStart'
  	  };
  	  const PARAMS = {
  	    className: 'params',
  	    begin: /\(/,
  	    end: /\)/,
  	    excludeBegin: true,
  	    excludeEnd: true
  	  };
  	  const SYMBOLS = {
  	    className: 'symbol',
  	    variants: [
  	      { begin: /=[lgenxc]=/ },
  	      { begin: /\$/ }
  	    ]
  	  };
  	  const QSTR = { // One-line quoted comment string
  	    className: 'comment',
  	    variants: [
  	      {
  	        begin: '\'',
  	        end: '\''
  	      },
  	      {
  	        begin: '"',
  	        end: '"'
  	      }
  	    ],
  	    illegal: '\\n',
  	    contains: [ hljs.BACKSLASH_ESCAPE ]
  	  };
  	  const ASSIGNMENT = {
  	    begin: '/',
  	    end: '/',
  	    keywords: KEYWORDS,
  	    contains: [
  	      QSTR,
  	      hljs.C_LINE_COMMENT_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE,
  	      hljs.QUOTE_STRING_MODE,
  	      hljs.APOS_STRING_MODE,
  	      hljs.C_NUMBER_MODE
  	    ]
  	  };
  	  const COMMENT_WORD = /[a-z0-9&#*=?@\\><:,()$[\]_.{}!+%^-]+/;
  	  const DESCTEXT = { // Parameter/set/variable description text
  	    begin: /[a-z][a-z0-9_]*(\([a-z0-9_, ]*\))?[ \t]+/,
  	    excludeBegin: true,
  	    end: '$',
  	    endsWithParent: true,
  	    contains: [
  	      QSTR,
  	      ASSIGNMENT,
  	      {
  	        className: 'comment',
  	        // one comment word, then possibly more
  	        begin: regex.concat(
  	          COMMENT_WORD,
  	          // [ ] because \s would be too broad (matching newlines)
  	          regex.anyNumberOfTimes(regex.concat(/[ ]+/, COMMENT_WORD))
  	        ),
  	        relevance: 0
  	      }
  	    ]
  	  };

  	  return {
  	    name: 'GAMS',
  	    aliases: [ 'gms' ],
  	    case_insensitive: true,
  	    keywords: KEYWORDS,
  	    contains: [
  	      hljs.COMMENT(/^\$ontext/, /^\$offtext/),
  	      {
  	        className: 'meta',
  	        begin: '^\\$[a-z0-9]+',
  	        end: '$',
  	        returnBegin: true,
  	        contains: [
  	          {
  	            className: 'keyword',
  	            begin: '^\\$[a-z0-9]+'
  	          }
  	        ]
  	      },
  	      hljs.COMMENT('^\\*', '$'),
  	      hljs.C_LINE_COMMENT_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE,
  	      hljs.QUOTE_STRING_MODE,
  	      hljs.APOS_STRING_MODE,
  	      // Declarations
  	      {
  	        beginKeywords:
  	          'set sets parameter parameters variable variables '
  	          + 'scalar scalars equation equations',
  	        end: ';',
  	        contains: [
  	          hljs.COMMENT('^\\*', '$'),
  	          hljs.C_LINE_COMMENT_MODE,
  	          hljs.C_BLOCK_COMMENT_MODE,
  	          hljs.QUOTE_STRING_MODE,
  	          hljs.APOS_STRING_MODE,
  	          ASSIGNMENT,
  	          DESCTEXT
  	        ]
  	      },
  	      { // table environment
  	        beginKeywords: 'table',
  	        end: ';',
  	        returnBegin: true,
  	        contains: [
  	          { // table header row
  	            beginKeywords: 'table',
  	            end: '$',
  	            contains: [ DESCTEXT ]
  	          },
  	          hljs.COMMENT('^\\*', '$'),
  	          hljs.C_LINE_COMMENT_MODE,
  	          hljs.C_BLOCK_COMMENT_MODE,
  	          hljs.QUOTE_STRING_MODE,
  	          hljs.APOS_STRING_MODE,
  	          hljs.C_NUMBER_MODE
  	          // Table does not contain DESCTEXT or ASSIGNMENT
  	        ]
  	      },
  	      // Function definitions
  	      {
  	        className: 'function',
  	        begin: /^[a-z][a-z0-9_,\-+' ()$]+\.{2}/,
  	        returnBegin: true,
  	        contains: [
  	          { // Function title
  	            className: 'title',
  	            begin: /^[a-z0-9_]+/
  	          },
  	          PARAMS,
  	          SYMBOLS
  	        ]
  	      },
  	      hljs.C_NUMBER_MODE,
  	      SYMBOLS
  	    ]
  	  };
  	}

  	gams_1 = gams;
  	return gams_1;
  }

  /*
  Language: GAUSS
  Author: Matt Evans <matt@aptech.com>
  Description: GAUSS Mathematical and Statistical language
  Website: https://www.aptech.com
  Category: scientific
  */

  var gauss_1;
  var hasRequiredGauss;

  function requireGauss () {
  	if (hasRequiredGauss) return gauss_1;
  	hasRequiredGauss = 1;
  	function gauss(hljs) {
  	  const KEYWORDS = {
  	    keyword: 'bool break call callexe checkinterrupt clear clearg closeall cls comlog compile '
  	              + 'continue create debug declare delete disable dlibrary dllcall do dos ed edit else '
  	              + 'elseif enable end endfor endif endp endo errorlog errorlogat expr external fn '
  	              + 'for format goto gosub graph if keyword let lib library line load loadarray loadexe '
  	              + 'loadf loadk loadm loadp loads loadx local locate loopnextindex lprint lpwidth lshow '
  	              + 'matrix msym ndpclex new open output outwidth plot plotsym pop prcsn print '
  	              + 'printdos proc push retp return rndcon rndmod rndmult rndseed run save saveall screen '
  	              + 'scroll setarray show sparse stop string struct system trace trap threadfor '
  	              + 'threadendfor threadbegin threadjoin threadstat threadend until use while winprint '
  	              + 'ne ge le gt lt and xor or not eq eqv',
  	    built_in: 'abs acf aconcat aeye amax amean AmericanBinomCall AmericanBinomCall_Greeks AmericanBinomCall_ImpVol '
  	              + 'AmericanBinomPut AmericanBinomPut_Greeks AmericanBinomPut_ImpVol AmericanBSCall AmericanBSCall_Greeks '
  	              + 'AmericanBSCall_ImpVol AmericanBSPut AmericanBSPut_Greeks AmericanBSPut_ImpVol amin amult annotationGetDefaults '
  	              + 'annotationSetBkd annotationSetFont annotationSetLineColor annotationSetLineStyle annotationSetLineThickness '
  	              + 'annualTradingDays arccos arcsin areshape arrayalloc arrayindex arrayinit arraytomat asciiload asclabel astd '
  	              + 'astds asum atan atan2 atranspose axmargin balance band bandchol bandcholsol bandltsol bandrv bandsolpd bar '
  	              + 'base10 begwind besselj bessely beta box boxcox cdfBeta cdfBetaInv cdfBinomial cdfBinomialInv cdfBvn cdfBvn2 '
  	              + 'cdfBvn2e cdfCauchy cdfCauchyInv cdfChic cdfChii cdfChinc cdfChincInv cdfExp cdfExpInv cdfFc cdfFnc cdfFncInv '
  	              + 'cdfGam cdfGenPareto cdfHyperGeo cdfLaplace cdfLaplaceInv cdfLogistic cdfLogisticInv cdfmControlCreate cdfMvn '
  	              + 'cdfMvn2e cdfMvnce cdfMvne cdfMvt2e cdfMvtce cdfMvte cdfN cdfN2 cdfNc cdfNegBinomial cdfNegBinomialInv cdfNi '
  	              + 'cdfPoisson cdfPoissonInv cdfRayleigh cdfRayleighInv cdfTc cdfTci cdfTnc cdfTvn cdfWeibull cdfWeibullInv cdir '
  	              + 'ceil ChangeDir chdir chiBarSquare chol choldn cholsol cholup chrs close code cols colsf combinate combinated '
  	              + 'complex con cond conj cons ConScore contour conv convertsatostr convertstrtosa corrm corrms corrvc corrx corrxs '
  	              + 'cos cosh counts countwts crossprd crout croutp csrcol csrlin csvReadM csvReadSA cumprodc cumsumc curve cvtos '
  	              + 'datacreate datacreatecomplex datalist dataload dataloop dataopen datasave date datestr datestring datestrymd '
  	              + 'dayinyr dayofweek dbAddDatabase dbClose dbCommit dbCreateQuery dbExecQuery dbGetConnectOptions dbGetDatabaseName '
  	              + 'dbGetDriverName dbGetDrivers dbGetHostName dbGetLastErrorNum dbGetLastErrorText dbGetNumericalPrecPolicy '
  	              + 'dbGetPassword dbGetPort dbGetTableHeaders dbGetTables dbGetUserName dbHasFeature dbIsDriverAvailable dbIsOpen '
  	              + 'dbIsOpenError dbOpen dbQueryBindValue dbQueryClear dbQueryCols dbQueryExecPrepared dbQueryFetchAllM dbQueryFetchAllSA '
  	              + 'dbQueryFetchOneM dbQueryFetchOneSA dbQueryFinish dbQueryGetBoundValue dbQueryGetBoundValues dbQueryGetField '
  	              + 'dbQueryGetLastErrorNum dbQueryGetLastErrorText dbQueryGetLastInsertID dbQueryGetLastQuery dbQueryGetPosition '
  	              + 'dbQueryIsActive dbQueryIsForwardOnly dbQueryIsNull dbQueryIsSelect dbQueryIsValid dbQueryPrepare dbQueryRows '
  	              + 'dbQuerySeek dbQuerySeekFirst dbQuerySeekLast dbQuerySeekNext dbQuerySeekPrevious dbQuerySetForwardOnly '
  	              + 'dbRemoveDatabase dbRollback dbSetConnectOptions dbSetDatabaseName dbSetHostName dbSetNumericalPrecPolicy '
  	              + 'dbSetPort dbSetUserName dbTransaction DeleteFile delif delrows denseToSp denseToSpRE denToZero design det detl '
  	              + 'dfft dffti diag diagrv digamma doswin DOSWinCloseall DOSWinOpen dotfeq dotfeqmt dotfge dotfgemt dotfgt dotfgtmt '
  	              + 'dotfle dotflemt dotflt dotfltmt dotfne dotfnemt draw drop dsCreate dstat dstatmt dstatmtControlCreate dtdate dtday '
  	              + 'dttime dttodtv dttostr dttoutc dtvnormal dtvtodt dtvtoutc dummy dummybr dummydn eig eigh eighv eigv elapsedTradingDays '
  	              + 'endwind envget eof eqSolve eqSolvemt eqSolvemtControlCreate eqSolvemtOutCreate eqSolveset erf erfc erfccplx erfcplx error '
  	              + 'etdays ethsec etstr EuropeanBinomCall EuropeanBinomCall_Greeks EuropeanBinomCall_ImpVol EuropeanBinomPut '
  	              + 'EuropeanBinomPut_Greeks EuropeanBinomPut_ImpVol EuropeanBSCall EuropeanBSCall_Greeks EuropeanBSCall_ImpVol '
  	              + 'EuropeanBSPut EuropeanBSPut_Greeks EuropeanBSPut_ImpVol exctsmpl exec execbg exp extern eye fcheckerr fclearerr feq '
  	              + 'feqmt fflush fft ffti fftm fftmi fftn fge fgemt fgets fgetsa fgetsat fgetst fgt fgtmt fileinfo filesa fle flemt '
  	              + 'floor flt fltmt fmod fne fnemt fonts fopen formatcv formatnv fputs fputst fseek fstrerror ftell ftocv ftos ftostrC '
  	              + 'gamma gammacplx gammaii gausset gdaAppend gdaCreate gdaDStat gdaDStatMat gdaGetIndex gdaGetName gdaGetNames gdaGetOrders '
  	              + 'gdaGetType gdaGetTypes gdaGetVarInfo gdaIsCplx gdaLoad gdaPack gdaRead gdaReadByIndex gdaReadSome gdaReadSparse '
  	              + 'gdaReadStruct gdaReportVarInfo gdaSave gdaUpdate gdaUpdateAndPack gdaVars gdaWrite gdaWrite32 gdaWriteSome getarray '
  	              + 'getdims getf getGAUSShome getmatrix getmatrix4D getname getnamef getNextTradingDay getNextWeekDay getnr getorders '
  	              + 'getpath getPreviousTradingDay getPreviousWeekDay getRow getscalar3D getscalar4D getTrRow getwind glm gradcplx gradMT '
  	              + 'gradMTm gradMTT gradMTTm gradp graphprt graphset hasimag header headermt hess hessMT hessMTg hessMTgw hessMTm '
  	              + 'hessMTmw hessMTT hessMTTg hessMTTgw hessMTTm hessMTw hessp hist histf histp hsec imag indcv indexcat indices indices2 '
  	              + 'indicesf indicesfn indnv indsav integrate1d integrateControlCreate intgrat2 intgrat3 inthp1 inthp2 inthp3 inthp4 '
  	              + 'inthpControlCreate intquad1 intquad2 intquad3 intrleav intrleavsa intrsect intsimp inv invpd invswp iscplx iscplxf '
  	              + 'isden isinfnanmiss ismiss key keyav keyw lag lag1 lagn lapEighb lapEighi lapEighvb lapEighvi lapgEig lapgEigh lapgEighv '
  	              + 'lapgEigv lapgSchur lapgSvdcst lapgSvds lapgSvdst lapSvdcusv lapSvds lapSvdusv ldlp ldlsol linSolve listwise ln lncdfbvn '
  	              + 'lncdfbvn2 lncdfmvn lncdfn lncdfn2 lncdfnc lnfact lngammacplx lnpdfmvn lnpdfmvt lnpdfn lnpdft loadd loadstruct loadwind '
  	              + 'loess loessmt loessmtControlCreate log loglog logx logy lower lowmat lowmat1 ltrisol lu lusol machEpsilon make makevars '
  	              + 'makewind margin matalloc matinit mattoarray maxbytes maxc maxindc maxv maxvec mbesselei mbesselei0 mbesselei1 mbesseli '
  	              + 'mbesseli0 mbesseli1 meanc median mergeby mergevar minc minindc minv miss missex missrv moment momentd movingave '
  	              + 'movingaveExpwgt movingaveWgt nextindex nextn nextnevn nextwind ntos null null1 numCombinations ols olsmt olsmtControlCreate '
  	              + 'olsqr olsqr2 olsqrmt ones optn optnevn orth outtyp pacf packedToSp packr parse pause pdfCauchy pdfChi pdfExp pdfGenPareto '
  	              + 'pdfHyperGeo pdfLaplace pdfLogistic pdfn pdfPoisson pdfRayleigh pdfWeibull pi pinv pinvmt plotAddArrow plotAddBar plotAddBox '
  	              + 'plotAddHist plotAddHistF plotAddHistP plotAddPolar plotAddScatter plotAddShape plotAddTextbox plotAddTS plotAddXY plotArea '
  	              + 'plotBar plotBox plotClearLayout plotContour plotCustomLayout plotGetDefaults plotHist plotHistF plotHistP plotLayout '
  	              + 'plotLogLog plotLogX plotLogY plotOpenWindow plotPolar plotSave plotScatter plotSetAxesPen plotSetBar plotSetBarFill '
  	              + 'plotSetBarStacked plotSetBkdColor plotSetFill plotSetGrid plotSetLegend plotSetLineColor plotSetLineStyle plotSetLineSymbol '
  	              + 'plotSetLineThickness plotSetNewWindow plotSetTitle plotSetWhichYAxis plotSetXAxisShow plotSetXLabel plotSetXRange '
  	              + 'plotSetXTicInterval plotSetXTicLabel plotSetYAxisShow plotSetYLabel plotSetYRange plotSetZAxisShow plotSetZLabel '
  	              + 'plotSurface plotTS plotXY polar polychar polyeval polygamma polyint polymake polymat polymroot polymult polyroot '
  	              + 'pqgwin previousindex princomp printfm printfmt prodc psi putarray putf putvals pvCreate pvGetIndex pvGetParNames '
  	              + 'pvGetParVector pvLength pvList pvPack pvPacki pvPackm pvPackmi pvPacks pvPacksi pvPacksm pvPacksmi pvPutParVector '
  	              + 'pvTest pvUnpack QNewton QNewtonmt QNewtonmtControlCreate QNewtonmtOutCreate QNewtonSet QProg QProgmt QProgmtInCreate '
  	              + 'qqr qqre qqrep qr qre qrep qrsol qrtsol qtyr qtyre qtyrep quantile quantiled qyr qyre qyrep qz rank rankindx readr '
  	              + 'real reclassify reclassifyCuts recode recserar recsercp recserrc rerun rescale reshape rets rev rfft rffti rfftip rfftn '
  	              + 'rfftnp rfftp rndBernoulli rndBeta rndBinomial rndCauchy rndChiSquare rndCon rndCreateState rndExp rndGamma rndGeo rndGumbel '
  	              + 'rndHyperGeo rndi rndKMbeta rndKMgam rndKMi rndKMn rndKMnb rndKMp rndKMu rndKMvm rndLaplace rndLCbeta rndLCgam rndLCi rndLCn '
  	              + 'rndLCnb rndLCp rndLCu rndLCvm rndLogNorm rndMTu rndMVn rndMVt rndn rndnb rndNegBinomial rndp rndPoisson rndRayleigh '
  	              + 'rndStateSkip rndu rndvm rndWeibull rndWishart rotater round rows rowsf rref sampleData satostrC saved saveStruct savewind '
  	              + 'scale scale3d scalerr scalinfnanmiss scalmiss schtoc schur searchsourcepath seekr select selif seqa seqm setdif setdifsa '
  	              + 'setvars setvwrmode setwind shell shiftr sin singleindex sinh sleep solpd sortc sortcc sortd sorthc sorthcc sortind '
  	              + 'sortindc sortmc sortr sortrc spBiconjGradSol spChol spConjGradSol spCreate spDenseSubmat spDiagRvMat spEigv spEye spLDL '
  	              + 'spline spLU spNumNZE spOnes spreadSheetReadM spreadSheetReadSA spreadSheetWrite spScale spSubmat spToDense spTrTDense '
  	              + 'spTScalar spZeros sqpSolve sqpSolveMT sqpSolveMTControlCreate sqpSolveMTlagrangeCreate sqpSolveMToutCreate sqpSolveSet '
  	              + 'sqrt statements stdc stdsc stocv stof strcombine strindx strlen strput strrindx strsect strsplit strsplitPad strtodt '
  	              + 'strtof strtofcplx strtriml strtrimr strtrunc strtruncl strtruncpad strtruncr submat subscat substute subvec sumc sumr '
  	              + 'surface svd svd1 svd2 svdcusv svds svdusv sysstate tab tan tanh tempname '
  	              + 'time timedt timestr timeutc title tkf2eps tkf2ps tocart todaydt toeplitz token topolar trapchk '
  	              + 'trigamma trimr trunc type typecv typef union unionsa uniqindx uniqindxsa unique uniquesa upmat upmat1 upper utctodt '
  	              + 'utctodtv utrisol vals varCovMS varCovXS varget vargetl varmall varmares varput varputl vartypef vcm vcms vcx vcxs '
  	              + 'vec vech vecr vector vget view viewxyz vlist vnamecv volume vput vread vtypecv wait waitc walkindex where window '
  	              + 'writer xlabel xlsGetSheetCount xlsGetSheetSize xlsGetSheetTypes xlsMakeRange xlsReadM xlsReadSA xlsWrite xlsWriteM '
  	              + 'xlsWriteSA xpnd xtics xy xyz ylabel ytics zeros zeta zlabel ztics cdfEmpirical dot h5create h5open h5read h5readAttribute '
  	              + 'h5write h5writeAttribute ldl plotAddErrorBar plotAddSurface plotCDFEmpirical plotSetColormap plotSetContourLabels '
  	              + 'plotSetLegendFont plotSetTextInterpreter plotSetXTicCount plotSetYTicCount plotSetZLevels powerm strjoin sylvester '
  	              + 'strtrim',
  	    literal: 'DB_AFTER_LAST_ROW DB_ALL_TABLES DB_BATCH_OPERATIONS DB_BEFORE_FIRST_ROW DB_BLOB DB_EVENT_NOTIFICATIONS '
  	             + 'DB_FINISH_QUERY DB_HIGH_PRECISION DB_LAST_INSERT_ID DB_LOW_PRECISION_DOUBLE DB_LOW_PRECISION_INT32 '
  	             + 'DB_LOW_PRECISION_INT64 DB_LOW_PRECISION_NUMBERS DB_MULTIPLE_RESULT_SETS DB_NAMED_PLACEHOLDERS '
  	             + 'DB_POSITIONAL_PLACEHOLDERS DB_PREPARED_QUERIES DB_QUERY_SIZE DB_SIMPLE_LOCKING DB_SYSTEM_TABLES DB_TABLES '
  	             + 'DB_TRANSACTIONS DB_UNICODE DB_VIEWS __STDIN __STDOUT __STDERR __FILE_DIR'
  	  };

  	  const AT_COMMENT_MODE = hljs.COMMENT('@', '@');

  	  const PREPROCESSOR =
  	  {
  	    className: 'meta',
  	    begin: '#',
  	    end: '$',
  	    keywords: { keyword: 'define definecs|10 undef ifdef ifndef iflight ifdllcall ifmac ifos2win ifunix else endif lineson linesoff srcfile srcline' },
  	    contains: [
  	      {
  	        begin: /\\\n/,
  	        relevance: 0
  	      },
  	      {
  	        beginKeywords: 'include',
  	        end: '$',
  	        keywords: { keyword: 'include' },
  	        contains: [
  	          {
  	            className: 'string',
  	            begin: '"',
  	            end: '"',
  	            illegal: '\\n'
  	          }
  	        ]
  	      },
  	      hljs.C_LINE_COMMENT_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE,
  	      AT_COMMENT_MODE
  	    ]
  	  };

  	  const STRUCT_TYPE =
  	  {
  	    begin: /\bstruct\s+/,
  	    end: /\s/,
  	    keywords: "struct",
  	    contains: [
  	      {
  	        className: "type",
  	        begin: hljs.UNDERSCORE_IDENT_RE,
  	        relevance: 0
  	      }
  	    ]
  	  };

  	  // only for definitions
  	  const PARSE_PARAMS = [
  	    {
  	      className: 'params',
  	      begin: /\(/,
  	      end: /\)/,
  	      excludeBegin: true,
  	      excludeEnd: true,
  	      endsWithParent: true,
  	      relevance: 0,
  	      contains: [
  	        { // dots
  	          className: 'literal',
  	          begin: /\.\.\./
  	        },
  	        hljs.C_NUMBER_MODE,
  	        hljs.C_BLOCK_COMMENT_MODE,
  	        AT_COMMENT_MODE,
  	        STRUCT_TYPE
  	      ]
  	    }
  	  ];

  	  const FUNCTION_DEF =
  	  {
  	    className: "title",
  	    begin: hljs.UNDERSCORE_IDENT_RE,
  	    relevance: 0
  	  };

  	  const DEFINITION = function(beginKeywords, end, inherits) {
  	    const mode = hljs.inherit(
  	      {
  	        className: "function",
  	        beginKeywords: beginKeywords,
  	        end: end,
  	        excludeEnd: true,
  	        contains: [].concat(PARSE_PARAMS)
  	      },
  	      inherits || {}
  	    );
  	    mode.contains.push(FUNCTION_DEF);
  	    mode.contains.push(hljs.C_NUMBER_MODE);
  	    mode.contains.push(hljs.C_BLOCK_COMMENT_MODE);
  	    mode.contains.push(AT_COMMENT_MODE);
  	    return mode;
  	  };

  	  const BUILT_IN_REF =
  	  { // these are explicitly named internal function calls
  	    className: 'built_in',
  	    begin: '\\b(' + KEYWORDS.built_in.split(' ').join('|') + ')\\b'
  	  };

  	  const STRING_REF =
  	  {
  	    className: 'string',
  	    begin: '"',
  	    end: '"',
  	    contains: [ hljs.BACKSLASH_ESCAPE ],
  	    relevance: 0
  	  };

  	  const FUNCTION_REF =
  	  {
  	    // className: "fn_ref",
  	    begin: hljs.UNDERSCORE_IDENT_RE + '\\s*\\(',
  	    returnBegin: true,
  	    keywords: KEYWORDS,
  	    relevance: 0,
  	    contains: [
  	      { beginKeywords: KEYWORDS.keyword },
  	      BUILT_IN_REF,
  	      { // ambiguously named function calls get a relevance of 0
  	        className: 'built_in',
  	        begin: hljs.UNDERSCORE_IDENT_RE,
  	        relevance: 0
  	      }
  	    ]
  	  };

  	  const FUNCTION_REF_PARAMS =
  	  {
  	    // className: "fn_ref_params",
  	    begin: /\(/,
  	    end: /\)/,
  	    relevance: 0,
  	    keywords: {
  	      built_in: KEYWORDS.built_in,
  	      literal: KEYWORDS.literal
  	    },
  	    contains: [
  	      hljs.C_NUMBER_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE,
  	      AT_COMMENT_MODE,
  	      BUILT_IN_REF,
  	      FUNCTION_REF,
  	      STRING_REF,
  	      'self'
  	    ]
  	  };

  	  FUNCTION_REF.contains.push(FUNCTION_REF_PARAMS);

  	  return {
  	    name: 'GAUSS',
  	    aliases: [ 'gss' ],
  	    case_insensitive: true, // language is case-insensitive
  	    keywords: KEYWORDS,
  	    illegal: /(\{[%#]|[%#]\}| <- )/,
  	    contains: [
  	      hljs.C_NUMBER_MODE,
  	      hljs.C_LINE_COMMENT_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE,
  	      AT_COMMENT_MODE,
  	      STRING_REF,
  	      PREPROCESSOR,
  	      {
  	        className: 'keyword',
  	        begin: /\bexternal (matrix|string|array|sparse matrix|struct|proc|keyword|fn)/
  	      },
  	      DEFINITION('proc keyword', ';'),
  	      DEFINITION('fn', '='),
  	      {
  	        beginKeywords: 'for threadfor',
  	        end: /;/,
  	        // end: /\(/,
  	        relevance: 0,
  	        contains: [
  	          hljs.C_BLOCK_COMMENT_MODE,
  	          AT_COMMENT_MODE,
  	          FUNCTION_REF_PARAMS
  	        ]
  	      },
  	      { // custom method guard
  	        // excludes method names from keyword processing
  	        variants: [
  	          { begin: hljs.UNDERSCORE_IDENT_RE + '\\.' + hljs.UNDERSCORE_IDENT_RE },
  	          { begin: hljs.UNDERSCORE_IDENT_RE + '\\s*=' }
  	        ],
  	        relevance: 0
  	      },
  	      FUNCTION_REF,
  	      STRUCT_TYPE
  	    ]
  	  };
  	}

  	gauss_1 = gauss;
  	return gauss_1;
  }

  /*
   Language: G-code (ISO 6983)
   Contributors: Adam Joseph Cook <adam.joseph.cook@gmail.com>
   Description: G-code syntax highlighter for Fanuc and other common CNC machine tool controls.
   Website: https://www.sis.se/api/document/preview/911952/
   */

  var gcode_1;
  var hasRequiredGcode;

  function requireGcode () {
  	if (hasRequiredGcode) return gcode_1;
  	hasRequiredGcode = 1;
  	function gcode(hljs) {
  	  const GCODE_IDENT_RE = '[A-Z_][A-Z0-9_.]*';
  	  const GCODE_CLOSE_RE = '%';
  	  const GCODE_KEYWORDS = {
  	    $pattern: GCODE_IDENT_RE,
  	    keyword: 'IF DO WHILE ENDWHILE CALL ENDIF SUB ENDSUB GOTO REPEAT ENDREPEAT '
  	      + 'EQ LT GT NE GE LE OR XOR'
  	  };
  	  const GCODE_START = {
  	    className: 'meta',
  	    begin: '([O])([0-9]+)'
  	  };
  	  const NUMBER = hljs.inherit(hljs.C_NUMBER_MODE, { begin: '([-+]?((\\.\\d+)|(\\d+)(\\.\\d*)?))|' + hljs.C_NUMBER_RE });
  	  const GCODE_CODE = [
  	    hljs.C_LINE_COMMENT_MODE,
  	    hljs.C_BLOCK_COMMENT_MODE,
  	    hljs.COMMENT(/\(/, /\)/),
  	    NUMBER,
  	    hljs.inherit(hljs.APOS_STRING_MODE, { illegal: null }),
  	    hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null }),
  	    {
  	      className: 'name',
  	      begin: '([G])([0-9]+\\.?[0-9]?)'
  	    },
  	    {
  	      className: 'name',
  	      begin: '([M])([0-9]+\\.?[0-9]?)'
  	    },
  	    {
  	      className: 'attr',
  	      begin: '(VC|VS|#)',
  	      end: '(\\d+)'
  	    },
  	    {
  	      className: 'attr',
  	      begin: '(VZOFX|VZOFY|VZOFZ)'
  	    },
  	    {
  	      className: 'built_in',
  	      begin: '(ATAN|ABS|ACOS|ASIN|SIN|COS|EXP|FIX|FUP|ROUND|LN|TAN)(\\[)',
  	      contains: [ NUMBER ],
  	      end: '\\]'
  	    },
  	    {
  	      className: 'symbol',
  	      variants: [
  	        {
  	          begin: 'N',
  	          end: '\\d+',
  	          illegal: '\\W'
  	        }
  	      ]
  	    }
  	  ];

  	  return {
  	    name: 'G-code (ISO 6983)',
  	    aliases: [ 'nc' ],
  	    // Some implementations (CNC controls) of G-code are interoperable with uppercase and lowercase letters seamlessly.
  	    // However, most prefer all uppercase and uppercase is customary.
  	    case_insensitive: true,
  	    keywords: GCODE_KEYWORDS,
  	    contains: [
  	      {
  	        className: 'meta',
  	        begin: GCODE_CLOSE_RE
  	      },
  	      GCODE_START
  	    ].concat(GCODE_CODE)
  	  };
  	}

  	gcode_1 = gcode;
  	return gcode_1;
  }

  /*
   Language: Gherkin
   Author: Sam Pikesley (@pikesley) <sam.pikesley@theodi.org>
   Description: Gherkin is the format for cucumber specifications. It is a domain specific language which helps you to describe business behavior without the need to go into detail of implementation.
   Website: https://cucumber.io/docs/gherkin/
   */

  var gherkin_1;
  var hasRequiredGherkin;

  function requireGherkin () {
  	if (hasRequiredGherkin) return gherkin_1;
  	hasRequiredGherkin = 1;
  	function gherkin(hljs) {
  	  return {
  	    name: 'Gherkin',
  	    aliases: [ 'feature' ],
  	    keywords: 'Feature Background Ability Business\ Need Scenario Scenarios Scenario\ Outline Scenario\ Template Examples Given And Then But When',
  	    contains: [
  	      {
  	        className: 'symbol',
  	        begin: '\\*',
  	        relevance: 0
  	      },
  	      {
  	        className: 'meta',
  	        begin: '@[^@\\s]+'
  	      },
  	      {
  	        begin: '\\|',
  	        end: '\\|\\w*$',
  	        contains: [
  	          {
  	            className: 'string',
  	            begin: '[^|]+'
  	          }
  	        ]
  	      },
  	      {
  	        className: 'variable',
  	        begin: '<',
  	        end: '>'
  	      },
  	      hljs.HASH_COMMENT_MODE,
  	      {
  	        className: 'string',
  	        begin: '"""',
  	        end: '"""'
  	      },
  	      hljs.QUOTE_STRING_MODE
  	    ]
  	  };
  	}

  	gherkin_1 = gherkin;
  	return gherkin_1;
  }

  /*
  Language: GLSL
  Description: OpenGL Shading Language
  Author: Sergey Tikhomirov <sergey@tikhomirov.io>
  Website: https://en.wikipedia.org/wiki/OpenGL_Shading_Language
  Category: graphics
  */

  var glsl_1;
  var hasRequiredGlsl;

  function requireGlsl () {
  	if (hasRequiredGlsl) return glsl_1;
  	hasRequiredGlsl = 1;
  	function glsl(hljs) {
  	  return {
  	    name: 'GLSL',
  	    keywords: {
  	      keyword:
  	        // Statements
  	        'break continue discard do else for if return while switch case default '
  	        // Qualifiers
  	        + 'attribute binding buffer ccw centroid centroid varying coherent column_major const cw '
  	        + 'depth_any depth_greater depth_less depth_unchanged early_fragment_tests equal_spacing '
  	        + 'flat fractional_even_spacing fractional_odd_spacing highp in index inout invariant '
  	        + 'invocations isolines layout line_strip lines lines_adjacency local_size_x local_size_y '
  	        + 'local_size_z location lowp max_vertices mediump noperspective offset origin_upper_left '
  	        + 'out packed patch pixel_center_integer point_mode points precise precision quads r11f_g11f_b10f '
  	        + 'r16 r16_snorm r16f r16i r16ui r32f r32i r32ui r8 r8_snorm r8i r8ui readonly restrict '
  	        + 'rg16 rg16_snorm rg16f rg16i rg16ui rg32f rg32i rg32ui rg8 rg8_snorm rg8i rg8ui rgb10_a2 '
  	        + 'rgb10_a2ui rgba16 rgba16_snorm rgba16f rgba16i rgba16ui rgba32f rgba32i rgba32ui rgba8 '
  	        + 'rgba8_snorm rgba8i rgba8ui row_major sample shared smooth std140 std430 stream triangle_strip '
  	        + 'triangles triangles_adjacency uniform varying vertices volatile writeonly',
  	      type:
  	        'atomic_uint bool bvec2 bvec3 bvec4 dmat2 dmat2x2 dmat2x3 dmat2x4 dmat3 dmat3x2 dmat3x3 '
  	        + 'dmat3x4 dmat4 dmat4x2 dmat4x3 dmat4x4 double dvec2 dvec3 dvec4 float iimage1D iimage1DArray '
  	        + 'iimage2D iimage2DArray iimage2DMS iimage2DMSArray iimage2DRect iimage3D iimageBuffer '
  	        + 'iimageCube iimageCubeArray image1D image1DArray image2D image2DArray image2DMS image2DMSArray '
  	        + 'image2DRect image3D imageBuffer imageCube imageCubeArray int isampler1D isampler1DArray '
  	        + 'isampler2D isampler2DArray isampler2DMS isampler2DMSArray isampler2DRect isampler3D '
  	        + 'isamplerBuffer isamplerCube isamplerCubeArray ivec2 ivec3 ivec4 mat2 mat2x2 mat2x3 '
  	        + 'mat2x4 mat3 mat3x2 mat3x3 mat3x4 mat4 mat4x2 mat4x3 mat4x4 sampler1D sampler1DArray '
  	        + 'sampler1DArrayShadow sampler1DShadow sampler2D sampler2DArray sampler2DArrayShadow '
  	        + 'sampler2DMS sampler2DMSArray sampler2DRect sampler2DRectShadow sampler2DShadow sampler3D '
  	        + 'samplerBuffer samplerCube samplerCubeArray samplerCubeArrayShadow samplerCubeShadow '
  	        + 'image1D uimage1DArray uimage2D uimage2DArray uimage2DMS uimage2DMSArray uimage2DRect '
  	        + 'uimage3D uimageBuffer uimageCube uimageCubeArray uint usampler1D usampler1DArray '
  	        + 'usampler2D usampler2DArray usampler2DMS usampler2DMSArray usampler2DRect usampler3D '
  	        + 'samplerBuffer usamplerCube usamplerCubeArray uvec2 uvec3 uvec4 vec2 vec3 vec4 void',
  	      built_in:
  	        // Constants
  	        'gl_MaxAtomicCounterBindings gl_MaxAtomicCounterBufferSize gl_MaxClipDistances gl_MaxClipPlanes '
  	        + 'gl_MaxCombinedAtomicCounterBuffers gl_MaxCombinedAtomicCounters gl_MaxCombinedImageUniforms '
  	        + 'gl_MaxCombinedImageUnitsAndFragmentOutputs gl_MaxCombinedTextureImageUnits gl_MaxComputeAtomicCounterBuffers '
  	        + 'gl_MaxComputeAtomicCounters gl_MaxComputeImageUniforms gl_MaxComputeTextureImageUnits '
  	        + 'gl_MaxComputeUniformComponents gl_MaxComputeWorkGroupCount gl_MaxComputeWorkGroupSize '
  	        + 'gl_MaxDrawBuffers gl_MaxFragmentAtomicCounterBuffers gl_MaxFragmentAtomicCounters '
  	        + 'gl_MaxFragmentImageUniforms gl_MaxFragmentInputComponents gl_MaxFragmentInputVectors '
  	        + 'gl_MaxFragmentUniformComponents gl_MaxFragmentUniformVectors gl_MaxGeometryAtomicCounterBuffers '
  	        + 'gl_MaxGeometryAtomicCounters gl_MaxGeometryImageUniforms gl_MaxGeometryInputComponents '
  	        + 'gl_MaxGeometryOutputComponents gl_MaxGeometryOutputVertices gl_MaxGeometryTextureImageUnits '
  	        + 'gl_MaxGeometryTotalOutputComponents gl_MaxGeometryUniformComponents gl_MaxGeometryVaryingComponents '
  	        + 'gl_MaxImageSamples gl_MaxImageUnits gl_MaxLights gl_MaxPatchVertices gl_MaxProgramTexelOffset '
  	        + 'gl_MaxTessControlAtomicCounterBuffers gl_MaxTessControlAtomicCounters gl_MaxTessControlImageUniforms '
  	        + 'gl_MaxTessControlInputComponents gl_MaxTessControlOutputComponents gl_MaxTessControlTextureImageUnits '
  	        + 'gl_MaxTessControlTotalOutputComponents gl_MaxTessControlUniformComponents '
  	        + 'gl_MaxTessEvaluationAtomicCounterBuffers gl_MaxTessEvaluationAtomicCounters '
  	        + 'gl_MaxTessEvaluationImageUniforms gl_MaxTessEvaluationInputComponents gl_MaxTessEvaluationOutputComponents '
  	        + 'gl_MaxTessEvaluationTextureImageUnits gl_MaxTessEvaluationUniformComponents '
  	        + 'gl_MaxTessGenLevel gl_MaxTessPatchComponents gl_MaxTextureCoords gl_MaxTextureImageUnits '
  	        + 'gl_MaxTextureUnits gl_MaxVaryingComponents gl_MaxVaryingFloats gl_MaxVaryingVectors '
  	        + 'gl_MaxVertexAtomicCounterBuffers gl_MaxVertexAtomicCounters gl_MaxVertexAttribs gl_MaxVertexImageUniforms '
  	        + 'gl_MaxVertexOutputComponents gl_MaxVertexOutputVectors gl_MaxVertexTextureImageUnits '
  	        + 'gl_MaxVertexUniformComponents gl_MaxVertexUniformVectors gl_MaxViewports gl_MinProgramTexelOffset '
  	        // Variables
  	        + 'gl_BackColor gl_BackLightModelProduct gl_BackLightProduct gl_BackMaterial '
  	        + 'gl_BackSecondaryColor gl_ClipDistance gl_ClipPlane gl_ClipVertex gl_Color '
  	        + 'gl_DepthRange gl_EyePlaneQ gl_EyePlaneR gl_EyePlaneS gl_EyePlaneT gl_Fog gl_FogCoord '
  	        + 'gl_FogFragCoord gl_FragColor gl_FragCoord gl_FragData gl_FragDepth gl_FrontColor '
  	        + 'gl_FrontFacing gl_FrontLightModelProduct gl_FrontLightProduct gl_FrontMaterial '
  	        + 'gl_FrontSecondaryColor gl_GlobalInvocationID gl_InstanceID gl_InvocationID gl_Layer gl_LightModel '
  	        + 'gl_LightSource gl_LocalInvocationID gl_LocalInvocationIndex gl_ModelViewMatrix '
  	        + 'gl_ModelViewMatrixInverse gl_ModelViewMatrixInverseTranspose gl_ModelViewMatrixTranspose '
  	        + 'gl_ModelViewProjectionMatrix gl_ModelViewProjectionMatrixInverse gl_ModelViewProjectionMatrixInverseTranspose '
  	        + 'gl_ModelViewProjectionMatrixTranspose gl_MultiTexCoord0 gl_MultiTexCoord1 gl_MultiTexCoord2 '
  	        + 'gl_MultiTexCoord3 gl_MultiTexCoord4 gl_MultiTexCoord5 gl_MultiTexCoord6 gl_MultiTexCoord7 '
  	        + 'gl_Normal gl_NormalMatrix gl_NormalScale gl_NumSamples gl_NumWorkGroups gl_ObjectPlaneQ '
  	        + 'gl_ObjectPlaneR gl_ObjectPlaneS gl_ObjectPlaneT gl_PatchVerticesIn gl_Point gl_PointCoord '
  	        + 'gl_PointSize gl_Position gl_PrimitiveID gl_PrimitiveIDIn gl_ProjectionMatrix gl_ProjectionMatrixInverse '
  	        + 'gl_ProjectionMatrixInverseTranspose gl_ProjectionMatrixTranspose gl_SampleID gl_SampleMask '
  	        + 'gl_SampleMaskIn gl_SamplePosition gl_SecondaryColor gl_TessCoord gl_TessLevelInner gl_TessLevelOuter '
  	        + 'gl_TexCoord gl_TextureEnvColor gl_TextureMatrix gl_TextureMatrixInverse gl_TextureMatrixInverseTranspose '
  	        + 'gl_TextureMatrixTranspose gl_Vertex gl_VertexID gl_ViewportIndex gl_WorkGroupID gl_WorkGroupSize gl_in gl_out '
  	        // Functions
  	        + 'EmitStreamVertex EmitVertex EndPrimitive EndStreamPrimitive abs acos acosh all any asin '
  	        + 'asinh atan atanh atomicAdd atomicAnd atomicCompSwap atomicCounter atomicCounterDecrement '
  	        + 'atomicCounterIncrement atomicExchange atomicMax atomicMin atomicOr atomicXor barrier '
  	        + 'bitCount bitfieldExtract bitfieldInsert bitfieldReverse ceil clamp cos cosh cross '
  	        + 'dFdx dFdy degrees determinant distance dot equal exp exp2 faceforward findLSB findMSB '
  	        + 'floatBitsToInt floatBitsToUint floor fma fract frexp ftransform fwidth greaterThan '
  	        + 'greaterThanEqual groupMemoryBarrier imageAtomicAdd imageAtomicAnd imageAtomicCompSwap '
  	        + 'imageAtomicExchange imageAtomicMax imageAtomicMin imageAtomicOr imageAtomicXor imageLoad '
  	        + 'imageSize imageStore imulExtended intBitsToFloat interpolateAtCentroid interpolateAtOffset '
  	        + 'interpolateAtSample inverse inversesqrt isinf isnan ldexp length lessThan lessThanEqual log '
  	        + 'log2 matrixCompMult max memoryBarrier memoryBarrierAtomicCounter memoryBarrierBuffer '
  	        + 'memoryBarrierImage memoryBarrierShared min mix mod modf noise1 noise2 noise3 noise4 '
  	        + 'normalize not notEqual outerProduct packDouble2x32 packHalf2x16 packSnorm2x16 packSnorm4x8 '
  	        + 'packUnorm2x16 packUnorm4x8 pow radians reflect refract round roundEven shadow1D shadow1DLod '
  	        + 'shadow1DProj shadow1DProjLod shadow2D shadow2DLod shadow2DProj shadow2DProjLod sign sin sinh '
  	        + 'smoothstep sqrt step tan tanh texelFetch texelFetchOffset texture texture1D texture1DLod '
  	        + 'texture1DProj texture1DProjLod texture2D texture2DLod texture2DProj texture2DProjLod '
  	        + 'texture3D texture3DLod texture3DProj texture3DProjLod textureCube textureCubeLod '
  	        + 'textureGather textureGatherOffset textureGatherOffsets textureGrad textureGradOffset '
  	        + 'textureLod textureLodOffset textureOffset textureProj textureProjGrad textureProjGradOffset '
  	        + 'textureProjLod textureProjLodOffset textureProjOffset textureQueryLevels textureQueryLod '
  	        + 'textureSize transpose trunc uaddCarry uintBitsToFloat umulExtended unpackDouble2x32 '
  	        + 'unpackHalf2x16 unpackSnorm2x16 unpackSnorm4x8 unpackUnorm2x16 unpackUnorm4x8 usubBorrow',
  	      literal: 'true false'
  	    },
  	    illegal: '"',
  	    contains: [
  	      hljs.C_LINE_COMMENT_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE,
  	      hljs.C_NUMBER_MODE,
  	      {
  	        className: 'meta',
  	        begin: '#',
  	        end: '$'
  	      }
  	    ]
  	  };
  	}

  	glsl_1 = glsl;
  	return glsl_1;
  }

  /*
  Language: GML
  Author: Meseta <meseta@gmail.com>
  Description: Game Maker Language for GameMaker Studio 2
  Website: https://docs2.yoyogames.com
  Category: scripting
  */

  var gml_1;
  var hasRequiredGml;

  function requireGml () {
  	if (hasRequiredGml) return gml_1;
  	hasRequiredGml = 1;
  	function gml(hljs) {
  	  const KEYWORDS = [
  	    "#endregion",
  	    "#macro",
  	    "#region",
  	    "and",
  	    "begin",
  	    "break",
  	    "case",
  	    "constructor",
  	    "continue",
  	    "default",
  	    "delete",
  	    "div",
  	    "do",
  	    "else",
  	    "end",
  	    "enum",
  	    "exit",
  	    "for",
  	    "function",
  	    "globalvar",
  	    "if",
  	    "mod",
  	    "not",
  	    "or",
  	    "repeat",
  	    "return",
  	    "switch",
  	    "then",
  	    "until",
  	    "var",
  	    "while",
  	    "with",
  	    "xor"
  	  ];
  	  const BUILT_INS = [
  	    "abs",
  	    "achievement_available",
  	    "achievement_event",
  	    "achievement_get_challenges",
  	    "achievement_get_info",
  	    "achievement_get_pic",
  	    "achievement_increment",
  	    "achievement_load_friends",
  	    "achievement_load_leaderboard",
  	    "achievement_load_progress",
  	    "achievement_login",
  	    "achievement_login_status",
  	    "achievement_logout",
  	    "achievement_post",
  	    "achievement_post_score",
  	    "achievement_reset",
  	    "achievement_send_challenge",
  	    "achievement_show",
  	    "achievement_show_achievements",
  	    "achievement_show_challenge_notifications",
  	    "achievement_show_leaderboards",
  	    "action_inherited",
  	    "action_kill_object",
  	    "ads_disable",
  	    "ads_enable",
  	    "ads_engagement_active",
  	    "ads_engagement_available",
  	    "ads_engagement_launch",
  	    "ads_event",
  	    "ads_event_preload",
  	    "ads_get_display_height",
  	    "ads_get_display_width",
  	    "ads_interstitial_available",
  	    "ads_interstitial_display",
  	    "ads_move",
  	    "ads_set_reward_callback",
  	    "ads_setup",
  	    "alarm_get",
  	    "alarm_set",
  	    "analytics_event",
  	    "analytics_event_ext",
  	    "angle_difference",
  	    "ansi_char",
  	    "application_get_position",
  	    "application_surface_draw_enable",
  	    "application_surface_enable",
  	    "application_surface_is_enabled",
  	    "arccos",
  	    "arcsin",
  	    "arctan",
  	    "arctan2",
  	    "array_copy",
  	    "array_create",
  	    "array_delete",
  	    "array_equals",
  	    "array_height_2d",
  	    "array_insert",
  	    "array_length",
  	    "array_length_1d",
  	    "array_length_2d",
  	    "array_pop",
  	    "array_push",
  	    "array_resize",
  	    "array_sort",
  	    "asset_get_index",
  	    "asset_get_type",
  	    "audio_channel_num",
  	    "audio_create_buffer_sound",
  	    "audio_create_play_queue",
  	    "audio_create_stream",
  	    "audio_create_sync_group",
  	    "audio_debug",
  	    "audio_destroy_stream",
  	    "audio_destroy_sync_group",
  	    "audio_emitter_create",
  	    "audio_emitter_exists",
  	    "audio_emitter_falloff",
  	    "audio_emitter_free",
  	    "audio_emitter_gain",
  	    "audio_emitter_get_gain",
  	    "audio_emitter_get_listener_mask",
  	    "audio_emitter_get_pitch",
  	    "audio_emitter_get_vx",
  	    "audio_emitter_get_vy",
  	    "audio_emitter_get_vz",
  	    "audio_emitter_get_x",
  	    "audio_emitter_get_y",
  	    "audio_emitter_get_z",
  	    "audio_emitter_pitch",
  	    "audio_emitter_position",
  	    "audio_emitter_set_listener_mask",
  	    "audio_emitter_velocity",
  	    "audio_exists",
  	    "audio_falloff_set_model",
  	    "audio_free_buffer_sound",
  	    "audio_free_play_queue",
  	    "audio_get_listener_count",
  	    "audio_get_listener_info",
  	    "audio_get_listener_mask",
  	    "audio_get_master_gain",
  	    "audio_get_name",
  	    "audio_get_recorder_count",
  	    "audio_get_recorder_info",
  	    "audio_get_type",
  	    "audio_group_is_loaded",
  	    "audio_group_load",
  	    "audio_group_load_progress",
  	    "audio_group_name",
  	    "audio_group_set_gain",
  	    "audio_group_stop_all",
  	    "audio_group_unload",
  	    "audio_is_paused",
  	    "audio_is_playing",
  	    "audio_listener_get_data",
  	    "audio_listener_orientation",
  	    "audio_listener_position",
  	    "audio_listener_set_orientation",
  	    "audio_listener_set_position",
  	    "audio_listener_set_velocity",
  	    "audio_listener_velocity",
  	    "audio_master_gain",
  	    "audio_music_gain",
  	    "audio_music_is_playing",
  	    "audio_pause_all",
  	    "audio_pause_music",
  	    "audio_pause_sound",
  	    "audio_pause_sync_group",
  	    "audio_play_in_sync_group",
  	    "audio_play_music",
  	    "audio_play_sound",
  	    "audio_play_sound_at",
  	    "audio_play_sound_on",
  	    "audio_queue_sound",
  	    "audio_resume_all",
  	    "audio_resume_music",
  	    "audio_resume_sound",
  	    "audio_resume_sync_group",
  	    "audio_set_listener_mask",
  	    "audio_set_master_gain",
  	    "audio_sound_gain",
  	    "audio_sound_get_gain",
  	    "audio_sound_get_listener_mask",
  	    "audio_sound_get_pitch",
  	    "audio_sound_get_track_position",
  	    "audio_sound_length",
  	    "audio_sound_pitch",
  	    "audio_sound_set_listener_mask",
  	    "audio_sound_set_track_position",
  	    "audio_start_recording",
  	    "audio_start_sync_group",
  	    "audio_stop_all",
  	    "audio_stop_music",
  	    "audio_stop_recording",
  	    "audio_stop_sound",
  	    "audio_stop_sync_group",
  	    "audio_sync_group_debug",
  	    "audio_sync_group_get_track_pos",
  	    "audio_sync_group_is_playing",
  	    "audio_system",
  	    "background_get_height",
  	    "background_get_width",
  	    "base64_decode",
  	    "base64_encode",
  	    "browser_input_capture",
  	    "buffer_async_group_begin",
  	    "buffer_async_group_end",
  	    "buffer_async_group_option",
  	    "buffer_base64_decode",
  	    "buffer_base64_decode_ext",
  	    "buffer_base64_encode",
  	    "buffer_copy",
  	    "buffer_copy_from_vertex_buffer",
  	    "buffer_create",
  	    "buffer_create_from_vertex_buffer",
  	    "buffer_create_from_vertex_buffer_ext",
  	    "buffer_delete",
  	    "buffer_exists",
  	    "buffer_fill",
  	    "buffer_get_address",
  	    "buffer_get_alignment",
  	    "buffer_get_size",
  	    "buffer_get_surface",
  	    "buffer_get_type",
  	    "buffer_load",
  	    "buffer_load_async",
  	    "buffer_load_ext",
  	    "buffer_load_partial",
  	    "buffer_md5",
  	    "buffer_peek",
  	    "buffer_poke",
  	    "buffer_read",
  	    "buffer_resize",
  	    "buffer_save",
  	    "buffer_save_async",
  	    "buffer_save_ext",
  	    "buffer_seek",
  	    "buffer_set_surface",
  	    "buffer_sha1",
  	    "buffer_sizeof",
  	    "buffer_tell",
  	    "buffer_write",
  	    "camera_apply",
  	    "camera_create",
  	    "camera_create_view",
  	    "camera_destroy",
  	    "camera_get_active",
  	    "camera_get_begin_script",
  	    "camera_get_default",
  	    "camera_get_end_script",
  	    "camera_get_proj_mat",
  	    "camera_get_update_script",
  	    "camera_get_view_angle",
  	    "camera_get_view_border_x",
  	    "camera_get_view_border_y",
  	    "camera_get_view_height",
  	    "camera_get_view_mat",
  	    "camera_get_view_speed_x",
  	    "camera_get_view_speed_y",
  	    "camera_get_view_target",
  	    "camera_get_view_width",
  	    "camera_get_view_x",
  	    "camera_get_view_y",
  	    "camera_set_begin_script",
  	    "camera_set_default",
  	    "camera_set_end_script",
  	    "camera_set_proj_mat",
  	    "camera_set_update_script",
  	    "camera_set_view_angle",
  	    "camera_set_view_border",
  	    "camera_set_view_mat",
  	    "camera_set_view_pos",
  	    "camera_set_view_size",
  	    "camera_set_view_speed",
  	    "camera_set_view_target",
  	    "ceil",
  	    "choose",
  	    "chr",
  	    "clamp",
  	    "clickable_add",
  	    "clickable_add_ext",
  	    "clickable_change",
  	    "clickable_change_ext",
  	    "clickable_delete",
  	    "clickable_exists",
  	    "clickable_set_style",
  	    "clipboard_get_text",
  	    "clipboard_has_text",
  	    "clipboard_set_text",
  	    "cloud_file_save",
  	    "cloud_string_save",
  	    "cloud_synchronise",
  	    "code_is_compiled",
  	    "collision_circle",
  	    "collision_circle_list",
  	    "collision_ellipse",
  	    "collision_ellipse_list",
  	    "collision_line",
  	    "collision_line_list",
  	    "collision_point",
  	    "collision_point_list",
  	    "collision_rectangle",
  	    "collision_rectangle_list",
  	    "color_get_blue",
  	    "color_get_green",
  	    "color_get_hue",
  	    "color_get_red",
  	    "color_get_saturation",
  	    "color_get_value",
  	    "colour_get_blue",
  	    "colour_get_green",
  	    "colour_get_hue",
  	    "colour_get_red",
  	    "colour_get_saturation",
  	    "colour_get_value",
  	    "cos",
  	    "darccos",
  	    "darcsin",
  	    "darctan",
  	    "darctan2",
  	    "date_compare_date",
  	    "date_compare_datetime",
  	    "date_compare_time",
  	    "date_create_datetime",
  	    "date_current_datetime",
  	    "date_date_of",
  	    "date_date_string",
  	    "date_datetime_string",
  	    "date_day_span",
  	    "date_days_in_month",
  	    "date_days_in_year",
  	    "date_get_day",
  	    "date_get_day_of_year",
  	    "date_get_hour",
  	    "date_get_hour_of_year",
  	    "date_get_minute",
  	    "date_get_minute_of_year",
  	    "date_get_month",
  	    "date_get_second",
  	    "date_get_second_of_year",
  	    "date_get_timezone",
  	    "date_get_week",
  	    "date_get_weekday",
  	    "date_get_year",
  	    "date_hour_span",
  	    "date_inc_day",
  	    "date_inc_hour",
  	    "date_inc_minute",
  	    "date_inc_month",
  	    "date_inc_second",
  	    "date_inc_week",
  	    "date_inc_year",
  	    "date_is_today",
  	    "date_leap_year",
  	    "date_minute_span",
  	    "date_month_span",
  	    "date_second_span",
  	    "date_set_timezone",
  	    "date_time_of",
  	    "date_time_string",
  	    "date_valid_datetime",
  	    "date_week_span",
  	    "date_year_span",
  	    "dcos",
  	    "debug_event",
  	    "debug_get_callstack",
  	    "degtorad",
  	    "device_get_tilt_x",
  	    "device_get_tilt_y",
  	    "device_get_tilt_z",
  	    "device_is_keypad_open",
  	    "device_mouse_check_button",
  	    "device_mouse_check_button_pressed",
  	    "device_mouse_check_button_released",
  	    "device_mouse_dbclick_enable",
  	    "device_mouse_raw_x",
  	    "device_mouse_raw_y",
  	    "device_mouse_x",
  	    "device_mouse_x_to_gui",
  	    "device_mouse_y",
  	    "device_mouse_y_to_gui",
  	    "directory_create",
  	    "directory_destroy",
  	    "directory_exists",
  	    "display_get_dpi_x",
  	    "display_get_dpi_y",
  	    "display_get_gui_height",
  	    "display_get_gui_width",
  	    "display_get_height",
  	    "display_get_orientation",
  	    "display_get_sleep_margin",
  	    "display_get_timing_method",
  	    "display_get_width",
  	    "display_mouse_get_x",
  	    "display_mouse_get_y",
  	    "display_mouse_set",
  	    "display_reset",
  	    "display_set_gui_maximise",
  	    "display_set_gui_maximize",
  	    "display_set_gui_size",
  	    "display_set_sleep_margin",
  	    "display_set_timing_method",
  	    "display_set_ui_visibility",
  	    "distance_to_object",
  	    "distance_to_point",
  	    "dot_product",
  	    "dot_product_3d",
  	    "dot_product_3d_normalised",
  	    "dot_product_3d_normalized",
  	    "dot_product_normalised",
  	    "dot_product_normalized",
  	    "draw_arrow",
  	    "draw_background",
  	    "draw_background_ext",
  	    "draw_background_part_ext",
  	    "draw_background_tiled",
  	    "draw_button",
  	    "draw_circle",
  	    "draw_circle_color",
  	    "draw_circle_colour",
  	    "draw_clear",
  	    "draw_clear_alpha",
  	    "draw_ellipse",
  	    "draw_ellipse_color",
  	    "draw_ellipse_colour",
  	    "draw_enable_alphablend",
  	    "draw_enable_drawevent",
  	    "draw_enable_swf_aa",
  	    "draw_flush",
  	    "draw_get_alpha",
  	    "draw_get_color",
  	    "draw_get_colour",
  	    "draw_get_lighting",
  	    "draw_get_swf_aa_level",
  	    "draw_getpixel",
  	    "draw_getpixel_ext",
  	    "draw_healthbar",
  	    "draw_highscore",
  	    "draw_light_define_ambient",
  	    "draw_light_define_direction",
  	    "draw_light_define_point",
  	    "draw_light_enable",
  	    "draw_light_get",
  	    "draw_light_get_ambient",
  	    "draw_line",
  	    "draw_line_color",
  	    "draw_line_colour",
  	    "draw_line_width",
  	    "draw_line_width_color",
  	    "draw_line_width_colour",
  	    "draw_path",
  	    "draw_point",
  	    "draw_point_color",
  	    "draw_point_colour",
  	    "draw_primitive_begin",
  	    "draw_primitive_begin_texture",
  	    "draw_primitive_end",
  	    "draw_rectangle",
  	    "draw_rectangle_color",
  	    "draw_rectangle_colour",
  	    "draw_roundrect",
  	    "draw_roundrect_color",
  	    "draw_roundrect_color_ext",
  	    "draw_roundrect_colour",
  	    "draw_roundrect_colour_ext",
  	    "draw_roundrect_ext",
  	    "draw_self",
  	    "draw_set_alpha",
  	    "draw_set_alpha_test",
  	    "draw_set_alpha_test_ref_value",
  	    "draw_set_blend_mode",
  	    "draw_set_blend_mode_ext",
  	    "draw_set_circle_precision",
  	    "draw_set_color",
  	    "draw_set_color_write_enable",
  	    "draw_set_colour",
  	    "draw_set_font",
  	    "draw_set_halign",
  	    "draw_set_lighting",
  	    "draw_set_swf_aa_level",
  	    "draw_set_valign",
  	    "draw_skeleton",
  	    "draw_skeleton_collision",
  	    "draw_skeleton_instance",
  	    "draw_skeleton_time",
  	    "draw_sprite",
  	    "draw_sprite_ext",
  	    "draw_sprite_general",
  	    "draw_sprite_part",
  	    "draw_sprite_part_ext",
  	    "draw_sprite_pos",
  	    "draw_sprite_stretched",
  	    "draw_sprite_stretched_ext",
  	    "draw_sprite_tiled",
  	    "draw_sprite_tiled_ext",
  	    "draw_surface",
  	    "draw_surface_ext",
  	    "draw_surface_general",
  	    "draw_surface_part",
  	    "draw_surface_part_ext",
  	    "draw_surface_stretched",
  	    "draw_surface_stretched_ext",
  	    "draw_surface_tiled",
  	    "draw_surface_tiled_ext",
  	    "draw_text",
  	    "draw_text_color",
  	    "draw_text_colour",
  	    "draw_text_ext",
  	    "draw_text_ext_color",
  	    "draw_text_ext_colour",
  	    "draw_text_ext_transformed",
  	    "draw_text_ext_transformed_color",
  	    "draw_text_ext_transformed_colour",
  	    "draw_text_transformed",
  	    "draw_text_transformed_color",
  	    "draw_text_transformed_colour",
  	    "draw_texture_flush",
  	    "draw_tile",
  	    "draw_tilemap",
  	    "draw_triangle",
  	    "draw_triangle_color",
  	    "draw_triangle_colour",
  	    "draw_vertex",
  	    "draw_vertex_color",
  	    "draw_vertex_colour",
  	    "draw_vertex_texture",
  	    "draw_vertex_texture_color",
  	    "draw_vertex_texture_colour",
  	    "ds_exists",
  	    "ds_grid_add",
  	    "ds_grid_add_disk",
  	    "ds_grid_add_grid_region",
  	    "ds_grid_add_region",
  	    "ds_grid_clear",
  	    "ds_grid_copy",
  	    "ds_grid_create",
  	    "ds_grid_destroy",
  	    "ds_grid_get",
  	    "ds_grid_get_disk_max",
  	    "ds_grid_get_disk_mean",
  	    "ds_grid_get_disk_min",
  	    "ds_grid_get_disk_sum",
  	    "ds_grid_get_max",
  	    "ds_grid_get_mean",
  	    "ds_grid_get_min",
  	    "ds_grid_get_sum",
  	    "ds_grid_height",
  	    "ds_grid_multiply",
  	    "ds_grid_multiply_disk",
  	    "ds_grid_multiply_grid_region",
  	    "ds_grid_multiply_region",
  	    "ds_grid_read",
  	    "ds_grid_resize",
  	    "ds_grid_set",
  	    "ds_grid_set_disk",
  	    "ds_grid_set_grid_region",
  	    "ds_grid_set_region",
  	    "ds_grid_shuffle",
  	    "ds_grid_sort",
  	    "ds_grid_value_disk_exists",
  	    "ds_grid_value_disk_x",
  	    "ds_grid_value_disk_y",
  	    "ds_grid_value_exists",
  	    "ds_grid_value_x",
  	    "ds_grid_value_y",
  	    "ds_grid_width",
  	    "ds_grid_write",
  	    "ds_list_add",
  	    "ds_list_clear",
  	    "ds_list_copy",
  	    "ds_list_create",
  	    "ds_list_delete",
  	    "ds_list_destroy",
  	    "ds_list_empty",
  	    "ds_list_find_index",
  	    "ds_list_find_value",
  	    "ds_list_insert",
  	    "ds_list_mark_as_list",
  	    "ds_list_mark_as_map",
  	    "ds_list_read",
  	    "ds_list_replace",
  	    "ds_list_set",
  	    "ds_list_shuffle",
  	    "ds_list_size",
  	    "ds_list_sort",
  	    "ds_list_write",
  	    "ds_map_add",
  	    "ds_map_add_list",
  	    "ds_map_add_map",
  	    "ds_map_clear",
  	    "ds_map_copy",
  	    "ds_map_create",
  	    "ds_map_delete",
  	    "ds_map_destroy",
  	    "ds_map_empty",
  	    "ds_map_exists",
  	    "ds_map_find_first",
  	    "ds_map_find_last",
  	    "ds_map_find_next",
  	    "ds_map_find_previous",
  	    "ds_map_find_value",
  	    "ds_map_read",
  	    "ds_map_replace",
  	    "ds_map_replace_list",
  	    "ds_map_replace_map",
  	    "ds_map_secure_load",
  	    "ds_map_secure_load_buffer",
  	    "ds_map_secure_save",
  	    "ds_map_secure_save_buffer",
  	    "ds_map_set",
  	    "ds_map_size",
  	    "ds_map_write",
  	    "ds_priority_add",
  	    "ds_priority_change_priority",
  	    "ds_priority_clear",
  	    "ds_priority_copy",
  	    "ds_priority_create",
  	    "ds_priority_delete_max",
  	    "ds_priority_delete_min",
  	    "ds_priority_delete_value",
  	    "ds_priority_destroy",
  	    "ds_priority_empty",
  	    "ds_priority_find_max",
  	    "ds_priority_find_min",
  	    "ds_priority_find_priority",
  	    "ds_priority_read",
  	    "ds_priority_size",
  	    "ds_priority_write",
  	    "ds_queue_clear",
  	    "ds_queue_copy",
  	    "ds_queue_create",
  	    "ds_queue_dequeue",
  	    "ds_queue_destroy",
  	    "ds_queue_empty",
  	    "ds_queue_enqueue",
  	    "ds_queue_head",
  	    "ds_queue_read",
  	    "ds_queue_size",
  	    "ds_queue_tail",
  	    "ds_queue_write",
  	    "ds_set_precision",
  	    "ds_stack_clear",
  	    "ds_stack_copy",
  	    "ds_stack_create",
  	    "ds_stack_destroy",
  	    "ds_stack_empty",
  	    "ds_stack_pop",
  	    "ds_stack_push",
  	    "ds_stack_read",
  	    "ds_stack_size",
  	    "ds_stack_top",
  	    "ds_stack_write",
  	    "dsin",
  	    "dtan",
  	    "effect_clear",
  	    "effect_create_above",
  	    "effect_create_below",
  	    "environment_get_variable",
  	    "event_inherited",
  	    "event_perform",
  	    "event_perform_object",
  	    "event_user",
  	    "exp",
  	    "external_call",
  	    "external_define",
  	    "external_free",
  	    "facebook_accesstoken",
  	    "facebook_check_permission",
  	    "facebook_dialog",
  	    "facebook_graph_request",
  	    "facebook_init",
  	    "facebook_launch_offerwall",
  	    "facebook_login",
  	    "facebook_logout",
  	    "facebook_post_message",
  	    "facebook_request_publish_permissions",
  	    "facebook_request_read_permissions",
  	    "facebook_send_invite",
  	    "facebook_status",
  	    "facebook_user_id",
  	    "file_attributes",
  	    "file_bin_close",
  	    "file_bin_open",
  	    "file_bin_position",
  	    "file_bin_read_byte",
  	    "file_bin_rewrite",
  	    "file_bin_seek",
  	    "file_bin_size",
  	    "file_bin_write_byte",
  	    "file_copy",
  	    "file_delete",
  	    "file_exists",
  	    "file_find_close",
  	    "file_find_first",
  	    "file_find_next",
  	    "file_rename",
  	    "file_text_close",
  	    "file_text_eof",
  	    "file_text_eoln",
  	    "file_text_open_append",
  	    "file_text_open_from_string",
  	    "file_text_open_read",
  	    "file_text_open_write",
  	    "file_text_read_real",
  	    "file_text_read_string",
  	    "file_text_readln",
  	    "file_text_write_real",
  	    "file_text_write_string",
  	    "file_text_writeln",
  	    "filename_change_ext",
  	    "filename_dir",
  	    "filename_drive",
  	    "filename_ext",
  	    "filename_name",
  	    "filename_path",
  	    "floor",
  	    "font_add",
  	    "font_add_enable_aa",
  	    "font_add_get_enable_aa",
  	    "font_add_sprite",
  	    "font_add_sprite_ext",
  	    "font_delete",
  	    "font_exists",
  	    "font_get_bold",
  	    "font_get_first",
  	    "font_get_fontname",
  	    "font_get_italic",
  	    "font_get_last",
  	    "font_get_name",
  	    "font_get_size",
  	    "font_get_texture",
  	    "font_get_uvs",
  	    "font_replace",
  	    "font_replace_sprite",
  	    "font_replace_sprite_ext",
  	    "font_set_cache_size",
  	    "font_texture_page_size",
  	    "frac",
  	    "game_end",
  	    "game_get_speed",
  	    "game_load",
  	    "game_load_buffer",
  	    "game_restart",
  	    "game_save",
  	    "game_save_buffer",
  	    "game_set_speed",
  	    "gamepad_axis_count",
  	    "gamepad_axis_value",
  	    "gamepad_button_check",
  	    "gamepad_button_check_pressed",
  	    "gamepad_button_check_released",
  	    "gamepad_button_count",
  	    "gamepad_button_value",
  	    "gamepad_get_axis_deadzone",
  	    "gamepad_get_button_threshold",
  	    "gamepad_get_description",
  	    "gamepad_get_device_count",
  	    "gamepad_is_connected",
  	    "gamepad_is_supported",
  	    "gamepad_set_axis_deadzone",
  	    "gamepad_set_button_threshold",
  	    "gamepad_set_color",
  	    "gamepad_set_colour",
  	    "gamepad_set_vibration",
  	    "gesture_double_tap_distance",
  	    "gesture_double_tap_time",
  	    "gesture_drag_distance",
  	    "gesture_drag_time",
  	    "gesture_flick_speed",
  	    "gesture_get_double_tap_distance",
  	    "gesture_get_double_tap_time",
  	    "gesture_get_drag_distance",
  	    "gesture_get_drag_time",
  	    "gesture_get_flick_speed",
  	    "gesture_get_pinch_angle_away",
  	    "gesture_get_pinch_angle_towards",
  	    "gesture_get_pinch_distance",
  	    "gesture_get_rotate_angle",
  	    "gesture_get_rotate_time",
  	    "gesture_get_tap_count",
  	    "gesture_pinch_angle_away",
  	    "gesture_pinch_angle_towards",
  	    "gesture_pinch_distance",
  	    "gesture_rotate_angle",
  	    "gesture_rotate_time",
  	    "gesture_tap_count",
  	    "get_integer",
  	    "get_integer_async",
  	    "get_login_async",
  	    "get_open_filename",
  	    "get_open_filename_ext",
  	    "get_save_filename",
  	    "get_save_filename_ext",
  	    "get_string",
  	    "get_string_async",
  	    "get_timer",
  	    "gml_pragma",
  	    "gml_release_mode",
  	    "gpu_get_alphatestenable",
  	    "gpu_get_alphatestfunc",
  	    "gpu_get_alphatestref",
  	    "gpu_get_blendenable",
  	    "gpu_get_blendmode",
  	    "gpu_get_blendmode_dest",
  	    "gpu_get_blendmode_destalpha",
  	    "gpu_get_blendmode_ext",
  	    "gpu_get_blendmode_ext_sepalpha",
  	    "gpu_get_blendmode_src",
  	    "gpu_get_blendmode_srcalpha",
  	    "gpu_get_colorwriteenable",
  	    "gpu_get_colourwriteenable",
  	    "gpu_get_cullmode",
  	    "gpu_get_fog",
  	    "gpu_get_lightingenable",
  	    "gpu_get_state",
  	    "gpu_get_tex_filter",
  	    "gpu_get_tex_filter_ext",
  	    "gpu_get_tex_max_aniso",
  	    "gpu_get_tex_max_aniso_ext",
  	    "gpu_get_tex_max_mip",
  	    "gpu_get_tex_max_mip_ext",
  	    "gpu_get_tex_min_mip",
  	    "gpu_get_tex_min_mip_ext",
  	    "gpu_get_tex_mip_bias",
  	    "gpu_get_tex_mip_bias_ext",
  	    "gpu_get_tex_mip_enable",
  	    "gpu_get_tex_mip_enable_ext",
  	    "gpu_get_tex_mip_filter",
  	    "gpu_get_tex_mip_filter_ext",
  	    "gpu_get_tex_repeat",
  	    "gpu_get_tex_repeat_ext",
  	    "gpu_get_texfilter",
  	    "gpu_get_texfilter_ext",
  	    "gpu_get_texrepeat",
  	    "gpu_get_texrepeat_ext",
  	    "gpu_get_zfunc",
  	    "gpu_get_ztestenable",
  	    "gpu_get_zwriteenable",
  	    "gpu_pop_state",
  	    "gpu_push_state",
  	    "gpu_set_alphatestenable",
  	    "gpu_set_alphatestfunc",
  	    "gpu_set_alphatestref",
  	    "gpu_set_blendenable",
  	    "gpu_set_blendmode",
  	    "gpu_set_blendmode_ext",
  	    "gpu_set_blendmode_ext_sepalpha",
  	    "gpu_set_colorwriteenable",
  	    "gpu_set_colourwriteenable",
  	    "gpu_set_cullmode",
  	    "gpu_set_fog",
  	    "gpu_set_lightingenable",
  	    "gpu_set_state",
  	    "gpu_set_tex_filter",
  	    "gpu_set_tex_filter_ext",
  	    "gpu_set_tex_max_aniso",
  	    "gpu_set_tex_max_aniso_ext",
  	    "gpu_set_tex_max_mip",
  	    "gpu_set_tex_max_mip_ext",
  	    "gpu_set_tex_min_mip",
  	    "gpu_set_tex_min_mip_ext",
  	    "gpu_set_tex_mip_bias",
  	    "gpu_set_tex_mip_bias_ext",
  	    "gpu_set_tex_mip_enable",
  	    "gpu_set_tex_mip_enable_ext",
  	    "gpu_set_tex_mip_filter",
  	    "gpu_set_tex_mip_filter_ext",
  	    "gpu_set_tex_repeat",
  	    "gpu_set_tex_repeat_ext",
  	    "gpu_set_texfilter",
  	    "gpu_set_texfilter_ext",
  	    "gpu_set_texrepeat",
  	    "gpu_set_texrepeat_ext",
  	    "gpu_set_zfunc",
  	    "gpu_set_ztestenable",
  	    "gpu_set_zwriteenable",
  	    "highscore_add",
  	    "highscore_clear",
  	    "highscore_name",
  	    "highscore_value",
  	    "http_get",
  	    "http_get_file",
  	    "http_post_string",
  	    "http_request",
  	    "iap_acquire",
  	    "iap_activate",
  	    "iap_consume",
  	    "iap_enumerate_products",
  	    "iap_product_details",
  	    "iap_purchase_details",
  	    "iap_restore_all",
  	    "iap_status",
  	    "ini_close",
  	    "ini_key_delete",
  	    "ini_key_exists",
  	    "ini_open",
  	    "ini_open_from_string",
  	    "ini_read_real",
  	    "ini_read_string",
  	    "ini_section_delete",
  	    "ini_section_exists",
  	    "ini_write_real",
  	    "ini_write_string",
  	    "instance_activate_all",
  	    "instance_activate_layer",
  	    "instance_activate_object",
  	    "instance_activate_region",
  	    "instance_change",
  	    "instance_copy",
  	    "instance_create",
  	    "instance_create_depth",
  	    "instance_create_layer",
  	    "instance_deactivate_all",
  	    "instance_deactivate_layer",
  	    "instance_deactivate_object",
  	    "instance_deactivate_region",
  	    "instance_destroy",
  	    "instance_exists",
  	    "instance_find",
  	    "instance_furthest",
  	    "instance_id_get",
  	    "instance_nearest",
  	    "instance_number",
  	    "instance_place",
  	    "instance_place_list",
  	    "instance_position",
  	    "instance_position_list",
  	    "int64",
  	    "io_clear",
  	    "irandom",
  	    "irandom_range",
  	    "is_array",
  	    "is_bool",
  	    "is_infinity",
  	    "is_int32",
  	    "is_int64",
  	    "is_matrix",
  	    "is_method",
  	    "is_nan",
  	    "is_numeric",
  	    "is_ptr",
  	    "is_real",
  	    "is_string",
  	    "is_struct",
  	    "is_undefined",
  	    "is_vec3",
  	    "is_vec4",
  	    "json_decode",
  	    "json_encode",
  	    "keyboard_check",
  	    "keyboard_check_direct",
  	    "keyboard_check_pressed",
  	    "keyboard_check_released",
  	    "keyboard_clear",
  	    "keyboard_get_map",
  	    "keyboard_get_numlock",
  	    "keyboard_key_press",
  	    "keyboard_key_release",
  	    "keyboard_set_map",
  	    "keyboard_set_numlock",
  	    "keyboard_unset_map",
  	    "keyboard_virtual_height",
  	    "keyboard_virtual_hide",
  	    "keyboard_virtual_show",
  	    "keyboard_virtual_status",
  	    "layer_add_instance",
  	    "layer_background_alpha",
  	    "layer_background_blend",
  	    "layer_background_change",
  	    "layer_background_create",
  	    "layer_background_destroy",
  	    "layer_background_exists",
  	    "layer_background_get_alpha",
  	    "layer_background_get_blend",
  	    "layer_background_get_htiled",
  	    "layer_background_get_id",
  	    "layer_background_get_index",
  	    "layer_background_get_speed",
  	    "layer_background_get_sprite",
  	    "layer_background_get_stretch",
  	    "layer_background_get_visible",
  	    "layer_background_get_vtiled",
  	    "layer_background_get_xscale",
  	    "layer_background_get_yscale",
  	    "layer_background_htiled",
  	    "layer_background_index",
  	    "layer_background_speed",
  	    "layer_background_sprite",
  	    "layer_background_stretch",
  	    "layer_background_visible",
  	    "layer_background_vtiled",
  	    "layer_background_xscale",
  	    "layer_background_yscale",
  	    "layer_create",
  	    "layer_depth",
  	    "layer_destroy",
  	    "layer_destroy_instances",
  	    "layer_element_move",
  	    "layer_exists",
  	    "layer_force_draw_depth",
  	    "layer_get_all",
  	    "layer_get_all_elements",
  	    "layer_get_depth",
  	    "layer_get_element_layer",
  	    "layer_get_element_type",
  	    "layer_get_forced_depth",
  	    "layer_get_hspeed",
  	    "layer_get_id",
  	    "layer_get_id_at_depth",
  	    "layer_get_name",
  	    "layer_get_script_begin",
  	    "layer_get_script_end",
  	    "layer_get_shader",
  	    "layer_get_target_room",
  	    "layer_get_visible",
  	    "layer_get_vspeed",
  	    "layer_get_x",
  	    "layer_get_y",
  	    "layer_has_instance",
  	    "layer_hspeed",
  	    "layer_instance_get_instance",
  	    "layer_is_draw_depth_forced",
  	    "layer_reset_target_room",
  	    "layer_script_begin",
  	    "layer_script_end",
  	    "layer_set_target_room",
  	    "layer_set_visible",
  	    "layer_shader",
  	    "layer_sprite_alpha",
  	    "layer_sprite_angle",
  	    "layer_sprite_blend",
  	    "layer_sprite_change",
  	    "layer_sprite_create",
  	    "layer_sprite_destroy",
  	    "layer_sprite_exists",
  	    "layer_sprite_get_alpha",
  	    "layer_sprite_get_angle",
  	    "layer_sprite_get_blend",
  	    "layer_sprite_get_id",
  	    "layer_sprite_get_index",
  	    "layer_sprite_get_speed",
  	    "layer_sprite_get_sprite",
  	    "layer_sprite_get_x",
  	    "layer_sprite_get_xscale",
  	    "layer_sprite_get_y",
  	    "layer_sprite_get_yscale",
  	    "layer_sprite_index",
  	    "layer_sprite_speed",
  	    "layer_sprite_x",
  	    "layer_sprite_xscale",
  	    "layer_sprite_y",
  	    "layer_sprite_yscale",
  	    "layer_tile_alpha",
  	    "layer_tile_blend",
  	    "layer_tile_change",
  	    "layer_tile_create",
  	    "layer_tile_destroy",
  	    "layer_tile_exists",
  	    "layer_tile_get_alpha",
  	    "layer_tile_get_blend",
  	    "layer_tile_get_region",
  	    "layer_tile_get_sprite",
  	    "layer_tile_get_visible",
  	    "layer_tile_get_x",
  	    "layer_tile_get_xscale",
  	    "layer_tile_get_y",
  	    "layer_tile_get_yscale",
  	    "layer_tile_region",
  	    "layer_tile_visible",
  	    "layer_tile_x",
  	    "layer_tile_xscale",
  	    "layer_tile_y",
  	    "layer_tile_yscale",
  	    "layer_tilemap_create",
  	    "layer_tilemap_destroy",
  	    "layer_tilemap_exists",
  	    "layer_tilemap_get_id",
  	    "layer_vspeed",
  	    "layer_x",
  	    "layer_y",
  	    "lengthdir_x",
  	    "lengthdir_y",
  	    "lerp",
  	    "ln",
  	    "load_csv",
  	    "log10",
  	    "log2",
  	    "logn",
  	    "make_color_hsv",
  	    "make_color_rgb",
  	    "make_colour_hsv",
  	    "make_colour_rgb",
  	    "math_get_epsilon",
  	    "math_set_epsilon",
  	    "matrix_build",
  	    "matrix_build_identity",
  	    "matrix_build_lookat",
  	    "matrix_build_projection_ortho",
  	    "matrix_build_projection_perspective",
  	    "matrix_build_projection_perspective_fov",
  	    "matrix_get",
  	    "matrix_multiply",
  	    "matrix_set",
  	    "matrix_stack_clear",
  	    "matrix_stack_is_empty",
  	    "matrix_stack_multiply",
  	    "matrix_stack_pop",
  	    "matrix_stack_push",
  	    "matrix_stack_set",
  	    "matrix_stack_top",
  	    "matrix_transform_vertex",
  	    "max",
  	    "md5_file",
  	    "md5_string_unicode",
  	    "md5_string_utf8",
  	    "mean",
  	    "median",
  	    "merge_color",
  	    "merge_colour",
  	    "min",
  	    "motion_add",
  	    "motion_set",
  	    "mouse_check_button",
  	    "mouse_check_button_pressed",
  	    "mouse_check_button_released",
  	    "mouse_clear",
  	    "mouse_wheel_down",
  	    "mouse_wheel_up",
  	    "move_bounce_all",
  	    "move_bounce_solid",
  	    "move_contact_all",
  	    "move_contact_solid",
  	    "move_outside_all",
  	    "move_outside_solid",
  	    "move_random",
  	    "move_snap",
  	    "move_towards_point",
  	    "move_wrap",
  	    "mp_grid_add_cell",
  	    "mp_grid_add_instances",
  	    "mp_grid_add_rectangle",
  	    "mp_grid_clear_all",
  	    "mp_grid_clear_cell",
  	    "mp_grid_clear_rectangle",
  	    "mp_grid_create",
  	    "mp_grid_destroy",
  	    "mp_grid_draw",
  	    "mp_grid_get_cell",
  	    "mp_grid_path",
  	    "mp_grid_to_ds_grid",
  	    "mp_linear_path",
  	    "mp_linear_path_object",
  	    "mp_linear_step",
  	    "mp_linear_step_object",
  	    "mp_potential_path",
  	    "mp_potential_path_object",
  	    "mp_potential_settings",
  	    "mp_potential_step",
  	    "mp_potential_step_object",
  	    "network_connect",
  	    "network_connect_raw",
  	    "network_create_server",
  	    "network_create_server_raw",
  	    "network_create_socket",
  	    "network_create_socket_ext",
  	    "network_destroy",
  	    "network_resolve",
  	    "network_send_broadcast",
  	    "network_send_packet",
  	    "network_send_raw",
  	    "network_send_udp",
  	    "network_send_udp_raw",
  	    "network_set_config",
  	    "network_set_timeout",
  	    "object_exists",
  	    "object_get_depth",
  	    "object_get_mask",
  	    "object_get_name",
  	    "object_get_parent",
  	    "object_get_persistent",
  	    "object_get_physics",
  	    "object_get_solid",
  	    "object_get_sprite",
  	    "object_get_visible",
  	    "object_is_ancestor",
  	    "object_set_mask",
  	    "object_set_persistent",
  	    "object_set_solid",
  	    "object_set_sprite",
  	    "object_set_visible",
  	    "ord",
  	    "os_get_config",
  	    "os_get_info",
  	    "os_get_language",
  	    "os_get_region",
  	    "os_is_network_connected",
  	    "os_is_paused",
  	    "os_lock_orientation",
  	    "os_powersave_enable",
  	    "parameter_count",
  	    "parameter_string",
  	    "part_emitter_burst",
  	    "part_emitter_clear",
  	    "part_emitter_create",
  	    "part_emitter_destroy",
  	    "part_emitter_destroy_all",
  	    "part_emitter_exists",
  	    "part_emitter_region",
  	    "part_emitter_stream",
  	    "part_particles_clear",
  	    "part_particles_count",
  	    "part_particles_create",
  	    "part_particles_create_color",
  	    "part_particles_create_colour",
  	    "part_system_automatic_draw",
  	    "part_system_automatic_update",
  	    "part_system_clear",
  	    "part_system_create",
  	    "part_system_create_layer",
  	    "part_system_depth",
  	    "part_system_destroy",
  	    "part_system_draw_order",
  	    "part_system_drawit",
  	    "part_system_exists",
  	    "part_system_get_layer",
  	    "part_system_layer",
  	    "part_system_position",
  	    "part_system_update",
  	    "part_type_alpha1",
  	    "part_type_alpha2",
  	    "part_type_alpha3",
  	    "part_type_blend",
  	    "part_type_clear",
  	    "part_type_color1",
  	    "part_type_color2",
  	    "part_type_color3",
  	    "part_type_color_hsv",
  	    "part_type_color_mix",
  	    "part_type_color_rgb",
  	    "part_type_colour1",
  	    "part_type_colour2",
  	    "part_type_colour3",
  	    "part_type_colour_hsv",
  	    "part_type_colour_mix",
  	    "part_type_colour_rgb",
  	    "part_type_create",
  	    "part_type_death",
  	    "part_type_destroy",
  	    "part_type_direction",
  	    "part_type_exists",
  	    "part_type_gravity",
  	    "part_type_life",
  	    "part_type_orientation",
  	    "part_type_scale",
  	    "part_type_shape",
  	    "part_type_size",
  	    "part_type_speed",
  	    "part_type_sprite",
  	    "part_type_step",
  	    "path_add",
  	    "path_add_point",
  	    "path_append",
  	    "path_assign",
  	    "path_change_point",
  	    "path_clear_points",
  	    "path_delete",
  	    "path_delete_point",
  	    "path_duplicate",
  	    "path_end",
  	    "path_exists",
  	    "path_flip",
  	    "path_get_closed",
  	    "path_get_kind",
  	    "path_get_length",
  	    "path_get_name",
  	    "path_get_number",
  	    "path_get_point_speed",
  	    "path_get_point_x",
  	    "path_get_point_y",
  	    "path_get_precision",
  	    "path_get_speed",
  	    "path_get_time",
  	    "path_get_x",
  	    "path_get_y",
  	    "path_insert_point",
  	    "path_mirror",
  	    "path_rescale",
  	    "path_reverse",
  	    "path_rotate",
  	    "path_set_closed",
  	    "path_set_kind",
  	    "path_set_precision",
  	    "path_shift",
  	    "path_start",
  	    "physics_apply_angular_impulse",
  	    "physics_apply_force",
  	    "physics_apply_impulse",
  	    "physics_apply_local_force",
  	    "physics_apply_local_impulse",
  	    "physics_apply_torque",
  	    "physics_draw_debug",
  	    "physics_fixture_add_point",
  	    "physics_fixture_bind",
  	    "physics_fixture_bind_ext",
  	    "physics_fixture_create",
  	    "physics_fixture_delete",
  	    "physics_fixture_set_angular_damping",
  	    "physics_fixture_set_awake",
  	    "physics_fixture_set_box_shape",
  	    "physics_fixture_set_chain_shape",
  	    "physics_fixture_set_circle_shape",
  	    "physics_fixture_set_collision_group",
  	    "physics_fixture_set_density",
  	    "physics_fixture_set_edge_shape",
  	    "physics_fixture_set_friction",
  	    "physics_fixture_set_kinematic",
  	    "physics_fixture_set_linear_damping",
  	    "physics_fixture_set_polygon_shape",
  	    "physics_fixture_set_restitution",
  	    "physics_fixture_set_sensor",
  	    "physics_get_density",
  	    "physics_get_friction",
  	    "physics_get_restitution",
  	    "physics_joint_delete",
  	    "physics_joint_distance_create",
  	    "physics_joint_enable_motor",
  	    "physics_joint_friction_create",
  	    "physics_joint_gear_create",
  	    "physics_joint_get_value",
  	    "physics_joint_prismatic_create",
  	    "physics_joint_pulley_create",
  	    "physics_joint_revolute_create",
  	    "physics_joint_rope_create",
  	    "physics_joint_set_value",
  	    "physics_joint_weld_create",
  	    "physics_joint_wheel_create",
  	    "physics_mass_properties",
  	    "physics_particle_count",
  	    "physics_particle_create",
  	    "physics_particle_delete",
  	    "physics_particle_delete_region_box",
  	    "physics_particle_delete_region_circle",
  	    "physics_particle_delete_region_poly",
  	    "physics_particle_draw",
  	    "physics_particle_draw_ext",
  	    "physics_particle_get_damping",
  	    "physics_particle_get_data",
  	    "physics_particle_get_data_particle",
  	    "physics_particle_get_density",
  	    "physics_particle_get_gravity_scale",
  	    "physics_particle_get_group_flags",
  	    "physics_particle_get_max_count",
  	    "physics_particle_get_radius",
  	    "physics_particle_group_add_point",
  	    "physics_particle_group_begin",
  	    "physics_particle_group_box",
  	    "physics_particle_group_circle",
  	    "physics_particle_group_count",
  	    "physics_particle_group_delete",
  	    "physics_particle_group_end",
  	    "physics_particle_group_get_ang_vel",
  	    "physics_particle_group_get_angle",
  	    "physics_particle_group_get_centre_x",
  	    "physics_particle_group_get_centre_y",
  	    "physics_particle_group_get_data",
  	    "physics_particle_group_get_inertia",
  	    "physics_particle_group_get_mass",
  	    "physics_particle_group_get_vel_x",
  	    "physics_particle_group_get_vel_y",
  	    "physics_particle_group_get_x",
  	    "physics_particle_group_get_y",
  	    "physics_particle_group_join",
  	    "physics_particle_group_polygon",
  	    "physics_particle_set_category_flags",
  	    "physics_particle_set_damping",
  	    "physics_particle_set_density",
  	    "physics_particle_set_flags",
  	    "physics_particle_set_gravity_scale",
  	    "physics_particle_set_group_flags",
  	    "physics_particle_set_max_count",
  	    "physics_particle_set_radius",
  	    "physics_pause_enable",
  	    "physics_remove_fixture",
  	    "physics_set_density",
  	    "physics_set_friction",
  	    "physics_set_restitution",
  	    "physics_test_overlap",
  	    "physics_world_create",
  	    "physics_world_draw_debug",
  	    "physics_world_gravity",
  	    "physics_world_update_iterations",
  	    "physics_world_update_speed",
  	    "place_empty",
  	    "place_free",
  	    "place_meeting",
  	    "place_snapped",
  	    "point_direction",
  	    "point_distance",
  	    "point_distance_3d",
  	    "point_in_circle",
  	    "point_in_rectangle",
  	    "point_in_triangle",
  	    "position_change",
  	    "position_destroy",
  	    "position_empty",
  	    "position_meeting",
  	    "power",
  	    "ptr",
  	    "push_cancel_local_notification",
  	    "push_get_first_local_notification",
  	    "push_get_next_local_notification",
  	    "push_local_notification",
  	    "radtodeg",
  	    "random",
  	    "random_get_seed",
  	    "random_range",
  	    "random_set_seed",
  	    "randomise",
  	    "randomize",
  	    "real",
  	    "rectangle_in_circle",
  	    "rectangle_in_rectangle",
  	    "rectangle_in_triangle",
  	    "room_add",
  	    "room_assign",
  	    "room_duplicate",
  	    "room_exists",
  	    "room_get_camera",
  	    "room_get_name",
  	    "room_get_viewport",
  	    "room_goto",
  	    "room_goto_next",
  	    "room_goto_previous",
  	    "room_instance_add",
  	    "room_instance_clear",
  	    "room_next",
  	    "room_previous",
  	    "room_restart",
  	    "room_set_background_color",
  	    "room_set_background_colour",
  	    "room_set_camera",
  	    "room_set_height",
  	    "room_set_persistent",
  	    "room_set_view",
  	    "room_set_view_enabled",
  	    "room_set_viewport",
  	    "room_set_width",
  	    "round",
  	    "screen_save",
  	    "screen_save_part",
  	    "script_execute",
  	    "script_exists",
  	    "script_get_name",
  	    "sha1_file",
  	    "sha1_string_unicode",
  	    "sha1_string_utf8",
  	    "shader_current",
  	    "shader_enable_corner_id",
  	    "shader_get_name",
  	    "shader_get_sampler_index",
  	    "shader_get_uniform",
  	    "shader_is_compiled",
  	    "shader_reset",
  	    "shader_set",
  	    "shader_set_uniform_f",
  	    "shader_set_uniform_f_array",
  	    "shader_set_uniform_i",
  	    "shader_set_uniform_i_array",
  	    "shader_set_uniform_matrix",
  	    "shader_set_uniform_matrix_array",
  	    "shaders_are_supported",
  	    "shop_leave_rating",
  	    "show_debug_message",
  	    "show_debug_overlay",
  	    "show_error",
  	    "show_message",
  	    "show_message_async",
  	    "show_question",
  	    "show_question_async",
  	    "sign",
  	    "sin",
  	    "skeleton_animation_clear",
  	    "skeleton_animation_get",
  	    "skeleton_animation_get_duration",
  	    "skeleton_animation_get_ext",
  	    "skeleton_animation_get_frame",
  	    "skeleton_animation_get_frames",
  	    "skeleton_animation_list",
  	    "skeleton_animation_mix",
  	    "skeleton_animation_set",
  	    "skeleton_animation_set_ext",
  	    "skeleton_animation_set_frame",
  	    "skeleton_attachment_create",
  	    "skeleton_attachment_get",
  	    "skeleton_attachment_set",
  	    "skeleton_bone_data_get",
  	    "skeleton_bone_data_set",
  	    "skeleton_bone_state_get",
  	    "skeleton_bone_state_set",
  	    "skeleton_collision_draw_set",
  	    "skeleton_get_bounds",
  	    "skeleton_get_minmax",
  	    "skeleton_get_num_bounds",
  	    "skeleton_skin_get",
  	    "skeleton_skin_list",
  	    "skeleton_skin_set",
  	    "skeleton_slot_data",
  	    "sprite_add",
  	    "sprite_add_from_surface",
  	    "sprite_assign",
  	    "sprite_collision_mask",
  	    "sprite_create_from_surface",
  	    "sprite_delete",
  	    "sprite_duplicate",
  	    "sprite_exists",
  	    "sprite_flush",
  	    "sprite_flush_multi",
  	    "sprite_get_bbox_bottom",
  	    "sprite_get_bbox_left",
  	    "sprite_get_bbox_right",
  	    "sprite_get_bbox_top",
  	    "sprite_get_height",
  	    "sprite_get_name",
  	    "sprite_get_number",
  	    "sprite_get_speed",
  	    "sprite_get_speed_type",
  	    "sprite_get_texture",
  	    "sprite_get_tpe",
  	    "sprite_get_uvs",
  	    "sprite_get_width",
  	    "sprite_get_xoffset",
  	    "sprite_get_yoffset",
  	    "sprite_merge",
  	    "sprite_prefetch",
  	    "sprite_prefetch_multi",
  	    "sprite_replace",
  	    "sprite_save",
  	    "sprite_save_strip",
  	    "sprite_set_alpha_from_sprite",
  	    "sprite_set_cache_size",
  	    "sprite_set_cache_size_ext",
  	    "sprite_set_offset",
  	    "sprite_set_speed",
  	    "sqr",
  	    "sqrt",
  	    "steam_activate_overlay",
  	    "steam_activate_overlay_browser",
  	    "steam_activate_overlay_store",
  	    "steam_activate_overlay_user",
  	    "steam_available_languages",
  	    "steam_clear_achievement",
  	    "steam_create_leaderboard",
  	    "steam_current_game_language",
  	    "steam_download_friends_scores",
  	    "steam_download_scores",
  	    "steam_download_scores_around_user",
  	    "steam_file_delete",
  	    "steam_file_exists",
  	    "steam_file_persisted",
  	    "steam_file_read",
  	    "steam_file_share",
  	    "steam_file_size",
  	    "steam_file_write",
  	    "steam_file_write_file",
  	    "steam_get_achievement",
  	    "steam_get_app_id",
  	    "steam_get_persona_name",
  	    "steam_get_quota_free",
  	    "steam_get_quota_total",
  	    "steam_get_stat_avg_rate",
  	    "steam_get_stat_float",
  	    "steam_get_stat_int",
  	    "steam_get_user_account_id",
  	    "steam_get_user_persona_name",
  	    "steam_get_user_steam_id",
  	    "steam_initialised",
  	    "steam_is_cloud_enabled_for_account",
  	    "steam_is_cloud_enabled_for_app",
  	    "steam_is_overlay_activated",
  	    "steam_is_overlay_enabled",
  	    "steam_is_screenshot_requested",
  	    "steam_is_user_logged_on",
  	    "steam_reset_all_stats",
  	    "steam_reset_all_stats_achievements",
  	    "steam_send_screenshot",
  	    "steam_set_achievement",
  	    "steam_set_stat_avg_rate",
  	    "steam_set_stat_float",
  	    "steam_set_stat_int",
  	    "steam_stats_ready",
  	    "steam_ugc_create_item",
  	    "steam_ugc_create_query_all",
  	    "steam_ugc_create_query_all_ex",
  	    "steam_ugc_create_query_user",
  	    "steam_ugc_create_query_user_ex",
  	    "steam_ugc_download",
  	    "steam_ugc_get_item_install_info",
  	    "steam_ugc_get_item_update_info",
  	    "steam_ugc_get_item_update_progress",
  	    "steam_ugc_get_subscribed_items",
  	    "steam_ugc_num_subscribed_items",
  	    "steam_ugc_query_add_excluded_tag",
  	    "steam_ugc_query_add_required_tag",
  	    "steam_ugc_query_set_allow_cached_response",
  	    "steam_ugc_query_set_cloud_filename_filter",
  	    "steam_ugc_query_set_match_any_tag",
  	    "steam_ugc_query_set_ranked_by_trend_days",
  	    "steam_ugc_query_set_return_long_description",
  	    "steam_ugc_query_set_return_total_only",
  	    "steam_ugc_query_set_search_text",
  	    "steam_ugc_request_item_details",
  	    "steam_ugc_send_query",
  	    "steam_ugc_set_item_content",
  	    "steam_ugc_set_item_description",
  	    "steam_ugc_set_item_preview",
  	    "steam_ugc_set_item_tags",
  	    "steam_ugc_set_item_title",
  	    "steam_ugc_set_item_visibility",
  	    "steam_ugc_start_item_update",
  	    "steam_ugc_submit_item_update",
  	    "steam_ugc_subscribe_item",
  	    "steam_ugc_unsubscribe_item",
  	    "steam_upload_score",
  	    "steam_upload_score_buffer",
  	    "steam_upload_score_buffer_ext",
  	    "steam_upload_score_ext",
  	    "steam_user_installed_dlc",
  	    "steam_user_owns_dlc",
  	    "string",
  	    "string_byte_at",
  	    "string_byte_length",
  	    "string_char_at",
  	    "string_copy",
  	    "string_count",
  	    "string_delete",
  	    "string_digits",
  	    "string_format",
  	    "string_hash_to_newline",
  	    "string_height",
  	    "string_height_ext",
  	    "string_insert",
  	    "string_length",
  	    "string_letters",
  	    "string_lettersdigits",
  	    "string_lower",
  	    "string_ord_at",
  	    "string_pos",
  	    "string_repeat",
  	    "string_replace",
  	    "string_replace_all",
  	    "string_set_byte_at",
  	    "string_upper",
  	    "string_width",
  	    "string_width_ext",
  	    "surface_copy",
  	    "surface_copy_part",
  	    "surface_create",
  	    "surface_create_ext",
  	    "surface_depth_disable",
  	    "surface_exists",
  	    "surface_free",
  	    "surface_get_depth_disable",
  	    "surface_get_height",
  	    "surface_get_texture",
  	    "surface_get_width",
  	    "surface_getpixel",
  	    "surface_getpixel_ext",
  	    "surface_reset_target",
  	    "surface_resize",
  	    "surface_save",
  	    "surface_save_part",
  	    "surface_set_target",
  	    "surface_set_target_ext",
  	    "tan",
  	    "texture_get_height",
  	    "texture_get_texel_height",
  	    "texture_get_texel_width",
  	    "texture_get_uvs",
  	    "texture_get_width",
  	    "texture_global_scale",
  	    "texture_set_stage",
  	    "tile_get_empty",
  	    "tile_get_flip",
  	    "tile_get_index",
  	    "tile_get_mirror",
  	    "tile_get_rotate",
  	    "tile_set_empty",
  	    "tile_set_flip",
  	    "tile_set_index",
  	    "tile_set_mirror",
  	    "tile_set_rotate",
  	    "tilemap_clear",
  	    "tilemap_get",
  	    "tilemap_get_at_pixel",
  	    "tilemap_get_cell_x_at_pixel",
  	    "tilemap_get_cell_y_at_pixel",
  	    "tilemap_get_frame",
  	    "tilemap_get_global_mask",
  	    "tilemap_get_height",
  	    "tilemap_get_mask",
  	    "tilemap_get_tile_height",
  	    "tilemap_get_tile_width",
  	    "tilemap_get_tileset",
  	    "tilemap_get_width",
  	    "tilemap_get_x",
  	    "tilemap_get_y",
  	    "tilemap_set",
  	    "tilemap_set_at_pixel",
  	    "tilemap_set_global_mask",
  	    "tilemap_set_mask",
  	    "tilemap_tileset",
  	    "tilemap_x",
  	    "tilemap_y",
  	    "timeline_add",
  	    "timeline_clear",
  	    "timeline_delete",
  	    "timeline_exists",
  	    "timeline_get_name",
  	    "timeline_max_moment",
  	    "timeline_moment_add_script",
  	    "timeline_moment_clear",
  	    "timeline_size",
  	    "typeof",
  	    "url_get_domain",
  	    "url_open",
  	    "url_open_ext",
  	    "url_open_full",
  	    "variable_global_exists",
  	    "variable_global_get",
  	    "variable_global_set",
  	    "variable_instance_exists",
  	    "variable_instance_get",
  	    "variable_instance_get_names",
  	    "variable_instance_set",
  	    "variable_struct_exists",
  	    "variable_struct_get",
  	    "variable_struct_get_names",
  	    "variable_struct_names_count",
  	    "variable_struct_remove",
  	    "variable_struct_set",
  	    "vertex_argb",
  	    "vertex_begin",
  	    "vertex_color",
  	    "vertex_colour",
  	    "vertex_create_buffer",
  	    "vertex_create_buffer_ext",
  	    "vertex_create_buffer_from_buffer",
  	    "vertex_create_buffer_from_buffer_ext",
  	    "vertex_delete_buffer",
  	    "vertex_end",
  	    "vertex_float1",
  	    "vertex_float2",
  	    "vertex_float3",
  	    "vertex_float4",
  	    "vertex_format_add_color",
  	    "vertex_format_add_colour",
  	    "vertex_format_add_custom",
  	    "vertex_format_add_normal",
  	    "vertex_format_add_position",
  	    "vertex_format_add_position_3d",
  	    "vertex_format_add_texcoord",
  	    "vertex_format_add_textcoord",
  	    "vertex_format_begin",
  	    "vertex_format_delete",
  	    "vertex_format_end",
  	    "vertex_freeze",
  	    "vertex_get_buffer_size",
  	    "vertex_get_number",
  	    "vertex_normal",
  	    "vertex_position",
  	    "vertex_position_3d",
  	    "vertex_submit",
  	    "vertex_texcoord",
  	    "vertex_ubyte4",
  	    "view_get_camera",
  	    "view_get_hport",
  	    "view_get_surface_id",
  	    "view_get_visible",
  	    "view_get_wport",
  	    "view_get_xport",
  	    "view_get_yport",
  	    "view_set_camera",
  	    "view_set_hport",
  	    "view_set_surface_id",
  	    "view_set_visible",
  	    "view_set_wport",
  	    "view_set_xport",
  	    "view_set_yport",
  	    "virtual_key_add",
  	    "virtual_key_delete",
  	    "virtual_key_hide",
  	    "virtual_key_show",
  	    "win8_appbar_add_element",
  	    "win8_appbar_enable",
  	    "win8_appbar_remove_element",
  	    "win8_device_touchscreen_available",
  	    "win8_license_initialize_sandbox",
  	    "win8_license_trial_version",
  	    "win8_livetile_badge_clear",
  	    "win8_livetile_badge_notification",
  	    "win8_livetile_notification_begin",
  	    "win8_livetile_notification_end",
  	    "win8_livetile_notification_expiry",
  	    "win8_livetile_notification_image_add",
  	    "win8_livetile_notification_secondary_begin",
  	    "win8_livetile_notification_tag",
  	    "win8_livetile_notification_text_add",
  	    "win8_livetile_queue_enable",
  	    "win8_livetile_tile_clear",
  	    "win8_livetile_tile_notification",
  	    "win8_search_add_suggestions",
  	    "win8_search_disable",
  	    "win8_search_enable",
  	    "win8_secondarytile_badge_notification",
  	    "win8_secondarytile_delete",
  	    "win8_secondarytile_pin",
  	    "win8_settingscharm_add_entry",
  	    "win8_settingscharm_add_html_entry",
  	    "win8_settingscharm_add_xaml_entry",
  	    "win8_settingscharm_get_xaml_property",
  	    "win8_settingscharm_remove_entry",
  	    "win8_settingscharm_set_xaml_property",
  	    "win8_share_file",
  	    "win8_share_image",
  	    "win8_share_screenshot",
  	    "win8_share_text",
  	    "win8_share_url",
  	    "window_center",
  	    "window_device",
  	    "window_get_caption",
  	    "window_get_color",
  	    "window_get_colour",
  	    "window_get_cursor",
  	    "window_get_fullscreen",
  	    "window_get_height",
  	    "window_get_visible_rects",
  	    "window_get_width",
  	    "window_get_x",
  	    "window_get_y",
  	    "window_handle",
  	    "window_has_focus",
  	    "window_mouse_get_x",
  	    "window_mouse_get_y",
  	    "window_mouse_set",
  	    "window_set_caption",
  	    "window_set_color",
  	    "window_set_colour",
  	    "window_set_cursor",
  	    "window_set_fullscreen",
  	    "window_set_max_height",
  	    "window_set_max_width",
  	    "window_set_min_height",
  	    "window_set_min_width",
  	    "window_set_position",
  	    "window_set_rectangle",
  	    "window_set_size",
  	    "window_view_mouse_get_x",
  	    "window_view_mouse_get_y",
  	    "window_views_mouse_get_x",
  	    "window_views_mouse_get_y",
  	    "winphone_license_trial_version",
  	    "winphone_tile_back_content",
  	    "winphone_tile_back_content_wide",
  	    "winphone_tile_back_image",
  	    "winphone_tile_back_image_wide",
  	    "winphone_tile_back_title",
  	    "winphone_tile_background_color",
  	    "winphone_tile_background_colour",
  	    "winphone_tile_count",
  	    "winphone_tile_cycle_images",
  	    "winphone_tile_front_image",
  	    "winphone_tile_front_image_small",
  	    "winphone_tile_front_image_wide",
  	    "winphone_tile_icon_image",
  	    "winphone_tile_small_background_image",
  	    "winphone_tile_small_icon_image",
  	    "winphone_tile_title",
  	    "winphone_tile_wide_content",
  	    "zip_unzip"
  	  ];
  	  const LITERALS = [
  	    "all",
  	    "false",
  	    "noone",
  	    "pointer_invalid",
  	    "pointer_null",
  	    "true",
  	    "undefined"
  	  ];
  	  // many of these look like enumerables to me (see comments below)
  	  const SYMBOLS = [
  	    "ANSI_CHARSET",
  	    "ARABIC_CHARSET",
  	    "BALTIC_CHARSET",
  	    "CHINESEBIG5_CHARSET",
  	    "DEFAULT_CHARSET",
  	    "EASTEUROPE_CHARSET",
  	    "GB2312_CHARSET",
  	    "GM_build_date",
  	    "GM_runtime_version",
  	    "GM_version",
  	    "GREEK_CHARSET",
  	    "HANGEUL_CHARSET",
  	    "HEBREW_CHARSET",
  	    "JOHAB_CHARSET",
  	    "MAC_CHARSET",
  	    "OEM_CHARSET",
  	    "RUSSIAN_CHARSET",
  	    "SHIFTJIS_CHARSET",
  	    "SYMBOL_CHARSET",
  	    "THAI_CHARSET",
  	    "TURKISH_CHARSET",
  	    "VIETNAMESE_CHARSET",
  	    "achievement_achievement_info",
  	    "achievement_filter_all_players",
  	    "achievement_filter_favorites_only",
  	    "achievement_filter_friends_only",
  	    "achievement_friends_info",
  	    "achievement_leaderboard_info",
  	    "achievement_our_info",
  	    "achievement_pic_loaded",
  	    "achievement_show_achievement",
  	    "achievement_show_bank",
  	    "achievement_show_friend_picker",
  	    "achievement_show_leaderboard",
  	    "achievement_show_profile",
  	    "achievement_show_purchase_prompt",
  	    "achievement_show_ui",
  	    "achievement_type_achievement_challenge",
  	    "achievement_type_score_challenge",
  	    "asset_font",
  	    "asset_object",
  	    "asset_path",
  	    "asset_room",
  	    "asset_script",
  	    "asset_shader",
  	    "asset_sound",
  	    "asset_sprite",
  	    "asset_tiles",
  	    "asset_timeline",
  	    "asset_unknown",
  	    "audio_3d",
  	    "audio_falloff_exponent_distance",
  	    "audio_falloff_exponent_distance_clamped",
  	    "audio_falloff_inverse_distance",
  	    "audio_falloff_inverse_distance_clamped",
  	    "audio_falloff_linear_distance",
  	    "audio_falloff_linear_distance_clamped",
  	    "audio_falloff_none",
  	    "audio_mono",
  	    "audio_new_system",
  	    "audio_old_system",
  	    "audio_stereo",
  	    "bm_add",
  	    "bm_complex",
  	    "bm_dest_alpha",
  	    "bm_dest_color",
  	    "bm_dest_colour",
  	    "bm_inv_dest_alpha",
  	    "bm_inv_dest_color",
  	    "bm_inv_dest_colour",
  	    "bm_inv_src_alpha",
  	    "bm_inv_src_color",
  	    "bm_inv_src_colour",
  	    "bm_max",
  	    "bm_normal",
  	    "bm_one",
  	    "bm_src_alpha",
  	    "bm_src_alpha_sat",
  	    "bm_src_color",
  	    "bm_src_colour",
  	    "bm_subtract",
  	    "bm_zero",
  	    "browser_chrome",
  	    "browser_edge",
  	    "browser_firefox",
  	    "browser_ie",
  	    "browser_ie_mobile",
  	    "browser_not_a_browser",
  	    "browser_opera",
  	    "browser_safari",
  	    "browser_safari_mobile",
  	    "browser_tizen",
  	    "browser_unknown",
  	    "browser_windows_store",
  	    "buffer_bool",
  	    "buffer_f16",
  	    "buffer_f32",
  	    "buffer_f64",
  	    "buffer_fast",
  	    "buffer_fixed",
  	    "buffer_generalerror",
  	    "buffer_grow",
  	    "buffer_invalidtype",
  	    "buffer_network",
  	    "buffer_outofbounds",
  	    "buffer_outofspace",
  	    "buffer_s16",
  	    "buffer_s32",
  	    "buffer_s8",
  	    "buffer_seek_end",
  	    "buffer_seek_relative",
  	    "buffer_seek_start",
  	    "buffer_string",
  	    "buffer_surface_copy",
  	    "buffer_text",
  	    "buffer_u16",
  	    "buffer_u32",
  	    "buffer_u64",
  	    "buffer_u8",
  	    "buffer_vbuffer",
  	    "buffer_wrap",
  	    "button_type",
  	    "c_aqua",
  	    "c_black",
  	    "c_blue",
  	    "c_dkgray",
  	    "c_fuchsia",
  	    "c_gray",
  	    "c_green",
  	    "c_lime",
  	    "c_ltgray",
  	    "c_maroon",
  	    "c_navy",
  	    "c_olive",
  	    "c_orange",
  	    "c_purple",
  	    "c_red",
  	    "c_silver",
  	    "c_teal",
  	    "c_white",
  	    "c_yellow",
  	    "cmpfunc_always",
  	    "cmpfunc_equal",
  	    "cmpfunc_greater",
  	    "cmpfunc_greaterequal",
  	    "cmpfunc_less",
  	    "cmpfunc_lessequal",
  	    "cmpfunc_never",
  	    "cmpfunc_notequal",
  	    "cr_appstart",
  	    "cr_arrow",
  	    "cr_beam",
  	    "cr_cross",
  	    "cr_default",
  	    "cr_drag",
  	    "cr_handpoint",
  	    "cr_hourglass",
  	    "cr_none",
  	    "cr_size_all",
  	    "cr_size_nesw",
  	    "cr_size_ns",
  	    "cr_size_nwse",
  	    "cr_size_we",
  	    "cr_uparrow",
  	    "cull_clockwise",
  	    "cull_counterclockwise",
  	    "cull_noculling",
  	    "device_emulator",
  	    "device_ios_ipad",
  	    "device_ios_ipad_retina",
  	    "device_ios_iphone",
  	    "device_ios_iphone5",
  	    "device_ios_iphone6",
  	    "device_ios_iphone6plus",
  	    "device_ios_iphone_retina",
  	    "device_ios_unknown",
  	    "device_tablet",
  	    "display_landscape",
  	    "display_landscape_flipped",
  	    "display_portrait",
  	    "display_portrait_flipped",
  	    "dll_cdecl",
  	    "dll_stdcall",
  	    "ds_type_grid",
  	    "ds_type_list",
  	    "ds_type_map",
  	    "ds_type_priority",
  	    "ds_type_queue",
  	    "ds_type_stack",
  	    "ef_cloud",
  	    "ef_ellipse",
  	    "ef_explosion",
  	    "ef_firework",
  	    "ef_flare",
  	    "ef_rain",
  	    "ef_ring",
  	    "ef_smoke",
  	    "ef_smokeup",
  	    "ef_snow",
  	    "ef_spark",
  	    "ef_star",
  	    // for example ev_ are types of events
  	    "ev_alarm",
  	    "ev_animation_end",
  	    "ev_boundary",
  	    "ev_cleanup",
  	    "ev_close_button",
  	    "ev_collision",
  	    "ev_create",
  	    "ev_destroy",
  	    "ev_draw",
  	    "ev_draw_begin",
  	    "ev_draw_end",
  	    "ev_draw_post",
  	    "ev_draw_pre",
  	    "ev_end_of_path",
  	    "ev_game_end",
  	    "ev_game_start",
  	    "ev_gesture",
  	    "ev_gesture_double_tap",
  	    "ev_gesture_drag_end",
  	    "ev_gesture_drag_start",
  	    "ev_gesture_dragging",
  	    "ev_gesture_flick",
  	    "ev_gesture_pinch_end",
  	    "ev_gesture_pinch_in",
  	    "ev_gesture_pinch_out",
  	    "ev_gesture_pinch_start",
  	    "ev_gesture_rotate_end",
  	    "ev_gesture_rotate_start",
  	    "ev_gesture_rotating",
  	    "ev_gesture_tap",
  	    "ev_global_gesture_double_tap",
  	    "ev_global_gesture_drag_end",
  	    "ev_global_gesture_drag_start",
  	    "ev_global_gesture_dragging",
  	    "ev_global_gesture_flick",
  	    "ev_global_gesture_pinch_end",
  	    "ev_global_gesture_pinch_in",
  	    "ev_global_gesture_pinch_out",
  	    "ev_global_gesture_pinch_start",
  	    "ev_global_gesture_rotate_end",
  	    "ev_global_gesture_rotate_start",
  	    "ev_global_gesture_rotating",
  	    "ev_global_gesture_tap",
  	    "ev_global_left_button",
  	    "ev_global_left_press",
  	    "ev_global_left_release",
  	    "ev_global_middle_button",
  	    "ev_global_middle_press",
  	    "ev_global_middle_release",
  	    "ev_global_right_button",
  	    "ev_global_right_press",
  	    "ev_global_right_release",
  	    "ev_gui",
  	    "ev_gui_begin",
  	    "ev_gui_end",
  	    "ev_joystick1_button1",
  	    "ev_joystick1_button2",
  	    "ev_joystick1_button3",
  	    "ev_joystick1_button4",
  	    "ev_joystick1_button5",
  	    "ev_joystick1_button6",
  	    "ev_joystick1_button7",
  	    "ev_joystick1_button8",
  	    "ev_joystick1_down",
  	    "ev_joystick1_left",
  	    "ev_joystick1_right",
  	    "ev_joystick1_up",
  	    "ev_joystick2_button1",
  	    "ev_joystick2_button2",
  	    "ev_joystick2_button3",
  	    "ev_joystick2_button4",
  	    "ev_joystick2_button5",
  	    "ev_joystick2_button6",
  	    "ev_joystick2_button7",
  	    "ev_joystick2_button8",
  	    "ev_joystick2_down",
  	    "ev_joystick2_left",
  	    "ev_joystick2_right",
  	    "ev_joystick2_up",
  	    "ev_keyboard",
  	    "ev_keypress",
  	    "ev_keyrelease",
  	    "ev_left_button",
  	    "ev_left_press",
  	    "ev_left_release",
  	    "ev_middle_button",
  	    "ev_middle_press",
  	    "ev_middle_release",
  	    "ev_mouse",
  	    "ev_mouse_enter",
  	    "ev_mouse_leave",
  	    "ev_mouse_wheel_down",
  	    "ev_mouse_wheel_up",
  	    "ev_no_button",
  	    "ev_no_more_health",
  	    "ev_no_more_lives",
  	    "ev_other",
  	    "ev_outside",
  	    "ev_right_button",
  	    "ev_right_press",
  	    "ev_right_release",
  	    "ev_room_end",
  	    "ev_room_start",
  	    "ev_step",
  	    "ev_step_begin",
  	    "ev_step_end",
  	    "ev_step_normal",
  	    "ev_trigger",
  	    "ev_user0",
  	    "ev_user1",
  	    "ev_user2",
  	    "ev_user3",
  	    "ev_user4",
  	    "ev_user5",
  	    "ev_user6",
  	    "ev_user7",
  	    "ev_user8",
  	    "ev_user9",
  	    "ev_user10",
  	    "ev_user11",
  	    "ev_user12",
  	    "ev_user13",
  	    "ev_user14",
  	    "ev_user15",
  	    "fa_archive",
  	    "fa_bottom",
  	    "fa_center",
  	    "fa_directory",
  	    "fa_hidden",
  	    "fa_left",
  	    "fa_middle",
  	    "fa_readonly",
  	    "fa_right",
  	    "fa_sysfile",
  	    "fa_top",
  	    "fa_volumeid",
  	    "fb_login_default",
  	    "fb_login_fallback_to_webview",
  	    "fb_login_forcing_safari",
  	    "fb_login_forcing_webview",
  	    "fb_login_no_fallback_to_webview",
  	    "fb_login_use_system_account",
  	    "gamespeed_fps",
  	    "gamespeed_microseconds",
  	    "ge_lose",
  	    "global",
  	    "gp_axislh",
  	    "gp_axislv",
  	    "gp_axisrh",
  	    "gp_axisrv",
  	    "gp_face1",
  	    "gp_face2",
  	    "gp_face3",
  	    "gp_face4",
  	    "gp_padd",
  	    "gp_padl",
  	    "gp_padr",
  	    "gp_padu",
  	    "gp_select",
  	    "gp_shoulderl",
  	    "gp_shoulderlb",
  	    "gp_shoulderr",
  	    "gp_shoulderrb",
  	    "gp_start",
  	    "gp_stickl",
  	    "gp_stickr",
  	    "iap_available",
  	    "iap_canceled",
  	    "iap_ev_consume",
  	    "iap_ev_product",
  	    "iap_ev_purchase",
  	    "iap_ev_restore",
  	    "iap_ev_storeload",
  	    "iap_failed",
  	    "iap_purchased",
  	    "iap_refunded",
  	    "iap_status_available",
  	    "iap_status_loading",
  	    "iap_status_processing",
  	    "iap_status_restoring",
  	    "iap_status_unavailable",
  	    "iap_status_uninitialised",
  	    "iap_storeload_failed",
  	    "iap_storeload_ok",
  	    "iap_unavailable",
  	    "input_type",
  	    "kbv_autocapitalize_characters",
  	    "kbv_autocapitalize_none",
  	    "kbv_autocapitalize_sentences",
  	    "kbv_autocapitalize_words",
  	    "kbv_returnkey_continue",
  	    "kbv_returnkey_default",
  	    "kbv_returnkey_done",
  	    "kbv_returnkey_emergency",
  	    "kbv_returnkey_go",
  	    "kbv_returnkey_google",
  	    "kbv_returnkey_join",
  	    "kbv_returnkey_next",
  	    "kbv_returnkey_route",
  	    "kbv_returnkey_search",
  	    "kbv_returnkey_send",
  	    "kbv_returnkey_yahoo",
  	    "kbv_type_ascii",
  	    "kbv_type_default",
  	    "kbv_type_email",
  	    "kbv_type_numbers",
  	    "kbv_type_phone",
  	    "kbv_type_phone_name",
  	    "kbv_type_url",
  	    "layerelementtype_background",
  	    "layerelementtype_instance",
  	    "layerelementtype_oldtilemap",
  	    "layerelementtype_particlesystem",
  	    "layerelementtype_sprite",
  	    "layerelementtype_tile",
  	    "layerelementtype_tilemap",
  	    "layerelementtype_undefined",
  	    "lb_disp_none",
  	    "lb_disp_numeric",
  	    "lb_disp_time_ms",
  	    "lb_disp_time_sec",
  	    "lb_sort_ascending",
  	    "lb_sort_descending",
  	    "lb_sort_none",
  	    "leaderboard_type_number",
  	    "leaderboard_type_time_mins_secs",
  	    "lighttype_dir",
  	    "lighttype_point",
  	    "local",
  	    "matrix_projection",
  	    "matrix_view",
  	    "matrix_world",
  	    "mb_any",
  	    "mb_left",
  	    "mb_middle",
  	    "mb_none",
  	    "mb_right",
  	    "mip_markedonly",
  	    "mip_off",
  	    "mip_on",
  	    "network_config_connect_timeout",
  	    "network_config_disable_reliable_udp",
  	    "network_config_enable_reliable_udp",
  	    "network_config_use_non_blocking_socket",
  	    "network_socket_bluetooth",
  	    "network_socket_tcp",
  	    "network_socket_udp",
  	    "network_type_connect",
  	    "network_type_data",
  	    "network_type_disconnect",
  	    "network_type_non_blocking_connect",
  	    "of_challen",
  	    "of_challenge_tie",
  	    "of_challenge_win",
  	    "os_3ds",
  	    "os_android",
  	    "os_bb10",
  	    "os_ios",
  	    "os_linux",
  	    "os_macosx",
  	    "os_ps3",
  	    "os_ps4",
  	    "os_psvita",
  	    "os_switch",
  	    "os_symbian",
  	    "os_tizen",
  	    "os_tvos",
  	    "os_unknown",
  	    "os_uwp",
  	    "os_wiiu",
  	    "os_win32",
  	    "os_win8native",
  	    "os_windows",
  	    "os_winphone",
  	    "os_xbox360",
  	    "os_xboxone",
  	    "other",
  	    "ov_achievements",
  	    "ov_community",
  	    "ov_friends",
  	    "ov_gamegroup",
  	    "ov_players",
  	    "ov_settings",
  	    "path_action_continue",
  	    "path_action_restart",
  	    "path_action_reverse",
  	    "path_action_stop",
  	    "phy_debug_render_aabb",
  	    "phy_debug_render_collision_pairs",
  	    "phy_debug_render_coms",
  	    "phy_debug_render_core_shapes",
  	    "phy_debug_render_joints",
  	    "phy_debug_render_obb",
  	    "phy_debug_render_shapes",
  	    "phy_joint_anchor_1_x",
  	    "phy_joint_anchor_1_y",
  	    "phy_joint_anchor_2_x",
  	    "phy_joint_anchor_2_y",
  	    "phy_joint_angle",
  	    "phy_joint_angle_limits",
  	    "phy_joint_damping_ratio",
  	    "phy_joint_frequency",
  	    "phy_joint_length_1",
  	    "phy_joint_length_2",
  	    "phy_joint_lower_angle_limit",
  	    "phy_joint_max_force",
  	    "phy_joint_max_length",
  	    "phy_joint_max_motor_force",
  	    "phy_joint_max_motor_torque",
  	    "phy_joint_max_torque",
  	    "phy_joint_motor_force",
  	    "phy_joint_motor_speed",
  	    "phy_joint_motor_torque",
  	    "phy_joint_reaction_force_x",
  	    "phy_joint_reaction_force_y",
  	    "phy_joint_reaction_torque",
  	    "phy_joint_speed",
  	    "phy_joint_translation",
  	    "phy_joint_upper_angle_limit",
  	    "phy_particle_data_flag_category",
  	    "phy_particle_data_flag_color",
  	    "phy_particle_data_flag_colour",
  	    "phy_particle_data_flag_position",
  	    "phy_particle_data_flag_typeflags",
  	    "phy_particle_data_flag_velocity",
  	    "phy_particle_flag_colormixing",
  	    "phy_particle_flag_colourmixing",
  	    "phy_particle_flag_elastic",
  	    "phy_particle_flag_powder",
  	    "phy_particle_flag_spring",
  	    "phy_particle_flag_tensile",
  	    "phy_particle_flag_viscous",
  	    "phy_particle_flag_wall",
  	    "phy_particle_flag_water",
  	    "phy_particle_flag_zombie",
  	    "phy_particle_group_flag_rigid",
  	    "phy_particle_group_flag_solid",
  	    "pi",
  	    "pr_linelist",
  	    "pr_linestrip",
  	    "pr_pointlist",
  	    "pr_trianglefan",
  	    "pr_trianglelist",
  	    "pr_trianglestrip",
  	    "ps_distr_gaussian",
  	    "ps_distr_invgaussian",
  	    "ps_distr_linear",
  	    "ps_shape_diamond",
  	    "ps_shape_ellipse",
  	    "ps_shape_line",
  	    "ps_shape_rectangle",
  	    "pt_shape_circle",
  	    "pt_shape_cloud",
  	    "pt_shape_disk",
  	    "pt_shape_explosion",
  	    "pt_shape_flare",
  	    "pt_shape_line",
  	    "pt_shape_pixel",
  	    "pt_shape_ring",
  	    "pt_shape_smoke",
  	    "pt_shape_snow",
  	    "pt_shape_spark",
  	    "pt_shape_sphere",
  	    "pt_shape_square",
  	    "pt_shape_star",
  	    "spritespeed_framespergameframe",
  	    "spritespeed_framespersecond",
  	    "text_type",
  	    "tf_anisotropic",
  	    "tf_linear",
  	    "tf_point",
  	    "tile_flip",
  	    "tile_index_mask",
  	    "tile_mirror",
  	    "tile_rotate",
  	    "timezone_local",
  	    "timezone_utc",
  	    "tm_countvsyncs",
  	    "tm_sleep",
  	    "ty_real",
  	    "ty_string",
  	    "ugc_filetype_community",
  	    "ugc_filetype_microtrans",
  	    "ugc_list_Favorited",
  	    "ugc_list_Followed",
  	    "ugc_list_Published",
  	    "ugc_list_Subscribed",
  	    "ugc_list_UsedOrPlayed",
  	    "ugc_list_VotedDown",
  	    "ugc_list_VotedOn",
  	    "ugc_list_VotedUp",
  	    "ugc_list_WillVoteLater",
  	    "ugc_match_AllGuides",
  	    "ugc_match_Artwork",
  	    "ugc_match_Collections",
  	    "ugc_match_ControllerBindings",
  	    "ugc_match_IntegratedGuides",
  	    "ugc_match_Items",
  	    "ugc_match_Items_Mtx",
  	    "ugc_match_Items_ReadyToUse",
  	    "ugc_match_Screenshots",
  	    "ugc_match_UsableInGame",
  	    "ugc_match_Videos",
  	    "ugc_match_WebGuides",
  	    "ugc_query_AcceptedForGameRankedByAcceptanceDate",
  	    "ugc_query_CreatedByFollowedUsersRankedByPublicationDate",
  	    "ugc_query_CreatedByFriendsRankedByPublicationDate",
  	    "ugc_query_FavoritedByFriendsRankedByPublicationDate",
  	    "ugc_query_NotYetRated",
  	    "ugc_query_RankedByNumTimesReported",
  	    "ugc_query_RankedByPublicationDate",
  	    "ugc_query_RankedByTextSearch",
  	    "ugc_query_RankedByTotalVotesAsc",
  	    "ugc_query_RankedByTrend",
  	    "ugc_query_RankedByVote",
  	    "ugc_query_RankedByVotesUp",
  	    "ugc_result_success",
  	    "ugc_sortorder_CreationOrderAsc",
  	    "ugc_sortorder_CreationOrderDesc",
  	    "ugc_sortorder_ForModeration",
  	    "ugc_sortorder_LastUpdatedDesc",
  	    "ugc_sortorder_SubscriptionDateDesc",
  	    "ugc_sortorder_TitleAsc",
  	    "ugc_sortorder_VoteScoreDesc",
  	    "ugc_visibility_friends_only",
  	    "ugc_visibility_private",
  	    "ugc_visibility_public",
  	    "vertex_type_color",
  	    "vertex_type_colour",
  	    "vertex_type_float1",
  	    "vertex_type_float2",
  	    "vertex_type_float3",
  	    "vertex_type_float4",
  	    "vertex_type_ubyte4",
  	    "vertex_usage_binormal",
  	    "vertex_usage_blendindices",
  	    "vertex_usage_blendweight",
  	    "vertex_usage_color",
  	    "vertex_usage_colour",
  	    "vertex_usage_depth",
  	    "vertex_usage_fog",
  	    "vertex_usage_normal",
  	    "vertex_usage_position",
  	    "vertex_usage_psize",
  	    "vertex_usage_sample",
  	    "vertex_usage_tangent",
  	    "vertex_usage_texcoord",
  	    "vertex_usage_textcoord",
  	    "vk_add",
  	    "vk_alt",
  	    "vk_anykey",
  	    "vk_backspace",
  	    "vk_control",
  	    "vk_decimal",
  	    "vk_delete",
  	    "vk_divide",
  	    "vk_down",
  	    "vk_end",
  	    "vk_enter",
  	    "vk_escape",
  	    "vk_f1",
  	    "vk_f2",
  	    "vk_f3",
  	    "vk_f4",
  	    "vk_f5",
  	    "vk_f6",
  	    "vk_f7",
  	    "vk_f8",
  	    "vk_f9",
  	    "vk_f10",
  	    "vk_f11",
  	    "vk_f12",
  	    "vk_home",
  	    "vk_insert",
  	    "vk_lalt",
  	    "vk_lcontrol",
  	    "vk_left",
  	    "vk_lshift",
  	    "vk_multiply",
  	    "vk_nokey",
  	    "vk_numpad0",
  	    "vk_numpad1",
  	    "vk_numpad2",
  	    "vk_numpad3",
  	    "vk_numpad4",
  	    "vk_numpad5",
  	    "vk_numpad6",
  	    "vk_numpad7",
  	    "vk_numpad8",
  	    "vk_numpad9",
  	    "vk_pagedown",
  	    "vk_pageup",
  	    "vk_pause",
  	    "vk_printscreen",
  	    "vk_ralt",
  	    "vk_rcontrol",
  	    "vk_return",
  	    "vk_right",
  	    "vk_rshift",
  	    "vk_shift",
  	    "vk_space",
  	    "vk_subtract",
  	    "vk_tab",
  	    "vk_up"
  	  ];
  	  const LANGUAGE_VARIABLES = [
  	    "alarm",
  	    "application_surface",
  	    "argument",
  	    "argument0",
  	    "argument1",
  	    "argument2",
  	    "argument3",
  	    "argument4",
  	    "argument5",
  	    "argument6",
  	    "argument7",
  	    "argument8",
  	    "argument9",
  	    "argument10",
  	    "argument11",
  	    "argument12",
  	    "argument13",
  	    "argument14",
  	    "argument15",
  	    "argument_count",
  	    "argument_relative",
  	    "async_load",
  	    "background_color",
  	    "background_colour",
  	    "background_showcolor",
  	    "background_showcolour",
  	    "bbox_bottom",
  	    "bbox_left",
  	    "bbox_right",
  	    "bbox_top",
  	    "browser_height",
  	    "browser_width",
  	    "caption_health",
  	    "caption_lives",
  	    "caption_score",
  	    "current_day",
  	    "current_hour",
  	    "current_minute",
  	    "current_month",
  	    "current_second",
  	    "current_time",
  	    "current_weekday",
  	    "current_year",
  	    "cursor_sprite",
  	    "debug_mode",
  	    "delta_time",
  	    "depth",
  	    "direction",
  	    "display_aa",
  	    "error_last",
  	    "error_occurred",
  	    "event_action",
  	    "event_data",
  	    "event_number",
  	    "event_object",
  	    "event_type",
  	    "fps",
  	    "fps_real",
  	    "friction",
  	    "game_display_name",
  	    "game_id",
  	    "game_project_name",
  	    "game_save_id",
  	    "gamemaker_pro",
  	    "gamemaker_registered",
  	    "gamemaker_version",
  	    "gravity",
  	    "gravity_direction",
  	    "health",
  	    "hspeed",
  	    "iap_data",
  	    "id|0",
  	    "image_alpha",
  	    "image_angle",
  	    "image_blend",
  	    "image_index",
  	    "image_number",
  	    "image_speed",
  	    "image_xscale",
  	    "image_yscale",
  	    "instance_count",
  	    "instance_id",
  	    "keyboard_key",
  	    "keyboard_lastchar",
  	    "keyboard_lastkey",
  	    "keyboard_string",
  	    "layer",
  	    "lives",
  	    "mask_index",
  	    "mouse_button",
  	    "mouse_lastbutton",
  	    "mouse_x",
  	    "mouse_y",
  	    "object_index",
  	    "os_browser",
  	    "os_device",
  	    "os_type",
  	    "os_version",
  	    "path_endaction",
  	    "path_index",
  	    "path_orientation",
  	    "path_position",
  	    "path_positionprevious",
  	    "path_scale",
  	    "path_speed",
  	    "persistent",
  	    "phy_active",
  	    "phy_angular_damping",
  	    "phy_angular_velocity",
  	    "phy_bullet",
  	    "phy_col_normal_x",
  	    "phy_col_normal_y",
  	    "phy_collision_points",
  	    "phy_collision_x",
  	    "phy_collision_y",
  	    "phy_com_x",
  	    "phy_com_y",
  	    "phy_dynamic",
  	    "phy_fixed_rotation",
  	    "phy_inertia",
  	    "phy_kinematic",
  	    "phy_linear_damping",
  	    "phy_linear_velocity_x",
  	    "phy_linear_velocity_y",
  	    "phy_mass",
  	    "phy_position_x",
  	    "phy_position_xprevious",
  	    "phy_position_y",
  	    "phy_position_yprevious",
  	    "phy_rotation",
  	    "phy_sleeping",
  	    "phy_speed",
  	    "phy_speed_x",
  	    "phy_speed_y",
  	    "program_directory",
  	    "room",
  	    "room_caption",
  	    "room_first",
  	    "room_height",
  	    "room_last",
  	    "room_persistent",
  	    "room_speed",
  	    "room_width",
  	    "score",
  	    "self",
  	    "show_health",
  	    "show_lives",
  	    "show_score",
  	    "solid",
  	    "speed",
  	    "sprite_height",
  	    "sprite_index",
  	    "sprite_width",
  	    "sprite_xoffset",
  	    "sprite_yoffset",
  	    "temp_directory",
  	    "timeline_index",
  	    "timeline_loop",
  	    "timeline_position",
  	    "timeline_running",
  	    "timeline_speed",
  	    "view_angle",
  	    "view_camera",
  	    "view_current",
  	    "view_enabled",
  	    "view_hborder",
  	    "view_hport",
  	    "view_hspeed",
  	    "view_hview",
  	    "view_object",
  	    "view_surface_id",
  	    "view_vborder",
  	    "view_visible",
  	    "view_vspeed",
  	    "view_wport",
  	    "view_wview",
  	    "view_xport",
  	    "view_xview",
  	    "view_yport",
  	    "view_yview",
  	    "visible",
  	    "vspeed",
  	    "webgl_enabled",
  	    "working_directory",
  	    "xprevious",
  	    "xstart",
  	    "x|0",
  	    "yprevious",
  	    "ystart",
  	    "y|0"
  	  ];

  	  return {
  	    name: 'GML',
  	    case_insensitive: false, // language is case-insensitive
  	    keywords: {
  	      keyword: KEYWORDS,
  	      built_in: BUILT_INS,
  	      literal: LITERALS,
  	      symbol: SYMBOLS,
  	      "variable.language": LANGUAGE_VARIABLES
  	    },
  	    contains: [
  	      hljs.C_LINE_COMMENT_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE,
  	      hljs.APOS_STRING_MODE,
  	      hljs.QUOTE_STRING_MODE,
  	      hljs.C_NUMBER_MODE
  	    ]
  	  };
  	}

  	gml_1 = gml;
  	return gml_1;
  }

  /*
  Language: Go
  Author: Stephan Kountso aka StepLg <steplg@gmail.com>
  Contributors: Evgeny Stepanischev <imbolk@gmail.com>
  Description: Google go language (golang). For info about language
  Website: http://golang.org/
  Category: common, system
  */

  var go_1;
  var hasRequiredGo;

  function requireGo () {
  	if (hasRequiredGo) return go_1;
  	hasRequiredGo = 1;
  	function go(hljs) {
  	  const LITERALS = [
  	    "true",
  	    "false",
  	    "iota",
  	    "nil"
  	  ];
  	  const BUILT_INS = [
  	    "append",
  	    "cap",
  	    "close",
  	    "complex",
  	    "copy",
  	    "imag",
  	    "len",
  	    "make",
  	    "new",
  	    "panic",
  	    "print",
  	    "println",
  	    "real",
  	    "recover",
  	    "delete"
  	  ];
  	  const TYPES = [
  	    "bool",
  	    "byte",
  	    "complex64",
  	    "complex128",
  	    "error",
  	    "float32",
  	    "float64",
  	    "int8",
  	    "int16",
  	    "int32",
  	    "int64",
  	    "string",
  	    "uint8",
  	    "uint16",
  	    "uint32",
  	    "uint64",
  	    "int",
  	    "uint",
  	    "uintptr",
  	    "rune"
  	  ];
  	  const KWS = [
  	    "break",
  	    "case",
  	    "chan",
  	    "const",
  	    "continue",
  	    "default",
  	    "defer",
  	    "else",
  	    "fallthrough",
  	    "for",
  	    "func",
  	    "go",
  	    "goto",
  	    "if",
  	    "import",
  	    "interface",
  	    "map",
  	    "package",
  	    "range",
  	    "return",
  	    "select",
  	    "struct",
  	    "switch",
  	    "type",
  	    "var",
  	  ];
  	  const KEYWORDS = {
  	    keyword: KWS,
  	    type: TYPES,
  	    literal: LITERALS,
  	    built_in: BUILT_INS
  	  };
  	  return {
  	    name: 'Go',
  	    aliases: [ 'golang' ],
  	    keywords: KEYWORDS,
  	    illegal: '</',
  	    contains: [
  	      hljs.C_LINE_COMMENT_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE,
  	      {
  	        className: 'string',
  	        variants: [
  	          hljs.QUOTE_STRING_MODE,
  	          hljs.APOS_STRING_MODE,
  	          {
  	            begin: '`',
  	            end: '`'
  	          }
  	        ]
  	      },
  	      {
  	        className: 'number',
  	        variants: [
  	          {
  	            begin: hljs.C_NUMBER_RE + '[i]',
  	            relevance: 1
  	          },
  	          hljs.C_NUMBER_MODE
  	        ]
  	      },
  	      { begin: /:=/ // relevance booster
  	      },
  	      {
  	        className: 'function',
  	        beginKeywords: 'func',
  	        end: '\\s*(\\{|$)',
  	        excludeEnd: true,
  	        contains: [
  	          hljs.TITLE_MODE,
  	          {
  	            className: 'params',
  	            begin: /\(/,
  	            end: /\)/,
  	            endsParent: true,
  	            keywords: KEYWORDS,
  	            illegal: /["']/
  	          }
  	        ]
  	      }
  	    ]
  	  };
  	}

  	go_1 = go;
  	return go_1;
  }

  /*
  Language: Golo
  Author: Philippe Charriere <ph.charriere@gmail.com>
  Description: a lightweight dynamic language for the JVM
  Website: http://golo-lang.org/
  */

  var golo_1;
  var hasRequiredGolo;

  function requireGolo () {
  	if (hasRequiredGolo) return golo_1;
  	hasRequiredGolo = 1;
  	function golo(hljs) {
  	  const KEYWORDS = [
  	    "println",
  	    "readln",
  	    "print",
  	    "import",
  	    "module",
  	    "function",
  	    "local",
  	    "return",
  	    "let",
  	    "var",
  	    "while",
  	    "for",
  	    "foreach",
  	    "times",
  	    "in",
  	    "case",
  	    "when",
  	    "match",
  	    "with",
  	    "break",
  	    "continue",
  	    "augment",
  	    "augmentation",
  	    "each",
  	    "find",
  	    "filter",
  	    "reduce",
  	    "if",
  	    "then",
  	    "else",
  	    "otherwise",
  	    "try",
  	    "catch",
  	    "finally",
  	    "raise",
  	    "throw",
  	    "orIfNull",
  	    "DynamicObject|10",
  	    "DynamicVariable",
  	    "struct",
  	    "Observable",
  	    "map",
  	    "set",
  	    "vector",
  	    "list",
  	    "array"
  	  ];

  	  return {
  	    name: 'Golo',
  	    keywords: {
  	      keyword: KEYWORDS,
  	      literal: [
  	        "true",
  	        "false",
  	        "null"
  	      ]
  	    },
  	    contains: [
  	      hljs.HASH_COMMENT_MODE,
  	      hljs.QUOTE_STRING_MODE,
  	      hljs.C_NUMBER_MODE,
  	      {
  	        className: 'meta',
  	        begin: '@[A-Za-z]+'
  	      }
  	    ]
  	  };
  	}

  	golo_1 = golo;
  	return golo_1;
  }

  /*
  Language: Gradle
  Description: Gradle is an open-source build automation tool focused on flexibility and performance.
  Website: https://gradle.org
  Author: Damian Mee <mee.damian@gmail.com>
  */

  var gradle_1;
  var hasRequiredGradle;

  function requireGradle () {
  	if (hasRequiredGradle) return gradle_1;
  	hasRequiredGradle = 1;
  	function gradle(hljs) {
  	  const KEYWORDS = [
  	    "task",
  	    "project",
  	    "allprojects",
  	    "subprojects",
  	    "artifacts",
  	    "buildscript",
  	    "configurations",
  	    "dependencies",
  	    "repositories",
  	    "sourceSets",
  	    "description",
  	    "delete",
  	    "from",
  	    "into",
  	    "include",
  	    "exclude",
  	    "source",
  	    "classpath",
  	    "destinationDir",
  	    "includes",
  	    "options",
  	    "sourceCompatibility",
  	    "targetCompatibility",
  	    "group",
  	    "flatDir",
  	    "doLast",
  	    "doFirst",
  	    "flatten",
  	    "todir",
  	    "fromdir",
  	    "ant",
  	    "def",
  	    "abstract",
  	    "break",
  	    "case",
  	    "catch",
  	    "continue",
  	    "default",
  	    "do",
  	    "else",
  	    "extends",
  	    "final",
  	    "finally",
  	    "for",
  	    "if",
  	    "implements",
  	    "instanceof",
  	    "native",
  	    "new",
  	    "private",
  	    "protected",
  	    "public",
  	    "return",
  	    "static",
  	    "switch",
  	    "synchronized",
  	    "throw",
  	    "throws",
  	    "transient",
  	    "try",
  	    "volatile",
  	    "while",
  	    "strictfp",
  	    "package",
  	    "import",
  	    "false",
  	    "null",
  	    "super",
  	    "this",
  	    "true",
  	    "antlrtask",
  	    "checkstyle",
  	    "codenarc",
  	    "copy",
  	    "boolean",
  	    "byte",
  	    "char",
  	    "class",
  	    "double",
  	    "float",
  	    "int",
  	    "interface",
  	    "long",
  	    "short",
  	    "void",
  	    "compile",
  	    "runTime",
  	    "file",
  	    "fileTree",
  	    "abs",
  	    "any",
  	    "append",
  	    "asList",
  	    "asWritable",
  	    "call",
  	    "collect",
  	    "compareTo",
  	    "count",
  	    "div",
  	    "dump",
  	    "each",
  	    "eachByte",
  	    "eachFile",
  	    "eachLine",
  	    "every",
  	    "find",
  	    "findAll",
  	    "flatten",
  	    "getAt",
  	    "getErr",
  	    "getIn",
  	    "getOut",
  	    "getText",
  	    "grep",
  	    "immutable",
  	    "inject",
  	    "inspect",
  	    "intersect",
  	    "invokeMethods",
  	    "isCase",
  	    "join",
  	    "leftShift",
  	    "minus",
  	    "multiply",
  	    "newInputStream",
  	    "newOutputStream",
  	    "newPrintWriter",
  	    "newReader",
  	    "newWriter",
  	    "next",
  	    "plus",
  	    "pop",
  	    "power",
  	    "previous",
  	    "print",
  	    "println",
  	    "push",
  	    "putAt",
  	    "read",
  	    "readBytes",
  	    "readLines",
  	    "reverse",
  	    "reverseEach",
  	    "round",
  	    "size",
  	    "sort",
  	    "splitEachLine",
  	    "step",
  	    "subMap",
  	    "times",
  	    "toInteger",
  	    "toList",
  	    "tokenize",
  	    "upto",
  	    "waitForOrKill",
  	    "withPrintWriter",
  	    "withReader",
  	    "withStream",
  	    "withWriter",
  	    "withWriterAppend",
  	    "write",
  	    "writeLine"
  	  ];
  	  return {
  	    name: 'Gradle',
  	    case_insensitive: true,
  	    keywords: KEYWORDS,
  	    contains: [
  	      hljs.C_LINE_COMMENT_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE,
  	      hljs.APOS_STRING_MODE,
  	      hljs.QUOTE_STRING_MODE,
  	      hljs.NUMBER_MODE,
  	      hljs.REGEXP_MODE

  	    ]
  	  };
  	}

  	gradle_1 = gradle;
  	return gradle_1;
  }

  /*
   Language: GraphQL
   Author: John Foster (GH jf990), and others
   Description: GraphQL is a query language for APIs
   Category: web, common
  */

  var graphql_1;
  var hasRequiredGraphql;

  function requireGraphql () {
  	if (hasRequiredGraphql) return graphql_1;
  	hasRequiredGraphql = 1;
  	/** @type LanguageFn */
  	function graphql(hljs) {
  	  const regex = hljs.regex;
  	  const GQL_NAME = /[_A-Za-z][_0-9A-Za-z]*/;
  	  return {
  	    name: "GraphQL",
  	    aliases: [ "gql" ],
  	    case_insensitive: true,
  	    disableAutodetect: false,
  	    keywords: {
  	      keyword: [
  	        "query",
  	        "mutation",
  	        "subscription",
  	        "type",
  	        "input",
  	        "schema",
  	        "directive",
  	        "interface",
  	        "union",
  	        "scalar",
  	        "fragment",
  	        "enum",
  	        "on"
  	      ],
  	      literal: [
  	        "true",
  	        "false",
  	        "null"
  	      ]
  	    },
  	    contains: [
  	      hljs.HASH_COMMENT_MODE,
  	      hljs.QUOTE_STRING_MODE,
  	      hljs.NUMBER_MODE,
  	      {
  	        scope: "punctuation",
  	        match: /[.]{3}/,
  	        relevance: 0
  	      },
  	      {
  	        scope: "punctuation",
  	        begin: /[\!\(\)\:\=\[\]\{\|\}]{1}/,
  	        relevance: 0
  	      },
  	      {
  	        scope: "variable",
  	        begin: /\$/,
  	        end: /\W/,
  	        excludeEnd: true,
  	        relevance: 0
  	      },
  	      {
  	        scope: "meta",
  	        match: /@\w+/,
  	        excludeEnd: true
  	      },
  	      {
  	        scope: "symbol",
  	        begin: regex.concat(GQL_NAME, regex.lookahead(/\s*:/)),
  	        relevance: 0
  	      }
  	    ],
  	    illegal: [
  	      /[;<']/,
  	      /BEGIN/
  	    ]
  	  };
  	}

  	graphql_1 = graphql;
  	return graphql_1;
  }

  /*
   Language: Groovy
   Author: Guillaume Laforge <glaforge@gmail.com>
   Description: Groovy programming language implementation inspired from Vsevolod's Java mode
   Website: https://groovy-lang.org
   */

  var groovy_1;
  var hasRequiredGroovy;

  function requireGroovy () {
  	if (hasRequiredGroovy) return groovy_1;
  	hasRequiredGroovy = 1;
  	function variants(variants, obj = {}) {
  	  obj.variants = variants;
  	  return obj;
  	}

  	function groovy(hljs) {
  	  const regex = hljs.regex;
  	  const IDENT_RE = '[A-Za-z0-9_$]+';
  	  const COMMENT = variants([
  	    hljs.C_LINE_COMMENT_MODE,
  	    hljs.C_BLOCK_COMMENT_MODE,
  	    hljs.COMMENT(
  	      '/\\*\\*',
  	      '\\*/',
  	      {
  	        relevance: 0,
  	        contains: [
  	          {
  	            // eat up @'s in emails to prevent them to be recognized as doctags
  	            begin: /\w+@/,
  	            relevance: 0
  	          },
  	          {
  	            className: 'doctag',
  	            begin: '@[A-Za-z]+'
  	          }
  	        ]
  	      }
  	    )
  	  ]);
  	  const REGEXP = {
  	    className: 'regexp',
  	    begin: /~?\/[^\/\n]+\//,
  	    contains: [ hljs.BACKSLASH_ESCAPE ]
  	  };
  	  const NUMBER = variants([
  	    hljs.BINARY_NUMBER_MODE,
  	    hljs.C_NUMBER_MODE
  	  ]);
  	  const STRING = variants([
  	    {
  	      begin: /"""/,
  	      end: /"""/
  	    },
  	    {
  	      begin: /'''/,
  	      end: /'''/
  	    },
  	    {
  	      begin: "\\$/",
  	      end: "/\\$",
  	      relevance: 10
  	    },
  	    hljs.APOS_STRING_MODE,
  	    hljs.QUOTE_STRING_MODE
  	  ],
  	  { className: "string" }
  	  );

  	  const CLASS_DEFINITION = {
  	    match: [
  	      /(class|interface|trait|enum|extends|implements)/,
  	      /\s+/,
  	      hljs.UNDERSCORE_IDENT_RE
  	    ],
  	    scope: {
  	      1: "keyword",
  	      3: "title.class",
  	    }
  	  };
  	  const TYPES = [
  	    "byte",
  	    "short",
  	    "char",
  	    "int",
  	    "long",
  	    "boolean",
  	    "float",
  	    "double",
  	    "void"
  	  ];
  	  const KEYWORDS = [
  	    // groovy specific keywords
  	    "def",
  	    "as",
  	    "in",
  	    "assert",
  	    "trait",
  	    // common keywords with Java
  	    "abstract",
  	    "static",
  	    "volatile",
  	    "transient",
  	    "public",
  	    "private",
  	    "protected",
  	    "synchronized",
  	    "final",
  	    "class",
  	    "interface",
  	    "enum",
  	    "if",
  	    "else",
  	    "for",
  	    "while",
  	    "switch",
  	    "case",
  	    "break",
  	    "default",
  	    "continue",
  	    "throw",
  	    "throws",
  	    "try",
  	    "catch",
  	    "finally",
  	    "implements",
  	    "extends",
  	    "new",
  	    "import",
  	    "package",
  	    "return",
  	    "instanceof"
  	  ];

  	  return {
  	    name: 'Groovy',
  	    keywords: {
  	      "variable.language": 'this super',
  	      literal: 'true false null',
  	      type: TYPES,
  	      keyword: KEYWORDS
  	    },
  	    contains: [
  	      hljs.SHEBANG({
  	        binary: "groovy",
  	        relevance: 10
  	      }),
  	      COMMENT,
  	      STRING,
  	      REGEXP,
  	      NUMBER,
  	      CLASS_DEFINITION,
  	      {
  	        className: 'meta',
  	        begin: '@[A-Za-z]+',
  	        relevance: 0
  	      },
  	      {
  	        // highlight map keys and named parameters as attrs
  	        className: 'attr',
  	        begin: IDENT_RE + '[ \t]*:',
  	        relevance: 0
  	      },
  	      {
  	        // catch middle element of the ternary operator
  	        // to avoid highlight it as a label, named parameter, or map key
  	        begin: /\?/,
  	        end: /:/,
  	        relevance: 0,
  	        contains: [
  	          COMMENT,
  	          STRING,
  	          REGEXP,
  	          NUMBER,
  	          'self'
  	        ]
  	      },
  	      {
  	        // highlight labeled statements
  	        className: 'symbol',
  	        begin: '^[ \t]*' + regex.lookahead(IDENT_RE + ':'),
  	        excludeBegin: true,
  	        end: IDENT_RE + ':',
  	        relevance: 0
  	      }
  	    ],
  	    illegal: /#|<\//
  	  };
  	}

  	groovy_1 = groovy;
  	return groovy_1;
  }

  /*
  Language: HAML
  Requires: ruby.js
  Author: Dan Allen <dan.j.allen@gmail.com>
  Website: http://haml.info
  Category: template
  */

  var haml_1;
  var hasRequiredHaml;

  function requireHaml () {
  	if (hasRequiredHaml) return haml_1;
  	hasRequiredHaml = 1;
  	// TODO support filter tags like :javascript, support inline HTML
  	function haml(hljs) {
  	  return {
  	    name: 'HAML',
  	    case_insensitive: true,
  	    contains: [
  	      {
  	        className: 'meta',
  	        begin: '^!!!( (5|1\\.1|Strict|Frameset|Basic|Mobile|RDFa|XML\\b.*))?$',
  	        relevance: 10
  	      },
  	      // FIXME these comments should be allowed to span indented lines
  	      hljs.COMMENT(
  	        '^\\s*(!=#|=#|-#|/).*$',
  	        null,
  	        { relevance: 0 }
  	      ),
  	      {
  	        begin: '^\\s*(-|=|!=)(?!#)',
  	        end: /$/,
  	        subLanguage: 'ruby',
  	        excludeBegin: true,
  	        excludeEnd: true
  	      },
  	      {
  	        className: 'tag',
  	        begin: '^\\s*%',
  	        contains: [
  	          {
  	            className: 'selector-tag',
  	            begin: '\\w+'
  	          },
  	          {
  	            className: 'selector-id',
  	            begin: '#[\\w-]+'
  	          },
  	          {
  	            className: 'selector-class',
  	            begin: '\\.[\\w-]+'
  	          },
  	          {
  	            begin: /\{\s*/,
  	            end: /\s*\}/,
  	            contains: [
  	              {
  	                begin: ':\\w+\\s*=>',
  	                end: ',\\s+',
  	                returnBegin: true,
  	                endsWithParent: true,
  	                contains: [
  	                  {
  	                    className: 'attr',
  	                    begin: ':\\w+'
  	                  },
  	                  hljs.APOS_STRING_MODE,
  	                  hljs.QUOTE_STRING_MODE,
  	                  {
  	                    begin: '\\w+',
  	                    relevance: 0
  	                  }
  	                ]
  	              }
  	            ]
  	          },
  	          {
  	            begin: '\\(\\s*',
  	            end: '\\s*\\)',
  	            excludeEnd: true,
  	            contains: [
  	              {
  	                begin: '\\w+\\s*=',
  	                end: '\\s+',
  	                returnBegin: true,
  	                endsWithParent: true,
  	                contains: [
  	                  {
  	                    className: 'attr',
  	                    begin: '\\w+',
  	                    relevance: 0
  	                  },
  	                  hljs.APOS_STRING_MODE,
  	                  hljs.QUOTE_STRING_MODE,
  	                  {
  	                    begin: '\\w+',
  	                    relevance: 0
  	                  }
  	                ]
  	              }
  	            ]
  	          }
  	        ]
  	      },
  	      { begin: '^\\s*[=~]\\s*' },
  	      {
  	        begin: /#\{/,
  	        end: /\}/,
  	        subLanguage: 'ruby',
  	        excludeBegin: true,
  	        excludeEnd: true
  	      }
  	    ]
  	  };
  	}

  	haml_1 = haml;
  	return haml_1;
  }

  /*
  Language: Handlebars
  Requires: xml.js
  Author: Robin Ward <robin.ward@gmail.com>
  Description: Matcher for Handlebars as well as EmberJS additions.
  Website: https://handlebarsjs.com
  Category: template
  */

  var handlebars_1;
  var hasRequiredHandlebars;

  function requireHandlebars () {
  	if (hasRequiredHandlebars) return handlebars_1;
  	hasRequiredHandlebars = 1;
  	function handlebars(hljs) {
  	  const regex = hljs.regex;
  	  const BUILT_INS = {
  	    $pattern: /[\w.\/]+/,
  	    built_in: [
  	      'action',
  	      'bindattr',
  	      'collection',
  	      'component',
  	      'concat',
  	      'debugger',
  	      'each',
  	      'each-in',
  	      'get',
  	      'hash',
  	      'if',
  	      'in',
  	      'input',
  	      'link-to',
  	      'loc',
  	      'log',
  	      'lookup',
  	      'mut',
  	      'outlet',
  	      'partial',
  	      'query-params',
  	      'render',
  	      'template',
  	      'textarea',
  	      'unbound',
  	      'unless',
  	      'view',
  	      'with',
  	      'yield'
  	    ]
  	  };

  	  const LITERALS = {
  	    $pattern: /[\w.\/]+/,
  	    literal: [
  	      'true',
  	      'false',
  	      'undefined',
  	      'null'
  	    ]
  	  };

  	  // as defined in https://handlebarsjs.com/guide/expressions.html#literal-segments
  	  // this regex matches literal segments like ' abc ' or [ abc ] as well as helpers and paths
  	  // like a/b, ./abc/cde, and abc.bcd

  	  const DOUBLE_QUOTED_ID_REGEX = /""|"[^"]+"/;
  	  const SINGLE_QUOTED_ID_REGEX = /''|'[^']+'/;
  	  const BRACKET_QUOTED_ID_REGEX = /\[\]|\[[^\]]+\]/;
  	  const PLAIN_ID_REGEX = /[^\s!"#%&'()*+,.\/;<=>@\[\\\]^`{|}~]+/;
  	  const PATH_DELIMITER_REGEX = /(\.|\/)/;
  	  const ANY_ID = regex.either(
  	    DOUBLE_QUOTED_ID_REGEX,
  	    SINGLE_QUOTED_ID_REGEX,
  	    BRACKET_QUOTED_ID_REGEX,
  	    PLAIN_ID_REGEX
  	  );

  	  const IDENTIFIER_REGEX = regex.concat(
  	    regex.optional(/\.|\.\/|\//), // relative or absolute path
  	    ANY_ID,
  	    regex.anyNumberOfTimes(regex.concat(
  	      PATH_DELIMITER_REGEX,
  	      ANY_ID
  	    ))
  	  );

  	  // identifier followed by a equal-sign (without the equal sign)
  	  const HASH_PARAM_REGEX = regex.concat(
  	    '(',
  	    BRACKET_QUOTED_ID_REGEX, '|',
  	    PLAIN_ID_REGEX,
  	    ')(?==)'
  	  );

  	  const HELPER_NAME_OR_PATH_EXPRESSION = { begin: IDENTIFIER_REGEX };

  	  const HELPER_PARAMETER = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, { keywords: LITERALS });

  	  const SUB_EXPRESSION = {
  	    begin: /\(/,
  	    end: /\)/
  	    // the "contains" is added below when all necessary sub-modes are defined
  	  };

  	  const HASH = {
  	    // fka "attribute-assignment", parameters of the form 'key=value'
  	    className: 'attr',
  	    begin: HASH_PARAM_REGEX,
  	    relevance: 0,
  	    starts: {
  	      begin: /=/,
  	      end: /=/,
  	      starts: { contains: [
  	        hljs.NUMBER_MODE,
  	        hljs.QUOTE_STRING_MODE,
  	        hljs.APOS_STRING_MODE,
  	        HELPER_PARAMETER,
  	        SUB_EXPRESSION
  	      ] }
  	    }
  	  };

  	  const BLOCK_PARAMS = {
  	    // parameters of the form '{{#with x as | y |}}...{{/with}}'
  	    begin: /as\s+\|/,
  	    keywords: { keyword: 'as' },
  	    end: /\|/,
  	    contains: [
  	      {
  	        // define sub-mode in order to prevent highlighting of block-parameter named "as"
  	        begin: /\w+/ }
  	    ]
  	  };

  	  const HELPER_PARAMETERS = {
  	    contains: [
  	      hljs.NUMBER_MODE,
  	      hljs.QUOTE_STRING_MODE,
  	      hljs.APOS_STRING_MODE,
  	      BLOCK_PARAMS,
  	      HASH,
  	      HELPER_PARAMETER,
  	      SUB_EXPRESSION
  	    ],
  	    returnEnd: true
  	    // the property "end" is defined through inheritance when the mode is used. If depends
  	    // on the surrounding mode, but "endsWithParent" does not work here (i.e. it includes the
  	    // end-token of the surrounding mode)
  	  };

  	  const SUB_EXPRESSION_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {
  	    className: 'name',
  	    keywords: BUILT_INS,
  	    starts: hljs.inherit(HELPER_PARAMETERS, { end: /\)/ })
  	  });

  	  SUB_EXPRESSION.contains = [ SUB_EXPRESSION_CONTENTS ];

  	  const OPENING_BLOCK_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {
  	    keywords: BUILT_INS,
  	    className: 'name',
  	    starts: hljs.inherit(HELPER_PARAMETERS, { end: /\}\}/ })
  	  });

  	  const CLOSING_BLOCK_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {
  	    keywords: BUILT_INS,
  	    className: 'name'
  	  });

  	  const BASIC_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {
  	    className: 'name',
  	    keywords: BUILT_INS,
  	    starts: hljs.inherit(HELPER_PARAMETERS, { end: /\}\}/ })
  	  });

  	  const ESCAPE_MUSTACHE_WITH_PRECEEDING_BACKSLASH = {
  	    begin: /\\\{\{/,
  	    skip: true
  	  };
  	  const PREVENT_ESCAPE_WITH_ANOTHER_PRECEEDING_BACKSLASH = {
  	    begin: /\\\\(?=\{\{)/,
  	    skip: true
  	  };

  	  return {
  	    name: 'Handlebars',
  	    aliases: [
  	      'hbs',
  	      'html.hbs',
  	      'html.handlebars',
  	      'htmlbars'
  	    ],
  	    case_insensitive: true,
  	    subLanguage: 'xml',
  	    contains: [
  	      ESCAPE_MUSTACHE_WITH_PRECEEDING_BACKSLASH,
  	      PREVENT_ESCAPE_WITH_ANOTHER_PRECEEDING_BACKSLASH,
  	      hljs.COMMENT(/\{\{!--/, /--\}\}/),
  	      hljs.COMMENT(/\{\{!/, /\}\}/),
  	      {
  	        // open raw block "{{{{raw}}}} content not evaluated {{{{/raw}}}}"
  	        className: 'template-tag',
  	        begin: /\{\{\{\{(?!\/)/,
  	        end: /\}\}\}\}/,
  	        contains: [ OPENING_BLOCK_MUSTACHE_CONTENTS ],
  	        starts: {
  	          end: /\{\{\{\{\//,
  	          returnEnd: true,
  	          subLanguage: 'xml'
  	        }
  	      },
  	      {
  	        // close raw block
  	        className: 'template-tag',
  	        begin: /\{\{\{\{\//,
  	        end: /\}\}\}\}/,
  	        contains: [ CLOSING_BLOCK_MUSTACHE_CONTENTS ]
  	      },
  	      {
  	        // open block statement
  	        className: 'template-tag',
  	        begin: /\{\{#/,
  	        end: /\}\}/,
  	        contains: [ OPENING_BLOCK_MUSTACHE_CONTENTS ]
  	      },
  	      {
  	        className: 'template-tag',
  	        begin: /\{\{(?=else\}\})/,
  	        end: /\}\}/,
  	        keywords: 'else'
  	      },
  	      {
  	        className: 'template-tag',
  	        begin: /\{\{(?=else if)/,
  	        end: /\}\}/,
  	        keywords: 'else if'
  	      },
  	      {
  	        // closing block statement
  	        className: 'template-tag',
  	        begin: /\{\{\//,
  	        end: /\}\}/,
  	        contains: [ CLOSING_BLOCK_MUSTACHE_CONTENTS ]
  	      },
  	      {
  	        // template variable or helper-call that is NOT html-escaped
  	        className: 'template-variable',
  	        begin: /\{\{\{/,
  	        end: /\}\}\}/,
  	        contains: [ BASIC_MUSTACHE_CONTENTS ]
  	      },
  	      {
  	        // template variable or helper-call that is html-escaped
  	        className: 'template-variable',
  	        begin: /\{\{/,
  	        end: /\}\}/,
  	        contains: [ BASIC_MUSTACHE_CONTENTS ]
  	      }
  	    ]
  	  };
  	}

  	handlebars_1 = handlebars;
  	return handlebars_1;
  }

  /*
  Language: Haskell
  Author: Jeremy Hull <sourdrums@gmail.com>
  Contributors: Zena Treep <zena.treep@gmail.com>
  Website: https://www.haskell.org
  Category: functional
  */

  var haskell_1;
  var hasRequiredHaskell;

  function requireHaskell () {
  	if (hasRequiredHaskell) return haskell_1;
  	hasRequiredHaskell = 1;
  	function haskell(hljs) {
  	  const COMMENT = { variants: [
  	    hljs.COMMENT('--', '$'),
  	    hljs.COMMENT(
  	      /\{-/,
  	      /-\}/,
  	      { contains: [ 'self' ] }
  	    )
  	  ] };

  	  const PRAGMA = {
  	    className: 'meta',
  	    begin: /\{-#/,
  	    end: /#-\}/
  	  };

  	  const PREPROCESSOR = {
  	    className: 'meta',
  	    begin: '^#',
  	    end: '$'
  	  };

  	  const CONSTRUCTOR = {
  	    className: 'type',
  	    begin: '\\b[A-Z][\\w\']*', // TODO: other constructors (build-in, infix).
  	    relevance: 0
  	  };

  	  const LIST = {
  	    begin: '\\(',
  	    end: '\\)',
  	    illegal: '"',
  	    contains: [
  	      PRAGMA,
  	      PREPROCESSOR,
  	      {
  	        className: 'type',
  	        begin: '\\b[A-Z][\\w]*(\\((\\.\\.|,|\\w+)\\))?'
  	      },
  	      hljs.inherit(hljs.TITLE_MODE, { begin: '[_a-z][\\w\']*' }),
  	      COMMENT
  	    ]
  	  };

  	  const RECORD = {
  	    begin: /\{/,
  	    end: /\}/,
  	    contains: LIST.contains
  	  };

  	  /* See:

  	     - https://www.haskell.org/onlinereport/lexemes.html
  	     - https://downloads.haskell.org/ghc/9.0.1/docs/html/users_guide/exts/binary_literals.html
  	     - https://downloads.haskell.org/ghc/9.0.1/docs/html/users_guide/exts/numeric_underscores.html
  	     - https://downloads.haskell.org/ghc/9.0.1/docs/html/users_guide/exts/hex_float_literals.html

  	  */
  	  const decimalDigits = '([0-9]_*)+';
  	  const hexDigits = '([0-9a-fA-F]_*)+';
  	  const binaryDigits = '([01]_*)+';
  	  const octalDigits = '([0-7]_*)+';

  	  const NUMBER = {
  	    className: 'number',
  	    relevance: 0,
  	    variants: [
  	      // decimal floating-point-literal (subsumes decimal-literal)
  	      { match: `\\b(${decimalDigits})(\\.(${decimalDigits}))?` + `([eE][+-]?(${decimalDigits}))?\\b` },
  	      // hexadecimal floating-point-literal (subsumes hexadecimal-literal)
  	      { match: `\\b0[xX]_*(${hexDigits})(\\.(${hexDigits}))?` + `([pP][+-]?(${decimalDigits}))?\\b` },
  	      // octal-literal
  	      { match: `\\b0[oO](${octalDigits})\\b` },
  	      // binary-literal
  	      { match: `\\b0[bB](${binaryDigits})\\b` }
  	    ]
  	  };

  	  return {
  	    name: 'Haskell',
  	    aliases: [ 'hs' ],
  	    keywords:
  	      'let in if then else case of where do module import hiding '
  	      + 'qualified type data newtype deriving class instance as default '
  	      + 'infix infixl infixr foreign export ccall stdcall cplusplus '
  	      + 'jvm dotnet safe unsafe family forall mdo proc rec',
  	    contains: [
  	      // Top-level constructions.
  	      {
  	        beginKeywords: 'module',
  	        end: 'where',
  	        keywords: 'module where',
  	        contains: [
  	          LIST,
  	          COMMENT
  	        ],
  	        illegal: '\\W\\.|;'
  	      },
  	      {
  	        begin: '\\bimport\\b',
  	        end: '$',
  	        keywords: 'import qualified as hiding',
  	        contains: [
  	          LIST,
  	          COMMENT
  	        ],
  	        illegal: '\\W\\.|;'
  	      },
  	      {
  	        className: 'class',
  	        begin: '^(\\s*)?(class|instance)\\b',
  	        end: 'where',
  	        keywords: 'class family instance where',
  	        contains: [
  	          CONSTRUCTOR,
  	          LIST,
  	          COMMENT
  	        ]
  	      },
  	      {
  	        className: 'class',
  	        begin: '\\b(data|(new)?type)\\b',
  	        end: '$',
  	        keywords: 'data family type newtype deriving',
  	        contains: [
  	          PRAGMA,
  	          CONSTRUCTOR,
  	          LIST,
  	          RECORD,
  	          COMMENT
  	        ]
  	      },
  	      {
  	        beginKeywords: 'default',
  	        end: '$',
  	        contains: [
  	          CONSTRUCTOR,
  	          LIST,
  	          COMMENT
  	        ]
  	      },
  	      {
  	        beginKeywords: 'infix infixl infixr',
  	        end: '$',
  	        contains: [
  	          hljs.C_NUMBER_MODE,
  	          COMMENT
  	        ]
  	      },
  	      {
  	        begin: '\\bforeign\\b',
  	        end: '$',
  	        keywords: 'foreign import export ccall stdcall cplusplus jvm '
  	                  + 'dotnet safe unsafe',
  	        contains: [
  	          CONSTRUCTOR,
  	          hljs.QUOTE_STRING_MODE,
  	          COMMENT
  	        ]
  	      },
  	      {
  	        className: 'meta',
  	        begin: '#!\\/usr\\/bin\\/env\ runhaskell',
  	        end: '$'
  	      },
  	      // "Whitespaces".
  	      PRAGMA,
  	      PREPROCESSOR,

  	      // Literals and names.

  	      // Single characters.
  	      {
  	        scope: 'string',
  	        begin: /'(?=\\?.')/,
  	        end: /'/,
  	        contains: [
  	          {
  	            scope: 'char.escape',
  	            match: /\\./,
  	          },
  	        ]
  	      },
  	      hljs.QUOTE_STRING_MODE,
  	      NUMBER,
  	      CONSTRUCTOR,
  	      hljs.inherit(hljs.TITLE_MODE, { begin: '^[_a-z][\\w\']*' }),
  	      COMMENT,
  	      { // No markup, relevance booster
  	        begin: '->|<-' }
  	    ]
  	  };
  	}

  	haskell_1 = haskell;
  	return haskell_1;
  }

  /*
  Language: Haxe
  Description: Haxe is an open source toolkit based on a modern, high level, strictly typed programming language.
  Author: Christopher Kaster <ikasoki@gmail.com> (Based on the actionscript.js language file by Alexander Myadzel)
  Contributors: Kenton Hamaluik <kentonh@gmail.com>
  Website: https://haxe.org
  */

  var haxe_1;
  var hasRequiredHaxe;

  function requireHaxe () {
  	if (hasRequiredHaxe) return haxe_1;
  	hasRequiredHaxe = 1;
  	function haxe(hljs) {

  	  const HAXE_BASIC_TYPES = 'Int Float String Bool Dynamic Void Array ';

  	  return {
  	    name: 'Haxe',
  	    aliases: [ 'hx' ],
  	    keywords: {
  	      keyword: 'break case cast catch continue default do dynamic else enum extern '
  	               + 'for function here if import in inline never new override package private get set '
  	               + 'public return static super switch this throw trace try typedef untyped using var while '
  	               + HAXE_BASIC_TYPES,
  	      built_in:
  	        'trace this',
  	      literal:
  	        'true false null _'
  	    },
  	    contains: [
  	      {
  	        className: 'string', // interpolate-able strings
  	        begin: '\'',
  	        end: '\'',
  	        contains: [
  	          hljs.BACKSLASH_ESCAPE,
  	          {
  	            className: 'subst', // interpolation
  	            begin: '\\$\\{',
  	            end: '\\}'
  	          },
  	          {
  	            className: 'subst', // interpolation
  	            begin: '\\$',
  	            end: /\W\}/
  	          }
  	        ]
  	      },
  	      hljs.QUOTE_STRING_MODE,
  	      hljs.C_LINE_COMMENT_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE,
  	      hljs.C_NUMBER_MODE,
  	      {
  	        className: 'meta', // compiler meta
  	        begin: '@:',
  	        end: '$'
  	      },
  	      {
  	        className: 'meta', // compiler conditionals
  	        begin: '#',
  	        end: '$',
  	        keywords: { keyword: 'if else elseif end error' }
  	      },
  	      {
  	        className: 'type', // function types
  	        begin: ':[ \t]*',
  	        end: '[^A-Za-z0-9_ \t\\->]',
  	        excludeBegin: true,
  	        excludeEnd: true,
  	        relevance: 0
  	      },
  	      {
  	        className: 'type', // types
  	        begin: ':[ \t]*',
  	        end: '\\W',
  	        excludeBegin: true,
  	        excludeEnd: true
  	      },
  	      {
  	        className: 'type', // instantiation
  	        begin: 'new *',
  	        end: '\\W',
  	        excludeBegin: true,
  	        excludeEnd: true
  	      },
  	      {
  	        className: 'class', // enums
  	        beginKeywords: 'enum',
  	        end: '\\{',
  	        contains: [ hljs.TITLE_MODE ]
  	      },
  	      {
  	        className: 'class', // abstracts
  	        beginKeywords: 'abstract',
  	        end: '[\\{$]',
  	        contains: [
  	          {
  	            className: 'type',
  	            begin: '\\(',
  	            end: '\\)',
  	            excludeBegin: true,
  	            excludeEnd: true
  	          },
  	          {
  	            className: 'type',
  	            begin: 'from +',
  	            end: '\\W',
  	            excludeBegin: true,
  	            excludeEnd: true
  	          },
  	          {
  	            className: 'type',
  	            begin: 'to +',
  	            end: '\\W',
  	            excludeBegin: true,
  	            excludeEnd: true
  	          },
  	          hljs.TITLE_MODE
  	        ],
  	        keywords: { keyword: 'abstract from to' }
  	      },
  	      {
  	        className: 'class', // classes
  	        begin: '\\b(class|interface) +',
  	        end: '[\\{$]',
  	        excludeEnd: true,
  	        keywords: 'class interface',
  	        contains: [
  	          {
  	            className: 'keyword',
  	            begin: '\\b(extends|implements) +',
  	            keywords: 'extends implements',
  	            contains: [
  	              {
  	                className: 'type',
  	                begin: hljs.IDENT_RE,
  	                relevance: 0
  	              }
  	            ]
  	          },
  	          hljs.TITLE_MODE
  	        ]
  	      },
  	      {
  	        className: 'function',
  	        beginKeywords: 'function',
  	        end: '\\(',
  	        excludeEnd: true,
  	        illegal: '\\S',
  	        contains: [ hljs.TITLE_MODE ]
  	      }
  	    ],
  	    illegal: /<\//
  	  };
  	}

  	haxe_1 = haxe;
  	return haxe_1;
  }

  /*
  Language: HSP
  Author: prince <MC.prince.0203@gmail.com>
  Website: https://en.wikipedia.org/wiki/Hot_Soup_Processor
  Category: scripting
  */

  var hsp_1;
  var hasRequiredHsp;

  function requireHsp () {
  	if (hasRequiredHsp) return hsp_1;
  	hasRequiredHsp = 1;
  	function hsp(hljs) {
  	  return {
  	    name: 'HSP',
  	    case_insensitive: true,
  	    keywords: {
  	      $pattern: /[\w._]+/,
  	      keyword: 'goto gosub return break repeat loop continue wait await dim sdim foreach dimtype dup dupptr end stop newmod delmod mref run exgoto on mcall assert logmes newlab resume yield onexit onerror onkey onclick oncmd exist delete mkdir chdir dirlist bload bsave bcopy memfile if else poke wpoke lpoke getstr chdpm memexpand memcpy memset notesel noteadd notedel noteload notesave randomize noteunsel noteget split strrep setease button chgdisp exec dialog mmload mmplay mmstop mci pset pget syscolor mes print title pos circle cls font sysfont objsize picload color palcolor palette redraw width gsel gcopy gzoom gmode bmpsave hsvcolor getkey listbox chkbox combox input mesbox buffer screen bgscr mouse objsel groll line clrobj boxf objprm objmode stick grect grotate gsquare gradf objimage objskip objenable celload celdiv celput newcom querycom delcom cnvstow comres axobj winobj sendmsg comevent comevarg sarrayconv callfunc cnvwtos comevdisp libptr system hspstat hspver stat cnt err strsize looplev sublev iparam wparam lparam refstr refdval int rnd strlen length length2 length3 length4 vartype gettime peek wpeek lpeek varptr varuse noteinfo instr abs limit getease str strmid strf getpath strtrim sin cos tan atan sqrt double absf expf logf limitf powf geteasef mousex mousey mousew hwnd hinstance hdc ginfo objinfo dirinfo sysinfo thismod __hspver__ __hsp30__ __date__ __time__ __line__ __file__ _debug __hspdef__ and or xor not screen_normal screen_palette screen_hide screen_fixedsize screen_tool screen_frame gmode_gdi gmode_mem gmode_rgb0 gmode_alpha gmode_rgb0alpha gmode_add gmode_sub gmode_pixela ginfo_mx ginfo_my ginfo_act ginfo_sel ginfo_wx1 ginfo_wy1 ginfo_wx2 ginfo_wy2 ginfo_vx ginfo_vy ginfo_sizex ginfo_sizey ginfo_winx ginfo_winy ginfo_mesx ginfo_mesy ginfo_r ginfo_g ginfo_b ginfo_paluse ginfo_dispx ginfo_dispy ginfo_cx ginfo_cy ginfo_intid ginfo_newid ginfo_sx ginfo_sy objinfo_mode objinfo_bmscr objinfo_hwnd notemax notesize dir_cur dir_exe dir_win dir_sys dir_cmdline dir_desktop dir_mydoc dir_tv font_normal font_bold font_italic font_underline font_strikeout font_antialias objmode_normal objmode_guifont objmode_usefont gsquare_grad msgothic msmincho do until while wend for next _break _continue switch case default swbreak swend ddim ldim alloc m_pi rad2deg deg2rad ease_linear ease_quad_in ease_quad_out ease_quad_inout ease_cubic_in ease_cubic_out ease_cubic_inout ease_quartic_in ease_quartic_out ease_quartic_inout ease_bounce_in ease_bounce_out ease_bounce_inout ease_shake_in ease_shake_out ease_shake_inout ease_loop'
  	    },
  	    contains: [
  	      hljs.C_LINE_COMMENT_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE,
  	      hljs.QUOTE_STRING_MODE,
  	      hljs.APOS_STRING_MODE,

  	      {
  	        // multi-line string
  	        className: 'string',
  	        begin: /\{"/,
  	        end: /"\}/,
  	        contains: [ hljs.BACKSLASH_ESCAPE ]
  	      },

  	      hljs.COMMENT(';', '$', { relevance: 0 }),

  	      {
  	        // pre-processor
  	        className: 'meta',
  	        begin: '#',
  	        end: '$',
  	        keywords: { keyword: 'addion cfunc cmd cmpopt comfunc const defcfunc deffunc define else endif enum epack func global if ifdef ifndef include modcfunc modfunc modinit modterm module pack packopt regcmd runtime undef usecom uselib' },
  	        contains: [
  	          hljs.inherit(hljs.QUOTE_STRING_MODE, { className: 'string' }),
  	          hljs.NUMBER_MODE,
  	          hljs.C_NUMBER_MODE,
  	          hljs.C_LINE_COMMENT_MODE,
  	          hljs.C_BLOCK_COMMENT_MODE
  	        ]
  	      },

  	      {
  	        // label
  	        className: 'symbol',
  	        begin: '^\\*(\\w+|@)'
  	      },

  	      hljs.NUMBER_MODE,
  	      hljs.C_NUMBER_MODE
  	    ]
  	  };
  	}

  	hsp_1 = hsp;
  	return hsp_1;
  }

  /*
  Language: HTTP
  Description: HTTP request and response headers with automatic body highlighting
  Author: Ivan Sagalaev <maniac@softwaremaniacs.org>
  Category: protocols, web
  Website: https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview
  */

  var http_1;
  var hasRequiredHttp;

  function requireHttp () {
  	if (hasRequiredHttp) return http_1;
  	hasRequiredHttp = 1;
  	function http(hljs) {
  	  const regex = hljs.regex;
  	  const VERSION = 'HTTP/([32]|1\\.[01])';
  	  const HEADER_NAME = /[A-Za-z][A-Za-z0-9-]*/;
  	  const HEADER = {
  	    className: 'attribute',
  	    begin: regex.concat('^', HEADER_NAME, '(?=\\:\\s)'),
  	    starts: { contains: [
  	      {
  	        className: "punctuation",
  	        begin: /: /,
  	        relevance: 0,
  	        starts: {
  	          end: '$',
  	          relevance: 0
  	        }
  	      }
  	    ] }
  	  };
  	  const HEADERS_AND_BODY = [
  	    HEADER,
  	    {
  	      begin: '\\n\\n',
  	      starts: {
  	        subLanguage: [],
  	        endsWithParent: true
  	      }
  	    }
  	  ];

  	  return {
  	    name: 'HTTP',
  	    aliases: [ 'https' ],
  	    illegal: /\S/,
  	    contains: [
  	      // response
  	      {
  	        begin: '^(?=' + VERSION + " \\d{3})",
  	        end: /$/,
  	        contains: [
  	          {
  	            className: "meta",
  	            begin: VERSION
  	          },
  	          {
  	            className: 'number',
  	            begin: '\\b\\d{3}\\b'
  	          }
  	        ],
  	        starts: {
  	          end: /\b\B/,
  	          illegal: /\S/,
  	          contains: HEADERS_AND_BODY
  	        }
  	      },
  	      // request
  	      {
  	        begin: '(?=^[A-Z]+ (.*?) ' + VERSION + '$)',
  	        end: /$/,
  	        contains: [
  	          {
  	            className: 'string',
  	            begin: ' ',
  	            end: ' ',
  	            excludeBegin: true,
  	            excludeEnd: true
  	          },
  	          {
  	            className: "meta",
  	            begin: VERSION
  	          },
  	          {
  	            className: 'keyword',
  	            begin: '[A-Z]+'
  	          }
  	        ],
  	        starts: {
  	          end: /\b\B/,
  	          illegal: /\S/,
  	          contains: HEADERS_AND_BODY
  	        }
  	      },
  	      // to allow headers to work even without a preamble
  	      hljs.inherit(HEADER, { relevance: 0 })
  	    ]
  	  };
  	}

  	http_1 = http;
  	return http_1;
  }

  /*
  Language: Hy
  Description: Hy is a wonderful dialect of Lisp that’s embedded in Python.
  Author: Sergey Sobko <s.sobko@profitware.ru>
  Website: http://docs.hylang.org/en/stable/
  Category: lisp
  */

  var hy_1;
  var hasRequiredHy;

  function requireHy () {
  	if (hasRequiredHy) return hy_1;
  	hasRequiredHy = 1;
  	function hy(hljs) {
  	  const SYMBOLSTART = 'a-zA-Z_\\-!.?+*=<>&#\'';
  	  const SYMBOL_RE = '[' + SYMBOLSTART + '][' + SYMBOLSTART + '0-9/;:]*';
  	  const keywords = {
  	    $pattern: SYMBOL_RE,
  	    built_in:
  	      // keywords
  	      '!= % %= & &= * ** **= *= *map '
  	      + '+ += , --build-class-- --import-- -= . / // //= '
  	      + '/= < << <<= <= = > >= >> >>= '
  	      + '@ @= ^ ^= abs accumulate all and any ap-compose '
  	      + 'ap-dotimes ap-each ap-each-while ap-filter ap-first ap-if ap-last ap-map ap-map-when ap-pipe '
  	      + 'ap-reduce ap-reject apply as-> ascii assert assoc bin break butlast '
  	      + 'callable calling-module-name car case cdr chain chr coll? combinations compile '
  	      + 'compress cond cons cons? continue count curry cut cycle dec '
  	      + 'def default-method defclass defmacro defmacro-alias defmacro/g! defmain defmethod defmulti defn '
  	      + 'defn-alias defnc defnr defreader defseq del delattr delete-route dict-comp dir '
  	      + 'disassemble dispatch-reader-macro distinct divmod do doto drop drop-last drop-while empty? '
  	      + 'end-sequence eval eval-and-compile eval-when-compile even? every? except exec filter first '
  	      + 'flatten float? fn fnc fnr for for* format fraction genexpr '
  	      + 'gensym get getattr global globals group-by hasattr hash hex id '
  	      + 'identity if if* if-not if-python2 import in inc input instance? '
  	      + 'integer integer-char? integer? interleave interpose is is-coll is-cons is-empty is-even '
  	      + 'is-every is-float is-instance is-integer is-integer-char is-iterable is-iterator is-keyword is-neg is-none '
  	      + 'is-not is-numeric is-odd is-pos is-string is-symbol is-zero isinstance islice issubclass '
  	      + 'iter iterable? iterate iterator? keyword keyword? lambda last len let '
  	      + 'lif lif-not list* list-comp locals loop macro-error macroexpand macroexpand-1 macroexpand-all '
  	      + 'map max merge-with method-decorator min multi-decorator multicombinations name neg? next '
  	      + 'none? nonlocal not not-in not? nth numeric? oct odd? open '
  	      + 'or ord partition permutations pos? post-route postwalk pow prewalk print '
  	      + 'product profile/calls profile/cpu put-route quasiquote quote raise range read read-str '
  	      + 'recursive-replace reduce remove repeat repeatedly repr require rest round route '
  	      + 'route-with-methods rwm second seq set-comp setattr setv some sorted string '
  	      + 'string? sum switch symbol? take take-nth take-while tee try unless '
  	      + 'unquote unquote-splicing vars walk when while with with* with-decorator with-gensyms '
  	      + 'xi xor yield yield-from zero? zip zip-longest | |= ~'
  	  };

  	  const SIMPLE_NUMBER_RE = '[-+]?\\d+(\\.\\d+)?';

  	  const SYMBOL = {
  	    begin: SYMBOL_RE,
  	    relevance: 0
  	  };
  	  const NUMBER = {
  	    className: 'number',
  	    begin: SIMPLE_NUMBER_RE,
  	    relevance: 0
  	  };
  	  const STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null });
  	  const COMMENT = hljs.COMMENT(
  	    ';',
  	    '$',
  	    { relevance: 0 }
  	  );
  	  const LITERAL = {
  	    className: 'literal',
  	    begin: /\b([Tt]rue|[Ff]alse|nil|None)\b/
  	  };
  	  const COLLECTION = {
  	    begin: '[\\[\\{]',
  	    end: '[\\]\\}]',
  	    relevance: 0
  	  };
  	  const HINT = {
  	    className: 'comment',
  	    begin: '\\^' + SYMBOL_RE
  	  };
  	  const HINT_COL = hljs.COMMENT('\\^\\{', '\\}');
  	  const KEY = {
  	    className: 'symbol',
  	    begin: '[:]{1,2}' + SYMBOL_RE
  	  };
  	  const LIST = {
  	    begin: '\\(',
  	    end: '\\)'
  	  };
  	  const BODY = {
  	    endsWithParent: true,
  	    relevance: 0
  	  };
  	  const NAME = {
  	    className: 'name',
  	    relevance: 0,
  	    keywords: keywords,
  	    begin: SYMBOL_RE,
  	    starts: BODY
  	  };
  	  const DEFAULT_CONTAINS = [
  	    LIST,
  	    STRING,
  	    HINT,
  	    HINT_COL,
  	    COMMENT,
  	    KEY,
  	    COLLECTION,
  	    NUMBER,
  	    LITERAL,
  	    SYMBOL
  	  ];

  	  LIST.contains = [
  	    hljs.COMMENT('comment', ''),
  	    NAME,
  	    BODY
  	  ];
  	  BODY.contains = DEFAULT_CONTAINS;
  	  COLLECTION.contains = DEFAULT_CONTAINS;

  	  return {
  	    name: 'Hy',
  	    aliases: [ 'hylang' ],
  	    illegal: /\S/,
  	    contains: [
  	      hljs.SHEBANG(),
  	      LIST,
  	      STRING,
  	      HINT,
  	      HINT_COL,
  	      COMMENT,
  	      KEY,
  	      COLLECTION,
  	      NUMBER,
  	      LITERAL
  	    ]
  	  };
  	}

  	hy_1 = hy;
  	return hy_1;
  }

  /*
  Language: Inform 7
  Author: Bruno Dias <bruno.r.dias@gmail.com>
  Description: Language definition for Inform 7, a DSL for writing parser interactive fiction.
  Website: http://inform7.com
  */

  var inform7_1;
  var hasRequiredInform7;

  function requireInform7 () {
  	if (hasRequiredInform7) return inform7_1;
  	hasRequiredInform7 = 1;
  	function inform7(hljs) {
  	  const START_BRACKET = '\\[';
  	  const END_BRACKET = '\\]';
  	  return {
  	    name: 'Inform 7',
  	    aliases: [ 'i7' ],
  	    case_insensitive: true,
  	    keywords: {
  	      // Some keywords more or less unique to I7, for relevance.
  	      keyword:
  	        // kind:
  	        'thing room person man woman animal container '
  	        + 'supporter backdrop door '
  	        // characteristic:
  	        + 'scenery open closed locked inside gender '
  	        // verb:
  	        + 'is are say understand '
  	        // misc keyword:
  	        + 'kind of rule' },
  	    contains: [
  	      {
  	        className: 'string',
  	        begin: '"',
  	        end: '"',
  	        relevance: 0,
  	        contains: [
  	          {
  	            className: 'subst',
  	            begin: START_BRACKET,
  	            end: END_BRACKET
  	          }
  	        ]
  	      },
  	      {
  	        className: 'section',
  	        begin: /^(Volume|Book|Part|Chapter|Section|Table)\b/,
  	        end: '$'
  	      },
  	      {
  	        // Rule definition
  	        // This is here for relevance.
  	        begin: /^(Check|Carry out|Report|Instead of|To|Rule|When|Before|After)\b/,
  	        end: ':',
  	        contains: [
  	          {
  	            // Rule name
  	            begin: '\\(This',
  	            end: '\\)'
  	          }
  	        ]
  	      },
  	      {
  	        className: 'comment',
  	        begin: START_BRACKET,
  	        end: END_BRACKET,
  	        contains: [ 'self' ]
  	      }
  	    ]
  	  };
  	}

  	inform7_1 = inform7;
  	return inform7_1;
  }

  /*
  Language: TOML, also INI
  Description: TOML aims to be a minimal configuration file format that's easy to read due to obvious semantics.
  Contributors: Guillaume Gomez <guillaume1.gomez@gmail.com>
  Category: common, config
  Website: https://github.com/toml-lang/toml
  */

  var ini_1;
  var hasRequiredIni;

  function requireIni () {
  	if (hasRequiredIni) return ini_1;
  	hasRequiredIni = 1;
  	function ini(hljs) {
  	  const regex = hljs.regex;
  	  const NUMBERS = {
  	    className: 'number',
  	    relevance: 0,
  	    variants: [
  	      { begin: /([+-]+)?[\d]+_[\d_]+/ },
  	      { begin: hljs.NUMBER_RE }
  	    ]
  	  };
  	  const COMMENTS = hljs.COMMENT();
  	  COMMENTS.variants = [
  	    {
  	      begin: /;/,
  	      end: /$/
  	    },
  	    {
  	      begin: /#/,
  	      end: /$/
  	    }
  	  ];
  	  const VARIABLES = {
  	    className: 'variable',
  	    variants: [
  	      { begin: /\$[\w\d"][\w\d_]*/ },
  	      { begin: /\$\{(.*?)\}/ }
  	    ]
  	  };
  	  const LITERALS = {
  	    className: 'literal',
  	    begin: /\bon|off|true|false|yes|no\b/
  	  };
  	  const STRINGS = {
  	    className: "string",
  	    contains: [ hljs.BACKSLASH_ESCAPE ],
  	    variants: [
  	      {
  	        begin: "'''",
  	        end: "'''",
  	        relevance: 10
  	      },
  	      {
  	        begin: '"""',
  	        end: '"""',
  	        relevance: 10
  	      },
  	      {
  	        begin: '"',
  	        end: '"'
  	      },
  	      {
  	        begin: "'",
  	        end: "'"
  	      }
  	    ]
  	  };
  	  const ARRAY = {
  	    begin: /\[/,
  	    end: /\]/,
  	    contains: [
  	      COMMENTS,
  	      LITERALS,
  	      VARIABLES,
  	      STRINGS,
  	      NUMBERS,
  	      'self'
  	    ],
  	    relevance: 0
  	  };

  	  const BARE_KEY = /[A-Za-z0-9_-]+/;
  	  const QUOTED_KEY_DOUBLE_QUOTE = /"(\\"|[^"])*"/;
  	  const QUOTED_KEY_SINGLE_QUOTE = /'[^']*'/;
  	  const ANY_KEY = regex.either(
  	    BARE_KEY, QUOTED_KEY_DOUBLE_QUOTE, QUOTED_KEY_SINGLE_QUOTE
  	  );
  	  const DOTTED_KEY = regex.concat(
  	    ANY_KEY, '(\\s*\\.\\s*', ANY_KEY, ')*',
  	    regex.lookahead(/\s*=\s*[^#\s]/)
  	  );

  	  return {
  	    name: 'TOML, also INI',
  	    aliases: [ 'toml' ],
  	    case_insensitive: true,
  	    illegal: /\S/,
  	    contains: [
  	      COMMENTS,
  	      {
  	        className: 'section',
  	        begin: /\[+/,
  	        end: /\]+/
  	      },
  	      {
  	        begin: DOTTED_KEY,
  	        className: 'attr',
  	        starts: {
  	          end: /$/,
  	          contains: [
  	            COMMENTS,
  	            ARRAY,
  	            LITERALS,
  	            VARIABLES,
  	            STRINGS,
  	            NUMBERS
  	          ]
  	        }
  	      }
  	    ]
  	  };
  	}

  	ini_1 = ini;
  	return ini_1;
  }

  /*
  Language: IRPF90
  Author: Anthony Scemama <scemama@irsamc.ups-tlse.fr>
  Description: IRPF90 is an open-source Fortran code generator
  Website: http://irpf90.ups-tlse.fr
  Category: scientific
  */

  var irpf90_1;
  var hasRequiredIrpf90;

  function requireIrpf90 () {
  	if (hasRequiredIrpf90) return irpf90_1;
  	hasRequiredIrpf90 = 1;
  	/** @type LanguageFn */
  	function irpf90(hljs) {
  	  const regex = hljs.regex;
  	  const PARAMS = {
  	    className: 'params',
  	    begin: '\\(',
  	    end: '\\)'
  	  };

  	  // regex in both fortran and irpf90 should match
  	  const OPTIONAL_NUMBER_SUFFIX = /(_[a-z_\d]+)?/;
  	  const OPTIONAL_NUMBER_EXP = /([de][+-]?\d+)?/;
  	  const NUMBER = {
  	    className: 'number',
  	    variants: [
  	      { begin: regex.concat(/\b\d+/, /\.(\d*)/, OPTIONAL_NUMBER_EXP, OPTIONAL_NUMBER_SUFFIX) },
  	      { begin: regex.concat(/\b\d+/, OPTIONAL_NUMBER_EXP, OPTIONAL_NUMBER_SUFFIX) },
  	      { begin: regex.concat(/\.\d+/, OPTIONAL_NUMBER_EXP, OPTIONAL_NUMBER_SUFFIX) }
  	    ],
  	    relevance: 0
  	  };

  	  const F_KEYWORDS = {
  	    literal: '.False. .True.',
  	    keyword: 'kind do while private call intrinsic where elsewhere '
  	      + 'type endtype endmodule endselect endinterface end enddo endif if forall endforall only contains default return stop then '
  	      + 'public subroutine|10 function program .and. .or. .not. .le. .eq. .ge. .gt. .lt. '
  	      + 'goto save else use module select case '
  	      + 'access blank direct exist file fmt form formatted iostat name named nextrec number opened rec recl sequential status unformatted unit '
  	      + 'continue format pause cycle exit '
  	      + 'c_null_char c_alert c_backspace c_form_feed flush wait decimal round iomsg '
  	      + 'synchronous nopass non_overridable pass protected volatile abstract extends import '
  	      + 'non_intrinsic value deferred generic final enumerator class associate bind enum '
  	      + 'c_int c_short c_long c_long_long c_signed_char c_size_t c_int8_t c_int16_t c_int32_t c_int64_t c_int_least8_t c_int_least16_t '
  	      + 'c_int_least32_t c_int_least64_t c_int_fast8_t c_int_fast16_t c_int_fast32_t c_int_fast64_t c_intmax_t C_intptr_t c_float c_double '
  	      + 'c_long_double c_float_complex c_double_complex c_long_double_complex c_bool c_char c_null_ptr c_null_funptr '
  	      + 'c_new_line c_carriage_return c_horizontal_tab c_vertical_tab iso_c_binding c_loc c_funloc c_associated  c_f_pointer '
  	      + 'c_ptr c_funptr iso_fortran_env character_storage_size error_unit file_storage_size input_unit iostat_end iostat_eor '
  	      + 'numeric_storage_size output_unit c_f_procpointer ieee_arithmetic ieee_support_underflow_control '
  	      + 'ieee_get_underflow_mode ieee_set_underflow_mode newunit contiguous recursive '
  	      + 'pad position action delim readwrite eor advance nml interface procedure namelist include sequence elemental pure '
  	      + 'integer real character complex logical dimension allocatable|10 parameter '
  	      + 'external implicit|10 none double precision assign intent optional pointer '
  	      + 'target in out common equivalence data '
  	      // IRPF90 special keywords
  	      + 'begin_provider &begin_provider end_provider begin_shell end_shell begin_template end_template subst assert touch '
  	      + 'soft_touch provide no_dep free irp_if irp_else irp_endif irp_write irp_read',
  	    built_in: 'alog alog10 amax0 amax1 amin0 amin1 amod cabs ccos cexp clog csin csqrt dabs dacos dasin datan datan2 dcos dcosh ddim dexp dint '
  	      + 'dlog dlog10 dmax1 dmin1 dmod dnint dsign dsin dsinh dsqrt dtan dtanh float iabs idim idint idnint ifix isign max0 max1 min0 min1 sngl '
  	      + 'algama cdabs cdcos cdexp cdlog cdsin cdsqrt cqabs cqcos cqexp cqlog cqsin cqsqrt dcmplx dconjg derf derfc dfloat dgamma dimag dlgama '
  	      + 'iqint qabs qacos qasin qatan qatan2 qcmplx qconjg qcos qcosh qdim qerf qerfc qexp qgamma qimag qlgama qlog qlog10 qmax1 qmin1 qmod '
  	      + 'qnint qsign qsin qsinh qsqrt qtan qtanh abs acos aimag aint anint asin atan atan2 char cmplx conjg cos cosh exp ichar index int log '
  	      + 'log10 max min nint sign sin sinh sqrt tan tanh print write dim lge lgt lle llt mod nullify allocate deallocate '
  	      + 'adjustl adjustr all allocated any associated bit_size btest ceiling count cshift date_and_time digits dot_product '
  	      + 'eoshift epsilon exponent floor fraction huge iand ibclr ibits ibset ieor ior ishft ishftc lbound len_trim matmul '
  	      + 'maxexponent maxloc maxval merge minexponent minloc minval modulo mvbits nearest pack present product '
  	      + 'radix random_number random_seed range repeat reshape rrspacing scale scan selected_int_kind selected_real_kind '
  	      + 'set_exponent shape size spacing spread sum system_clock tiny transpose trim ubound unpack verify achar iachar transfer '
  	      + 'dble entry dprod cpu_time command_argument_count get_command get_command_argument get_environment_variable is_iostat_end '
  	      + 'ieee_arithmetic ieee_support_underflow_control ieee_get_underflow_mode ieee_set_underflow_mode '
  	      + 'is_iostat_eor move_alloc new_line selected_char_kind same_type_as extends_type_of '
  	      + 'acosh asinh atanh bessel_j0 bessel_j1 bessel_jn bessel_y0 bessel_y1 bessel_yn erf erfc erfc_scaled gamma log_gamma hypot norm2 '
  	      + 'atomic_define atomic_ref execute_command_line leadz trailz storage_size merge_bits '
  	      + 'bge bgt ble blt dshiftl dshiftr findloc iall iany iparity image_index lcobound ucobound maskl maskr '
  	      + 'num_images parity popcnt poppar shifta shiftl shiftr this_image '
  	      // IRPF90 special built_ins
  	      + 'IRP_ALIGN irp_here'
  	  };
  	  return {
  	    name: 'IRPF90',
  	    case_insensitive: true,
  	    keywords: F_KEYWORDS,
  	    illegal: /\/\*/,
  	    contains: [
  	      hljs.inherit(hljs.APOS_STRING_MODE, {
  	        className: 'string',
  	        relevance: 0
  	      }),
  	      hljs.inherit(hljs.QUOTE_STRING_MODE, {
  	        className: 'string',
  	        relevance: 0
  	      }),
  	      {
  	        className: 'function',
  	        beginKeywords: 'subroutine function program',
  	        illegal: '[${=\\n]',
  	        contains: [
  	          hljs.UNDERSCORE_TITLE_MODE,
  	          PARAMS
  	        ]
  	      },
  	      hljs.COMMENT('!', '$', { relevance: 0 }),
  	      hljs.COMMENT('begin_doc', 'end_doc', { relevance: 10 }),
  	      NUMBER
  	    ]
  	  };
  	}

  	irpf90_1 = irpf90;
  	return irpf90_1;
  }

  /*
  Language: ISBL
  Author: Dmitriy Tarasov <dimatar@gmail.com>
  Description: built-in language DIRECTUM
  Category: enterprise
  */

  var isbl_1;
  var hasRequiredIsbl;

  function requireIsbl () {
  	if (hasRequiredIsbl) return isbl_1;
  	hasRequiredIsbl = 1;
  	function isbl(hljs) {
  	  // Определение идентификаторов
  	  const UNDERSCORE_IDENT_RE = "[A-Za-zА-Яа-яёЁ_!][A-Za-zА-Яа-яёЁ_0-9]*";

  	  // Определение имен функций
  	  const FUNCTION_NAME_IDENT_RE = "[A-Za-zА-Яа-яёЁ_][A-Za-zА-Яа-яёЁ_0-9]*";

  	  // keyword : ключевые слова
  	  const KEYWORD =
  	    "and и else иначе endexcept endfinally endforeach конецвсе endif конецесли endwhile конецпока "
  	    + "except exitfor finally foreach все if если in в not не or или try while пока ";

  	  // SYSRES Constants
  	  const sysres_constants =
  	    "SYSRES_CONST_ACCES_RIGHT_TYPE_EDIT "
  	    + "SYSRES_CONST_ACCES_RIGHT_TYPE_FULL "
  	    + "SYSRES_CONST_ACCES_RIGHT_TYPE_VIEW "
  	    + "SYSRES_CONST_ACCESS_MODE_REQUISITE_CODE "
  	    + "SYSRES_CONST_ACCESS_NO_ACCESS_VIEW "
  	    + "SYSRES_CONST_ACCESS_NO_ACCESS_VIEW_CODE "
  	    + "SYSRES_CONST_ACCESS_RIGHTS_ADD_REQUISITE_CODE "
  	    + "SYSRES_CONST_ACCESS_RIGHTS_ADD_REQUISITE_YES_CODE "
  	    + "SYSRES_CONST_ACCESS_RIGHTS_CHANGE_REQUISITE_CODE "
  	    + "SYSRES_CONST_ACCESS_RIGHTS_CHANGE_REQUISITE_YES_CODE "
  	    + "SYSRES_CONST_ACCESS_RIGHTS_DELETE_REQUISITE_CODE "
  	    + "SYSRES_CONST_ACCESS_RIGHTS_DELETE_REQUISITE_YES_CODE "
  	    + "SYSRES_CONST_ACCESS_RIGHTS_EXECUTE_REQUISITE_CODE "
  	    + "SYSRES_CONST_ACCESS_RIGHTS_EXECUTE_REQUISITE_YES_CODE "
  	    + "SYSRES_CONST_ACCESS_RIGHTS_NO_ACCESS_REQUISITE_CODE "
  	    + "SYSRES_CONST_ACCESS_RIGHTS_NO_ACCESS_REQUISITE_YES_CODE "
  	    + "SYSRES_CONST_ACCESS_RIGHTS_RATIFY_REQUISITE_CODE "
  	    + "SYSRES_CONST_ACCESS_RIGHTS_RATIFY_REQUISITE_YES_CODE "
  	    + "SYSRES_CONST_ACCESS_RIGHTS_REQUISITE_CODE "
  	    + "SYSRES_CONST_ACCESS_RIGHTS_VIEW "
  	    + "SYSRES_CONST_ACCESS_RIGHTS_VIEW_CODE "
  	    + "SYSRES_CONST_ACCESS_RIGHTS_VIEW_REQUISITE_CODE "
  	    + "SYSRES_CONST_ACCESS_RIGHTS_VIEW_REQUISITE_YES_CODE "
  	    + "SYSRES_CONST_ACCESS_TYPE_CHANGE "
  	    + "SYSRES_CONST_ACCESS_TYPE_CHANGE_CODE "
  	    + "SYSRES_CONST_ACCESS_TYPE_EXISTS "
  	    + "SYSRES_CONST_ACCESS_TYPE_EXISTS_CODE "
  	    + "SYSRES_CONST_ACCESS_TYPE_FULL "
  	    + "SYSRES_CONST_ACCESS_TYPE_FULL_CODE "
  	    + "SYSRES_CONST_ACCESS_TYPE_VIEW "
  	    + "SYSRES_CONST_ACCESS_TYPE_VIEW_CODE "
  	    + "SYSRES_CONST_ACTION_TYPE_ABORT "
  	    + "SYSRES_CONST_ACTION_TYPE_ACCEPT "
  	    + "SYSRES_CONST_ACTION_TYPE_ACCESS_RIGHTS "
  	    + "SYSRES_CONST_ACTION_TYPE_ADD_ATTACHMENT "
  	    + "SYSRES_CONST_ACTION_TYPE_CHANGE_CARD "
  	    + "SYSRES_CONST_ACTION_TYPE_CHANGE_KIND "
  	    + "SYSRES_CONST_ACTION_TYPE_CHANGE_STORAGE "
  	    + "SYSRES_CONST_ACTION_TYPE_CONTINUE "
  	    + "SYSRES_CONST_ACTION_TYPE_COPY "
  	    + "SYSRES_CONST_ACTION_TYPE_CREATE "
  	    + "SYSRES_CONST_ACTION_TYPE_CREATE_VERSION "
  	    + "SYSRES_CONST_ACTION_TYPE_DELETE "
  	    + "SYSRES_CONST_ACTION_TYPE_DELETE_ATTACHMENT "
  	    + "SYSRES_CONST_ACTION_TYPE_DELETE_VERSION "
  	    + "SYSRES_CONST_ACTION_TYPE_DISABLE_DELEGATE_ACCESS_RIGHTS "
  	    + "SYSRES_CONST_ACTION_TYPE_ENABLE_DELEGATE_ACCESS_RIGHTS "
  	    + "SYSRES_CONST_ACTION_TYPE_ENCRYPTION_BY_CERTIFICATE "
  	    + "SYSRES_CONST_ACTION_TYPE_ENCRYPTION_BY_CERTIFICATE_AND_PASSWORD "
  	    + "SYSRES_CONST_ACTION_TYPE_ENCRYPTION_BY_PASSWORD "
  	    + "SYSRES_CONST_ACTION_TYPE_EXPORT_WITH_LOCK "
  	    + "SYSRES_CONST_ACTION_TYPE_EXPORT_WITHOUT_LOCK "
  	    + "SYSRES_CONST_ACTION_TYPE_IMPORT_WITH_UNLOCK "
  	    + "SYSRES_CONST_ACTION_TYPE_IMPORT_WITHOUT_UNLOCK "
  	    + "SYSRES_CONST_ACTION_TYPE_LIFE_CYCLE_STAGE "
  	    + "SYSRES_CONST_ACTION_TYPE_LOCK "
  	    + "SYSRES_CONST_ACTION_TYPE_LOCK_FOR_SERVER "
  	    + "SYSRES_CONST_ACTION_TYPE_LOCK_MODIFY "
  	    + "SYSRES_CONST_ACTION_TYPE_MARK_AS_READED "
  	    + "SYSRES_CONST_ACTION_TYPE_MARK_AS_UNREADED "
  	    + "SYSRES_CONST_ACTION_TYPE_MODIFY "
  	    + "SYSRES_CONST_ACTION_TYPE_MODIFY_CARD "
  	    + "SYSRES_CONST_ACTION_TYPE_MOVE_TO_ARCHIVE "
  	    + "SYSRES_CONST_ACTION_TYPE_OFF_ENCRYPTION "
  	    + "SYSRES_CONST_ACTION_TYPE_PASSWORD_CHANGE "
  	    + "SYSRES_CONST_ACTION_TYPE_PERFORM "
  	    + "SYSRES_CONST_ACTION_TYPE_RECOVER_FROM_LOCAL_COPY "
  	    + "SYSRES_CONST_ACTION_TYPE_RESTART "
  	    + "SYSRES_CONST_ACTION_TYPE_RESTORE_FROM_ARCHIVE "
  	    + "SYSRES_CONST_ACTION_TYPE_REVISION "
  	    + "SYSRES_CONST_ACTION_TYPE_SEND_BY_MAIL "
  	    + "SYSRES_CONST_ACTION_TYPE_SIGN "
  	    + "SYSRES_CONST_ACTION_TYPE_START "
  	    + "SYSRES_CONST_ACTION_TYPE_UNLOCK "
  	    + "SYSRES_CONST_ACTION_TYPE_UNLOCK_FROM_SERVER "
  	    + "SYSRES_CONST_ACTION_TYPE_VERSION_STATE "
  	    + "SYSRES_CONST_ACTION_TYPE_VERSION_VISIBILITY "
  	    + "SYSRES_CONST_ACTION_TYPE_VIEW "
  	    + "SYSRES_CONST_ACTION_TYPE_VIEW_SHADOW_COPY "
  	    + "SYSRES_CONST_ACTION_TYPE_WORKFLOW_DESCRIPTION_MODIFY "
  	    + "SYSRES_CONST_ACTION_TYPE_WRITE_HISTORY "
  	    + "SYSRES_CONST_ACTIVE_VERSION_STATE_PICK_VALUE "
  	    + "SYSRES_CONST_ADD_REFERENCE_MODE_NAME "
  	    + "SYSRES_CONST_ADDITION_REQUISITE_CODE "
  	    + "SYSRES_CONST_ADDITIONAL_PARAMS_REQUISITE_CODE "
  	    + "SYSRES_CONST_ADITIONAL_JOB_END_DATE_REQUISITE_NAME "
  	    + "SYSRES_CONST_ADITIONAL_JOB_READ_REQUISITE_NAME "
  	    + "SYSRES_CONST_ADITIONAL_JOB_START_DATE_REQUISITE_NAME "
  	    + "SYSRES_CONST_ADITIONAL_JOB_STATE_REQUISITE_NAME "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_ADDING_USER_TO_GROUP_ACTION "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_ADDING_USER_TO_GROUP_ACTION_CODE "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_COMP_ACTION "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_COMP_ACTION_CODE "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_GROUP_ACTION "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_GROUP_ACTION_CODE "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_USER_ACTION "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_USER_ACTION_CODE "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_DATABASE_USER_CREATION "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_DATABASE_USER_CREATION_ACTION "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_DATABASE_USER_DELETION "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_DATABASE_USER_DELETION_ACTION "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_COMP_ACTION "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_COMP_ACTION_CODE "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_GROUP_ACTION "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_GROUP_ACTION_CODE "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_USER_ACTION "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_USER_ACTION_CODE "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_USER_FROM_GROUP_ACTION "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_USER_FROM_GROUP_ACTION_CODE "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_FILTERER_ACTION "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_FILTERER_ACTION_CODE "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_FILTERER_RESTRICTION_ACTION "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_FILTERER_RESTRICTION_ACTION_CODE "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_PRIVILEGE_ACTION "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_PRIVILEGE_ACTION_CODE "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_RIGHTS_ACTION "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_RIGHTS_ACTION_CODE "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_IS_MAIN_SERVER_CHANGED_ACTION "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_IS_MAIN_SERVER_CHANGED_ACTION_CODE "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_IS_PUBLIC_CHANGED_ACTION "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_IS_PUBLIC_CHANGED_ACTION_CODE "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_FILTERER_ACTION "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_FILTERER_ACTION_CODE "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_FILTERER_RESTRICTION_ACTION "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_FILTERER_RESTRICTION_ACTION_CODE "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_PRIVILEGE_ACTION "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_PRIVILEGE_ACTION_CODE "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_RIGHTS_ACTION "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_RIGHTS_ACTION_CODE "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_SERVER_LOGIN_CREATION "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_SERVER_LOGIN_CREATION_ACTION "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_SERVER_LOGIN_DELETION "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_SERVER_LOGIN_DELETION_ACTION "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_CATEGORY_ACTION "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_CATEGORY_ACTION_CODE "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_COMP_TITLE_ACTION "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_COMP_TITLE_ACTION_CODE "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_FULL_NAME_ACTION "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_FULL_NAME_ACTION_CODE "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_GROUP_ACTION "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_GROUP_ACTION_CODE "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_PARENT_GROUP_ACTION "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_PARENT_GROUP_ACTION_CODE "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_AUTH_TYPE_ACTION "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_AUTH_TYPE_ACTION_CODE "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_LOGIN_ACTION "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_LOGIN_ACTION_CODE "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_STATUS_ACTION "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_STATUS_ACTION_CODE "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_USER_PASSWORD_CHANGE "
  	    + "SYSRES_CONST_ADMINISTRATION_HISTORY_USER_PASSWORD_CHANGE_ACTION "
  	    + "SYSRES_CONST_ALL_ACCEPT_CONDITION_RUS "
  	    + "SYSRES_CONST_ALL_USERS_GROUP "
  	    + "SYSRES_CONST_ALL_USERS_GROUP_NAME "
  	    + "SYSRES_CONST_ALL_USERS_SERVER_GROUP_NAME "
  	    + "SYSRES_CONST_ALLOWED_ACCESS_TYPE_CODE "
  	    + "SYSRES_CONST_ALLOWED_ACCESS_TYPE_NAME "
  	    + "SYSRES_CONST_APP_VIEWER_TYPE_REQUISITE_CODE "
  	    + "SYSRES_CONST_APPROVING_SIGNATURE_NAME "
  	    + "SYSRES_CONST_APPROVING_SIGNATURE_REQUISITE_CODE "
  	    + "SYSRES_CONST_ASSISTANT_SUBSTITUE_TYPE "
  	    + "SYSRES_CONST_ASSISTANT_SUBSTITUE_TYPE_CODE "
  	    + "SYSRES_CONST_ATTACH_TYPE_COMPONENT_TOKEN "
  	    + "SYSRES_CONST_ATTACH_TYPE_DOC "
  	    + "SYSRES_CONST_ATTACH_TYPE_EDOC "
  	    + "SYSRES_CONST_ATTACH_TYPE_FOLDER "
  	    + "SYSRES_CONST_ATTACH_TYPE_JOB "
  	    + "SYSRES_CONST_ATTACH_TYPE_REFERENCE "
  	    + "SYSRES_CONST_ATTACH_TYPE_TASK "
  	    + "SYSRES_CONST_AUTH_ENCODED_PASSWORD "
  	    + "SYSRES_CONST_AUTH_ENCODED_PASSWORD_CODE "
  	    + "SYSRES_CONST_AUTH_NOVELL "
  	    + "SYSRES_CONST_AUTH_PASSWORD "
  	    + "SYSRES_CONST_AUTH_PASSWORD_CODE "
  	    + "SYSRES_CONST_AUTH_WINDOWS "
  	    + "SYSRES_CONST_AUTHENTICATING_SIGNATURE_NAME "
  	    + "SYSRES_CONST_AUTHENTICATING_SIGNATURE_REQUISITE_CODE "
  	    + "SYSRES_CONST_AUTO_ENUM_METHOD_FLAG "
  	    + "SYSRES_CONST_AUTO_NUMERATION_CODE "
  	    + "SYSRES_CONST_AUTO_STRONG_ENUM_METHOD_FLAG "
  	    + "SYSRES_CONST_AUTOTEXT_NAME_REQUISITE_CODE "
  	    + "SYSRES_CONST_AUTOTEXT_TEXT_REQUISITE_CODE "
  	    + "SYSRES_CONST_AUTOTEXT_USAGE_ALL "
  	    + "SYSRES_CONST_AUTOTEXT_USAGE_ALL_CODE "
  	    + "SYSRES_CONST_AUTOTEXT_USAGE_SIGN "
  	    + "SYSRES_CONST_AUTOTEXT_USAGE_SIGN_CODE "
  	    + "SYSRES_CONST_AUTOTEXT_USAGE_WORK "
  	    + "SYSRES_CONST_AUTOTEXT_USAGE_WORK_CODE "
  	    + "SYSRES_CONST_AUTOTEXT_USE_ANYWHERE_CODE "
  	    + "SYSRES_CONST_AUTOTEXT_USE_ON_SIGNING_CODE "
  	    + "SYSRES_CONST_AUTOTEXT_USE_ON_WORK_CODE "
  	    + "SYSRES_CONST_BEGIN_DATE_REQUISITE_CODE "
  	    + "SYSRES_CONST_BLACK_LIFE_CYCLE_STAGE_FONT_COLOR "
  	    + "SYSRES_CONST_BLUE_LIFE_CYCLE_STAGE_FONT_COLOR "
  	    + "SYSRES_CONST_BTN_PART "
  	    + "SYSRES_CONST_CALCULATED_ROLE_TYPE_CODE "
  	    + "SYSRES_CONST_CALL_TYPE_VARIABLE_BUTTON_VALUE "
  	    + "SYSRES_CONST_CALL_TYPE_VARIABLE_PROGRAM_VALUE "
  	    + "SYSRES_CONST_CANCEL_MESSAGE_FUNCTION_RESULT "
  	    + "SYSRES_CONST_CARD_PART "
  	    + "SYSRES_CONST_CARD_REFERENCE_MODE_NAME "
  	    + "SYSRES_CONST_CERTIFICATE_TYPE_REQUISITE_ENCRYPT_VALUE "
  	    + "SYSRES_CONST_CERTIFICATE_TYPE_REQUISITE_SIGN_AND_ENCRYPT_VALUE "
  	    + "SYSRES_CONST_CERTIFICATE_TYPE_REQUISITE_SIGN_VALUE "
  	    + "SYSRES_CONST_CHECK_PARAM_VALUE_DATE_PARAM_TYPE "
  	    + "SYSRES_CONST_CHECK_PARAM_VALUE_FLOAT_PARAM_TYPE "
  	    + "SYSRES_CONST_CHECK_PARAM_VALUE_INTEGER_PARAM_TYPE "
  	    + "SYSRES_CONST_CHECK_PARAM_VALUE_PICK_PARAM_TYPE "
  	    + "SYSRES_CONST_CHECK_PARAM_VALUE_REEFRENCE_PARAM_TYPE "
  	    + "SYSRES_CONST_CLOSED_RECORD_FLAG_VALUE_FEMININE "
  	    + "SYSRES_CONST_CLOSED_RECORD_FLAG_VALUE_MASCULINE "
  	    + "SYSRES_CONST_CODE_COMPONENT_TYPE_ADMIN "
  	    + "SYSRES_CONST_CODE_COMPONENT_TYPE_DEVELOPER "
  	    + "SYSRES_CONST_CODE_COMPONENT_TYPE_DOCS "
  	    + "SYSRES_CONST_CODE_COMPONENT_TYPE_EDOC_CARDS "
  	    + "SYSRES_CONST_CODE_COMPONENT_TYPE_EXTERNAL_EXECUTABLE "
  	    + "SYSRES_CONST_CODE_COMPONENT_TYPE_OTHER "
  	    + "SYSRES_CONST_CODE_COMPONENT_TYPE_REFERENCE "
  	    + "SYSRES_CONST_CODE_COMPONENT_TYPE_REPORT "
  	    + "SYSRES_CONST_CODE_COMPONENT_TYPE_SCRIPT "
  	    + "SYSRES_CONST_CODE_COMPONENT_TYPE_URL "
  	    + "SYSRES_CONST_CODE_REQUISITE_ACCESS "
  	    + "SYSRES_CONST_CODE_REQUISITE_CODE "
  	    + "SYSRES_CONST_CODE_REQUISITE_COMPONENT "
  	    + "SYSRES_CONST_CODE_REQUISITE_DESCRIPTION "
  	    + "SYSRES_CONST_CODE_REQUISITE_EXCLUDE_COMPONENT "
  	    + "SYSRES_CONST_CODE_REQUISITE_RECORD "
  	    + "SYSRES_CONST_COMMENT_REQ_CODE "
  	    + "SYSRES_CONST_COMMON_SETTINGS_REQUISITE_CODE "
  	    + "SYSRES_CONST_COMP_CODE_GRD "
  	    + "SYSRES_CONST_COMPONENT_GROUP_TYPE_REQUISITE_CODE "
  	    + "SYSRES_CONST_COMPONENT_TYPE_ADMIN_COMPONENTS "
  	    + "SYSRES_CONST_COMPONENT_TYPE_DEVELOPER_COMPONENTS "
  	    + "SYSRES_CONST_COMPONENT_TYPE_DOCS "
  	    + "SYSRES_CONST_COMPONENT_TYPE_EDOC_CARDS "
  	    + "SYSRES_CONST_COMPONENT_TYPE_EDOCS "
  	    + "SYSRES_CONST_COMPONENT_TYPE_EXTERNAL_EXECUTABLE "
  	    + "SYSRES_CONST_COMPONENT_TYPE_OTHER "
  	    + "SYSRES_CONST_COMPONENT_TYPE_REFERENCE_TYPES "
  	    + "SYSRES_CONST_COMPONENT_TYPE_REFERENCES "
  	    + "SYSRES_CONST_COMPONENT_TYPE_REPORTS "
  	    + "SYSRES_CONST_COMPONENT_TYPE_SCRIPTS "
  	    + "SYSRES_CONST_COMPONENT_TYPE_URL "
  	    + "SYSRES_CONST_COMPONENTS_REMOTE_SERVERS_VIEW_CODE "
  	    + "SYSRES_CONST_CONDITION_BLOCK_DESCRIPTION "
  	    + "SYSRES_CONST_CONST_FIRM_STATUS_COMMON "
  	    + "SYSRES_CONST_CONST_FIRM_STATUS_INDIVIDUAL "
  	    + "SYSRES_CONST_CONST_NEGATIVE_VALUE "
  	    + "SYSRES_CONST_CONST_POSITIVE_VALUE "
  	    + "SYSRES_CONST_CONST_SERVER_STATUS_DONT_REPLICATE "
  	    + "SYSRES_CONST_CONST_SERVER_STATUS_REPLICATE "
  	    + "SYSRES_CONST_CONTENTS_REQUISITE_CODE "
  	    + "SYSRES_CONST_DATA_TYPE_BOOLEAN "
  	    + "SYSRES_CONST_DATA_TYPE_DATE "
  	    + "SYSRES_CONST_DATA_TYPE_FLOAT "
  	    + "SYSRES_CONST_DATA_TYPE_INTEGER "
  	    + "SYSRES_CONST_DATA_TYPE_PICK "
  	    + "SYSRES_CONST_DATA_TYPE_REFERENCE "
  	    + "SYSRES_CONST_DATA_TYPE_STRING "
  	    + "SYSRES_CONST_DATA_TYPE_TEXT "
  	    + "SYSRES_CONST_DATA_TYPE_VARIANT "
  	    + "SYSRES_CONST_DATE_CLOSE_REQ_CODE "
  	    + "SYSRES_CONST_DATE_FORMAT_DATE_ONLY_CHAR "
  	    + "SYSRES_CONST_DATE_OPEN_REQ_CODE "
  	    + "SYSRES_CONST_DATE_REQUISITE "
  	    + "SYSRES_CONST_DATE_REQUISITE_CODE "
  	    + "SYSRES_CONST_DATE_REQUISITE_NAME "
  	    + "SYSRES_CONST_DATE_REQUISITE_TYPE "
  	    + "SYSRES_CONST_DATE_TYPE_CHAR "
  	    + "SYSRES_CONST_DATETIME_FORMAT_VALUE "
  	    + "SYSRES_CONST_DEA_ACCESS_RIGHTS_ACTION_CODE "
  	    + "SYSRES_CONST_DESCRIPTION_LOCALIZE_ID_REQUISITE_CODE "
  	    + "SYSRES_CONST_DESCRIPTION_REQUISITE_CODE "
  	    + "SYSRES_CONST_DET1_PART "
  	    + "SYSRES_CONST_DET2_PART "
  	    + "SYSRES_CONST_DET3_PART "
  	    + "SYSRES_CONST_DET4_PART "
  	    + "SYSRES_CONST_DET5_PART "
  	    + "SYSRES_CONST_DET6_PART "
  	    + "SYSRES_CONST_DETAIL_DATASET_KEY_REQUISITE_CODE "
  	    + "SYSRES_CONST_DETAIL_PICK_REQUISITE_CODE "
  	    + "SYSRES_CONST_DETAIL_REQ_CODE "
  	    + "SYSRES_CONST_DO_NOT_USE_ACCESS_TYPE_CODE "
  	    + "SYSRES_CONST_DO_NOT_USE_ACCESS_TYPE_NAME "
  	    + "SYSRES_CONST_DO_NOT_USE_ON_VIEW_ACCESS_TYPE_CODE "
  	    + "SYSRES_CONST_DO_NOT_USE_ON_VIEW_ACCESS_TYPE_NAME "
  	    + "SYSRES_CONST_DOCUMENT_STORAGES_CODE "
  	    + "SYSRES_CONST_DOCUMENT_TEMPLATES_TYPE_NAME "
  	    + "SYSRES_CONST_DOUBLE_REQUISITE_CODE "
  	    + "SYSRES_CONST_EDITOR_CLOSE_FILE_OBSERV_TYPE_CODE "
  	    + "SYSRES_CONST_EDITOR_CLOSE_PROCESS_OBSERV_TYPE_CODE "
  	    + "SYSRES_CONST_EDITOR_TYPE_REQUISITE_CODE "
  	    + "SYSRES_CONST_EDITORS_APPLICATION_NAME_REQUISITE_CODE "
  	    + "SYSRES_CONST_EDITORS_CREATE_SEVERAL_PROCESSES_REQUISITE_CODE "
  	    + "SYSRES_CONST_EDITORS_EXTENSION_REQUISITE_CODE "
  	    + "SYSRES_CONST_EDITORS_OBSERVER_BY_PROCESS_TYPE "
  	    + "SYSRES_CONST_EDITORS_REFERENCE_CODE "
  	    + "SYSRES_CONST_EDITORS_REPLACE_SPEC_CHARS_REQUISITE_CODE "
  	    + "SYSRES_CONST_EDITORS_USE_PLUGINS_REQUISITE_CODE "
  	    + "SYSRES_CONST_EDITORS_VIEW_DOCUMENT_OPENED_TO_EDIT_CODE "
  	    + "SYSRES_CONST_EDOC_CARD_TYPE_REQUISITE_CODE "
  	    + "SYSRES_CONST_EDOC_CARD_TYPES_LINK_REQUISITE_CODE "
  	    + "SYSRES_CONST_EDOC_CERTIFICATE_AND_PASSWORD_ENCODE_CODE "
  	    + "SYSRES_CONST_EDOC_CERTIFICATE_ENCODE_CODE "
  	    + "SYSRES_CONST_EDOC_DATE_REQUISITE_CODE "
  	    + "SYSRES_CONST_EDOC_KIND_REFERENCE_CODE "
  	    + "SYSRES_CONST_EDOC_KINDS_BY_TEMPLATE_ACTION_CODE "
  	    + "SYSRES_CONST_EDOC_MANAGE_ACCESS_CODE "
  	    + "SYSRES_CONST_EDOC_NONE_ENCODE_CODE "
  	    + "SYSRES_CONST_EDOC_NUMBER_REQUISITE_CODE "
  	    + "SYSRES_CONST_EDOC_PASSWORD_ENCODE_CODE "
  	    + "SYSRES_CONST_EDOC_READONLY_ACCESS_CODE "
  	    + "SYSRES_CONST_EDOC_SHELL_LIFE_TYPE_VIEW_VALUE "
  	    + "SYSRES_CONST_EDOC_SIZE_RESTRICTION_PRIORITY_REQUISITE_CODE "
  	    + "SYSRES_CONST_EDOC_STORAGE_CHECK_ACCESS_RIGHTS_REQUISITE_CODE "
  	    + "SYSRES_CONST_EDOC_STORAGE_COMPUTER_NAME_REQUISITE_CODE "
  	    + "SYSRES_CONST_EDOC_STORAGE_DATABASE_NAME_REQUISITE_CODE "
  	    + "SYSRES_CONST_EDOC_STORAGE_EDIT_IN_STORAGE_REQUISITE_CODE "
  	    + "SYSRES_CONST_EDOC_STORAGE_LOCAL_PATH_REQUISITE_CODE "
  	    + "SYSRES_CONST_EDOC_STORAGE_SHARED_SOURCE_NAME_REQUISITE_CODE "
  	    + "SYSRES_CONST_EDOC_TEMPLATE_REQUISITE_CODE "
  	    + "SYSRES_CONST_EDOC_TYPES_REFERENCE_CODE "
  	    + "SYSRES_CONST_EDOC_VERSION_ACTIVE_STAGE_CODE "
  	    + "SYSRES_CONST_EDOC_VERSION_DESIGN_STAGE_CODE "
  	    + "SYSRES_CONST_EDOC_VERSION_OBSOLETE_STAGE_CODE "
  	    + "SYSRES_CONST_EDOC_WRITE_ACCES_CODE "
  	    + "SYSRES_CONST_EDOCUMENT_CARD_REQUISITES_REFERENCE_CODE_SELECTED_REQUISITE "
  	    + "SYSRES_CONST_ENCODE_CERTIFICATE_TYPE_CODE "
  	    + "SYSRES_CONST_END_DATE_REQUISITE_CODE "
  	    + "SYSRES_CONST_ENUMERATION_TYPE_REQUISITE_CODE "
  	    + "SYSRES_CONST_EXECUTE_ACCESS_RIGHTS_TYPE_CODE "
  	    + "SYSRES_CONST_EXECUTIVE_FILE_STORAGE_TYPE "
  	    + "SYSRES_CONST_EXIST_CONST "
  	    + "SYSRES_CONST_EXIST_VALUE "
  	    + "SYSRES_CONST_EXPORT_LOCK_TYPE_ASK "
  	    + "SYSRES_CONST_EXPORT_LOCK_TYPE_WITH_LOCK "
  	    + "SYSRES_CONST_EXPORT_LOCK_TYPE_WITHOUT_LOCK "
  	    + "SYSRES_CONST_EXPORT_VERSION_TYPE_ASK "
  	    + "SYSRES_CONST_EXPORT_VERSION_TYPE_LAST "
  	    + "SYSRES_CONST_EXPORT_VERSION_TYPE_LAST_ACTIVE "
  	    + "SYSRES_CONST_EXTENSION_REQUISITE_CODE "
  	    + "SYSRES_CONST_FILTER_NAME_REQUISITE_CODE "
  	    + "SYSRES_CONST_FILTER_REQUISITE_CODE "
  	    + "SYSRES_CONST_FILTER_TYPE_COMMON_CODE "
  	    + "SYSRES_CONST_FILTER_TYPE_COMMON_NAME "
  	    + "SYSRES_CONST_FILTER_TYPE_USER_CODE "
  	    + "SYSRES_CONST_FILTER_TYPE_USER_NAME "
  	    + "SYSRES_CONST_FILTER_VALUE_REQUISITE_NAME "
  	    + "SYSRES_CONST_FLOAT_NUMBER_FORMAT_CHAR "
  	    + "SYSRES_CONST_FLOAT_REQUISITE_TYPE "
  	    + "SYSRES_CONST_FOLDER_AUTHOR_VALUE "
  	    + "SYSRES_CONST_FOLDER_KIND_ANY_OBJECTS "
  	    + "SYSRES_CONST_FOLDER_KIND_COMPONENTS "
  	    + "SYSRES_CONST_FOLDER_KIND_EDOCS "
  	    + "SYSRES_CONST_FOLDER_KIND_JOBS "
  	    + "SYSRES_CONST_FOLDER_KIND_TASKS "
  	    + "SYSRES_CONST_FOLDER_TYPE_COMMON "
  	    + "SYSRES_CONST_FOLDER_TYPE_COMPONENT "
  	    + "SYSRES_CONST_FOLDER_TYPE_FAVORITES "
  	    + "SYSRES_CONST_FOLDER_TYPE_INBOX "
  	    + "SYSRES_CONST_FOLDER_TYPE_OUTBOX "
  	    + "SYSRES_CONST_FOLDER_TYPE_QUICK_LAUNCH "
  	    + "SYSRES_CONST_FOLDER_TYPE_SEARCH "
  	    + "SYSRES_CONST_FOLDER_TYPE_SHORTCUTS "
  	    + "SYSRES_CONST_FOLDER_TYPE_USER "
  	    + "SYSRES_CONST_FROM_DICTIONARY_ENUM_METHOD_FLAG "
  	    + "SYSRES_CONST_FULL_SUBSTITUTE_TYPE "
  	    + "SYSRES_CONST_FULL_SUBSTITUTE_TYPE_CODE "
  	    + "SYSRES_CONST_FUNCTION_CANCEL_RESULT "
  	    + "SYSRES_CONST_FUNCTION_CATEGORY_SYSTEM "
  	    + "SYSRES_CONST_FUNCTION_CATEGORY_USER "
  	    + "SYSRES_CONST_FUNCTION_FAILURE_RESULT "
  	    + "SYSRES_CONST_FUNCTION_SAVE_RESULT "
  	    + "SYSRES_CONST_GENERATED_REQUISITE "
  	    + "SYSRES_CONST_GREEN_LIFE_CYCLE_STAGE_FONT_COLOR "
  	    + "SYSRES_CONST_GROUP_ACCOUNT_TYPE_VALUE_CODE "
  	    + "SYSRES_CONST_GROUP_CATEGORY_NORMAL_CODE "
  	    + "SYSRES_CONST_GROUP_CATEGORY_NORMAL_NAME "
  	    + "SYSRES_CONST_GROUP_CATEGORY_SERVICE_CODE "
  	    + "SYSRES_CONST_GROUP_CATEGORY_SERVICE_NAME "
  	    + "SYSRES_CONST_GROUP_COMMON_CATEGORY_FIELD_VALUE "
  	    + "SYSRES_CONST_GROUP_FULL_NAME_REQUISITE_CODE "
  	    + "SYSRES_CONST_GROUP_NAME_REQUISITE_CODE "
  	    + "SYSRES_CONST_GROUP_RIGHTS_T_REQUISITE_CODE "
  	    + "SYSRES_CONST_GROUP_SERVER_CODES_REQUISITE_CODE "
  	    + "SYSRES_CONST_GROUP_SERVER_NAME_REQUISITE_CODE "
  	    + "SYSRES_CONST_GROUP_SERVICE_CATEGORY_FIELD_VALUE "
  	    + "SYSRES_CONST_GROUP_USER_REQUISITE_CODE "
  	    + "SYSRES_CONST_GROUPS_REFERENCE_CODE "
  	    + "SYSRES_CONST_GROUPS_REQUISITE_CODE "
  	    + "SYSRES_CONST_HIDDEN_MODE_NAME "
  	    + "SYSRES_CONST_HIGH_LVL_REQUISITE_CODE "
  	    + "SYSRES_CONST_HISTORY_ACTION_CREATE_CODE "
  	    + "SYSRES_CONST_HISTORY_ACTION_DELETE_CODE "
  	    + "SYSRES_CONST_HISTORY_ACTION_EDIT_CODE "
  	    + "SYSRES_CONST_HOUR_CHAR "
  	    + "SYSRES_CONST_ID_REQUISITE_CODE "
  	    + "SYSRES_CONST_IDSPS_REQUISITE_CODE "
  	    + "SYSRES_CONST_IMAGE_MODE_COLOR "
  	    + "SYSRES_CONST_IMAGE_MODE_GREYSCALE "
  	    + "SYSRES_CONST_IMAGE_MODE_MONOCHROME "
  	    + "SYSRES_CONST_IMPORTANCE_HIGH "
  	    + "SYSRES_CONST_IMPORTANCE_LOW "
  	    + "SYSRES_CONST_IMPORTANCE_NORMAL "
  	    + "SYSRES_CONST_IN_DESIGN_VERSION_STATE_PICK_VALUE "
  	    + "SYSRES_CONST_INCOMING_WORK_RULE_TYPE_CODE "
  	    + "SYSRES_CONST_INT_REQUISITE "
  	    + "SYSRES_CONST_INT_REQUISITE_TYPE "
  	    + "SYSRES_CONST_INTEGER_NUMBER_FORMAT_CHAR "
  	    + "SYSRES_CONST_INTEGER_TYPE_CHAR "
  	    + "SYSRES_CONST_IS_GENERATED_REQUISITE_NEGATIVE_VALUE "
  	    + "SYSRES_CONST_IS_PUBLIC_ROLE_REQUISITE_CODE "
  	    + "SYSRES_CONST_IS_REMOTE_USER_NEGATIVE_VALUE "
  	    + "SYSRES_CONST_IS_REMOTE_USER_POSITIVE_VALUE "
  	    + "SYSRES_CONST_IS_STORED_REQUISITE_NEGATIVE_VALUE "
  	    + "SYSRES_CONST_IS_STORED_REQUISITE_STORED_VALUE "
  	    + "SYSRES_CONST_ITALIC_LIFE_CYCLE_STAGE_DRAW_STYLE "
  	    + "SYSRES_CONST_JOB_BLOCK_DESCRIPTION "
  	    + "SYSRES_CONST_JOB_KIND_CONTROL_JOB "
  	    + "SYSRES_CONST_JOB_KIND_JOB "
  	    + "SYSRES_CONST_JOB_KIND_NOTICE "
  	    + "SYSRES_CONST_JOB_STATE_ABORTED "
  	    + "SYSRES_CONST_JOB_STATE_COMPLETE "
  	    + "SYSRES_CONST_JOB_STATE_WORKING "
  	    + "SYSRES_CONST_KIND_REQUISITE_CODE "
  	    + "SYSRES_CONST_KIND_REQUISITE_NAME "
  	    + "SYSRES_CONST_KINDS_CREATE_SHADOW_COPIES_REQUISITE_CODE "
  	    + "SYSRES_CONST_KINDS_DEFAULT_EDOC_LIFE_STAGE_REQUISITE_CODE "
  	    + "SYSRES_CONST_KINDS_EDOC_ALL_TEPLATES_ALLOWED_REQUISITE_CODE "
  	    + "SYSRES_CONST_KINDS_EDOC_ALLOW_LIFE_CYCLE_STAGE_CHANGING_REQUISITE_CODE "
  	    + "SYSRES_CONST_KINDS_EDOC_ALLOW_MULTIPLE_ACTIVE_VERSIONS_REQUISITE_CODE "
  	    + "SYSRES_CONST_KINDS_EDOC_SHARE_ACCES_RIGHTS_BY_DEFAULT_CODE "
  	    + "SYSRES_CONST_KINDS_EDOC_TEMPLATE_REQUISITE_CODE "
  	    + "SYSRES_CONST_KINDS_EDOC_TYPE_REQUISITE_CODE "
  	    + "SYSRES_CONST_KINDS_SIGNERS_REQUISITES_CODE "
  	    + "SYSRES_CONST_KOD_INPUT_TYPE "
  	    + "SYSRES_CONST_LAST_UPDATE_DATE_REQUISITE_CODE "
  	    + "SYSRES_CONST_LIFE_CYCLE_START_STAGE_REQUISITE_CODE "
  	    + "SYSRES_CONST_LILAC_LIFE_CYCLE_STAGE_FONT_COLOR "
  	    + "SYSRES_CONST_LINK_OBJECT_KIND_COMPONENT "
  	    + "SYSRES_CONST_LINK_OBJECT_KIND_DOCUMENT "
  	    + "SYSRES_CONST_LINK_OBJECT_KIND_EDOC "
  	    + "SYSRES_CONST_LINK_OBJECT_KIND_FOLDER "
  	    + "SYSRES_CONST_LINK_OBJECT_KIND_JOB "
  	    + "SYSRES_CONST_LINK_OBJECT_KIND_REFERENCE "
  	    + "SYSRES_CONST_LINK_OBJECT_KIND_TASK "
  	    + "SYSRES_CONST_LINK_REF_TYPE_REQUISITE_CODE "
  	    + "SYSRES_CONST_LIST_REFERENCE_MODE_NAME "
  	    + "SYSRES_CONST_LOCALIZATION_DICTIONARY_MAIN_VIEW_CODE "
  	    + "SYSRES_CONST_MAIN_VIEW_CODE "
  	    + "SYSRES_CONST_MANUAL_ENUM_METHOD_FLAG "
  	    + "SYSRES_CONST_MASTER_COMP_TYPE_REQUISITE_CODE "
  	    + "SYSRES_CONST_MASTER_TABLE_REC_ID_REQUISITE_CODE "
  	    + "SYSRES_CONST_MAXIMIZED_MODE_NAME "
  	    + "SYSRES_CONST_ME_VALUE "
  	    + "SYSRES_CONST_MESSAGE_ATTENTION_CAPTION "
  	    + "SYSRES_CONST_MESSAGE_CONFIRMATION_CAPTION "
  	    + "SYSRES_CONST_MESSAGE_ERROR_CAPTION "
  	    + "SYSRES_CONST_MESSAGE_INFORMATION_CAPTION "
  	    + "SYSRES_CONST_MINIMIZED_MODE_NAME "
  	    + "SYSRES_CONST_MINUTE_CHAR "
  	    + "SYSRES_CONST_MODULE_REQUISITE_CODE "
  	    + "SYSRES_CONST_MONITORING_BLOCK_DESCRIPTION "
  	    + "SYSRES_CONST_MONTH_FORMAT_VALUE "
  	    + "SYSRES_CONST_NAME_LOCALIZE_ID_REQUISITE_CODE "
  	    + "SYSRES_CONST_NAME_REQUISITE_CODE "
  	    + "SYSRES_CONST_NAME_SINGULAR_REQUISITE_CODE "
  	    + "SYSRES_CONST_NAMEAN_INPUT_TYPE "
  	    + "SYSRES_CONST_NEGATIVE_PICK_VALUE "
  	    + "SYSRES_CONST_NEGATIVE_VALUE "
  	    + "SYSRES_CONST_NO "
  	    + "SYSRES_CONST_NO_PICK_VALUE "
  	    + "SYSRES_CONST_NO_SIGNATURE_REQUISITE_CODE "
  	    + "SYSRES_CONST_NO_VALUE "
  	    + "SYSRES_CONST_NONE_ACCESS_RIGHTS_TYPE_CODE "
  	    + "SYSRES_CONST_NONOPERATING_RECORD_FLAG_VALUE "
  	    + "SYSRES_CONST_NONOPERATING_RECORD_FLAG_VALUE_MASCULINE "
  	    + "SYSRES_CONST_NORMAL_ACCESS_RIGHTS_TYPE_CODE "
  	    + "SYSRES_CONST_NORMAL_LIFE_CYCLE_STAGE_DRAW_STYLE "
  	    + "SYSRES_CONST_NORMAL_MODE_NAME "
  	    + "SYSRES_CONST_NOT_ALLOWED_ACCESS_TYPE_CODE "
  	    + "SYSRES_CONST_NOT_ALLOWED_ACCESS_TYPE_NAME "
  	    + "SYSRES_CONST_NOTE_REQUISITE_CODE "
  	    + "SYSRES_CONST_NOTICE_BLOCK_DESCRIPTION "
  	    + "SYSRES_CONST_NUM_REQUISITE "
  	    + "SYSRES_CONST_NUM_STR_REQUISITE_CODE "
  	    + "SYSRES_CONST_NUMERATION_AUTO_NOT_STRONG "
  	    + "SYSRES_CONST_NUMERATION_AUTO_STRONG "
  	    + "SYSRES_CONST_NUMERATION_FROM_DICTONARY "
  	    + "SYSRES_CONST_NUMERATION_MANUAL "
  	    + "SYSRES_CONST_NUMERIC_TYPE_CHAR "
  	    + "SYSRES_CONST_NUMREQ_REQUISITE_CODE "
  	    + "SYSRES_CONST_OBSOLETE_VERSION_STATE_PICK_VALUE "
  	    + "SYSRES_CONST_OPERATING_RECORD_FLAG_VALUE "
  	    + "SYSRES_CONST_OPERATING_RECORD_FLAG_VALUE_CODE "
  	    + "SYSRES_CONST_OPERATING_RECORD_FLAG_VALUE_FEMININE "
  	    + "SYSRES_CONST_OPERATING_RECORD_FLAG_VALUE_MASCULINE "
  	    + "SYSRES_CONST_OPTIONAL_FORM_COMP_REQCODE_PREFIX "
  	    + "SYSRES_CONST_ORANGE_LIFE_CYCLE_STAGE_FONT_COLOR "
  	    + "SYSRES_CONST_ORIGINALREF_REQUISITE_CODE "
  	    + "SYSRES_CONST_OURFIRM_REF_CODE "
  	    + "SYSRES_CONST_OURFIRM_REQUISITE_CODE "
  	    + "SYSRES_CONST_OURFIRM_VAR "
  	    + "SYSRES_CONST_OUTGOING_WORK_RULE_TYPE_CODE "
  	    + "SYSRES_CONST_PICK_NEGATIVE_RESULT "
  	    + "SYSRES_CONST_PICK_POSITIVE_RESULT "
  	    + "SYSRES_CONST_PICK_REQUISITE "
  	    + "SYSRES_CONST_PICK_REQUISITE_TYPE "
  	    + "SYSRES_CONST_PICK_TYPE_CHAR "
  	    + "SYSRES_CONST_PLAN_STATUS_REQUISITE_CODE "
  	    + "SYSRES_CONST_PLATFORM_VERSION_COMMENT "
  	    + "SYSRES_CONST_PLUGINS_SETTINGS_DESCRIPTION_REQUISITE_CODE "
  	    + "SYSRES_CONST_POSITIVE_PICK_VALUE "
  	    + "SYSRES_CONST_POWER_TO_CREATE_ACTION_CODE "
  	    + "SYSRES_CONST_POWER_TO_SIGN_ACTION_CODE "
  	    + "SYSRES_CONST_PRIORITY_REQUISITE_CODE "
  	    + "SYSRES_CONST_QUALIFIED_TASK_TYPE "
  	    + "SYSRES_CONST_QUALIFIED_TASK_TYPE_CODE "
  	    + "SYSRES_CONST_RECSTAT_REQUISITE_CODE "
  	    + "SYSRES_CONST_RED_LIFE_CYCLE_STAGE_FONT_COLOR "
  	    + "SYSRES_CONST_REF_ID_T_REF_TYPE_REQUISITE_CODE "
  	    + "SYSRES_CONST_REF_REQUISITE "
  	    + "SYSRES_CONST_REF_REQUISITE_TYPE "
  	    + "SYSRES_CONST_REF_REQUISITES_REFERENCE_CODE_SELECTED_REQUISITE "
  	    + "SYSRES_CONST_REFERENCE_RECORD_HISTORY_CREATE_ACTION_CODE "
  	    + "SYSRES_CONST_REFERENCE_RECORD_HISTORY_DELETE_ACTION_CODE "
  	    + "SYSRES_CONST_REFERENCE_RECORD_HISTORY_MODIFY_ACTION_CODE "
  	    + "SYSRES_CONST_REFERENCE_TYPE_CHAR "
  	    + "SYSRES_CONST_REFERENCE_TYPE_REQUISITE_NAME "
  	    + "SYSRES_CONST_REFERENCES_ADD_PARAMS_REQUISITE_CODE "
  	    + "SYSRES_CONST_REFERENCES_DISPLAY_REQUISITE_REQUISITE_CODE "
  	    + "SYSRES_CONST_REMOTE_SERVER_STATUS_WORKING "
  	    + "SYSRES_CONST_REMOTE_SERVER_TYPE_MAIN "
  	    + "SYSRES_CONST_REMOTE_SERVER_TYPE_SECONDARY "
  	    + "SYSRES_CONST_REMOTE_USER_FLAG_VALUE_CODE "
  	    + "SYSRES_CONST_REPORT_APP_EDITOR_INTERNAL "
  	    + "SYSRES_CONST_REPORT_BASE_REPORT_ID_REQUISITE_CODE "
  	    + "SYSRES_CONST_REPORT_BASE_REPORT_REQUISITE_CODE "
  	    + "SYSRES_CONST_REPORT_SCRIPT_REQUISITE_CODE "
  	    + "SYSRES_CONST_REPORT_TEMPLATE_REQUISITE_CODE "
  	    + "SYSRES_CONST_REPORT_VIEWER_CODE_REQUISITE_CODE "
  	    + "SYSRES_CONST_REQ_ALLOW_COMPONENT_DEFAULT_VALUE "
  	    + "SYSRES_CONST_REQ_ALLOW_RECORD_DEFAULT_VALUE "
  	    + "SYSRES_CONST_REQ_ALLOW_SERVER_COMPONENT_DEFAULT_VALUE "
  	    + "SYSRES_CONST_REQ_MODE_AVAILABLE_CODE "
  	    + "SYSRES_CONST_REQ_MODE_EDIT_CODE "
  	    + "SYSRES_CONST_REQ_MODE_HIDDEN_CODE "
  	    + "SYSRES_CONST_REQ_MODE_NOT_AVAILABLE_CODE "
  	    + "SYSRES_CONST_REQ_MODE_VIEW_CODE "
  	    + "SYSRES_CONST_REQ_NUMBER_REQUISITE_CODE "
  	    + "SYSRES_CONST_REQ_SECTION_VALUE "
  	    + "SYSRES_CONST_REQ_TYPE_VALUE "
  	    + "SYSRES_CONST_REQUISITE_FORMAT_BY_UNIT "
  	    + "SYSRES_CONST_REQUISITE_FORMAT_DATE_FULL "
  	    + "SYSRES_CONST_REQUISITE_FORMAT_DATE_TIME "
  	    + "SYSRES_CONST_REQUISITE_FORMAT_LEFT "
  	    + "SYSRES_CONST_REQUISITE_FORMAT_RIGHT "
  	    + "SYSRES_CONST_REQUISITE_FORMAT_WITHOUT_UNIT "
  	    + "SYSRES_CONST_REQUISITE_NUMBER_REQUISITE_CODE "
  	    + "SYSRES_CONST_REQUISITE_SECTION_ACTIONS "
  	    + "SYSRES_CONST_REQUISITE_SECTION_BUTTON "
  	    + "SYSRES_CONST_REQUISITE_SECTION_BUTTONS "
  	    + "SYSRES_CONST_REQUISITE_SECTION_CARD "
  	    + "SYSRES_CONST_REQUISITE_SECTION_TABLE "
  	    + "SYSRES_CONST_REQUISITE_SECTION_TABLE10 "
  	    + "SYSRES_CONST_REQUISITE_SECTION_TABLE11 "
  	    + "SYSRES_CONST_REQUISITE_SECTION_TABLE12 "
  	    + "SYSRES_CONST_REQUISITE_SECTION_TABLE13 "
  	    + "SYSRES_CONST_REQUISITE_SECTION_TABLE14 "
  	    + "SYSRES_CONST_REQUISITE_SECTION_TABLE15 "
  	    + "SYSRES_CONST_REQUISITE_SECTION_TABLE16 "
  	    + "SYSRES_CONST_REQUISITE_SECTION_TABLE17 "
  	    + "SYSRES_CONST_REQUISITE_SECTION_TABLE18 "
  	    + "SYSRES_CONST_REQUISITE_SECTION_TABLE19 "
  	    + "SYSRES_CONST_REQUISITE_SECTION_TABLE2 "
  	    + "SYSRES_CONST_REQUISITE_SECTION_TABLE20 "
  	    + "SYSRES_CONST_REQUISITE_SECTION_TABLE21 "
  	    + "SYSRES_CONST_REQUISITE_SECTION_TABLE22 "
  	    + "SYSRES_CONST_REQUISITE_SECTION_TABLE23 "
  	    + "SYSRES_CONST_REQUISITE_SECTION_TABLE24 "
  	    + "SYSRES_CONST_REQUISITE_SECTION_TABLE3 "
  	    + "SYSRES_CONST_REQUISITE_SECTION_TABLE4 "
  	    + "SYSRES_CONST_REQUISITE_SECTION_TABLE5 "
  	    + "SYSRES_CONST_REQUISITE_SECTION_TABLE6 "
  	    + "SYSRES_CONST_REQUISITE_SECTION_TABLE7 "
  	    + "SYSRES_CONST_REQUISITE_SECTION_TABLE8 "
  	    + "SYSRES_CONST_REQUISITE_SECTION_TABLE9 "
  	    + "SYSRES_CONST_REQUISITES_PSEUDOREFERENCE_REQUISITE_NUMBER_REQUISITE_CODE "
  	    + "SYSRES_CONST_RIGHT_ALIGNMENT_CODE "
  	    + "SYSRES_CONST_ROLES_REFERENCE_CODE "
  	    + "SYSRES_CONST_ROUTE_STEP_AFTER_RUS "
  	    + "SYSRES_CONST_ROUTE_STEP_AND_CONDITION_RUS "
  	    + "SYSRES_CONST_ROUTE_STEP_OR_CONDITION_RUS "
  	    + "SYSRES_CONST_ROUTE_TYPE_COMPLEX "
  	    + "SYSRES_CONST_ROUTE_TYPE_PARALLEL "
  	    + "SYSRES_CONST_ROUTE_TYPE_SERIAL "
  	    + "SYSRES_CONST_SBDATASETDESC_NEGATIVE_VALUE "
  	    + "SYSRES_CONST_SBDATASETDESC_POSITIVE_VALUE "
  	    + "SYSRES_CONST_SBVIEWSDESC_POSITIVE_VALUE "
  	    + "SYSRES_CONST_SCRIPT_BLOCK_DESCRIPTION "
  	    + "SYSRES_CONST_SEARCH_BY_TEXT_REQUISITE_CODE "
  	    + "SYSRES_CONST_SEARCHES_COMPONENT_CONTENT "
  	    + "SYSRES_CONST_SEARCHES_CRITERIA_ACTION_NAME "
  	    + "SYSRES_CONST_SEARCHES_EDOC_CONTENT "
  	    + "SYSRES_CONST_SEARCHES_FOLDER_CONTENT "
  	    + "SYSRES_CONST_SEARCHES_JOB_CONTENT "
  	    + "SYSRES_CONST_SEARCHES_REFERENCE_CODE "
  	    + "SYSRES_CONST_SEARCHES_TASK_CONTENT "
  	    + "SYSRES_CONST_SECOND_CHAR "
  	    + "SYSRES_CONST_SECTION_REQUISITE_ACTIONS_VALUE "
  	    + "SYSRES_CONST_SECTION_REQUISITE_CARD_VALUE "
  	    + "SYSRES_CONST_SECTION_REQUISITE_CODE "
  	    + "SYSRES_CONST_SECTION_REQUISITE_DETAIL_1_VALUE "
  	    + "SYSRES_CONST_SECTION_REQUISITE_DETAIL_2_VALUE "
  	    + "SYSRES_CONST_SECTION_REQUISITE_DETAIL_3_VALUE "
  	    + "SYSRES_CONST_SECTION_REQUISITE_DETAIL_4_VALUE "
  	    + "SYSRES_CONST_SECTION_REQUISITE_DETAIL_5_VALUE "
  	    + "SYSRES_CONST_SECTION_REQUISITE_DETAIL_6_VALUE "
  	    + "SYSRES_CONST_SELECT_REFERENCE_MODE_NAME "
  	    + "SYSRES_CONST_SELECT_TYPE_SELECTABLE "
  	    + "SYSRES_CONST_SELECT_TYPE_SELECTABLE_ONLY_CHILD "
  	    + "SYSRES_CONST_SELECT_TYPE_SELECTABLE_WITH_CHILD "
  	    + "SYSRES_CONST_SELECT_TYPE_UNSLECTABLE "
  	    + "SYSRES_CONST_SERVER_TYPE_MAIN "
  	    + "SYSRES_CONST_SERVICE_USER_CATEGORY_FIELD_VALUE "
  	    + "SYSRES_CONST_SETTINGS_USER_REQUISITE_CODE "
  	    + "SYSRES_CONST_SIGNATURE_AND_ENCODE_CERTIFICATE_TYPE_CODE "
  	    + "SYSRES_CONST_SIGNATURE_CERTIFICATE_TYPE_CODE "
  	    + "SYSRES_CONST_SINGULAR_TITLE_REQUISITE_CODE "
  	    + "SYSRES_CONST_SQL_SERVER_AUTHENTIFICATION_FLAG_VALUE_CODE "
  	    + "SYSRES_CONST_SQL_SERVER_ENCODE_AUTHENTIFICATION_FLAG_VALUE_CODE "
  	    + "SYSRES_CONST_STANDART_ROUTE_REFERENCE_CODE "
  	    + "SYSRES_CONST_STANDART_ROUTE_REFERENCE_COMMENT_REQUISITE_CODE "
  	    + "SYSRES_CONST_STANDART_ROUTES_GROUPS_REFERENCE_CODE "
  	    + "SYSRES_CONST_STATE_REQ_NAME "
  	    + "SYSRES_CONST_STATE_REQUISITE_ACTIVE_VALUE "
  	    + "SYSRES_CONST_STATE_REQUISITE_CLOSED_VALUE "
  	    + "SYSRES_CONST_STATE_REQUISITE_CODE "
  	    + "SYSRES_CONST_STATIC_ROLE_TYPE_CODE "
  	    + "SYSRES_CONST_STATUS_PLAN_DEFAULT_VALUE "
  	    + "SYSRES_CONST_STATUS_VALUE_AUTOCLEANING "
  	    + "SYSRES_CONST_STATUS_VALUE_BLUE_SQUARE "
  	    + "SYSRES_CONST_STATUS_VALUE_COMPLETE "
  	    + "SYSRES_CONST_STATUS_VALUE_GREEN_SQUARE "
  	    + "SYSRES_CONST_STATUS_VALUE_ORANGE_SQUARE "
  	    + "SYSRES_CONST_STATUS_VALUE_PURPLE_SQUARE "
  	    + "SYSRES_CONST_STATUS_VALUE_RED_SQUARE "
  	    + "SYSRES_CONST_STATUS_VALUE_SUSPEND "
  	    + "SYSRES_CONST_STATUS_VALUE_YELLOW_SQUARE "
  	    + "SYSRES_CONST_STDROUTE_SHOW_TO_USERS_REQUISITE_CODE "
  	    + "SYSRES_CONST_STORAGE_TYPE_FILE "
  	    + "SYSRES_CONST_STORAGE_TYPE_SQL_SERVER "
  	    + "SYSRES_CONST_STR_REQUISITE "
  	    + "SYSRES_CONST_STRIKEOUT_LIFE_CYCLE_STAGE_DRAW_STYLE "
  	    + "SYSRES_CONST_STRING_FORMAT_LEFT_ALIGN_CHAR "
  	    + "SYSRES_CONST_STRING_FORMAT_RIGHT_ALIGN_CHAR "
  	    + "SYSRES_CONST_STRING_REQUISITE_CODE "
  	    + "SYSRES_CONST_STRING_REQUISITE_TYPE "
  	    + "SYSRES_CONST_STRING_TYPE_CHAR "
  	    + "SYSRES_CONST_SUBSTITUTES_PSEUDOREFERENCE_CODE "
  	    + "SYSRES_CONST_SUBTASK_BLOCK_DESCRIPTION "
  	    + "SYSRES_CONST_SYSTEM_SETTING_CURRENT_USER_PARAM_VALUE "
  	    + "SYSRES_CONST_SYSTEM_SETTING_EMPTY_VALUE_PARAM_VALUE "
  	    + "SYSRES_CONST_SYSTEM_VERSION_COMMENT "
  	    + "SYSRES_CONST_TASK_ACCESS_TYPE_ALL "
  	    + "SYSRES_CONST_TASK_ACCESS_TYPE_ALL_MEMBERS "
  	    + "SYSRES_CONST_TASK_ACCESS_TYPE_MANUAL "
  	    + "SYSRES_CONST_TASK_ENCODE_TYPE_CERTIFICATION "
  	    + "SYSRES_CONST_TASK_ENCODE_TYPE_CERTIFICATION_AND_PASSWORD "
  	    + "SYSRES_CONST_TASK_ENCODE_TYPE_NONE "
  	    + "SYSRES_CONST_TASK_ENCODE_TYPE_PASSWORD "
  	    + "SYSRES_CONST_TASK_ROUTE_ALL_CONDITION "
  	    + "SYSRES_CONST_TASK_ROUTE_AND_CONDITION "
  	    + "SYSRES_CONST_TASK_ROUTE_OR_CONDITION "
  	    + "SYSRES_CONST_TASK_STATE_ABORTED "
  	    + "SYSRES_CONST_TASK_STATE_COMPLETE "
  	    + "SYSRES_CONST_TASK_STATE_CONTINUED "
  	    + "SYSRES_CONST_TASK_STATE_CONTROL "
  	    + "SYSRES_CONST_TASK_STATE_INIT "
  	    + "SYSRES_CONST_TASK_STATE_WORKING "
  	    + "SYSRES_CONST_TASK_TITLE "
  	    + "SYSRES_CONST_TASK_TYPES_GROUPS_REFERENCE_CODE "
  	    + "SYSRES_CONST_TASK_TYPES_REFERENCE_CODE "
  	    + "SYSRES_CONST_TEMPLATES_REFERENCE_CODE "
  	    + "SYSRES_CONST_TEST_DATE_REQUISITE_NAME "
  	    + "SYSRES_CONST_TEST_DEV_DATABASE_NAME "
  	    + "SYSRES_CONST_TEST_DEV_SYSTEM_CODE "
  	    + "SYSRES_CONST_TEST_EDMS_DATABASE_NAME "
  	    + "SYSRES_CONST_TEST_EDMS_MAIN_CODE "
  	    + "SYSRES_CONST_TEST_EDMS_MAIN_DB_NAME "
  	    + "SYSRES_CONST_TEST_EDMS_SECOND_CODE "
  	    + "SYSRES_CONST_TEST_EDMS_SECOND_DB_NAME "
  	    + "SYSRES_CONST_TEST_EDMS_SYSTEM_CODE "
  	    + "SYSRES_CONST_TEST_NUMERIC_REQUISITE_NAME "
  	    + "SYSRES_CONST_TEXT_REQUISITE "
  	    + "SYSRES_CONST_TEXT_REQUISITE_CODE "
  	    + "SYSRES_CONST_TEXT_REQUISITE_TYPE "
  	    + "SYSRES_CONST_TEXT_TYPE_CHAR "
  	    + "SYSRES_CONST_TYPE_CODE_REQUISITE_CODE "
  	    + "SYSRES_CONST_TYPE_REQUISITE_CODE "
  	    + "SYSRES_CONST_UNDEFINED_LIFE_CYCLE_STAGE_FONT_COLOR "
  	    + "SYSRES_CONST_UNITS_SECTION_ID_REQUISITE_CODE "
  	    + "SYSRES_CONST_UNITS_SECTION_REQUISITE_CODE "
  	    + "SYSRES_CONST_UNOPERATING_RECORD_FLAG_VALUE_CODE "
  	    + "SYSRES_CONST_UNSTORED_DATA_REQUISITE_CODE "
  	    + "SYSRES_CONST_UNSTORED_DATA_REQUISITE_NAME "
  	    + "SYSRES_CONST_USE_ACCESS_TYPE_CODE "
  	    + "SYSRES_CONST_USE_ACCESS_TYPE_NAME "
  	    + "SYSRES_CONST_USER_ACCOUNT_TYPE_VALUE_CODE "
  	    + "SYSRES_CONST_USER_ADDITIONAL_INFORMATION_REQUISITE_CODE "
  	    + "SYSRES_CONST_USER_AND_GROUP_ID_FROM_PSEUDOREFERENCE_REQUISITE_CODE "
  	    + "SYSRES_CONST_USER_CATEGORY_NORMAL "
  	    + "SYSRES_CONST_USER_CERTIFICATE_REQUISITE_CODE "
  	    + "SYSRES_CONST_USER_CERTIFICATE_STATE_REQUISITE_CODE "
  	    + "SYSRES_CONST_USER_CERTIFICATE_SUBJECT_NAME_REQUISITE_CODE "
  	    + "SYSRES_CONST_USER_CERTIFICATE_THUMBPRINT_REQUISITE_CODE "
  	    + "SYSRES_CONST_USER_COMMON_CATEGORY "
  	    + "SYSRES_CONST_USER_COMMON_CATEGORY_CODE "
  	    + "SYSRES_CONST_USER_FULL_NAME_REQUISITE_CODE "
  	    + "SYSRES_CONST_USER_GROUP_TYPE_REQUISITE_CODE "
  	    + "SYSRES_CONST_USER_LOGIN_REQUISITE_CODE "
  	    + "SYSRES_CONST_USER_REMOTE_CONTROLLER_REQUISITE_CODE "
  	    + "SYSRES_CONST_USER_REMOTE_SYSTEM_REQUISITE_CODE "
  	    + "SYSRES_CONST_USER_RIGHTS_T_REQUISITE_CODE "
  	    + "SYSRES_CONST_USER_SERVER_NAME_REQUISITE_CODE "
  	    + "SYSRES_CONST_USER_SERVICE_CATEGORY "
  	    + "SYSRES_CONST_USER_SERVICE_CATEGORY_CODE "
  	    + "SYSRES_CONST_USER_STATUS_ADMINISTRATOR_CODE "
  	    + "SYSRES_CONST_USER_STATUS_ADMINISTRATOR_NAME "
  	    + "SYSRES_CONST_USER_STATUS_DEVELOPER_CODE "
  	    + "SYSRES_CONST_USER_STATUS_DEVELOPER_NAME "
  	    + "SYSRES_CONST_USER_STATUS_DISABLED_CODE "
  	    + "SYSRES_CONST_USER_STATUS_DISABLED_NAME "
  	    + "SYSRES_CONST_USER_STATUS_SYSTEM_DEVELOPER_CODE "
  	    + "SYSRES_CONST_USER_STATUS_USER_CODE "
  	    + "SYSRES_CONST_USER_STATUS_USER_NAME "
  	    + "SYSRES_CONST_USER_STATUS_USER_NAME_DEPRECATED "
  	    + "SYSRES_CONST_USER_TYPE_FIELD_VALUE_USER "
  	    + "SYSRES_CONST_USER_TYPE_REQUISITE_CODE "
  	    + "SYSRES_CONST_USERS_CONTROLLER_REQUISITE_CODE "
  	    + "SYSRES_CONST_USERS_IS_MAIN_SERVER_REQUISITE_CODE "
  	    + "SYSRES_CONST_USERS_REFERENCE_CODE "
  	    + "SYSRES_CONST_USERS_REGISTRATION_CERTIFICATES_ACTION_NAME "
  	    + "SYSRES_CONST_USERS_REQUISITE_CODE "
  	    + "SYSRES_CONST_USERS_SYSTEM_REQUISITE_CODE "
  	    + "SYSRES_CONST_USERS_USER_ACCESS_RIGHTS_TYPR_REQUISITE_CODE "
  	    + "SYSRES_CONST_USERS_USER_AUTHENTICATION_REQUISITE_CODE "
  	    + "SYSRES_CONST_USERS_USER_COMPONENT_REQUISITE_CODE "
  	    + "SYSRES_CONST_USERS_USER_GROUP_REQUISITE_CODE "
  	    + "SYSRES_CONST_USERS_VIEW_CERTIFICATES_ACTION_NAME "
  	    + "SYSRES_CONST_VIEW_DEFAULT_CODE "
  	    + "SYSRES_CONST_VIEW_DEFAULT_NAME "
  	    + "SYSRES_CONST_VIEWER_REQUISITE_CODE "
  	    + "SYSRES_CONST_WAITING_BLOCK_DESCRIPTION "
  	    + "SYSRES_CONST_WIZARD_FORM_LABEL_TEST_STRING  "
  	    + "SYSRES_CONST_WIZARD_QUERY_PARAM_HEIGHT_ETALON_STRING "
  	    + "SYSRES_CONST_WIZARD_REFERENCE_COMMENT_REQUISITE_CODE "
  	    + "SYSRES_CONST_WORK_RULES_DESCRIPTION_REQUISITE_CODE "
  	    + "SYSRES_CONST_WORK_TIME_CALENDAR_REFERENCE_CODE "
  	    + "SYSRES_CONST_WORK_WORKFLOW_HARD_ROUTE_TYPE_VALUE "
  	    + "SYSRES_CONST_WORK_WORKFLOW_HARD_ROUTE_TYPE_VALUE_CODE "
  	    + "SYSRES_CONST_WORK_WORKFLOW_HARD_ROUTE_TYPE_VALUE_CODE_RUS "
  	    + "SYSRES_CONST_WORK_WORKFLOW_SOFT_ROUTE_TYPE_VALUE_CODE_RUS "
  	    + "SYSRES_CONST_WORKFLOW_ROUTE_TYPR_HARD "
  	    + "SYSRES_CONST_WORKFLOW_ROUTE_TYPR_SOFT "
  	    + "SYSRES_CONST_XML_ENCODING "
  	    + "SYSRES_CONST_XREC_STAT_REQUISITE_CODE "
  	    + "SYSRES_CONST_XRECID_FIELD_NAME "
  	    + "SYSRES_CONST_YES "
  	    + "SYSRES_CONST_YES_NO_2_REQUISITE_CODE "
  	    + "SYSRES_CONST_YES_NO_REQUISITE_CODE "
  	    + "SYSRES_CONST_YES_NO_T_REF_TYPE_REQUISITE_CODE "
  	    + "SYSRES_CONST_YES_PICK_VALUE "
  	    + "SYSRES_CONST_YES_VALUE ";

  	  // Base constant
  	  const base_constants = "CR FALSE nil NO_VALUE NULL TAB TRUE YES_VALUE ";

  	  // Base group name
  	  const base_group_name_constants =
  	    "ADMINISTRATORS_GROUP_NAME CUSTOMIZERS_GROUP_NAME DEVELOPERS_GROUP_NAME SERVICE_USERS_GROUP_NAME ";

  	  // Decision block properties
  	  const decision_block_properties_constants =
  	    "DECISION_BLOCK_FIRST_OPERAND_PROPERTY DECISION_BLOCK_NAME_PROPERTY DECISION_BLOCK_OPERATION_PROPERTY "
  	    + "DECISION_BLOCK_RESULT_TYPE_PROPERTY DECISION_BLOCK_SECOND_OPERAND_PROPERTY ";

  	  // File extension
  	  const file_extension_constants =
  	    "ANY_FILE_EXTENTION COMPRESSED_DOCUMENT_EXTENSION EXTENDED_DOCUMENT_EXTENSION "
  	    + "SHORT_COMPRESSED_DOCUMENT_EXTENSION SHORT_EXTENDED_DOCUMENT_EXTENSION ";

  	  // Job block properties
  	  const job_block_properties_constants =
  	    "JOB_BLOCK_ABORT_DEADLINE_PROPERTY "
  	    + "JOB_BLOCK_AFTER_FINISH_EVENT "
  	    + "JOB_BLOCK_AFTER_QUERY_PARAMETERS_EVENT "
  	    + "JOB_BLOCK_ATTACHMENT_PROPERTY "
  	    + "JOB_BLOCK_ATTACHMENTS_RIGHTS_GROUP_PROPERTY "
  	    + "JOB_BLOCK_ATTACHMENTS_RIGHTS_TYPE_PROPERTY "
  	    + "JOB_BLOCK_BEFORE_QUERY_PARAMETERS_EVENT "
  	    + "JOB_BLOCK_BEFORE_START_EVENT "
  	    + "JOB_BLOCK_CREATED_JOBS_PROPERTY "
  	    + "JOB_BLOCK_DEADLINE_PROPERTY "
  	    + "JOB_BLOCK_EXECUTION_RESULTS_PROPERTY "
  	    + "JOB_BLOCK_IS_PARALLEL_PROPERTY "
  	    + "JOB_BLOCK_IS_RELATIVE_ABORT_DEADLINE_PROPERTY "
  	    + "JOB_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY "
  	    + "JOB_BLOCK_JOB_TEXT_PROPERTY "
  	    + "JOB_BLOCK_NAME_PROPERTY "
  	    + "JOB_BLOCK_NEED_SIGN_ON_PERFORM_PROPERTY "
  	    + "JOB_BLOCK_PERFORMER_PROPERTY "
  	    + "JOB_BLOCK_RELATIVE_ABORT_DEADLINE_TYPE_PROPERTY "
  	    + "JOB_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY "
  	    + "JOB_BLOCK_SUBJECT_PROPERTY ";

  	  // Language code
  	  const language_code_constants = "ENGLISH_LANGUAGE_CODE RUSSIAN_LANGUAGE_CODE ";

  	  // Launching external applications
  	  const launching_external_applications_constants =
  	    "smHidden smMaximized smMinimized smNormal wmNo wmYes ";

  	  // Link kind
  	  const link_kind_constants =
  	    "COMPONENT_TOKEN_LINK_KIND "
  	    + "DOCUMENT_LINK_KIND "
  	    + "EDOCUMENT_LINK_KIND "
  	    + "FOLDER_LINK_KIND "
  	    + "JOB_LINK_KIND "
  	    + "REFERENCE_LINK_KIND "
  	    + "TASK_LINK_KIND ";

  	  // Lock type
  	  const lock_type_constants =
  	    "COMPONENT_TOKEN_LOCK_TYPE EDOCUMENT_VERSION_LOCK_TYPE ";

  	  // Monitor block properties
  	  const monitor_block_properties_constants =
  	    "MONITOR_BLOCK_AFTER_FINISH_EVENT "
  	    + "MONITOR_BLOCK_BEFORE_START_EVENT "
  	    + "MONITOR_BLOCK_DEADLINE_PROPERTY "
  	    + "MONITOR_BLOCK_INTERVAL_PROPERTY "
  	    + "MONITOR_BLOCK_INTERVAL_TYPE_PROPERTY "
  	    + "MONITOR_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY "
  	    + "MONITOR_BLOCK_NAME_PROPERTY "
  	    + "MONITOR_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY "
  	    + "MONITOR_BLOCK_SEARCH_SCRIPT_PROPERTY ";

  	  // Notice block properties
  	  const notice_block_properties_constants =
  	    "NOTICE_BLOCK_AFTER_FINISH_EVENT "
  	    + "NOTICE_BLOCK_ATTACHMENT_PROPERTY "
  	    + "NOTICE_BLOCK_ATTACHMENTS_RIGHTS_GROUP_PROPERTY "
  	    + "NOTICE_BLOCK_ATTACHMENTS_RIGHTS_TYPE_PROPERTY "
  	    + "NOTICE_BLOCK_BEFORE_START_EVENT "
  	    + "NOTICE_BLOCK_CREATED_NOTICES_PROPERTY "
  	    + "NOTICE_BLOCK_DEADLINE_PROPERTY "
  	    + "NOTICE_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY "
  	    + "NOTICE_BLOCK_NAME_PROPERTY "
  	    + "NOTICE_BLOCK_NOTICE_TEXT_PROPERTY "
  	    + "NOTICE_BLOCK_PERFORMER_PROPERTY "
  	    + "NOTICE_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY "
  	    + "NOTICE_BLOCK_SUBJECT_PROPERTY ";

  	  // Object events
  	  const object_events_constants =
  	    "dseAfterCancel "
  	    + "dseAfterClose "
  	    + "dseAfterDelete "
  	    + "dseAfterDeleteOutOfTransaction "
  	    + "dseAfterInsert "
  	    + "dseAfterOpen "
  	    + "dseAfterScroll "
  	    + "dseAfterUpdate "
  	    + "dseAfterUpdateOutOfTransaction "
  	    + "dseBeforeCancel "
  	    + "dseBeforeClose "
  	    + "dseBeforeDelete "
  	    + "dseBeforeDetailUpdate "
  	    + "dseBeforeInsert "
  	    + "dseBeforeOpen "
  	    + "dseBeforeUpdate "
  	    + "dseOnAnyRequisiteChange "
  	    + "dseOnCloseRecord "
  	    + "dseOnDeleteError "
  	    + "dseOnOpenRecord "
  	    + "dseOnPrepareUpdate "
  	    + "dseOnUpdateError "
  	    + "dseOnUpdateRatifiedRecord "
  	    + "dseOnValidDelete "
  	    + "dseOnValidUpdate "
  	    + "reOnChange "
  	    + "reOnChangeValues "
  	    + "SELECTION_BEGIN_ROUTE_EVENT "
  	    + "SELECTION_END_ROUTE_EVENT ";

  	  // Object params
  	  const object_params_constants =
  	    "CURRENT_PERIOD_IS_REQUIRED "
  	    + "PREVIOUS_CARD_TYPE_NAME "
  	    + "SHOW_RECORD_PROPERTIES_FORM ";

  	  // Other
  	  const other_constants =
  	    "ACCESS_RIGHTS_SETTING_DIALOG_CODE "
  	    + "ADMINISTRATOR_USER_CODE "
  	    + "ANALYTIC_REPORT_TYPE "
  	    + "asrtHideLocal "
  	    + "asrtHideRemote "
  	    + "CALCULATED_ROLE_TYPE_CODE "
  	    + "COMPONENTS_REFERENCE_DEVELOPER_VIEW_CODE "
  	    + "DCTS_TEST_PROTOCOLS_FOLDER_PATH "
  	    + "E_EDOC_VERSION_ALREADY_APPROVINGLY_SIGNED "
  	    + "E_EDOC_VERSION_ALREADY_APPROVINGLY_SIGNED_BY_USER "
  	    + "E_EDOC_VERSION_ALREDY_SIGNED "
  	    + "E_EDOC_VERSION_ALREDY_SIGNED_BY_USER "
  	    + "EDOC_TYPES_CODE_REQUISITE_FIELD_NAME "
  	    + "EDOCUMENTS_ALIAS_NAME "
  	    + "FILES_FOLDER_PATH "
  	    + "FILTER_OPERANDS_DELIMITER "
  	    + "FILTER_OPERATIONS_DELIMITER "
  	    + "FORMCARD_NAME "
  	    + "FORMLIST_NAME "
  	    + "GET_EXTENDED_DOCUMENT_EXTENSION_CREATION_MODE "
  	    + "GET_EXTENDED_DOCUMENT_EXTENSION_IMPORT_MODE "
  	    + "INTEGRATED_REPORT_TYPE "
  	    + "IS_BUILDER_APPLICATION_ROLE "
  	    + "IS_BUILDER_APPLICATION_ROLE2 "
  	    + "IS_BUILDER_USERS "
  	    + "ISBSYSDEV "
  	    + "LOG_FOLDER_PATH "
  	    + "mbCancel "
  	    + "mbNo "
  	    + "mbNoToAll "
  	    + "mbOK "
  	    + "mbYes "
  	    + "mbYesToAll "
  	    + "MEMORY_DATASET_DESRIPTIONS_FILENAME "
  	    + "mrNo "
  	    + "mrNoToAll "
  	    + "mrYes "
  	    + "mrYesToAll "
  	    + "MULTIPLE_SELECT_DIALOG_CODE "
  	    + "NONOPERATING_RECORD_FLAG_FEMININE "
  	    + "NONOPERATING_RECORD_FLAG_MASCULINE "
  	    + "OPERATING_RECORD_FLAG_FEMININE "
  	    + "OPERATING_RECORD_FLAG_MASCULINE "
  	    + "PROFILING_SETTINGS_COMMON_SETTINGS_CODE_VALUE "
  	    + "PROGRAM_INITIATED_LOOKUP_ACTION "
  	    + "ratDelete "
  	    + "ratEdit "
  	    + "ratInsert "
  	    + "REPORT_TYPE "
  	    + "REQUIRED_PICK_VALUES_VARIABLE "
  	    + "rmCard "
  	    + "rmList "
  	    + "SBRTE_PROGID_DEV "
  	    + "SBRTE_PROGID_RELEASE "
  	    + "STATIC_ROLE_TYPE_CODE "
  	    + "SUPPRESS_EMPTY_TEMPLATE_CREATION "
  	    + "SYSTEM_USER_CODE "
  	    + "UPDATE_DIALOG_DATASET "
  	    + "USED_IN_OBJECT_HINT_PARAM "
  	    + "USER_INITIATED_LOOKUP_ACTION "
  	    + "USER_NAME_FORMAT "
  	    + "USER_SELECTION_RESTRICTIONS "
  	    + "WORKFLOW_TEST_PROTOCOLS_FOLDER_PATH "
  	    + "ELS_SUBTYPE_CONTROL_NAME "
  	    + "ELS_FOLDER_KIND_CONTROL_NAME "
  	    + "REPEAT_PROCESS_CURRENT_OBJECT_EXCEPTION_NAME ";

  	  // Privileges
  	  const privileges_constants =
  	    "PRIVILEGE_COMPONENT_FULL_ACCESS "
  	    + "PRIVILEGE_DEVELOPMENT_EXPORT "
  	    + "PRIVILEGE_DEVELOPMENT_IMPORT "
  	    + "PRIVILEGE_DOCUMENT_DELETE "
  	    + "PRIVILEGE_ESD "
  	    + "PRIVILEGE_FOLDER_DELETE "
  	    + "PRIVILEGE_MANAGE_ACCESS_RIGHTS "
  	    + "PRIVILEGE_MANAGE_REPLICATION "
  	    + "PRIVILEGE_MANAGE_SESSION_SERVER "
  	    + "PRIVILEGE_OBJECT_FULL_ACCESS "
  	    + "PRIVILEGE_OBJECT_VIEW "
  	    + "PRIVILEGE_RESERVE_LICENSE "
  	    + "PRIVILEGE_SYSTEM_CUSTOMIZE "
  	    + "PRIVILEGE_SYSTEM_DEVELOP "
  	    + "PRIVILEGE_SYSTEM_INSTALL "
  	    + "PRIVILEGE_TASK_DELETE "
  	    + "PRIVILEGE_USER_PLUGIN_SETTINGS_CUSTOMIZE "
  	    + "PRIVILEGES_PSEUDOREFERENCE_CODE ";

  	  // Pseudoreference code
  	  const pseudoreference_code_constants =
  	    "ACCESS_TYPES_PSEUDOREFERENCE_CODE "
  	    + "ALL_AVAILABLE_COMPONENTS_PSEUDOREFERENCE_CODE "
  	    + "ALL_AVAILABLE_PRIVILEGES_PSEUDOREFERENCE_CODE "
  	    + "ALL_REPLICATE_COMPONENTS_PSEUDOREFERENCE_CODE "
  	    + "AVAILABLE_DEVELOPERS_COMPONENTS_PSEUDOREFERENCE_CODE "
  	    + "COMPONENTS_PSEUDOREFERENCE_CODE "
  	    + "FILTRATER_SETTINGS_CONFLICTS_PSEUDOREFERENCE_CODE "
  	    + "GROUPS_PSEUDOREFERENCE_CODE "
  	    + "RECEIVE_PROTOCOL_PSEUDOREFERENCE_CODE "
  	    + "REFERENCE_REQUISITE_PSEUDOREFERENCE_CODE "
  	    + "REFERENCE_REQUISITES_PSEUDOREFERENCE_CODE "
  	    + "REFTYPES_PSEUDOREFERENCE_CODE "
  	    + "REPLICATION_SEANCES_DIARY_PSEUDOREFERENCE_CODE "
  	    + "SEND_PROTOCOL_PSEUDOREFERENCE_CODE "
  	    + "SUBSTITUTES_PSEUDOREFERENCE_CODE "
  	    + "SYSTEM_SETTINGS_PSEUDOREFERENCE_CODE "
  	    + "UNITS_PSEUDOREFERENCE_CODE "
  	    + "USERS_PSEUDOREFERENCE_CODE "
  	    + "VIEWERS_PSEUDOREFERENCE_CODE ";

  	  // Requisite ISBCertificateType values
  	  const requisite_ISBCertificateType_values_constants =
  	    "CERTIFICATE_TYPE_ENCRYPT "
  	    + "CERTIFICATE_TYPE_SIGN "
  	    + "CERTIFICATE_TYPE_SIGN_AND_ENCRYPT ";

  	  // Requisite ISBEDocStorageType values
  	  const requisite_ISBEDocStorageType_values_constants =
  	    "STORAGE_TYPE_FILE "
  	    + "STORAGE_TYPE_NAS_CIFS "
  	    + "STORAGE_TYPE_SAPERION "
  	    + "STORAGE_TYPE_SQL_SERVER ";

  	  // Requisite CompType2 values
  	  const requisite_compType2_values_constants =
  	    "COMPTYPE2_REQUISITE_DOCUMENTS_VALUE "
  	    + "COMPTYPE2_REQUISITE_TASKS_VALUE "
  	    + "COMPTYPE2_REQUISITE_FOLDERS_VALUE "
  	    + "COMPTYPE2_REQUISITE_REFERENCES_VALUE ";

  	  // Requisite name
  	  const requisite_name_constants =
  	    "SYSREQ_CODE "
  	    + "SYSREQ_COMPTYPE2 "
  	    + "SYSREQ_CONST_AVAILABLE_FOR_WEB "
  	    + "SYSREQ_CONST_COMMON_CODE "
  	    + "SYSREQ_CONST_COMMON_VALUE "
  	    + "SYSREQ_CONST_FIRM_CODE "
  	    + "SYSREQ_CONST_FIRM_STATUS "
  	    + "SYSREQ_CONST_FIRM_VALUE "
  	    + "SYSREQ_CONST_SERVER_STATUS "
  	    + "SYSREQ_CONTENTS "
  	    + "SYSREQ_DATE_OPEN "
  	    + "SYSREQ_DATE_CLOSE "
  	    + "SYSREQ_DESCRIPTION "
  	    + "SYSREQ_DESCRIPTION_LOCALIZE_ID "
  	    + "SYSREQ_DOUBLE "
  	    + "SYSREQ_EDOC_ACCESS_TYPE "
  	    + "SYSREQ_EDOC_AUTHOR "
  	    + "SYSREQ_EDOC_CREATED "
  	    + "SYSREQ_EDOC_DELEGATE_RIGHTS_REQUISITE_CODE "
  	    + "SYSREQ_EDOC_EDITOR "
  	    + "SYSREQ_EDOC_ENCODE_TYPE "
  	    + "SYSREQ_EDOC_ENCRYPTION_PLUGIN_NAME "
  	    + "SYSREQ_EDOC_ENCRYPTION_PLUGIN_VERSION "
  	    + "SYSREQ_EDOC_EXPORT_DATE "
  	    + "SYSREQ_EDOC_EXPORTER "
  	    + "SYSREQ_EDOC_KIND "
  	    + "SYSREQ_EDOC_LIFE_STAGE_NAME "
  	    + "SYSREQ_EDOC_LOCKED_FOR_SERVER_CODE "
  	    + "SYSREQ_EDOC_MODIFIED "
  	    + "SYSREQ_EDOC_NAME "
  	    + "SYSREQ_EDOC_NOTE "
  	    + "SYSREQ_EDOC_QUALIFIED_ID "
  	    + "SYSREQ_EDOC_SESSION_KEY "
  	    + "SYSREQ_EDOC_SESSION_KEY_ENCRYPTION_PLUGIN_NAME "
  	    + "SYSREQ_EDOC_SESSION_KEY_ENCRYPTION_PLUGIN_VERSION "
  	    + "SYSREQ_EDOC_SIGNATURE_TYPE "
  	    + "SYSREQ_EDOC_SIGNED "
  	    + "SYSREQ_EDOC_STORAGE "
  	    + "SYSREQ_EDOC_STORAGES_ARCHIVE_STORAGE "
  	    + "SYSREQ_EDOC_STORAGES_CHECK_RIGHTS "
  	    + "SYSREQ_EDOC_STORAGES_COMPUTER_NAME "
  	    + "SYSREQ_EDOC_STORAGES_EDIT_IN_STORAGE "
  	    + "SYSREQ_EDOC_STORAGES_EXECUTIVE_STORAGE "
  	    + "SYSREQ_EDOC_STORAGES_FUNCTION "
  	    + "SYSREQ_EDOC_STORAGES_INITIALIZED "
  	    + "SYSREQ_EDOC_STORAGES_LOCAL_PATH "
  	    + "SYSREQ_EDOC_STORAGES_SAPERION_DATABASE_NAME "
  	    + "SYSREQ_EDOC_STORAGES_SEARCH_BY_TEXT "
  	    + "SYSREQ_EDOC_STORAGES_SERVER_NAME "
  	    + "SYSREQ_EDOC_STORAGES_SHARED_SOURCE_NAME "
  	    + "SYSREQ_EDOC_STORAGES_TYPE "
  	    + "SYSREQ_EDOC_TEXT_MODIFIED "
  	    + "SYSREQ_EDOC_TYPE_ACT_CODE "
  	    + "SYSREQ_EDOC_TYPE_ACT_DESCRIPTION "
  	    + "SYSREQ_EDOC_TYPE_ACT_DESCRIPTION_LOCALIZE_ID "
  	    + "SYSREQ_EDOC_TYPE_ACT_ON_EXECUTE "
  	    + "SYSREQ_EDOC_TYPE_ACT_ON_EXECUTE_EXISTS "
  	    + "SYSREQ_EDOC_TYPE_ACT_SECTION "
  	    + "SYSREQ_EDOC_TYPE_ADD_PARAMS "
  	    + "SYSREQ_EDOC_TYPE_COMMENT "
  	    + "SYSREQ_EDOC_TYPE_EVENT_TEXT "
  	    + "SYSREQ_EDOC_TYPE_NAME_IN_SINGULAR "
  	    + "SYSREQ_EDOC_TYPE_NAME_IN_SINGULAR_LOCALIZE_ID "
  	    + "SYSREQ_EDOC_TYPE_NAME_LOCALIZE_ID "
  	    + "SYSREQ_EDOC_TYPE_NUMERATION_METHOD "
  	    + "SYSREQ_EDOC_TYPE_PSEUDO_REQUISITE_CODE "
  	    + "SYSREQ_EDOC_TYPE_REQ_CODE "
  	    + "SYSREQ_EDOC_TYPE_REQ_DESCRIPTION "
  	    + "SYSREQ_EDOC_TYPE_REQ_DESCRIPTION_LOCALIZE_ID "
  	    + "SYSREQ_EDOC_TYPE_REQ_IS_LEADING "
  	    + "SYSREQ_EDOC_TYPE_REQ_IS_REQUIRED "
  	    + "SYSREQ_EDOC_TYPE_REQ_NUMBER "
  	    + "SYSREQ_EDOC_TYPE_REQ_ON_CHANGE "
  	    + "SYSREQ_EDOC_TYPE_REQ_ON_CHANGE_EXISTS "
  	    + "SYSREQ_EDOC_TYPE_REQ_ON_SELECT "
  	    + "SYSREQ_EDOC_TYPE_REQ_ON_SELECT_KIND "
  	    + "SYSREQ_EDOC_TYPE_REQ_SECTION "
  	    + "SYSREQ_EDOC_TYPE_VIEW_CARD "
  	    + "SYSREQ_EDOC_TYPE_VIEW_CODE "
  	    + "SYSREQ_EDOC_TYPE_VIEW_COMMENT "
  	    + "SYSREQ_EDOC_TYPE_VIEW_IS_MAIN "
  	    + "SYSREQ_EDOC_TYPE_VIEW_NAME "
  	    + "SYSREQ_EDOC_TYPE_VIEW_NAME_LOCALIZE_ID "
  	    + "SYSREQ_EDOC_VERSION_AUTHOR "
  	    + "SYSREQ_EDOC_VERSION_CRC "
  	    + "SYSREQ_EDOC_VERSION_DATA "
  	    + "SYSREQ_EDOC_VERSION_EDITOR "
  	    + "SYSREQ_EDOC_VERSION_EXPORT_DATE "
  	    + "SYSREQ_EDOC_VERSION_EXPORTER "
  	    + "SYSREQ_EDOC_VERSION_HIDDEN "
  	    + "SYSREQ_EDOC_VERSION_LIFE_STAGE "
  	    + "SYSREQ_EDOC_VERSION_MODIFIED "
  	    + "SYSREQ_EDOC_VERSION_NOTE "
  	    + "SYSREQ_EDOC_VERSION_SIGNATURE_TYPE "
  	    + "SYSREQ_EDOC_VERSION_SIGNED "
  	    + "SYSREQ_EDOC_VERSION_SIZE "
  	    + "SYSREQ_EDOC_VERSION_SOURCE "
  	    + "SYSREQ_EDOC_VERSION_TEXT_MODIFIED "
  	    + "SYSREQ_EDOCKIND_DEFAULT_VERSION_STATE_CODE "
  	    + "SYSREQ_FOLDER_KIND "
  	    + "SYSREQ_FUNC_CATEGORY "
  	    + "SYSREQ_FUNC_COMMENT "
  	    + "SYSREQ_FUNC_GROUP "
  	    + "SYSREQ_FUNC_GROUP_COMMENT "
  	    + "SYSREQ_FUNC_GROUP_NUMBER "
  	    + "SYSREQ_FUNC_HELP "
  	    + "SYSREQ_FUNC_PARAM_DEF_VALUE "
  	    + "SYSREQ_FUNC_PARAM_IDENT "
  	    + "SYSREQ_FUNC_PARAM_NUMBER "
  	    + "SYSREQ_FUNC_PARAM_TYPE "
  	    + "SYSREQ_FUNC_TEXT "
  	    + "SYSREQ_GROUP_CATEGORY "
  	    + "SYSREQ_ID "
  	    + "SYSREQ_LAST_UPDATE "
  	    + "SYSREQ_LEADER_REFERENCE "
  	    + "SYSREQ_LINE_NUMBER "
  	    + "SYSREQ_MAIN_RECORD_ID "
  	    + "SYSREQ_NAME "
  	    + "SYSREQ_NAME_LOCALIZE_ID "
  	    + "SYSREQ_NOTE "
  	    + "SYSREQ_ORIGINAL_RECORD "
  	    + "SYSREQ_OUR_FIRM "
  	    + "SYSREQ_PROFILING_SETTINGS_BATCH_LOGING "
  	    + "SYSREQ_PROFILING_SETTINGS_BATCH_SIZE "
  	    + "SYSREQ_PROFILING_SETTINGS_PROFILING_ENABLED "
  	    + "SYSREQ_PROFILING_SETTINGS_SQL_PROFILING_ENABLED "
  	    + "SYSREQ_PROFILING_SETTINGS_START_LOGGED "
  	    + "SYSREQ_RECORD_STATUS "
  	    + "SYSREQ_REF_REQ_FIELD_NAME "
  	    + "SYSREQ_REF_REQ_FORMAT "
  	    + "SYSREQ_REF_REQ_GENERATED "
  	    + "SYSREQ_REF_REQ_LENGTH "
  	    + "SYSREQ_REF_REQ_PRECISION "
  	    + "SYSREQ_REF_REQ_REFERENCE "
  	    + "SYSREQ_REF_REQ_SECTION "
  	    + "SYSREQ_REF_REQ_STORED "
  	    + "SYSREQ_REF_REQ_TOKENS "
  	    + "SYSREQ_REF_REQ_TYPE "
  	    + "SYSREQ_REF_REQ_VIEW "
  	    + "SYSREQ_REF_TYPE_ACT_CODE "
  	    + "SYSREQ_REF_TYPE_ACT_DESCRIPTION "
  	    + "SYSREQ_REF_TYPE_ACT_DESCRIPTION_LOCALIZE_ID "
  	    + "SYSREQ_REF_TYPE_ACT_ON_EXECUTE "
  	    + "SYSREQ_REF_TYPE_ACT_ON_EXECUTE_EXISTS "
  	    + "SYSREQ_REF_TYPE_ACT_SECTION "
  	    + "SYSREQ_REF_TYPE_ADD_PARAMS "
  	    + "SYSREQ_REF_TYPE_COMMENT "
  	    + "SYSREQ_REF_TYPE_COMMON_SETTINGS "
  	    + "SYSREQ_REF_TYPE_DISPLAY_REQUISITE_NAME "
  	    + "SYSREQ_REF_TYPE_EVENT_TEXT "
  	    + "SYSREQ_REF_TYPE_MAIN_LEADING_REF "
  	    + "SYSREQ_REF_TYPE_NAME_IN_SINGULAR "
  	    + "SYSREQ_REF_TYPE_NAME_IN_SINGULAR_LOCALIZE_ID "
  	    + "SYSREQ_REF_TYPE_NAME_LOCALIZE_ID "
  	    + "SYSREQ_REF_TYPE_NUMERATION_METHOD "
  	    + "SYSREQ_REF_TYPE_REQ_CODE "
  	    + "SYSREQ_REF_TYPE_REQ_DESCRIPTION "
  	    + "SYSREQ_REF_TYPE_REQ_DESCRIPTION_LOCALIZE_ID "
  	    + "SYSREQ_REF_TYPE_REQ_IS_CONTROL "
  	    + "SYSREQ_REF_TYPE_REQ_IS_FILTER "
  	    + "SYSREQ_REF_TYPE_REQ_IS_LEADING "
  	    + "SYSREQ_REF_TYPE_REQ_IS_REQUIRED "
  	    + "SYSREQ_REF_TYPE_REQ_NUMBER "
  	    + "SYSREQ_REF_TYPE_REQ_ON_CHANGE "
  	    + "SYSREQ_REF_TYPE_REQ_ON_CHANGE_EXISTS "
  	    + "SYSREQ_REF_TYPE_REQ_ON_SELECT "
  	    + "SYSREQ_REF_TYPE_REQ_ON_SELECT_KIND "
  	    + "SYSREQ_REF_TYPE_REQ_SECTION "
  	    + "SYSREQ_REF_TYPE_VIEW_CARD "
  	    + "SYSREQ_REF_TYPE_VIEW_CODE "
  	    + "SYSREQ_REF_TYPE_VIEW_COMMENT "
  	    + "SYSREQ_REF_TYPE_VIEW_IS_MAIN "
  	    + "SYSREQ_REF_TYPE_VIEW_NAME "
  	    + "SYSREQ_REF_TYPE_VIEW_NAME_LOCALIZE_ID "
  	    + "SYSREQ_REFERENCE_TYPE_ID "
  	    + "SYSREQ_STATE "
  	    + "SYSREQ_STATЕ "
  	    + "SYSREQ_SYSTEM_SETTINGS_VALUE "
  	    + "SYSREQ_TYPE "
  	    + "SYSREQ_UNIT "
  	    + "SYSREQ_UNIT_ID "
  	    + "SYSREQ_USER_GROUPS_GROUP_FULL_NAME "
  	    + "SYSREQ_USER_GROUPS_GROUP_NAME "
  	    + "SYSREQ_USER_GROUPS_GROUP_SERVER_NAME "
  	    + "SYSREQ_USERS_ACCESS_RIGHTS "
  	    + "SYSREQ_USERS_AUTHENTICATION "
  	    + "SYSREQ_USERS_CATEGORY "
  	    + "SYSREQ_USERS_COMPONENT "
  	    + "SYSREQ_USERS_COMPONENT_USER_IS_PUBLIC "
  	    + "SYSREQ_USERS_DOMAIN "
  	    + "SYSREQ_USERS_FULL_USER_NAME "
  	    + "SYSREQ_USERS_GROUP "
  	    + "SYSREQ_USERS_IS_MAIN_SERVER "
  	    + "SYSREQ_USERS_LOGIN "
  	    + "SYSREQ_USERS_REFERENCE_USER_IS_PUBLIC "
  	    + "SYSREQ_USERS_STATUS "
  	    + "SYSREQ_USERS_USER_CERTIFICATE "
  	    + "SYSREQ_USERS_USER_CERTIFICATE_INFO "
  	    + "SYSREQ_USERS_USER_CERTIFICATE_PLUGIN_NAME "
  	    + "SYSREQ_USERS_USER_CERTIFICATE_PLUGIN_VERSION "
  	    + "SYSREQ_USERS_USER_CERTIFICATE_STATE "
  	    + "SYSREQ_USERS_USER_CERTIFICATE_SUBJECT_NAME "
  	    + "SYSREQ_USERS_USER_CERTIFICATE_THUMBPRINT "
  	    + "SYSREQ_USERS_USER_DEFAULT_CERTIFICATE "
  	    + "SYSREQ_USERS_USER_DESCRIPTION "
  	    + "SYSREQ_USERS_USER_GLOBAL_NAME "
  	    + "SYSREQ_USERS_USER_LOGIN "
  	    + "SYSREQ_USERS_USER_MAIN_SERVER "
  	    + "SYSREQ_USERS_USER_TYPE "
  	    + "SYSREQ_WORK_RULES_FOLDER_ID ";

  	  // Result
  	  const result_constants = "RESULT_VAR_NAME RESULT_VAR_NAME_ENG ";

  	  // Rule identification
  	  const rule_identification_constants =
  	    "AUTO_NUMERATION_RULE_ID "
  	    + "CANT_CHANGE_ID_REQUISITE_RULE_ID "
  	    + "CANT_CHANGE_OURFIRM_REQUISITE_RULE_ID "
  	    + "CHECK_CHANGING_REFERENCE_RECORD_USE_RULE_ID "
  	    + "CHECK_CODE_REQUISITE_RULE_ID "
  	    + "CHECK_DELETING_REFERENCE_RECORD_USE_RULE_ID "
  	    + "CHECK_FILTRATER_CHANGES_RULE_ID "
  	    + "CHECK_RECORD_INTERVAL_RULE_ID "
  	    + "CHECK_REFERENCE_INTERVAL_RULE_ID "
  	    + "CHECK_REQUIRED_DATA_FULLNESS_RULE_ID "
  	    + "CHECK_REQUIRED_REQUISITES_FULLNESS_RULE_ID "
  	    + "MAKE_RECORD_UNRATIFIED_RULE_ID "
  	    + "RESTORE_AUTO_NUMERATION_RULE_ID "
  	    + "SET_FIRM_CONTEXT_FROM_RECORD_RULE_ID "
  	    + "SET_FIRST_RECORD_IN_LIST_FORM_RULE_ID "
  	    + "SET_IDSPS_VALUE_RULE_ID "
  	    + "SET_NEXT_CODE_VALUE_RULE_ID "
  	    + "SET_OURFIRM_BOUNDS_RULE_ID "
  	    + "SET_OURFIRM_REQUISITE_RULE_ID ";

  	  // Script block properties
  	  const script_block_properties_constants =
  	    "SCRIPT_BLOCK_AFTER_FINISH_EVENT "
  	    + "SCRIPT_BLOCK_BEFORE_START_EVENT "
  	    + "SCRIPT_BLOCK_EXECUTION_RESULTS_PROPERTY "
  	    + "SCRIPT_BLOCK_NAME_PROPERTY "
  	    + "SCRIPT_BLOCK_SCRIPT_PROPERTY ";

  	  // Subtask block properties
  	  const subtask_block_properties_constants =
  	    "SUBTASK_BLOCK_ABORT_DEADLINE_PROPERTY "
  	    + "SUBTASK_BLOCK_AFTER_FINISH_EVENT "
  	    + "SUBTASK_BLOCK_ASSIGN_PARAMS_EVENT "
  	    + "SUBTASK_BLOCK_ATTACHMENTS_PROPERTY "
  	    + "SUBTASK_BLOCK_ATTACHMENTS_RIGHTS_GROUP_PROPERTY "
  	    + "SUBTASK_BLOCK_ATTACHMENTS_RIGHTS_TYPE_PROPERTY "
  	    + "SUBTASK_BLOCK_BEFORE_START_EVENT "
  	    + "SUBTASK_BLOCK_CREATED_TASK_PROPERTY "
  	    + "SUBTASK_BLOCK_CREATION_EVENT "
  	    + "SUBTASK_BLOCK_DEADLINE_PROPERTY "
  	    + "SUBTASK_BLOCK_IMPORTANCE_PROPERTY "
  	    + "SUBTASK_BLOCK_INITIATOR_PROPERTY "
  	    + "SUBTASK_BLOCK_IS_RELATIVE_ABORT_DEADLINE_PROPERTY "
  	    + "SUBTASK_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY "
  	    + "SUBTASK_BLOCK_JOBS_TYPE_PROPERTY "
  	    + "SUBTASK_BLOCK_NAME_PROPERTY "
  	    + "SUBTASK_BLOCK_PARALLEL_ROUTE_PROPERTY "
  	    + "SUBTASK_BLOCK_PERFORMERS_PROPERTY "
  	    + "SUBTASK_BLOCK_RELATIVE_ABORT_DEADLINE_TYPE_PROPERTY "
  	    + "SUBTASK_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY "
  	    + "SUBTASK_BLOCK_REQUIRE_SIGN_PROPERTY "
  	    + "SUBTASK_BLOCK_STANDARD_ROUTE_PROPERTY "
  	    + "SUBTASK_BLOCK_START_EVENT "
  	    + "SUBTASK_BLOCK_STEP_CONTROL_PROPERTY "
  	    + "SUBTASK_BLOCK_SUBJECT_PROPERTY "
  	    + "SUBTASK_BLOCK_TASK_CONTROL_PROPERTY "
  	    + "SUBTASK_BLOCK_TEXT_PROPERTY "
  	    + "SUBTASK_BLOCK_UNLOCK_ATTACHMENTS_ON_STOP_PROPERTY "
  	    + "SUBTASK_BLOCK_USE_STANDARD_ROUTE_PROPERTY "
  	    + "SUBTASK_BLOCK_WAIT_FOR_TASK_COMPLETE_PROPERTY ";

  	  // System component
  	  const system_component_constants =
  	    "SYSCOMP_CONTROL_JOBS "
  	    + "SYSCOMP_FOLDERS "
  	    + "SYSCOMP_JOBS "
  	    + "SYSCOMP_NOTICES "
  	    + "SYSCOMP_TASKS ";

  	  // System dialogs
  	  const system_dialogs_constants =
  	    "SYSDLG_CREATE_EDOCUMENT "
  	    + "SYSDLG_CREATE_EDOCUMENT_VERSION "
  	    + "SYSDLG_CURRENT_PERIOD "
  	    + "SYSDLG_EDIT_FUNCTION_HELP "
  	    + "SYSDLG_EDOCUMENT_KINDS_FOR_TEMPLATE "
  	    + "SYSDLG_EXPORT_MULTIPLE_EDOCUMENTS "
  	    + "SYSDLG_EXPORT_SINGLE_EDOCUMENT "
  	    + "SYSDLG_IMPORT_EDOCUMENT "
  	    + "SYSDLG_MULTIPLE_SELECT "
  	    + "SYSDLG_SETUP_ACCESS_RIGHTS "
  	    + "SYSDLG_SETUP_DEFAULT_RIGHTS "
  	    + "SYSDLG_SETUP_FILTER_CONDITION "
  	    + "SYSDLG_SETUP_SIGN_RIGHTS "
  	    + "SYSDLG_SETUP_TASK_OBSERVERS "
  	    + "SYSDLG_SETUP_TASK_ROUTE "
  	    + "SYSDLG_SETUP_USERS_LIST "
  	    + "SYSDLG_SIGN_EDOCUMENT "
  	    + "SYSDLG_SIGN_MULTIPLE_EDOCUMENTS ";

  	  // System reference names
  	  const system_reference_names_constants =
  	    "SYSREF_ACCESS_RIGHTS_TYPES "
  	    + "SYSREF_ADMINISTRATION_HISTORY "
  	    + "SYSREF_ALL_AVAILABLE_COMPONENTS "
  	    + "SYSREF_ALL_AVAILABLE_PRIVILEGES "
  	    + "SYSREF_ALL_REPLICATING_COMPONENTS "
  	    + "SYSREF_AVAILABLE_DEVELOPERS_COMPONENTS "
  	    + "SYSREF_CALENDAR_EVENTS "
  	    + "SYSREF_COMPONENT_TOKEN_HISTORY "
  	    + "SYSREF_COMPONENT_TOKENS "
  	    + "SYSREF_COMPONENTS "
  	    + "SYSREF_CONSTANTS "
  	    + "SYSREF_DATA_RECEIVE_PROTOCOL "
  	    + "SYSREF_DATA_SEND_PROTOCOL "
  	    + "SYSREF_DIALOGS "
  	    + "SYSREF_DIALOGS_REQUISITES "
  	    + "SYSREF_EDITORS "
  	    + "SYSREF_EDOC_CARDS "
  	    + "SYSREF_EDOC_TYPES "
  	    + "SYSREF_EDOCUMENT_CARD_REQUISITES "
  	    + "SYSREF_EDOCUMENT_CARD_TYPES "
  	    + "SYSREF_EDOCUMENT_CARD_TYPES_REFERENCE "
  	    + "SYSREF_EDOCUMENT_CARDS "
  	    + "SYSREF_EDOCUMENT_HISTORY "
  	    + "SYSREF_EDOCUMENT_KINDS "
  	    + "SYSREF_EDOCUMENT_REQUISITES "
  	    + "SYSREF_EDOCUMENT_SIGNATURES "
  	    + "SYSREF_EDOCUMENT_TEMPLATES "
  	    + "SYSREF_EDOCUMENT_TEXT_STORAGES "
  	    + "SYSREF_EDOCUMENT_VIEWS "
  	    + "SYSREF_FILTERER_SETUP_CONFLICTS "
  	    + "SYSREF_FILTRATER_SETTING_CONFLICTS "
  	    + "SYSREF_FOLDER_HISTORY "
  	    + "SYSREF_FOLDERS "
  	    + "SYSREF_FUNCTION_GROUPS "
  	    + "SYSREF_FUNCTION_PARAMS "
  	    + "SYSREF_FUNCTIONS "
  	    + "SYSREF_JOB_HISTORY "
  	    + "SYSREF_LINKS "
  	    + "SYSREF_LOCALIZATION_DICTIONARY "
  	    + "SYSREF_LOCALIZATION_LANGUAGES "
  	    + "SYSREF_MODULES "
  	    + "SYSREF_PRIVILEGES "
  	    + "SYSREF_RECORD_HISTORY "
  	    + "SYSREF_REFERENCE_REQUISITES "
  	    + "SYSREF_REFERENCE_TYPE_VIEWS "
  	    + "SYSREF_REFERENCE_TYPES "
  	    + "SYSREF_REFERENCES "
  	    + "SYSREF_REFERENCES_REQUISITES "
  	    + "SYSREF_REMOTE_SERVERS "
  	    + "SYSREF_REPLICATION_SESSIONS_LOG "
  	    + "SYSREF_REPLICATION_SESSIONS_PROTOCOL "
  	    + "SYSREF_REPORTS "
  	    + "SYSREF_ROLES "
  	    + "SYSREF_ROUTE_BLOCK_GROUPS "
  	    + "SYSREF_ROUTE_BLOCKS "
  	    + "SYSREF_SCRIPTS "
  	    + "SYSREF_SEARCHES "
  	    + "SYSREF_SERVER_EVENTS "
  	    + "SYSREF_SERVER_EVENTS_HISTORY "
  	    + "SYSREF_STANDARD_ROUTE_GROUPS "
  	    + "SYSREF_STANDARD_ROUTES "
  	    + "SYSREF_STATUSES "
  	    + "SYSREF_SYSTEM_SETTINGS "
  	    + "SYSREF_TASK_HISTORY "
  	    + "SYSREF_TASK_KIND_GROUPS "
  	    + "SYSREF_TASK_KINDS "
  	    + "SYSREF_TASK_RIGHTS "
  	    + "SYSREF_TASK_SIGNATURES "
  	    + "SYSREF_TASKS "
  	    + "SYSREF_UNITS "
  	    + "SYSREF_USER_GROUPS "
  	    + "SYSREF_USER_GROUPS_REFERENCE "
  	    + "SYSREF_USER_SUBSTITUTION "
  	    + "SYSREF_USERS "
  	    + "SYSREF_USERS_REFERENCE "
  	    + "SYSREF_VIEWERS "
  	    + "SYSREF_WORKING_TIME_CALENDARS ";

  	  // Table name
  	  const table_name_constants =
  	    "ACCESS_RIGHTS_TABLE_NAME "
  	    + "EDMS_ACCESS_TABLE_NAME "
  	    + "EDOC_TYPES_TABLE_NAME ";

  	  // Test
  	  const test_constants =
  	    "TEST_DEV_DB_NAME "
  	    + "TEST_DEV_SYSTEM_CODE "
  	    + "TEST_EDMS_DB_NAME "
  	    + "TEST_EDMS_MAIN_CODE "
  	    + "TEST_EDMS_MAIN_DB_NAME "
  	    + "TEST_EDMS_SECOND_CODE "
  	    + "TEST_EDMS_SECOND_DB_NAME "
  	    + "TEST_EDMS_SYSTEM_CODE "
  	    + "TEST_ISB5_MAIN_CODE "
  	    + "TEST_ISB5_SECOND_CODE "
  	    + "TEST_SQL_SERVER_2005_NAME "
  	    + "TEST_SQL_SERVER_NAME ";

  	  // Using the dialog windows
  	  const using_the_dialog_windows_constants =
  	    "ATTENTION_CAPTION "
  	    + "cbsCommandLinks "
  	    + "cbsDefault "
  	    + "CONFIRMATION_CAPTION "
  	    + "ERROR_CAPTION "
  	    + "INFORMATION_CAPTION "
  	    + "mrCancel "
  	    + "mrOk ";

  	  // Using the document
  	  const using_the_document_constants =
  	    "EDOC_VERSION_ACTIVE_STAGE_CODE "
  	    + "EDOC_VERSION_DESIGN_STAGE_CODE "
  	    + "EDOC_VERSION_OBSOLETE_STAGE_CODE ";

  	  // Using the EA and encryption
  	  const using_the_EA_and_encryption_constants =
  	    "cpDataEnciphermentEnabled "
  	    + "cpDigitalSignatureEnabled "
  	    + "cpID "
  	    + "cpIssuer "
  	    + "cpPluginVersion "
  	    + "cpSerial "
  	    + "cpSubjectName "
  	    + "cpSubjSimpleName "
  	    + "cpValidFromDate "
  	    + "cpValidToDate ";

  	  // Using the ISBL-editor
  	  const using_the_ISBL_editor_constants =
  	    "ISBL_SYNTAX " + "NO_SYNTAX " + "XML_SYNTAX ";

  	  // Wait block properties
  	  const wait_block_properties_constants =
  	    "WAIT_BLOCK_AFTER_FINISH_EVENT "
  	    + "WAIT_BLOCK_BEFORE_START_EVENT "
  	    + "WAIT_BLOCK_DEADLINE_PROPERTY "
  	    + "WAIT_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY "
  	    + "WAIT_BLOCK_NAME_PROPERTY "
  	    + "WAIT_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY ";

  	  // SYSRES Common
  	  const sysres_common_constants =
  	    "SYSRES_COMMON "
  	    + "SYSRES_CONST "
  	    + "SYSRES_MBFUNC "
  	    + "SYSRES_SBDATA "
  	    + "SYSRES_SBGUI "
  	    + "SYSRES_SBINTF "
  	    + "SYSRES_SBREFDSC "
  	    + "SYSRES_SQLERRORS "
  	    + "SYSRES_SYSCOMP ";

  	  // Константы ==> built_in
  	  const CONSTANTS =
  	    sysres_constants
  	    + base_constants
  	    + base_group_name_constants
  	    + decision_block_properties_constants
  	    + file_extension_constants
  	    + job_block_properties_constants
  	    + language_code_constants
  	    + launching_external_applications_constants
  	    + link_kind_constants
  	    + lock_type_constants
  	    + monitor_block_properties_constants
  	    + notice_block_properties_constants
  	    + object_events_constants
  	    + object_params_constants
  	    + other_constants
  	    + privileges_constants
  	    + pseudoreference_code_constants
  	    + requisite_ISBCertificateType_values_constants
  	    + requisite_ISBEDocStorageType_values_constants
  	    + requisite_compType2_values_constants
  	    + requisite_name_constants
  	    + result_constants
  	    + rule_identification_constants
  	    + script_block_properties_constants
  	    + subtask_block_properties_constants
  	    + system_component_constants
  	    + system_dialogs_constants
  	    + system_reference_names_constants
  	    + table_name_constants
  	    + test_constants
  	    + using_the_dialog_windows_constants
  	    + using_the_document_constants
  	    + using_the_EA_and_encryption_constants
  	    + using_the_ISBL_editor_constants
  	    + wait_block_properties_constants
  	    + sysres_common_constants;

  	  // enum TAccountType
  	  const TAccountType = "atUser atGroup atRole ";

  	  // enum TActionEnabledMode
  	  const TActionEnabledMode =
  	    "aemEnabledAlways "
  	    + "aemDisabledAlways "
  	    + "aemEnabledOnBrowse "
  	    + "aemEnabledOnEdit "
  	    + "aemDisabledOnBrowseEmpty ";

  	  // enum TAddPosition
  	  const TAddPosition = "apBegin apEnd ";

  	  // enum TAlignment
  	  const TAlignment = "alLeft alRight ";

  	  // enum TAreaShowMode
  	  const TAreaShowMode =
  	    "asmNever "
  	    + "asmNoButCustomize "
  	    + "asmAsLastTime "
  	    + "asmYesButCustomize "
  	    + "asmAlways ";

  	  // enum TCertificateInvalidationReason
  	  const TCertificateInvalidationReason = "cirCommon cirRevoked ";

  	  // enum TCertificateType
  	  const TCertificateType = "ctSignature ctEncode ctSignatureEncode ";

  	  // enum TCheckListBoxItemState
  	  const TCheckListBoxItemState = "clbUnchecked clbChecked clbGrayed ";

  	  // enum TCloseOnEsc
  	  const TCloseOnEsc = "ceISB ceAlways ceNever ";

  	  // enum TCompType
  	  const TCompType =
  	    "ctDocument "
  	    + "ctReference "
  	    + "ctScript "
  	    + "ctUnknown "
  	    + "ctReport "
  	    + "ctDialog "
  	    + "ctFunction "
  	    + "ctFolder "
  	    + "ctEDocument "
  	    + "ctTask "
  	    + "ctJob "
  	    + "ctNotice "
  	    + "ctControlJob ";

  	  // enum TConditionFormat
  	  const TConditionFormat = "cfInternal cfDisplay ";

  	  // enum TConnectionIntent
  	  const TConnectionIntent = "ciUnspecified ciWrite ciRead ";

  	  // enum TContentKind
  	  const TContentKind =
  	    "ckFolder "
  	    + "ckEDocument "
  	    + "ckTask "
  	    + "ckJob "
  	    + "ckComponentToken "
  	    + "ckAny "
  	    + "ckReference "
  	    + "ckScript "
  	    + "ckReport "
  	    + "ckDialog ";

  	  // enum TControlType
  	  const TControlType =
  	    "ctISBLEditor "
  	    + "ctBevel "
  	    + "ctButton "
  	    + "ctCheckListBox "
  	    + "ctComboBox "
  	    + "ctComboEdit "
  	    + "ctGrid "
  	    + "ctDBCheckBox "
  	    + "ctDBComboBox "
  	    + "ctDBEdit "
  	    + "ctDBEllipsis "
  	    + "ctDBMemo "
  	    + "ctDBNavigator "
  	    + "ctDBRadioGroup "
  	    + "ctDBStatusLabel "
  	    + "ctEdit "
  	    + "ctGroupBox "
  	    + "ctInplaceHint "
  	    + "ctMemo "
  	    + "ctPanel "
  	    + "ctListBox "
  	    + "ctRadioButton "
  	    + "ctRichEdit "
  	    + "ctTabSheet "
  	    + "ctWebBrowser "
  	    + "ctImage "
  	    + "ctHyperLink "
  	    + "ctLabel "
  	    + "ctDBMultiEllipsis "
  	    + "ctRibbon "
  	    + "ctRichView "
  	    + "ctInnerPanel "
  	    + "ctPanelGroup "
  	    + "ctBitButton ";

  	  // enum TCriterionContentType
  	  const TCriterionContentType =
  	    "cctDate "
  	    + "cctInteger "
  	    + "cctNumeric "
  	    + "cctPick "
  	    + "cctReference "
  	    + "cctString "
  	    + "cctText ";

  	  // enum TCultureType
  	  const TCultureType = "cltInternal cltPrimary cltGUI ";

  	  // enum TDataSetEventType
  	  const TDataSetEventType =
  	    "dseBeforeOpen "
  	    + "dseAfterOpen "
  	    + "dseBeforeClose "
  	    + "dseAfterClose "
  	    + "dseOnValidDelete "
  	    + "dseBeforeDelete "
  	    + "dseAfterDelete "
  	    + "dseAfterDeleteOutOfTransaction "
  	    + "dseOnDeleteError "
  	    + "dseBeforeInsert "
  	    + "dseAfterInsert "
  	    + "dseOnValidUpdate "
  	    + "dseBeforeUpdate "
  	    + "dseOnUpdateRatifiedRecord "
  	    + "dseAfterUpdate "
  	    + "dseAfterUpdateOutOfTransaction "
  	    + "dseOnUpdateError "
  	    + "dseAfterScroll "
  	    + "dseOnOpenRecord "
  	    + "dseOnCloseRecord "
  	    + "dseBeforeCancel "
  	    + "dseAfterCancel "
  	    + "dseOnUpdateDeadlockError "
  	    + "dseBeforeDetailUpdate "
  	    + "dseOnPrepareUpdate "
  	    + "dseOnAnyRequisiteChange ";

  	  // enum TDataSetState
  	  const TDataSetState = "dssEdit dssInsert dssBrowse dssInActive ";

  	  // enum TDateFormatType
  	  const TDateFormatType = "dftDate dftShortDate dftDateTime dftTimeStamp ";

  	  // enum TDateOffsetType
  	  const TDateOffsetType = "dotDays dotHours dotMinutes dotSeconds ";

  	  // enum TDateTimeKind
  	  const TDateTimeKind = "dtkndLocal dtkndUTC ";

  	  // enum TDeaAccessRights
  	  const TDeaAccessRights = "arNone arView arEdit arFull ";

  	  // enum TDocumentDefaultAction
  	  const TDocumentDefaultAction = "ddaView ddaEdit ";

  	  // enum TEditMode
  	  const TEditMode =
  	    "emLock "
  	    + "emEdit "
  	    + "emSign "
  	    + "emExportWithLock "
  	    + "emImportWithUnlock "
  	    + "emChangeVersionNote "
  	    + "emOpenForModify "
  	    + "emChangeLifeStage "
  	    + "emDelete "
  	    + "emCreateVersion "
  	    + "emImport "
  	    + "emUnlockExportedWithLock "
  	    + "emStart "
  	    + "emAbort "
  	    + "emReInit "
  	    + "emMarkAsReaded "
  	    + "emMarkAsUnreaded "
  	    + "emPerform "
  	    + "emAccept "
  	    + "emResume "
  	    + "emChangeRights "
  	    + "emEditRoute "
  	    + "emEditObserver "
  	    + "emRecoveryFromLocalCopy "
  	    + "emChangeWorkAccessType "
  	    + "emChangeEncodeTypeToCertificate "
  	    + "emChangeEncodeTypeToPassword "
  	    + "emChangeEncodeTypeToNone "
  	    + "emChangeEncodeTypeToCertificatePassword "
  	    + "emChangeStandardRoute "
  	    + "emGetText "
  	    + "emOpenForView "
  	    + "emMoveToStorage "
  	    + "emCreateObject "
  	    + "emChangeVersionHidden "
  	    + "emDeleteVersion "
  	    + "emChangeLifeCycleStage "
  	    + "emApprovingSign "
  	    + "emExport "
  	    + "emContinue "
  	    + "emLockFromEdit "
  	    + "emUnLockForEdit "
  	    + "emLockForServer "
  	    + "emUnlockFromServer "
  	    + "emDelegateAccessRights "
  	    + "emReEncode ";

  	  // enum TEditorCloseObservType
  	  const TEditorCloseObservType = "ecotFile ecotProcess ";

  	  // enum TEdmsApplicationAction
  	  const TEdmsApplicationAction = "eaGet eaCopy eaCreate eaCreateStandardRoute ";

  	  // enum TEDocumentLockType
  	  const TEDocumentLockType = "edltAll edltNothing edltQuery ";

  	  // enum TEDocumentStepShowMode
  	  const TEDocumentStepShowMode = "essmText essmCard ";

  	  // enum TEDocumentStepVersionType
  	  const TEDocumentStepVersionType = "esvtLast esvtLastActive esvtSpecified ";

  	  // enum TEDocumentStorageFunction
  	  const TEDocumentStorageFunction = "edsfExecutive edsfArchive ";

  	  // enum TEDocumentStorageType
  	  const TEDocumentStorageType = "edstSQLServer edstFile ";

  	  // enum TEDocumentVersionSourceType
  	  const TEDocumentVersionSourceType =
  	    "edvstNone edvstEDocumentVersionCopy edvstFile edvstTemplate edvstScannedFile ";

  	  // enum TEDocumentVersionState
  	  const TEDocumentVersionState = "vsDefault vsDesign vsActive vsObsolete ";

  	  // enum TEncodeType
  	  const TEncodeType = "etNone etCertificate etPassword etCertificatePassword ";

  	  // enum TExceptionCategory
  	  const TExceptionCategory = "ecException ecWarning ecInformation ";

  	  // enum TExportedSignaturesType
  	  const TExportedSignaturesType = "estAll estApprovingOnly ";

  	  // enum TExportedVersionType
  	  const TExportedVersionType = "evtLast evtLastActive evtQuery ";

  	  // enum TFieldDataType
  	  const TFieldDataType =
  	    "fdtString "
  	    + "fdtNumeric "
  	    + "fdtInteger "
  	    + "fdtDate "
  	    + "fdtText "
  	    + "fdtUnknown "
  	    + "fdtWideString "
  	    + "fdtLargeInteger ";

  	  // enum TFolderType
  	  const TFolderType =
  	    "ftInbox "
  	    + "ftOutbox "
  	    + "ftFavorites "
  	    + "ftCommonFolder "
  	    + "ftUserFolder "
  	    + "ftComponents "
  	    + "ftQuickLaunch "
  	    + "ftShortcuts "
  	    + "ftSearch ";

  	  // enum TGridRowHeight
  	  const TGridRowHeight = "grhAuto " + "grhX1 " + "grhX2 " + "grhX3 ";

  	  // enum THyperlinkType
  	  const THyperlinkType = "hltText " + "hltRTF " + "hltHTML ";

  	  // enum TImageFileFormat
  	  const TImageFileFormat =
  	    "iffBMP "
  	    + "iffJPEG "
  	    + "iffMultiPageTIFF "
  	    + "iffSinglePageTIFF "
  	    + "iffTIFF "
  	    + "iffPNG ";

  	  // enum TImageMode
  	  const TImageMode = "im8bGrayscale " + "im24bRGB " + "im1bMonochrome ";

  	  // enum TImageType
  	  const TImageType = "itBMP " + "itJPEG " + "itWMF " + "itPNG ";

  	  // enum TInplaceHintKind
  	  const TInplaceHintKind =
  	    "ikhInformation " + "ikhWarning " + "ikhError " + "ikhNoIcon ";

  	  // enum TISBLContext
  	  const TISBLContext =
  	    "icUnknown "
  	    + "icScript "
  	    + "icFunction "
  	    + "icIntegratedReport "
  	    + "icAnalyticReport "
  	    + "icDataSetEventHandler "
  	    + "icActionHandler "
  	    + "icFormEventHandler "
  	    + "icLookUpEventHandler "
  	    + "icRequisiteChangeEventHandler "
  	    + "icBeforeSearchEventHandler "
  	    + "icRoleCalculation "
  	    + "icSelectRouteEventHandler "
  	    + "icBlockPropertyCalculation "
  	    + "icBlockQueryParamsEventHandler "
  	    + "icChangeSearchResultEventHandler "
  	    + "icBlockEventHandler "
  	    + "icSubTaskInitEventHandler "
  	    + "icEDocDataSetEventHandler "
  	    + "icEDocLookUpEventHandler "
  	    + "icEDocActionHandler "
  	    + "icEDocFormEventHandler "
  	    + "icEDocRequisiteChangeEventHandler "
  	    + "icStructuredConversionRule "
  	    + "icStructuredConversionEventBefore "
  	    + "icStructuredConversionEventAfter "
  	    + "icWizardEventHandler "
  	    + "icWizardFinishEventHandler "
  	    + "icWizardStepEventHandler "
  	    + "icWizardStepFinishEventHandler "
  	    + "icWizardActionEnableEventHandler "
  	    + "icWizardActionExecuteEventHandler "
  	    + "icCreateJobsHandler "
  	    + "icCreateNoticesHandler "
  	    + "icBeforeLookUpEventHandler "
  	    + "icAfterLookUpEventHandler "
  	    + "icTaskAbortEventHandler "
  	    + "icWorkflowBlockActionHandler "
  	    + "icDialogDataSetEventHandler "
  	    + "icDialogActionHandler "
  	    + "icDialogLookUpEventHandler "
  	    + "icDialogRequisiteChangeEventHandler "
  	    + "icDialogFormEventHandler "
  	    + "icDialogValidCloseEventHandler "
  	    + "icBlockFormEventHandler "
  	    + "icTaskFormEventHandler "
  	    + "icReferenceMethod "
  	    + "icEDocMethod "
  	    + "icDialogMethod "
  	    + "icProcessMessageHandler ";

  	  // enum TItemShow
  	  const TItemShow = "isShow " + "isHide " + "isByUserSettings ";

  	  // enum TJobKind
  	  const TJobKind = "jkJob " + "jkNotice " + "jkControlJob ";

  	  // enum TJoinType
  	  const TJoinType = "jtInner " + "jtLeft " + "jtRight " + "jtFull " + "jtCross ";

  	  // enum TLabelPos
  	  const TLabelPos = "lbpAbove " + "lbpBelow " + "lbpLeft " + "lbpRight ";

  	  // enum TLicensingType
  	  const TLicensingType = "eltPerConnection " + "eltPerUser ";

  	  // enum TLifeCycleStageFontColor
  	  const TLifeCycleStageFontColor =
  	    "sfcUndefined "
  	    + "sfcBlack "
  	    + "sfcGreen "
  	    + "sfcRed "
  	    + "sfcBlue "
  	    + "sfcOrange "
  	    + "sfcLilac ";

  	  // enum TLifeCycleStageFontStyle
  	  const TLifeCycleStageFontStyle = "sfsItalic " + "sfsStrikeout " + "sfsNormal ";

  	  // enum TLockableDevelopmentComponentType
  	  const TLockableDevelopmentComponentType =
  	    "ldctStandardRoute "
  	    + "ldctWizard "
  	    + "ldctScript "
  	    + "ldctFunction "
  	    + "ldctRouteBlock "
  	    + "ldctIntegratedReport "
  	    + "ldctAnalyticReport "
  	    + "ldctReferenceType "
  	    + "ldctEDocumentType "
  	    + "ldctDialog "
  	    + "ldctServerEvents ";

  	  // enum TMaxRecordCountRestrictionType
  	  const TMaxRecordCountRestrictionType =
  	    "mrcrtNone " + "mrcrtUser " + "mrcrtMaximal " + "mrcrtCustom ";

  	  // enum TRangeValueType
  	  const TRangeValueType =
  	    "vtEqual " + "vtGreaterOrEqual " + "vtLessOrEqual " + "vtRange ";

  	  // enum TRelativeDate
  	  const TRelativeDate =
  	    "rdYesterday "
  	    + "rdToday "
  	    + "rdTomorrow "
  	    + "rdThisWeek "
  	    + "rdThisMonth "
  	    + "rdThisYear "
  	    + "rdNextMonth "
  	    + "rdNextWeek "
  	    + "rdLastWeek "
  	    + "rdLastMonth ";

  	  // enum TReportDestination
  	  const TReportDestination = "rdWindow " + "rdFile " + "rdPrinter ";

  	  // enum TReqDataType
  	  const TReqDataType =
  	    "rdtString "
  	    + "rdtNumeric "
  	    + "rdtInteger "
  	    + "rdtDate "
  	    + "rdtReference "
  	    + "rdtAccount "
  	    + "rdtText "
  	    + "rdtPick "
  	    + "rdtUnknown "
  	    + "rdtLargeInteger "
  	    + "rdtDocument ";

  	  // enum TRequisiteEventType
  	  const TRequisiteEventType = "reOnChange " + "reOnChangeValues ";

  	  // enum TSBTimeType
  	  const TSBTimeType = "ttGlobal " + "ttLocal " + "ttUser " + "ttSystem ";

  	  // enum TSearchShowMode
  	  const TSearchShowMode =
  	    "ssmBrowse " + "ssmSelect " + "ssmMultiSelect " + "ssmBrowseModal ";

  	  // enum TSelectMode
  	  const TSelectMode = "smSelect " + "smLike " + "smCard ";

  	  // enum TSignatureType
  	  const TSignatureType = "stNone " + "stAuthenticating " + "stApproving ";

  	  // enum TSignerContentType
  	  const TSignerContentType = "sctString " + "sctStream ";

  	  // enum TStringsSortType
  	  const TStringsSortType = "sstAnsiSort " + "sstNaturalSort ";

  	  // enum TStringValueType
  	  const TStringValueType = "svtEqual " + "svtContain ";

  	  // enum TStructuredObjectAttributeType
  	  const TStructuredObjectAttributeType =
  	    "soatString "
  	    + "soatNumeric "
  	    + "soatInteger "
  	    + "soatDatetime "
  	    + "soatReferenceRecord "
  	    + "soatText "
  	    + "soatPick "
  	    + "soatBoolean "
  	    + "soatEDocument "
  	    + "soatAccount "
  	    + "soatIntegerCollection "
  	    + "soatNumericCollection "
  	    + "soatStringCollection "
  	    + "soatPickCollection "
  	    + "soatDatetimeCollection "
  	    + "soatBooleanCollection "
  	    + "soatReferenceRecordCollection "
  	    + "soatEDocumentCollection "
  	    + "soatAccountCollection "
  	    + "soatContents "
  	    + "soatUnknown ";

  	  // enum TTaskAbortReason
  	  const TTaskAbortReason = "tarAbortByUser " + "tarAbortByWorkflowException ";

  	  // enum TTextValueType
  	  const TTextValueType = "tvtAllWords " + "tvtExactPhrase " + "tvtAnyWord ";

  	  // enum TUserObjectStatus
  	  const TUserObjectStatus =
  	    "usNone "
  	    + "usCompleted "
  	    + "usRedSquare "
  	    + "usBlueSquare "
  	    + "usYellowSquare "
  	    + "usGreenSquare "
  	    + "usOrangeSquare "
  	    + "usPurpleSquare "
  	    + "usFollowUp ";

  	  // enum TUserType
  	  const TUserType =
  	    "utUnknown "
  	    + "utUser "
  	    + "utDeveloper "
  	    + "utAdministrator "
  	    + "utSystemDeveloper "
  	    + "utDisconnected ";

  	  // enum TValuesBuildType
  	  const TValuesBuildType =
  	    "btAnd " + "btDetailAnd " + "btOr " + "btNotOr " + "btOnly ";

  	  // enum TViewMode
  	  const TViewMode = "vmView " + "vmSelect " + "vmNavigation ";

  	  // enum TViewSelectionMode
  	  const TViewSelectionMode =
  	    "vsmSingle " + "vsmMultiple " + "vsmMultipleCheck " + "vsmNoSelection ";

  	  // enum TWizardActionType
  	  const TWizardActionType =
  	    "wfatPrevious " + "wfatNext " + "wfatCancel " + "wfatFinish ";

  	  // enum TWizardFormElementProperty
  	  const TWizardFormElementProperty =
  	    "wfepUndefined "
  	    + "wfepText3 "
  	    + "wfepText6 "
  	    + "wfepText9 "
  	    + "wfepSpinEdit "
  	    + "wfepDropDown "
  	    + "wfepRadioGroup "
  	    + "wfepFlag "
  	    + "wfepText12 "
  	    + "wfepText15 "
  	    + "wfepText18 "
  	    + "wfepText21 "
  	    + "wfepText24 "
  	    + "wfepText27 "
  	    + "wfepText30 "
  	    + "wfepRadioGroupColumn1 "
  	    + "wfepRadioGroupColumn2 "
  	    + "wfepRadioGroupColumn3 ";

  	  // enum TWizardFormElementType
  	  const TWizardFormElementType =
  	    "wfetQueryParameter " + "wfetText " + "wfetDelimiter " + "wfetLabel ";

  	  // enum TWizardParamType
  	  const TWizardParamType =
  	    "wptString "
  	    + "wptInteger "
  	    + "wptNumeric "
  	    + "wptBoolean "
  	    + "wptDateTime "
  	    + "wptPick "
  	    + "wptText "
  	    + "wptUser "
  	    + "wptUserList "
  	    + "wptEDocumentInfo "
  	    + "wptEDocumentInfoList "
  	    + "wptReferenceRecordInfo "
  	    + "wptReferenceRecordInfoList "
  	    + "wptFolderInfo "
  	    + "wptTaskInfo "
  	    + "wptContents "
  	    + "wptFileName "
  	    + "wptDate ";

  	  // enum TWizardStepResult
  	  const TWizardStepResult =
  	    "wsrComplete "
  	    + "wsrGoNext "
  	    + "wsrGoPrevious "
  	    + "wsrCustom "
  	    + "wsrCancel "
  	    + "wsrGoFinal ";

  	  // enum TWizardStepType
  	  const TWizardStepType =
  	    "wstForm "
  	    + "wstEDocument "
  	    + "wstTaskCard "
  	    + "wstReferenceRecordCard "
  	    + "wstFinal ";

  	  // enum TWorkAccessType
  	  const TWorkAccessType = "waAll " + "waPerformers " + "waManual ";

  	  // enum TWorkflowBlockType
  	  const TWorkflowBlockType =
  	    "wsbStart "
  	    + "wsbFinish "
  	    + "wsbNotice "
  	    + "wsbStep "
  	    + "wsbDecision "
  	    + "wsbWait "
  	    + "wsbMonitor "
  	    + "wsbScript "
  	    + "wsbConnector "
  	    + "wsbSubTask "
  	    + "wsbLifeCycleStage "
  	    + "wsbPause ";

  	  // enum TWorkflowDataType
  	  const TWorkflowDataType =
  	    "wdtInteger "
  	    + "wdtFloat "
  	    + "wdtString "
  	    + "wdtPick "
  	    + "wdtDateTime "
  	    + "wdtBoolean "
  	    + "wdtTask "
  	    + "wdtJob "
  	    + "wdtFolder "
  	    + "wdtEDocument "
  	    + "wdtReferenceRecord "
  	    + "wdtUser "
  	    + "wdtGroup "
  	    + "wdtRole "
  	    + "wdtIntegerCollection "
  	    + "wdtFloatCollection "
  	    + "wdtStringCollection "
  	    + "wdtPickCollection "
  	    + "wdtDateTimeCollection "
  	    + "wdtBooleanCollection "
  	    + "wdtTaskCollection "
  	    + "wdtJobCollection "
  	    + "wdtFolderCollection "
  	    + "wdtEDocumentCollection "
  	    + "wdtReferenceRecordCollection "
  	    + "wdtUserCollection "
  	    + "wdtGroupCollection "
  	    + "wdtRoleCollection "
  	    + "wdtContents "
  	    + "wdtUserList "
  	    + "wdtSearchDescription "
  	    + "wdtDeadLine "
  	    + "wdtPickSet "
  	    + "wdtAccountCollection ";

  	  // enum TWorkImportance
  	  const TWorkImportance = "wiLow " + "wiNormal " + "wiHigh ";

  	  // enum TWorkRouteType
  	  const TWorkRouteType = "wrtSoft " + "wrtHard ";

  	  // enum TWorkState
  	  const TWorkState =
  	    "wsInit "
  	    + "wsRunning "
  	    + "wsDone "
  	    + "wsControlled "
  	    + "wsAborted "
  	    + "wsContinued ";

  	  // enum TWorkTextBuildingMode
  	  const TWorkTextBuildingMode =
  	    "wtmFull " + "wtmFromCurrent " + "wtmOnlyCurrent ";

  	  // Перечисления
  	  const ENUMS =
  	    TAccountType
  	    + TActionEnabledMode
  	    + TAddPosition
  	    + TAlignment
  	    + TAreaShowMode
  	    + TCertificateInvalidationReason
  	    + TCertificateType
  	    + TCheckListBoxItemState
  	    + TCloseOnEsc
  	    + TCompType
  	    + TConditionFormat
  	    + TConnectionIntent
  	    + TContentKind
  	    + TControlType
  	    + TCriterionContentType
  	    + TCultureType
  	    + TDataSetEventType
  	    + TDataSetState
  	    + TDateFormatType
  	    + TDateOffsetType
  	    + TDateTimeKind
  	    + TDeaAccessRights
  	    + TDocumentDefaultAction
  	    + TEditMode
  	    + TEditorCloseObservType
  	    + TEdmsApplicationAction
  	    + TEDocumentLockType
  	    + TEDocumentStepShowMode
  	    + TEDocumentStepVersionType
  	    + TEDocumentStorageFunction
  	    + TEDocumentStorageType
  	    + TEDocumentVersionSourceType
  	    + TEDocumentVersionState
  	    + TEncodeType
  	    + TExceptionCategory
  	    + TExportedSignaturesType
  	    + TExportedVersionType
  	    + TFieldDataType
  	    + TFolderType
  	    + TGridRowHeight
  	    + THyperlinkType
  	    + TImageFileFormat
  	    + TImageMode
  	    + TImageType
  	    + TInplaceHintKind
  	    + TISBLContext
  	    + TItemShow
  	    + TJobKind
  	    + TJoinType
  	    + TLabelPos
  	    + TLicensingType
  	    + TLifeCycleStageFontColor
  	    + TLifeCycleStageFontStyle
  	    + TLockableDevelopmentComponentType
  	    + TMaxRecordCountRestrictionType
  	    + TRangeValueType
  	    + TRelativeDate
  	    + TReportDestination
  	    + TReqDataType
  	    + TRequisiteEventType
  	    + TSBTimeType
  	    + TSearchShowMode
  	    + TSelectMode
  	    + TSignatureType
  	    + TSignerContentType
  	    + TStringsSortType
  	    + TStringValueType
  	    + TStructuredObjectAttributeType
  	    + TTaskAbortReason
  	    + TTextValueType
  	    + TUserObjectStatus
  	    + TUserType
  	    + TValuesBuildType
  	    + TViewMode
  	    + TViewSelectionMode
  	    + TWizardActionType
  	    + TWizardFormElementProperty
  	    + TWizardFormElementType
  	    + TWizardParamType
  	    + TWizardStepResult
  	    + TWizardStepType
  	    + TWorkAccessType
  	    + TWorkflowBlockType
  	    + TWorkflowDataType
  	    + TWorkImportance
  	    + TWorkRouteType
  	    + TWorkState
  	    + TWorkTextBuildingMode;

  	  // Системные функции ==> SYSFUNCTIONS
  	  const system_functions =
  	    "AddSubString "
  	    + "AdjustLineBreaks "
  	    + "AmountInWords "
  	    + "Analysis "
  	    + "ArrayDimCount "
  	    + "ArrayHighBound "
  	    + "ArrayLowBound "
  	    + "ArrayOf "
  	    + "ArrayReDim "
  	    + "Assert "
  	    + "Assigned "
  	    + "BeginOfMonth "
  	    + "BeginOfPeriod "
  	    + "BuildProfilingOperationAnalysis "
  	    + "CallProcedure "
  	    + "CanReadFile "
  	    + "CArrayElement "
  	    + "CDataSetRequisite "
  	    + "ChangeDate "
  	    + "ChangeReferenceDataset "
  	    + "Char "
  	    + "CharPos "
  	    + "CheckParam "
  	    + "CheckParamValue "
  	    + "CompareStrings "
  	    + "ConstantExists "
  	    + "ControlState "
  	    + "ConvertDateStr "
  	    + "Copy "
  	    + "CopyFile "
  	    + "CreateArray "
  	    + "CreateCachedReference "
  	    + "CreateConnection "
  	    + "CreateDialog "
  	    + "CreateDualListDialog "
  	    + "CreateEditor "
  	    + "CreateException "
  	    + "CreateFile "
  	    + "CreateFolderDialog "
  	    + "CreateInputDialog "
  	    + "CreateLinkFile "
  	    + "CreateList "
  	    + "CreateLock "
  	    + "CreateMemoryDataSet "
  	    + "CreateObject "
  	    + "CreateOpenDialog "
  	    + "CreateProgress "
  	    + "CreateQuery "
  	    + "CreateReference "
  	    + "CreateReport "
  	    + "CreateSaveDialog "
  	    + "CreateScript "
  	    + "CreateSQLPivotFunction "
  	    + "CreateStringList "
  	    + "CreateTreeListSelectDialog "
  	    + "CSelectSQL "
  	    + "CSQL "
  	    + "CSubString "
  	    + "CurrentUserID "
  	    + "CurrentUserName "
  	    + "CurrentVersion "
  	    + "DataSetLocateEx "
  	    + "DateDiff "
  	    + "DateTimeDiff "
  	    + "DateToStr "
  	    + "DayOfWeek "
  	    + "DeleteFile "
  	    + "DirectoryExists "
  	    + "DisableCheckAccessRights "
  	    + "DisableCheckFullShowingRestriction "
  	    + "DisableMassTaskSendingRestrictions "
  	    + "DropTable "
  	    + "DupeString "
  	    + "EditText "
  	    + "EnableCheckAccessRights "
  	    + "EnableCheckFullShowingRestriction "
  	    + "EnableMassTaskSendingRestrictions "
  	    + "EndOfMonth "
  	    + "EndOfPeriod "
  	    + "ExceptionExists "
  	    + "ExceptionsOff "
  	    + "ExceptionsOn "
  	    + "Execute "
  	    + "ExecuteProcess "
  	    + "Exit "
  	    + "ExpandEnvironmentVariables "
  	    + "ExtractFileDrive "
  	    + "ExtractFileExt "
  	    + "ExtractFileName "
  	    + "ExtractFilePath "
  	    + "ExtractParams "
  	    + "FileExists "
  	    + "FileSize "
  	    + "FindFile "
  	    + "FindSubString "
  	    + "FirmContext "
  	    + "ForceDirectories "
  	    + "Format "
  	    + "FormatDate "
  	    + "FormatNumeric "
  	    + "FormatSQLDate "
  	    + "FormatString "
  	    + "FreeException "
  	    + "GetComponent "
  	    + "GetComponentLaunchParam "
  	    + "GetConstant "
  	    + "GetLastException "
  	    + "GetReferenceRecord "
  	    + "GetRefTypeByRefID "
  	    + "GetTableID "
  	    + "GetTempFolder "
  	    + "IfThen "
  	    + "In "
  	    + "IndexOf "
  	    + "InputDialog "
  	    + "InputDialogEx "
  	    + "InteractiveMode "
  	    + "IsFileLocked "
  	    + "IsGraphicFile "
  	    + "IsNumeric "
  	    + "Length "
  	    + "LoadString "
  	    + "LoadStringFmt "
  	    + "LocalTimeToUTC "
  	    + "LowerCase "
  	    + "Max "
  	    + "MessageBox "
  	    + "MessageBoxEx "
  	    + "MimeDecodeBinary "
  	    + "MimeDecodeString "
  	    + "MimeEncodeBinary "
  	    + "MimeEncodeString "
  	    + "Min "
  	    + "MoneyInWords "
  	    + "MoveFile "
  	    + "NewID "
  	    + "Now "
  	    + "OpenFile "
  	    + "Ord "
  	    + "Precision "
  	    + "Raise "
  	    + "ReadCertificateFromFile "
  	    + "ReadFile "
  	    + "ReferenceCodeByID "
  	    + "ReferenceNumber "
  	    + "ReferenceRequisiteMode "
  	    + "ReferenceRequisiteValue "
  	    + "RegionDateSettings "
  	    + "RegionNumberSettings "
  	    + "RegionTimeSettings "
  	    + "RegRead "
  	    + "RegWrite "
  	    + "RenameFile "
  	    + "Replace "
  	    + "Round "
  	    + "SelectServerCode "
  	    + "SelectSQL "
  	    + "ServerDateTime "
  	    + "SetConstant "
  	    + "SetManagedFolderFieldsState "
  	    + "ShowConstantsInputDialog "
  	    + "ShowMessage "
  	    + "Sleep "
  	    + "Split "
  	    + "SQL "
  	    + "SQL2XLSTAB "
  	    + "SQLProfilingSendReport "
  	    + "StrToDate "
  	    + "SubString "
  	    + "SubStringCount "
  	    + "SystemSetting "
  	    + "Time "
  	    + "TimeDiff "
  	    + "Today "
  	    + "Transliterate "
  	    + "Trim "
  	    + "UpperCase "
  	    + "UserStatus "
  	    + "UTCToLocalTime "
  	    + "ValidateXML "
  	    + "VarIsClear "
  	    + "VarIsEmpty "
  	    + "VarIsNull "
  	    + "WorkTimeDiff "
  	    + "WriteFile "
  	    + "WriteFileEx "
  	    + "WriteObjectHistory "
  	    + "Анализ "
  	    + "БазаДанных "
  	    + "БлокЕсть "
  	    + "БлокЕстьРасш "
  	    + "БлокИнфо "
  	    + "БлокСнять "
  	    + "БлокСнятьРасш "
  	    + "БлокУстановить "
  	    + "Ввод "
  	    + "ВводМеню "
  	    + "ВедС "
  	    + "ВедСпр "
  	    + "ВерхняяГраницаМассива "
  	    + "ВнешПрогр "
  	    + "Восст "
  	    + "ВременнаяПапка "
  	    + "Время "
  	    + "ВыборSQL "
  	    + "ВыбратьЗапись "
  	    + "ВыделитьСтр "
  	    + "Вызвать "
  	    + "Выполнить "
  	    + "ВыпПрогр "
  	    + "ГрафическийФайл "
  	    + "ГруппаДополнительно "
  	    + "ДатаВремяСерв "
  	    + "ДеньНедели "
  	    + "ДиалогДаНет "
  	    + "ДлинаСтр "
  	    + "ДобПодстр "
  	    + "ЕПусто "
  	    + "ЕслиТо "
  	    + "ЕЧисло "
  	    + "ЗамПодстр "
  	    + "ЗаписьСправочника "
  	    + "ЗначПоляСпр "
  	    + "ИДТипСпр "
  	    + "ИзвлечьДиск "
  	    + "ИзвлечьИмяФайла "
  	    + "ИзвлечьПуть "
  	    + "ИзвлечьРасширение "
  	    + "ИзмДат "
  	    + "ИзменитьРазмерМассива "
  	    + "ИзмеренийМассива "
  	    + "ИмяОрг "
  	    + "ИмяПоляСпр "
  	    + "Индекс "
  	    + "ИндикаторЗакрыть "
  	    + "ИндикаторОткрыть "
  	    + "ИндикаторШаг "
  	    + "ИнтерактивныйРежим "
  	    + "ИтогТблСпр "
  	    + "КодВидВедСпр "
  	    + "КодВидСпрПоИД "
  	    + "КодПоAnalit "
  	    + "КодСимвола "
  	    + "КодСпр "
  	    + "КолПодстр "
  	    + "КолПроп "
  	    + "КонМес "
  	    + "Конст "
  	    + "КонстЕсть "
  	    + "КонстЗнач "
  	    + "КонТран "
  	    + "КопироватьФайл "
  	    + "КопияСтр "
  	    + "КПериод "
  	    + "КСтрТблСпр "
  	    + "Макс "
  	    + "МаксСтрТблСпр "
  	    + "Массив "
  	    + "Меню "
  	    + "МенюРасш "
  	    + "Мин "
  	    + "НаборДанныхНайтиРасш "
  	    + "НаимВидСпр "
  	    + "НаимПоAnalit "
  	    + "НаимСпр "
  	    + "НастроитьПереводыСтрок "
  	    + "НачМес "
  	    + "НачТран "
  	    + "НижняяГраницаМассива "
  	    + "НомерСпр "
  	    + "НПериод "
  	    + "Окно "
  	    + "Окр "
  	    + "Окружение "
  	    + "ОтлИнфДобавить "
  	    + "ОтлИнфУдалить "
  	    + "Отчет "
  	    + "ОтчетАнал "
  	    + "ОтчетИнт "
  	    + "ПапкаСуществует "
  	    + "Пауза "
  	    + "ПВыборSQL "
  	    + "ПереименоватьФайл "
  	    + "Переменные "
  	    + "ПереместитьФайл "
  	    + "Подстр "
  	    + "ПоискПодстр "
  	    + "ПоискСтр "
  	    + "ПолучитьИДТаблицы "
  	    + "ПользовательДополнительно "
  	    + "ПользовательИД "
  	    + "ПользовательИмя "
  	    + "ПользовательСтатус "
  	    + "Прервать "
  	    + "ПроверитьПараметр "
  	    + "ПроверитьПараметрЗнач "
  	    + "ПроверитьУсловие "
  	    + "РазбСтр "
  	    + "РазнВремя "
  	    + "РазнДат "
  	    + "РазнДатаВремя "
  	    + "РазнРабВремя "
  	    + "РегУстВрем "
  	    + "РегУстДат "
  	    + "РегУстЧсл "
  	    + "РедТекст "
  	    + "РеестрЗапись "
  	    + "РеестрСписокИменПарам "
  	    + "РеестрЧтение "
  	    + "РеквСпр "
  	    + "РеквСпрПр "
  	    + "Сегодня "
  	    + "Сейчас "
  	    + "Сервер "
  	    + "СерверПроцессИД "
  	    + "СертификатФайлСчитать "
  	    + "СжПроб "
  	    + "Символ "
  	    + "СистемаДиректумКод "
  	    + "СистемаИнформация "
  	    + "СистемаКод "
  	    + "Содержит "
  	    + "СоединениеЗакрыть "
  	    + "СоединениеОткрыть "
  	    + "СоздатьДиалог "
  	    + "СоздатьДиалогВыбораИзДвухСписков "
  	    + "СоздатьДиалогВыбораПапки "
  	    + "СоздатьДиалогОткрытияФайла "
  	    + "СоздатьДиалогСохраненияФайла "
  	    + "СоздатьЗапрос "
  	    + "СоздатьИндикатор "
  	    + "СоздатьИсключение "
  	    + "СоздатьКэшированныйСправочник "
  	    + "СоздатьМассив "
  	    + "СоздатьНаборДанных "
  	    + "СоздатьОбъект "
  	    + "СоздатьОтчет "
  	    + "СоздатьПапку "
  	    + "СоздатьРедактор "
  	    + "СоздатьСоединение "
  	    + "СоздатьСписок "
  	    + "СоздатьСписокСтрок "
  	    + "СоздатьСправочник "
  	    + "СоздатьСценарий "
  	    + "СоздСпр "
  	    + "СостСпр "
  	    + "Сохр "
  	    + "СохрСпр "
  	    + "СписокСистем "
  	    + "Спр "
  	    + "Справочник "
  	    + "СпрБлокЕсть "
  	    + "СпрБлокСнять "
  	    + "СпрБлокСнятьРасш "
  	    + "СпрБлокУстановить "
  	    + "СпрИзмНабДан "
  	    + "СпрКод "
  	    + "СпрНомер "
  	    + "СпрОбновить "
  	    + "СпрОткрыть "
  	    + "СпрОтменить "
  	    + "СпрПарам "
  	    + "СпрПолеЗнач "
  	    + "СпрПолеИмя "
  	    + "СпрРекв "
  	    + "СпрРеквВведЗн "
  	    + "СпрРеквНовые "
  	    + "СпрРеквПр "
  	    + "СпрРеквПредЗн "
  	    + "СпрРеквРежим "
  	    + "СпрРеквТипТекст "
  	    + "СпрСоздать "
  	    + "СпрСост "
  	    + "СпрСохранить "
  	    + "СпрТблИтог "
  	    + "СпрТблСтр "
  	    + "СпрТблСтрКол "
  	    + "СпрТблСтрМакс "
  	    + "СпрТблСтрМин "
  	    + "СпрТблСтрПред "
  	    + "СпрТблСтрСлед "
  	    + "СпрТблСтрСозд "
  	    + "СпрТблСтрУд "
  	    + "СпрТекПредст "
  	    + "СпрУдалить "
  	    + "СравнитьСтр "
  	    + "СтрВерхРегистр "
  	    + "СтрНижнРегистр "
  	    + "СтрТблСпр "
  	    + "СумПроп "
  	    + "Сценарий "
  	    + "СценарийПарам "
  	    + "ТекВерсия "
  	    + "ТекОрг "
  	    + "Точн "
  	    + "Тран "
  	    + "Транслитерация "
  	    + "УдалитьТаблицу "
  	    + "УдалитьФайл "
  	    + "УдСпр "
  	    + "УдСтрТблСпр "
  	    + "Уст "
  	    + "УстановкиКонстант "
  	    + "ФайлАтрибутСчитать "
  	    + "ФайлАтрибутУстановить "
  	    + "ФайлВремя "
  	    + "ФайлВремяУстановить "
  	    + "ФайлВыбрать "
  	    + "ФайлЗанят "
  	    + "ФайлЗаписать "
  	    + "ФайлИскать "
  	    + "ФайлКопировать "
  	    + "ФайлМожноЧитать "
  	    + "ФайлОткрыть "
  	    + "ФайлПереименовать "
  	    + "ФайлПерекодировать "
  	    + "ФайлПереместить "
  	    + "ФайлПросмотреть "
  	    + "ФайлРазмер "
  	    + "ФайлСоздать "
  	    + "ФайлСсылкаСоздать "
  	    + "ФайлСуществует "
  	    + "ФайлСчитать "
  	    + "ФайлУдалить "
  	    + "ФмтSQLДат "
  	    + "ФмтДат "
  	    + "ФмтСтр "
  	    + "ФмтЧсл "
  	    + "Формат "
  	    + "ЦМассивЭлемент "
  	    + "ЦНаборДанныхРеквизит "
  	    + "ЦПодстр ";

  	  // Предопределенные переменные ==> built_in
  	  const predefined_variables =
  	    "AltState "
  	    + "Application "
  	    + "CallType "
  	    + "ComponentTokens "
  	    + "CreatedJobs "
  	    + "CreatedNotices "
  	    + "ControlState "
  	    + "DialogResult "
  	    + "Dialogs "
  	    + "EDocuments "
  	    + "EDocumentVersionSource "
  	    + "Folders "
  	    + "GlobalIDs "
  	    + "Job "
  	    + "Jobs "
  	    + "InputValue "
  	    + "LookUpReference "
  	    + "LookUpRequisiteNames "
  	    + "LookUpSearch "
  	    + "Object "
  	    + "ParentComponent "
  	    + "Processes "
  	    + "References "
  	    + "Requisite "
  	    + "ReportName "
  	    + "Reports "
  	    + "Result "
  	    + "Scripts "
  	    + "Searches "
  	    + "SelectedAttachments "
  	    + "SelectedItems "
  	    + "SelectMode "
  	    + "Sender "
  	    + "ServerEvents "
  	    + "ServiceFactory "
  	    + "ShiftState "
  	    + "SubTask "
  	    + "SystemDialogs "
  	    + "Tasks "
  	    + "Wizard "
  	    + "Wizards "
  	    + "Work "
  	    + "ВызовСпособ "
  	    + "ИмяОтчета "
  	    + "РеквЗнач ";

  	  // Интерфейсы ==> type
  	  const interfaces =
  	    "IApplication "
  	    + "IAccessRights "
  	    + "IAccountRepository "
  	    + "IAccountSelectionRestrictions "
  	    + "IAction "
  	    + "IActionList "
  	    + "IAdministrationHistoryDescription "
  	    + "IAnchors "
  	    + "IApplication "
  	    + "IArchiveInfo "
  	    + "IAttachment "
  	    + "IAttachmentList "
  	    + "ICheckListBox "
  	    + "ICheckPointedList "
  	    + "IColumn "
  	    + "IComponent "
  	    + "IComponentDescription "
  	    + "IComponentToken "
  	    + "IComponentTokenFactory "
  	    + "IComponentTokenInfo "
  	    + "ICompRecordInfo "
  	    + "IConnection "
  	    + "IContents "
  	    + "IControl "
  	    + "IControlJob "
  	    + "IControlJobInfo "
  	    + "IControlList "
  	    + "ICrypto "
  	    + "ICrypto2 "
  	    + "ICustomJob "
  	    + "ICustomJobInfo "
  	    + "ICustomListBox "
  	    + "ICustomObjectWizardStep "
  	    + "ICustomWork "
  	    + "ICustomWorkInfo "
  	    + "IDataSet "
  	    + "IDataSetAccessInfo "
  	    + "IDataSigner "
  	    + "IDateCriterion "
  	    + "IDateRequisite "
  	    + "IDateRequisiteDescription "
  	    + "IDateValue "
  	    + "IDeaAccessRights "
  	    + "IDeaObjectInfo "
  	    + "IDevelopmentComponentLock "
  	    + "IDialog "
  	    + "IDialogFactory "
  	    + "IDialogPickRequisiteItems "
  	    + "IDialogsFactory "
  	    + "IDICSFactory "
  	    + "IDocRequisite "
  	    + "IDocumentInfo "
  	    + "IDualListDialog "
  	    + "IECertificate "
  	    + "IECertificateInfo "
  	    + "IECertificates "
  	    + "IEditControl "
  	    + "IEditorForm "
  	    + "IEdmsExplorer "
  	    + "IEdmsObject "
  	    + "IEdmsObjectDescription "
  	    + "IEdmsObjectFactory "
  	    + "IEdmsObjectInfo "
  	    + "IEDocument "
  	    + "IEDocumentAccessRights "
  	    + "IEDocumentDescription "
  	    + "IEDocumentEditor "
  	    + "IEDocumentFactory "
  	    + "IEDocumentInfo "
  	    + "IEDocumentStorage "
  	    + "IEDocumentVersion "
  	    + "IEDocumentVersionListDialog "
  	    + "IEDocumentVersionSource "
  	    + "IEDocumentWizardStep "
  	    + "IEDocVerSignature "
  	    + "IEDocVersionState "
  	    + "IEnabledMode "
  	    + "IEncodeProvider "
  	    + "IEncrypter "
  	    + "IEvent "
  	    + "IEventList "
  	    + "IException "
  	    + "IExternalEvents "
  	    + "IExternalHandler "
  	    + "IFactory "
  	    + "IField "
  	    + "IFileDialog "
  	    + "IFolder "
  	    + "IFolderDescription "
  	    + "IFolderDialog "
  	    + "IFolderFactory "
  	    + "IFolderInfo "
  	    + "IForEach "
  	    + "IForm "
  	    + "IFormTitle "
  	    + "IFormWizardStep "
  	    + "IGlobalIDFactory "
  	    + "IGlobalIDInfo "
  	    + "IGrid "
  	    + "IHasher "
  	    + "IHistoryDescription "
  	    + "IHyperLinkControl "
  	    + "IImageButton "
  	    + "IImageControl "
  	    + "IInnerPanel "
  	    + "IInplaceHint "
  	    + "IIntegerCriterion "
  	    + "IIntegerList "
  	    + "IIntegerRequisite "
  	    + "IIntegerValue "
  	    + "IISBLEditorForm "
  	    + "IJob "
  	    + "IJobDescription "
  	    + "IJobFactory "
  	    + "IJobForm "
  	    + "IJobInfo "
  	    + "ILabelControl "
  	    + "ILargeIntegerCriterion "
  	    + "ILargeIntegerRequisite "
  	    + "ILargeIntegerValue "
  	    + "ILicenseInfo "
  	    + "ILifeCycleStage "
  	    + "IList "
  	    + "IListBox "
  	    + "ILocalIDInfo "
  	    + "ILocalization "
  	    + "ILock "
  	    + "IMemoryDataSet "
  	    + "IMessagingFactory "
  	    + "IMetadataRepository "
  	    + "INotice "
  	    + "INoticeInfo "
  	    + "INumericCriterion "
  	    + "INumericRequisite "
  	    + "INumericValue "
  	    + "IObject "
  	    + "IObjectDescription "
  	    + "IObjectImporter "
  	    + "IObjectInfo "
  	    + "IObserver "
  	    + "IPanelGroup "
  	    + "IPickCriterion "
  	    + "IPickProperty "
  	    + "IPickRequisite "
  	    + "IPickRequisiteDescription "
  	    + "IPickRequisiteItem "
  	    + "IPickRequisiteItems "
  	    + "IPickValue "
  	    + "IPrivilege "
  	    + "IPrivilegeList "
  	    + "IProcess "
  	    + "IProcessFactory "
  	    + "IProcessMessage "
  	    + "IProgress "
  	    + "IProperty "
  	    + "IPropertyChangeEvent "
  	    + "IQuery "
  	    + "IReference "
  	    + "IReferenceCriterion "
  	    + "IReferenceEnabledMode "
  	    + "IReferenceFactory "
  	    + "IReferenceHistoryDescription "
  	    + "IReferenceInfo "
  	    + "IReferenceRecordCardWizardStep "
  	    + "IReferenceRequisiteDescription "
  	    + "IReferencesFactory "
  	    + "IReferenceValue "
  	    + "IRefRequisite "
  	    + "IReport "
  	    + "IReportFactory "
  	    + "IRequisite "
  	    + "IRequisiteDescription "
  	    + "IRequisiteDescriptionList "
  	    + "IRequisiteFactory "
  	    + "IRichEdit "
  	    + "IRouteStep "
  	    + "IRule "
  	    + "IRuleList "
  	    + "ISchemeBlock "
  	    + "IScript "
  	    + "IScriptFactory "
  	    + "ISearchCriteria "
  	    + "ISearchCriterion "
  	    + "ISearchDescription "
  	    + "ISearchFactory "
  	    + "ISearchFolderInfo "
  	    + "ISearchForObjectDescription "
  	    + "ISearchResultRestrictions "
  	    + "ISecuredContext "
  	    + "ISelectDialog "
  	    + "IServerEvent "
  	    + "IServerEventFactory "
  	    + "IServiceDialog "
  	    + "IServiceFactory "
  	    + "ISignature "
  	    + "ISignProvider "
  	    + "ISignProvider2 "
  	    + "ISignProvider3 "
  	    + "ISimpleCriterion "
  	    + "IStringCriterion "
  	    + "IStringList "
  	    + "IStringRequisite "
  	    + "IStringRequisiteDescription "
  	    + "IStringValue "
  	    + "ISystemDialogsFactory "
  	    + "ISystemInfo "
  	    + "ITabSheet "
  	    + "ITask "
  	    + "ITaskAbortReasonInfo "
  	    + "ITaskCardWizardStep "
  	    + "ITaskDescription "
  	    + "ITaskFactory "
  	    + "ITaskInfo "
  	    + "ITaskRoute "
  	    + "ITextCriterion "
  	    + "ITextRequisite "
  	    + "ITextValue "
  	    + "ITreeListSelectDialog "
  	    + "IUser "
  	    + "IUserList "
  	    + "IValue "
  	    + "IView "
  	    + "IWebBrowserControl "
  	    + "IWizard "
  	    + "IWizardAction "
  	    + "IWizardFactory "
  	    + "IWizardFormElement "
  	    + "IWizardParam "
  	    + "IWizardPickParam "
  	    + "IWizardReferenceParam "
  	    + "IWizardStep "
  	    + "IWorkAccessRights "
  	    + "IWorkDescription "
  	    + "IWorkflowAskableParam "
  	    + "IWorkflowAskableParams "
  	    + "IWorkflowBlock "
  	    + "IWorkflowBlockResult "
  	    + "IWorkflowEnabledMode "
  	    + "IWorkflowParam "
  	    + "IWorkflowPickParam "
  	    + "IWorkflowReferenceParam "
  	    + "IWorkState "
  	    + "IWorkTreeCustomNode "
  	    + "IWorkTreeJobNode "
  	    + "IWorkTreeTaskNode "
  	    + "IXMLEditorForm "
  	    + "SBCrypto ";

  	  // built_in : встроенные или библиотечные объекты (константы, перечисления)
  	  const BUILTIN = CONSTANTS + ENUMS;

  	  // class: встроенные наборы значений, системные объекты, фабрики
  	  const CLASS = predefined_variables;

  	  // literal : примитивные типы
  	  const LITERAL = "null true false nil ";

  	  // number : числа
  	  const NUMBERS = {
  	    className: "number",
  	    begin: hljs.NUMBER_RE,
  	    relevance: 0
  	  };

  	  // string : строки
  	  const STRINGS = {
  	    className: "string",
  	    variants: [
  	      {
  	        begin: '"',
  	        end: '"'
  	      },
  	      {
  	        begin: "'",
  	        end: "'"
  	      }
  	    ]
  	  };

  	  // Токены
  	  const DOCTAGS = {
  	    className: "doctag",
  	    begin: "\\b(?:TODO|DONE|BEGIN|END|STUB|CHG|FIXME|NOTE|BUG|XXX)\\b",
  	    relevance: 0
  	  };

  	  // Однострочный комментарий
  	  const ISBL_LINE_COMMENT_MODE = {
  	    className: "comment",
  	    begin: "//",
  	    end: "$",
  	    relevance: 0,
  	    contains: [
  	      hljs.PHRASAL_WORDS_MODE,
  	      DOCTAGS
  	    ]
  	  };

  	  // Многострочный комментарий
  	  const ISBL_BLOCK_COMMENT_MODE = {
  	    className: "comment",
  	    begin: "/\\*",
  	    end: "\\*/",
  	    relevance: 0,
  	    contains: [
  	      hljs.PHRASAL_WORDS_MODE,
  	      DOCTAGS
  	    ]
  	  };

  	  // comment : комментарии
  	  const COMMENTS = { variants: [
  	    ISBL_LINE_COMMENT_MODE,
  	    ISBL_BLOCK_COMMENT_MODE
  	  ] };

  	  // keywords : ключевые слова
  	  const KEYWORDS = {
  	    $pattern: UNDERSCORE_IDENT_RE,
  	    keyword: KEYWORD,
  	    built_in: BUILTIN,
  	    class: CLASS,
  	    literal: LITERAL
  	  };

  	  // methods : методы
  	  const METHODS = {
  	    begin: "\\.\\s*" + hljs.UNDERSCORE_IDENT_RE,
  	    keywords: KEYWORDS,
  	    relevance: 0
  	  };

  	  // type : встроенные типы
  	  const TYPES = {
  	    className: "type",
  	    begin: ":[ \\t]*(" + interfaces.trim().replace(/\s/g, "|") + ")",
  	    end: "[ \\t]*=",
  	    excludeEnd: true
  	  };

  	  // variables : переменные
  	  const VARIABLES = {
  	    className: "variable",
  	    keywords: KEYWORDS,
  	    begin: UNDERSCORE_IDENT_RE,
  	    relevance: 0,
  	    contains: [
  	      TYPES,
  	      METHODS
  	    ]
  	  };

  	  // Имена функций
  	  const FUNCTION_TITLE = FUNCTION_NAME_IDENT_RE + "\\(";

  	  const TITLE_MODE = {
  	    className: "title",
  	    keywords: {
  	      $pattern: UNDERSCORE_IDENT_RE,
  	      built_in: system_functions
  	    },
  	    begin: FUNCTION_TITLE,
  	    end: "\\(",
  	    returnBegin: true,
  	    excludeEnd: true
  	  };

  	  // function : функции
  	  const FUNCTIONS = {
  	    className: "function",
  	    begin: FUNCTION_TITLE,
  	    end: "\\)$",
  	    returnBegin: true,
  	    keywords: KEYWORDS,
  	    illegal: "[\\[\\]\\|\\$\\?%,~#@]",
  	    contains: [
  	      TITLE_MODE,
  	      METHODS,
  	      VARIABLES,
  	      STRINGS,
  	      NUMBERS,
  	      COMMENTS
  	    ]
  	  };

  	  return {
  	    name: 'ISBL',
  	    case_insensitive: true,
  	    keywords: KEYWORDS,
  	    illegal: "\\$|\\?|%|,|;$|~|#|@|</",
  	    contains: [
  	      FUNCTIONS,
  	      TYPES,
  	      METHODS,
  	      VARIABLES,
  	      STRINGS,
  	      NUMBERS,
  	      COMMENTS
  	    ]
  	  };
  	}

  	isbl_1 = isbl;
  	return isbl_1;
  }

  var java_1;
  var hasRequiredJava;

  function requireJava () {
  	if (hasRequiredJava) return java_1;
  	hasRequiredJava = 1;
  	// https://docs.oracle.com/javase/specs/jls/se15/html/jls-3.html#jls-3.10
  	var decimalDigits = '[0-9](_*[0-9])*';
  	var frac = `\\.(${decimalDigits})`;
  	var hexDigits = '[0-9a-fA-F](_*[0-9a-fA-F])*';
  	var NUMERIC = {
  	  className: 'number',
  	  variants: [
  	    // DecimalFloatingPointLiteral
  	    // including ExponentPart
  	    { begin: `(\\b(${decimalDigits})((${frac})|\\.)?|(${frac}))` +
  	      `[eE][+-]?(${decimalDigits})[fFdD]?\\b` },
  	    // excluding ExponentPart
  	    { begin: `\\b(${decimalDigits})((${frac})[fFdD]?\\b|\\.([fFdD]\\b)?)` },
  	    { begin: `(${frac})[fFdD]?\\b` },
  	    { begin: `\\b(${decimalDigits})[fFdD]\\b` },

  	    // HexadecimalFloatingPointLiteral
  	    { begin: `\\b0[xX]((${hexDigits})\\.?|(${hexDigits})?\\.(${hexDigits}))` +
  	      `[pP][+-]?(${decimalDigits})[fFdD]?\\b` },

  	    // DecimalIntegerLiteral
  	    { begin: '\\b(0|[1-9](_*[0-9])*)[lL]?\\b' },

  	    // HexIntegerLiteral
  	    { begin: `\\b0[xX](${hexDigits})[lL]?\\b` },

  	    // OctalIntegerLiteral
  	    { begin: '\\b0(_*[0-7])*[lL]?\\b' },

  	    // BinaryIntegerLiteral
  	    { begin: '\\b0[bB][01](_*[01])*[lL]?\\b' },
  	  ],
  	  relevance: 0
  	};

  	/*
  	Language: Java
  	Author: Vsevolod Solovyov <vsevolod.solovyov@gmail.com>
  	Category: common, enterprise
  	Website: https://www.java.com/
  	*/

  	/**
  	 * Allows recursive regex expressions to a given depth
  	 *
  	 * ie: recurRegex("(abc~~~)", /~~~/g, 2) becomes:
  	 * (abc(abc(abc)))
  	 *
  	 * @param {string} re
  	 * @param {RegExp} substitution (should be a g mode regex)
  	 * @param {number} depth
  	 * @returns {string}``
  	 */
  	function recurRegex(re, substitution, depth) {
  	  if (depth === -1) return "";

  	  return re.replace(substitution, _ => {
  	    return recurRegex(re, substitution, depth - 1);
  	  });
  	}

  	/** @type LanguageFn */
  	function java(hljs) {
  	  const regex = hljs.regex;
  	  const JAVA_IDENT_RE = '[\u00C0-\u02B8a-zA-Z_$][\u00C0-\u02B8a-zA-Z_$0-9]*';
  	  const GENERIC_IDENT_RE = JAVA_IDENT_RE
  	    + recurRegex('(?:<' + JAVA_IDENT_RE + '~~~(?:\\s*,\\s*' + JAVA_IDENT_RE + '~~~)*>)?', /~~~/g, 2);
  	  const MAIN_KEYWORDS = [
  	    'synchronized',
  	    'abstract',
  	    'private',
  	    'var',
  	    'static',
  	    'if',
  	    'const ',
  	    'for',
  	    'while',
  	    'strictfp',
  	    'finally',
  	    'protected',
  	    'import',
  	    'native',
  	    'final',
  	    'void',
  	    'enum',
  	    'else',
  	    'break',
  	    'transient',
  	    'catch',
  	    'instanceof',
  	    'volatile',
  	    'case',
  	    'assert',
  	    'package',
  	    'default',
  	    'public',
  	    'try',
  	    'switch',
  	    'continue',
  	    'throws',
  	    'protected',
  	    'public',
  	    'private',
  	    'module',
  	    'requires',
  	    'exports',
  	    'do',
  	    'sealed',
  	    'yield',
  	    'permits'
  	  ];

  	  const BUILT_INS = [
  	    'super',
  	    'this'
  	  ];

  	  const LITERALS = [
  	    'false',
  	    'true',
  	    'null'
  	  ];

  	  const TYPES = [
  	    'char',
  	    'boolean',
  	    'long',
  	    'float',
  	    'int',
  	    'byte',
  	    'short',
  	    'double'
  	  ];

  	  const KEYWORDS = {
  	    keyword: MAIN_KEYWORDS,
  	    literal: LITERALS,
  	    type: TYPES,
  	    built_in: BUILT_INS
  	  };

  	  const ANNOTATION = {
  	    className: 'meta',
  	    begin: '@' + JAVA_IDENT_RE,
  	    contains: [
  	      {
  	        begin: /\(/,
  	        end: /\)/,
  	        contains: [ "self" ] // allow nested () inside our annotation
  	      }
  	    ]
  	  };
  	  const PARAMS = {
  	    className: 'params',
  	    begin: /\(/,
  	    end: /\)/,
  	    keywords: KEYWORDS,
  	    relevance: 0,
  	    contains: [ hljs.C_BLOCK_COMMENT_MODE ],
  	    endsParent: true
  	  };

  	  return {
  	    name: 'Java',
  	    aliases: [ 'jsp' ],
  	    keywords: KEYWORDS,
  	    illegal: /<\/|#/,
  	    contains: [
  	      hljs.COMMENT(
  	        '/\\*\\*',
  	        '\\*/',
  	        {
  	          relevance: 0,
  	          contains: [
  	            {
  	              // eat up @'s in emails to prevent them to be recognized as doctags
  	              begin: /\w+@/,
  	              relevance: 0
  	            },
  	            {
  	              className: 'doctag',
  	              begin: '@[A-Za-z]+'
  	            }
  	          ]
  	        }
  	      ),
  	      // relevance boost
  	      {
  	        begin: /import java\.[a-z]+\./,
  	        keywords: "import",
  	        relevance: 2
  	      },
  	      hljs.C_LINE_COMMENT_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE,
  	      {
  	        begin: /"""/,
  	        end: /"""/,
  	        className: "string",
  	        contains: [ hljs.BACKSLASH_ESCAPE ]
  	      },
  	      hljs.APOS_STRING_MODE,
  	      hljs.QUOTE_STRING_MODE,
  	      {
  	        match: [
  	          /\b(?:class|interface|enum|extends|implements|new)/,
  	          /\s+/,
  	          JAVA_IDENT_RE
  	        ],
  	        className: {
  	          1: "keyword",
  	          3: "title.class"
  	        }
  	      },
  	      {
  	        // Exceptions for hyphenated keywords
  	        match: /non-sealed/,
  	        scope: "keyword"
  	      },
  	      {
  	        begin: [
  	          regex.concat(/(?!else)/, JAVA_IDENT_RE),
  	          /\s+/,
  	          JAVA_IDENT_RE,
  	          /\s+/,
  	          /=(?!=)/
  	        ],
  	        className: {
  	          1: "type",
  	          3: "variable",
  	          5: "operator"
  	        }
  	      },
  	      {
  	        begin: [
  	          /record/,
  	          /\s+/,
  	          JAVA_IDENT_RE
  	        ],
  	        className: {
  	          1: "keyword",
  	          3: "title.class"
  	        },
  	        contains: [
  	          PARAMS,
  	          hljs.C_LINE_COMMENT_MODE,
  	          hljs.C_BLOCK_COMMENT_MODE
  	        ]
  	      },
  	      {
  	        // Expression keywords prevent 'keyword Name(...)' from being
  	        // recognized as a function definition
  	        beginKeywords: 'new throw return else',
  	        relevance: 0
  	      },
  	      {
  	        begin: [
  	          '(?:' + GENERIC_IDENT_RE + '\\s+)',
  	          hljs.UNDERSCORE_IDENT_RE,
  	          /\s*(?=\()/
  	        ],
  	        className: { 2: "title.function" },
  	        keywords: KEYWORDS,
  	        contains: [
  	          {
  	            className: 'params',
  	            begin: /\(/,
  	            end: /\)/,
  	            keywords: KEYWORDS,
  	            relevance: 0,
  	            contains: [
  	              ANNOTATION,
  	              hljs.APOS_STRING_MODE,
  	              hljs.QUOTE_STRING_MODE,
  	              NUMERIC,
  	              hljs.C_BLOCK_COMMENT_MODE
  	            ]
  	          },
  	          hljs.C_LINE_COMMENT_MODE,
  	          hljs.C_BLOCK_COMMENT_MODE
  	        ]
  	      },
  	      NUMERIC,
  	      ANNOTATION
  	    ]
  	  };
  	}

  	java_1 = java;
  	return java_1;
  }

  var javascript_1;
  var hasRequiredJavascript;

  function requireJavascript () {
  	if (hasRequiredJavascript) return javascript_1;
  	hasRequiredJavascript = 1;
  	const IDENT_RE = '[A-Za-z$_][0-9A-Za-z$_]*';
  	const KEYWORDS = [
  	  "as", // for exports
  	  "in",
  	  "of",
  	  "if",
  	  "for",
  	  "while",
  	  "finally",
  	  "var",
  	  "new",
  	  "function",
  	  "do",
  	  "return",
  	  "void",
  	  "else",
  	  "break",
  	  "catch",
  	  "instanceof",
  	  "with",
  	  "throw",
  	  "case",
  	  "default",
  	  "try",
  	  "switch",
  	  "continue",
  	  "typeof",
  	  "delete",
  	  "let",
  	  "yield",
  	  "const",
  	  "class",
  	  // JS handles these with a special rule
  	  // "get",
  	  // "set",
  	  "debugger",
  	  "async",
  	  "await",
  	  "static",
  	  "import",
  	  "from",
  	  "export",
  	  "extends"
  	];
  	const LITERALS = [
  	  "true",
  	  "false",
  	  "null",
  	  "undefined",
  	  "NaN",
  	  "Infinity"
  	];

  	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects
  	const TYPES = [
  	  // Fundamental objects
  	  "Object",
  	  "Function",
  	  "Boolean",
  	  "Symbol",
  	  // numbers and dates
  	  "Math",
  	  "Date",
  	  "Number",
  	  "BigInt",
  	  // text
  	  "String",
  	  "RegExp",
  	  // Indexed collections
  	  "Array",
  	  "Float32Array",
  	  "Float64Array",
  	  "Int8Array",
  	  "Uint8Array",
  	  "Uint8ClampedArray",
  	  "Int16Array",
  	  "Int32Array",
  	  "Uint16Array",
  	  "Uint32Array",
  	  "BigInt64Array",
  	  "BigUint64Array",
  	  // Keyed collections
  	  "Set",
  	  "Map",
  	  "WeakSet",
  	  "WeakMap",
  	  // Structured data
  	  "ArrayBuffer",
  	  "SharedArrayBuffer",
  	  "Atomics",
  	  "DataView",
  	  "JSON",
  	  // Control abstraction objects
  	  "Promise",
  	  "Generator",
  	  "GeneratorFunction",
  	  "AsyncFunction",
  	  // Reflection
  	  "Reflect",
  	  "Proxy",
  	  // Internationalization
  	  "Intl",
  	  // WebAssembly
  	  "WebAssembly"
  	];

  	const ERROR_TYPES = [
  	  "Error",
  	  "EvalError",
  	  "InternalError",
  	  "RangeError",
  	  "ReferenceError",
  	  "SyntaxError",
  	  "TypeError",
  	  "URIError"
  	];

  	const BUILT_IN_GLOBALS = [
  	  "setInterval",
  	  "setTimeout",
  	  "clearInterval",
  	  "clearTimeout",

  	  "require",
  	  "exports",

  	  "eval",
  	  "isFinite",
  	  "isNaN",
  	  "parseFloat",
  	  "parseInt",
  	  "decodeURI",
  	  "decodeURIComponent",
  	  "encodeURI",
  	  "encodeURIComponent",
  	  "escape",
  	  "unescape"
  	];

  	const BUILT_IN_VARIABLES = [
  	  "arguments",
  	  "this",
  	  "super",
  	  "console",
  	  "window",
  	  "document",
  	  "localStorage",
  	  "sessionStorage",
  	  "module",
  	  "global" // Node.js
  	];

  	const BUILT_INS = [].concat(
  	  BUILT_IN_GLOBALS,
  	  TYPES,
  	  ERROR_TYPES
  	);

  	/*
  	Language: JavaScript
  	Description: JavaScript (JS) is a lightweight, interpreted, or just-in-time compiled programming language with first-class functions.
  	Category: common, scripting, web
  	Website: https://developer.mozilla.org/en-US/docs/Web/JavaScript
  	*/

  	/** @type LanguageFn */
  	function javascript(hljs) {
  	  const regex = hljs.regex;
  	  /**
  	   * Takes a string like "<Booger" and checks to see
  	   * if we can find a matching "</Booger" later in the
  	   * content.
  	   * @param {RegExpMatchArray} match
  	   * @param {{after:number}} param1
  	   */
  	  const hasClosingTag = (match, { after }) => {
  	    const tag = "</" + match[0].slice(1);
  	    const pos = match.input.indexOf(tag, after);
  	    return pos !== -1;
  	  };

  	  const IDENT_RE$1 = IDENT_RE;
  	  const FRAGMENT = {
  	    begin: '<>',
  	    end: '</>'
  	  };
  	  // to avoid some special cases inside isTrulyOpeningTag
  	  const XML_SELF_CLOSING = /<[A-Za-z0-9\\._:-]+\s*\/>/;
  	  const XML_TAG = {
  	    begin: /<[A-Za-z0-9\\._:-]+/,
  	    end: /\/[A-Za-z0-9\\._:-]+>|\/>/,
  	    /**
  	     * @param {RegExpMatchArray} match
  	     * @param {CallbackResponse} response
  	     */
  	    isTrulyOpeningTag: (match, response) => {
  	      const afterMatchIndex = match[0].length + match.index;
  	      const nextChar = match.input[afterMatchIndex];
  	      if (
  	        // HTML should not include another raw `<` inside a tag
  	        // nested type?
  	        // `<Array<Array<number>>`, etc.
  	        nextChar === "<" ||
  	        // the , gives away that this is not HTML
  	        // `<T, A extends keyof T, V>`
  	        nextChar === ","
  	        ) {
  	        response.ignoreMatch();
  	        return;
  	      }

  	      // `<something>`
  	      // Quite possibly a tag, lets look for a matching closing tag...
  	      if (nextChar === ">") {
  	        // if we cannot find a matching closing tag, then we
  	        // will ignore it
  	        if (!hasClosingTag(match, { after: afterMatchIndex })) {
  	          response.ignoreMatch();
  	        }
  	      }

  	      // `<blah />` (self-closing)
  	      // handled by simpleSelfClosing rule

  	      let m;
  	      const afterMatch = match.input.substring(afterMatchIndex);

  	      // some more template typing stuff
  	      //  <T = any>(key?: string) => Modify<
  	      if ((m = afterMatch.match(/^\s*=/))) {
  	        response.ignoreMatch();
  	        return;
  	      }

  	      // `<From extends string>`
  	      // technically this could be HTML, but it smells like a type
  	      // NOTE: This is ugh, but added specifically for https://github.com/highlightjs/highlight.js/issues/3276
  	      if ((m = afterMatch.match(/^\s+extends\s+/))) {
  	        if (m.index === 0) {
  	          response.ignoreMatch();
  	          // eslint-disable-next-line no-useless-return
  	          return;
  	        }
  	      }
  	    }
  	  };
  	  const KEYWORDS$1 = {
  	    $pattern: IDENT_RE,
  	    keyword: KEYWORDS,
  	    literal: LITERALS,
  	    built_in: BUILT_INS,
  	    "variable.language": BUILT_IN_VARIABLES
  	  };

  	  // https://tc39.es/ecma262/#sec-literals-numeric-literals
  	  const decimalDigits = '[0-9](_?[0-9])*';
  	  const frac = `\\.(${decimalDigits})`;
  	  // DecimalIntegerLiteral, including Annex B NonOctalDecimalIntegerLiteral
  	  // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals
  	  const decimalInteger = `0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*`;
  	  const NUMBER = {
  	    className: 'number',
  	    variants: [
  	      // DecimalLiteral
  	      { begin: `(\\b(${decimalInteger})((${frac})|\\.)?|(${frac}))` +
  	        `[eE][+-]?(${decimalDigits})\\b` },
  	      { begin: `\\b(${decimalInteger})\\b((${frac})\\b|\\.)?|(${frac})\\b` },

  	      // DecimalBigIntegerLiteral
  	      { begin: `\\b(0|[1-9](_?[0-9])*)n\\b` },

  	      // NonDecimalIntegerLiteral
  	      { begin: "\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\b" },
  	      { begin: "\\b0[bB][0-1](_?[0-1])*n?\\b" },
  	      { begin: "\\b0[oO][0-7](_?[0-7])*n?\\b" },

  	      // LegacyOctalIntegerLiteral (does not include underscore separators)
  	      // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals
  	      { begin: "\\b0[0-7]+n?\\b" },
  	    ],
  	    relevance: 0
  	  };

  	  const SUBST = {
  	    className: 'subst',
  	    begin: '\\$\\{',
  	    end: '\\}',
  	    keywords: KEYWORDS$1,
  	    contains: [] // defined later
  	  };
  	  const HTML_TEMPLATE = {
  	    begin: 'html`',
  	    end: '',
  	    starts: {
  	      end: '`',
  	      returnEnd: false,
  	      contains: [
  	        hljs.BACKSLASH_ESCAPE,
  	        SUBST
  	      ],
  	      subLanguage: 'xml'
  	    }
  	  };
  	  const CSS_TEMPLATE = {
  	    begin: 'css`',
  	    end: '',
  	    starts: {
  	      end: '`',
  	      returnEnd: false,
  	      contains: [
  	        hljs.BACKSLASH_ESCAPE,
  	        SUBST
  	      ],
  	      subLanguage: 'css'
  	    }
  	  };
  	  const GRAPHQL_TEMPLATE = {
  	    begin: 'gql`',
  	    end: '',
  	    starts: {
  	      end: '`',
  	      returnEnd: false,
  	      contains: [
  	        hljs.BACKSLASH_ESCAPE,
  	        SUBST
  	      ],
  	      subLanguage: 'graphql'
  	    }
  	  };
  	  const TEMPLATE_STRING = {
  	    className: 'string',
  	    begin: '`',
  	    end: '`',
  	    contains: [
  	      hljs.BACKSLASH_ESCAPE,
  	      SUBST
  	    ]
  	  };
  	  const JSDOC_COMMENT = hljs.COMMENT(
  	    /\/\*\*(?!\/)/,
  	    '\\*/',
  	    {
  	      relevance: 0,
  	      contains: [
  	        {
  	          begin: '(?=@[A-Za-z]+)',
  	          relevance: 0,
  	          contains: [
  	            {
  	              className: 'doctag',
  	              begin: '@[A-Za-z]+'
  	            },
  	            {
  	              className: 'type',
  	              begin: '\\{',
  	              end: '\\}',
  	              excludeEnd: true,
  	              excludeBegin: true,
  	              relevance: 0
  	            },
  	            {
  	              className: 'variable',
  	              begin: IDENT_RE$1 + '(?=\\s*(-)|$)',
  	              endsParent: true,
  	              relevance: 0
  	            },
  	            // eat spaces (not newlines) so we can find
  	            // types or variables
  	            {
  	              begin: /(?=[^\n])\s/,
  	              relevance: 0
  	            }
  	          ]
  	        }
  	      ]
  	    }
  	  );
  	  const COMMENT = {
  	    className: "comment",
  	    variants: [
  	      JSDOC_COMMENT,
  	      hljs.C_BLOCK_COMMENT_MODE,
  	      hljs.C_LINE_COMMENT_MODE
  	    ]
  	  };
  	  const SUBST_INTERNALS = [
  	    hljs.APOS_STRING_MODE,
  	    hljs.QUOTE_STRING_MODE,
  	    HTML_TEMPLATE,
  	    CSS_TEMPLATE,
  	    GRAPHQL_TEMPLATE,
  	    TEMPLATE_STRING,
  	    // Skip numbers when they are part of a variable name
  	    { match: /\$\d+/ },
  	    NUMBER,
  	    // This is intentional:
  	    // See https://github.com/highlightjs/highlight.js/issues/3288
  	    // hljs.REGEXP_MODE
  	  ];
  	  SUBST.contains = SUBST_INTERNALS
  	    .concat({
  	      // we need to pair up {} inside our subst to prevent
  	      // it from ending too early by matching another }
  	      begin: /\{/,
  	      end: /\}/,
  	      keywords: KEYWORDS$1,
  	      contains: [
  	        "self"
  	      ].concat(SUBST_INTERNALS)
  	    });
  	  const SUBST_AND_COMMENTS = [].concat(COMMENT, SUBST.contains);
  	  const PARAMS_CONTAINS = SUBST_AND_COMMENTS.concat([
  	    // eat recursive parens in sub expressions
  	    {
  	      begin: /\(/,
  	      end: /\)/,
  	      keywords: KEYWORDS$1,
  	      contains: ["self"].concat(SUBST_AND_COMMENTS)
  	    }
  	  ]);
  	  const PARAMS = {
  	    className: 'params',
  	    begin: /\(/,
  	    end: /\)/,
  	    excludeBegin: true,
  	    excludeEnd: true,
  	    keywords: KEYWORDS$1,
  	    contains: PARAMS_CONTAINS
  	  };

  	  // ES6 classes
  	  const CLASS_OR_EXTENDS = {
  	    variants: [
  	      // class Car extends vehicle
  	      {
  	        match: [
  	          /class/,
  	          /\s+/,
  	          IDENT_RE$1,
  	          /\s+/,
  	          /extends/,
  	          /\s+/,
  	          regex.concat(IDENT_RE$1, "(", regex.concat(/\./, IDENT_RE$1), ")*")
  	        ],
  	        scope: {
  	          1: "keyword",
  	          3: "title.class",
  	          5: "keyword",
  	          7: "title.class.inherited"
  	        }
  	      },
  	      // class Car
  	      {
  	        match: [
  	          /class/,
  	          /\s+/,
  	          IDENT_RE$1
  	        ],
  	        scope: {
  	          1: "keyword",
  	          3: "title.class"
  	        }
  	      },

  	    ]
  	  };

  	  const CLASS_REFERENCE = {
  	    relevance: 0,
  	    match:
  	    regex.either(
  	      // Hard coded exceptions
  	      /\bJSON/,
  	      // Float32Array, OutT
  	      /\b[A-Z][a-z]+([A-Z][a-z]*|\d)*/,
  	      // CSSFactory, CSSFactoryT
  	      /\b[A-Z]{2,}([A-Z][a-z]+|\d)+([A-Z][a-z]*)*/,
  	      // FPs, FPsT
  	      /\b[A-Z]{2,}[a-z]+([A-Z][a-z]+|\d)*([A-Z][a-z]*)*/,
  	      // P
  	      // single letters are not highlighted
  	      // BLAH
  	      // this will be flagged as a UPPER_CASE_CONSTANT instead
  	    ),
  	    className: "title.class",
  	    keywords: {
  	      _: [
  	        // se we still get relevance credit for JS library classes
  	        ...TYPES,
  	        ...ERROR_TYPES
  	      ]
  	    }
  	  };

  	  const USE_STRICT = {
  	    label: "use_strict",
  	    className: 'meta',
  	    relevance: 10,
  	    begin: /^\s*['"]use (strict|asm)['"]/
  	  };

  	  const FUNCTION_DEFINITION = {
  	    variants: [
  	      {
  	        match: [
  	          /function/,
  	          /\s+/,
  	          IDENT_RE$1,
  	          /(?=\s*\()/
  	        ]
  	      },
  	      // anonymous function
  	      {
  	        match: [
  	          /function/,
  	          /\s*(?=\()/
  	        ]
  	      }
  	    ],
  	    className: {
  	      1: "keyword",
  	      3: "title.function"
  	    },
  	    label: "func.def",
  	    contains: [ PARAMS ],
  	    illegal: /%/
  	  };

  	  const UPPER_CASE_CONSTANT = {
  	    relevance: 0,
  	    match: /\b[A-Z][A-Z_0-9]+\b/,
  	    className: "variable.constant"
  	  };

  	  function noneOf(list) {
  	    return regex.concat("(?!", list.join("|"), ")");
  	  }

  	  const FUNCTION_CALL = {
  	    match: regex.concat(
  	      /\b/,
  	      noneOf([
  	        ...BUILT_IN_GLOBALS,
  	        "super",
  	        "import"
  	      ]),
  	      IDENT_RE$1, regex.lookahead(/\(/)),
  	    className: "title.function",
  	    relevance: 0
  	  };

  	  const PROPERTY_ACCESS = {
  	    begin: regex.concat(/\./, regex.lookahead(
  	      regex.concat(IDENT_RE$1, /(?![0-9A-Za-z$_(])/)
  	    )),
  	    end: IDENT_RE$1,
  	    excludeBegin: true,
  	    keywords: "prototype",
  	    className: "property",
  	    relevance: 0
  	  };

  	  const GETTER_OR_SETTER = {
  	    match: [
  	      /get|set/,
  	      /\s+/,
  	      IDENT_RE$1,
  	      /(?=\()/
  	    ],
  	    className: {
  	      1: "keyword",
  	      3: "title.function"
  	    },
  	    contains: [
  	      { // eat to avoid empty params
  	        begin: /\(\)/
  	      },
  	      PARAMS
  	    ]
  	  };

  	  const FUNC_LEAD_IN_RE = '(\\(' +
  	    '[^()]*(\\(' +
  	    '[^()]*(\\(' +
  	    '[^()]*' +
  	    '\\)[^()]*)*' +
  	    '\\)[^()]*)*' +
  	    '\\)|' + hljs.UNDERSCORE_IDENT_RE + ')\\s*=>';

  	  const FUNCTION_VARIABLE = {
  	    match: [
  	      /const|var|let/, /\s+/,
  	      IDENT_RE$1, /\s*/,
  	      /=\s*/,
  	      /(async\s*)?/, // async is optional
  	      regex.lookahead(FUNC_LEAD_IN_RE)
  	    ],
  	    keywords: "async",
  	    className: {
  	      1: "keyword",
  	      3: "title.function"
  	    },
  	    contains: [
  	      PARAMS
  	    ]
  	  };

  	  return {
  	    name: 'JavaScript',
  	    aliases: ['js', 'jsx', 'mjs', 'cjs'],
  	    keywords: KEYWORDS$1,
  	    // this will be extended by TypeScript
  	    exports: { PARAMS_CONTAINS, CLASS_REFERENCE },
  	    illegal: /#(?![$_A-z])/,
  	    contains: [
  	      hljs.SHEBANG({
  	        label: "shebang",
  	        binary: "node",
  	        relevance: 5
  	      }),
  	      USE_STRICT,
  	      hljs.APOS_STRING_MODE,
  	      hljs.QUOTE_STRING_MODE,
  	      HTML_TEMPLATE,
  	      CSS_TEMPLATE,
  	      GRAPHQL_TEMPLATE,
  	      TEMPLATE_STRING,
  	      COMMENT,
  	      // Skip numbers when they are part of a variable name
  	      { match: /\$\d+/ },
  	      NUMBER,
  	      CLASS_REFERENCE,
  	      {
  	        className: 'attr',
  	        begin: IDENT_RE$1 + regex.lookahead(':'),
  	        relevance: 0
  	      },
  	      FUNCTION_VARIABLE,
  	      { // "value" container
  	        begin: '(' + hljs.RE_STARTERS_RE + '|\\b(case|return|throw)\\b)\\s*',
  	        keywords: 'return throw case',
  	        relevance: 0,
  	        contains: [
  	          COMMENT,
  	          hljs.REGEXP_MODE,
  	          {
  	            className: 'function',
  	            // we have to count the parens to make sure we actually have the
  	            // correct bounding ( ) before the =>.  There could be any number of
  	            // sub-expressions inside also surrounded by parens.
  	            begin: FUNC_LEAD_IN_RE,
  	            returnBegin: true,
  	            end: '\\s*=>',
  	            contains: [
  	              {
  	                className: 'params',
  	                variants: [
  	                  {
  	                    begin: hljs.UNDERSCORE_IDENT_RE,
  	                    relevance: 0
  	                  },
  	                  {
  	                    className: null,
  	                    begin: /\(\s*\)/,
  	                    skip: true
  	                  },
  	                  {
  	                    begin: /\(/,
  	                    end: /\)/,
  	                    excludeBegin: true,
  	                    excludeEnd: true,
  	                    keywords: KEYWORDS$1,
  	                    contains: PARAMS_CONTAINS
  	                  }
  	                ]
  	              }
  	            ]
  	          },
  	          { // could be a comma delimited list of params to a function call
  	            begin: /,/,
  	            relevance: 0
  	          },
  	          {
  	            match: /\s+/,
  	            relevance: 0
  	          },
  	          { // JSX
  	            variants: [
  	              { begin: FRAGMENT.begin, end: FRAGMENT.end },
  	              { match: XML_SELF_CLOSING },
  	              {
  	                begin: XML_TAG.begin,
  	                // we carefully check the opening tag to see if it truly
  	                // is a tag and not a false positive
  	                'on:begin': XML_TAG.isTrulyOpeningTag,
  	                end: XML_TAG.end
  	              }
  	            ],
  	            subLanguage: 'xml',
  	            contains: [
  	              {
  	                begin: XML_TAG.begin,
  	                end: XML_TAG.end,
  	                skip: true,
  	                contains: ['self']
  	              }
  	            ]
  	          }
  	        ],
  	      },
  	      FUNCTION_DEFINITION,
  	      {
  	        // prevent this from getting swallowed up by function
  	        // since they appear "function like"
  	        beginKeywords: "while if switch catch for"
  	      },
  	      {
  	        // we have to count the parens to make sure we actually have the correct
  	        // bounding ( ).  There could be any number of sub-expressions inside
  	        // also surrounded by parens.
  	        begin: '\\b(?!function)' + hljs.UNDERSCORE_IDENT_RE +
  	          '\\(' + // first parens
  	          '[^()]*(\\(' +
  	            '[^()]*(\\(' +
  	              '[^()]*' +
  	            '\\)[^()]*)*' +
  	          '\\)[^()]*)*' +
  	          '\\)\\s*\\{', // end parens
  	        returnBegin:true,
  	        label: "func.def",
  	        contains: [
  	          PARAMS,
  	          hljs.inherit(hljs.TITLE_MODE, { begin: IDENT_RE$1, className: "title.function" })
  	        ]
  	      },
  	      // catch ... so it won't trigger the property rule below
  	      {
  	        match: /\.\.\./,
  	        relevance: 0
  	      },
  	      PROPERTY_ACCESS,
  	      // hack: prevents detection of keywords in some circumstances
  	      // .keyword()
  	      // $keyword = x
  	      {
  	        match: '\\$' + IDENT_RE$1,
  	        relevance: 0
  	      },
  	      {
  	        match: [ /\bconstructor(?=\s*\()/ ],
  	        className: { 1: "title.function" },
  	        contains: [ PARAMS ]
  	      },
  	      FUNCTION_CALL,
  	      UPPER_CASE_CONSTANT,
  	      CLASS_OR_EXTENDS,
  	      GETTER_OR_SETTER,
  	      {
  	        match: /\$[(.]/ // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`
  	      }
  	    ]
  	  };
  	}

  	javascript_1 = javascript;
  	return javascript_1;
  }

  /*
   Language: JBoss CLI
   Author: Raphaël Parrëe <rparree@edc4it.com>
   Description: language definition jboss cli
   Website: https://docs.jboss.org/author/display/WFLY/Command+Line+Interface
   Category: config
   */

  var jbossCli_1;
  var hasRequiredJbossCli;

  function requireJbossCli () {
  	if (hasRequiredJbossCli) return jbossCli_1;
  	hasRequiredJbossCli = 1;
  	function jbossCli(hljs) {
  	  const PARAM = {
  	    begin: /[\w-]+ *=/,
  	    returnBegin: true,
  	    relevance: 0,
  	    contains: [
  	      {
  	        className: 'attr',
  	        begin: /[\w-]+/
  	      }
  	    ]
  	  };
  	  const PARAMSBLOCK = {
  	    className: 'params',
  	    begin: /\(/,
  	    end: /\)/,
  	    contains: [ PARAM ],
  	    relevance: 0
  	  };
  	  const OPERATION = {
  	    className: 'function',
  	    begin: /:[\w\-.]+/,
  	    relevance: 0
  	  };
  	  const PATH = {
  	    className: 'string',
  	    begin: /\B([\/.])[\w\-.\/=]+/
  	  };
  	  const COMMAND_PARAMS = {
  	    className: 'params',
  	    begin: /--[\w\-=\/]+/
  	  };
  	  return {
  	    name: 'JBoss CLI',
  	    aliases: [ 'wildfly-cli' ],
  	    keywords: {
  	      $pattern: '[a-z\-]+',
  	      keyword: 'alias batch cd clear command connect connection-factory connection-info data-source deploy '
  	      + 'deployment-info deployment-overlay echo echo-dmr help history if jdbc-driver-info jms-queue|20 jms-topic|20 ls '
  	      + 'patch pwd quit read-attribute read-operation reload rollout-plan run-batch set shutdown try unalias '
  	      + 'undeploy unset version xa-data-source', // module
  	      literal: 'true false'
  	    },
  	    contains: [
  	      hljs.HASH_COMMENT_MODE,
  	      hljs.QUOTE_STRING_MODE,
  	      COMMAND_PARAMS,
  	      OPERATION,
  	      PATH,
  	      PARAMSBLOCK
  	    ]
  	  };
  	}

  	jbossCli_1 = jbossCli;
  	return jbossCli_1;
  }

  /*
  Language: JSON
  Description: JSON (JavaScript Object Notation) is a lightweight data-interchange format.
  Author: Ivan Sagalaev <maniac@softwaremaniacs.org>
  Website: http://www.json.org
  Category: common, protocols, web
  */

  var json_1;
  var hasRequiredJson;

  function requireJson () {
  	if (hasRequiredJson) return json_1;
  	hasRequiredJson = 1;
  	function json(hljs) {
  	  const ATTRIBUTE = {
  	    className: 'attr',
  	    begin: /"(\\.|[^\\"\r\n])*"(?=\s*:)/,
  	    relevance: 1.01
  	  };
  	  const PUNCTUATION = {
  	    match: /[{}[\],:]/,
  	    className: "punctuation",
  	    relevance: 0
  	  };
  	  const LITERALS = [
  	    "true",
  	    "false",
  	    "null"
  	  ];
  	  // NOTE: normally we would rely on `keywords` for this but using a mode here allows us
  	  // - to use the very tight `illegal: \S` rule later to flag any other character
  	  // - as illegal indicating that despite looking like JSON we do not truly have
  	  // - JSON and thus improve false-positively greatly since JSON will try and claim
  	  // - all sorts of JSON looking stuff
  	  const LITERALS_MODE = {
  	    scope: "literal",
  	    beginKeywords: LITERALS.join(" "),
  	  };

  	  return {
  	    name: 'JSON',
  	    keywords:{
  	      literal: LITERALS,
  	    },
  	    contains: [
  	      ATTRIBUTE,
  	      PUNCTUATION,
  	      hljs.QUOTE_STRING_MODE,
  	      LITERALS_MODE,
  	      hljs.C_NUMBER_MODE,
  	      hljs.C_LINE_COMMENT_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE
  	    ],
  	    illegal: '\\S'
  	  };
  	}

  	json_1 = json;
  	return json_1;
  }

  /*
  Language: Julia
  Description: Julia is a high-level, high-performance, dynamic programming language.
  Author: Kenta Sato <bicycle1885@gmail.com>
  Contributors: Alex Arslan <ararslan@comcast.net>, Fredrik Ekre <ekrefredrik@gmail.com>
  Website: https://julialang.org
  */

  var julia_1;
  var hasRequiredJulia;

  function requireJulia () {
  	if (hasRequiredJulia) return julia_1;
  	hasRequiredJulia = 1;
  	function julia(hljs) {
  	  // Since there are numerous special names in Julia, it is too much trouble
  	  // to maintain them by hand. Hence these names (i.e. keywords, literals and
  	  // built-ins) are automatically generated from Julia 1.5.2 itself through
  	  // the following scripts for each.

  	  // ref: https://docs.julialang.org/en/v1/manual/variables/#Allowed-Variable-Names
  	  const VARIABLE_NAME_RE = '[A-Za-z_\\u00A1-\\uFFFF][A-Za-z_0-9\\u00A1-\\uFFFF]*';

  	  // # keyword generator, multi-word keywords handled manually below (Julia 1.5.2)
  	  // import REPL.REPLCompletions
  	  // res = String["in", "isa", "where"]
  	  // for kw in collect(x.keyword for x in REPLCompletions.complete_keyword(""))
  	  //     if !(contains(kw, " ") || kw == "struct")
  	  //         push!(res, kw)
  	  //     end
  	  // end
  	  // sort!(unique!(res))
  	  // foreach(x -> println("\'", x, "\',"), res)
  	  const KEYWORD_LIST = [
  	    'baremodule',
  	    'begin',
  	    'break',
  	    'catch',
  	    'ccall',
  	    'const',
  	    'continue',
  	    'do',
  	    'else',
  	    'elseif',
  	    'end',
  	    'export',
  	    'false',
  	    'finally',
  	    'for',
  	    'function',
  	    'global',
  	    'if',
  	    'import',
  	    'in',
  	    'isa',
  	    'let',
  	    'local',
  	    'macro',
  	    'module',
  	    'quote',
  	    'return',
  	    'true',
  	    'try',
  	    'using',
  	    'where',
  	    'while',
  	  ];

  	  // # literal generator (Julia 1.5.2)
  	  // import REPL.REPLCompletions
  	  // res = String["true", "false"]
  	  // for compl in filter!(x -> isa(x, REPLCompletions.ModuleCompletion) && (x.parent === Base || x.parent === Core),
  	  //                     REPLCompletions.completions("", 0)[1])
  	  //     try
  	  //         v = eval(Symbol(compl.mod))
  	  //         if !(v isa Function || v isa Type || v isa TypeVar || v isa Module || v isa Colon)
  	  //             push!(res, compl.mod)
  	  //         end
  	  //     catch e
  	  //     end
  	  // end
  	  // sort!(unique!(res))
  	  // foreach(x -> println("\'", x, "\',"), res)
  	  const LITERAL_LIST = [
  	    'ARGS',
  	    'C_NULL',
  	    'DEPOT_PATH',
  	    'ENDIAN_BOM',
  	    'ENV',
  	    'Inf',
  	    'Inf16',
  	    'Inf32',
  	    'Inf64',
  	    'InsertionSort',
  	    'LOAD_PATH',
  	    'MergeSort',
  	    'NaN',
  	    'NaN16',
  	    'NaN32',
  	    'NaN64',
  	    'PROGRAM_FILE',
  	    'QuickSort',
  	    'RoundDown',
  	    'RoundFromZero',
  	    'RoundNearest',
  	    'RoundNearestTiesAway',
  	    'RoundNearestTiesUp',
  	    'RoundToZero',
  	    'RoundUp',
  	    'VERSION|0',
  	    'devnull',
  	    'false',
  	    'im',
  	    'missing',
  	    'nothing',
  	    'pi',
  	    'stderr',
  	    'stdin',
  	    'stdout',
  	    'true',
  	    'undef',
  	    'π',
  	    'ℯ',
  	  ];

  	  // # built_in generator (Julia 1.5.2)
  	  // import REPL.REPLCompletions
  	  // res = String[]
  	  // for compl in filter!(x -> isa(x, REPLCompletions.ModuleCompletion) && (x.parent === Base || x.parent === Core),
  	  //                     REPLCompletions.completions("", 0)[1])
  	  //     try
  	  //         v = eval(Symbol(compl.mod))
  	  //         if (v isa Type || v isa TypeVar) && (compl.mod != "=>")
  	  //             push!(res, compl.mod)
  	  //         end
  	  //     catch e
  	  //     end
  	  // end
  	  // sort!(unique!(res))
  	  // foreach(x -> println("\'", x, "\',"), res)
  	  const BUILT_IN_LIST = [
  	    'AbstractArray',
  	    'AbstractChannel',
  	    'AbstractChar',
  	    'AbstractDict',
  	    'AbstractDisplay',
  	    'AbstractFloat',
  	    'AbstractIrrational',
  	    'AbstractMatrix',
  	    'AbstractRange',
  	    'AbstractSet',
  	    'AbstractString',
  	    'AbstractUnitRange',
  	    'AbstractVecOrMat',
  	    'AbstractVector',
  	    'Any',
  	    'ArgumentError',
  	    'Array',
  	    'AssertionError',
  	    'BigFloat',
  	    'BigInt',
  	    'BitArray',
  	    'BitMatrix',
  	    'BitSet',
  	    'BitVector',
  	    'Bool',
  	    'BoundsError',
  	    'CapturedException',
  	    'CartesianIndex',
  	    'CartesianIndices',
  	    'Cchar',
  	    'Cdouble',
  	    'Cfloat',
  	    'Channel',
  	    'Char',
  	    'Cint',
  	    'Cintmax_t',
  	    'Clong',
  	    'Clonglong',
  	    'Cmd',
  	    'Colon',
  	    'Complex',
  	    'ComplexF16',
  	    'ComplexF32',
  	    'ComplexF64',
  	    'CompositeException',
  	    'Condition',
  	    'Cptrdiff_t',
  	    'Cshort',
  	    'Csize_t',
  	    'Cssize_t',
  	    'Cstring',
  	    'Cuchar',
  	    'Cuint',
  	    'Cuintmax_t',
  	    'Culong',
  	    'Culonglong',
  	    'Cushort',
  	    'Cvoid',
  	    'Cwchar_t',
  	    'Cwstring',
  	    'DataType',
  	    'DenseArray',
  	    'DenseMatrix',
  	    'DenseVecOrMat',
  	    'DenseVector',
  	    'Dict',
  	    'DimensionMismatch',
  	    'Dims',
  	    'DivideError',
  	    'DomainError',
  	    'EOFError',
  	    'Enum',
  	    'ErrorException',
  	    'Exception',
  	    'ExponentialBackOff',
  	    'Expr',
  	    'Float16',
  	    'Float32',
  	    'Float64',
  	    'Function',
  	    'GlobalRef',
  	    'HTML',
  	    'IO',
  	    'IOBuffer',
  	    'IOContext',
  	    'IOStream',
  	    'IdDict',
  	    'IndexCartesian',
  	    'IndexLinear',
  	    'IndexStyle',
  	    'InexactError',
  	    'InitError',
  	    'Int',
  	    'Int128',
  	    'Int16',
  	    'Int32',
  	    'Int64',
  	    'Int8',
  	    'Integer',
  	    'InterruptException',
  	    'InvalidStateException',
  	    'Irrational',
  	    'KeyError',
  	    'LinRange',
  	    'LineNumberNode',
  	    'LinearIndices',
  	    'LoadError',
  	    'MIME',
  	    'Matrix',
  	    'Method',
  	    'MethodError',
  	    'Missing',
  	    'MissingException',
  	    'Module',
  	    'NTuple',
  	    'NamedTuple',
  	    'Nothing',
  	    'Number',
  	    'OrdinalRange',
  	    'OutOfMemoryError',
  	    'OverflowError',
  	    'Pair',
  	    'PartialQuickSort',
  	    'PermutedDimsArray',
  	    'Pipe',
  	    'ProcessFailedException',
  	    'Ptr',
  	    'QuoteNode',
  	    'Rational',
  	    'RawFD',
  	    'ReadOnlyMemoryError',
  	    'Real',
  	    'ReentrantLock',
  	    'Ref',
  	    'Regex',
  	    'RegexMatch',
  	    'RoundingMode',
  	    'SegmentationFault',
  	    'Set',
  	    'Signed',
  	    'Some',
  	    'StackOverflowError',
  	    'StepRange',
  	    'StepRangeLen',
  	    'StridedArray',
  	    'StridedMatrix',
  	    'StridedVecOrMat',
  	    'StridedVector',
  	    'String',
  	    'StringIndexError',
  	    'SubArray',
  	    'SubString',
  	    'SubstitutionString',
  	    'Symbol',
  	    'SystemError',
  	    'Task',
  	    'TaskFailedException',
  	    'Text',
  	    'TextDisplay',
  	    'Timer',
  	    'Tuple',
  	    'Type',
  	    'TypeError',
  	    'TypeVar',
  	    'UInt',
  	    'UInt128',
  	    'UInt16',
  	    'UInt32',
  	    'UInt64',
  	    'UInt8',
  	    'UndefInitializer',
  	    'UndefKeywordError',
  	    'UndefRefError',
  	    'UndefVarError',
  	    'Union',
  	    'UnionAll',
  	    'UnitRange',
  	    'Unsigned',
  	    'Val',
  	    'Vararg',
  	    'VecElement',
  	    'VecOrMat',
  	    'Vector',
  	    'VersionNumber',
  	    'WeakKeyDict',
  	    'WeakRef',
  	  ];

  	  const KEYWORDS = {
  	    $pattern: VARIABLE_NAME_RE,
  	    keyword: KEYWORD_LIST,
  	    literal: LITERAL_LIST,
  	    built_in: BUILT_IN_LIST,
  	  };

  	  // placeholder for recursive self-reference
  	  const DEFAULT = {
  	    keywords: KEYWORDS,
  	    illegal: /<\//
  	  };

  	  // ref: https://docs.julialang.org/en/v1/manual/integers-and-floating-point-numbers/
  	  const NUMBER = {
  	    className: 'number',
  	    // supported numeric literals:
  	    //  * binary literal (e.g. 0x10)
  	    //  * octal literal (e.g. 0o76543210)
  	    //  * hexadecimal literal (e.g. 0xfedcba876543210)
  	    //  * hexadecimal floating point literal (e.g. 0x1p0, 0x1.2p2)
  	    //  * decimal literal (e.g. 9876543210, 100_000_000)
  	    //  * floating pointe literal (e.g. 1.2, 1.2f, .2, 1., 1.2e10, 1.2e-10)
  	    begin: /(\b0x[\d_]*(\.[\d_]*)?|0x\.\d[\d_]*)p[-+]?\d+|\b0[box][a-fA-F0-9][a-fA-F0-9_]*|(\b\d[\d_]*(\.[\d_]*)?|\.\d[\d_]*)([eEfF][-+]?\d+)?/,
  	    relevance: 0
  	  };

  	  const CHAR = {
  	    className: 'string',
  	    begin: /'(.|\\[xXuU][a-zA-Z0-9]+)'/
  	  };

  	  const INTERPOLATION = {
  	    className: 'subst',
  	    begin: /\$\(/,
  	    end: /\)/,
  	    keywords: KEYWORDS
  	  };

  	  const INTERPOLATED_VARIABLE = {
  	    className: 'variable',
  	    begin: '\\$' + VARIABLE_NAME_RE
  	  };

  	  // TODO: neatly escape normal code in string literal
  	  const STRING = {
  	    className: 'string',
  	    contains: [
  	      hljs.BACKSLASH_ESCAPE,
  	      INTERPOLATION,
  	      INTERPOLATED_VARIABLE
  	    ],
  	    variants: [
  	      {
  	        begin: /\w*"""/,
  	        end: /"""\w*/,
  	        relevance: 10
  	      },
  	      {
  	        begin: /\w*"/,
  	        end: /"\w*/
  	      }
  	    ]
  	  };

  	  const COMMAND = {
  	    className: 'string',
  	    contains: [
  	      hljs.BACKSLASH_ESCAPE,
  	      INTERPOLATION,
  	      INTERPOLATED_VARIABLE
  	    ],
  	    begin: '`',
  	    end: '`'
  	  };

  	  const MACROCALL = {
  	    className: 'meta',
  	    begin: '@' + VARIABLE_NAME_RE
  	  };

  	  const COMMENT = {
  	    className: 'comment',
  	    variants: [
  	      {
  	        begin: '#=',
  	        end: '=#',
  	        relevance: 10
  	      },
  	      {
  	        begin: '#',
  	        end: '$'
  	      }
  	    ]
  	  };

  	  DEFAULT.name = 'Julia';
  	  DEFAULT.contains = [
  	    NUMBER,
  	    CHAR,
  	    STRING,
  	    COMMAND,
  	    MACROCALL,
  	    COMMENT,
  	    hljs.HASH_COMMENT_MODE,
  	    {
  	      className: 'keyword',
  	      begin:
  	        '\\b(((abstract|primitive)\\s+)type|(mutable\\s+)?struct)\\b'
  	    },
  	    { begin: /<:/ } // relevance booster
  	  ];
  	  INTERPOLATION.contains = DEFAULT.contains;

  	  return DEFAULT;
  	}

  	julia_1 = julia;
  	return julia_1;
  }

  /*
  Language: Julia REPL
  Description: Julia REPL sessions
  Author: Morten Piibeleht <morten.piibeleht@gmail.com>
  Website: https://julialang.org
  Requires: julia.js

  The Julia REPL code blocks look something like the following:

    julia> function foo(x)
               x + 1
           end
    foo (generic function with 1 method)

  They start on a new line with "julia>". Usually there should also be a space after this, but
  we also allow the code to start right after the > character. The code may run over multiple
  lines, but the additional lines must start with six spaces (i.e. be indented to match
  "julia>"). The rest of the code is assumed to be output from the executed code and will be
  left un-highlighted.

  Using simply spaces to identify line continuations may get a false-positive if the output
  also prints out six spaces, but such cases should be rare.
  */

  var juliaRepl_1;
  var hasRequiredJuliaRepl;

  function requireJuliaRepl () {
  	if (hasRequiredJuliaRepl) return juliaRepl_1;
  	hasRequiredJuliaRepl = 1;
  	function juliaRepl(hljs) {
  	  return {
  	    name: 'Julia REPL',
  	    contains: [
  	      {
  	        className: 'meta.prompt',
  	        begin: /^julia>/,
  	        relevance: 10,
  	        starts: {
  	          // end the highlighting if we are on a new line and the line does not have at
  	          // least six spaces in the beginning
  	          end: /^(?![ ]{6})/,
  	          subLanguage: 'julia'
  	        },
  	      },
  	    ],
  	    // jldoctest Markdown blocks are used in the Julia manual and package docs indicate
  	    // code snippets that should be verified when the documentation is built. They can be
  	    // either REPL-like or script-like, but are usually REPL-like and therefore we apply
  	    // julia-repl highlighting to them. More information can be found in Documenter's
  	    // manual: https://juliadocs.github.io/Documenter.jl/latest/man/doctests.html
  	    aliases: [ 'jldoctest' ],
  	  };
  	}

  	juliaRepl_1 = juliaRepl;
  	return juliaRepl_1;
  }

  var kotlin_1;
  var hasRequiredKotlin;

  function requireKotlin () {
  	if (hasRequiredKotlin) return kotlin_1;
  	hasRequiredKotlin = 1;
  	// https://docs.oracle.com/javase/specs/jls/se15/html/jls-3.html#jls-3.10
  	var decimalDigits = '[0-9](_*[0-9])*';
  	var frac = `\\.(${decimalDigits})`;
  	var hexDigits = '[0-9a-fA-F](_*[0-9a-fA-F])*';
  	var NUMERIC = {
  	  className: 'number',
  	  variants: [
  	    // DecimalFloatingPointLiteral
  	    // including ExponentPart
  	    { begin: `(\\b(${decimalDigits})((${frac})|\\.)?|(${frac}))` +
  	      `[eE][+-]?(${decimalDigits})[fFdD]?\\b` },
  	    // excluding ExponentPart
  	    { begin: `\\b(${decimalDigits})((${frac})[fFdD]?\\b|\\.([fFdD]\\b)?)` },
  	    { begin: `(${frac})[fFdD]?\\b` },
  	    { begin: `\\b(${decimalDigits})[fFdD]\\b` },

  	    // HexadecimalFloatingPointLiteral
  	    { begin: `\\b0[xX]((${hexDigits})\\.?|(${hexDigits})?\\.(${hexDigits}))` +
  	      `[pP][+-]?(${decimalDigits})[fFdD]?\\b` },

  	    // DecimalIntegerLiteral
  	    { begin: '\\b(0|[1-9](_*[0-9])*)[lL]?\\b' },

  	    // HexIntegerLiteral
  	    { begin: `\\b0[xX](${hexDigits})[lL]?\\b` },

  	    // OctalIntegerLiteral
  	    { begin: '\\b0(_*[0-7])*[lL]?\\b' },

  	    // BinaryIntegerLiteral
  	    { begin: '\\b0[bB][01](_*[01])*[lL]?\\b' },
  	  ],
  	  relevance: 0
  	};

  	/*
  	 Language: Kotlin
  	 Description: Kotlin is an OSS statically typed programming language that targets the JVM, Android, JavaScript and Native.
  	 Author: Sergey Mashkov <cy6erGn0m@gmail.com>
  	 Website: https://kotlinlang.org
  	 Category: common
  	 */

  	function kotlin(hljs) {
  	  const KEYWORDS = {
  	    keyword:
  	      'abstract as val var vararg get set class object open private protected public noinline '
  	      + 'crossinline dynamic final enum if else do while for when throw try catch finally '
  	      + 'import package is in fun override companion reified inline lateinit init '
  	      + 'interface annotation data sealed internal infix operator out by constructor super '
  	      + 'tailrec where const inner suspend typealias external expect actual',
  	    built_in:
  	      'Byte Short Char Int Long Boolean Float Double Void Unit Nothing',
  	    literal:
  	      'true false null'
  	  };
  	  const KEYWORDS_WITH_LABEL = {
  	    className: 'keyword',
  	    begin: /\b(break|continue|return|this)\b/,
  	    starts: { contains: [
  	      {
  	        className: 'symbol',
  	        begin: /@\w+/
  	      }
  	    ] }
  	  };
  	  const LABEL = {
  	    className: 'symbol',
  	    begin: hljs.UNDERSCORE_IDENT_RE + '@'
  	  };

  	  // for string templates
  	  const SUBST = {
  	    className: 'subst',
  	    begin: /\$\{/,
  	    end: /\}/,
  	    contains: [ hljs.C_NUMBER_MODE ]
  	  };
  	  const VARIABLE = {
  	    className: 'variable',
  	    begin: '\\$' + hljs.UNDERSCORE_IDENT_RE
  	  };
  	  const STRING = {
  	    className: 'string',
  	    variants: [
  	      {
  	        begin: '"""',
  	        end: '"""(?=[^"])',
  	        contains: [
  	          VARIABLE,
  	          SUBST
  	        ]
  	      },
  	      // Can't use built-in modes easily, as we want to use STRING in the meta
  	      // context as 'meta-string' and there's no syntax to remove explicitly set
  	      // classNames in built-in modes.
  	      {
  	        begin: '\'',
  	        end: '\'',
  	        illegal: /\n/,
  	        contains: [ hljs.BACKSLASH_ESCAPE ]
  	      },
  	      {
  	        begin: '"',
  	        end: '"',
  	        illegal: /\n/,
  	        contains: [
  	          hljs.BACKSLASH_ESCAPE,
  	          VARIABLE,
  	          SUBST
  	        ]
  	      }
  	    ]
  	  };
  	  SUBST.contains.push(STRING);

  	  const ANNOTATION_USE_SITE = {
  	    className: 'meta',
  	    begin: '@(?:file|property|field|get|set|receiver|param|setparam|delegate)\\s*:(?:\\s*' + hljs.UNDERSCORE_IDENT_RE + ')?'
  	  };
  	  const ANNOTATION = {
  	    className: 'meta',
  	    begin: '@' + hljs.UNDERSCORE_IDENT_RE,
  	    contains: [
  	      {
  	        begin: /\(/,
  	        end: /\)/,
  	        contains: [
  	          hljs.inherit(STRING, { className: 'string' }),
  	          "self"
  	        ]
  	      }
  	    ]
  	  };

  	  // https://kotlinlang.org/docs/reference/whatsnew11.html#underscores-in-numeric-literals
  	  // According to the doc above, the number mode of kotlin is the same as java 8,
  	  // so the code below is copied from java.js
  	  const KOTLIN_NUMBER_MODE = NUMERIC;
  	  const KOTLIN_NESTED_COMMENT = hljs.COMMENT(
  	    '/\\*', '\\*/',
  	    { contains: [ hljs.C_BLOCK_COMMENT_MODE ] }
  	  );
  	  const KOTLIN_PAREN_TYPE = { variants: [
  	    {
  	      className: 'type',
  	      begin: hljs.UNDERSCORE_IDENT_RE
  	    },
  	    {
  	      begin: /\(/,
  	      end: /\)/,
  	      contains: [] // defined later
  	    }
  	  ] };
  	  const KOTLIN_PAREN_TYPE2 = KOTLIN_PAREN_TYPE;
  	  KOTLIN_PAREN_TYPE2.variants[1].contains = [ KOTLIN_PAREN_TYPE ];
  	  KOTLIN_PAREN_TYPE.variants[1].contains = [ KOTLIN_PAREN_TYPE2 ];

  	  return {
  	    name: 'Kotlin',
  	    aliases: [
  	      'kt',
  	      'kts'
  	    ],
  	    keywords: KEYWORDS,
  	    contains: [
  	      hljs.COMMENT(
  	        '/\\*\\*',
  	        '\\*/',
  	        {
  	          relevance: 0,
  	          contains: [
  	            {
  	              className: 'doctag',
  	              begin: '@[A-Za-z]+'
  	            }
  	          ]
  	        }
  	      ),
  	      hljs.C_LINE_COMMENT_MODE,
  	      KOTLIN_NESTED_COMMENT,
  	      KEYWORDS_WITH_LABEL,
  	      LABEL,
  	      ANNOTATION_USE_SITE,
  	      ANNOTATION,
  	      {
  	        className: 'function',
  	        beginKeywords: 'fun',
  	        end: '[(]|$',
  	        returnBegin: true,
  	        excludeEnd: true,
  	        keywords: KEYWORDS,
  	        relevance: 5,
  	        contains: [
  	          {
  	            begin: hljs.UNDERSCORE_IDENT_RE + '\\s*\\(',
  	            returnBegin: true,
  	            relevance: 0,
  	            contains: [ hljs.UNDERSCORE_TITLE_MODE ]
  	          },
  	          {
  	            className: 'type',
  	            begin: /</,
  	            end: />/,
  	            keywords: 'reified',
  	            relevance: 0
  	          },
  	          {
  	            className: 'params',
  	            begin: /\(/,
  	            end: /\)/,
  	            endsParent: true,
  	            keywords: KEYWORDS,
  	            relevance: 0,
  	            contains: [
  	              {
  	                begin: /:/,
  	                end: /[=,\/]/,
  	                endsWithParent: true,
  	                contains: [
  	                  KOTLIN_PAREN_TYPE,
  	                  hljs.C_LINE_COMMENT_MODE,
  	                  KOTLIN_NESTED_COMMENT
  	                ],
  	                relevance: 0
  	              },
  	              hljs.C_LINE_COMMENT_MODE,
  	              KOTLIN_NESTED_COMMENT,
  	              ANNOTATION_USE_SITE,
  	              ANNOTATION,
  	              STRING,
  	              hljs.C_NUMBER_MODE
  	            ]
  	          },
  	          KOTLIN_NESTED_COMMENT
  	        ]
  	      },
  	      {
  	        begin: [
  	          /class|interface|trait/,
  	          /\s+/,
  	          hljs.UNDERSCORE_IDENT_RE
  	        ],
  	        beginScope: {
  	          3: "title.class"
  	        },
  	        keywords: 'class interface trait',
  	        end: /[:\{(]|$/,
  	        excludeEnd: true,
  	        illegal: 'extends implements',
  	        contains: [
  	          { beginKeywords: 'public protected internal private constructor' },
  	          hljs.UNDERSCORE_TITLE_MODE,
  	          {
  	            className: 'type',
  	            begin: /</,
  	            end: />/,
  	            excludeBegin: true,
  	            excludeEnd: true,
  	            relevance: 0
  	          },
  	          {
  	            className: 'type',
  	            begin: /[,:]\s*/,
  	            end: /[<\(,){\s]|$/,
  	            excludeBegin: true,
  	            returnEnd: true
  	          },
  	          ANNOTATION_USE_SITE,
  	          ANNOTATION
  	        ]
  	      },
  	      STRING,
  	      {
  	        className: 'meta',
  	        begin: "^#!/usr/bin/env",
  	        end: '$',
  	        illegal: '\n'
  	      },
  	      KOTLIN_NUMBER_MODE
  	    ]
  	  };
  	}

  	kotlin_1 = kotlin;
  	return kotlin_1;
  }

  /*
  Language: Lasso
  Author: Eric Knibbe <eric@lassosoft.com>
  Description: Lasso is a language and server platform for database-driven web applications. This definition handles Lasso 9 syntax and LassoScript for Lasso 8.6 and earlier.
  Website: http://www.lassosoft.com/What-Is-Lasso
  */

  var lasso_1;
  var hasRequiredLasso;

  function requireLasso () {
  	if (hasRequiredLasso) return lasso_1;
  	hasRequiredLasso = 1;
  	function lasso(hljs) {
  	  const LASSO_IDENT_RE = '[a-zA-Z_][\\w.]*';
  	  const LASSO_ANGLE_RE = '<\\?(lasso(script)?|=)';
  	  const LASSO_CLOSE_RE = '\\]|\\?>';
  	  const LASSO_KEYWORDS = {
  	    $pattern: LASSO_IDENT_RE + '|&[lg]t;',
  	    literal:
  	      'true false none minimal full all void and or not '
  	      + 'bw nbw ew new cn ncn lt lte gt gte eq neq rx nrx ft',
  	    built_in:
  	      'array date decimal duration integer map pair string tag xml null '
  	      + 'boolean bytes keyword list locale queue set stack staticarray '
  	      + 'local var variable global data self inherited currentcapture givenblock',
  	    keyword:
  	      'cache database_names database_schemanames database_tablenames '
  	      + 'define_tag define_type email_batch encode_set html_comment handle '
  	      + 'handle_error header if inline iterate ljax_target link '
  	      + 'link_currentaction link_currentgroup link_currentrecord link_detail '
  	      + 'link_firstgroup link_firstrecord link_lastgroup link_lastrecord '
  	      + 'link_nextgroup link_nextrecord link_prevgroup link_prevrecord log '
  	      + 'loop namespace_using output_none portal private protect records '
  	      + 'referer referrer repeating resultset rows search_args '
  	      + 'search_arguments select sort_args sort_arguments thread_atomic '
  	      + 'value_list while abort case else fail_if fail_ifnot fail if_empty '
  	      + 'if_false if_null if_true loop_abort loop_continue loop_count params '
  	      + 'params_up return return_value run_children soap_definetag '
  	      + 'soap_lastrequest soap_lastresponse tag_name ascending average by '
  	      + 'define descending do equals frozen group handle_failure import in '
  	      + 'into join let match max min on order parent protected provide public '
  	      + 'require returnhome skip split_thread sum take thread to trait type '
  	      + 'where with yield yieldhome'
  	  };
  	  const HTML_COMMENT = hljs.COMMENT(
  	    '<!--',
  	    '-->',
  	    { relevance: 0 }
  	  );
  	  const LASSO_NOPROCESS = {
  	    className: 'meta',
  	    begin: '\\[noprocess\\]',
  	    starts: {
  	      end: '\\[/noprocess\\]',
  	      returnEnd: true,
  	      contains: [ HTML_COMMENT ]
  	    }
  	  };
  	  const LASSO_START = {
  	    className: 'meta',
  	    begin: '\\[/noprocess|' + LASSO_ANGLE_RE
  	  };
  	  const LASSO_DATAMEMBER = {
  	    className: 'symbol',
  	    begin: '\'' + LASSO_IDENT_RE + '\''
  	  };
  	  const LASSO_CODE = [
  	    hljs.C_LINE_COMMENT_MODE,
  	    hljs.C_BLOCK_COMMENT_MODE,
  	    hljs.inherit(hljs.C_NUMBER_MODE, { begin: hljs.C_NUMBER_RE + '|(-?infinity|NaN)\\b' }),
  	    hljs.inherit(hljs.APOS_STRING_MODE, { illegal: null }),
  	    hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null }),
  	    {
  	      className: 'string',
  	      begin: '`',
  	      end: '`'
  	    },
  	    { // variables
  	      variants: [
  	        { begin: '[#$]' + LASSO_IDENT_RE },
  	        {
  	          begin: '#',
  	          end: '\\d+',
  	          illegal: '\\W'
  	        }
  	      ] },
  	    {
  	      className: 'type',
  	      begin: '::\\s*',
  	      end: LASSO_IDENT_RE,
  	      illegal: '\\W'
  	    },
  	    {
  	      className: 'params',
  	      variants: [
  	        {
  	          begin: '-(?!infinity)' + LASSO_IDENT_RE,
  	          relevance: 0
  	        },
  	        { begin: '(\\.\\.\\.)' }
  	      ]
  	    },
  	    {
  	      begin: /(->|\.)\s*/,
  	      relevance: 0,
  	      contains: [ LASSO_DATAMEMBER ]
  	    },
  	    {
  	      className: 'class',
  	      beginKeywords: 'define',
  	      returnEnd: true,
  	      end: '\\(|=>',
  	      contains: [ hljs.inherit(hljs.TITLE_MODE, { begin: LASSO_IDENT_RE + '(=(?!>))?|[-+*/%](?!>)' }) ]
  	    }
  	  ];
  	  return {
  	    name: 'Lasso',
  	    aliases: [
  	      'ls',
  	      'lassoscript'
  	    ],
  	    case_insensitive: true,
  	    keywords: LASSO_KEYWORDS,
  	    contains: [
  	      {
  	        className: 'meta',
  	        begin: LASSO_CLOSE_RE,
  	        relevance: 0,
  	        starts: { // markup
  	          end: '\\[|' + LASSO_ANGLE_RE,
  	          returnEnd: true,
  	          relevance: 0,
  	          contains: [ HTML_COMMENT ]
  	        }
  	      },
  	      LASSO_NOPROCESS,
  	      LASSO_START,
  	      {
  	        className: 'meta',
  	        begin: '\\[no_square_brackets',
  	        starts: {
  	          end: '\\[/no_square_brackets\\]', // not implemented in the language
  	          keywords: LASSO_KEYWORDS,
  	          contains: [
  	            {
  	              className: 'meta',
  	              begin: LASSO_CLOSE_RE,
  	              relevance: 0,
  	              starts: {
  	                end: '\\[noprocess\\]|' + LASSO_ANGLE_RE,
  	                returnEnd: true,
  	                contains: [ HTML_COMMENT ]
  	              }
  	            },
  	            LASSO_NOPROCESS,
  	            LASSO_START
  	          ].concat(LASSO_CODE)
  	        }
  	      },
  	      {
  	        className: 'meta',
  	        begin: '\\[',
  	        relevance: 0
  	      },
  	      {
  	        className: 'meta',
  	        begin: '^#!',
  	        end: 'lasso9$',
  	        relevance: 10
  	      }
  	    ].concat(LASSO_CODE)
  	  };
  	}

  	lasso_1 = lasso;
  	return lasso_1;
  }

  /*
  Language: LaTeX
  Author: Benedikt Wilde <bwilde@posteo.de>
  Website: https://www.latex-project.org
  Category: markup
  */

  var latex_1;
  var hasRequiredLatex;

  function requireLatex () {
  	if (hasRequiredLatex) return latex_1;
  	hasRequiredLatex = 1;
  	/** @type LanguageFn */
  	function latex(hljs) {
  	  const regex = hljs.regex;
  	  const KNOWN_CONTROL_WORDS = regex.either(...[
  	    '(?:NeedsTeXFormat|RequirePackage|GetIdInfo)',
  	    'Provides(?:Expl)?(?:Package|Class|File)',
  	    '(?:DeclareOption|ProcessOptions)',
  	    '(?:documentclass|usepackage|input|include)',
  	    'makeat(?:letter|other)',
  	    'ExplSyntax(?:On|Off)',
  	    '(?:new|renew|provide)?command',
  	    '(?:re)newenvironment',
  	    '(?:New|Renew|Provide|Declare)(?:Expandable)?DocumentCommand',
  	    '(?:New|Renew|Provide|Declare)DocumentEnvironment',
  	    '(?:(?:e|g|x)?def|let)',
  	    '(?:begin|end)',
  	    '(?:part|chapter|(?:sub){0,2}section|(?:sub)?paragraph)',
  	    'caption',
  	    '(?:label|(?:eq|page|name)?ref|(?:paren|foot|super)?cite)',
  	    '(?:alpha|beta|[Gg]amma|[Dd]elta|(?:var)?epsilon|zeta|eta|[Tt]heta|vartheta)',
  	    '(?:iota|(?:var)?kappa|[Ll]ambda|mu|nu|[Xx]i|[Pp]i|varpi|(?:var)rho)',
  	    '(?:[Ss]igma|varsigma|tau|[Uu]psilon|[Pp]hi|varphi|chi|[Pp]si|[Oo]mega)',
  	    '(?:frac|sum|prod|lim|infty|times|sqrt|leq|geq|left|right|middle|[bB]igg?)',
  	    '(?:[lr]angle|q?quad|[lcvdi]?dots|d?dot|hat|tilde|bar)'
  	  ].map(word => word + '(?![a-zA-Z@:_])'));
  	  const L3_REGEX = new RegExp([
  	    // A function \module_function_name:signature or \__module_function_name:signature,
  	    // where both module and function_name need at least two characters and
  	    // function_name may contain single underscores.
  	    '(?:__)?[a-zA-Z]{2,}_[a-zA-Z](?:_?[a-zA-Z])+:[a-zA-Z]*',
  	    // A variable \scope_module_and_name_type or \scope__module_ane_name_type,
  	    // where scope is one of l, g or c, type needs at least two characters
  	    // and module_and_name may contain single underscores.
  	    '[lgc]__?[a-zA-Z](?:_?[a-zA-Z])*_[a-zA-Z]{2,}',
  	    // A quark \q_the_name or \q__the_name or
  	    // scan mark \s_the_name or \s__vthe_name,
  	    // where variable_name needs at least two characters and
  	    // may contain single underscores.
  	    '[qs]__?[a-zA-Z](?:_?[a-zA-Z])+',
  	    // Other LaTeX3 macro names that are not covered by the three rules above.
  	    'use(?:_i)?:[a-zA-Z]*',
  	    '(?:else|fi|or):',
  	    '(?:if|cs|exp):w',
  	    '(?:hbox|vbox):n',
  	    '::[a-zA-Z]_unbraced',
  	    '::[a-zA-Z:]'
  	  ].map(pattern => pattern + '(?![a-zA-Z:_])').join('|'));
  	  const L2_VARIANTS = [
  	    { begin: /[a-zA-Z@]+/ }, // control word
  	    { begin: /[^a-zA-Z@]?/ } // control symbol
  	  ];
  	  const DOUBLE_CARET_VARIANTS = [
  	    { begin: /\^{6}[0-9a-f]{6}/ },
  	    { begin: /\^{5}[0-9a-f]{5}/ },
  	    { begin: /\^{4}[0-9a-f]{4}/ },
  	    { begin: /\^{3}[0-9a-f]{3}/ },
  	    { begin: /\^{2}[0-9a-f]{2}/ },
  	    { begin: /\^{2}[\u0000-\u007f]/ }
  	  ];
  	  const CONTROL_SEQUENCE = {
  	    className: 'keyword',
  	    begin: /\\/,
  	    relevance: 0,
  	    contains: [
  	      {
  	        endsParent: true,
  	        begin: KNOWN_CONTROL_WORDS
  	      },
  	      {
  	        endsParent: true,
  	        begin: L3_REGEX
  	      },
  	      {
  	        endsParent: true,
  	        variants: DOUBLE_CARET_VARIANTS
  	      },
  	      {
  	        endsParent: true,
  	        relevance: 0,
  	        variants: L2_VARIANTS
  	      }
  	    ]
  	  };
  	  const MACRO_PARAM = {
  	    className: 'params',
  	    relevance: 0,
  	    begin: /#+\d?/
  	  };
  	  const DOUBLE_CARET_CHAR = {
  	    // relevance: 1
  	    variants: DOUBLE_CARET_VARIANTS };
  	  const SPECIAL_CATCODE = {
  	    className: 'built_in',
  	    relevance: 0,
  	    begin: /[$&^_]/
  	  };
  	  const MAGIC_COMMENT = {
  	    className: 'meta',
  	    begin: /% ?!(T[eE]X|tex|BIB|bib)/,
  	    end: '$',
  	    relevance: 10
  	  };
  	  const COMMENT = hljs.COMMENT(
  	    '%',
  	    '$',
  	    { relevance: 0 }
  	  );
  	  const EVERYTHING_BUT_VERBATIM = [
  	    CONTROL_SEQUENCE,
  	    MACRO_PARAM,
  	    DOUBLE_CARET_CHAR,
  	    SPECIAL_CATCODE,
  	    MAGIC_COMMENT,
  	    COMMENT
  	  ];
  	  const BRACE_GROUP_NO_VERBATIM = {
  	    begin: /\{/,
  	    end: /\}/,
  	    relevance: 0,
  	    contains: [
  	      'self',
  	      ...EVERYTHING_BUT_VERBATIM
  	    ]
  	  };
  	  const ARGUMENT_BRACES = hljs.inherit(
  	    BRACE_GROUP_NO_VERBATIM,
  	    {
  	      relevance: 0,
  	      endsParent: true,
  	      contains: [
  	        BRACE_GROUP_NO_VERBATIM,
  	        ...EVERYTHING_BUT_VERBATIM
  	      ]
  	    }
  	  );
  	  const ARGUMENT_BRACKETS = {
  	    begin: /\[/,
  	    end: /\]/,
  	    endsParent: true,
  	    relevance: 0,
  	    contains: [
  	      BRACE_GROUP_NO_VERBATIM,
  	      ...EVERYTHING_BUT_VERBATIM
  	    ]
  	  };
  	  const SPACE_GOBBLER = {
  	    begin: /\s+/,
  	    relevance: 0
  	  };
  	  const ARGUMENT_M = [ ARGUMENT_BRACES ];
  	  const ARGUMENT_O = [ ARGUMENT_BRACKETS ];
  	  const ARGUMENT_AND_THEN = function(arg, starts_mode) {
  	    return {
  	      contains: [ SPACE_GOBBLER ],
  	      starts: {
  	        relevance: 0,
  	        contains: arg,
  	        starts: starts_mode
  	      }
  	    };
  	  };
  	  const CSNAME = function(csname, starts_mode) {
  	    return {
  	      begin: '\\\\' + csname + '(?![a-zA-Z@:_])',
  	      keywords: {
  	        $pattern: /\\[a-zA-Z]+/,
  	        keyword: '\\' + csname
  	      },
  	      relevance: 0,
  	      contains: [ SPACE_GOBBLER ],
  	      starts: starts_mode
  	    };
  	  };
  	  const BEGIN_ENV = function(envname, starts_mode) {
  	    return hljs.inherit(
  	      {
  	        begin: '\\\\begin(?=[ \t]*(\\r?\\n[ \t]*)?\\{' + envname + '\\})',
  	        keywords: {
  	          $pattern: /\\[a-zA-Z]+/,
  	          keyword: '\\begin'
  	        },
  	        relevance: 0,
  	      },
  	      ARGUMENT_AND_THEN(ARGUMENT_M, starts_mode)
  	    );
  	  };
  	  const VERBATIM_DELIMITED_EQUAL = (innerName = "string") => {
  	    return hljs.END_SAME_AS_BEGIN({
  	      className: innerName,
  	      begin: /(.|\r?\n)/,
  	      end: /(.|\r?\n)/,
  	      excludeBegin: true,
  	      excludeEnd: true,
  	      endsParent: true
  	    });
  	  };
  	  const VERBATIM_DELIMITED_ENV = function(envname) {
  	    return {
  	      className: 'string',
  	      end: '(?=\\\\end\\{' + envname + '\\})'
  	    };
  	  };

  	  const VERBATIM_DELIMITED_BRACES = (innerName = "string") => {
  	    return {
  	      relevance: 0,
  	      begin: /\{/,
  	      starts: {
  	        endsParent: true,
  	        contains: [
  	          {
  	            className: innerName,
  	            end: /(?=\})/,
  	            endsParent: true,
  	            contains: [
  	              {
  	                begin: /\{/,
  	                end: /\}/,
  	                relevance: 0,
  	                contains: [ "self" ]
  	              }
  	            ],
  	          }
  	        ]
  	      }
  	    };
  	  };
  	  const VERBATIM = [
  	    ...[
  	      'verb',
  	      'lstinline'
  	    ].map(csname => CSNAME(csname, { contains: [ VERBATIM_DELIMITED_EQUAL() ] })),
  	    CSNAME('mint', ARGUMENT_AND_THEN(ARGUMENT_M, { contains: [ VERBATIM_DELIMITED_EQUAL() ] })),
  	    CSNAME('mintinline', ARGUMENT_AND_THEN(ARGUMENT_M, { contains: [
  	      VERBATIM_DELIMITED_BRACES(),
  	      VERBATIM_DELIMITED_EQUAL()
  	    ] })),
  	    CSNAME('url', { contains: [
  	      VERBATIM_DELIMITED_BRACES("link"),
  	      VERBATIM_DELIMITED_BRACES("link")
  	    ] }),
  	    CSNAME('hyperref', { contains: [ VERBATIM_DELIMITED_BRACES("link") ] }),
  	    CSNAME('href', ARGUMENT_AND_THEN(ARGUMENT_O, { contains: [ VERBATIM_DELIMITED_BRACES("link") ] })),
  	    ...[].concat(...[
  	      '',
  	      '\\*'
  	    ].map(suffix => [
  	      BEGIN_ENV('verbatim' + suffix, VERBATIM_DELIMITED_ENV('verbatim' + suffix)),
  	      BEGIN_ENV('filecontents' + suffix, ARGUMENT_AND_THEN(ARGUMENT_M, VERBATIM_DELIMITED_ENV('filecontents' + suffix))),
  	      ...[
  	        '',
  	        'B',
  	        'L'
  	      ].map(prefix =>
  	        BEGIN_ENV(prefix + 'Verbatim' + suffix, ARGUMENT_AND_THEN(ARGUMENT_O, VERBATIM_DELIMITED_ENV(prefix + 'Verbatim' + suffix)))
  	      )
  	    ])),
  	    BEGIN_ENV('minted', ARGUMENT_AND_THEN(ARGUMENT_O, ARGUMENT_AND_THEN(ARGUMENT_M, VERBATIM_DELIMITED_ENV('minted')))),
  	  ];

  	  return {
  	    name: 'LaTeX',
  	    aliases: [ 'tex' ],
  	    contains: [
  	      ...VERBATIM,
  	      ...EVERYTHING_BUT_VERBATIM
  	    ]
  	  };
  	}

  	latex_1 = latex;
  	return latex_1;
  }

  /*
  Language: LDIF
  Contributors: Jacob Childress <jacobc@gmail.com>
  Category: enterprise, config
  Website: https://en.wikipedia.org/wiki/LDAP_Data_Interchange_Format
  */

  var ldif_1;
  var hasRequiredLdif;

  function requireLdif () {
  	if (hasRequiredLdif) return ldif_1;
  	hasRequiredLdif = 1;
  	/** @type LanguageFn */
  	function ldif(hljs) {
  	  return {
  	    name: 'LDIF',
  	    contains: [
  	      {
  	        className: 'attribute',
  	        match: '^dn(?=:)',
  	        relevance: 10
  	      },
  	      {
  	        className: 'attribute',
  	        match: '^\\w+(?=:)'
  	      },
  	      {
  	        className: 'literal',
  	        match: '^-'
  	      },
  	      hljs.HASH_COMMENT_MODE
  	    ]
  	  };
  	}

  	ldif_1 = ldif;
  	return ldif_1;
  }

  /*
  Language: Leaf
  Author: Hale Chan <halechan@qq.com>
  Description: Based on the Leaf reference from https://vapor.github.io/documentation/guide/leaf.html.
  */

  var leaf_1;
  var hasRequiredLeaf;

  function requireLeaf () {
  	if (hasRequiredLeaf) return leaf_1;
  	hasRequiredLeaf = 1;
  	function leaf(hljs) {
  	  return {
  	    name: 'Leaf',
  	    contains: [
  	      {
  	        className: 'function',
  	        begin: '#+' + '[A-Za-z_0-9]*' + '\\(',
  	        end: / \{/,
  	        returnBegin: true,
  	        excludeEnd: true,
  	        contains: [
  	          {
  	            className: 'keyword',
  	            begin: '#+'
  	          },
  	          {
  	            className: 'title',
  	            begin: '[A-Za-z_][A-Za-z_0-9]*'
  	          },
  	          {
  	            className: 'params',
  	            begin: '\\(',
  	            end: '\\)',
  	            endsParent: true,
  	            contains: [
  	              {
  	                className: 'string',
  	                begin: '"',
  	                end: '"'
  	              },
  	              {
  	                className: 'variable',
  	                begin: '[A-Za-z_][A-Za-z_0-9]*'
  	              }
  	            ]
  	          }
  	        ]
  	      }
  	    ]
  	  };
  	}

  	leaf_1 = leaf;
  	return leaf_1;
  }

  var less_1;
  var hasRequiredLess;

  function requireLess () {
  	if (hasRequiredLess) return less_1;
  	hasRequiredLess = 1;
  	const MODES = (hljs) => {
  	  return {
  	    IMPORTANT: {
  	      scope: 'meta',
  	      begin: '!important'
  	    },
  	    BLOCK_COMMENT: hljs.C_BLOCK_COMMENT_MODE,
  	    HEXCOLOR: {
  	      scope: 'number',
  	      begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/
  	    },
  	    FUNCTION_DISPATCH: {
  	      className: "built_in",
  	      begin: /[\w-]+(?=\()/
  	    },
  	    ATTRIBUTE_SELECTOR_MODE: {
  	      scope: 'selector-attr',
  	      begin: /\[/,
  	      end: /\]/,
  	      illegal: '$',
  	      contains: [
  	        hljs.APOS_STRING_MODE,
  	        hljs.QUOTE_STRING_MODE
  	      ]
  	    },
  	    CSS_NUMBER_MODE: {
  	      scope: 'number',
  	      begin: hljs.NUMBER_RE + '(' +
  	        '%|em|ex|ch|rem' +
  	        '|vw|vh|vmin|vmax' +
  	        '|cm|mm|in|pt|pc|px' +
  	        '|deg|grad|rad|turn' +
  	        '|s|ms' +
  	        '|Hz|kHz' +
  	        '|dpi|dpcm|dppx' +
  	        ')?',
  	      relevance: 0
  	    },
  	    CSS_VARIABLE: {
  	      className: "attr",
  	      begin: /--[A-Za-z][A-Za-z0-9_-]*/
  	    }
  	  };
  	};

  	const TAGS = [
  	  'a',
  	  'abbr',
  	  'address',
  	  'article',
  	  'aside',
  	  'audio',
  	  'b',
  	  'blockquote',
  	  'body',
  	  'button',
  	  'canvas',
  	  'caption',
  	  'cite',
  	  'code',
  	  'dd',
  	  'del',
  	  'details',
  	  'dfn',
  	  'div',
  	  'dl',
  	  'dt',
  	  'em',
  	  'fieldset',
  	  'figcaption',
  	  'figure',
  	  'footer',
  	  'form',
  	  'h1',
  	  'h2',
  	  'h3',
  	  'h4',
  	  'h5',
  	  'h6',
  	  'header',
  	  'hgroup',
  	  'html',
  	  'i',
  	  'iframe',
  	  'img',
  	  'input',
  	  'ins',
  	  'kbd',
  	  'label',
  	  'legend',
  	  'li',
  	  'main',
  	  'mark',
  	  'menu',
  	  'nav',
  	  'object',
  	  'ol',
  	  'p',
  	  'q',
  	  'quote',
  	  'samp',
  	  'section',
  	  'span',
  	  'strong',
  	  'summary',
  	  'sup',
  	  'table',
  	  'tbody',
  	  'td',
  	  'textarea',
  	  'tfoot',
  	  'th',
  	  'thead',
  	  'time',
  	  'tr',
  	  'ul',
  	  'var',
  	  'video'
  	];

  	const MEDIA_FEATURES = [
  	  'any-hover',
  	  'any-pointer',
  	  'aspect-ratio',
  	  'color',
  	  'color-gamut',
  	  'color-index',
  	  'device-aspect-ratio',
  	  'device-height',
  	  'device-width',
  	  'display-mode',
  	  'forced-colors',
  	  'grid',
  	  'height',
  	  'hover',
  	  'inverted-colors',
  	  'monochrome',
  	  'orientation',
  	  'overflow-block',
  	  'overflow-inline',
  	  'pointer',
  	  'prefers-color-scheme',
  	  'prefers-contrast',
  	  'prefers-reduced-motion',
  	  'prefers-reduced-transparency',
  	  'resolution',
  	  'scan',
  	  'scripting',
  	  'update',
  	  'width',
  	  // TODO: find a better solution?
  	  'min-width',
  	  'max-width',
  	  'min-height',
  	  'max-height'
  	];

  	// https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes
  	const PSEUDO_CLASSES = [
  	  'active',
  	  'any-link',
  	  'blank',
  	  'checked',
  	  'current',
  	  'default',
  	  'defined',
  	  'dir', // dir()
  	  'disabled',
  	  'drop',
  	  'empty',
  	  'enabled',
  	  'first',
  	  'first-child',
  	  'first-of-type',
  	  'fullscreen',
  	  'future',
  	  'focus',
  	  'focus-visible',
  	  'focus-within',
  	  'has', // has()
  	  'host', // host or host()
  	  'host-context', // host-context()
  	  'hover',
  	  'indeterminate',
  	  'in-range',
  	  'invalid',
  	  'is', // is()
  	  'lang', // lang()
  	  'last-child',
  	  'last-of-type',
  	  'left',
  	  'link',
  	  'local-link',
  	  'not', // not()
  	  'nth-child', // nth-child()
  	  'nth-col', // nth-col()
  	  'nth-last-child', // nth-last-child()
  	  'nth-last-col', // nth-last-col()
  	  'nth-last-of-type', //nth-last-of-type()
  	  'nth-of-type', //nth-of-type()
  	  'only-child',
  	  'only-of-type',
  	  'optional',
  	  'out-of-range',
  	  'past',
  	  'placeholder-shown',
  	  'read-only',
  	  'read-write',
  	  'required',
  	  'right',
  	  'root',
  	  'scope',
  	  'target',
  	  'target-within',
  	  'user-invalid',
  	  'valid',
  	  'visited',
  	  'where' // where()
  	];

  	// https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements
  	const PSEUDO_ELEMENTS = [
  	  'after',
  	  'backdrop',
  	  'before',
  	  'cue',
  	  'cue-region',
  	  'first-letter',
  	  'first-line',
  	  'grammar-error',
  	  'marker',
  	  'part',
  	  'placeholder',
  	  'selection',
  	  'slotted',
  	  'spelling-error'
  	];

  	const ATTRIBUTES = [
  	  'align-content',
  	  'align-items',
  	  'align-self',
  	  'all',
  	  'animation',
  	  'animation-delay',
  	  'animation-direction',
  	  'animation-duration',
  	  'animation-fill-mode',
  	  'animation-iteration-count',
  	  'animation-name',
  	  'animation-play-state',
  	  'animation-timing-function',
  	  'backface-visibility',
  	  'background',
  	  'background-attachment',
  	  'background-blend-mode',
  	  'background-clip',
  	  'background-color',
  	  'background-image',
  	  'background-origin',
  	  'background-position',
  	  'background-repeat',
  	  'background-size',
  	  'block-size',
  	  'border',
  	  'border-block',
  	  'border-block-color',
  	  'border-block-end',
  	  'border-block-end-color',
  	  'border-block-end-style',
  	  'border-block-end-width',
  	  'border-block-start',
  	  'border-block-start-color',
  	  'border-block-start-style',
  	  'border-block-start-width',
  	  'border-block-style',
  	  'border-block-width',
  	  'border-bottom',
  	  'border-bottom-color',
  	  'border-bottom-left-radius',
  	  'border-bottom-right-radius',
  	  'border-bottom-style',
  	  'border-bottom-width',
  	  'border-collapse',
  	  'border-color',
  	  'border-image',
  	  'border-image-outset',
  	  'border-image-repeat',
  	  'border-image-slice',
  	  'border-image-source',
  	  'border-image-width',
  	  'border-inline',
  	  'border-inline-color',
  	  'border-inline-end',
  	  'border-inline-end-color',
  	  'border-inline-end-style',
  	  'border-inline-end-width',
  	  'border-inline-start',
  	  'border-inline-start-color',
  	  'border-inline-start-style',
  	  'border-inline-start-width',
  	  'border-inline-style',
  	  'border-inline-width',
  	  'border-left',
  	  'border-left-color',
  	  'border-left-style',
  	  'border-left-width',
  	  'border-radius',
  	  'border-right',
  	  'border-right-color',
  	  'border-right-style',
  	  'border-right-width',
  	  'border-spacing',
  	  'border-style',
  	  'border-top',
  	  'border-top-color',
  	  'border-top-left-radius',
  	  'border-top-right-radius',
  	  'border-top-style',
  	  'border-top-width',
  	  'border-width',
  	  'bottom',
  	  'box-decoration-break',
  	  'box-shadow',
  	  'box-sizing',
  	  'break-after',
  	  'break-before',
  	  'break-inside',
  	  'caption-side',
  	  'caret-color',
  	  'clear',
  	  'clip',
  	  'clip-path',
  	  'clip-rule',
  	  'color',
  	  'column-count',
  	  'column-fill',
  	  'column-gap',
  	  'column-rule',
  	  'column-rule-color',
  	  'column-rule-style',
  	  'column-rule-width',
  	  'column-span',
  	  'column-width',
  	  'columns',
  	  'contain',
  	  'content',
  	  'content-visibility',
  	  'counter-increment',
  	  'counter-reset',
  	  'cue',
  	  'cue-after',
  	  'cue-before',
  	  'cursor',
  	  'direction',
  	  'display',
  	  'empty-cells',
  	  'filter',
  	  'flex',
  	  'flex-basis',
  	  'flex-direction',
  	  'flex-flow',
  	  'flex-grow',
  	  'flex-shrink',
  	  'flex-wrap',
  	  'float',
  	  'flow',
  	  'font',
  	  'font-display',
  	  'font-family',
  	  'font-feature-settings',
  	  'font-kerning',
  	  'font-language-override',
  	  'font-size',
  	  'font-size-adjust',
  	  'font-smoothing',
  	  'font-stretch',
  	  'font-style',
  	  'font-synthesis',
  	  'font-variant',
  	  'font-variant-caps',
  	  'font-variant-east-asian',
  	  'font-variant-ligatures',
  	  'font-variant-numeric',
  	  'font-variant-position',
  	  'font-variation-settings',
  	  'font-weight',
  	  'gap',
  	  'glyph-orientation-vertical',
  	  'grid',
  	  'grid-area',
  	  'grid-auto-columns',
  	  'grid-auto-flow',
  	  'grid-auto-rows',
  	  'grid-column',
  	  'grid-column-end',
  	  'grid-column-start',
  	  'grid-gap',
  	  'grid-row',
  	  'grid-row-end',
  	  'grid-row-start',
  	  'grid-template',
  	  'grid-template-areas',
  	  'grid-template-columns',
  	  'grid-template-rows',
  	  'hanging-punctuation',
  	  'height',
  	  'hyphens',
  	  'icon',
  	  'image-orientation',
  	  'image-rendering',
  	  'image-resolution',
  	  'ime-mode',
  	  'inline-size',
  	  'isolation',
  	  'justify-content',
  	  'left',
  	  'letter-spacing',
  	  'line-break',
  	  'line-height',
  	  'list-style',
  	  'list-style-image',
  	  'list-style-position',
  	  'list-style-type',
  	  'margin',
  	  'margin-block',
  	  'margin-block-end',
  	  'margin-block-start',
  	  'margin-bottom',
  	  'margin-inline',
  	  'margin-inline-end',
  	  'margin-inline-start',
  	  'margin-left',
  	  'margin-right',
  	  'margin-top',
  	  'marks',
  	  'mask',
  	  'mask-border',
  	  'mask-border-mode',
  	  'mask-border-outset',
  	  'mask-border-repeat',
  	  'mask-border-slice',
  	  'mask-border-source',
  	  'mask-border-width',
  	  'mask-clip',
  	  'mask-composite',
  	  'mask-image',
  	  'mask-mode',
  	  'mask-origin',
  	  'mask-position',
  	  'mask-repeat',
  	  'mask-size',
  	  'mask-type',
  	  'max-block-size',
  	  'max-height',
  	  'max-inline-size',
  	  'max-width',
  	  'min-block-size',
  	  'min-height',
  	  'min-inline-size',
  	  'min-width',
  	  'mix-blend-mode',
  	  'nav-down',
  	  'nav-index',
  	  'nav-left',
  	  'nav-right',
  	  'nav-up',
  	  'none',
  	  'normal',
  	  'object-fit',
  	  'object-position',
  	  'opacity',
  	  'order',
  	  'orphans',
  	  'outline',
  	  'outline-color',
  	  'outline-offset',
  	  'outline-style',
  	  'outline-width',
  	  'overflow',
  	  'overflow-wrap',
  	  'overflow-x',
  	  'overflow-y',
  	  'padding',
  	  'padding-block',
  	  'padding-block-end',
  	  'padding-block-start',
  	  'padding-bottom',
  	  'padding-inline',
  	  'padding-inline-end',
  	  'padding-inline-start',
  	  'padding-left',
  	  'padding-right',
  	  'padding-top',
  	  'page-break-after',
  	  'page-break-before',
  	  'page-break-inside',
  	  'pause',
  	  'pause-after',
  	  'pause-before',
  	  'perspective',
  	  'perspective-origin',
  	  'pointer-events',
  	  'position',
  	  'quotes',
  	  'resize',
  	  'rest',
  	  'rest-after',
  	  'rest-before',
  	  'right',
  	  'row-gap',
  	  'scroll-margin',
  	  'scroll-margin-block',
  	  'scroll-margin-block-end',
  	  'scroll-margin-block-start',
  	  'scroll-margin-bottom',
  	  'scroll-margin-inline',
  	  'scroll-margin-inline-end',
  	  'scroll-margin-inline-start',
  	  'scroll-margin-left',
  	  'scroll-margin-right',
  	  'scroll-margin-top',
  	  'scroll-padding',
  	  'scroll-padding-block',
  	  'scroll-padding-block-end',
  	  'scroll-padding-block-start',
  	  'scroll-padding-bottom',
  	  'scroll-padding-inline',
  	  'scroll-padding-inline-end',
  	  'scroll-padding-inline-start',
  	  'scroll-padding-left',
  	  'scroll-padding-right',
  	  'scroll-padding-top',
  	  'scroll-snap-align',
  	  'scroll-snap-stop',
  	  'scroll-snap-type',
  	  'scrollbar-color',
  	  'scrollbar-gutter',
  	  'scrollbar-width',
  	  'shape-image-threshold',
  	  'shape-margin',
  	  'shape-outside',
  	  'speak',
  	  'speak-as',
  	  'src', // @font-face
  	  'tab-size',
  	  'table-layout',
  	  'text-align',
  	  'text-align-all',
  	  'text-align-last',
  	  'text-combine-upright',
  	  'text-decoration',
  	  'text-decoration-color',
  	  'text-decoration-line',
  	  'text-decoration-style',
  	  'text-emphasis',
  	  'text-emphasis-color',
  	  'text-emphasis-position',
  	  'text-emphasis-style',
  	  'text-indent',
  	  'text-justify',
  	  'text-orientation',
  	  'text-overflow',
  	  'text-rendering',
  	  'text-shadow',
  	  'text-transform',
  	  'text-underline-position',
  	  'top',
  	  'transform',
  	  'transform-box',
  	  'transform-origin',
  	  'transform-style',
  	  'transition',
  	  'transition-delay',
  	  'transition-duration',
  	  'transition-property',
  	  'transition-timing-function',
  	  'unicode-bidi',
  	  'vertical-align',
  	  'visibility',
  	  'voice-balance',
  	  'voice-duration',
  	  'voice-family',
  	  'voice-pitch',
  	  'voice-range',
  	  'voice-rate',
  	  'voice-stress',
  	  'voice-volume',
  	  'white-space',
  	  'widows',
  	  'width',
  	  'will-change',
  	  'word-break',
  	  'word-spacing',
  	  'word-wrap',
  	  'writing-mode',
  	  'z-index'
  	  // reverse makes sure longer attributes `font-weight` are matched fully
  	  // instead of getting false positives on say `font`
  	].reverse();

  	// some grammars use them all as a single group
  	const PSEUDO_SELECTORS = PSEUDO_CLASSES.concat(PSEUDO_ELEMENTS);

  	/*
  	Language: Less
  	Description: It's CSS, with just a little more.
  	Author:   Max Mikhailov <seven.phases.max@gmail.com>
  	Website: http://lesscss.org
  	Category: common, css, web
  	*/

  	/** @type LanguageFn */
  	function less(hljs) {
  	  const modes = MODES(hljs);
  	  const PSEUDO_SELECTORS$1 = PSEUDO_SELECTORS;

  	  const AT_MODIFIERS = "and or not only";
  	  const IDENT_RE = '[\\w-]+'; // yes, Less identifiers may begin with a digit
  	  const INTERP_IDENT_RE = '(' + IDENT_RE + '|@\\{' + IDENT_RE + '\\})';

  	  /* Generic Modes */

  	  const RULES = []; const VALUE_MODES = []; // forward def. for recursive modes

  	  const STRING_MODE = function(c) {
  	    return {
  	    // Less strings are not multiline (also include '~' for more consistent coloring of "escaped" strings)
  	      className: 'string',
  	      begin: '~?' + c + '.*?' + c
  	    };
  	  };

  	  const IDENT_MODE = function(name, begin, relevance) {
  	    return {
  	      className: name,
  	      begin: begin,
  	      relevance: relevance
  	    };
  	  };

  	  const AT_KEYWORDS = {
  	    $pattern: /[a-z-]+/,
  	    keyword: AT_MODIFIERS,
  	    attribute: MEDIA_FEATURES.join(" ")
  	  };

  	  const PARENS_MODE = {
  	    // used only to properly balance nested parens inside mixin call, def. arg list
  	    begin: '\\(',
  	    end: '\\)',
  	    contains: VALUE_MODES,
  	    keywords: AT_KEYWORDS,
  	    relevance: 0
  	  };

  	  // generic Less highlighter (used almost everywhere except selectors):
  	  VALUE_MODES.push(
  	    hljs.C_LINE_COMMENT_MODE,
  	    hljs.C_BLOCK_COMMENT_MODE,
  	    STRING_MODE("'"),
  	    STRING_MODE('"'),
  	    modes.CSS_NUMBER_MODE, // fixme: it does not include dot for numbers like .5em :(
  	    {
  	      begin: '(url|data-uri)\\(',
  	      starts: {
  	        className: 'string',
  	        end: '[\\)\\n]',
  	        excludeEnd: true
  	      }
  	    },
  	    modes.HEXCOLOR,
  	    PARENS_MODE,
  	    IDENT_MODE('variable', '@@?' + IDENT_RE, 10),
  	    IDENT_MODE('variable', '@\\{' + IDENT_RE + '\\}'),
  	    IDENT_MODE('built_in', '~?`[^`]*?`'), // inline javascript (or whatever host language) *multiline* string
  	    { // @media features (it’s here to not duplicate things in AT_RULE_MODE with extra PARENS_MODE overriding):
  	      className: 'attribute',
  	      begin: IDENT_RE + '\\s*:',
  	      end: ':',
  	      returnBegin: true,
  	      excludeEnd: true
  	    },
  	    modes.IMPORTANT,
  	    { beginKeywords: 'and not' },
  	    modes.FUNCTION_DISPATCH
  	  );

  	  const VALUE_WITH_RULESETS = VALUE_MODES.concat({
  	    begin: /\{/,
  	    end: /\}/,
  	    contains: RULES
  	  });

  	  const MIXIN_GUARD_MODE = {
  	    beginKeywords: 'when',
  	    endsWithParent: true,
  	    contains: [ { beginKeywords: 'and not' } ].concat(VALUE_MODES) // using this form to override VALUE’s 'function' match
  	  };

  	  /* Rule-Level Modes */

  	  const RULE_MODE = {
  	    begin: INTERP_IDENT_RE + '\\s*:',
  	    returnBegin: true,
  	    end: /[;}]/,
  	    relevance: 0,
  	    contains: [
  	      { begin: /-(webkit|moz|ms|o)-/ },
  	      modes.CSS_VARIABLE,
  	      {
  	        className: 'attribute',
  	        begin: '\\b(' + ATTRIBUTES.join('|') + ')\\b',
  	        end: /(?=:)/,
  	        starts: {
  	          endsWithParent: true,
  	          illegal: '[<=$]',
  	          relevance: 0,
  	          contains: VALUE_MODES
  	        }
  	      }
  	    ]
  	  };

  	  const AT_RULE_MODE = {
  	    className: 'keyword',
  	    begin: '@(import|media|charset|font-face|(-[a-z]+-)?keyframes|supports|document|namespace|page|viewport|host)\\b',
  	    starts: {
  	      end: '[;{}]',
  	      keywords: AT_KEYWORDS,
  	      returnEnd: true,
  	      contains: VALUE_MODES,
  	      relevance: 0
  	    }
  	  };

  	  // variable definitions and calls
  	  const VAR_RULE_MODE = {
  	    className: 'variable',
  	    variants: [
  	      // using more strict pattern for higher relevance to increase chances of Less detection.
  	      // this is *the only* Less specific statement used in most of the sources, so...
  	      // (we’ll still often loose to the css-parser unless there's '//' comment,
  	      // simply because 1 variable just can't beat 99 properties :)
  	      {
  	        begin: '@' + IDENT_RE + '\\s*:',
  	        relevance: 15
  	      },
  	      { begin: '@' + IDENT_RE }
  	    ],
  	    starts: {
  	      end: '[;}]',
  	      returnEnd: true,
  	      contains: VALUE_WITH_RULESETS
  	    }
  	  };

  	  const SELECTOR_MODE = {
  	    // first parse unambiguous selectors (i.e. those not starting with tag)
  	    // then fall into the scary lookahead-discriminator variant.
  	    // this mode also handles mixin definitions and calls
  	    variants: [
  	      {
  	        begin: '[\\.#:&\\[>]',
  	        end: '[;{}]' // mixin calls end with ';'
  	      },
  	      {
  	        begin: INTERP_IDENT_RE,
  	        end: /\{/
  	      }
  	    ],
  	    returnBegin: true,
  	    returnEnd: true,
  	    illegal: '[<=\'$"]',
  	    relevance: 0,
  	    contains: [
  	      hljs.C_LINE_COMMENT_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE,
  	      MIXIN_GUARD_MODE,
  	      IDENT_MODE('keyword', 'all\\b'),
  	      IDENT_MODE('variable', '@\\{' + IDENT_RE + '\\}'), // otherwise it’s identified as tag
  	      
  	      {
  	        begin: '\\b(' + TAGS.join('|') + ')\\b',
  	        className: 'selector-tag'
  	      },
  	      modes.CSS_NUMBER_MODE,
  	      IDENT_MODE('selector-tag', INTERP_IDENT_RE, 0),
  	      IDENT_MODE('selector-id', '#' + INTERP_IDENT_RE),
  	      IDENT_MODE('selector-class', '\\.' + INTERP_IDENT_RE, 0),
  	      IDENT_MODE('selector-tag', '&', 0),
  	      modes.ATTRIBUTE_SELECTOR_MODE,
  	      {
  	        className: 'selector-pseudo',
  	        begin: ':(' + PSEUDO_CLASSES.join('|') + ')'
  	      },
  	      {
  	        className: 'selector-pseudo',
  	        begin: ':(:)?(' + PSEUDO_ELEMENTS.join('|') + ')'
  	      },
  	      {
  	        begin: /\(/,
  	        end: /\)/,
  	        relevance: 0,
  	        contains: VALUE_WITH_RULESETS
  	      }, // argument list of parametric mixins
  	      { begin: '!important' }, // eat !important after mixin call or it will be colored as tag
  	      modes.FUNCTION_DISPATCH
  	    ]
  	  };

  	  const PSEUDO_SELECTOR_MODE = {
  	    begin: IDENT_RE + ':(:)?' + `(${PSEUDO_SELECTORS$1.join('|')})`,
  	    returnBegin: true,
  	    contains: [ SELECTOR_MODE ]
  	  };

  	  RULES.push(
  	    hljs.C_LINE_COMMENT_MODE,
  	    hljs.C_BLOCK_COMMENT_MODE,
  	    AT_RULE_MODE,
  	    VAR_RULE_MODE,
  	    PSEUDO_SELECTOR_MODE,
  	    RULE_MODE,
  	    SELECTOR_MODE,
  	    MIXIN_GUARD_MODE,
  	    modes.FUNCTION_DISPATCH
  	  );

  	  return {
  	    name: 'Less',
  	    case_insensitive: true,
  	    illegal: '[=>\'/<($"]',
  	    contains: RULES
  	  };
  	}

  	less_1 = less;
  	return less_1;
  }

  /*
  Language: Lisp
  Description: Generic lisp syntax
  Author: Vasily Polovnyov <vast@whiteants.net>
  Category: lisp
  */

  var lisp_1;
  var hasRequiredLisp;

  function requireLisp () {
  	if (hasRequiredLisp) return lisp_1;
  	hasRequiredLisp = 1;
  	function lisp(hljs) {
  	  const LISP_IDENT_RE = '[a-zA-Z_\\-+\\*\\/<=>&#][a-zA-Z0-9_\\-+*\\/<=>&#!]*';
  	  const MEC_RE = '\\|[^]*?\\|';
  	  const LISP_SIMPLE_NUMBER_RE = '(-|\\+)?\\d+(\\.\\d+|\\/\\d+)?((d|e|f|l|s|D|E|F|L|S)(\\+|-)?\\d+)?';
  	  const LITERAL = {
  	    className: 'literal',
  	    begin: '\\b(t{1}|nil)\\b'
  	  };
  	  const NUMBER = {
  	    className: 'number',
  	    variants: [
  	      {
  	        begin: LISP_SIMPLE_NUMBER_RE,
  	        relevance: 0
  	      },
  	      { begin: '#(b|B)[0-1]+(/[0-1]+)?' },
  	      { begin: '#(o|O)[0-7]+(/[0-7]+)?' },
  	      { begin: '#(x|X)[0-9a-fA-F]+(/[0-9a-fA-F]+)?' },
  	      {
  	        begin: '#(c|C)\\(' + LISP_SIMPLE_NUMBER_RE + ' +' + LISP_SIMPLE_NUMBER_RE,
  	        end: '\\)'
  	      }
  	    ]
  	  };
  	  const STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null });
  	  const COMMENT = hljs.COMMENT(
  	    ';', '$',
  	    { relevance: 0 }
  	  );
  	  const VARIABLE = {
  	    begin: '\\*',
  	    end: '\\*'
  	  };
  	  const KEYWORD = {
  	    className: 'symbol',
  	    begin: '[:&]' + LISP_IDENT_RE
  	  };
  	  const IDENT = {
  	    begin: LISP_IDENT_RE,
  	    relevance: 0
  	  };
  	  const MEC = { begin: MEC_RE };
  	  const QUOTED_LIST = {
  	    begin: '\\(',
  	    end: '\\)',
  	    contains: [
  	      'self',
  	      LITERAL,
  	      STRING,
  	      NUMBER,
  	      IDENT
  	    ]
  	  };
  	  const QUOTED = {
  	    contains: [
  	      NUMBER,
  	      STRING,
  	      VARIABLE,
  	      KEYWORD,
  	      QUOTED_LIST,
  	      IDENT
  	    ],
  	    variants: [
  	      {
  	        begin: '[\'`]\\(',
  	        end: '\\)'
  	      },
  	      {
  	        begin: '\\(quote ',
  	        end: '\\)',
  	        keywords: { name: 'quote' }
  	      },
  	      { begin: '\'' + MEC_RE }
  	    ]
  	  };
  	  const QUOTED_ATOM = { variants: [
  	    { begin: '\'' + LISP_IDENT_RE },
  	    { begin: '#\'' + LISP_IDENT_RE + '(::' + LISP_IDENT_RE + ')*' }
  	  ] };
  	  const LIST = {
  	    begin: '\\(\\s*',
  	    end: '\\)'
  	  };
  	  const BODY = {
  	    endsWithParent: true,
  	    relevance: 0
  	  };
  	  LIST.contains = [
  	    {
  	      className: 'name',
  	      variants: [
  	        {
  	          begin: LISP_IDENT_RE,
  	          relevance: 0,
  	        },
  	        { begin: MEC_RE }
  	      ]
  	    },
  	    BODY
  	  ];
  	  BODY.contains = [
  	    QUOTED,
  	    QUOTED_ATOM,
  	    LIST,
  	    LITERAL,
  	    NUMBER,
  	    STRING,
  	    COMMENT,
  	    VARIABLE,
  	    KEYWORD,
  	    MEC,
  	    IDENT
  	  ];

  	  return {
  	    name: 'Lisp',
  	    illegal: /\S/,
  	    contains: [
  	      NUMBER,
  	      hljs.SHEBANG(),
  	      LITERAL,
  	      STRING,
  	      COMMENT,
  	      QUOTED,
  	      QUOTED_ATOM,
  	      LIST,
  	      IDENT
  	    ]
  	  };
  	}

  	lisp_1 = lisp;
  	return lisp_1;
  }

  /*
  Language: LiveCode
  Author: Ralf Bitter <rabit@revigniter.com>
  Description: Language definition for LiveCode server accounting for revIgniter (a web application framework) characteristics.
  Version: 1.1
  Date: 2019-04-17
  Category: enterprise
  */

  var livecodeserver_1;
  var hasRequiredLivecodeserver;

  function requireLivecodeserver () {
  	if (hasRequiredLivecodeserver) return livecodeserver_1;
  	hasRequiredLivecodeserver = 1;
  	function livecodeserver(hljs) {
  	  const VARIABLE = {
  	    className: 'variable',
  	    variants: [
  	      { begin: '\\b([gtps][A-Z]{1}[a-zA-Z0-9]*)(\\[.+\\])?(?:\\s*?)' },
  	      { begin: '\\$_[A-Z]+' }
  	    ],
  	    relevance: 0
  	  };
  	  const COMMENT_MODES = [
  	    hljs.C_BLOCK_COMMENT_MODE,
  	    hljs.HASH_COMMENT_MODE,
  	    hljs.COMMENT('--', '$'),
  	    hljs.COMMENT('[^:]//', '$')
  	  ];
  	  const TITLE1 = hljs.inherit(hljs.TITLE_MODE, { variants: [
  	    { begin: '\\b_*rig[A-Z][A-Za-z0-9_\\-]*' },
  	    { begin: '\\b_[a-z0-9\\-]+' }
  	  ] });
  	  const TITLE2 = hljs.inherit(hljs.TITLE_MODE, { begin: '\\b([A-Za-z0-9_\\-]+)\\b' });
  	  return {
  	    name: 'LiveCode',
  	    case_insensitive: false,
  	    keywords: {
  	      keyword:
  	        '$_COOKIE $_FILES $_GET $_GET_BINARY $_GET_RAW $_POST $_POST_BINARY $_POST_RAW $_SESSION $_SERVER '
  	        + 'codepoint codepoints segment segments codeunit codeunits sentence sentences trueWord trueWords paragraph '
  	        + 'after byte bytes english the until http forever descending using line real8 with seventh '
  	        + 'for stdout finally element word words fourth before black ninth sixth characters chars stderr '
  	        + 'uInt1 uInt1s uInt2 uInt2s stdin string lines relative rel any fifth items from middle mid '
  	        + 'at else of catch then third it file milliseconds seconds second secs sec int1 int1s int4 '
  	        + 'int4s internet int2 int2s normal text item last long detailed effective uInt4 uInt4s repeat '
  	        + 'end repeat URL in try into switch to words https token binfile each tenth as ticks tick '
  	        + 'system real4 by dateItems without char character ascending eighth whole dateTime numeric short '
  	        + 'first ftp integer abbreviated abbr abbrev private case while if '
  	        + 'div mod wrap and or bitAnd bitNot bitOr bitXor among not in a an within '
  	        + 'contains ends with begins the keys of keys',
  	      literal:
  	        'SIX TEN FORMFEED NINE ZERO NONE SPACE FOUR FALSE COLON CRLF PI COMMA ENDOFFILE EOF EIGHT FIVE '
  	        + 'QUOTE EMPTY ONE TRUE RETURN CR LINEFEED RIGHT BACKSLASH NULL SEVEN TAB THREE TWO '
  	        + 'six ten formfeed nine zero none space four false colon crlf pi comma endoffile eof eight five '
  	        + 'quote empty one true return cr linefeed right backslash null seven tab three two '
  	        + 'RIVERSION RISTATE FILE_READ_MODE FILE_WRITE_MODE FILE_WRITE_MODE DIR_WRITE_MODE FILE_READ_UMASK '
  	        + 'FILE_WRITE_UMASK DIR_READ_UMASK DIR_WRITE_UMASK',
  	      built_in:
  	        'put abs acos aliasReference annuity arrayDecode arrayEncode asin atan atan2 average avg avgDev base64Decode '
  	        + 'base64Encode baseConvert binaryDecode binaryEncode byteOffset byteToNum cachedURL cachedURLs charToNum '
  	        + 'cipherNames codepointOffset codepointProperty codepointToNum codeunitOffset commandNames compound compress '
  	        + 'constantNames cos date dateFormat decompress difference directories '
  	        + 'diskSpace DNSServers exp exp1 exp2 exp10 extents files flushEvents folders format functionNames geometricMean global '
  	        + 'globals hasMemory harmonicMean hostAddress hostAddressToName hostName hostNameToAddress isNumber ISOToMac itemOffset '
  	        + 'keys len length libURLErrorData libUrlFormData libURLftpCommand libURLLastHTTPHeaders libURLLastRHHeaders '
  	        + 'libUrlMultipartFormAddPart libUrlMultipartFormData libURLVersion lineOffset ln ln1 localNames log log2 log10 '
  	        + 'longFilePath lower macToISO matchChunk matchText matrixMultiply max md5Digest median merge messageAuthenticationCode messageDigest millisec '
  	        + 'millisecs millisecond milliseconds min monthNames nativeCharToNum normalizeText num number numToByte numToChar '
  	        + 'numToCodepoint numToNativeChar offset open openfiles openProcesses openProcessIDs openSockets '
  	        + 'paragraphOffset paramCount param params peerAddress pendingMessages platform popStdDev populationStandardDeviation '
  	        + 'populationVariance popVariance processID random randomBytes replaceText result revCreateXMLTree revCreateXMLTreeFromFile '
  	        + 'revCurrentRecord revCurrentRecordIsFirst revCurrentRecordIsLast revDatabaseColumnCount revDatabaseColumnIsNull '
  	        + 'revDatabaseColumnLengths revDatabaseColumnNames revDatabaseColumnNamed revDatabaseColumnNumbered '
  	        + 'revDatabaseColumnTypes revDatabaseConnectResult revDatabaseCursors revDatabaseID revDatabaseTableNames '
  	        + 'revDatabaseType revDataFromQuery revdb_closeCursor revdb_columnbynumber revdb_columncount revdb_columnisnull '
  	        + 'revdb_columnlengths revdb_columnnames revdb_columntypes revdb_commit revdb_connect revdb_connections '
  	        + 'revdb_connectionerr revdb_currentrecord revdb_cursorconnection revdb_cursorerr revdb_cursors revdb_dbtype '
  	        + 'revdb_disconnect revdb_execute revdb_iseof revdb_isbof revdb_movefirst revdb_movelast revdb_movenext '
  	        + 'revdb_moveprev revdb_query revdb_querylist revdb_recordcount revdb_rollback revdb_tablenames '
  	        + 'revGetDatabaseDriverPath revNumberOfRecords revOpenDatabase revOpenDatabases revQueryDatabase '
  	        + 'revQueryDatabaseBlob revQueryResult revQueryIsAtStart revQueryIsAtEnd revUnixFromMacPath revXMLAttribute '
  	        + 'revXMLAttributes revXMLAttributeValues revXMLChildContents revXMLChildNames revXMLCreateTreeFromFileWithNamespaces '
  	        + 'revXMLCreateTreeWithNamespaces revXMLDataFromXPathQuery revXMLEvaluateXPath revXMLFirstChild revXMLMatchingNode '
  	        + 'revXMLNextSibling revXMLNodeContents revXMLNumberOfChildren revXMLParent revXMLPreviousSibling '
  	        + 'revXMLRootNode revXMLRPC_CreateRequest revXMLRPC_Documents revXMLRPC_Error '
  	        + 'revXMLRPC_GetHost revXMLRPC_GetMethod revXMLRPC_GetParam revXMLText revXMLRPC_Execute '
  	        + 'revXMLRPC_GetParamCount revXMLRPC_GetParamNode revXMLRPC_GetParamType revXMLRPC_GetPath revXMLRPC_GetPort '
  	        + 'revXMLRPC_GetProtocol revXMLRPC_GetRequest revXMLRPC_GetResponse revXMLRPC_GetSocket revXMLTree '
  	        + 'revXMLTrees revXMLValidateDTD revZipDescribeItem revZipEnumerateItems revZipOpenArchives round sampVariance '
  	        + 'sec secs seconds sentenceOffset sha1Digest shell shortFilePath sin specialFolderPath sqrt standardDeviation statRound '
  	        + 'stdDev sum sysError systemVersion tan tempName textDecode textEncode tick ticks time to tokenOffset toLower toUpper '
  	        + 'transpose truewordOffset trunc uniDecode uniEncode upper URLDecode URLEncode URLStatus uuid value variableNames '
  	        + 'variance version waitDepth weekdayNames wordOffset xsltApplyStylesheet xsltApplyStylesheetFromFile xsltLoadStylesheet '
  	        + 'xsltLoadStylesheetFromFile add breakpoint cancel clear local variable file word line folder directory URL close socket process '
  	        + 'combine constant convert create new alias folder directory decrypt delete variable word line folder '
  	        + 'directory URL dispatch divide do encrypt filter get include intersect kill libURLDownloadToFile '
  	        + 'libURLFollowHttpRedirects libURLftpUpload libURLftpUploadFile libURLresetAll libUrlSetAuthCallback libURLSetDriver '
  	        + 'libURLSetCustomHTTPHeaders libUrlSetExpect100 libURLSetFTPListCommand libURLSetFTPMode libURLSetFTPStopTime '
  	        + 'libURLSetStatusCallback load extension loadedExtensions multiply socket prepare process post seek rel relative read from process rename '
  	        + 'replace require resetAll resolve revAddXMLNode revAppendXML revCloseCursor revCloseDatabase revCommitDatabase '
  	        + 'revCopyFile revCopyFolder revCopyXMLNode revDeleteFolder revDeleteXMLNode revDeleteAllXMLTrees '
  	        + 'revDeleteXMLTree revExecuteSQL revGoURL revInsertXMLNode revMoveFolder revMoveToFirstRecord revMoveToLastRecord '
  	        + 'revMoveToNextRecord revMoveToPreviousRecord revMoveToRecord revMoveXMLNode revPutIntoXMLNode revRollBackDatabase '
  	        + 'revSetDatabaseDriverPath revSetXMLAttribute revXMLRPC_AddParam revXMLRPC_DeleteAllDocuments revXMLAddDTD '
  	        + 'revXMLRPC_Free revXMLRPC_FreeAll revXMLRPC_DeleteDocument revXMLRPC_DeleteParam revXMLRPC_SetHost '
  	        + 'revXMLRPC_SetMethod revXMLRPC_SetPort revXMLRPC_SetProtocol revXMLRPC_SetSocket revZipAddItemWithData '
  	        + 'revZipAddItemWithFile revZipAddUncompressedItemWithData revZipAddUncompressedItemWithFile revZipCancel '
  	        + 'revZipCloseArchive revZipDeleteItem revZipExtractItemToFile revZipExtractItemToVariable revZipSetProgressCallback '
  	        + 'revZipRenameItem revZipReplaceItemWithData revZipReplaceItemWithFile revZipOpenArchive send set sort split start stop '
  	        + 'subtract symmetric union unload vectorDotProduct wait write'
  	    },
  	    contains: [
  	      VARIABLE,
  	      {
  	        className: 'keyword',
  	        begin: '\\bend\\sif\\b'
  	      },
  	      {
  	        className: 'function',
  	        beginKeywords: 'function',
  	        end: '$',
  	        contains: [
  	          VARIABLE,
  	          TITLE2,
  	          hljs.APOS_STRING_MODE,
  	          hljs.QUOTE_STRING_MODE,
  	          hljs.BINARY_NUMBER_MODE,
  	          hljs.C_NUMBER_MODE,
  	          TITLE1
  	        ]
  	      },
  	      {
  	        className: 'function',
  	        begin: '\\bend\\s+',
  	        end: '$',
  	        keywords: 'end',
  	        contains: [
  	          TITLE2,
  	          TITLE1
  	        ],
  	        relevance: 0
  	      },
  	      {
  	        beginKeywords: 'command on',
  	        end: '$',
  	        contains: [
  	          VARIABLE,
  	          TITLE2,
  	          hljs.APOS_STRING_MODE,
  	          hljs.QUOTE_STRING_MODE,
  	          hljs.BINARY_NUMBER_MODE,
  	          hljs.C_NUMBER_MODE,
  	          TITLE1
  	        ]
  	      },
  	      {
  	        className: 'meta',
  	        variants: [
  	          {
  	            begin: '<\\?(rev|lc|livecode)',
  	            relevance: 10
  	          },
  	          { begin: '<\\?' },
  	          { begin: '\\?>' }
  	        ]
  	      },
  	      hljs.APOS_STRING_MODE,
  	      hljs.QUOTE_STRING_MODE,
  	      hljs.BINARY_NUMBER_MODE,
  	      hljs.C_NUMBER_MODE,
  	      TITLE1
  	    ].concat(COMMENT_MODES),
  	    illegal: ';$|^\\[|^=|&|\\{'
  	  };
  	}

  	livecodeserver_1 = livecodeserver;
  	return livecodeserver_1;
  }

  var livescript_1;
  var hasRequiredLivescript;

  function requireLivescript () {
  	if (hasRequiredLivescript) return livescript_1;
  	hasRequiredLivescript = 1;
  	const KEYWORDS = [
  	  "as", // for exports
  	  "in",
  	  "of",
  	  "if",
  	  "for",
  	  "while",
  	  "finally",
  	  "var",
  	  "new",
  	  "function",
  	  "do",
  	  "return",
  	  "void",
  	  "else",
  	  "break",
  	  "catch",
  	  "instanceof",
  	  "with",
  	  "throw",
  	  "case",
  	  "default",
  	  "try",
  	  "switch",
  	  "continue",
  	  "typeof",
  	  "delete",
  	  "let",
  	  "yield",
  	  "const",
  	  "class",
  	  // JS handles these with a special rule
  	  // "get",
  	  // "set",
  	  "debugger",
  	  "async",
  	  "await",
  	  "static",
  	  "import",
  	  "from",
  	  "export",
  	  "extends"
  	];
  	const LITERALS = [
  	  "true",
  	  "false",
  	  "null",
  	  "undefined",
  	  "NaN",
  	  "Infinity"
  	];

  	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects
  	const TYPES = [
  	  // Fundamental objects
  	  "Object",
  	  "Function",
  	  "Boolean",
  	  "Symbol",
  	  // numbers and dates
  	  "Math",
  	  "Date",
  	  "Number",
  	  "BigInt",
  	  // text
  	  "String",
  	  "RegExp",
  	  // Indexed collections
  	  "Array",
  	  "Float32Array",
  	  "Float64Array",
  	  "Int8Array",
  	  "Uint8Array",
  	  "Uint8ClampedArray",
  	  "Int16Array",
  	  "Int32Array",
  	  "Uint16Array",
  	  "Uint32Array",
  	  "BigInt64Array",
  	  "BigUint64Array",
  	  // Keyed collections
  	  "Set",
  	  "Map",
  	  "WeakSet",
  	  "WeakMap",
  	  // Structured data
  	  "ArrayBuffer",
  	  "SharedArrayBuffer",
  	  "Atomics",
  	  "DataView",
  	  "JSON",
  	  // Control abstraction objects
  	  "Promise",
  	  "Generator",
  	  "GeneratorFunction",
  	  "AsyncFunction",
  	  // Reflection
  	  "Reflect",
  	  "Proxy",
  	  // Internationalization
  	  "Intl",
  	  // WebAssembly
  	  "WebAssembly"
  	];

  	const ERROR_TYPES = [
  	  "Error",
  	  "EvalError",
  	  "InternalError",
  	  "RangeError",
  	  "ReferenceError",
  	  "SyntaxError",
  	  "TypeError",
  	  "URIError"
  	];

  	const BUILT_IN_GLOBALS = [
  	  "setInterval",
  	  "setTimeout",
  	  "clearInterval",
  	  "clearTimeout",

  	  "require",
  	  "exports",

  	  "eval",
  	  "isFinite",
  	  "isNaN",
  	  "parseFloat",
  	  "parseInt",
  	  "decodeURI",
  	  "decodeURIComponent",
  	  "encodeURI",
  	  "encodeURIComponent",
  	  "escape",
  	  "unescape"
  	];

  	const BUILT_INS = [].concat(
  	  BUILT_IN_GLOBALS,
  	  TYPES,
  	  ERROR_TYPES
  	);

  	/*
  	Language: LiveScript
  	Author: Taneli Vatanen <taneli.vatanen@gmail.com>
  	Contributors: Jen Evers-Corvina <jen@sevvie.net>
  	Origin: coffeescript.js
  	Description: LiveScript is a programming language that transcompiles to JavaScript. For info about language see http://livescript.net/
  	Website: https://livescript.net
  	Category: scripting
  	*/

  	function livescript(hljs) {
  	  const LIVESCRIPT_BUILT_INS = [
  	    'npm',
  	    'print'
  	  ];
  	  const LIVESCRIPT_LITERALS = [
  	    'yes',
  	    'no',
  	    'on',
  	    'off',
  	    'it',
  	    'that',
  	    'void'
  	  ];
  	  const LIVESCRIPT_KEYWORDS = [
  	    'then',
  	    'unless',
  	    'until',
  	    'loop',
  	    'of',
  	    'by',
  	    'when',
  	    'and',
  	    'or',
  	    'is',
  	    'isnt',
  	    'not',
  	    'it',
  	    'that',
  	    'otherwise',
  	    'from',
  	    'to',
  	    'til',
  	    'fallthrough',
  	    'case',
  	    'enum',
  	    'native',
  	    'list',
  	    'map',
  	    '__hasProp',
  	    '__extends',
  	    '__slice',
  	    '__bind',
  	    '__indexOf'
  	  ];
  	  const KEYWORDS$1 = {
  	    keyword: KEYWORDS.concat(LIVESCRIPT_KEYWORDS),
  	    literal: LITERALS.concat(LIVESCRIPT_LITERALS),
  	    built_in: BUILT_INS.concat(LIVESCRIPT_BUILT_INS)
  	  };
  	  const JS_IDENT_RE = '[A-Za-z$_](?:-[0-9A-Za-z$_]|[0-9A-Za-z$_])*';
  	  const TITLE = hljs.inherit(hljs.TITLE_MODE, { begin: JS_IDENT_RE });
  	  const SUBST = {
  	    className: 'subst',
  	    begin: /#\{/,
  	    end: /\}/,
  	    keywords: KEYWORDS$1
  	  };
  	  const SUBST_SIMPLE = {
  	    className: 'subst',
  	    begin: /#[A-Za-z$_]/,
  	    end: /(?:-[0-9A-Za-z$_]|[0-9A-Za-z$_])*/,
  	    keywords: KEYWORDS$1
  	  };
  	  const EXPRESSIONS = [
  	    hljs.BINARY_NUMBER_MODE,
  	    {
  	      className: 'number',
  	      begin: '(\\b0[xX][a-fA-F0-9_]+)|(\\b\\d(\\d|_\\d)*(\\.(\\d(\\d|_\\d)*)?)?(_*[eE]([-+]\\d(_\\d|\\d)*)?)?[_a-z]*)',
  	      relevance: 0,
  	      starts: {
  	        end: '(\\s*/)?',
  	        relevance: 0
  	      } // a number tries to eat the following slash to prevent treating it as a regexp
  	    },
  	    {
  	      className: 'string',
  	      variants: [
  	        {
  	          begin: /'''/,
  	          end: /'''/,
  	          contains: [ hljs.BACKSLASH_ESCAPE ]
  	        },
  	        {
  	          begin: /'/,
  	          end: /'/,
  	          contains: [ hljs.BACKSLASH_ESCAPE ]
  	        },
  	        {
  	          begin: /"""/,
  	          end: /"""/,
  	          contains: [
  	            hljs.BACKSLASH_ESCAPE,
  	            SUBST,
  	            SUBST_SIMPLE
  	          ]
  	        },
  	        {
  	          begin: /"/,
  	          end: /"/,
  	          contains: [
  	            hljs.BACKSLASH_ESCAPE,
  	            SUBST,
  	            SUBST_SIMPLE
  	          ]
  	        },
  	        {
  	          begin: /\\/,
  	          end: /(\s|$)/,
  	          excludeEnd: true
  	        }
  	      ]
  	    },
  	    {
  	      className: 'regexp',
  	      variants: [
  	        {
  	          begin: '//',
  	          end: '//[gim]*',
  	          contains: [
  	            SUBST,
  	            hljs.HASH_COMMENT_MODE
  	          ]
  	        },
  	        {
  	          // regex can't start with space to parse x / 2 / 3 as two divisions
  	          // regex can't start with *, and it supports an "illegal" in the main mode
  	          begin: /\/(?![ *])(\\.|[^\\\n])*?\/[gim]*(?=\W)/ }
  	      ]
  	    },
  	    { begin: '@' + JS_IDENT_RE },
  	    {
  	      begin: '``',
  	      end: '``',
  	      excludeBegin: true,
  	      excludeEnd: true,
  	      subLanguage: 'javascript'
  	    }
  	  ];
  	  SUBST.contains = EXPRESSIONS;

  	  const PARAMS = {
  	    className: 'params',
  	    begin: '\\(',
  	    returnBegin: true,
  	    /* We need another contained nameless mode to not have every nested
  	    pair of parens to be called "params" */
  	    contains: [
  	      {
  	        begin: /\(/,
  	        end: /\)/,
  	        keywords: KEYWORDS$1,
  	        contains: [ 'self' ].concat(EXPRESSIONS)
  	      }
  	    ]
  	  };

  	  const SYMBOLS = { begin: '(#=>|=>|\\|>>|-?->|!->)' };

  	  const CLASS_DEFINITION = {
  	    variants: [
  	      { match: [
  	        /class\s+/,
  	        JS_IDENT_RE,
  	        /\s+extends\s+/,
  	        JS_IDENT_RE
  	      ] },
  	      { match: [
  	        /class\s+/,
  	        JS_IDENT_RE
  	      ] }
  	    ],
  	    scope: {
  	      2: "title.class",
  	      4: "title.class.inherited"
  	    },
  	    keywords: KEYWORDS$1
  	  };

  	  return {
  	    name: 'LiveScript',
  	    aliases: [ 'ls' ],
  	    keywords: KEYWORDS$1,
  	    illegal: /\/\*/,
  	    contains: EXPRESSIONS.concat([
  	      hljs.COMMENT('\\/\\*', '\\*\\/'),
  	      hljs.HASH_COMMENT_MODE,
  	      SYMBOLS, // relevance booster
  	      {
  	        className: 'function',
  	        contains: [
  	          TITLE,
  	          PARAMS
  	        ],
  	        returnBegin: true,
  	        variants: [
  	          {
  	            begin: '(' + JS_IDENT_RE + '\\s*(?:=|:=)\\s*)?(\\(.*\\)\\s*)?\\B->\\*?',
  	            end: '->\\*?'
  	          },
  	          {
  	            begin: '(' + JS_IDENT_RE + '\\s*(?:=|:=)\\s*)?!?(\\(.*\\)\\s*)?\\B[-~]{1,2}>\\*?',
  	            end: '[-~]{1,2}>\\*?'
  	          },
  	          {
  	            begin: '(' + JS_IDENT_RE + '\\s*(?:=|:=)\\s*)?(\\(.*\\)\\s*)?\\B!?[-~]{1,2}>\\*?',
  	            end: '!?[-~]{1,2}>\\*?'
  	          }
  	        ]
  	      },
  	      CLASS_DEFINITION,
  	      {
  	        begin: JS_IDENT_RE + ':',
  	        end: ':',
  	        returnBegin: true,
  	        returnEnd: true,
  	        relevance: 0
  	      }
  	    ])
  	  };
  	}

  	livescript_1 = livescript;
  	return livescript_1;
  }

  /*
  Language: LLVM IR
  Author: Michael Rodler <contact@f0rki.at>
  Description: language used as intermediate representation in the LLVM compiler framework
  Website: https://llvm.org/docs/LangRef.html
  Category: assembler
  Audit: 2020
  */

  var llvm_1;
  var hasRequiredLlvm;

  function requireLlvm () {
  	if (hasRequiredLlvm) return llvm_1;
  	hasRequiredLlvm = 1;
  	/** @type LanguageFn */
  	function llvm(hljs) {
  	  const regex = hljs.regex;
  	  const IDENT_RE = /([-a-zA-Z$._][\w$.-]*)/;
  	  const TYPE = {
  	    className: 'type',
  	    begin: /\bi\d+(?=\s|\b)/
  	  };
  	  const OPERATOR = {
  	    className: 'operator',
  	    relevance: 0,
  	    begin: /=/
  	  };
  	  const PUNCTUATION = {
  	    className: 'punctuation',
  	    relevance: 0,
  	    begin: /,/
  	  };
  	  const NUMBER = {
  	    className: 'number',
  	    variants: [
  	      { begin: /[su]?0[xX][KMLHR]?[a-fA-F0-9]+/ },
  	      { begin: /[-+]?\d+(?:[.]\d+)?(?:[eE][-+]?\d+(?:[.]\d+)?)?/ }
  	    ],
  	    relevance: 0
  	  };
  	  const LABEL = {
  	    className: 'symbol',
  	    variants: [ { begin: /^\s*[a-z]+:/ }, // labels
  	    ],
  	    relevance: 0
  	  };
  	  const VARIABLE = {
  	    className: 'variable',
  	    variants: [
  	      { begin: regex.concat(/%/, IDENT_RE) },
  	      { begin: /%\d+/ },
  	      { begin: /#\d+/ },
  	    ]
  	  };
  	  const FUNCTION = {
  	    className: 'title',
  	    variants: [
  	      { begin: regex.concat(/@/, IDENT_RE) },
  	      { begin: /@\d+/ },
  	      { begin: regex.concat(/!/, IDENT_RE) },
  	      { begin: regex.concat(/!\d+/, IDENT_RE) },
  	      // https://llvm.org/docs/LangRef.html#namedmetadatastructure
  	      // obviously a single digit can also be used in this fashion
  	      { begin: /!\d+/ }
  	    ]
  	  };

  	  return {
  	    name: 'LLVM IR',
  	    // TODO: split into different categories of keywords
  	    keywords:
  	      'begin end true false declare define global '
  	      + 'constant private linker_private internal '
  	      + 'available_externally linkonce linkonce_odr weak '
  	      + 'weak_odr appending dllimport dllexport common '
  	      + 'default hidden protected extern_weak external '
  	      + 'thread_local zeroinitializer undef null to tail '
  	      + 'target triple datalayout volatile nuw nsw nnan '
  	      + 'ninf nsz arcp fast exact inbounds align '
  	      + 'addrspace section alias module asm sideeffect '
  	      + 'gc dbg linker_private_weak attributes blockaddress '
  	      + 'initialexec localdynamic localexec prefix unnamed_addr '
  	      + 'ccc fastcc coldcc x86_stdcallcc x86_fastcallcc '
  	      + 'arm_apcscc arm_aapcscc arm_aapcs_vfpcc ptx_device '
  	      + 'ptx_kernel intel_ocl_bicc msp430_intrcc spir_func '
  	      + 'spir_kernel x86_64_sysvcc x86_64_win64cc x86_thiscallcc '
  	      + 'cc c signext zeroext inreg sret nounwind '
  	      + 'noreturn noalias nocapture byval nest readnone '
  	      + 'readonly inlinehint noinline alwaysinline optsize ssp '
  	      + 'sspreq noredzone noimplicitfloat naked builtin cold '
  	      + 'nobuiltin noduplicate nonlazybind optnone returns_twice '
  	      + 'sanitize_address sanitize_memory sanitize_thread sspstrong '
  	      + 'uwtable returned type opaque eq ne slt sgt '
  	      + 'sle sge ult ugt ule uge oeq one olt ogt '
  	      + 'ole oge ord uno ueq une x acq_rel acquire '
  	      + 'alignstack atomic catch cleanup filter inteldialect '
  	      + 'max min monotonic nand personality release seq_cst '
  	      + 'singlethread umax umin unordered xchg add fadd '
  	      + 'sub fsub mul fmul udiv sdiv fdiv urem srem '
  	      + 'frem shl lshr ashr and or xor icmp fcmp '
  	      + 'phi call trunc zext sext fptrunc fpext uitofp '
  	      + 'sitofp fptoui fptosi inttoptr ptrtoint bitcast '
  	      + 'addrspacecast select va_arg ret br switch invoke '
  	      + 'unwind unreachable indirectbr landingpad resume '
  	      + 'malloc alloca free load store getelementptr '
  	      + 'extractelement insertelement shufflevector getresult '
  	      + 'extractvalue insertvalue atomicrmw cmpxchg fence '
  	      + 'argmemonly double',
  	    contains: [
  	      TYPE,
  	      // this matches "empty comments"...
  	      // ...because it's far more likely this is a statement terminator in
  	      // another language than an actual comment
  	      hljs.COMMENT(/;\s*$/, null, { relevance: 0 }),
  	      hljs.COMMENT(/;/, /$/),
  	      {
  	        className: 'string',
  	        begin: /"/,
  	        end: /"/,
  	        contains: [
  	          {
  	            className: 'char.escape',
  	            match: /\\\d\d/
  	          }
  	        ]
  	      },
  	      FUNCTION,
  	      PUNCTUATION,
  	      OPERATOR,
  	      VARIABLE,
  	      LABEL,
  	      NUMBER
  	    ]
  	  };
  	}

  	llvm_1 = llvm;
  	return llvm_1;
  }

  /*
  Language: LSL (Linden Scripting Language)
  Description: The Linden Scripting Language is used in Second Life by Linden Labs.
  Author: Builder's Brewery <buildersbrewery@gmail.com>
  Website: http://wiki.secondlife.com/wiki/LSL_Portal
  Category: scripting
  */

  var lsl_1;
  var hasRequiredLsl;

  function requireLsl () {
  	if (hasRequiredLsl) return lsl_1;
  	hasRequiredLsl = 1;
  	function lsl(hljs) {
  	  const LSL_STRING_ESCAPE_CHARS = {
  	    className: 'subst',
  	    begin: /\\[tn"\\]/
  	  };

  	  const LSL_STRINGS = {
  	    className: 'string',
  	    begin: '"',
  	    end: '"',
  	    contains: [ LSL_STRING_ESCAPE_CHARS ]
  	  };

  	  const LSL_NUMBERS = {
  	    className: 'number',
  	    relevance: 0,
  	    begin: hljs.C_NUMBER_RE
  	  };

  	  const LSL_CONSTANTS = {
  	    className: 'literal',
  	    variants: [
  	      { begin: '\\b(PI|TWO_PI|PI_BY_TWO|DEG_TO_RAD|RAD_TO_DEG|SQRT2)\\b' },
  	      { begin: '\\b(XP_ERROR_(EXPERIENCES_DISABLED|EXPERIENCE_(DISABLED|SUSPENDED)|INVALID_(EXPERIENCE|PARAMETERS)|KEY_NOT_FOUND|MATURITY_EXCEEDED|NONE|NOT_(FOUND|PERMITTED(_LAND)?)|NO_EXPERIENCE|QUOTA_EXCEEDED|RETRY_UPDATE|STORAGE_EXCEPTION|STORE_DISABLED|THROTTLED|UNKNOWN_ERROR)|JSON_APPEND|STATUS_(PHYSICS|ROTATE_[XYZ]|PHANTOM|SANDBOX|BLOCK_GRAB(_OBJECT)?|(DIE|RETURN)_AT_EDGE|CAST_SHADOWS|OK|MALFORMED_PARAMS|TYPE_MISMATCH|BOUNDS_ERROR|NOT_(FOUND|SUPPORTED)|INTERNAL_ERROR|WHITELIST_FAILED)|AGENT(_(BY_(LEGACY_|USER)NAME|FLYING|ATTACHMENTS|SCRIPTED|MOUSELOOK|SITTING|ON_OBJECT|AWAY|WALKING|IN_AIR|TYPING|CROUCHING|BUSY|ALWAYS_RUN|AUTOPILOT|LIST_(PARCEL(_OWNER)?|REGION)))?|CAMERA_(PITCH|DISTANCE|BEHINDNESS_(ANGLE|LAG)|(FOCUS|POSITION)(_(THRESHOLD|LOCKED|LAG))?|FOCUS_OFFSET|ACTIVE)|ANIM_ON|LOOP|REVERSE|PING_PONG|SMOOTH|ROTATE|SCALE|ALL_SIDES|LINK_(ROOT|SET|ALL_(OTHERS|CHILDREN)|THIS)|ACTIVE|PASS(IVE|_(ALWAYS|IF_NOT_HANDLED|NEVER))|SCRIPTED|CONTROL_(FWD|BACK|(ROT_)?(LEFT|RIGHT)|UP|DOWN|(ML_)?LBUTTON)|PERMISSION_(RETURN_OBJECTS|DEBIT|OVERRIDE_ANIMATIONS|SILENT_ESTATE_MANAGEMENT|TAKE_CONTROLS|TRIGGER_ANIMATION|ATTACH|CHANGE_LINKS|(CONTROL|TRACK)_CAMERA|TELEPORT)|INVENTORY_(TEXTURE|SOUND|OBJECT|SCRIPT|LANDMARK|CLOTHING|NOTECARD|BODYPART|ANIMATION|GESTURE|ALL|NONE)|CHANGED_(INVENTORY|COLOR|SHAPE|SCALE|TEXTURE|LINK|ALLOWED_DROP|OWNER|REGION(_START)?|TELEPORT|MEDIA)|OBJECT_(CLICK_ACTION|HOVER_HEIGHT|LAST_OWNER_ID|(PHYSICS|SERVER|STREAMING)_COST|UNKNOWN_DETAIL|CHARACTER_TIME|PHANTOM|PHYSICS|TEMP_(ATTACHED|ON_REZ)|NAME|DESC|POS|PRIM_(COUNT|EQUIVALENCE)|RETURN_(PARCEL(_OWNER)?|REGION)|REZZER_KEY|ROO?T|VELOCITY|OMEGA|OWNER|GROUP(_TAG)?|CREATOR|ATTACHED_(POINT|SLOTS_AVAILABLE)|RENDER_WEIGHT|(BODY_SHAPE|PATHFINDING)_TYPE|(RUNNING|TOTAL)_SCRIPT_COUNT|TOTAL_INVENTORY_COUNT|SCRIPT_(MEMORY|TIME))|TYPE_(INTEGER|FLOAT|STRING|KEY|VECTOR|ROTATION|INVALID)|(DEBUG|PUBLIC)_CHANNEL|ATTACH_(AVATAR_CENTER|CHEST|HEAD|BACK|PELVIS|MOUTH|CHIN|NECK|NOSE|BELLY|[LR](SHOULDER|HAND|FOOT|EAR|EYE|[UL](ARM|LEG)|HIP)|(LEFT|RIGHT)_PEC|HUD_(CENTER_[12]|TOP_(RIGHT|CENTER|LEFT)|BOTTOM(_(RIGHT|LEFT))?)|[LR]HAND_RING1|TAIL_(BASE|TIP)|[LR]WING|FACE_(JAW|[LR]EAR|[LR]EYE|TOUNGE)|GROIN|HIND_[LR]FOOT)|LAND_(LEVEL|RAISE|LOWER|SMOOTH|NOISE|REVERT)|DATA_(ONLINE|NAME|BORN|SIM_(POS|STATUS|RATING)|PAYINFO)|PAYMENT_INFO_(ON_FILE|USED)|REMOTE_DATA_(CHANNEL|REQUEST|REPLY)|PSYS_(PART_(BF_(ZERO|ONE(_MINUS_(DEST_COLOR|SOURCE_(ALPHA|COLOR)))?|DEST_COLOR|SOURCE_(ALPHA|COLOR))|BLEND_FUNC_(DEST|SOURCE)|FLAGS|(START|END)_(COLOR|ALPHA|SCALE|GLOW)|MAX_AGE|(RIBBON|WIND|INTERP_(COLOR|SCALE)|BOUNCE|FOLLOW_(SRC|VELOCITY)|TARGET_(POS|LINEAR)|EMISSIVE)_MASK)|SRC_(MAX_AGE|PATTERN|ANGLE_(BEGIN|END)|BURST_(RATE|PART_COUNT|RADIUS|SPEED_(MIN|MAX))|ACCEL|TEXTURE|TARGET_KEY|OMEGA|PATTERN_(DROP|EXPLODE|ANGLE(_CONE(_EMPTY)?)?)))|VEHICLE_(REFERENCE_FRAME|TYPE_(NONE|SLED|CAR|BOAT|AIRPLANE|BALLOON)|(LINEAR|ANGULAR)_(FRICTION_TIMESCALE|MOTOR_DIRECTION)|LINEAR_MOTOR_OFFSET|HOVER_(HEIGHT|EFFICIENCY|TIMESCALE)|BUOYANCY|(LINEAR|ANGULAR)_(DEFLECTION_(EFFICIENCY|TIMESCALE)|MOTOR_(DECAY_)?TIMESCALE)|VERTICAL_ATTRACTION_(EFFICIENCY|TIMESCALE)|BANKING_(EFFICIENCY|MIX|TIMESCALE)|FLAG_(NO_DEFLECTION_UP|LIMIT_(ROLL_ONLY|MOTOR_UP)|HOVER_((WATER|TERRAIN|UP)_ONLY|GLOBAL_HEIGHT)|MOUSELOOK_(STEER|BANK)|CAMERA_DECOUPLED))|PRIM_(ALLOW_UNSIT|ALPHA_MODE(_(BLEND|EMISSIVE|MASK|NONE))?|NORMAL|SPECULAR|TYPE(_(BOX|CYLINDER|PRISM|SPHERE|TORUS|TUBE|RING|SCULPT))?|HOLE_(DEFAULT|CIRCLE|SQUARE|TRIANGLE)|MATERIAL(_(STONE|METAL|GLASS|WOOD|FLESH|PLASTIC|RUBBER))?|SHINY_(NONE|LOW|MEDIUM|HIGH)|BUMP_(NONE|BRIGHT|DARK|WOOD|BARK|BRICKS|CHECKER|CONCRETE|TILE|STONE|DISKS|GRAVEL|BLOBS|SIDING|LARGETILE|STUCCO|SUCTION|WEAVE)|TEXGEN_(DEFAULT|PLANAR)|SCRIPTED_SIT_ONLY|SCULPT_(TYPE_(SPHERE|TORUS|PLANE|CYLINDER|MASK)|FLAG_(MIRROR|INVERT))|PHYSICS(_(SHAPE_(CONVEX|NONE|PRIM|TYPE)))?|(POS|ROT)_LOCAL|SLICE|TEXT|FLEXIBLE|POINT_LIGHT|TEMP_ON_REZ|PHANTOM|POSITION|SIT_TARGET|SIZE|ROTATION|TEXTURE|NAME|OMEGA|DESC|LINK_TARGET|COLOR|BUMP_SHINY|FULLBRIGHT|TEXGEN|GLOW|MEDIA_(ALT_IMAGE_ENABLE|CONTROLS|(CURRENT|HOME)_URL|AUTO_(LOOP|PLAY|SCALE|ZOOM)|FIRST_CLICK_INTERACT|(WIDTH|HEIGHT)_PIXELS|WHITELIST(_ENABLE)?|PERMS_(INTERACT|CONTROL)|PARAM_MAX|CONTROLS_(STANDARD|MINI)|PERM_(NONE|OWNER|GROUP|ANYONE)|MAX_(URL_LENGTH|WHITELIST_(SIZE|COUNT)|(WIDTH|HEIGHT)_PIXELS)))|MASK_(BASE|OWNER|GROUP|EVERYONE|NEXT)|PERM_(TRANSFER|MODIFY|COPY|MOVE|ALL)|PARCEL_(MEDIA_COMMAND_(STOP|PAUSE|PLAY|LOOP|TEXTURE|URL|TIME|AGENT|UNLOAD|AUTO_ALIGN|TYPE|SIZE|DESC|LOOP_SET)|FLAG_(ALLOW_(FLY|(GROUP_)?SCRIPTS|LANDMARK|TERRAFORM|DAMAGE|CREATE_(GROUP_)?OBJECTS)|USE_(ACCESS_(GROUP|LIST)|BAN_LIST|LAND_PASS_LIST)|LOCAL_SOUND_ONLY|RESTRICT_PUSHOBJECT|ALLOW_(GROUP|ALL)_OBJECT_ENTRY)|COUNT_(TOTAL|OWNER|GROUP|OTHER|SELECTED|TEMP)|DETAILS_(NAME|DESC|OWNER|GROUP|AREA|ID|SEE_AVATARS))|LIST_STAT_(MAX|MIN|MEAN|MEDIAN|STD_DEV|SUM(_SQUARES)?|NUM_COUNT|GEOMETRIC_MEAN|RANGE)|PAY_(HIDE|DEFAULT)|REGION_FLAG_(ALLOW_DAMAGE|FIXED_SUN|BLOCK_TERRAFORM|SANDBOX|DISABLE_(COLLISIONS|PHYSICS)|BLOCK_FLY|ALLOW_DIRECT_TELEPORT|RESTRICT_PUSHOBJECT)|HTTP_(METHOD|MIMETYPE|BODY_(MAXLENGTH|TRUNCATED)|CUSTOM_HEADER|PRAGMA_NO_CACHE|VERBOSE_THROTTLE|VERIFY_CERT)|SIT_(INVALID_(AGENT|LINK_OBJECT)|NO(T_EXPERIENCE|_(ACCESS|EXPERIENCE_PERMISSION|SIT_TARGET)))|STRING_(TRIM(_(HEAD|TAIL))?)|CLICK_ACTION_(NONE|TOUCH|SIT|BUY|PAY|OPEN(_MEDIA)?|PLAY|ZOOM)|TOUCH_INVALID_FACE|PROFILE_(NONE|SCRIPT_MEMORY)|RC_(DATA_FLAGS|DETECT_PHANTOM|GET_(LINK_NUM|NORMAL|ROOT_KEY)|MAX_HITS|REJECT_(TYPES|AGENTS|(NON)?PHYSICAL|LAND))|RCERR_(CAST_TIME_EXCEEDED|SIM_PERF_LOW|UNKNOWN)|ESTATE_ACCESS_(ALLOWED_(AGENT|GROUP)_(ADD|REMOVE)|BANNED_AGENT_(ADD|REMOVE))|DENSITY|FRICTION|RESTITUTION|GRAVITY_MULTIPLIER|KFM_(COMMAND|CMD_(PLAY|STOP|PAUSE)|MODE|FORWARD|LOOP|PING_PONG|REVERSE|DATA|ROTATION|TRANSLATION)|ERR_(GENERIC|PARCEL_PERMISSIONS|MALFORMED_PARAMS|RUNTIME_PERMISSIONS|THROTTLED)|CHARACTER_(CMD_((SMOOTH_)?STOP|JUMP)|DESIRED_(TURN_)?SPEED|RADIUS|STAY_WITHIN_PARCEL|LENGTH|ORIENTATION|ACCOUNT_FOR_SKIPPED_FRAMES|AVOIDANCE_MODE|TYPE(_([ABCD]|NONE))?|MAX_(DECEL|TURN_RADIUS|(ACCEL|SPEED)))|PURSUIT_(OFFSET|FUZZ_FACTOR|GOAL_TOLERANCE|INTERCEPT)|REQUIRE_LINE_OF_SIGHT|FORCE_DIRECT_PATH|VERTICAL|HORIZONTAL|AVOID_(CHARACTERS|DYNAMIC_OBSTACLES|NONE)|PU_(EVADE_(HIDDEN|SPOTTED)|FAILURE_(DYNAMIC_PATHFINDING_DISABLED|INVALID_(GOAL|START)|NO_(NAVMESH|VALID_DESTINATION)|OTHER|TARGET_GONE|(PARCEL_)?UNREACHABLE)|(GOAL|SLOWDOWN_DISTANCE)_REACHED)|TRAVERSAL_TYPE(_(FAST|NONE|SLOW))?|CONTENT_TYPE_(ATOM|FORM|HTML|JSON|LLSD|RSS|TEXT|XHTML|XML)|GCNP_(RADIUS|STATIC)|(PATROL|WANDER)_PAUSE_AT_WAYPOINTS|OPT_(AVATAR|CHARACTER|EXCLUSION_VOLUME|LEGACY_LINKSET|MATERIAL_VOLUME|OTHER|STATIC_OBSTACLE|WALKABLE)|SIM_STAT_PCT_CHARS_STEPPED)\\b' },
  	      { begin: '\\b(FALSE|TRUE)\\b' },
  	      { begin: '\\b(ZERO_ROTATION)\\b' },
  	      { begin: '\\b(EOF|JSON_(ARRAY|DELETE|FALSE|INVALID|NULL|NUMBER|OBJECT|STRING|TRUE)|NULL_KEY|TEXTURE_(BLANK|DEFAULT|MEDIA|PLYWOOD|TRANSPARENT)|URL_REQUEST_(GRANTED|DENIED))\\b' },
  	      { begin: '\\b(ZERO_VECTOR|TOUCH_INVALID_(TEXCOORD|VECTOR))\\b' }
  	    ]
  	  };

  	  const LSL_FUNCTIONS = {
  	    className: 'built_in',
  	    begin: '\\b(ll(AgentInExperience|(Create|DataSize|Delete|KeyCount|Keys|Read|Update)KeyValue|GetExperience(Details|ErrorMessage)|ReturnObjectsBy(ID|Owner)|Json(2List|[GS]etValue|ValueType)|Sin|Cos|Tan|Atan2|Sqrt|Pow|Abs|Fabs|Frand|Floor|Ceil|Round|Vec(Mag|Norm|Dist)|Rot(Between|2(Euler|Fwd|Left|Up))|(Euler|Axes)2Rot|Whisper|(Region|Owner)?Say|Shout|Listen(Control|Remove)?|Sensor(Repeat|Remove)?|Detected(Name|Key|Owner|Type|Pos|Vel|Grab|Rot|Group|LinkNumber)|Die|Ground|Wind|([GS]et)(AnimationOverride|MemoryLimit|PrimMediaParams|ParcelMusicURL|Object(Desc|Name)|PhysicsMaterial|Status|Scale|Color|Alpha|Texture|Pos|Rot|Force|Torque)|ResetAnimationOverride|(Scale|Offset|Rotate)Texture|(Rot)?Target(Remove)?|(Stop)?MoveToTarget|Apply(Rotational)?Impulse|Set(KeyframedMotion|ContentType|RegionPos|(Angular)?Velocity|Buoyancy|HoverHeight|ForceAndTorque|TimerEvent|ScriptState|Damage|TextureAnim|Sound(Queueing|Radius)|Vehicle(Type|(Float|Vector|Rotation)Param)|(Touch|Sit)?Text|Camera(Eye|At)Offset|PrimitiveParams|ClickAction|Link(Alpha|Color|PrimitiveParams(Fast)?|Texture(Anim)?|Camera|Media)|RemoteScriptAccessPin|PayPrice|LocalRot)|ScaleByFactor|Get((Max|Min)ScaleFactor|ClosestNavPoint|StaticPath|SimStats|Env|PrimitiveParams|Link(PrimitiveParams|Number(OfSides)?|Key|Name|Media)|HTTPHeader|FreeURLs|Object(Details|PermMask|PrimCount)|Parcel(MaxPrims|Details|Prim(Count|Owners))|Attached(List)?|(SPMax|Free|Used)Memory|Region(Name|TimeDilation|FPS|Corner|AgentCount)|Root(Position|Rotation)|UnixTime|(Parcel|Region)Flags|(Wall|GMT)clock|SimulatorHostname|BoundingBox|GeometricCenter|Creator|NumberOf(Prims|NotecardLines|Sides)|Animation(List)?|(Camera|Local)(Pos|Rot)|Vel|Accel|Omega|Time(stamp|OfDay)|(Object|CenterOf)?Mass|MassMKS|Energy|Owner|(Owner)?Key|SunDirection|Texture(Offset|Scale|Rot)|Inventory(Number|Name|Key|Type|Creator|PermMask)|Permissions(Key)?|StartParameter|List(Length|EntryType)|Date|Agent(Size|Info|Language|List)|LandOwnerAt|NotecardLine|Script(Name|State))|(Get|Reset|GetAndReset)Time|PlaySound(Slave)?|LoopSound(Master|Slave)?|(Trigger|Stop|Preload)Sound|((Get|Delete)Sub|Insert)String|To(Upper|Lower)|Give(InventoryList|Money)|RezObject|(Stop)?LookAt|Sleep|CollisionFilter|(Take|Release)Controls|DetachFromAvatar|AttachToAvatar(Temp)?|InstantMessage|(GetNext)?Email|StopHover|MinEventDelay|RotLookAt|String(Length|Trim)|(Start|Stop)Animation|TargetOmega|Request(Experience)?Permissions|(Create|Break)Link|BreakAllLinks|(Give|Remove)Inventory|Water|PassTouches|Request(Agent|Inventory)Data|TeleportAgent(Home|GlobalCoords)?|ModifyLand|CollisionSound|ResetScript|MessageLinked|PushObject|PassCollisions|AxisAngle2Rot|Rot2(Axis|Angle)|A(cos|sin)|AngleBetween|AllowInventoryDrop|SubStringIndex|List2(CSV|Integer|Json|Float|String|Key|Vector|Rot|List(Strided)?)|DeleteSubList|List(Statistics|Sort|Randomize|(Insert|Find|Replace)List)|EdgeOfWorld|AdjustSoundVolume|Key2Name|TriggerSoundLimited|EjectFromLand|(CSV|ParseString)2List|OverMyLand|SameGroup|UnSit|Ground(Slope|Normal|Contour)|GroundRepel|(Set|Remove)VehicleFlags|SitOnLink|(AvatarOn)?(Link)?SitTarget|Script(Danger|Profiler)|Dialog|VolumeDetect|ResetOtherScript|RemoteLoadScriptPin|(Open|Close)RemoteDataChannel|SendRemoteData|RemoteDataReply|(Integer|String)ToBase64|XorBase64|Log(10)?|Base64To(String|Integer)|ParseStringKeepNulls|RezAtRoot|RequestSimulatorData|ForceMouselook|(Load|Release|(E|Une)scape)URL|ParcelMedia(CommandList|Query)|ModPow|MapDestination|(RemoveFrom|AddTo|Reset)Land(Pass|Ban)List|(Set|Clear)CameraParams|HTTP(Request|Response)|TextBox|DetectedTouch(UV|Face|Pos|(N|Bin)ormal|ST)|(MD5|SHA1|DumpList2)String|Request(Secure)?URL|Clear(Prim|Link)Media|(Link)?ParticleSystem|(Get|Request)(Username|DisplayName)|RegionSayTo|CastRay|GenerateKey|TransferLindenDollars|ManageEstateAccess|(Create|Delete)Character|ExecCharacterCmd|Evade|FleeFrom|NavigateTo|PatrolPoints|Pursue|UpdateCharacter|WanderWithin))\\b'
  	  };

  	  return {
  	    name: 'LSL (Linden Scripting Language)',
  	    illegal: ':',
  	    contains: [
  	      LSL_STRINGS,
  	      {
  	        className: 'comment',
  	        variants: [
  	          hljs.COMMENT('//', '$'),
  	          hljs.COMMENT('/\\*', '\\*/')
  	        ],
  	        relevance: 0
  	      },
  	      LSL_NUMBERS,
  	      {
  	        className: 'section',
  	        variants: [
  	          { begin: '\\b(state|default)\\b' },
  	          { begin: '\\b(state_(entry|exit)|touch(_(start|end))?|(land_)?collision(_(start|end))?|timer|listen|(no_)?sensor|control|(not_)?at_(rot_)?target|money|email|experience_permissions(_denied)?|run_time_permissions|changed|attach|dataserver|moving_(start|end)|link_message|(on|object)_rez|remote_data|http_re(sponse|quest)|path_update|transaction_result)\\b' }
  	        ]
  	      },
  	      LSL_FUNCTIONS,
  	      LSL_CONSTANTS,
  	      {
  	        className: 'type',
  	        begin: '\\b(integer|float|string|key|vector|quaternion|rotation|list)\\b'
  	      }
  	    ]
  	  };
  	}

  	lsl_1 = lsl;
  	return lsl_1;
  }

  /*
  Language: Lua
  Description: Lua is a powerful, efficient, lightweight, embeddable scripting language.
  Author: Andrew Fedorov <dmmdrs@mail.ru>
  Category: common, scripting
  Website: https://www.lua.org
  */

  var lua_1;
  var hasRequiredLua;

  function requireLua () {
  	if (hasRequiredLua) return lua_1;
  	hasRequiredLua = 1;
  	function lua(hljs) {
  	  const OPENING_LONG_BRACKET = '\\[=*\\[';
  	  const CLOSING_LONG_BRACKET = '\\]=*\\]';
  	  const LONG_BRACKETS = {
  	    begin: OPENING_LONG_BRACKET,
  	    end: CLOSING_LONG_BRACKET,
  	    contains: [ 'self' ]
  	  };
  	  const COMMENTS = [
  	    hljs.COMMENT('--(?!' + OPENING_LONG_BRACKET + ')', '$'),
  	    hljs.COMMENT(
  	      '--' + OPENING_LONG_BRACKET,
  	      CLOSING_LONG_BRACKET,
  	      {
  	        contains: [ LONG_BRACKETS ],
  	        relevance: 10
  	      }
  	    )
  	  ];
  	  return {
  	    name: 'Lua',
  	    keywords: {
  	      $pattern: hljs.UNDERSCORE_IDENT_RE,
  	      literal: "true false nil",
  	      keyword: "and break do else elseif end for goto if in local not or repeat return then until while",
  	      built_in:
  	        // Metatags and globals:
  	        '_G _ENV _VERSION __index __newindex __mode __call __metatable __tostring __len '
  	        + '__gc __add __sub __mul __div __mod __pow __concat __unm __eq __lt __le assert '
  	        // Standard methods and properties:
  	        + 'collectgarbage dofile error getfenv getmetatable ipairs load loadfile loadstring '
  	        + 'module next pairs pcall print rawequal rawget rawset require select setfenv '
  	        + 'setmetatable tonumber tostring type unpack xpcall arg self '
  	        // Library methods and properties (one line per library):
  	        + 'coroutine resume yield status wrap create running debug getupvalue '
  	        + 'debug sethook getmetatable gethook setmetatable setlocal traceback setfenv getinfo setupvalue getlocal getregistry getfenv '
  	        + 'io lines write close flush open output type read stderr stdin input stdout popen tmpfile '
  	        + 'math log max acos huge ldexp pi cos tanh pow deg tan cosh sinh random randomseed frexp ceil floor rad abs sqrt modf asin min mod fmod log10 atan2 exp sin atan '
  	        + 'os exit setlocale date getenv difftime remove time clock tmpname rename execute package preload loadlib loaded loaders cpath config path seeall '
  	        + 'string sub upper len gfind rep find match char dump gmatch reverse byte format gsub lower '
  	        + 'table setn insert getn foreachi maxn foreach concat sort remove'
  	    },
  	    contains: COMMENTS.concat([
  	      {
  	        className: 'function',
  	        beginKeywords: 'function',
  	        end: '\\)',
  	        contains: [
  	          hljs.inherit(hljs.TITLE_MODE, { begin: '([_a-zA-Z]\\w*\\.)*([_a-zA-Z]\\w*:)?[_a-zA-Z]\\w*' }),
  	          {
  	            className: 'params',
  	            begin: '\\(',
  	            endsWithParent: true,
  	            contains: COMMENTS
  	          }
  	        ].concat(COMMENTS)
  	      },
  	      hljs.C_NUMBER_MODE,
  	      hljs.APOS_STRING_MODE,
  	      hljs.QUOTE_STRING_MODE,
  	      {
  	        className: 'string',
  	        begin: OPENING_LONG_BRACKET,
  	        end: CLOSING_LONG_BRACKET,
  	        contains: [ LONG_BRACKETS ],
  	        relevance: 5
  	      }
  	    ])
  	  };
  	}

  	lua_1 = lua;
  	return lua_1;
  }

  /*
  Language: Makefile
  Author: Ivan Sagalaev <maniac@softwaremaniacs.org>
  Contributors: Joël Porquet <joel@porquet.org>
  Website: https://www.gnu.org/software/make/manual/html_node/Introduction.html
  Category: common
  */

  var makefile_1;
  var hasRequiredMakefile;

  function requireMakefile () {
  	if (hasRequiredMakefile) return makefile_1;
  	hasRequiredMakefile = 1;
  	function makefile(hljs) {
  	  /* Variables: simple (eg $(var)) and special (eg $@) */
  	  const VARIABLE = {
  	    className: 'variable',
  	    variants: [
  	      {
  	        begin: '\\$\\(' + hljs.UNDERSCORE_IDENT_RE + '\\)',
  	        contains: [ hljs.BACKSLASH_ESCAPE ]
  	      },
  	      { begin: /\$[@%<?\^\+\*]/ }
  	    ]
  	  };
  	  /* Quoted string with variables inside */
  	  const QUOTE_STRING = {
  	    className: 'string',
  	    begin: /"/,
  	    end: /"/,
  	    contains: [
  	      hljs.BACKSLASH_ESCAPE,
  	      VARIABLE
  	    ]
  	  };
  	  /* Function: $(func arg,...) */
  	  const FUNC = {
  	    className: 'variable',
  	    begin: /\$\([\w-]+\s/,
  	    end: /\)/,
  	    keywords: { built_in:
  	        'subst patsubst strip findstring filter filter-out sort '
  	        + 'word wordlist firstword lastword dir notdir suffix basename '
  	        + 'addsuffix addprefix join wildcard realpath abspath error warning '
  	        + 'shell origin flavor foreach if or and call eval file value' },
  	    contains: [ VARIABLE ]
  	  };
  	  /* Variable assignment */
  	  const ASSIGNMENT = { begin: '^' + hljs.UNDERSCORE_IDENT_RE + '\\s*(?=[:+?]?=)' };
  	  /* Meta targets (.PHONY) */
  	  const META = {
  	    className: 'meta',
  	    begin: /^\.PHONY:/,
  	    end: /$/,
  	    keywords: {
  	      $pattern: /[\.\w]+/,
  	      keyword: '.PHONY'
  	    }
  	  };
  	  /* Targets */
  	  const TARGET = {
  	    className: 'section',
  	    begin: /^[^\s]+:/,
  	    end: /$/,
  	    contains: [ VARIABLE ]
  	  };
  	  return {
  	    name: 'Makefile',
  	    aliases: [
  	      'mk',
  	      'mak',
  	      'make',
  	    ],
  	    keywords: {
  	      $pattern: /[\w-]+/,
  	      keyword: 'define endef undefine ifdef ifndef ifeq ifneq else endif '
  	      + 'include -include sinclude override export unexport private vpath'
  	    },
  	    contains: [
  	      hljs.HASH_COMMENT_MODE,
  	      VARIABLE,
  	      QUOTE_STRING,
  	      FUNC,
  	      ASSIGNMENT,
  	      META,
  	      TARGET
  	    ]
  	  };
  	}

  	makefile_1 = makefile;
  	return makefile_1;
  }

  var mathematica_1;
  var hasRequiredMathematica;

  function requireMathematica () {
  	if (hasRequiredMathematica) return mathematica_1;
  	hasRequiredMathematica = 1;
  	const SYSTEM_SYMBOLS = [
  	  "AASTriangle",
  	  "AbelianGroup",
  	  "Abort",
  	  "AbortKernels",
  	  "AbortProtect",
  	  "AbortScheduledTask",
  	  "Above",
  	  "Abs",
  	  "AbsArg",
  	  "AbsArgPlot",
  	  "Absolute",
  	  "AbsoluteCorrelation",
  	  "AbsoluteCorrelationFunction",
  	  "AbsoluteCurrentValue",
  	  "AbsoluteDashing",
  	  "AbsoluteFileName",
  	  "AbsoluteOptions",
  	  "AbsolutePointSize",
  	  "AbsoluteThickness",
  	  "AbsoluteTime",
  	  "AbsoluteTiming",
  	  "AcceptanceThreshold",
  	  "AccountingForm",
  	  "Accumulate",
  	  "Accuracy",
  	  "AccuracyGoal",
  	  "AcousticAbsorbingValue",
  	  "AcousticImpedanceValue",
  	  "AcousticNormalVelocityValue",
  	  "AcousticPDEComponent",
  	  "AcousticPressureCondition",
  	  "AcousticRadiationValue",
  	  "AcousticSoundHardValue",
  	  "AcousticSoundSoftCondition",
  	  "ActionDelay",
  	  "ActionMenu",
  	  "ActionMenuBox",
  	  "ActionMenuBoxOptions",
  	  "Activate",
  	  "Active",
  	  "ActiveClassification",
  	  "ActiveClassificationObject",
  	  "ActiveItem",
  	  "ActivePrediction",
  	  "ActivePredictionObject",
  	  "ActiveStyle",
  	  "AcyclicGraphQ",
  	  "AddOnHelpPath",
  	  "AddSides",
  	  "AddTo",
  	  "AddToSearchIndex",
  	  "AddUsers",
  	  "AdjacencyGraph",
  	  "AdjacencyList",
  	  "AdjacencyMatrix",
  	  "AdjacentMeshCells",
  	  "Adjugate",
  	  "AdjustmentBox",
  	  "AdjustmentBoxOptions",
  	  "AdjustTimeSeriesForecast",
  	  "AdministrativeDivisionData",
  	  "AffineHalfSpace",
  	  "AffineSpace",
  	  "AffineStateSpaceModel",
  	  "AffineTransform",
  	  "After",
  	  "AggregatedEntityClass",
  	  "AggregationLayer",
  	  "AircraftData",
  	  "AirportData",
  	  "AirPressureData",
  	  "AirSoundAttenuation",
  	  "AirTemperatureData",
  	  "AiryAi",
  	  "AiryAiPrime",
  	  "AiryAiZero",
  	  "AiryBi",
  	  "AiryBiPrime",
  	  "AiryBiZero",
  	  "AlgebraicIntegerQ",
  	  "AlgebraicNumber",
  	  "AlgebraicNumberDenominator",
  	  "AlgebraicNumberNorm",
  	  "AlgebraicNumberPolynomial",
  	  "AlgebraicNumberTrace",
  	  "AlgebraicRules",
  	  "AlgebraicRulesData",
  	  "Algebraics",
  	  "AlgebraicUnitQ",
  	  "Alignment",
  	  "AlignmentMarker",
  	  "AlignmentPoint",
  	  "All",
  	  "AllowAdultContent",
  	  "AllowChatServices",
  	  "AllowedCloudExtraParameters",
  	  "AllowedCloudParameterExtensions",
  	  "AllowedDimensions",
  	  "AllowedFrequencyRange",
  	  "AllowedHeads",
  	  "AllowGroupClose",
  	  "AllowIncomplete",
  	  "AllowInlineCells",
  	  "AllowKernelInitialization",
  	  "AllowLooseGrammar",
  	  "AllowReverseGroupClose",
  	  "AllowScriptLevelChange",
  	  "AllowVersionUpdate",
  	  "AllTrue",
  	  "Alphabet",
  	  "AlphabeticOrder",
  	  "AlphabeticSort",
  	  "AlphaChannel",
  	  "AlternateImage",
  	  "AlternatingFactorial",
  	  "AlternatingGroup",
  	  "AlternativeHypothesis",
  	  "Alternatives",
  	  "AltitudeMethod",
  	  "AmbientLight",
  	  "AmbiguityFunction",
  	  "AmbiguityList",
  	  "Analytic",
  	  "AnatomyData",
  	  "AnatomyForm",
  	  "AnatomyPlot3D",
  	  "AnatomySkinStyle",
  	  "AnatomyStyling",
  	  "AnchoredSearch",
  	  "And",
  	  "AndersonDarlingTest",
  	  "AngerJ",
  	  "AngleBisector",
  	  "AngleBracket",
  	  "AnglePath",
  	  "AnglePath3D",
  	  "AngleVector",
  	  "AngularGauge",
  	  "Animate",
  	  "AnimatedImage",
  	  "AnimationCycleOffset",
  	  "AnimationCycleRepetitions",
  	  "AnimationDirection",
  	  "AnimationDisplayTime",
  	  "AnimationRate",
  	  "AnimationRepetitions",
  	  "AnimationRunning",
  	  "AnimationRunTime",
  	  "AnimationTimeIndex",
  	  "AnimationVideo",
  	  "Animator",
  	  "AnimatorBox",
  	  "AnimatorBoxOptions",
  	  "AnimatorElements",
  	  "Annotate",
  	  "Annotation",
  	  "AnnotationDelete",
  	  "AnnotationKeys",
  	  "AnnotationRules",
  	  "AnnotationValue",
  	  "Annuity",
  	  "AnnuityDue",
  	  "Annulus",
  	  "AnomalyDetection",
  	  "AnomalyDetector",
  	  "AnomalyDetectorFunction",
  	  "Anonymous",
  	  "Antialiasing",
  	  "Antihermitian",
  	  "AntihermitianMatrixQ",
  	  "Antisymmetric",
  	  "AntisymmetricMatrixQ",
  	  "Antonyms",
  	  "AnyOrder",
  	  "AnySubset",
  	  "AnyTrue",
  	  "Apart",
  	  "ApartSquareFree",
  	  "APIFunction",
  	  "Appearance",
  	  "AppearanceElements",
  	  "AppearanceRules",
  	  "AppellF1",
  	  "Append",
  	  "AppendCheck",
  	  "AppendLayer",
  	  "AppendTo",
  	  "Application",
  	  "Apply",
  	  "ApplyReaction",
  	  "ApplySides",
  	  "ApplyTo",
  	  "ArcCos",
  	  "ArcCosh",
  	  "ArcCot",
  	  "ArcCoth",
  	  "ArcCsc",
  	  "ArcCsch",
  	  "ArcCurvature",
  	  "ARCHProcess",
  	  "ArcLength",
  	  "ArcSec",
  	  "ArcSech",
  	  "ArcSin",
  	  "ArcSinDistribution",
  	  "ArcSinh",
  	  "ArcTan",
  	  "ArcTanh",
  	  "Area",
  	  "Arg",
  	  "ArgMax",
  	  "ArgMin",
  	  "ArgumentCountQ",
  	  "ArgumentsOptions",
  	  "ARIMAProcess",
  	  "ArithmeticGeometricMean",
  	  "ARMAProcess",
  	  "Around",
  	  "AroundReplace",
  	  "ARProcess",
  	  "Array",
  	  "ArrayComponents",
  	  "ArrayDepth",
  	  "ArrayFilter",
  	  "ArrayFlatten",
  	  "ArrayMesh",
  	  "ArrayPad",
  	  "ArrayPlot",
  	  "ArrayPlot3D",
  	  "ArrayQ",
  	  "ArrayReduce",
  	  "ArrayResample",
  	  "ArrayReshape",
  	  "ArrayRules",
  	  "Arrays",
  	  "Arrow",
  	  "Arrow3DBox",
  	  "ArrowBox",
  	  "Arrowheads",
  	  "ASATriangle",
  	  "Ask",
  	  "AskAppend",
  	  "AskConfirm",
  	  "AskDisplay",
  	  "AskedQ",
  	  "AskedValue",
  	  "AskFunction",
  	  "AskState",
  	  "AskTemplateDisplay",
  	  "AspectRatio",
  	  "AspectRatioFixed",
  	  "Assert",
  	  "AssessmentFunction",
  	  "AssessmentResultObject",
  	  "AssociateTo",
  	  "Association",
  	  "AssociationFormat",
  	  "AssociationMap",
  	  "AssociationQ",
  	  "AssociationThread",
  	  "AssumeDeterministic",
  	  "Assuming",
  	  "Assumptions",
  	  "AstroAngularSeparation",
  	  "AstroBackground",
  	  "AstroCenter",
  	  "AstroDistance",
  	  "AstroGraphics",
  	  "AstroGridLines",
  	  "AstroGridLinesStyle",
  	  "AstronomicalData",
  	  "AstroPosition",
  	  "AstroProjection",
  	  "AstroRange",
  	  "AstroRangePadding",
  	  "AstroReferenceFrame",
  	  "AstroStyling",
  	  "AstroZoomLevel",
  	  "Asymptotic",
  	  "AsymptoticDSolveValue",
  	  "AsymptoticEqual",
  	  "AsymptoticEquivalent",
  	  "AsymptoticExpectation",
  	  "AsymptoticGreater",
  	  "AsymptoticGreaterEqual",
  	  "AsymptoticIntegrate",
  	  "AsymptoticLess",
  	  "AsymptoticLessEqual",
  	  "AsymptoticOutputTracker",
  	  "AsymptoticProbability",
  	  "AsymptoticProduct",
  	  "AsymptoticRSolveValue",
  	  "AsymptoticSolve",
  	  "AsymptoticSum",
  	  "Asynchronous",
  	  "AsynchronousTaskObject",
  	  "AsynchronousTasks",
  	  "Atom",
  	  "AtomCoordinates",
  	  "AtomCount",
  	  "AtomDiagramCoordinates",
  	  "AtomLabels",
  	  "AtomLabelStyle",
  	  "AtomList",
  	  "AtomQ",
  	  "AttachCell",
  	  "AttachedCell",
  	  "AttentionLayer",
  	  "Attributes",
  	  "Audio",
  	  "AudioAmplify",
  	  "AudioAnnotate",
  	  "AudioAnnotationLookup",
  	  "AudioBlockMap",
  	  "AudioCapture",
  	  "AudioChannelAssignment",
  	  "AudioChannelCombine",
  	  "AudioChannelMix",
  	  "AudioChannels",
  	  "AudioChannelSeparate",
  	  "AudioData",
  	  "AudioDelay",
  	  "AudioDelete",
  	  "AudioDevice",
  	  "AudioDistance",
  	  "AudioEncoding",
  	  "AudioFade",
  	  "AudioFrequencyShift",
  	  "AudioGenerator",
  	  "AudioIdentify",
  	  "AudioInputDevice",
  	  "AudioInsert",
  	  "AudioInstanceQ",
  	  "AudioIntervals",
  	  "AudioJoin",
  	  "AudioLabel",
  	  "AudioLength",
  	  "AudioLocalMeasurements",
  	  "AudioLooping",
  	  "AudioLoudness",
  	  "AudioMeasurements",
  	  "AudioNormalize",
  	  "AudioOutputDevice",
  	  "AudioOverlay",
  	  "AudioPad",
  	  "AudioPan",
  	  "AudioPartition",
  	  "AudioPause",
  	  "AudioPitchShift",
  	  "AudioPlay",
  	  "AudioPlot",
  	  "AudioQ",
  	  "AudioRecord",
  	  "AudioReplace",
  	  "AudioResample",
  	  "AudioReverb",
  	  "AudioReverse",
  	  "AudioSampleRate",
  	  "AudioSpectralMap",
  	  "AudioSpectralTransformation",
  	  "AudioSplit",
  	  "AudioStop",
  	  "AudioStream",
  	  "AudioStreams",
  	  "AudioTimeStretch",
  	  "AudioTrackApply",
  	  "AudioTrackSelection",
  	  "AudioTrim",
  	  "AudioType",
  	  "AugmentedPolyhedron",
  	  "AugmentedSymmetricPolynomial",
  	  "Authenticate",
  	  "Authentication",
  	  "AuthenticationDialog",
  	  "AutoAction",
  	  "Autocomplete",
  	  "AutocompletionFunction",
  	  "AutoCopy",
  	  "AutocorrelationTest",
  	  "AutoDelete",
  	  "AutoEvaluateEvents",
  	  "AutoGeneratedPackage",
  	  "AutoIndent",
  	  "AutoIndentSpacings",
  	  "AutoItalicWords",
  	  "AutoloadPath",
  	  "AutoMatch",
  	  "Automatic",
  	  "AutomaticImageSize",
  	  "AutoMultiplicationSymbol",
  	  "AutoNumberFormatting",
  	  "AutoOpenNotebooks",
  	  "AutoOpenPalettes",
  	  "AutoOperatorRenderings",
  	  "AutoQuoteCharacters",
  	  "AutoRefreshed",
  	  "AutoRemove",
  	  "AutorunSequencing",
  	  "AutoScaling",
  	  "AutoScroll",
  	  "AutoSpacing",
  	  "AutoStyleOptions",
  	  "AutoStyleWords",
  	  "AutoSubmitting",
  	  "Axes",
  	  "AxesEdge",
  	  "AxesLabel",
  	  "AxesOrigin",
  	  "AxesStyle",
  	  "AxiomaticTheory",
  	  "Axis",
  	  "Axis3DBox",
  	  "Axis3DBoxOptions",
  	  "AxisBox",
  	  "AxisBoxOptions",
  	  "AxisLabel",
  	  "AxisObject",
  	  "AxisStyle",
  	  "BabyMonsterGroupB",
  	  "Back",
  	  "BackFaceColor",
  	  "BackFaceGlowColor",
  	  "BackFaceOpacity",
  	  "BackFaceSpecularColor",
  	  "BackFaceSpecularExponent",
  	  "BackFaceSurfaceAppearance",
  	  "BackFaceTexture",
  	  "Background",
  	  "BackgroundAppearance",
  	  "BackgroundTasksSettings",
  	  "Backslash",
  	  "Backsubstitution",
  	  "Backward",
  	  "Ball",
  	  "Band",
  	  "BandpassFilter",
  	  "BandstopFilter",
  	  "BarabasiAlbertGraphDistribution",
  	  "BarChart",
  	  "BarChart3D",
  	  "BarcodeImage",
  	  "BarcodeRecognize",
  	  "BaringhausHenzeTest",
  	  "BarLegend",
  	  "BarlowProschanImportance",
  	  "BarnesG",
  	  "BarOrigin",
  	  "BarSpacing",
  	  "BartlettHannWindow",
  	  "BartlettWindow",
  	  "BaseDecode",
  	  "BaseEncode",
  	  "BaseForm",
  	  "Baseline",
  	  "BaselinePosition",
  	  "BaseStyle",
  	  "BasicRecurrentLayer",
  	  "BatchNormalizationLayer",
  	  "BatchSize",
  	  "BatesDistribution",
  	  "BattleLemarieWavelet",
  	  "BayesianMaximization",
  	  "BayesianMaximizationObject",
  	  "BayesianMinimization",
  	  "BayesianMinimizationObject",
  	  "Because",
  	  "BeckmannDistribution",
  	  "Beep",
  	  "Before",
  	  "Begin",
  	  "BeginDialogPacket",
  	  "BeginPackage",
  	  "BellB",
  	  "BellY",
  	  "Below",
  	  "BenfordDistribution",
  	  "BeniniDistribution",
  	  "BenktanderGibratDistribution",
  	  "BenktanderWeibullDistribution",
  	  "BernoulliB",
  	  "BernoulliDistribution",
  	  "BernoulliGraphDistribution",
  	  "BernoulliProcess",
  	  "BernsteinBasis",
  	  "BesagL",
  	  "BesselFilterModel",
  	  "BesselI",
  	  "BesselJ",
  	  "BesselJZero",
  	  "BesselK",
  	  "BesselY",
  	  "BesselYZero",
  	  "Beta",
  	  "BetaBinomialDistribution",
  	  "BetaDistribution",
  	  "BetaNegativeBinomialDistribution",
  	  "BetaPrimeDistribution",
  	  "BetaRegularized",
  	  "Between",
  	  "BetweennessCentrality",
  	  "Beveled",
  	  "BeveledPolyhedron",
  	  "BezierCurve",
  	  "BezierCurve3DBox",
  	  "BezierCurve3DBoxOptions",
  	  "BezierCurveBox",
  	  "BezierCurveBoxOptions",
  	  "BezierFunction",
  	  "BilateralFilter",
  	  "BilateralLaplaceTransform",
  	  "BilateralZTransform",
  	  "Binarize",
  	  "BinaryDeserialize",
  	  "BinaryDistance",
  	  "BinaryFormat",
  	  "BinaryImageQ",
  	  "BinaryRead",
  	  "BinaryReadList",
  	  "BinarySerialize",
  	  "BinaryWrite",
  	  "BinCounts",
  	  "BinLists",
  	  "BinnedVariogramList",
  	  "Binomial",
  	  "BinomialDistribution",
  	  "BinomialPointProcess",
  	  "BinomialProcess",
  	  "BinormalDistribution",
  	  "BiorthogonalSplineWavelet",
  	  "BioSequence",
  	  "BioSequenceBackTranslateList",
  	  "BioSequenceComplement",
  	  "BioSequenceInstances",
  	  "BioSequenceModify",
  	  "BioSequencePlot",
  	  "BioSequenceQ",
  	  "BioSequenceReverseComplement",
  	  "BioSequenceTranscribe",
  	  "BioSequenceTranslate",
  	  "BipartiteGraphQ",
  	  "BiquadraticFilterModel",
  	  "BirnbaumImportance",
  	  "BirnbaumSaundersDistribution",
  	  "BitAnd",
  	  "BitClear",
  	  "BitGet",
  	  "BitLength",
  	  "BitNot",
  	  "BitOr",
  	  "BitRate",
  	  "BitSet",
  	  "BitShiftLeft",
  	  "BitShiftRight",
  	  "BitXor",
  	  "BiweightLocation",
  	  "BiweightMidvariance",
  	  "Black",
  	  "BlackmanHarrisWindow",
  	  "BlackmanNuttallWindow",
  	  "BlackmanWindow",
  	  "Blank",
  	  "BlankForm",
  	  "BlankNullSequence",
  	  "BlankSequence",
  	  "Blend",
  	  "Block",
  	  "BlockchainAddressData",
  	  "BlockchainBase",
  	  "BlockchainBlockData",
  	  "BlockchainContractValue",
  	  "BlockchainData",
  	  "BlockchainGet",
  	  "BlockchainKeyEncode",
  	  "BlockchainPut",
  	  "BlockchainTokenData",
  	  "BlockchainTransaction",
  	  "BlockchainTransactionData",
  	  "BlockchainTransactionSign",
  	  "BlockchainTransactionSubmit",
  	  "BlockDiagonalMatrix",
  	  "BlockLowerTriangularMatrix",
  	  "BlockMap",
  	  "BlockRandom",
  	  "BlockUpperTriangularMatrix",
  	  "BlomqvistBeta",
  	  "BlomqvistBetaTest",
  	  "Blue",
  	  "Blur",
  	  "Blurring",
  	  "BodePlot",
  	  "BohmanWindow",
  	  "Bold",
  	  "Bond",
  	  "BondCount",
  	  "BondLabels",
  	  "BondLabelStyle",
  	  "BondList",
  	  "BondQ",
  	  "Bookmarks",
  	  "Boole",
  	  "BooleanConsecutiveFunction",
  	  "BooleanConvert",
  	  "BooleanCountingFunction",
  	  "BooleanFunction",
  	  "BooleanGraph",
  	  "BooleanMaxterms",
  	  "BooleanMinimize",
  	  "BooleanMinterms",
  	  "BooleanQ",
  	  "BooleanRegion",
  	  "Booleans",
  	  "BooleanStrings",
  	  "BooleanTable",
  	  "BooleanVariables",
  	  "BorderDimensions",
  	  "BorelTannerDistribution",
  	  "Bottom",
  	  "BottomHatTransform",
  	  "BoundaryDiscretizeGraphics",
  	  "BoundaryDiscretizeRegion",
  	  "BoundaryMesh",
  	  "BoundaryMeshRegion",
  	  "BoundaryMeshRegionQ",
  	  "BoundaryStyle",
  	  "BoundedRegionQ",
  	  "BoundingRegion",
  	  "Bounds",
  	  "Box",
  	  "BoxBaselineShift",
  	  "BoxData",
  	  "BoxDimensions",
  	  "Boxed",
  	  "Boxes",
  	  "BoxForm",
  	  "BoxFormFormatTypes",
  	  "BoxFrame",
  	  "BoxID",
  	  "BoxMargins",
  	  "BoxMatrix",
  	  "BoxObject",
  	  "BoxRatios",
  	  "BoxRotation",
  	  "BoxRotationPoint",
  	  "BoxStyle",
  	  "BoxWhiskerChart",
  	  "Bra",
  	  "BracketingBar",
  	  "BraKet",
  	  "BrayCurtisDistance",
  	  "BreadthFirstScan",
  	  "Break",
  	  "BridgeData",
  	  "BrightnessEqualize",
  	  "BroadcastStationData",
  	  "Brown",
  	  "BrownForsytheTest",
  	  "BrownianBridgeProcess",
  	  "BrowserCategory",
  	  "BSplineBasis",
  	  "BSplineCurve",
  	  "BSplineCurve3DBox",
  	  "BSplineCurve3DBoxOptions",
  	  "BSplineCurveBox",
  	  "BSplineCurveBoxOptions",
  	  "BSplineFunction",
  	  "BSplineSurface",
  	  "BSplineSurface3DBox",
  	  "BSplineSurface3DBoxOptions",
  	  "BubbleChart",
  	  "BubbleChart3D",
  	  "BubbleScale",
  	  "BubbleSizes",
  	  "BuckyballGraph",
  	  "BuildCompiledComponent",
  	  "BuildingData",
  	  "BulletGauge",
  	  "BusinessDayQ",
  	  "ButterflyGraph",
  	  "ButterworthFilterModel",
  	  "Button",
  	  "ButtonBar",
  	  "ButtonBox",
  	  "ButtonBoxOptions",
  	  "ButtonCell",
  	  "ButtonContents",
  	  "ButtonData",
  	  "ButtonEvaluator",
  	  "ButtonExpandable",
  	  "ButtonFrame",
  	  "ButtonFunction",
  	  "ButtonMargins",
  	  "ButtonMinHeight",
  	  "ButtonNote",
  	  "ButtonNotebook",
  	  "ButtonSource",
  	  "ButtonStyle",
  	  "ButtonStyleMenuListing",
  	  "Byte",
  	  "ByteArray",
  	  "ByteArrayFormat",
  	  "ByteArrayFormatQ",
  	  "ByteArrayQ",
  	  "ByteArrayToString",
  	  "ByteCount",
  	  "ByteOrdering",
  	  "C",
  	  "CachedValue",
  	  "CacheGraphics",
  	  "CachePersistence",
  	  "CalendarConvert",
  	  "CalendarData",
  	  "CalendarType",
  	  "Callout",
  	  "CalloutMarker",
  	  "CalloutStyle",
  	  "CallPacket",
  	  "CanberraDistance",
  	  "Cancel",
  	  "CancelButton",
  	  "CandlestickChart",
  	  "CanonicalGraph",
  	  "CanonicalizePolygon",
  	  "CanonicalizePolyhedron",
  	  "CanonicalizeRegion",
  	  "CanonicalName",
  	  "CanonicalWarpingCorrespondence",
  	  "CanonicalWarpingDistance",
  	  "CantorMesh",
  	  "CantorStaircase",
  	  "Canvas",
  	  "Cap",
  	  "CapForm",
  	  "CapitalDifferentialD",
  	  "Capitalize",
  	  "CapsuleShape",
  	  "CaptureRunning",
  	  "CaputoD",
  	  "CardinalBSplineBasis",
  	  "CarlemanLinearize",
  	  "CarlsonRC",
  	  "CarlsonRD",
  	  "CarlsonRE",
  	  "CarlsonRF",
  	  "CarlsonRG",
  	  "CarlsonRJ",
  	  "CarlsonRK",
  	  "CarlsonRM",
  	  "CarmichaelLambda",
  	  "CaseOrdering",
  	  "Cases",
  	  "CaseSensitive",
  	  "Cashflow",
  	  "Casoratian",
  	  "Cast",
  	  "Catalan",
  	  "CatalanNumber",
  	  "Catch",
  	  "CategoricalDistribution",
  	  "Catenate",
  	  "CatenateLayer",
  	  "CauchyDistribution",
  	  "CauchyMatrix",
  	  "CauchyPointProcess",
  	  "CauchyWindow",
  	  "CayleyGraph",
  	  "CDF",
  	  "CDFDeploy",
  	  "CDFInformation",
  	  "CDFWavelet",
  	  "Ceiling",
  	  "CelestialSystem",
  	  "Cell",
  	  "CellAutoOverwrite",
  	  "CellBaseline",
  	  "CellBoundingBox",
  	  "CellBracketOptions",
  	  "CellChangeTimes",
  	  "CellContents",
  	  "CellContext",
  	  "CellDingbat",
  	  "CellDingbatMargin",
  	  "CellDynamicExpression",
  	  "CellEditDuplicate",
  	  "CellElementsBoundingBox",
  	  "CellElementSpacings",
  	  "CellEpilog",
  	  "CellEvaluationDuplicate",
  	  "CellEvaluationFunction",
  	  "CellEvaluationLanguage",
  	  "CellEventActions",
  	  "CellFrame",
  	  "CellFrameColor",
  	  "CellFrameLabelMargins",
  	  "CellFrameLabels",
  	  "CellFrameMargins",
  	  "CellFrameStyle",
  	  "CellGroup",
  	  "CellGroupData",
  	  "CellGrouping",
  	  "CellGroupingRules",
  	  "CellHorizontalScrolling",
  	  "CellID",
  	  "CellInsertionPointCell",
  	  "CellLabel",
  	  "CellLabelAutoDelete",
  	  "CellLabelMargins",
  	  "CellLabelPositioning",
  	  "CellLabelStyle",
  	  "CellLabelTemplate",
  	  "CellMargins",
  	  "CellObject",
  	  "CellOpen",
  	  "CellPrint",
  	  "CellProlog",
  	  "Cells",
  	  "CellSize",
  	  "CellStyle",
  	  "CellTags",
  	  "CellTrayPosition",
  	  "CellTrayWidgets",
  	  "CellularAutomaton",
  	  "CensoredDistribution",
  	  "Censoring",
  	  "Center",
  	  "CenterArray",
  	  "CenterDot",
  	  "CenteredInterval",
  	  "CentralFeature",
  	  "CentralMoment",
  	  "CentralMomentGeneratingFunction",
  	  "Cepstrogram",
  	  "CepstrogramArray",
  	  "CepstrumArray",
  	  "CForm",
  	  "ChampernowneNumber",
  	  "ChangeOptions",
  	  "ChannelBase",
  	  "ChannelBrokerAction",
  	  "ChannelDatabin",
  	  "ChannelHistoryLength",
  	  "ChannelListen",
  	  "ChannelListener",
  	  "ChannelListeners",
  	  "ChannelListenerWait",
  	  "ChannelObject",
  	  "ChannelPreSendFunction",
  	  "ChannelReceiverFunction",
  	  "ChannelSend",
  	  "ChannelSubscribers",
  	  "ChanVeseBinarize",
  	  "Character",
  	  "CharacterCounts",
  	  "CharacterEncoding",
  	  "CharacterEncodingsPath",
  	  "CharacteristicFunction",
  	  "CharacteristicPolynomial",
  	  "CharacterName",
  	  "CharacterNormalize",
  	  "CharacterRange",
  	  "Characters",
  	  "ChartBaseStyle",
  	  "ChartElementData",
  	  "ChartElementDataFunction",
  	  "ChartElementFunction",
  	  "ChartElements",
  	  "ChartLabels",
  	  "ChartLayout",
  	  "ChartLegends",
  	  "ChartStyle",
  	  "Chebyshev1FilterModel",
  	  "Chebyshev2FilterModel",
  	  "ChebyshevDistance",
  	  "ChebyshevT",
  	  "ChebyshevU",
  	  "Check",
  	  "CheckAbort",
  	  "CheckAll",
  	  "CheckArguments",
  	  "Checkbox",
  	  "CheckboxBar",
  	  "CheckboxBox",
  	  "CheckboxBoxOptions",
  	  "ChemicalConvert",
  	  "ChemicalData",
  	  "ChemicalFormula",
  	  "ChemicalInstance",
  	  "ChemicalReaction",
  	  "ChessboardDistance",
  	  "ChiDistribution",
  	  "ChineseRemainder",
  	  "ChiSquareDistribution",
  	  "ChoiceButtons",
  	  "ChoiceDialog",
  	  "CholeskyDecomposition",
  	  "Chop",
  	  "ChromaticityPlot",
  	  "ChromaticityPlot3D",
  	  "ChromaticPolynomial",
  	  "Circle",
  	  "CircleBox",
  	  "CircleDot",
  	  "CircleMinus",
  	  "CirclePlus",
  	  "CirclePoints",
  	  "CircleThrough",
  	  "CircleTimes",
  	  "CirculantGraph",
  	  "CircularArcThrough",
  	  "CircularOrthogonalMatrixDistribution",
  	  "CircularQuaternionMatrixDistribution",
  	  "CircularRealMatrixDistribution",
  	  "CircularSymplecticMatrixDistribution",
  	  "CircularUnitaryMatrixDistribution",
  	  "Circumsphere",
  	  "CityData",
  	  "ClassifierFunction",
  	  "ClassifierInformation",
  	  "ClassifierMeasurements",
  	  "ClassifierMeasurementsObject",
  	  "Classify",
  	  "ClassPriors",
  	  "Clear",
  	  "ClearAll",
  	  "ClearAttributes",
  	  "ClearCookies",
  	  "ClearPermissions",
  	  "ClearSystemCache",
  	  "ClebschGordan",
  	  "ClickPane",
  	  "ClickToCopy",
  	  "ClickToCopyEnabled",
  	  "Clip",
  	  "ClipboardNotebook",
  	  "ClipFill",
  	  "ClippingStyle",
  	  "ClipPlanes",
  	  "ClipPlanesStyle",
  	  "ClipRange",
  	  "Clock",
  	  "ClockGauge",
  	  "ClockwiseContourIntegral",
  	  "Close",
  	  "Closed",
  	  "CloseKernels",
  	  "ClosenessCentrality",
  	  "Closing",
  	  "ClosingAutoSave",
  	  "ClosingEvent",
  	  "CloudAccountData",
  	  "CloudBase",
  	  "CloudConnect",
  	  "CloudConnections",
  	  "CloudDeploy",
  	  "CloudDirectory",
  	  "CloudDisconnect",
  	  "CloudEvaluate",
  	  "CloudExport",
  	  "CloudExpression",
  	  "CloudExpressions",
  	  "CloudFunction",
  	  "CloudGet",
  	  "CloudImport",
  	  "CloudLoggingData",
  	  "CloudObject",
  	  "CloudObjectInformation",
  	  "CloudObjectInformationData",
  	  "CloudObjectNameFormat",
  	  "CloudObjects",
  	  "CloudObjectURLType",
  	  "CloudPublish",
  	  "CloudPut",
  	  "CloudRenderingMethod",
  	  "CloudSave",
  	  "CloudShare",
  	  "CloudSubmit",
  	  "CloudSymbol",
  	  "CloudUnshare",
  	  "CloudUserID",
  	  "ClusterClassify",
  	  "ClusterDissimilarityFunction",
  	  "ClusteringComponents",
  	  "ClusteringMeasurements",
  	  "ClusteringTree",
  	  "CMYKColor",
  	  "Coarse",
  	  "CodeAssistOptions",
  	  "Coefficient",
  	  "CoefficientArrays",
  	  "CoefficientDomain",
  	  "CoefficientList",
  	  "CoefficientRules",
  	  "CoifletWavelet",
  	  "Collect",
  	  "CollinearPoints",
  	  "Colon",
  	  "ColonForm",
  	  "ColorBalance",
  	  "ColorCombine",
  	  "ColorConvert",
  	  "ColorCoverage",
  	  "ColorData",
  	  "ColorDataFunction",
  	  "ColorDetect",
  	  "ColorDistance",
  	  "ColorFunction",
  	  "ColorFunctionBinning",
  	  "ColorFunctionScaling",
  	  "Colorize",
  	  "ColorNegate",
  	  "ColorOutput",
  	  "ColorProfileData",
  	  "ColorQ",
  	  "ColorQuantize",
  	  "ColorReplace",
  	  "ColorRules",
  	  "ColorSelectorSettings",
  	  "ColorSeparate",
  	  "ColorSetter",
  	  "ColorSetterBox",
  	  "ColorSetterBoxOptions",
  	  "ColorSlider",
  	  "ColorsNear",
  	  "ColorSpace",
  	  "ColorToneMapping",
  	  "Column",
  	  "ColumnAlignments",
  	  "ColumnBackgrounds",
  	  "ColumnForm",
  	  "ColumnLines",
  	  "ColumnsEqual",
  	  "ColumnSpacings",
  	  "ColumnWidths",
  	  "CombinatorB",
  	  "CombinatorC",
  	  "CombinatorI",
  	  "CombinatorK",
  	  "CombinatorS",
  	  "CombinatorW",
  	  "CombinatorY",
  	  "CombinedEntityClass",
  	  "CombinerFunction",
  	  "CometData",
  	  "CommonDefaultFormatTypes",
  	  "Commonest",
  	  "CommonestFilter",
  	  "CommonName",
  	  "CommonUnits",
  	  "CommunityBoundaryStyle",
  	  "CommunityGraphPlot",
  	  "CommunityLabels",
  	  "CommunityRegionStyle",
  	  "CompanyData",
  	  "CompatibleUnitQ",
  	  "CompilationOptions",
  	  "CompilationTarget",
  	  "Compile",
  	  "Compiled",
  	  "CompiledCodeFunction",
  	  "CompiledComponent",
  	  "CompiledExpressionDeclaration",
  	  "CompiledFunction",
  	  "CompiledLayer",
  	  "CompilerCallback",
  	  "CompilerEnvironment",
  	  "CompilerEnvironmentAppend",
  	  "CompilerEnvironmentAppendTo",
  	  "CompilerEnvironmentObject",
  	  "CompilerOptions",
  	  "Complement",
  	  "ComplementedEntityClass",
  	  "CompleteGraph",
  	  "CompleteGraphQ",
  	  "CompleteIntegral",
  	  "CompleteKaryTree",
  	  "CompletionsListPacket",
  	  "Complex",
  	  "ComplexArrayPlot",
  	  "ComplexContourPlot",
  	  "Complexes",
  	  "ComplexExpand",
  	  "ComplexInfinity",
  	  "ComplexityFunction",
  	  "ComplexListPlot",
  	  "ComplexPlot",
  	  "ComplexPlot3D",
  	  "ComplexRegionPlot",
  	  "ComplexStreamPlot",
  	  "ComplexVectorPlot",
  	  "ComponentMeasurements",
  	  "ComponentwiseContextMenu",
  	  "Compose",
  	  "ComposeList",
  	  "ComposeSeries",
  	  "CompositeQ",
  	  "Composition",
  	  "CompoundElement",
  	  "CompoundExpression",
  	  "CompoundPoissonDistribution",
  	  "CompoundPoissonProcess",
  	  "CompoundRenewalProcess",
  	  "Compress",
  	  "CompressedData",
  	  "CompressionLevel",
  	  "ComputeUncertainty",
  	  "ConcaveHullMesh",
  	  "Condition",
  	  "ConditionalExpression",
  	  "Conditioned",
  	  "Cone",
  	  "ConeBox",
  	  "ConfidenceLevel",
  	  "ConfidenceRange",
  	  "ConfidenceTransform",
  	  "ConfigurationPath",
  	  "Confirm",
  	  "ConfirmAssert",
  	  "ConfirmBy",
  	  "ConfirmMatch",
  	  "ConfirmQuiet",
  	  "ConformationMethod",
  	  "ConformAudio",
  	  "ConformImages",
  	  "Congruent",
  	  "ConicGradientFilling",
  	  "ConicHullRegion",
  	  "ConicHullRegion3DBox",
  	  "ConicHullRegion3DBoxOptions",
  	  "ConicHullRegionBox",
  	  "ConicHullRegionBoxOptions",
  	  "ConicOptimization",
  	  "Conjugate",
  	  "ConjugateTranspose",
  	  "Conjunction",
  	  "Connect",
  	  "ConnectedComponents",
  	  "ConnectedGraphComponents",
  	  "ConnectedGraphQ",
  	  "ConnectedMeshComponents",
  	  "ConnectedMoleculeComponents",
  	  "ConnectedMoleculeQ",
  	  "ConnectionSettings",
  	  "ConnectLibraryCallbackFunction",
  	  "ConnectSystemModelComponents",
  	  "ConnectSystemModelController",
  	  "ConnesWindow",
  	  "ConoverTest",
  	  "ConservativeConvectionPDETerm",
  	  "ConsoleMessage",
  	  "Constant",
  	  "ConstantArray",
  	  "ConstantArrayLayer",
  	  "ConstantImage",
  	  "ConstantPlusLayer",
  	  "ConstantRegionQ",
  	  "Constants",
  	  "ConstantTimesLayer",
  	  "ConstellationData",
  	  "ConstrainedMax",
  	  "ConstrainedMin",
  	  "Construct",
  	  "Containing",
  	  "ContainsAll",
  	  "ContainsAny",
  	  "ContainsExactly",
  	  "ContainsNone",
  	  "ContainsOnly",
  	  "ContentDetectorFunction",
  	  "ContentFieldOptions",
  	  "ContentLocationFunction",
  	  "ContentObject",
  	  "ContentPadding",
  	  "ContentsBoundingBox",
  	  "ContentSelectable",
  	  "ContentSize",
  	  "Context",
  	  "ContextMenu",
  	  "Contexts",
  	  "ContextToFileName",
  	  "Continuation",
  	  "Continue",
  	  "ContinuedFraction",
  	  "ContinuedFractionK",
  	  "ContinuousAction",
  	  "ContinuousMarkovProcess",
  	  "ContinuousTask",
  	  "ContinuousTimeModelQ",
  	  "ContinuousWaveletData",
  	  "ContinuousWaveletTransform",
  	  "ContourDetect",
  	  "ContourGraphics",
  	  "ContourIntegral",
  	  "ContourLabels",
  	  "ContourLines",
  	  "ContourPlot",
  	  "ContourPlot3D",
  	  "Contours",
  	  "ContourShading",
  	  "ContourSmoothing",
  	  "ContourStyle",
  	  "ContraharmonicMean",
  	  "ContrastiveLossLayer",
  	  "Control",
  	  "ControlActive",
  	  "ControlAlignment",
  	  "ControlGroupContentsBox",
  	  "ControllabilityGramian",
  	  "ControllabilityMatrix",
  	  "ControllableDecomposition",
  	  "ControllableModelQ",
  	  "ControllerDuration",
  	  "ControllerInformation",
  	  "ControllerInformationData",
  	  "ControllerLinking",
  	  "ControllerManipulate",
  	  "ControllerMethod",
  	  "ControllerPath",
  	  "ControllerState",
  	  "ControlPlacement",
  	  "ControlsRendering",
  	  "ControlType",
  	  "ConvectionPDETerm",
  	  "Convergents",
  	  "ConversionOptions",
  	  "ConversionRules",
  	  "ConvertToPostScript",
  	  "ConvertToPostScriptPacket",
  	  "ConvexHullMesh",
  	  "ConvexHullRegion",
  	  "ConvexOptimization",
  	  "ConvexPolygonQ",
  	  "ConvexPolyhedronQ",
  	  "ConvexRegionQ",
  	  "ConvolutionLayer",
  	  "Convolve",
  	  "ConwayGroupCo1",
  	  "ConwayGroupCo2",
  	  "ConwayGroupCo3",
  	  "CookieFunction",
  	  "Cookies",
  	  "CoordinateBoundingBox",
  	  "CoordinateBoundingBoxArray",
  	  "CoordinateBounds",
  	  "CoordinateBoundsArray",
  	  "CoordinateChartData",
  	  "CoordinatesToolOptions",
  	  "CoordinateTransform",
  	  "CoordinateTransformData",
  	  "CoplanarPoints",
  	  "CoprimeQ",
  	  "Coproduct",
  	  "CopulaDistribution",
  	  "Copyable",
  	  "CopyDatabin",
  	  "CopyDirectory",
  	  "CopyFile",
  	  "CopyFunction",
  	  "CopyTag",
  	  "CopyToClipboard",
  	  "CoreNilpotentDecomposition",
  	  "CornerFilter",
  	  "CornerNeighbors",
  	  "Correlation",
  	  "CorrelationDistance",
  	  "CorrelationFunction",
  	  "CorrelationTest",
  	  "Cos",
  	  "Cosh",
  	  "CoshIntegral",
  	  "CosineDistance",
  	  "CosineWindow",
  	  "CosIntegral",
  	  "Cot",
  	  "Coth",
  	  "CoulombF",
  	  "CoulombG",
  	  "CoulombH1",
  	  "CoulombH2",
  	  "Count",
  	  "CountDistinct",
  	  "CountDistinctBy",
  	  "CounterAssignments",
  	  "CounterBox",
  	  "CounterBoxOptions",
  	  "CounterClockwiseContourIntegral",
  	  "CounterEvaluator",
  	  "CounterFunction",
  	  "CounterIncrements",
  	  "CounterStyle",
  	  "CounterStyleMenuListing",
  	  "CountRoots",
  	  "CountryData",
  	  "Counts",
  	  "CountsBy",
  	  "Covariance",
  	  "CovarianceEstimatorFunction",
  	  "CovarianceFunction",
  	  "CoxianDistribution",
  	  "CoxIngersollRossProcess",
  	  "CoxModel",
  	  "CoxModelFit",
  	  "CramerVonMisesTest",
  	  "CreateArchive",
  	  "CreateCellID",
  	  "CreateChannel",
  	  "CreateCloudExpression",
  	  "CreateCompilerEnvironment",
  	  "CreateDatabin",
  	  "CreateDataStructure",
  	  "CreateDataSystemModel",
  	  "CreateDialog",
  	  "CreateDirectory",
  	  "CreateDocument",
  	  "CreateFile",
  	  "CreateIntermediateDirectories",
  	  "CreateLicenseEntitlement",
  	  "CreateManagedLibraryExpression",
  	  "CreateNotebook",
  	  "CreatePacletArchive",
  	  "CreatePalette",
  	  "CreatePermissionsGroup",
  	  "CreateScheduledTask",
  	  "CreateSearchIndex",
  	  "CreateSystemModel",
  	  "CreateTemporary",
  	  "CreateTypeInstance",
  	  "CreateUUID",
  	  "CreateWindow",
  	  "CriterionFunction",
  	  "CriticalityFailureImportance",
  	  "CriticalitySuccessImportance",
  	  "CriticalSection",
  	  "Cross",
  	  "CrossEntropyLossLayer",
  	  "CrossingCount",
  	  "CrossingDetect",
  	  "CrossingPolygon",
  	  "CrossMatrix",
  	  "Csc",
  	  "Csch",
  	  "CSGRegion",
  	  "CSGRegionQ",
  	  "CSGRegionTree",
  	  "CTCLossLayer",
  	  "Cube",
  	  "CubeRoot",
  	  "Cubics",
  	  "Cuboid",
  	  "CuboidBox",
  	  "CuboidBoxOptions",
  	  "Cumulant",
  	  "CumulantGeneratingFunction",
  	  "CumulativeFeatureImpactPlot",
  	  "Cup",
  	  "CupCap",
  	  "Curl",
  	  "CurlyDoubleQuote",
  	  "CurlyQuote",
  	  "CurrencyConvert",
  	  "CurrentDate",
  	  "CurrentImage",
  	  "CurrentNotebookImage",
  	  "CurrentScreenImage",
  	  "CurrentValue",
  	  "Curry",
  	  "CurryApplied",
  	  "CurvatureFlowFilter",
  	  "CurveClosed",
  	  "Cyan",
  	  "CycleGraph",
  	  "CycleIndexPolynomial",
  	  "Cycles",
  	  "CyclicGroup",
  	  "Cyclotomic",
  	  "Cylinder",
  	  "CylinderBox",
  	  "CylinderBoxOptions",
  	  "CylindricalDecomposition",
  	  "CylindricalDecompositionFunction",
  	  "D",
  	  "DagumDistribution",
  	  "DamData",
  	  "DamerauLevenshteinDistance",
  	  "DampingFactor",
  	  "Darker",
  	  "Dashed",
  	  "Dashing",
  	  "DatabaseConnect",
  	  "DatabaseDisconnect",
  	  "DatabaseReference",
  	  "Databin",
  	  "DatabinAdd",
  	  "DatabinRemove",
  	  "Databins",
  	  "DatabinSubmit",
  	  "DatabinUpload",
  	  "DataCompression",
  	  "DataDistribution",
  	  "DataRange",
  	  "DataReversed",
  	  "Dataset",
  	  "DatasetDisplayPanel",
  	  "DatasetTheme",
  	  "DataStructure",
  	  "DataStructureQ",
  	  "Date",
  	  "DateBounds",
  	  "Dated",
  	  "DateDelimiters",
  	  "DateDifference",
  	  "DatedUnit",
  	  "DateFormat",
  	  "DateFunction",
  	  "DateGranularity",
  	  "DateHistogram",
  	  "DateInterval",
  	  "DateList",
  	  "DateListLogPlot",
  	  "DateListPlot",
  	  "DateListStepPlot",
  	  "DateObject",
  	  "DateObjectQ",
  	  "DateOverlapsQ",
  	  "DatePattern",
  	  "DatePlus",
  	  "DateRange",
  	  "DateReduction",
  	  "DateScale",
  	  "DateSelect",
  	  "DateString",
  	  "DateTicksFormat",
  	  "DateValue",
  	  "DateWithinQ",
  	  "DaubechiesWavelet",
  	  "DavisDistribution",
  	  "DawsonF",
  	  "DayCount",
  	  "DayCountConvention",
  	  "DayHemisphere",
  	  "DaylightQ",
  	  "DayMatchQ",
  	  "DayName",
  	  "DayNightTerminator",
  	  "DayPlus",
  	  "DayRange",
  	  "DayRound",
  	  "DeBruijnGraph",
  	  "DeBruijnSequence",
  	  "Debug",
  	  "DebugTag",
  	  "Decapitalize",
  	  "Decimal",
  	  "DecimalForm",
  	  "DeclareCompiledComponent",
  	  "DeclareKnownSymbols",
  	  "DeclarePackage",
  	  "Decompose",
  	  "DeconvolutionLayer",
  	  "Decrement",
  	  "Decrypt",
  	  "DecryptFile",
  	  "DedekindEta",
  	  "DeepSpaceProbeData",
  	  "Default",
  	  "Default2DTool",
  	  "Default3DTool",
  	  "DefaultAttachedCellStyle",
  	  "DefaultAxesStyle",
  	  "DefaultBaseStyle",
  	  "DefaultBoxStyle",
  	  "DefaultButton",
  	  "DefaultColor",
  	  "DefaultControlPlacement",
  	  "DefaultDockedCellStyle",
  	  "DefaultDuplicateCellStyle",
  	  "DefaultDuration",
  	  "DefaultElement",
  	  "DefaultFaceGridsStyle",
  	  "DefaultFieldHintStyle",
  	  "DefaultFont",
  	  "DefaultFontProperties",
  	  "DefaultFormatType",
  	  "DefaultFrameStyle",
  	  "DefaultFrameTicksStyle",
  	  "DefaultGridLinesStyle",
  	  "DefaultInlineFormatType",
  	  "DefaultInputFormatType",
  	  "DefaultLabelStyle",
  	  "DefaultMenuStyle",
  	  "DefaultNaturalLanguage",
  	  "DefaultNewCellStyle",
  	  "DefaultNewInlineCellStyle",
  	  "DefaultNotebook",
  	  "DefaultOptions",
  	  "DefaultOutputFormatType",
  	  "DefaultPrintPrecision",
  	  "DefaultStyle",
  	  "DefaultStyleDefinitions",
  	  "DefaultTextFormatType",
  	  "DefaultTextInlineFormatType",
  	  "DefaultTicksStyle",
  	  "DefaultTooltipStyle",
  	  "DefaultValue",
  	  "DefaultValues",
  	  "Defer",
  	  "DefineExternal",
  	  "DefineInputStreamMethod",
  	  "DefineOutputStreamMethod",
  	  "DefineResourceFunction",
  	  "Definition",
  	  "Degree",
  	  "DegreeCentrality",
  	  "DegreeGraphDistribution",
  	  "DegreeLexicographic",
  	  "DegreeReverseLexicographic",
  	  "DEigensystem",
  	  "DEigenvalues",
  	  "Deinitialization",
  	  "Del",
  	  "DelaunayMesh",
  	  "Delayed",
  	  "Deletable",
  	  "Delete",
  	  "DeleteAdjacentDuplicates",
  	  "DeleteAnomalies",
  	  "DeleteBorderComponents",
  	  "DeleteCases",
  	  "DeleteChannel",
  	  "DeleteCloudExpression",
  	  "DeleteContents",
  	  "DeleteDirectory",
  	  "DeleteDuplicates",
  	  "DeleteDuplicatesBy",
  	  "DeleteElements",
  	  "DeleteFile",
  	  "DeleteMissing",
  	  "DeleteObject",
  	  "DeletePermissionsKey",
  	  "DeleteSearchIndex",
  	  "DeleteSmallComponents",
  	  "DeleteStopwords",
  	  "DeleteWithContents",
  	  "DeletionWarning",
  	  "DelimitedArray",
  	  "DelimitedSequence",
  	  "Delimiter",
  	  "DelimiterAutoMatching",
  	  "DelimiterFlashTime",
  	  "DelimiterMatching",
  	  "Delimiters",
  	  "DeliveryFunction",
  	  "Dendrogram",
  	  "Denominator",
  	  "DensityGraphics",
  	  "DensityHistogram",
  	  "DensityPlot",
  	  "DensityPlot3D",
  	  "DependentVariables",
  	  "Deploy",
  	  "Deployed",
  	  "Depth",
  	  "DepthFirstScan",
  	  "Derivative",
  	  "DerivativeFilter",
  	  "DerivativePDETerm",
  	  "DerivedKey",
  	  "DescriptorStateSpace",
  	  "DesignMatrix",
  	  "DestroyAfterEvaluation",
  	  "Det",
  	  "DeviceClose",
  	  "DeviceConfigure",
  	  "DeviceExecute",
  	  "DeviceExecuteAsynchronous",
  	  "DeviceObject",
  	  "DeviceOpen",
  	  "DeviceOpenQ",
  	  "DeviceRead",
  	  "DeviceReadBuffer",
  	  "DeviceReadLatest",
  	  "DeviceReadList",
  	  "DeviceReadTimeSeries",
  	  "Devices",
  	  "DeviceStreams",
  	  "DeviceWrite",
  	  "DeviceWriteBuffer",
  	  "DGaussianWavelet",
  	  "DiacriticalPositioning",
  	  "Diagonal",
  	  "DiagonalizableMatrixQ",
  	  "DiagonalMatrix",
  	  "DiagonalMatrixQ",
  	  "Dialog",
  	  "DialogIndent",
  	  "DialogInput",
  	  "DialogLevel",
  	  "DialogNotebook",
  	  "DialogProlog",
  	  "DialogReturn",
  	  "DialogSymbols",
  	  "Diamond",
  	  "DiamondMatrix",
  	  "DiceDissimilarity",
  	  "DictionaryLookup",
  	  "DictionaryWordQ",
  	  "DifferenceDelta",
  	  "DifferenceOrder",
  	  "DifferenceQuotient",
  	  "DifferenceRoot",
  	  "DifferenceRootReduce",
  	  "Differences",
  	  "DifferentialD",
  	  "DifferentialRoot",
  	  "DifferentialRootReduce",
  	  "DifferentiatorFilter",
  	  "DiffusionPDETerm",
  	  "DiggleGatesPointProcess",
  	  "DiggleGrattonPointProcess",
  	  "DigitalSignature",
  	  "DigitBlock",
  	  "DigitBlockMinimum",
  	  "DigitCharacter",
  	  "DigitCount",
  	  "DigitQ",
  	  "DihedralAngle",
  	  "DihedralGroup",
  	  "Dilation",
  	  "DimensionalCombinations",
  	  "DimensionalMeshComponents",
  	  "DimensionReduce",
  	  "DimensionReducerFunction",
  	  "DimensionReduction",
  	  "Dimensions",
  	  "DiracComb",
  	  "DiracDelta",
  	  "DirectedEdge",
  	  "DirectedEdges",
  	  "DirectedGraph",
  	  "DirectedGraphQ",
  	  "DirectedInfinity",
  	  "Direction",
  	  "DirectionalLight",
  	  "Directive",
  	  "Directory",
  	  "DirectoryName",
  	  "DirectoryQ",
  	  "DirectoryStack",
  	  "DirichletBeta",
  	  "DirichletCharacter",
  	  "DirichletCondition",
  	  "DirichletConvolve",
  	  "DirichletDistribution",
  	  "DirichletEta",
  	  "DirichletL",
  	  "DirichletLambda",
  	  "DirichletTransform",
  	  "DirichletWindow",
  	  "DisableConsolePrintPacket",
  	  "DisableFormatting",
  	  "DiscreteAsymptotic",
  	  "DiscreteChirpZTransform",
  	  "DiscreteConvolve",
  	  "DiscreteDelta",
  	  "DiscreteHadamardTransform",
  	  "DiscreteIndicator",
  	  "DiscreteInputOutputModel",
  	  "DiscreteLimit",
  	  "DiscreteLQEstimatorGains",
  	  "DiscreteLQRegulatorGains",
  	  "DiscreteLyapunovSolve",
  	  "DiscreteMarkovProcess",
  	  "DiscreteMaxLimit",
  	  "DiscreteMinLimit",
  	  "DiscretePlot",
  	  "DiscretePlot3D",
  	  "DiscreteRatio",
  	  "DiscreteRiccatiSolve",
  	  "DiscreteShift",
  	  "DiscreteTimeModelQ",
  	  "DiscreteUniformDistribution",
  	  "DiscreteVariables",
  	  "DiscreteWaveletData",
  	  "DiscreteWaveletPacketTransform",
  	  "DiscreteWaveletTransform",
  	  "DiscretizeGraphics",
  	  "DiscretizeRegion",
  	  "Discriminant",
  	  "DisjointQ",
  	  "Disjunction",
  	  "Disk",
  	  "DiskBox",
  	  "DiskBoxOptions",
  	  "DiskMatrix",
  	  "DiskSegment",
  	  "Dispatch",
  	  "DispatchQ",
  	  "DispersionEstimatorFunction",
  	  "Display",
  	  "DisplayAllSteps",
  	  "DisplayEndPacket",
  	  "DisplayForm",
  	  "DisplayFunction",
  	  "DisplayPacket",
  	  "DisplayRules",
  	  "DisplayString",
  	  "DisplayTemporary",
  	  "DisplayWith",
  	  "DisplayWithRef",
  	  "DisplayWithVariable",
  	  "DistanceFunction",
  	  "DistanceMatrix",
  	  "DistanceTransform",
  	  "Distribute",
  	  "Distributed",
  	  "DistributedContexts",
  	  "DistributeDefinitions",
  	  "DistributionChart",
  	  "DistributionDomain",
  	  "DistributionFitTest",
  	  "DistributionParameterAssumptions",
  	  "DistributionParameterQ",
  	  "Dithering",
  	  "Div",
  	  "Divergence",
  	  "Divide",
  	  "DivideBy",
  	  "Dividers",
  	  "DivideSides",
  	  "Divisible",
  	  "Divisors",
  	  "DivisorSigma",
  	  "DivisorSum",
  	  "DMSList",
  	  "DMSString",
  	  "Do",
  	  "DockedCell",
  	  "DockedCells",
  	  "DocumentGenerator",
  	  "DocumentGeneratorInformation",
  	  "DocumentGeneratorInformationData",
  	  "DocumentGenerators",
  	  "DocumentNotebook",
  	  "DocumentWeightingRules",
  	  "Dodecahedron",
  	  "DomainRegistrationInformation",
  	  "DominantColors",
  	  "DominatorTreeGraph",
  	  "DominatorVertexList",
  	  "DOSTextFormat",
  	  "Dot",
  	  "DotDashed",
  	  "DotEqual",
  	  "DotLayer",
  	  "DotPlusLayer",
  	  "Dotted",
  	  "DoubleBracketingBar",
  	  "DoubleContourIntegral",
  	  "DoubleDownArrow",
  	  "DoubleLeftArrow",
  	  "DoubleLeftRightArrow",
  	  "DoubleLeftTee",
  	  "DoubleLongLeftArrow",
  	  "DoubleLongLeftRightArrow",
  	  "DoubleLongRightArrow",
  	  "DoubleRightArrow",
  	  "DoubleRightTee",
  	  "DoubleUpArrow",
  	  "DoubleUpDownArrow",
  	  "DoubleVerticalBar",
  	  "DoublyInfinite",
  	  "Down",
  	  "DownArrow",
  	  "DownArrowBar",
  	  "DownArrowUpArrow",
  	  "DownLeftRightVector",
  	  "DownLeftTeeVector",
  	  "DownLeftVector",
  	  "DownLeftVectorBar",
  	  "DownRightTeeVector",
  	  "DownRightVector",
  	  "DownRightVectorBar",
  	  "Downsample",
  	  "DownTee",
  	  "DownTeeArrow",
  	  "DownValues",
  	  "DownValuesFunction",
  	  "DragAndDrop",
  	  "DrawBackFaces",
  	  "DrawEdges",
  	  "DrawFrontFaces",
  	  "DrawHighlighted",
  	  "DrazinInverse",
  	  "Drop",
  	  "DropoutLayer",
  	  "DropShadowing",
  	  "DSolve",
  	  "DSolveChangeVariables",
  	  "DSolveValue",
  	  "Dt",
  	  "DualLinearProgramming",
  	  "DualPlanarGraph",
  	  "DualPolyhedron",
  	  "DualSystemsModel",
  	  "DumpGet",
  	  "DumpSave",
  	  "DuplicateFreeQ",
  	  "Duration",
  	  "Dynamic",
  	  "DynamicBox",
  	  "DynamicBoxOptions",
  	  "DynamicEvaluationTimeout",
  	  "DynamicGeoGraphics",
  	  "DynamicImage",
  	  "DynamicLocation",
  	  "DynamicModule",
  	  "DynamicModuleBox",
  	  "DynamicModuleBoxOptions",
  	  "DynamicModuleParent",
  	  "DynamicModuleValues",
  	  "DynamicName",
  	  "DynamicNamespace",
  	  "DynamicReference",
  	  "DynamicSetting",
  	  "DynamicUpdating",
  	  "DynamicWrapper",
  	  "DynamicWrapperBox",
  	  "DynamicWrapperBoxOptions",
  	  "E",
  	  "EarthImpactData",
  	  "EarthquakeData",
  	  "EccentricityCentrality",
  	  "Echo",
  	  "EchoEvaluation",
  	  "EchoFunction",
  	  "EchoLabel",
  	  "EchoTiming",
  	  "EclipseType",
  	  "EdgeAdd",
  	  "EdgeBetweennessCentrality",
  	  "EdgeCapacity",
  	  "EdgeCapForm",
  	  "EdgeChromaticNumber",
  	  "EdgeColor",
  	  "EdgeConnectivity",
  	  "EdgeContract",
  	  "EdgeCost",
  	  "EdgeCount",
  	  "EdgeCoverQ",
  	  "EdgeCycleMatrix",
  	  "EdgeDashing",
  	  "EdgeDelete",
  	  "EdgeDetect",
  	  "EdgeForm",
  	  "EdgeIndex",
  	  "EdgeJoinForm",
  	  "EdgeLabeling",
  	  "EdgeLabels",
  	  "EdgeLabelStyle",
  	  "EdgeList",
  	  "EdgeOpacity",
  	  "EdgeQ",
  	  "EdgeRenderingFunction",
  	  "EdgeRules",
  	  "EdgeShapeFunction",
  	  "EdgeStyle",
  	  "EdgeTaggedGraph",
  	  "EdgeTaggedGraphQ",
  	  "EdgeTags",
  	  "EdgeThickness",
  	  "EdgeTransitiveGraphQ",
  	  "EdgeValueRange",
  	  "EdgeValueSizes",
  	  "EdgeWeight",
  	  "EdgeWeightedGraphQ",
  	  "Editable",
  	  "EditButtonSettings",
  	  "EditCellTagsSettings",
  	  "EditDistance",
  	  "EffectiveInterest",
  	  "Eigensystem",
  	  "Eigenvalues",
  	  "EigenvectorCentrality",
  	  "Eigenvectors",
  	  "Element",
  	  "ElementData",
  	  "ElementwiseLayer",
  	  "ElidedForms",
  	  "Eliminate",
  	  "EliminationOrder",
  	  "Ellipsoid",
  	  "EllipticE",
  	  "EllipticExp",
  	  "EllipticExpPrime",
  	  "EllipticF",
  	  "EllipticFilterModel",
  	  "EllipticK",
  	  "EllipticLog",
  	  "EllipticNomeQ",
  	  "EllipticPi",
  	  "EllipticReducedHalfPeriods",
  	  "EllipticTheta",
  	  "EllipticThetaPrime",
  	  "EmbedCode",
  	  "EmbeddedHTML",
  	  "EmbeddedService",
  	  "EmbeddedSQLEntityClass",
  	  "EmbeddedSQLExpression",
  	  "EmbeddingLayer",
  	  "EmbeddingObject",
  	  "EmitSound",
  	  "EmphasizeSyntaxErrors",
  	  "EmpiricalDistribution",
  	  "Empty",
  	  "EmptyGraphQ",
  	  "EmptyRegion",
  	  "EmptySpaceF",
  	  "EnableConsolePrintPacket",
  	  "Enabled",
  	  "Enclose",
  	  "Encode",
  	  "Encrypt",
  	  "EncryptedObject",
  	  "EncryptFile",
  	  "End",
  	  "EndAdd",
  	  "EndDialogPacket",
  	  "EndOfBuffer",
  	  "EndOfFile",
  	  "EndOfLine",
  	  "EndOfString",
  	  "EndPackage",
  	  "EngineEnvironment",
  	  "EngineeringForm",
  	  "Enter",
  	  "EnterExpressionPacket",
  	  "EnterTextPacket",
  	  "Entity",
  	  "EntityClass",
  	  "EntityClassList",
  	  "EntityCopies",
  	  "EntityFunction",
  	  "EntityGroup",
  	  "EntityInstance",
  	  "EntityList",
  	  "EntityPrefetch",
  	  "EntityProperties",
  	  "EntityProperty",
  	  "EntityPropertyClass",
  	  "EntityRegister",
  	  "EntityStore",
  	  "EntityStores",
  	  "EntityTypeName",
  	  "EntityUnregister",
  	  "EntityValue",
  	  "Entropy",
  	  "EntropyFilter",
  	  "Environment",
  	  "Epilog",
  	  "EpilogFunction",
  	  "Equal",
  	  "EqualColumns",
  	  "EqualRows",
  	  "EqualTilde",
  	  "EqualTo",
  	  "EquatedTo",
  	  "Equilibrium",
  	  "EquirippleFilterKernel",
  	  "Equivalent",
  	  "Erf",
  	  "Erfc",
  	  "Erfi",
  	  "ErlangB",
  	  "ErlangC",
  	  "ErlangDistribution",
  	  "Erosion",
  	  "ErrorBox",
  	  "ErrorBoxOptions",
  	  "ErrorNorm",
  	  "ErrorPacket",
  	  "ErrorsDialogSettings",
  	  "EscapeRadius",
  	  "EstimatedBackground",
  	  "EstimatedDistribution",
  	  "EstimatedPointNormals",
  	  "EstimatedPointProcess",
  	  "EstimatedProcess",
  	  "EstimatedVariogramModel",
  	  "EstimatorGains",
  	  "EstimatorRegulator",
  	  "EuclideanDistance",
  	  "EulerAngles",
  	  "EulerCharacteristic",
  	  "EulerE",
  	  "EulerGamma",
  	  "EulerianGraphQ",
  	  "EulerMatrix",
  	  "EulerPhi",
  	  "Evaluatable",
  	  "Evaluate",
  	  "Evaluated",
  	  "EvaluatePacket",
  	  "EvaluateScheduledTask",
  	  "EvaluationBox",
  	  "EvaluationCell",
  	  "EvaluationCompletionAction",
  	  "EvaluationData",
  	  "EvaluationElements",
  	  "EvaluationEnvironment",
  	  "EvaluationMode",
  	  "EvaluationMonitor",
  	  "EvaluationNotebook",
  	  "EvaluationObject",
  	  "EvaluationOrder",
  	  "EvaluationPrivileges",
  	  "EvaluationRateLimit",
  	  "Evaluator",
  	  "EvaluatorNames",
  	  "EvenQ",
  	  "EventData",
  	  "EventEvaluator",
  	  "EventHandler",
  	  "EventHandlerTag",
  	  "EventLabels",
  	  "EventSeries",
  	  "ExactBlackmanWindow",
  	  "ExactNumberQ",
  	  "ExactRootIsolation",
  	  "ExampleData",
  	  "Except",
  	  "ExcludedContexts",
  	  "ExcludedForms",
  	  "ExcludedLines",
  	  "ExcludedPhysicalQuantities",
  	  "ExcludePods",
  	  "Exclusions",
  	  "ExclusionsStyle",
  	  "Exists",
  	  "Exit",
  	  "ExitDialog",
  	  "ExoplanetData",
  	  "Exp",
  	  "Expand",
  	  "ExpandAll",
  	  "ExpandDenominator",
  	  "ExpandFileName",
  	  "ExpandNumerator",
  	  "Expectation",
  	  "ExpectationE",
  	  "ExpectedValue",
  	  "ExpGammaDistribution",
  	  "ExpIntegralE",
  	  "ExpIntegralEi",
  	  "ExpirationDate",
  	  "Exponent",
  	  "ExponentFunction",
  	  "ExponentialDistribution",
  	  "ExponentialFamily",
  	  "ExponentialGeneratingFunction",
  	  "ExponentialMovingAverage",
  	  "ExponentialPowerDistribution",
  	  "ExponentPosition",
  	  "ExponentStep",
  	  "Export",
  	  "ExportAutoReplacements",
  	  "ExportByteArray",
  	  "ExportForm",
  	  "ExportPacket",
  	  "ExportString",
  	  "Expression",
  	  "ExpressionCell",
  	  "ExpressionGraph",
  	  "ExpressionPacket",
  	  "ExpressionTree",
  	  "ExpressionUUID",
  	  "ExpToTrig",
  	  "ExtendedEntityClass",
  	  "ExtendedGCD",
  	  "Extension",
  	  "ExtentElementFunction",
  	  "ExtentMarkers",
  	  "ExtentSize",
  	  "ExternalBundle",
  	  "ExternalCall",
  	  "ExternalDataCharacterEncoding",
  	  "ExternalEvaluate",
  	  "ExternalFunction",
  	  "ExternalFunctionName",
  	  "ExternalIdentifier",
  	  "ExternalObject",
  	  "ExternalOptions",
  	  "ExternalSessionObject",
  	  "ExternalSessions",
  	  "ExternalStorageBase",
  	  "ExternalStorageDownload",
  	  "ExternalStorageGet",
  	  "ExternalStorageObject",
  	  "ExternalStoragePut",
  	  "ExternalStorageUpload",
  	  "ExternalTypeSignature",
  	  "ExternalValue",
  	  "Extract",
  	  "ExtractArchive",
  	  "ExtractLayer",
  	  "ExtractPacletArchive",
  	  "ExtremeValueDistribution",
  	  "FaceAlign",
  	  "FaceForm",
  	  "FaceGrids",
  	  "FaceGridsStyle",
  	  "FaceRecognize",
  	  "FacialFeatures",
  	  "Factor",
  	  "FactorComplete",
  	  "Factorial",
  	  "Factorial2",
  	  "FactorialMoment",
  	  "FactorialMomentGeneratingFunction",
  	  "FactorialPower",
  	  "FactorInteger",
  	  "FactorList",
  	  "FactorSquareFree",
  	  "FactorSquareFreeList",
  	  "FactorTerms",
  	  "FactorTermsList",
  	  "Fail",
  	  "Failure",
  	  "FailureAction",
  	  "FailureDistribution",
  	  "FailureQ",
  	  "False",
  	  "FareySequence",
  	  "FARIMAProcess",
  	  "FeatureDistance",
  	  "FeatureExtract",
  	  "FeatureExtraction",
  	  "FeatureExtractor",
  	  "FeatureExtractorFunction",
  	  "FeatureImpactPlot",
  	  "FeatureNames",
  	  "FeatureNearest",
  	  "FeatureSpacePlot",
  	  "FeatureSpacePlot3D",
  	  "FeatureTypes",
  	  "FeatureValueDependencyPlot",
  	  "FeatureValueImpactPlot",
  	  "FEDisableConsolePrintPacket",
  	  "FeedbackLinearize",
  	  "FeedbackSector",
  	  "FeedbackSectorStyle",
  	  "FeedbackType",
  	  "FEEnableConsolePrintPacket",
  	  "FetalGrowthData",
  	  "Fibonacci",
  	  "Fibonorial",
  	  "FieldCompletionFunction",
  	  "FieldHint",
  	  "FieldHintStyle",
  	  "FieldMasked",
  	  "FieldSize",
  	  "File",
  	  "FileBaseName",
  	  "FileByteCount",
  	  "FileConvert",
  	  "FileDate",
  	  "FileExistsQ",
  	  "FileExtension",
  	  "FileFormat",
  	  "FileFormatProperties",
  	  "FileFormatQ",
  	  "FileHandler",
  	  "FileHash",
  	  "FileInformation",
  	  "FileName",
  	  "FileNameDepth",
  	  "FileNameDialogSettings",
  	  "FileNameDrop",
  	  "FileNameForms",
  	  "FileNameJoin",
  	  "FileNames",
  	  "FileNameSetter",
  	  "FileNameSplit",
  	  "FileNameTake",
  	  "FileNameToFormatList",
  	  "FilePrint",
  	  "FileSize",
  	  "FileSystemMap",
  	  "FileSystemScan",
  	  "FileSystemTree",
  	  "FileTemplate",
  	  "FileTemplateApply",
  	  "FileType",
  	  "FilledCurve",
  	  "FilledCurveBox",
  	  "FilledCurveBoxOptions",
  	  "FilledTorus",
  	  "FillForm",
  	  "Filling",
  	  "FillingStyle",
  	  "FillingTransform",
  	  "FilteredEntityClass",
  	  "FilterRules",
  	  "FinancialBond",
  	  "FinancialData",
  	  "FinancialDerivative",
  	  "FinancialIndicator",
  	  "Find",
  	  "FindAnomalies",
  	  "FindArgMax",
  	  "FindArgMin",
  	  "FindChannels",
  	  "FindClique",
  	  "FindClusters",
  	  "FindCookies",
  	  "FindCurvePath",
  	  "FindCycle",
  	  "FindDevices",
  	  "FindDistribution",
  	  "FindDistributionParameters",
  	  "FindDivisions",
  	  "FindEdgeColoring",
  	  "FindEdgeCover",
  	  "FindEdgeCut",
  	  "FindEdgeIndependentPaths",
  	  "FindEquationalProof",
  	  "FindEulerianCycle",
  	  "FindExternalEvaluators",
  	  "FindFaces",
  	  "FindFile",
  	  "FindFit",
  	  "FindFormula",
  	  "FindFundamentalCycles",
  	  "FindGeneratingFunction",
  	  "FindGeoLocation",
  	  "FindGeometricConjectures",
  	  "FindGeometricTransform",
  	  "FindGraphCommunities",
  	  "FindGraphIsomorphism",
  	  "FindGraphPartition",
  	  "FindHamiltonianCycle",
  	  "FindHamiltonianPath",
  	  "FindHiddenMarkovStates",
  	  "FindImageText",
  	  "FindIndependentEdgeSet",
  	  "FindIndependentVertexSet",
  	  "FindInstance",
  	  "FindIntegerNullVector",
  	  "FindIsomers",
  	  "FindIsomorphicSubgraph",
  	  "FindKClan",
  	  "FindKClique",
  	  "FindKClub",
  	  "FindKPlex",
  	  "FindLibrary",
  	  "FindLinearRecurrence",
  	  "FindList",
  	  "FindMatchingColor",
  	  "FindMaximum",
  	  "FindMaximumCut",
  	  "FindMaximumFlow",
  	  "FindMaxValue",
  	  "FindMeshDefects",
  	  "FindMinimum",
  	  "FindMinimumCostFlow",
  	  "FindMinimumCut",
  	  "FindMinValue",
  	  "FindMoleculeSubstructure",
  	  "FindPath",
  	  "FindPeaks",
  	  "FindPermutation",
  	  "FindPlanarColoring",
  	  "FindPointProcessParameters",
  	  "FindPostmanTour",
  	  "FindProcessParameters",
  	  "FindRegionTransform",
  	  "FindRepeat",
  	  "FindRoot",
  	  "FindSequenceFunction",
  	  "FindSettings",
  	  "FindShortestPath",
  	  "FindShortestTour",
  	  "FindSpanningTree",
  	  "FindSubgraphIsomorphism",
  	  "FindSystemModelEquilibrium",
  	  "FindTextualAnswer",
  	  "FindThreshold",
  	  "FindTransientRepeat",
  	  "FindVertexColoring",
  	  "FindVertexCover",
  	  "FindVertexCut",
  	  "FindVertexIndependentPaths",
  	  "Fine",
  	  "FinishDynamic",
  	  "FiniteAbelianGroupCount",
  	  "FiniteGroupCount",
  	  "FiniteGroupData",
  	  "First",
  	  "FirstCase",
  	  "FirstPassageTimeDistribution",
  	  "FirstPosition",
  	  "FischerGroupFi22",
  	  "FischerGroupFi23",
  	  "FischerGroupFi24Prime",
  	  "FisherHypergeometricDistribution",
  	  "FisherRatioTest",
  	  "FisherZDistribution",
  	  "Fit",
  	  "FitAll",
  	  "FitRegularization",
  	  "FittedModel",
  	  "FixedOrder",
  	  "FixedPoint",
  	  "FixedPointList",
  	  "FlashSelection",
  	  "Flat",
  	  "FlatShading",
  	  "Flatten",
  	  "FlattenAt",
  	  "FlattenLayer",
  	  "FlatTopWindow",
  	  "FlightData",
  	  "FlipView",
  	  "Floor",
  	  "FlowPolynomial",
  	  "Fold",
  	  "FoldList",
  	  "FoldPair",
  	  "FoldPairList",
  	  "FoldWhile",
  	  "FoldWhileList",
  	  "FollowRedirects",
  	  "Font",
  	  "FontColor",
  	  "FontFamily",
  	  "FontForm",
  	  "FontName",
  	  "FontOpacity",
  	  "FontPostScriptName",
  	  "FontProperties",
  	  "FontReencoding",
  	  "FontSize",
  	  "FontSlant",
  	  "FontSubstitutions",
  	  "FontTracking",
  	  "FontVariations",
  	  "FontWeight",
  	  "For",
  	  "ForAll",
  	  "ForAllType",
  	  "ForceVersionInstall",
  	  "Format",
  	  "FormatRules",
  	  "FormatType",
  	  "FormatTypeAutoConvert",
  	  "FormatValues",
  	  "FormBox",
  	  "FormBoxOptions",
  	  "FormControl",
  	  "FormFunction",
  	  "FormLayoutFunction",
  	  "FormObject",
  	  "FormPage",
  	  "FormProtectionMethod",
  	  "FormTheme",
  	  "FormulaData",
  	  "FormulaLookup",
  	  "FortranForm",
  	  "Forward",
  	  "ForwardBackward",
  	  "ForwardCloudCredentials",
  	  "Fourier",
  	  "FourierCoefficient",
  	  "FourierCosCoefficient",
  	  "FourierCosSeries",
  	  "FourierCosTransform",
  	  "FourierDCT",
  	  "FourierDCTFilter",
  	  "FourierDCTMatrix",
  	  "FourierDST",
  	  "FourierDSTMatrix",
  	  "FourierMatrix",
  	  "FourierParameters",
  	  "FourierSequenceTransform",
  	  "FourierSeries",
  	  "FourierSinCoefficient",
  	  "FourierSinSeries",
  	  "FourierSinTransform",
  	  "FourierTransform",
  	  "FourierTrigSeries",
  	  "FoxH",
  	  "FoxHReduce",
  	  "FractionalBrownianMotionProcess",
  	  "FractionalD",
  	  "FractionalGaussianNoiseProcess",
  	  "FractionalPart",
  	  "FractionBox",
  	  "FractionBoxOptions",
  	  "FractionLine",
  	  "Frame",
  	  "FrameBox",
  	  "FrameBoxOptions",
  	  "Framed",
  	  "FrameInset",
  	  "FrameLabel",
  	  "Frameless",
  	  "FrameListVideo",
  	  "FrameMargins",
  	  "FrameRate",
  	  "FrameStyle",
  	  "FrameTicks",
  	  "FrameTicksStyle",
  	  "FRatioDistribution",
  	  "FrechetDistribution",
  	  "FreeQ",
  	  "FrenetSerretSystem",
  	  "FrequencySamplingFilterKernel",
  	  "FresnelC",
  	  "FresnelF",
  	  "FresnelG",
  	  "FresnelS",
  	  "Friday",
  	  "FrobeniusNumber",
  	  "FrobeniusSolve",
  	  "FromAbsoluteTime",
  	  "FromCharacterCode",
  	  "FromCoefficientRules",
  	  "FromContinuedFraction",
  	  "FromDate",
  	  "FromDateString",
  	  "FromDigits",
  	  "FromDMS",
  	  "FromEntity",
  	  "FromJulianDate",
  	  "FromLetterNumber",
  	  "FromPolarCoordinates",
  	  "FromRawPointer",
  	  "FromRomanNumeral",
  	  "FromSphericalCoordinates",
  	  "FromUnixTime",
  	  "Front",
  	  "FrontEndDynamicExpression",
  	  "FrontEndEventActions",
  	  "FrontEndExecute",
  	  "FrontEndObject",
  	  "FrontEndResource",
  	  "FrontEndResourceString",
  	  "FrontEndStackSize",
  	  "FrontEndToken",
  	  "FrontEndTokenExecute",
  	  "FrontEndValueCache",
  	  "FrontEndVersion",
  	  "FrontFaceColor",
  	  "FrontFaceGlowColor",
  	  "FrontFaceOpacity",
  	  "FrontFaceSpecularColor",
  	  "FrontFaceSpecularExponent",
  	  "FrontFaceSurfaceAppearance",
  	  "FrontFaceTexture",
  	  "Full",
  	  "FullAxes",
  	  "FullDefinition",
  	  "FullForm",
  	  "FullGraphics",
  	  "FullInformationOutputRegulator",
  	  "FullOptions",
  	  "FullRegion",
  	  "FullSimplify",
  	  "Function",
  	  "FunctionAnalytic",
  	  "FunctionBijective",
  	  "FunctionCompile",
  	  "FunctionCompileExport",
  	  "FunctionCompileExportByteArray",
  	  "FunctionCompileExportLibrary",
  	  "FunctionCompileExportString",
  	  "FunctionContinuous",
  	  "FunctionConvexity",
  	  "FunctionDeclaration",
  	  "FunctionDiscontinuities",
  	  "FunctionDomain",
  	  "FunctionExpand",
  	  "FunctionInjective",
  	  "FunctionInterpolation",
  	  "FunctionLayer",
  	  "FunctionMeromorphic",
  	  "FunctionMonotonicity",
  	  "FunctionPeriod",
  	  "FunctionPoles",
  	  "FunctionRange",
  	  "FunctionSign",
  	  "FunctionSingularities",
  	  "FunctionSpace",
  	  "FunctionSurjective",
  	  "FussellVeselyImportance",
  	  "GaborFilter",
  	  "GaborMatrix",
  	  "GaborWavelet",
  	  "GainMargins",
  	  "GainPhaseMargins",
  	  "GalaxyData",
  	  "GalleryView",
  	  "Gamma",
  	  "GammaDistribution",
  	  "GammaRegularized",
  	  "GapPenalty",
  	  "GARCHProcess",
  	  "GatedRecurrentLayer",
  	  "Gather",
  	  "GatherBy",
  	  "GaugeFaceElementFunction",
  	  "GaugeFaceStyle",
  	  "GaugeFrameElementFunction",
  	  "GaugeFrameSize",
  	  "GaugeFrameStyle",
  	  "GaugeLabels",
  	  "GaugeMarkers",
  	  "GaugeStyle",
  	  "GaussianFilter",
  	  "GaussianIntegers",
  	  "GaussianMatrix",
  	  "GaussianOrthogonalMatrixDistribution",
  	  "GaussianSymplecticMatrixDistribution",
  	  "GaussianUnitaryMatrixDistribution",
  	  "GaussianWindow",
  	  "GCD",
  	  "GegenbauerC",
  	  "General",
  	  "GeneralizedLinearModelFit",
  	  "GenerateAsymmetricKeyPair",
  	  "GenerateConditions",
  	  "GeneratedAssetFormat",
  	  "GeneratedAssetLocation",
  	  "GeneratedCell",
  	  "GeneratedCellStyles",
  	  "GeneratedDocumentBinding",
  	  "GenerateDerivedKey",
  	  "GenerateDigitalSignature",
  	  "GenerateDocument",
  	  "GeneratedParameters",
  	  "GeneratedQuantityMagnitudes",
  	  "GenerateFileSignature",
  	  "GenerateHTTPResponse",
  	  "GenerateSecuredAuthenticationKey",
  	  "GenerateSymmetricKey",
  	  "GeneratingFunction",
  	  "GeneratorDescription",
  	  "GeneratorHistoryLength",
  	  "GeneratorOutputType",
  	  "Generic",
  	  "GenericCylindricalDecomposition",
  	  "GenomeData",
  	  "GenomeLookup",
  	  "GeoAntipode",
  	  "GeoArea",
  	  "GeoArraySize",
  	  "GeoBackground",
  	  "GeoBoundary",
  	  "GeoBoundingBox",
  	  "GeoBounds",
  	  "GeoBoundsRegion",
  	  "GeoBoundsRegionBoundary",
  	  "GeoBubbleChart",
  	  "GeoCenter",
  	  "GeoCircle",
  	  "GeoContourPlot",
  	  "GeoDensityPlot",
  	  "GeodesicClosing",
  	  "GeodesicDilation",
  	  "GeodesicErosion",
  	  "GeodesicOpening",
  	  "GeodesicPolyhedron",
  	  "GeoDestination",
  	  "GeodesyData",
  	  "GeoDirection",
  	  "GeoDisk",
  	  "GeoDisplacement",
  	  "GeoDistance",
  	  "GeoDistanceList",
  	  "GeoElevationData",
  	  "GeoEntities",
  	  "GeoGraphics",
  	  "GeoGraphPlot",
  	  "GeoGraphValuePlot",
  	  "GeogravityModelData",
  	  "GeoGridDirectionDifference",
  	  "GeoGridLines",
  	  "GeoGridLinesStyle",
  	  "GeoGridPosition",
  	  "GeoGridRange",
  	  "GeoGridRangePadding",
  	  "GeoGridUnitArea",
  	  "GeoGridUnitDistance",
  	  "GeoGridVector",
  	  "GeoGroup",
  	  "GeoHemisphere",
  	  "GeoHemisphereBoundary",
  	  "GeoHistogram",
  	  "GeoIdentify",
  	  "GeoImage",
  	  "GeoLabels",
  	  "GeoLength",
  	  "GeoListPlot",
  	  "GeoLocation",
  	  "GeologicalPeriodData",
  	  "GeomagneticModelData",
  	  "GeoMarker",
  	  "GeometricAssertion",
  	  "GeometricBrownianMotionProcess",
  	  "GeometricDistribution",
  	  "GeometricMean",
  	  "GeometricMeanFilter",
  	  "GeometricOptimization",
  	  "GeometricScene",
  	  "GeometricStep",
  	  "GeometricStylingRules",
  	  "GeometricTest",
  	  "GeometricTransformation",
  	  "GeometricTransformation3DBox",
  	  "GeometricTransformation3DBoxOptions",
  	  "GeometricTransformationBox",
  	  "GeometricTransformationBoxOptions",
  	  "GeoModel",
  	  "GeoNearest",
  	  "GeoOrientationData",
  	  "GeoPath",
  	  "GeoPolygon",
  	  "GeoPosition",
  	  "GeoPositionENU",
  	  "GeoPositionXYZ",
  	  "GeoProjection",
  	  "GeoProjectionData",
  	  "GeoRange",
  	  "GeoRangePadding",
  	  "GeoRegionValuePlot",
  	  "GeoResolution",
  	  "GeoScaleBar",
  	  "GeoServer",
  	  "GeoSmoothHistogram",
  	  "GeoStreamPlot",
  	  "GeoStyling",
  	  "GeoStylingImageFunction",
  	  "GeoVariant",
  	  "GeoVector",
  	  "GeoVectorENU",
  	  "GeoVectorPlot",
  	  "GeoVectorXYZ",
  	  "GeoVisibleRegion",
  	  "GeoVisibleRegionBoundary",
  	  "GeoWithinQ",
  	  "GeoZoomLevel",
  	  "GestureHandler",
  	  "GestureHandlerTag",
  	  "Get",
  	  "GetContext",
  	  "GetEnvironment",
  	  "GetFileName",
  	  "GetLinebreakInformationPacket",
  	  "GibbsPointProcess",
  	  "Glaisher",
  	  "GlobalClusteringCoefficient",
  	  "GlobalPreferences",
  	  "GlobalSession",
  	  "Glow",
  	  "GoldenAngle",
  	  "GoldenRatio",
  	  "GompertzMakehamDistribution",
  	  "GoochShading",
  	  "GoodmanKruskalGamma",
  	  "GoodmanKruskalGammaTest",
  	  "Goto",
  	  "GouraudShading",
  	  "Grad",
  	  "Gradient",
  	  "GradientFilter",
  	  "GradientFittedMesh",
  	  "GradientOrientationFilter",
  	  "GrammarApply",
  	  "GrammarRules",
  	  "GrammarToken",
  	  "Graph",
  	  "Graph3D",
  	  "GraphAssortativity",
  	  "GraphAutomorphismGroup",
  	  "GraphCenter",
  	  "GraphComplement",
  	  "GraphData",
  	  "GraphDensity",
  	  "GraphDiameter",
  	  "GraphDifference",
  	  "GraphDisjointUnion",
  	  "GraphDistance",
  	  "GraphDistanceMatrix",
  	  "GraphEmbedding",
  	  "GraphHighlight",
  	  "GraphHighlightStyle",
  	  "GraphHub",
  	  "Graphics",
  	  "Graphics3D",
  	  "Graphics3DBox",
  	  "Graphics3DBoxOptions",
  	  "GraphicsArray",
  	  "GraphicsBaseline",
  	  "GraphicsBox",
  	  "GraphicsBoxOptions",
  	  "GraphicsColor",
  	  "GraphicsColumn",
  	  "GraphicsComplex",
  	  "GraphicsComplex3DBox",
  	  "GraphicsComplex3DBoxOptions",
  	  "GraphicsComplexBox",
  	  "GraphicsComplexBoxOptions",
  	  "GraphicsContents",
  	  "GraphicsData",
  	  "GraphicsGrid",
  	  "GraphicsGridBox",
  	  "GraphicsGroup",
  	  "GraphicsGroup3DBox",
  	  "GraphicsGroup3DBoxOptions",
  	  "GraphicsGroupBox",
  	  "GraphicsGroupBoxOptions",
  	  "GraphicsGrouping",
  	  "GraphicsHighlightColor",
  	  "GraphicsRow",
  	  "GraphicsSpacing",
  	  "GraphicsStyle",
  	  "GraphIntersection",
  	  "GraphJoin",
  	  "GraphLayerLabels",
  	  "GraphLayers",
  	  "GraphLayerStyle",
  	  "GraphLayout",
  	  "GraphLinkEfficiency",
  	  "GraphPeriphery",
  	  "GraphPlot",
  	  "GraphPlot3D",
  	  "GraphPower",
  	  "GraphProduct",
  	  "GraphPropertyDistribution",
  	  "GraphQ",
  	  "GraphRadius",
  	  "GraphReciprocity",
  	  "GraphRoot",
  	  "GraphStyle",
  	  "GraphSum",
  	  "GraphTree",
  	  "GraphUnion",
  	  "Gray",
  	  "GrayLevel",
  	  "Greater",
  	  "GreaterEqual",
  	  "GreaterEqualLess",
  	  "GreaterEqualThan",
  	  "GreaterFullEqual",
  	  "GreaterGreater",
  	  "GreaterLess",
  	  "GreaterSlantEqual",
  	  "GreaterThan",
  	  "GreaterTilde",
  	  "GreekStyle",
  	  "Green",
  	  "GreenFunction",
  	  "Grid",
  	  "GridBaseline",
  	  "GridBox",
  	  "GridBoxAlignment",
  	  "GridBoxBackground",
  	  "GridBoxDividers",
  	  "GridBoxFrame",
  	  "GridBoxItemSize",
  	  "GridBoxItemStyle",
  	  "GridBoxOptions",
  	  "GridBoxSpacings",
  	  "GridCreationSettings",
  	  "GridDefaultElement",
  	  "GridElementStyleOptions",
  	  "GridFrame",
  	  "GridFrameMargins",
  	  "GridGraph",
  	  "GridLines",
  	  "GridLinesStyle",
  	  "GridVideo",
  	  "GroebnerBasis",
  	  "GroupActionBase",
  	  "GroupBy",
  	  "GroupCentralizer",
  	  "GroupElementFromWord",
  	  "GroupElementPosition",
  	  "GroupElementQ",
  	  "GroupElements",
  	  "GroupElementToWord",
  	  "GroupGenerators",
  	  "Groupings",
  	  "GroupMultiplicationTable",
  	  "GroupOpenerColor",
  	  "GroupOpenerInsideFrame",
  	  "GroupOrbits",
  	  "GroupOrder",
  	  "GroupPageBreakWithin",
  	  "GroupSetwiseStabilizer",
  	  "GroupStabilizer",
  	  "GroupStabilizerChain",
  	  "GroupTogetherGrouping",
  	  "GroupTogetherNestedGrouping",
  	  "GrowCutComponents",
  	  "Gudermannian",
  	  "GuidedFilter",
  	  "GumbelDistribution",
  	  "HaarWavelet",
  	  "HadamardMatrix",
  	  "HalfLine",
  	  "HalfNormalDistribution",
  	  "HalfPlane",
  	  "HalfSpace",
  	  "HalftoneShading",
  	  "HamiltonianGraphQ",
  	  "HammingDistance",
  	  "HammingWindow",
  	  "HandlerFunctions",
  	  "HandlerFunctionsKeys",
  	  "HankelH1",
  	  "HankelH2",
  	  "HankelMatrix",
  	  "HankelTransform",
  	  "HannPoissonWindow",
  	  "HannWindow",
  	  "HaradaNortonGroupHN",
  	  "HararyGraph",
  	  "HardcorePointProcess",
  	  "HarmonicMean",
  	  "HarmonicMeanFilter",
  	  "HarmonicNumber",
  	  "Hash",
  	  "HatchFilling",
  	  "HatchShading",
  	  "Haversine",
  	  "HazardFunction",
  	  "Head",
  	  "HeadCompose",
  	  "HeaderAlignment",
  	  "HeaderBackground",
  	  "HeaderDisplayFunction",
  	  "HeaderLines",
  	  "Headers",
  	  "HeaderSize",
  	  "HeaderStyle",
  	  "Heads",
  	  "HeatFluxValue",
  	  "HeatInsulationValue",
  	  "HeatOutflowValue",
  	  "HeatRadiationValue",
  	  "HeatSymmetryValue",
  	  "HeatTemperatureCondition",
  	  "HeatTransferPDEComponent",
  	  "HeatTransferValue",
  	  "HeavisideLambda",
  	  "HeavisidePi",
  	  "HeavisideTheta",
  	  "HeldGroupHe",
  	  "HeldPart",
  	  "HelmholtzPDEComponent",
  	  "HelpBrowserLookup",
  	  "HelpBrowserNotebook",
  	  "HelpBrowserSettings",
  	  "HelpViewerSettings",
  	  "Here",
  	  "HermiteDecomposition",
  	  "HermiteH",
  	  "Hermitian",
  	  "HermitianMatrixQ",
  	  "HessenbergDecomposition",
  	  "Hessian",
  	  "HeunB",
  	  "HeunBPrime",
  	  "HeunC",
  	  "HeunCPrime",
  	  "HeunD",
  	  "HeunDPrime",
  	  "HeunG",
  	  "HeunGPrime",
  	  "HeunT",
  	  "HeunTPrime",
  	  "HexadecimalCharacter",
  	  "Hexahedron",
  	  "HexahedronBox",
  	  "HexahedronBoxOptions",
  	  "HiddenItems",
  	  "HiddenMarkovProcess",
  	  "HiddenSurface",
  	  "Highlighted",
  	  "HighlightGraph",
  	  "HighlightImage",
  	  "HighlightMesh",
  	  "HighlightString",
  	  "HighpassFilter",
  	  "HigmanSimsGroupHS",
  	  "HilbertCurve",
  	  "HilbertFilter",
  	  "HilbertMatrix",
  	  "Histogram",
  	  "Histogram3D",
  	  "HistogramDistribution",
  	  "HistogramList",
  	  "HistogramPointDensity",
  	  "HistogramTransform",
  	  "HistogramTransformInterpolation",
  	  "HistoricalPeriodData",
  	  "HitMissTransform",
  	  "HITSCentrality",
  	  "HjorthDistribution",
  	  "HodgeDual",
  	  "HoeffdingD",
  	  "HoeffdingDTest",
  	  "Hold",
  	  "HoldAll",
  	  "HoldAllComplete",
  	  "HoldComplete",
  	  "HoldFirst",
  	  "HoldForm",
  	  "HoldPattern",
  	  "HoldRest",
  	  "HolidayCalendar",
  	  "HomeDirectory",
  	  "HomePage",
  	  "Horizontal",
  	  "HorizontalForm",
  	  "HorizontalGauge",
  	  "HorizontalScrollPosition",
  	  "HornerForm",
  	  "HostLookup",
  	  "HotellingTSquareDistribution",
  	  "HoytDistribution",
  	  "HTMLSave",
  	  "HTTPErrorResponse",
  	  "HTTPRedirect",
  	  "HTTPRequest",
  	  "HTTPRequestData",
  	  "HTTPResponse",
  	  "Hue",
  	  "HumanGrowthData",
  	  "HumpDownHump",
  	  "HumpEqual",
  	  "HurwitzLerchPhi",
  	  "HurwitzZeta",
  	  "HyperbolicDistribution",
  	  "HypercubeGraph",
  	  "HyperexponentialDistribution",
  	  "Hyperfactorial",
  	  "Hypergeometric0F1",
  	  "Hypergeometric0F1Regularized",
  	  "Hypergeometric1F1",
  	  "Hypergeometric1F1Regularized",
  	  "Hypergeometric2F1",
  	  "Hypergeometric2F1Regularized",
  	  "HypergeometricDistribution",
  	  "HypergeometricPFQ",
  	  "HypergeometricPFQRegularized",
  	  "HypergeometricU",
  	  "Hyperlink",
  	  "HyperlinkAction",
  	  "HyperlinkCreationSettings",
  	  "Hyperplane",
  	  "Hyphenation",
  	  "HyphenationOptions",
  	  "HypoexponentialDistribution",
  	  "HypothesisTestData",
  	  "I",
  	  "IconData",
  	  "Iconize",
  	  "IconizedObject",
  	  "IconRules",
  	  "Icosahedron",
  	  "Identity",
  	  "IdentityMatrix",
  	  "If",
  	  "IfCompiled",
  	  "IgnoreCase",
  	  "IgnoreDiacritics",
  	  "IgnoreIsotopes",
  	  "IgnorePunctuation",
  	  "IgnoreSpellCheck",
  	  "IgnoreStereochemistry",
  	  "IgnoringInactive",
  	  "Im",
  	  "Image",
  	  "Image3D",
  	  "Image3DProjection",
  	  "Image3DSlices",
  	  "ImageAccumulate",
  	  "ImageAdd",
  	  "ImageAdjust",
  	  "ImageAlign",
  	  "ImageApply",
  	  "ImageApplyIndexed",
  	  "ImageAspectRatio",
  	  "ImageAssemble",
  	  "ImageAugmentationLayer",
  	  "ImageBoundingBoxes",
  	  "ImageCache",
  	  "ImageCacheValid",
  	  "ImageCapture",
  	  "ImageCaptureFunction",
  	  "ImageCases",
  	  "ImageChannels",
  	  "ImageClip",
  	  "ImageCollage",
  	  "ImageColorSpace",
  	  "ImageCompose",
  	  "ImageContainsQ",
  	  "ImageContents",
  	  "ImageConvolve",
  	  "ImageCooccurrence",
  	  "ImageCorners",
  	  "ImageCorrelate",
  	  "ImageCorrespondingPoints",
  	  "ImageCrop",
  	  "ImageData",
  	  "ImageDeconvolve",
  	  "ImageDemosaic",
  	  "ImageDifference",
  	  "ImageDimensions",
  	  "ImageDisplacements",
  	  "ImageDistance",
  	  "ImageEditMode",
  	  "ImageEffect",
  	  "ImageExposureCombine",
  	  "ImageFeatureTrack",
  	  "ImageFileApply",
  	  "ImageFileFilter",
  	  "ImageFileScan",
  	  "ImageFilter",
  	  "ImageFocusCombine",
  	  "ImageForestingComponents",
  	  "ImageFormattingWidth",
  	  "ImageForwardTransformation",
  	  "ImageGraphics",
  	  "ImageHistogram",
  	  "ImageIdentify",
  	  "ImageInstanceQ",
  	  "ImageKeypoints",
  	  "ImageLabels",
  	  "ImageLegends",
  	  "ImageLevels",
  	  "ImageLines",
  	  "ImageMargins",
  	  "ImageMarker",
  	  "ImageMarkers",
  	  "ImageMeasurements",
  	  "ImageMesh",
  	  "ImageMultiply",
  	  "ImageOffset",
  	  "ImagePad",
  	  "ImagePadding",
  	  "ImagePartition",
  	  "ImagePeriodogram",
  	  "ImagePerspectiveTransformation",
  	  "ImagePosition",
  	  "ImagePreviewFunction",
  	  "ImagePyramid",
  	  "ImagePyramidApply",
  	  "ImageQ",
  	  "ImageRangeCache",
  	  "ImageRecolor",
  	  "ImageReflect",
  	  "ImageRegion",
  	  "ImageResize",
  	  "ImageResolution",
  	  "ImageRestyle",
  	  "ImageRotate",
  	  "ImageRotated",
  	  "ImageSaliencyFilter",
  	  "ImageScaled",
  	  "ImageScan",
  	  "ImageSize",
  	  "ImageSizeAction",
  	  "ImageSizeCache",
  	  "ImageSizeMultipliers",
  	  "ImageSizeRaw",
  	  "ImageStitch",
  	  "ImageSubtract",
  	  "ImageTake",
  	  "ImageTransformation",
  	  "ImageTrim",
  	  "ImageType",
  	  "ImageValue",
  	  "ImageValuePositions",
  	  "ImageVectorscopePlot",
  	  "ImageWaveformPlot",
  	  "ImagingDevice",
  	  "ImplicitD",
  	  "ImplicitRegion",
  	  "Implies",
  	  "Import",
  	  "ImportAutoReplacements",
  	  "ImportByteArray",
  	  "ImportedObject",
  	  "ImportOptions",
  	  "ImportString",
  	  "ImprovementImportance",
  	  "In",
  	  "Inactivate",
  	  "Inactive",
  	  "InactiveStyle",
  	  "IncidenceGraph",
  	  "IncidenceList",
  	  "IncidenceMatrix",
  	  "IncludeAromaticBonds",
  	  "IncludeConstantBasis",
  	  "IncludedContexts",
  	  "IncludeDefinitions",
  	  "IncludeDirectories",
  	  "IncludeFileExtension",
  	  "IncludeGeneratorTasks",
  	  "IncludeHydrogens",
  	  "IncludeInflections",
  	  "IncludeMetaInformation",
  	  "IncludePods",
  	  "IncludeQuantities",
  	  "IncludeRelatedTables",
  	  "IncludeSingularSolutions",
  	  "IncludeSingularTerm",
  	  "IncludeWindowTimes",
  	  "Increment",
  	  "IndefiniteMatrixQ",
  	  "Indent",
  	  "IndentingNewlineSpacings",
  	  "IndentMaxFraction",
  	  "IndependenceTest",
  	  "IndependentEdgeSetQ",
  	  "IndependentPhysicalQuantity",
  	  "IndependentUnit",
  	  "IndependentUnitDimension",
  	  "IndependentVertexSetQ",
  	  "Indeterminate",
  	  "IndeterminateThreshold",
  	  "IndexCreationOptions",
  	  "Indexed",
  	  "IndexEdgeTaggedGraph",
  	  "IndexGraph",
  	  "IndexTag",
  	  "Inequality",
  	  "InertEvaluate",
  	  "InertExpression",
  	  "InexactNumberQ",
  	  "InexactNumbers",
  	  "InfiniteFuture",
  	  "InfiniteLine",
  	  "InfiniteLineThrough",
  	  "InfinitePast",
  	  "InfinitePlane",
  	  "Infinity",
  	  "Infix",
  	  "InflationAdjust",
  	  "InflationMethod",
  	  "Information",
  	  "InformationData",
  	  "InformationDataGrid",
  	  "Inherited",
  	  "InheritScope",
  	  "InhomogeneousPoissonPointProcess",
  	  "InhomogeneousPoissonProcess",
  	  "InitialEvaluationHistory",
  	  "Initialization",
  	  "InitializationCell",
  	  "InitializationCellEvaluation",
  	  "InitializationCellWarning",
  	  "InitializationObject",
  	  "InitializationObjects",
  	  "InitializationValue",
  	  "Initialize",
  	  "InitialSeeding",
  	  "InlineCounterAssignments",
  	  "InlineCounterIncrements",
  	  "InlineRules",
  	  "Inner",
  	  "InnerPolygon",
  	  "InnerPolyhedron",
  	  "Inpaint",
  	  "Input",
  	  "InputAliases",
  	  "InputAssumptions",
  	  "InputAutoReplacements",
  	  "InputField",
  	  "InputFieldBox",
  	  "InputFieldBoxOptions",
  	  "InputForm",
  	  "InputGrouping",
  	  "InputNamePacket",
  	  "InputNotebook",
  	  "InputPacket",
  	  "InputPorts",
  	  "InputSettings",
  	  "InputStream",
  	  "InputString",
  	  "InputStringPacket",
  	  "InputToBoxFormPacket",
  	  "Insert",
  	  "InsertionFunction",
  	  "InsertionPointObject",
  	  "InsertLinebreaks",
  	  "InsertResults",
  	  "Inset",
  	  "Inset3DBox",
  	  "Inset3DBoxOptions",
  	  "InsetBox",
  	  "InsetBoxOptions",
  	  "Insphere",
  	  "Install",
  	  "InstallService",
  	  "InstanceNormalizationLayer",
  	  "InString",
  	  "Integer",
  	  "IntegerDigits",
  	  "IntegerExponent",
  	  "IntegerLength",
  	  "IntegerName",
  	  "IntegerPart",
  	  "IntegerPartitions",
  	  "IntegerQ",
  	  "IntegerReverse",
  	  "Integers",
  	  "IntegerString",
  	  "Integral",
  	  "Integrate",
  	  "IntegrateChangeVariables",
  	  "Interactive",
  	  "InteractiveTradingChart",
  	  "InterfaceSwitched",
  	  "Interlaced",
  	  "Interleaving",
  	  "InternallyBalancedDecomposition",
  	  "InterpolatingFunction",
  	  "InterpolatingPolynomial",
  	  "Interpolation",
  	  "InterpolationOrder",
  	  "InterpolationPoints",
  	  "InterpolationPrecision",
  	  "Interpretation",
  	  "InterpretationBox",
  	  "InterpretationBoxOptions",
  	  "InterpretationFunction",
  	  "Interpreter",
  	  "InterpretTemplate",
  	  "InterquartileRange",
  	  "Interrupt",
  	  "InterruptSettings",
  	  "IntersectedEntityClass",
  	  "IntersectingQ",
  	  "Intersection",
  	  "Interval",
  	  "IntervalIntersection",
  	  "IntervalMarkers",
  	  "IntervalMarkersStyle",
  	  "IntervalMemberQ",
  	  "IntervalSlider",
  	  "IntervalUnion",
  	  "Into",
  	  "Inverse",
  	  "InverseBetaRegularized",
  	  "InverseBilateralLaplaceTransform",
  	  "InverseBilateralZTransform",
  	  "InverseCDF",
  	  "InverseChiSquareDistribution",
  	  "InverseContinuousWaveletTransform",
  	  "InverseDistanceTransform",
  	  "InverseEllipticNomeQ",
  	  "InverseErf",
  	  "InverseErfc",
  	  "InverseFourier",
  	  "InverseFourierCosTransform",
  	  "InverseFourierSequenceTransform",
  	  "InverseFourierSinTransform",
  	  "InverseFourierTransform",
  	  "InverseFunction",
  	  "InverseFunctions",
  	  "InverseGammaDistribution",
  	  "InverseGammaRegularized",
  	  "InverseGaussianDistribution",
  	  "InverseGudermannian",
  	  "InverseHankelTransform",
  	  "InverseHaversine",
  	  "InverseImagePyramid",
  	  "InverseJacobiCD",
  	  "InverseJacobiCN",
  	  "InverseJacobiCS",
  	  "InverseJacobiDC",
  	  "InverseJacobiDN",
  	  "InverseJacobiDS",
  	  "InverseJacobiNC",
  	  "InverseJacobiND",
  	  "InverseJacobiNS",
  	  "InverseJacobiSC",
  	  "InverseJacobiSD",
  	  "InverseJacobiSN",
  	  "InverseLaplaceTransform",
  	  "InverseMellinTransform",
  	  "InversePermutation",
  	  "InverseRadon",
  	  "InverseRadonTransform",
  	  "InverseSeries",
  	  "InverseShortTimeFourier",
  	  "InverseSpectrogram",
  	  "InverseSurvivalFunction",
  	  "InverseTransformedRegion",
  	  "InverseWaveletTransform",
  	  "InverseWeierstrassP",
  	  "InverseWishartMatrixDistribution",
  	  "InverseZTransform",
  	  "Invisible",
  	  "InvisibleApplication",
  	  "InvisibleTimes",
  	  "IPAddress",
  	  "IrreduciblePolynomialQ",
  	  "IslandData",
  	  "IsolatingInterval",
  	  "IsomorphicGraphQ",
  	  "IsomorphicSubgraphQ",
  	  "IsotopeData",
  	  "Italic",
  	  "Item",
  	  "ItemAspectRatio",
  	  "ItemBox",
  	  "ItemBoxOptions",
  	  "ItemDisplayFunction",
  	  "ItemSize",
  	  "ItemStyle",
  	  "ItoProcess",
  	  "JaccardDissimilarity",
  	  "JacobiAmplitude",
  	  "Jacobian",
  	  "JacobiCD",
  	  "JacobiCN",
  	  "JacobiCS",
  	  "JacobiDC",
  	  "JacobiDN",
  	  "JacobiDS",
  	  "JacobiEpsilon",
  	  "JacobiNC",
  	  "JacobiND",
  	  "JacobiNS",
  	  "JacobiP",
  	  "JacobiSC",
  	  "JacobiSD",
  	  "JacobiSN",
  	  "JacobiSymbol",
  	  "JacobiZeta",
  	  "JacobiZN",
  	  "JankoGroupJ1",
  	  "JankoGroupJ2",
  	  "JankoGroupJ3",
  	  "JankoGroupJ4",
  	  "JarqueBeraALMTest",
  	  "JohnsonDistribution",
  	  "Join",
  	  "JoinAcross",
  	  "Joined",
  	  "JoinedCurve",
  	  "JoinedCurveBox",
  	  "JoinedCurveBoxOptions",
  	  "JoinForm",
  	  "JordanDecomposition",
  	  "JordanModelDecomposition",
  	  "JulianDate",
  	  "JuliaSetBoettcher",
  	  "JuliaSetIterationCount",
  	  "JuliaSetPlot",
  	  "JuliaSetPoints",
  	  "K",
  	  "KagiChart",
  	  "KaiserBesselWindow",
  	  "KaiserWindow",
  	  "KalmanEstimator",
  	  "KalmanFilter",
  	  "KarhunenLoeveDecomposition",
  	  "KaryTree",
  	  "KatzCentrality",
  	  "KCoreComponents",
  	  "KDistribution",
  	  "KEdgeConnectedComponents",
  	  "KEdgeConnectedGraphQ",
  	  "KeepExistingVersion",
  	  "KelvinBei",
  	  "KelvinBer",
  	  "KelvinKei",
  	  "KelvinKer",
  	  "KendallTau",
  	  "KendallTauTest",
  	  "KernelConfiguration",
  	  "KernelExecute",
  	  "KernelFunction",
  	  "KernelMixtureDistribution",
  	  "KernelObject",
  	  "Kernels",
  	  "Ket",
  	  "Key",
  	  "KeyCollisionFunction",
  	  "KeyComplement",
  	  "KeyDrop",
  	  "KeyDropFrom",
  	  "KeyExistsQ",
  	  "KeyFreeQ",
  	  "KeyIntersection",
  	  "KeyMap",
  	  "KeyMemberQ",
  	  "KeypointStrength",
  	  "Keys",
  	  "KeySelect",
  	  "KeySort",
  	  "KeySortBy",
  	  "KeyTake",
  	  "KeyUnion",
  	  "KeyValueMap",
  	  "KeyValuePattern",
  	  "Khinchin",
  	  "KillProcess",
  	  "KirchhoffGraph",
  	  "KirchhoffMatrix",
  	  "KleinInvariantJ",
  	  "KnapsackSolve",
  	  "KnightTourGraph",
  	  "KnotData",
  	  "KnownUnitQ",
  	  "KochCurve",
  	  "KolmogorovSmirnovTest",
  	  "KroneckerDelta",
  	  "KroneckerModelDecomposition",
  	  "KroneckerProduct",
  	  "KroneckerSymbol",
  	  "KuiperTest",
  	  "KumaraswamyDistribution",
  	  "Kurtosis",
  	  "KuwaharaFilter",
  	  "KVertexConnectedComponents",
  	  "KVertexConnectedGraphQ",
  	  "LABColor",
  	  "Label",
  	  "Labeled",
  	  "LabeledSlider",
  	  "LabelingFunction",
  	  "LabelingSize",
  	  "LabelStyle",
  	  "LabelVisibility",
  	  "LaguerreL",
  	  "LakeData",
  	  "LambdaComponents",
  	  "LambertW",
  	  "LameC",
  	  "LameCPrime",
  	  "LameEigenvalueA",
  	  "LameEigenvalueB",
  	  "LameS",
  	  "LameSPrime",
  	  "LaminaData",
  	  "LanczosWindow",
  	  "LandauDistribution",
  	  "Language",
  	  "LanguageCategory",
  	  "LanguageData",
  	  "LanguageIdentify",
  	  "LanguageOptions",
  	  "LaplaceDistribution",
  	  "LaplaceTransform",
  	  "Laplacian",
  	  "LaplacianFilter",
  	  "LaplacianGaussianFilter",
  	  "LaplacianPDETerm",
  	  "Large",
  	  "Larger",
  	  "Last",
  	  "Latitude",
  	  "LatitudeLongitude",
  	  "LatticeData",
  	  "LatticeReduce",
  	  "Launch",
  	  "LaunchKernels",
  	  "LayeredGraphPlot",
  	  "LayeredGraphPlot3D",
  	  "LayerSizeFunction",
  	  "LayoutInformation",
  	  "LCHColor",
  	  "LCM",
  	  "LeaderSize",
  	  "LeafCount",
  	  "LeapVariant",
  	  "LeapYearQ",
  	  "LearnDistribution",
  	  "LearnedDistribution",
  	  "LearningRate",
  	  "LearningRateMultipliers",
  	  "LeastSquares",
  	  "LeastSquaresFilterKernel",
  	  "Left",
  	  "LeftArrow",
  	  "LeftArrowBar",
  	  "LeftArrowRightArrow",
  	  "LeftDownTeeVector",
  	  "LeftDownVector",
  	  "LeftDownVectorBar",
  	  "LeftRightArrow",
  	  "LeftRightVector",
  	  "LeftTee",
  	  "LeftTeeArrow",
  	  "LeftTeeVector",
  	  "LeftTriangle",
  	  "LeftTriangleBar",
  	  "LeftTriangleEqual",
  	  "LeftUpDownVector",
  	  "LeftUpTeeVector",
  	  "LeftUpVector",
  	  "LeftUpVectorBar",
  	  "LeftVector",
  	  "LeftVectorBar",
  	  "LegendAppearance",
  	  "Legended",
  	  "LegendFunction",
  	  "LegendLabel",
  	  "LegendLayout",
  	  "LegendMargins",
  	  "LegendMarkers",
  	  "LegendMarkerSize",
  	  "LegendreP",
  	  "LegendreQ",
  	  "LegendreType",
  	  "Length",
  	  "LengthWhile",
  	  "LerchPhi",
  	  "Less",
  	  "LessEqual",
  	  "LessEqualGreater",
  	  "LessEqualThan",
  	  "LessFullEqual",
  	  "LessGreater",
  	  "LessLess",
  	  "LessSlantEqual",
  	  "LessThan",
  	  "LessTilde",
  	  "LetterCharacter",
  	  "LetterCounts",
  	  "LetterNumber",
  	  "LetterQ",
  	  "Level",
  	  "LeveneTest",
  	  "LeviCivitaTensor",
  	  "LevyDistribution",
  	  "Lexicographic",
  	  "LexicographicOrder",
  	  "LexicographicSort",
  	  "LibraryDataType",
  	  "LibraryFunction",
  	  "LibraryFunctionDeclaration",
  	  "LibraryFunctionError",
  	  "LibraryFunctionInformation",
  	  "LibraryFunctionLoad",
  	  "LibraryFunctionUnload",
  	  "LibraryLoad",
  	  "LibraryUnload",
  	  "LicenseEntitlementObject",
  	  "LicenseEntitlements",
  	  "LicenseID",
  	  "LicensingSettings",
  	  "LiftingFilterData",
  	  "LiftingWaveletTransform",
  	  "LightBlue",
  	  "LightBrown",
  	  "LightCyan",
  	  "Lighter",
  	  "LightGray",
  	  "LightGreen",
  	  "Lighting",
  	  "LightingAngle",
  	  "LightMagenta",
  	  "LightOrange",
  	  "LightPink",
  	  "LightPurple",
  	  "LightRed",
  	  "LightSources",
  	  "LightYellow",
  	  "Likelihood",
  	  "Limit",
  	  "LimitsPositioning",
  	  "LimitsPositioningTokens",
  	  "LindleyDistribution",
  	  "Line",
  	  "Line3DBox",
  	  "Line3DBoxOptions",
  	  "LinearFilter",
  	  "LinearFractionalOptimization",
  	  "LinearFractionalTransform",
  	  "LinearGradientFilling",
  	  "LinearGradientImage",
  	  "LinearizingTransformationData",
  	  "LinearLayer",
  	  "LinearModelFit",
  	  "LinearOffsetFunction",
  	  "LinearOptimization",
  	  "LinearProgramming",
  	  "LinearRecurrence",
  	  "LinearSolve",
  	  "LinearSolveFunction",
  	  "LineBox",
  	  "LineBoxOptions",
  	  "LineBreak",
  	  "LinebreakAdjustments",
  	  "LineBreakChart",
  	  "LinebreakSemicolonWeighting",
  	  "LineBreakWithin",
  	  "LineColor",
  	  "LineGraph",
  	  "LineIndent",
  	  "LineIndentMaxFraction",
  	  "LineIntegralConvolutionPlot",
  	  "LineIntegralConvolutionScale",
  	  "LineLegend",
  	  "LineOpacity",
  	  "LineSpacing",
  	  "LineWrapParts",
  	  "LinkActivate",
  	  "LinkClose",
  	  "LinkConnect",
  	  "LinkConnectedQ",
  	  "LinkCreate",
  	  "LinkError",
  	  "LinkFlush",
  	  "LinkFunction",
  	  "LinkHost",
  	  "LinkInterrupt",
  	  "LinkLaunch",
  	  "LinkMode",
  	  "LinkObject",
  	  "LinkOpen",
  	  "LinkOptions",
  	  "LinkPatterns",
  	  "LinkProtocol",
  	  "LinkRankCentrality",
  	  "LinkRead",
  	  "LinkReadHeld",
  	  "LinkReadyQ",
  	  "Links",
  	  "LinkService",
  	  "LinkWrite",
  	  "LinkWriteHeld",
  	  "LiouvilleLambda",
  	  "List",
  	  "Listable",
  	  "ListAnimate",
  	  "ListContourPlot",
  	  "ListContourPlot3D",
  	  "ListConvolve",
  	  "ListCorrelate",
  	  "ListCurvePathPlot",
  	  "ListDeconvolve",
  	  "ListDensityPlot",
  	  "ListDensityPlot3D",
  	  "Listen",
  	  "ListFormat",
  	  "ListFourierSequenceTransform",
  	  "ListInterpolation",
  	  "ListLineIntegralConvolutionPlot",
  	  "ListLinePlot",
  	  "ListLinePlot3D",
  	  "ListLogLinearPlot",
  	  "ListLogLogPlot",
  	  "ListLogPlot",
  	  "ListPicker",
  	  "ListPickerBox",
  	  "ListPickerBoxBackground",
  	  "ListPickerBoxOptions",
  	  "ListPlay",
  	  "ListPlot",
  	  "ListPlot3D",
  	  "ListPointPlot3D",
  	  "ListPolarPlot",
  	  "ListQ",
  	  "ListSliceContourPlot3D",
  	  "ListSliceDensityPlot3D",
  	  "ListSliceVectorPlot3D",
  	  "ListStepPlot",
  	  "ListStreamDensityPlot",
  	  "ListStreamPlot",
  	  "ListStreamPlot3D",
  	  "ListSurfacePlot3D",
  	  "ListVectorDensityPlot",
  	  "ListVectorDisplacementPlot",
  	  "ListVectorDisplacementPlot3D",
  	  "ListVectorPlot",
  	  "ListVectorPlot3D",
  	  "ListZTransform",
  	  "Literal",
  	  "LiteralSearch",
  	  "LiteralType",
  	  "LoadCompiledComponent",
  	  "LocalAdaptiveBinarize",
  	  "LocalCache",
  	  "LocalClusteringCoefficient",
  	  "LocalEvaluate",
  	  "LocalizeDefinitions",
  	  "LocalizeVariables",
  	  "LocalObject",
  	  "LocalObjects",
  	  "LocalResponseNormalizationLayer",
  	  "LocalSubmit",
  	  "LocalSymbol",
  	  "LocalTime",
  	  "LocalTimeZone",
  	  "LocationEquivalenceTest",
  	  "LocationTest",
  	  "Locator",
  	  "LocatorAutoCreate",
  	  "LocatorBox",
  	  "LocatorBoxOptions",
  	  "LocatorCentering",
  	  "LocatorPane",
  	  "LocatorPaneBox",
  	  "LocatorPaneBoxOptions",
  	  "LocatorRegion",
  	  "Locked",
  	  "Log",
  	  "Log10",
  	  "Log2",
  	  "LogBarnesG",
  	  "LogGamma",
  	  "LogGammaDistribution",
  	  "LogicalExpand",
  	  "LogIntegral",
  	  "LogisticDistribution",
  	  "LogisticSigmoid",
  	  "LogitModelFit",
  	  "LogLikelihood",
  	  "LogLinearPlot",
  	  "LogLogisticDistribution",
  	  "LogLogPlot",
  	  "LogMultinormalDistribution",
  	  "LogNormalDistribution",
  	  "LogPlot",
  	  "LogRankTest",
  	  "LogSeriesDistribution",
  	  "LongEqual",
  	  "Longest",
  	  "LongestCommonSequence",
  	  "LongestCommonSequencePositions",
  	  "LongestCommonSubsequence",
  	  "LongestCommonSubsequencePositions",
  	  "LongestMatch",
  	  "LongestOrderedSequence",
  	  "LongForm",
  	  "Longitude",
  	  "LongLeftArrow",
  	  "LongLeftRightArrow",
  	  "LongRightArrow",
  	  "LongShortTermMemoryLayer",
  	  "Lookup",
  	  "Loopback",
  	  "LoopFreeGraphQ",
  	  "Looping",
  	  "LossFunction",
  	  "LowerCaseQ",
  	  "LowerLeftArrow",
  	  "LowerRightArrow",
  	  "LowerTriangularize",
  	  "LowerTriangularMatrix",
  	  "LowerTriangularMatrixQ",
  	  "LowpassFilter",
  	  "LQEstimatorGains",
  	  "LQGRegulator",
  	  "LQOutputRegulatorGains",
  	  "LQRegulatorGains",
  	  "LUBackSubstitution",
  	  "LucasL",
  	  "LuccioSamiComponents",
  	  "LUDecomposition",
  	  "LunarEclipse",
  	  "LUVColor",
  	  "LyapunovSolve",
  	  "LyonsGroupLy",
  	  "MachineID",
  	  "MachineName",
  	  "MachineNumberQ",
  	  "MachinePrecision",
  	  "MacintoshSystemPageSetup",
  	  "Magenta",
  	  "Magnification",
  	  "Magnify",
  	  "MailAddressValidation",
  	  "MailExecute",
  	  "MailFolder",
  	  "MailItem",
  	  "MailReceiverFunction",
  	  "MailResponseFunction",
  	  "MailSearch",
  	  "MailServerConnect",
  	  "MailServerConnection",
  	  "MailSettings",
  	  "MainSolve",
  	  "MaintainDynamicCaches",
  	  "Majority",
  	  "MakeBoxes",
  	  "MakeExpression",
  	  "MakeRules",
  	  "ManagedLibraryExpressionID",
  	  "ManagedLibraryExpressionQ",
  	  "MandelbrotSetBoettcher",
  	  "MandelbrotSetDistance",
  	  "MandelbrotSetIterationCount",
  	  "MandelbrotSetMemberQ",
  	  "MandelbrotSetPlot",
  	  "MangoldtLambda",
  	  "ManhattanDistance",
  	  "Manipulate",
  	  "Manipulator",
  	  "MannedSpaceMissionData",
  	  "MannWhitneyTest",
  	  "MantissaExponent",
  	  "Manual",
  	  "Map",
  	  "MapAll",
  	  "MapApply",
  	  "MapAt",
  	  "MapIndexed",
  	  "MAProcess",
  	  "MapThread",
  	  "MarchenkoPasturDistribution",
  	  "MarcumQ",
  	  "MardiaCombinedTest",
  	  "MardiaKurtosisTest",
  	  "MardiaSkewnessTest",
  	  "MarginalDistribution",
  	  "MarkovProcessProperties",
  	  "Masking",
  	  "MassConcentrationCondition",
  	  "MassFluxValue",
  	  "MassImpermeableBoundaryValue",
  	  "MassOutflowValue",
  	  "MassSymmetryValue",
  	  "MassTransferValue",
  	  "MassTransportPDEComponent",
  	  "MatchingDissimilarity",
  	  "MatchLocalNameQ",
  	  "MatchLocalNames",
  	  "MatchQ",
  	  "Material",
  	  "MaterialShading",
  	  "MaternPointProcess",
  	  "MathematicalFunctionData",
  	  "MathematicaNotation",
  	  "MathieuC",
  	  "MathieuCharacteristicA",
  	  "MathieuCharacteristicB",
  	  "MathieuCharacteristicExponent",
  	  "MathieuCPrime",
  	  "MathieuGroupM11",
  	  "MathieuGroupM12",
  	  "MathieuGroupM22",
  	  "MathieuGroupM23",
  	  "MathieuGroupM24",
  	  "MathieuS",
  	  "MathieuSPrime",
  	  "MathMLForm",
  	  "MathMLText",
  	  "Matrices",
  	  "MatrixExp",
  	  "MatrixForm",
  	  "MatrixFunction",
  	  "MatrixLog",
  	  "MatrixNormalDistribution",
  	  "MatrixPlot",
  	  "MatrixPower",
  	  "MatrixPropertyDistribution",
  	  "MatrixQ",
  	  "MatrixRank",
  	  "MatrixTDistribution",
  	  "Max",
  	  "MaxBend",
  	  "MaxCellMeasure",
  	  "MaxColorDistance",
  	  "MaxDate",
  	  "MaxDetect",
  	  "MaxDisplayedChildren",
  	  "MaxDuration",
  	  "MaxExtraBandwidths",
  	  "MaxExtraConditions",
  	  "MaxFeatureDisplacement",
  	  "MaxFeatures",
  	  "MaxFilter",
  	  "MaximalBy",
  	  "Maximize",
  	  "MaxItems",
  	  "MaxIterations",
  	  "MaxLimit",
  	  "MaxMemoryUsed",
  	  "MaxMixtureKernels",
  	  "MaxOverlapFraction",
  	  "MaxPlotPoints",
  	  "MaxPoints",
  	  "MaxRecursion",
  	  "MaxStableDistribution",
  	  "MaxStepFraction",
  	  "MaxSteps",
  	  "MaxStepSize",
  	  "MaxTrainingRounds",
  	  "MaxValue",
  	  "MaxwellDistribution",
  	  "MaxWordGap",
  	  "McLaughlinGroupMcL",
  	  "Mean",
  	  "MeanAbsoluteLossLayer",
  	  "MeanAround",
  	  "MeanClusteringCoefficient",
  	  "MeanDegreeConnectivity",
  	  "MeanDeviation",
  	  "MeanFilter",
  	  "MeanGraphDistance",
  	  "MeanNeighborDegree",
  	  "MeanPointDensity",
  	  "MeanShift",
  	  "MeanShiftFilter",
  	  "MeanSquaredLossLayer",
  	  "Median",
  	  "MedianDeviation",
  	  "MedianFilter",
  	  "MedicalTestData",
  	  "Medium",
  	  "MeijerG",
  	  "MeijerGReduce",
  	  "MeixnerDistribution",
  	  "MellinConvolve",
  	  "MellinTransform",
  	  "MemberQ",
  	  "MemoryAvailable",
  	  "MemoryConstrained",
  	  "MemoryConstraint",
  	  "MemoryInUse",
  	  "MengerMesh",
  	  "Menu",
  	  "MenuAppearance",
  	  "MenuCommandKey",
  	  "MenuEvaluator",
  	  "MenuItem",
  	  "MenuList",
  	  "MenuPacket",
  	  "MenuSortingValue",
  	  "MenuStyle",
  	  "MenuView",
  	  "Merge",
  	  "MergeDifferences",
  	  "MergingFunction",
  	  "MersennePrimeExponent",
  	  "MersennePrimeExponentQ",
  	  "Mesh",
  	  "MeshCellCentroid",
  	  "MeshCellCount",
  	  "MeshCellHighlight",
  	  "MeshCellIndex",
  	  "MeshCellLabel",
  	  "MeshCellMarker",
  	  "MeshCellMeasure",
  	  "MeshCellQuality",
  	  "MeshCells",
  	  "MeshCellShapeFunction",
  	  "MeshCellStyle",
  	  "MeshConnectivityGraph",
  	  "MeshCoordinates",
  	  "MeshFunctions",
  	  "MeshPrimitives",
  	  "MeshQualityGoal",
  	  "MeshRange",
  	  "MeshRefinementFunction",
  	  "MeshRegion",
  	  "MeshRegionQ",
  	  "MeshShading",
  	  "MeshStyle",
  	  "Message",
  	  "MessageDialog",
  	  "MessageList",
  	  "MessageName",
  	  "MessageObject",
  	  "MessageOptions",
  	  "MessagePacket",
  	  "Messages",
  	  "MessagesNotebook",
  	  "MetaCharacters",
  	  "MetaInformation",
  	  "MeteorShowerData",
  	  "Method",
  	  "MethodOptions",
  	  "MexicanHatWavelet",
  	  "MeyerWavelet",
  	  "Midpoint",
  	  "MIMETypeToFormatList",
  	  "Min",
  	  "MinColorDistance",
  	  "MinDate",
  	  "MinDetect",
  	  "MineralData",
  	  "MinFilter",
  	  "MinimalBy",
  	  "MinimalPolynomial",
  	  "MinimalStateSpaceModel",
  	  "Minimize",
  	  "MinimumTimeIncrement",
  	  "MinIntervalSize",
  	  "MinkowskiQuestionMark",
  	  "MinLimit",
  	  "MinMax",
  	  "MinorPlanetData",
  	  "Minors",
  	  "MinPointSeparation",
  	  "MinRecursion",
  	  "MinSize",
  	  "MinStableDistribution",
  	  "Minus",
  	  "MinusPlus",
  	  "MinValue",
  	  "Missing",
  	  "MissingBehavior",
  	  "MissingDataMethod",
  	  "MissingDataRules",
  	  "MissingQ",
  	  "MissingString",
  	  "MissingStyle",
  	  "MissingValuePattern",
  	  "MissingValueSynthesis",
  	  "MittagLefflerE",
  	  "MixedFractionParts",
  	  "MixedGraphQ",
  	  "MixedMagnitude",
  	  "MixedRadix",
  	  "MixedRadixQuantity",
  	  "MixedUnit",
  	  "MixtureDistribution",
  	  "Mod",
  	  "Modal",
  	  "Mode",
  	  "ModelPredictiveController",
  	  "Modular",
  	  "ModularInverse",
  	  "ModularLambda",
  	  "Module",
  	  "Modulus",
  	  "MoebiusMu",
  	  "Molecule",
  	  "MoleculeAlign",
  	  "MoleculeContainsQ",
  	  "MoleculeDraw",
  	  "MoleculeEquivalentQ",
  	  "MoleculeFreeQ",
  	  "MoleculeGraph",
  	  "MoleculeMatchQ",
  	  "MoleculeMaximumCommonSubstructure",
  	  "MoleculeModify",
  	  "MoleculeName",
  	  "MoleculePattern",
  	  "MoleculePlot",
  	  "MoleculePlot3D",
  	  "MoleculeProperty",
  	  "MoleculeQ",
  	  "MoleculeRecognize",
  	  "MoleculeSubstructureCount",
  	  "MoleculeValue",
  	  "Moment",
  	  "MomentConvert",
  	  "MomentEvaluate",
  	  "MomentGeneratingFunction",
  	  "MomentOfInertia",
  	  "Monday",
  	  "Monitor",
  	  "MonomialList",
  	  "MonomialOrder",
  	  "MonsterGroupM",
  	  "MoonPhase",
  	  "MoonPosition",
  	  "MorletWavelet",
  	  "MorphologicalBinarize",
  	  "MorphologicalBranchPoints",
  	  "MorphologicalComponents",
  	  "MorphologicalEulerNumber",
  	  "MorphologicalGraph",
  	  "MorphologicalPerimeter",
  	  "MorphologicalTransform",
  	  "MortalityData",
  	  "Most",
  	  "MountainData",
  	  "MouseAnnotation",
  	  "MouseAppearance",
  	  "MouseAppearanceTag",
  	  "MouseButtons",
  	  "Mouseover",
  	  "MousePointerNote",
  	  "MousePosition",
  	  "MovieData",
  	  "MovingAverage",
  	  "MovingMap",
  	  "MovingMedian",
  	  "MoyalDistribution",
  	  "MultiaxisArrangement",
  	  "Multicolumn",
  	  "MultiedgeStyle",
  	  "MultigraphQ",
  	  "MultilaunchWarning",
  	  "MultiLetterItalics",
  	  "MultiLetterStyle",
  	  "MultilineFunction",
  	  "Multinomial",
  	  "MultinomialDistribution",
  	  "MultinormalDistribution",
  	  "MultiplicativeOrder",
  	  "Multiplicity",
  	  "MultiplySides",
  	  "MultiscriptBoxOptions",
  	  "Multiselection",
  	  "MultivariateHypergeometricDistribution",
  	  "MultivariatePoissonDistribution",
  	  "MultivariateTDistribution",
  	  "N",
  	  "NakagamiDistribution",
  	  "NameQ",
  	  "Names",
  	  "NamespaceBox",
  	  "NamespaceBoxOptions",
  	  "Nand",
  	  "NArgMax",
  	  "NArgMin",
  	  "NBernoulliB",
  	  "NBodySimulation",
  	  "NBodySimulationData",
  	  "NCache",
  	  "NCaputoD",
  	  "NDEigensystem",
  	  "NDEigenvalues",
  	  "NDSolve",
  	  "NDSolveValue",
  	  "Nearest",
  	  "NearestFunction",
  	  "NearestMeshCells",
  	  "NearestNeighborG",
  	  "NearestNeighborGraph",
  	  "NearestTo",
  	  "NebulaData",
  	  "NeedlemanWunschSimilarity",
  	  "Needs",
  	  "Negative",
  	  "NegativeBinomialDistribution",
  	  "NegativeDefiniteMatrixQ",
  	  "NegativeIntegers",
  	  "NegativelyOrientedPoints",
  	  "NegativeMultinomialDistribution",
  	  "NegativeRationals",
  	  "NegativeReals",
  	  "NegativeSemidefiniteMatrixQ",
  	  "NeighborhoodData",
  	  "NeighborhoodGraph",
  	  "Nest",
  	  "NestedGreaterGreater",
  	  "NestedLessLess",
  	  "NestedScriptRules",
  	  "NestGraph",
  	  "NestList",
  	  "NestTree",
  	  "NestWhile",
  	  "NestWhileList",
  	  "NetAppend",
  	  "NetArray",
  	  "NetArrayLayer",
  	  "NetBidirectionalOperator",
  	  "NetChain",
  	  "NetDecoder",
  	  "NetDelete",
  	  "NetDrop",
  	  "NetEncoder",
  	  "NetEvaluationMode",
  	  "NetExternalObject",
  	  "NetExtract",
  	  "NetFlatten",
  	  "NetFoldOperator",
  	  "NetGANOperator",
  	  "NetGraph",
  	  "NetInformation",
  	  "NetInitialize",
  	  "NetInsert",
  	  "NetInsertSharedArrays",
  	  "NetJoin",
  	  "NetMapOperator",
  	  "NetMapThreadOperator",
  	  "NetMeasurements",
  	  "NetModel",
  	  "NetNestOperator",
  	  "NetPairEmbeddingOperator",
  	  "NetPort",
  	  "NetPortGradient",
  	  "NetPrepend",
  	  "NetRename",
  	  "NetReplace",
  	  "NetReplacePart",
  	  "NetSharedArray",
  	  "NetStateObject",
  	  "NetTake",
  	  "NetTrain",
  	  "NetTrainResultsObject",
  	  "NetUnfold",
  	  "NetworkPacketCapture",
  	  "NetworkPacketRecording",
  	  "NetworkPacketRecordingDuring",
  	  "NetworkPacketTrace",
  	  "NeumannValue",
  	  "NevilleThetaC",
  	  "NevilleThetaD",
  	  "NevilleThetaN",
  	  "NevilleThetaS",
  	  "NewPrimitiveStyle",
  	  "NExpectation",
  	  "Next",
  	  "NextCell",
  	  "NextDate",
  	  "NextPrime",
  	  "NextScheduledTaskTime",
  	  "NeymanScottPointProcess",
  	  "NFractionalD",
  	  "NHoldAll",
  	  "NHoldFirst",
  	  "NHoldRest",
  	  "NicholsGridLines",
  	  "NicholsPlot",
  	  "NightHemisphere",
  	  "NIntegrate",
  	  "NMaximize",
  	  "NMaxValue",
  	  "NMinimize",
  	  "NMinValue",
  	  "NominalScale",
  	  "NominalVariables",
  	  "NonAssociative",
  	  "NoncentralBetaDistribution",
  	  "NoncentralChiSquareDistribution",
  	  "NoncentralFRatioDistribution",
  	  "NoncentralStudentTDistribution",
  	  "NonCommutativeMultiply",
  	  "NonConstants",
  	  "NondimensionalizationTransform",
  	  "None",
  	  "NoneTrue",
  	  "NonlinearModelFit",
  	  "NonlinearStateSpaceModel",
  	  "NonlocalMeansFilter",
  	  "NonNegative",
  	  "NonNegativeIntegers",
  	  "NonNegativeRationals",
  	  "NonNegativeReals",
  	  "NonPositive",
  	  "NonPositiveIntegers",
  	  "NonPositiveRationals",
  	  "NonPositiveReals",
  	  "Nor",
  	  "NorlundB",
  	  "Norm",
  	  "Normal",
  	  "NormalDistribution",
  	  "NormalGrouping",
  	  "NormalizationLayer",
  	  "Normalize",
  	  "Normalized",
  	  "NormalizedSquaredEuclideanDistance",
  	  "NormalMatrixQ",
  	  "NormalsFunction",
  	  "NormFunction",
  	  "Not",
  	  "NotCongruent",
  	  "NotCupCap",
  	  "NotDoubleVerticalBar",
  	  "Notebook",
  	  "NotebookApply",
  	  "NotebookAutoSave",
  	  "NotebookBrowseDirectory",
  	  "NotebookClose",
  	  "NotebookConvertSettings",
  	  "NotebookCreate",
  	  "NotebookDefault",
  	  "NotebookDelete",
  	  "NotebookDirectory",
  	  "NotebookDynamicExpression",
  	  "NotebookEvaluate",
  	  "NotebookEventActions",
  	  "NotebookFileName",
  	  "NotebookFind",
  	  "NotebookGet",
  	  "NotebookImport",
  	  "NotebookInformation",
  	  "NotebookInterfaceObject",
  	  "NotebookLocate",
  	  "NotebookObject",
  	  "NotebookOpen",
  	  "NotebookPath",
  	  "NotebookPrint",
  	  "NotebookPut",
  	  "NotebookRead",
  	  "Notebooks",
  	  "NotebookSave",
  	  "NotebookSelection",
  	  "NotebooksMenu",
  	  "NotebookTemplate",
  	  "NotebookWrite",
  	  "NotElement",
  	  "NotEqualTilde",
  	  "NotExists",
  	  "NotGreater",
  	  "NotGreaterEqual",
  	  "NotGreaterFullEqual",
  	  "NotGreaterGreater",
  	  "NotGreaterLess",
  	  "NotGreaterSlantEqual",
  	  "NotGreaterTilde",
  	  "Nothing",
  	  "NotHumpDownHump",
  	  "NotHumpEqual",
  	  "NotificationFunction",
  	  "NotLeftTriangle",
  	  "NotLeftTriangleBar",
  	  "NotLeftTriangleEqual",
  	  "NotLess",
  	  "NotLessEqual",
  	  "NotLessFullEqual",
  	  "NotLessGreater",
  	  "NotLessLess",
  	  "NotLessSlantEqual",
  	  "NotLessTilde",
  	  "NotNestedGreaterGreater",
  	  "NotNestedLessLess",
  	  "NotPrecedes",
  	  "NotPrecedesEqual",
  	  "NotPrecedesSlantEqual",
  	  "NotPrecedesTilde",
  	  "NotReverseElement",
  	  "NotRightTriangle",
  	  "NotRightTriangleBar",
  	  "NotRightTriangleEqual",
  	  "NotSquareSubset",
  	  "NotSquareSubsetEqual",
  	  "NotSquareSuperset",
  	  "NotSquareSupersetEqual",
  	  "NotSubset",
  	  "NotSubsetEqual",
  	  "NotSucceeds",
  	  "NotSucceedsEqual",
  	  "NotSucceedsSlantEqual",
  	  "NotSucceedsTilde",
  	  "NotSuperset",
  	  "NotSupersetEqual",
  	  "NotTilde",
  	  "NotTildeEqual",
  	  "NotTildeFullEqual",
  	  "NotTildeTilde",
  	  "NotVerticalBar",
  	  "Now",
  	  "NoWhitespace",
  	  "NProbability",
  	  "NProduct",
  	  "NProductFactors",
  	  "NRoots",
  	  "NSolve",
  	  "NSolveValues",
  	  "NSum",
  	  "NSumTerms",
  	  "NuclearExplosionData",
  	  "NuclearReactorData",
  	  "Null",
  	  "NullRecords",
  	  "NullSpace",
  	  "NullWords",
  	  "Number",
  	  "NumberCompose",
  	  "NumberDecompose",
  	  "NumberDigit",
  	  "NumberExpand",
  	  "NumberFieldClassNumber",
  	  "NumberFieldDiscriminant",
  	  "NumberFieldFundamentalUnits",
  	  "NumberFieldIntegralBasis",
  	  "NumberFieldNormRepresentatives",
  	  "NumberFieldRegulator",
  	  "NumberFieldRootsOfUnity",
  	  "NumberFieldSignature",
  	  "NumberForm",
  	  "NumberFormat",
  	  "NumberLinePlot",
  	  "NumberMarks",
  	  "NumberMultiplier",
  	  "NumberPadding",
  	  "NumberPoint",
  	  "NumberQ",
  	  "NumberSeparator",
  	  "NumberSigns",
  	  "NumberString",
  	  "Numerator",
  	  "NumeratorDenominator",
  	  "NumericalOrder",
  	  "NumericalSort",
  	  "NumericArray",
  	  "NumericArrayQ",
  	  "NumericArrayType",
  	  "NumericFunction",
  	  "NumericQ",
  	  "NuttallWindow",
  	  "NValues",
  	  "NyquistGridLines",
  	  "NyquistPlot",
  	  "O",
  	  "ObjectExistsQ",
  	  "ObservabilityGramian",
  	  "ObservabilityMatrix",
  	  "ObservableDecomposition",
  	  "ObservableModelQ",
  	  "OceanData",
  	  "Octahedron",
  	  "OddQ",
  	  "Off",
  	  "Offset",
  	  "OLEData",
  	  "On",
  	  "ONanGroupON",
  	  "Once",
  	  "OneIdentity",
  	  "Opacity",
  	  "OpacityFunction",
  	  "OpacityFunctionScaling",
  	  "Open",
  	  "OpenAppend",
  	  "Opener",
  	  "OpenerBox",
  	  "OpenerBoxOptions",
  	  "OpenerView",
  	  "OpenFunctionInspectorPacket",
  	  "Opening",
  	  "OpenRead",
  	  "OpenSpecialOptions",
  	  "OpenTemporary",
  	  "OpenWrite",
  	  "Operate",
  	  "OperatingSystem",
  	  "OperatorApplied",
  	  "OptimumFlowData",
  	  "Optional",
  	  "OptionalElement",
  	  "OptionInspectorSettings",
  	  "OptionQ",
  	  "Options",
  	  "OptionsPacket",
  	  "OptionsPattern",
  	  "OptionValue",
  	  "OptionValueBox",
  	  "OptionValueBoxOptions",
  	  "Or",
  	  "Orange",
  	  "Order",
  	  "OrderDistribution",
  	  "OrderedQ",
  	  "Ordering",
  	  "OrderingBy",
  	  "OrderingLayer",
  	  "Orderless",
  	  "OrderlessPatternSequence",
  	  "OrdinalScale",
  	  "OrnsteinUhlenbeckProcess",
  	  "Orthogonalize",
  	  "OrthogonalMatrixQ",
  	  "Out",
  	  "Outer",
  	  "OuterPolygon",
  	  "OuterPolyhedron",
  	  "OutputAutoOverwrite",
  	  "OutputControllabilityMatrix",
  	  "OutputControllableModelQ",
  	  "OutputForm",
  	  "OutputFormData",
  	  "OutputGrouping",
  	  "OutputMathEditExpression",
  	  "OutputNamePacket",
  	  "OutputPorts",
  	  "OutputResponse",
  	  "OutputSizeLimit",
  	  "OutputStream",
  	  "Over",
  	  "OverBar",
  	  "OverDot",
  	  "Overflow",
  	  "OverHat",
  	  "Overlaps",
  	  "Overlay",
  	  "OverlayBox",
  	  "OverlayBoxOptions",
  	  "OverlayVideo",
  	  "Overscript",
  	  "OverscriptBox",
  	  "OverscriptBoxOptions",
  	  "OverTilde",
  	  "OverVector",
  	  "OverwriteTarget",
  	  "OwenT",
  	  "OwnValues",
  	  "Package",
  	  "PackingMethod",
  	  "PackPaclet",
  	  "PacletDataRebuild",
  	  "PacletDirectoryAdd",
  	  "PacletDirectoryLoad",
  	  "PacletDirectoryRemove",
  	  "PacletDirectoryUnload",
  	  "PacletDisable",
  	  "PacletEnable",
  	  "PacletFind",
  	  "PacletFindRemote",
  	  "PacletInformation",
  	  "PacletInstall",
  	  "PacletInstallSubmit",
  	  "PacletNewerQ",
  	  "PacletObject",
  	  "PacletObjectQ",
  	  "PacletSite",
  	  "PacletSiteObject",
  	  "PacletSiteRegister",
  	  "PacletSites",
  	  "PacletSiteUnregister",
  	  "PacletSiteUpdate",
  	  "PacletSymbol",
  	  "PacletUninstall",
  	  "PacletUpdate",
  	  "PaddedForm",
  	  "Padding",
  	  "PaddingLayer",
  	  "PaddingSize",
  	  "PadeApproximant",
  	  "PadLeft",
  	  "PadRight",
  	  "PageBreakAbove",
  	  "PageBreakBelow",
  	  "PageBreakWithin",
  	  "PageFooterLines",
  	  "PageFooters",
  	  "PageHeaderLines",
  	  "PageHeaders",
  	  "PageHeight",
  	  "PageRankCentrality",
  	  "PageTheme",
  	  "PageWidth",
  	  "Pagination",
  	  "PairCorrelationG",
  	  "PairedBarChart",
  	  "PairedHistogram",
  	  "PairedSmoothHistogram",
  	  "PairedTTest",
  	  "PairedZTest",
  	  "PaletteNotebook",
  	  "PalettePath",
  	  "PalettesMenuSettings",
  	  "PalindromeQ",
  	  "Pane",
  	  "PaneBox",
  	  "PaneBoxOptions",
  	  "Panel",
  	  "PanelBox",
  	  "PanelBoxOptions",
  	  "Paneled",
  	  "PaneSelector",
  	  "PaneSelectorBox",
  	  "PaneSelectorBoxOptions",
  	  "PaperWidth",
  	  "ParabolicCylinderD",
  	  "ParagraphIndent",
  	  "ParagraphSpacing",
  	  "ParallelArray",
  	  "ParallelAxisPlot",
  	  "ParallelCombine",
  	  "ParallelDo",
  	  "Parallelepiped",
  	  "ParallelEvaluate",
  	  "Parallelization",
  	  "Parallelize",
  	  "ParallelKernels",
  	  "ParallelMap",
  	  "ParallelNeeds",
  	  "Parallelogram",
  	  "ParallelProduct",
  	  "ParallelSubmit",
  	  "ParallelSum",
  	  "ParallelTable",
  	  "ParallelTry",
  	  "Parameter",
  	  "ParameterEstimator",
  	  "ParameterMixtureDistribution",
  	  "ParameterVariables",
  	  "ParametricConvexOptimization",
  	  "ParametricFunction",
  	  "ParametricNDSolve",
  	  "ParametricNDSolveValue",
  	  "ParametricPlot",
  	  "ParametricPlot3D",
  	  "ParametricRampLayer",
  	  "ParametricRegion",
  	  "ParentBox",
  	  "ParentCell",
  	  "ParentConnect",
  	  "ParentDirectory",
  	  "ParentEdgeLabel",
  	  "ParentEdgeLabelFunction",
  	  "ParentEdgeLabelStyle",
  	  "ParentEdgeShapeFunction",
  	  "ParentEdgeStyle",
  	  "ParentEdgeStyleFunction",
  	  "ParentForm",
  	  "Parenthesize",
  	  "ParentList",
  	  "ParentNotebook",
  	  "ParetoDistribution",
  	  "ParetoPickandsDistribution",
  	  "ParkData",
  	  "Part",
  	  "PartBehavior",
  	  "PartialCorrelationFunction",
  	  "PartialD",
  	  "ParticleAcceleratorData",
  	  "ParticleData",
  	  "Partition",
  	  "PartitionGranularity",
  	  "PartitionsP",
  	  "PartitionsQ",
  	  "PartLayer",
  	  "PartOfSpeech",
  	  "PartProtection",
  	  "ParzenWindow",
  	  "PascalDistribution",
  	  "PassEventsDown",
  	  "PassEventsUp",
  	  "Paste",
  	  "PasteAutoQuoteCharacters",
  	  "PasteBoxFormInlineCells",
  	  "PasteButton",
  	  "Path",
  	  "PathGraph",
  	  "PathGraphQ",
  	  "Pattern",
  	  "PatternFilling",
  	  "PatternReaction",
  	  "PatternSequence",
  	  "PatternTest",
  	  "PauliMatrix",
  	  "PaulWavelet",
  	  "Pause",
  	  "PausedTime",
  	  "PDF",
  	  "PeakDetect",
  	  "PeanoCurve",
  	  "PearsonChiSquareTest",
  	  "PearsonCorrelationTest",
  	  "PearsonDistribution",
  	  "PenttinenPointProcess",
  	  "PercentForm",
  	  "PerfectNumber",
  	  "PerfectNumberQ",
  	  "PerformanceGoal",
  	  "Perimeter",
  	  "PeriodicBoundaryCondition",
  	  "PeriodicInterpolation",
  	  "Periodogram",
  	  "PeriodogramArray",
  	  "Permanent",
  	  "Permissions",
  	  "PermissionsGroup",
  	  "PermissionsGroupMemberQ",
  	  "PermissionsGroups",
  	  "PermissionsKey",
  	  "PermissionsKeys",
  	  "PermutationCycles",
  	  "PermutationCyclesQ",
  	  "PermutationGroup",
  	  "PermutationLength",
  	  "PermutationList",
  	  "PermutationListQ",
  	  "PermutationMatrix",
  	  "PermutationMax",
  	  "PermutationMin",
  	  "PermutationOrder",
  	  "PermutationPower",
  	  "PermutationProduct",
  	  "PermutationReplace",
  	  "Permutations",
  	  "PermutationSupport",
  	  "Permute",
  	  "PeronaMalikFilter",
  	  "Perpendicular",
  	  "PerpendicularBisector",
  	  "PersistenceLocation",
  	  "PersistenceTime",
  	  "PersistentObject",
  	  "PersistentObjects",
  	  "PersistentSymbol",
  	  "PersistentValue",
  	  "PersonData",
  	  "PERTDistribution",
  	  "PetersenGraph",
  	  "PhaseMargins",
  	  "PhaseRange",
  	  "PhongShading",
  	  "PhysicalSystemData",
  	  "Pi",
  	  "Pick",
  	  "PickedElements",
  	  "PickMode",
  	  "PIDData",
  	  "PIDDerivativeFilter",
  	  "PIDFeedforward",
  	  "PIDTune",
  	  "Piecewise",
  	  "PiecewiseExpand",
  	  "PieChart",
  	  "PieChart3D",
  	  "PillaiTrace",
  	  "PillaiTraceTest",
  	  "PingTime",
  	  "Pink",
  	  "PitchRecognize",
  	  "Pivoting",
  	  "PixelConstrained",
  	  "PixelValue",
  	  "PixelValuePositions",
  	  "Placed",
  	  "Placeholder",
  	  "PlaceholderLayer",
  	  "PlaceholderReplace",
  	  "Plain",
  	  "PlanarAngle",
  	  "PlanarFaceList",
  	  "PlanarGraph",
  	  "PlanarGraphQ",
  	  "PlanckRadiationLaw",
  	  "PlaneCurveData",
  	  "PlanetaryMoonData",
  	  "PlanetData",
  	  "PlantData",
  	  "Play",
  	  "PlaybackSettings",
  	  "PlayRange",
  	  "Plot",
  	  "Plot3D",
  	  "Plot3Matrix",
  	  "PlotDivision",
  	  "PlotJoined",
  	  "PlotLabel",
  	  "PlotLabels",
  	  "PlotLayout",
  	  "PlotLegends",
  	  "PlotMarkers",
  	  "PlotPoints",
  	  "PlotRange",
  	  "PlotRangeClipping",
  	  "PlotRangeClipPlanesStyle",
  	  "PlotRangePadding",
  	  "PlotRegion",
  	  "PlotStyle",
  	  "PlotTheme",
  	  "Pluralize",
  	  "Plus",
  	  "PlusMinus",
  	  "Pochhammer",
  	  "PodStates",
  	  "PodWidth",
  	  "Point",
  	  "Point3DBox",
  	  "Point3DBoxOptions",
  	  "PointBox",
  	  "PointBoxOptions",
  	  "PointCountDistribution",
  	  "PointDensity",
  	  "PointDensityFunction",
  	  "PointFigureChart",
  	  "PointLegend",
  	  "PointLight",
  	  "PointProcessEstimator",
  	  "PointProcessFitTest",
  	  "PointProcessParameterAssumptions",
  	  "PointProcessParameterQ",
  	  "PointSize",
  	  "PointStatisticFunction",
  	  "PointValuePlot",
  	  "PoissonConsulDistribution",
  	  "PoissonDistribution",
  	  "PoissonPDEComponent",
  	  "PoissonPointProcess",
  	  "PoissonProcess",
  	  "PoissonWindow",
  	  "PolarAxes",
  	  "PolarAxesOrigin",
  	  "PolarGridLines",
  	  "PolarPlot",
  	  "PolarTicks",
  	  "PoleZeroMarkers",
  	  "PolyaAeppliDistribution",
  	  "PolyGamma",
  	  "Polygon",
  	  "Polygon3DBox",
  	  "Polygon3DBoxOptions",
  	  "PolygonalNumber",
  	  "PolygonAngle",
  	  "PolygonBox",
  	  "PolygonBoxOptions",
  	  "PolygonCoordinates",
  	  "PolygonDecomposition",
  	  "PolygonHoleScale",
  	  "PolygonIntersections",
  	  "PolygonScale",
  	  "Polyhedron",
  	  "PolyhedronAngle",
  	  "PolyhedronBox",
  	  "PolyhedronBoxOptions",
  	  "PolyhedronCoordinates",
  	  "PolyhedronData",
  	  "PolyhedronDecomposition",
  	  "PolyhedronGenus",
  	  "PolyLog",
  	  "PolynomialExpressionQ",
  	  "PolynomialExtendedGCD",
  	  "PolynomialForm",
  	  "PolynomialGCD",
  	  "PolynomialLCM",
  	  "PolynomialMod",
  	  "PolynomialQ",
  	  "PolynomialQuotient",
  	  "PolynomialQuotientRemainder",
  	  "PolynomialReduce",
  	  "PolynomialRemainder",
  	  "Polynomials",
  	  "PolynomialSumOfSquaresList",
  	  "PoolingLayer",
  	  "PopupMenu",
  	  "PopupMenuBox",
  	  "PopupMenuBoxOptions",
  	  "PopupView",
  	  "PopupWindow",
  	  "Position",
  	  "PositionIndex",
  	  "PositionLargest",
  	  "PositionSmallest",
  	  "Positive",
  	  "PositiveDefiniteMatrixQ",
  	  "PositiveIntegers",
  	  "PositivelyOrientedPoints",
  	  "PositiveRationals",
  	  "PositiveReals",
  	  "PositiveSemidefiniteMatrixQ",
  	  "PossibleZeroQ",
  	  "Postfix",
  	  "PostScript",
  	  "Power",
  	  "PowerDistribution",
  	  "PowerExpand",
  	  "PowerMod",
  	  "PowerModList",
  	  "PowerRange",
  	  "PowerSpectralDensity",
  	  "PowersRepresentations",
  	  "PowerSymmetricPolynomial",
  	  "Precedence",
  	  "PrecedenceForm",
  	  "Precedes",
  	  "PrecedesEqual",
  	  "PrecedesSlantEqual",
  	  "PrecedesTilde",
  	  "Precision",
  	  "PrecisionGoal",
  	  "PreDecrement",
  	  "Predict",
  	  "PredictionRoot",
  	  "PredictorFunction",
  	  "PredictorInformation",
  	  "PredictorMeasurements",
  	  "PredictorMeasurementsObject",
  	  "PreemptProtect",
  	  "PreferencesPath",
  	  "PreferencesSettings",
  	  "Prefix",
  	  "PreIncrement",
  	  "Prepend",
  	  "PrependLayer",
  	  "PrependTo",
  	  "PreprocessingRules",
  	  "PreserveColor",
  	  "PreserveImageOptions",
  	  "Previous",
  	  "PreviousCell",
  	  "PreviousDate",
  	  "PriceGraphDistribution",
  	  "PrimaryPlaceholder",
  	  "Prime",
  	  "PrimeNu",
  	  "PrimeOmega",
  	  "PrimePi",
  	  "PrimePowerQ",
  	  "PrimeQ",
  	  "Primes",
  	  "PrimeZetaP",
  	  "PrimitivePolynomialQ",
  	  "PrimitiveRoot",
  	  "PrimitiveRootList",
  	  "PrincipalComponents",
  	  "PrincipalValue",
  	  "Print",
  	  "PrintableASCIIQ",
  	  "PrintAction",
  	  "PrintForm",
  	  "PrintingCopies",
  	  "PrintingOptions",
  	  "PrintingPageRange",
  	  "PrintingStartingPageNumber",
  	  "PrintingStyleEnvironment",
  	  "Printout3D",
  	  "Printout3DPreviewer",
  	  "PrintPrecision",
  	  "PrintTemporary",
  	  "Prism",
  	  "PrismBox",
  	  "PrismBoxOptions",
  	  "PrivateCellOptions",
  	  "PrivateEvaluationOptions",
  	  "PrivateFontOptions",
  	  "PrivateFrontEndOptions",
  	  "PrivateKey",
  	  "PrivateNotebookOptions",
  	  "PrivatePaths",
  	  "Probability",
  	  "ProbabilityDistribution",
  	  "ProbabilityPlot",
  	  "ProbabilityPr",
  	  "ProbabilityScalePlot",
  	  "ProbitModelFit",
  	  "ProcessConnection",
  	  "ProcessDirectory",
  	  "ProcessEnvironment",
  	  "Processes",
  	  "ProcessEstimator",
  	  "ProcessInformation",
  	  "ProcessObject",
  	  "ProcessParameterAssumptions",
  	  "ProcessParameterQ",
  	  "ProcessStateDomain",
  	  "ProcessStatus",
  	  "ProcessTimeDomain",
  	  "Product",
  	  "ProductDistribution",
  	  "ProductLog",
  	  "ProgressIndicator",
  	  "ProgressIndicatorBox",
  	  "ProgressIndicatorBoxOptions",
  	  "ProgressReporting",
  	  "Projection",
  	  "Prolog",
  	  "PromptForm",
  	  "ProofObject",
  	  "PropagateAborts",
  	  "Properties",
  	  "Property",
  	  "PropertyList",
  	  "PropertyValue",
  	  "Proportion",
  	  "Proportional",
  	  "Protect",
  	  "Protected",
  	  "ProteinData",
  	  "Pruning",
  	  "PseudoInverse",
  	  "PsychrometricPropertyData",
  	  "PublicKey",
  	  "PublisherID",
  	  "PulsarData",
  	  "PunctuationCharacter",
  	  "Purple",
  	  "Put",
  	  "PutAppend",
  	  "Pyramid",
  	  "PyramidBox",
  	  "PyramidBoxOptions",
  	  "QBinomial",
  	  "QFactorial",
  	  "QGamma",
  	  "QHypergeometricPFQ",
  	  "QnDispersion",
  	  "QPochhammer",
  	  "QPolyGamma",
  	  "QRDecomposition",
  	  "QuadraticIrrationalQ",
  	  "QuadraticOptimization",
  	  "Quantile",
  	  "QuantilePlot",
  	  "Quantity",
  	  "QuantityArray",
  	  "QuantityDistribution",
  	  "QuantityForm",
  	  "QuantityMagnitude",
  	  "QuantityQ",
  	  "QuantityUnit",
  	  "QuantityVariable",
  	  "QuantityVariableCanonicalUnit",
  	  "QuantityVariableDimensions",
  	  "QuantityVariableIdentifier",
  	  "QuantityVariablePhysicalQuantity",
  	  "Quartics",
  	  "QuartileDeviation",
  	  "Quartiles",
  	  "QuartileSkewness",
  	  "Query",
  	  "QuestionGenerator",
  	  "QuestionInterface",
  	  "QuestionObject",
  	  "QuestionSelector",
  	  "QueueingNetworkProcess",
  	  "QueueingProcess",
  	  "QueueProperties",
  	  "Quiet",
  	  "QuietEcho",
  	  "Quit",
  	  "Quotient",
  	  "QuotientRemainder",
  	  "RadialAxisPlot",
  	  "RadialGradientFilling",
  	  "RadialGradientImage",
  	  "RadialityCentrality",
  	  "RadicalBox",
  	  "RadicalBoxOptions",
  	  "RadioButton",
  	  "RadioButtonBar",
  	  "RadioButtonBox",
  	  "RadioButtonBoxOptions",
  	  "Radon",
  	  "RadonTransform",
  	  "RamanujanTau",
  	  "RamanujanTauL",
  	  "RamanujanTauTheta",
  	  "RamanujanTauZ",
  	  "Ramp",
  	  "Random",
  	  "RandomArrayLayer",
  	  "RandomChoice",
  	  "RandomColor",
  	  "RandomComplex",
  	  "RandomDate",
  	  "RandomEntity",
  	  "RandomFunction",
  	  "RandomGeneratorState",
  	  "RandomGeoPosition",
  	  "RandomGraph",
  	  "RandomImage",
  	  "RandomInstance",
  	  "RandomInteger",
  	  "RandomPermutation",
  	  "RandomPoint",
  	  "RandomPointConfiguration",
  	  "RandomPolygon",
  	  "RandomPolyhedron",
  	  "RandomPrime",
  	  "RandomReal",
  	  "RandomSample",
  	  "RandomSeed",
  	  "RandomSeeding",
  	  "RandomTime",
  	  "RandomTree",
  	  "RandomVariate",
  	  "RandomWalkProcess",
  	  "RandomWord",
  	  "Range",
  	  "RangeFilter",
  	  "RangeSpecification",
  	  "RankedMax",
  	  "RankedMin",
  	  "RarerProbability",
  	  "Raster",
  	  "Raster3D",
  	  "Raster3DBox",
  	  "Raster3DBoxOptions",
  	  "RasterArray",
  	  "RasterBox",
  	  "RasterBoxOptions",
  	  "Rasterize",
  	  "RasterSize",
  	  "Rational",
  	  "RationalExpressionQ",
  	  "RationalFunctions",
  	  "Rationalize",
  	  "Rationals",
  	  "Ratios",
  	  "RawArray",
  	  "RawBoxes",
  	  "RawData",
  	  "RawMedium",
  	  "RayleighDistribution",
  	  "Re",
  	  "ReactionBalance",
  	  "ReactionBalancedQ",
  	  "ReactionPDETerm",
  	  "Read",
  	  "ReadByteArray",
  	  "ReadLine",
  	  "ReadList",
  	  "ReadProtected",
  	  "ReadString",
  	  "Real",
  	  "RealAbs",
  	  "RealBlockDiagonalForm",
  	  "RealDigits",
  	  "RealExponent",
  	  "Reals",
  	  "RealSign",
  	  "Reap",
  	  "RebuildPacletData",
  	  "RecalibrationFunction",
  	  "RecognitionPrior",
  	  "RecognitionThreshold",
  	  "ReconstructionMesh",
  	  "Record",
  	  "RecordLists",
  	  "RecordSeparators",
  	  "Rectangle",
  	  "RectangleBox",
  	  "RectangleBoxOptions",
  	  "RectangleChart",
  	  "RectangleChart3D",
  	  "RectangularRepeatingElement",
  	  "RecurrenceFilter",
  	  "RecurrenceTable",
  	  "RecurringDigitsForm",
  	  "Red",
  	  "Reduce",
  	  "RefBox",
  	  "ReferenceLineStyle",
  	  "ReferenceMarkers",
  	  "ReferenceMarkerStyle",
  	  "Refine",
  	  "ReflectionMatrix",
  	  "ReflectionTransform",
  	  "Refresh",
  	  "RefreshRate",
  	  "Region",
  	  "RegionBinarize",
  	  "RegionBoundary",
  	  "RegionBoundaryStyle",
  	  "RegionBounds",
  	  "RegionCentroid",
  	  "RegionCongruent",
  	  "RegionConvert",
  	  "RegionDifference",
  	  "RegionDilation",
  	  "RegionDimension",
  	  "RegionDisjoint",
  	  "RegionDistance",
  	  "RegionDistanceFunction",
  	  "RegionEmbeddingDimension",
  	  "RegionEqual",
  	  "RegionErosion",
  	  "RegionFillingStyle",
  	  "RegionFit",
  	  "RegionFunction",
  	  "RegionImage",
  	  "RegionIntersection",
  	  "RegionMeasure",
  	  "RegionMember",
  	  "RegionMemberFunction",
  	  "RegionMoment",
  	  "RegionNearest",
  	  "RegionNearestFunction",
  	  "RegionPlot",
  	  "RegionPlot3D",
  	  "RegionProduct",
  	  "RegionQ",
  	  "RegionResize",
  	  "RegionSimilar",
  	  "RegionSize",
  	  "RegionSymmetricDifference",
  	  "RegionUnion",
  	  "RegionWithin",
  	  "RegisterExternalEvaluator",
  	  "RegularExpression",
  	  "Regularization",
  	  "RegularlySampledQ",
  	  "RegularPolygon",
  	  "ReIm",
  	  "ReImLabels",
  	  "ReImPlot",
  	  "ReImStyle",
  	  "Reinstall",
  	  "RelationalDatabase",
  	  "RelationGraph",
  	  "Release",
  	  "ReleaseHold",
  	  "ReliabilityDistribution",
  	  "ReliefImage",
  	  "ReliefPlot",
  	  "RemoteAuthorizationCaching",
  	  "RemoteBatchJobAbort",
  	  "RemoteBatchJobObject",
  	  "RemoteBatchJobs",
  	  "RemoteBatchMapSubmit",
  	  "RemoteBatchSubmissionEnvironment",
  	  "RemoteBatchSubmit",
  	  "RemoteConnect",
  	  "RemoteConnectionObject",
  	  "RemoteEvaluate",
  	  "RemoteFile",
  	  "RemoteInputFiles",
  	  "RemoteKernelObject",
  	  "RemoteProviderSettings",
  	  "RemoteRun",
  	  "RemoteRunProcess",
  	  "RemovalConditions",
  	  "Remove",
  	  "RemoveAlphaChannel",
  	  "RemoveAsynchronousTask",
  	  "RemoveAudioStream",
  	  "RemoveBackground",
  	  "RemoveChannelListener",
  	  "RemoveChannelSubscribers",
  	  "Removed",
  	  "RemoveDiacritics",
  	  "RemoveInputStreamMethod",
  	  "RemoveOutputStreamMethod",
  	  "RemoveProperty",
  	  "RemoveScheduledTask",
  	  "RemoveUsers",
  	  "RemoveVideoStream",
  	  "RenameDirectory",
  	  "RenameFile",
  	  "RenderAll",
  	  "RenderingOptions",
  	  "RenewalProcess",
  	  "RenkoChart",
  	  "RepairMesh",
  	  "Repeated",
  	  "RepeatedNull",
  	  "RepeatedString",
  	  "RepeatedTiming",
  	  "RepeatingElement",
  	  "Replace",
  	  "ReplaceAll",
  	  "ReplaceAt",
  	  "ReplaceHeldPart",
  	  "ReplaceImageValue",
  	  "ReplaceList",
  	  "ReplacePart",
  	  "ReplacePixelValue",
  	  "ReplaceRepeated",
  	  "ReplicateLayer",
  	  "RequiredPhysicalQuantities",
  	  "Resampling",
  	  "ResamplingAlgorithmData",
  	  "ResamplingMethod",
  	  "Rescale",
  	  "RescalingTransform",
  	  "ResetDirectory",
  	  "ResetScheduledTask",
  	  "ReshapeLayer",
  	  "Residue",
  	  "ResidueSum",
  	  "ResizeLayer",
  	  "Resolve",
  	  "ResolveContextAliases",
  	  "ResourceAcquire",
  	  "ResourceData",
  	  "ResourceFunction",
  	  "ResourceObject",
  	  "ResourceRegister",
  	  "ResourceRemove",
  	  "ResourceSearch",
  	  "ResourceSubmissionObject",
  	  "ResourceSubmit",
  	  "ResourceSystemBase",
  	  "ResourceSystemPath",
  	  "ResourceUpdate",
  	  "ResourceVersion",
  	  "ResponseForm",
  	  "Rest",
  	  "RestartInterval",
  	  "Restricted",
  	  "Resultant",
  	  "ResumePacket",
  	  "Return",
  	  "ReturnCreatesNewCell",
  	  "ReturnEntersInput",
  	  "ReturnExpressionPacket",
  	  "ReturnInputFormPacket",
  	  "ReturnPacket",
  	  "ReturnReceiptFunction",
  	  "ReturnTextPacket",
  	  "Reverse",
  	  "ReverseApplied",
  	  "ReverseBiorthogonalSplineWavelet",
  	  "ReverseElement",
  	  "ReverseEquilibrium",
  	  "ReverseGraph",
  	  "ReverseSort",
  	  "ReverseSortBy",
  	  "ReverseUpEquilibrium",
  	  "RevolutionAxis",
  	  "RevolutionPlot3D",
  	  "RGBColor",
  	  "RiccatiSolve",
  	  "RiceDistribution",
  	  "RidgeFilter",
  	  "RiemannR",
  	  "RiemannSiegelTheta",
  	  "RiemannSiegelZ",
  	  "RiemannXi",
  	  "Riffle",
  	  "Right",
  	  "RightArrow",
  	  "RightArrowBar",
  	  "RightArrowLeftArrow",
  	  "RightComposition",
  	  "RightCosetRepresentative",
  	  "RightDownTeeVector",
  	  "RightDownVector",
  	  "RightDownVectorBar",
  	  "RightTee",
  	  "RightTeeArrow",
  	  "RightTeeVector",
  	  "RightTriangle",
  	  "RightTriangleBar",
  	  "RightTriangleEqual",
  	  "RightUpDownVector",
  	  "RightUpTeeVector",
  	  "RightUpVector",
  	  "RightUpVectorBar",
  	  "RightVector",
  	  "RightVectorBar",
  	  "RipleyK",
  	  "RipleyRassonRegion",
  	  "RiskAchievementImportance",
  	  "RiskReductionImportance",
  	  "RobustConvexOptimization",
  	  "RogersTanimotoDissimilarity",
  	  "RollPitchYawAngles",
  	  "RollPitchYawMatrix",
  	  "RomanNumeral",
  	  "Root",
  	  "RootApproximant",
  	  "RootIntervals",
  	  "RootLocusPlot",
  	  "RootMeanSquare",
  	  "RootOfUnityQ",
  	  "RootReduce",
  	  "Roots",
  	  "RootSum",
  	  "RootTree",
  	  "Rotate",
  	  "RotateLabel",
  	  "RotateLeft",
  	  "RotateRight",
  	  "RotationAction",
  	  "RotationBox",
  	  "RotationBoxOptions",
  	  "RotationMatrix",
  	  "RotationTransform",
  	  "Round",
  	  "RoundImplies",
  	  "RoundingRadius",
  	  "Row",
  	  "RowAlignments",
  	  "RowBackgrounds",
  	  "RowBox",
  	  "RowHeights",
  	  "RowLines",
  	  "RowMinHeight",
  	  "RowReduce",
  	  "RowsEqual",
  	  "RowSpacings",
  	  "RSolve",
  	  "RSolveValue",
  	  "RudinShapiro",
  	  "RudvalisGroupRu",
  	  "Rule",
  	  "RuleCondition",
  	  "RuleDelayed",
  	  "RuleForm",
  	  "RulePlot",
  	  "RulerUnits",
  	  "RulesTree",
  	  "Run",
  	  "RunProcess",
  	  "RunScheduledTask",
  	  "RunThrough",
  	  "RuntimeAttributes",
  	  "RuntimeOptions",
  	  "RussellRaoDissimilarity",
  	  "SameAs",
  	  "SameQ",
  	  "SameTest",
  	  "SameTestProperties",
  	  "SampledEntityClass",
  	  "SampleDepth",
  	  "SampledSoundFunction",
  	  "SampledSoundList",
  	  "SampleRate",
  	  "SamplingPeriod",
  	  "SARIMAProcess",
  	  "SARMAProcess",
  	  "SASTriangle",
  	  "SatelliteData",
  	  "SatisfiabilityCount",
  	  "SatisfiabilityInstances",
  	  "SatisfiableQ",
  	  "Saturday",
  	  "Save",
  	  "Saveable",
  	  "SaveAutoDelete",
  	  "SaveConnection",
  	  "SaveDefinitions",
  	  "SavitzkyGolayMatrix",
  	  "SawtoothWave",
  	  "Scale",
  	  "Scaled",
  	  "ScaleDivisions",
  	  "ScaledMousePosition",
  	  "ScaleOrigin",
  	  "ScalePadding",
  	  "ScaleRanges",
  	  "ScaleRangeStyle",
  	  "ScalingFunctions",
  	  "ScalingMatrix",
  	  "ScalingTransform",
  	  "Scan",
  	  "ScheduledTask",
  	  "ScheduledTaskActiveQ",
  	  "ScheduledTaskInformation",
  	  "ScheduledTaskInformationData",
  	  "ScheduledTaskObject",
  	  "ScheduledTasks",
  	  "SchurDecomposition",
  	  "ScientificForm",
  	  "ScientificNotationThreshold",
  	  "ScorerGi",
  	  "ScorerGiPrime",
  	  "ScorerHi",
  	  "ScorerHiPrime",
  	  "ScreenRectangle",
  	  "ScreenStyleEnvironment",
  	  "ScriptBaselineShifts",
  	  "ScriptForm",
  	  "ScriptLevel",
  	  "ScriptMinSize",
  	  "ScriptRules",
  	  "ScriptSizeMultipliers",
  	  "Scrollbars",
  	  "ScrollingOptions",
  	  "ScrollPosition",
  	  "SearchAdjustment",
  	  "SearchIndexObject",
  	  "SearchIndices",
  	  "SearchQueryString",
  	  "SearchResultObject",
  	  "Sec",
  	  "Sech",
  	  "SechDistribution",
  	  "SecondOrderConeOptimization",
  	  "SectionGrouping",
  	  "SectorChart",
  	  "SectorChart3D",
  	  "SectorOrigin",
  	  "SectorSpacing",
  	  "SecuredAuthenticationKey",
  	  "SecuredAuthenticationKeys",
  	  "SecurityCertificate",
  	  "SeedRandom",
  	  "Select",
  	  "Selectable",
  	  "SelectComponents",
  	  "SelectedCells",
  	  "SelectedNotebook",
  	  "SelectFirst",
  	  "Selection",
  	  "SelectionAnimate",
  	  "SelectionCell",
  	  "SelectionCellCreateCell",
  	  "SelectionCellDefaultStyle",
  	  "SelectionCellParentStyle",
  	  "SelectionCreateCell",
  	  "SelectionDebuggerTag",
  	  "SelectionEvaluate",
  	  "SelectionEvaluateCreateCell",
  	  "SelectionMove",
  	  "SelectionPlaceholder",
  	  "SelectWithContents",
  	  "SelfLoops",
  	  "SelfLoopStyle",
  	  "SemanticImport",
  	  "SemanticImportString",
  	  "SemanticInterpretation",
  	  "SemialgebraicComponentInstances",
  	  "SemidefiniteOptimization",
  	  "SendMail",
  	  "SendMessage",
  	  "Sequence",
  	  "SequenceAlignment",
  	  "SequenceAttentionLayer",
  	  "SequenceCases",
  	  "SequenceCount",
  	  "SequenceFold",
  	  "SequenceFoldList",
  	  "SequenceForm",
  	  "SequenceHold",
  	  "SequenceIndicesLayer",
  	  "SequenceLastLayer",
  	  "SequenceMostLayer",
  	  "SequencePosition",
  	  "SequencePredict",
  	  "SequencePredictorFunction",
  	  "SequenceReplace",
  	  "SequenceRestLayer",
  	  "SequenceReverseLayer",
  	  "SequenceSplit",
  	  "Series",
  	  "SeriesCoefficient",
  	  "SeriesData",
  	  "SeriesTermGoal",
  	  "ServiceConnect",
  	  "ServiceDisconnect",
  	  "ServiceExecute",
  	  "ServiceObject",
  	  "ServiceRequest",
  	  "ServiceResponse",
  	  "ServiceSubmit",
  	  "SessionSubmit",
  	  "SessionTime",
  	  "Set",
  	  "SetAccuracy",
  	  "SetAlphaChannel",
  	  "SetAttributes",
  	  "Setbacks",
  	  "SetCloudDirectory",
  	  "SetCookies",
  	  "SetDelayed",
  	  "SetDirectory",
  	  "SetEnvironment",
  	  "SetFileDate",
  	  "SetFileFormatProperties",
  	  "SetOptions",
  	  "SetOptionsPacket",
  	  "SetPermissions",
  	  "SetPrecision",
  	  "SetProperty",
  	  "SetSecuredAuthenticationKey",
  	  "SetSelectedNotebook",
  	  "SetSharedFunction",
  	  "SetSharedVariable",
  	  "SetStreamPosition",
  	  "SetSystemModel",
  	  "SetSystemOptions",
  	  "Setter",
  	  "SetterBar",
  	  "SetterBox",
  	  "SetterBoxOptions",
  	  "Setting",
  	  "SetUsers",
  	  "Shading",
  	  "Shallow",
  	  "ShannonWavelet",
  	  "ShapiroWilkTest",
  	  "Share",
  	  "SharingList",
  	  "Sharpen",
  	  "ShearingMatrix",
  	  "ShearingTransform",
  	  "ShellRegion",
  	  "ShenCastanMatrix",
  	  "ShiftedGompertzDistribution",
  	  "ShiftRegisterSequence",
  	  "Short",
  	  "ShortDownArrow",
  	  "Shortest",
  	  "ShortestMatch",
  	  "ShortestPathFunction",
  	  "ShortLeftArrow",
  	  "ShortRightArrow",
  	  "ShortTimeFourier",
  	  "ShortTimeFourierData",
  	  "ShortUpArrow",
  	  "Show",
  	  "ShowAutoConvert",
  	  "ShowAutoSpellCheck",
  	  "ShowAutoStyles",
  	  "ShowCellBracket",
  	  "ShowCellLabel",
  	  "ShowCellTags",
  	  "ShowClosedCellArea",
  	  "ShowCodeAssist",
  	  "ShowContents",
  	  "ShowControls",
  	  "ShowCursorTracker",
  	  "ShowGroupOpenCloseIcon",
  	  "ShowGroupOpener",
  	  "ShowInvisibleCharacters",
  	  "ShowPageBreaks",
  	  "ShowPredictiveInterface",
  	  "ShowSelection",
  	  "ShowShortBoxForm",
  	  "ShowSpecialCharacters",
  	  "ShowStringCharacters",
  	  "ShowSyntaxStyles",
  	  "ShrinkingDelay",
  	  "ShrinkWrapBoundingBox",
  	  "SiderealTime",
  	  "SiegelTheta",
  	  "SiegelTukeyTest",
  	  "SierpinskiCurve",
  	  "SierpinskiMesh",
  	  "Sign",
  	  "Signature",
  	  "SignedRankTest",
  	  "SignedRegionDistance",
  	  "SignificanceLevel",
  	  "SignPadding",
  	  "SignTest",
  	  "SimilarityRules",
  	  "SimpleGraph",
  	  "SimpleGraphQ",
  	  "SimplePolygonQ",
  	  "SimplePolyhedronQ",
  	  "Simplex",
  	  "Simplify",
  	  "Sin",
  	  "Sinc",
  	  "SinghMaddalaDistribution",
  	  "SingleEvaluation",
  	  "SingleLetterItalics",
  	  "SingleLetterStyle",
  	  "SingularValueDecomposition",
  	  "SingularValueList",
  	  "SingularValuePlot",
  	  "SingularValues",
  	  "Sinh",
  	  "SinhIntegral",
  	  "SinIntegral",
  	  "SixJSymbol",
  	  "Skeleton",
  	  "SkeletonTransform",
  	  "SkellamDistribution",
  	  "Skewness",
  	  "SkewNormalDistribution",
  	  "SkinStyle",
  	  "Skip",
  	  "SliceContourPlot3D",
  	  "SliceDensityPlot3D",
  	  "SliceDistribution",
  	  "SliceVectorPlot3D",
  	  "Slider",
  	  "Slider2D",
  	  "Slider2DBox",
  	  "Slider2DBoxOptions",
  	  "SliderBox",
  	  "SliderBoxOptions",
  	  "SlideShowVideo",
  	  "SlideView",
  	  "Slot",
  	  "SlotSequence",
  	  "Small",
  	  "SmallCircle",
  	  "Smaller",
  	  "SmithDecomposition",
  	  "SmithDelayCompensator",
  	  "SmithWatermanSimilarity",
  	  "SmoothDensityHistogram",
  	  "SmoothHistogram",
  	  "SmoothHistogram3D",
  	  "SmoothKernelDistribution",
  	  "SmoothPointDensity",
  	  "SnDispersion",
  	  "Snippet",
  	  "SnippetsVideo",
  	  "SnubPolyhedron",
  	  "SocialMediaData",
  	  "Socket",
  	  "SocketConnect",
  	  "SocketListen",
  	  "SocketListener",
  	  "SocketObject",
  	  "SocketOpen",
  	  "SocketReadMessage",
  	  "SocketReadyQ",
  	  "Sockets",
  	  "SocketWaitAll",
  	  "SocketWaitNext",
  	  "SoftmaxLayer",
  	  "SokalSneathDissimilarity",
  	  "SolarEclipse",
  	  "SolarSystemFeatureData",
  	  "SolarTime",
  	  "SolidAngle",
  	  "SolidBoundaryLoadValue",
  	  "SolidData",
  	  "SolidDisplacementCondition",
  	  "SolidFixedCondition",
  	  "SolidMechanicsPDEComponent",
  	  "SolidMechanicsStrain",
  	  "SolidMechanicsStress",
  	  "SolidRegionQ",
  	  "Solve",
  	  "SolveAlways",
  	  "SolveDelayed",
  	  "SolveValues",
  	  "Sort",
  	  "SortBy",
  	  "SortedBy",
  	  "SortedEntityClass",
  	  "Sound",
  	  "SoundAndGraphics",
  	  "SoundNote",
  	  "SoundVolume",
  	  "SourceLink",
  	  "SourcePDETerm",
  	  "Sow",
  	  "Space",
  	  "SpaceCurveData",
  	  "SpaceForm",
  	  "Spacer",
  	  "Spacings",
  	  "Span",
  	  "SpanAdjustments",
  	  "SpanCharacterRounding",
  	  "SpanFromAbove",
  	  "SpanFromBoth",
  	  "SpanFromLeft",
  	  "SpanLineThickness",
  	  "SpanMaxSize",
  	  "SpanMinSize",
  	  "SpanningCharacters",
  	  "SpanSymmetric",
  	  "SparseArray",
  	  "SparseArrayQ",
  	  "SpatialBinnedPointData",
  	  "SpatialBoundaryCorrection",
  	  "SpatialEstimate",
  	  "SpatialEstimatorFunction",
  	  "SpatialGraphDistribution",
  	  "SpatialJ",
  	  "SpatialMedian",
  	  "SpatialNoiseLevel",
  	  "SpatialObservationRegionQ",
  	  "SpatialPointData",
  	  "SpatialPointSelect",
  	  "SpatialRandomnessTest",
  	  "SpatialTransformationLayer",
  	  "SpatialTrendFunction",
  	  "Speak",
  	  "SpeakerMatchQ",
  	  "SpearmanRankTest",
  	  "SpearmanRho",
  	  "SpeciesData",
  	  "SpecificityGoal",
  	  "SpectralLineData",
  	  "Spectrogram",
  	  "SpectrogramArray",
  	  "Specularity",
  	  "SpeechCases",
  	  "SpeechInterpreter",
  	  "SpeechRecognize",
  	  "SpeechSynthesize",
  	  "SpellingCorrection",
  	  "SpellingCorrectionList",
  	  "SpellingDictionaries",
  	  "SpellingDictionariesPath",
  	  "SpellingOptions",
  	  "Sphere",
  	  "SphereBox",
  	  "SphereBoxOptions",
  	  "SpherePoints",
  	  "SphericalBesselJ",
  	  "SphericalBesselY",
  	  "SphericalHankelH1",
  	  "SphericalHankelH2",
  	  "SphericalHarmonicY",
  	  "SphericalPlot3D",
  	  "SphericalRegion",
  	  "SphericalShell",
  	  "SpheroidalEigenvalue",
  	  "SpheroidalJoiningFactor",
  	  "SpheroidalPS",
  	  "SpheroidalPSPrime",
  	  "SpheroidalQS",
  	  "SpheroidalQSPrime",
  	  "SpheroidalRadialFactor",
  	  "SpheroidalS1",
  	  "SpheroidalS1Prime",
  	  "SpheroidalS2",
  	  "SpheroidalS2Prime",
  	  "Splice",
  	  "SplicedDistribution",
  	  "SplineClosed",
  	  "SplineDegree",
  	  "SplineKnots",
  	  "SplineWeights",
  	  "Split",
  	  "SplitBy",
  	  "SpokenString",
  	  "SpotLight",
  	  "Sqrt",
  	  "SqrtBox",
  	  "SqrtBoxOptions",
  	  "Square",
  	  "SquaredEuclideanDistance",
  	  "SquareFreeQ",
  	  "SquareIntersection",
  	  "SquareMatrixQ",
  	  "SquareRepeatingElement",
  	  "SquaresR",
  	  "SquareSubset",
  	  "SquareSubsetEqual",
  	  "SquareSuperset",
  	  "SquareSupersetEqual",
  	  "SquareUnion",
  	  "SquareWave",
  	  "SSSTriangle",
  	  "StabilityMargins",
  	  "StabilityMarginsStyle",
  	  "StableDistribution",
  	  "Stack",
  	  "StackBegin",
  	  "StackComplete",
  	  "StackedDateListPlot",
  	  "StackedListPlot",
  	  "StackInhibit",
  	  "StadiumShape",
  	  "StandardAtmosphereData",
  	  "StandardDeviation",
  	  "StandardDeviationFilter",
  	  "StandardForm",
  	  "Standardize",
  	  "Standardized",
  	  "StandardOceanData",
  	  "StandbyDistribution",
  	  "Star",
  	  "StarClusterData",
  	  "StarData",
  	  "StarGraph",
  	  "StartAsynchronousTask",
  	  "StartExternalSession",
  	  "StartingStepSize",
  	  "StartOfLine",
  	  "StartOfString",
  	  "StartProcess",
  	  "StartScheduledTask",
  	  "StartupSound",
  	  "StartWebSession",
  	  "StateDimensions",
  	  "StateFeedbackGains",
  	  "StateOutputEstimator",
  	  "StateResponse",
  	  "StateSpaceModel",
  	  "StateSpaceRealization",
  	  "StateSpaceTransform",
  	  "StateTransformationLinearize",
  	  "StationaryDistribution",
  	  "StationaryWaveletPacketTransform",
  	  "StationaryWaveletTransform",
  	  "StatusArea",
  	  "StatusCentrality",
  	  "StepMonitor",
  	  "StereochemistryElements",
  	  "StieltjesGamma",
  	  "StippleShading",
  	  "StirlingS1",
  	  "StirlingS2",
  	  "StopAsynchronousTask",
  	  "StoppingPowerData",
  	  "StopScheduledTask",
  	  "StrataVariables",
  	  "StratonovichProcess",
  	  "StraussHardcorePointProcess",
  	  "StraussPointProcess",
  	  "StreamColorFunction",
  	  "StreamColorFunctionScaling",
  	  "StreamDensityPlot",
  	  "StreamMarkers",
  	  "StreamPlot",
  	  "StreamPlot3D",
  	  "StreamPoints",
  	  "StreamPosition",
  	  "Streams",
  	  "StreamScale",
  	  "StreamStyle",
  	  "StrictInequalities",
  	  "String",
  	  "StringBreak",
  	  "StringByteCount",
  	  "StringCases",
  	  "StringContainsQ",
  	  "StringCount",
  	  "StringDelete",
  	  "StringDrop",
  	  "StringEndsQ",
  	  "StringExpression",
  	  "StringExtract",
  	  "StringForm",
  	  "StringFormat",
  	  "StringFormatQ",
  	  "StringFreeQ",
  	  "StringInsert",
  	  "StringJoin",
  	  "StringLength",
  	  "StringMatchQ",
  	  "StringPadLeft",
  	  "StringPadRight",
  	  "StringPart",
  	  "StringPartition",
  	  "StringPosition",
  	  "StringQ",
  	  "StringRepeat",
  	  "StringReplace",
  	  "StringReplaceList",
  	  "StringReplacePart",
  	  "StringReverse",
  	  "StringRiffle",
  	  "StringRotateLeft",
  	  "StringRotateRight",
  	  "StringSkeleton",
  	  "StringSplit",
  	  "StringStartsQ",
  	  "StringTake",
  	  "StringTakeDrop",
  	  "StringTemplate",
  	  "StringToByteArray",
  	  "StringToStream",
  	  "StringTrim",
  	  "StripBoxes",
  	  "StripOnInput",
  	  "StripStyleOnPaste",
  	  "StripWrapperBoxes",
  	  "StrokeForm",
  	  "Struckthrough",
  	  "StructuralImportance",
  	  "StructuredArray",
  	  "StructuredArrayHeadQ",
  	  "StructuredSelection",
  	  "StruveH",
  	  "StruveL",
  	  "Stub",
  	  "StudentTDistribution",
  	  "Style",
  	  "StyleBox",
  	  "StyleBoxAutoDelete",
  	  "StyleData",
  	  "StyleDefinitions",
  	  "StyleForm",
  	  "StyleHints",
  	  "StyleKeyMapping",
  	  "StyleMenuListing",
  	  "StyleNameDialogSettings",
  	  "StyleNames",
  	  "StylePrint",
  	  "StyleSheetPath",
  	  "Subdivide",
  	  "Subfactorial",
  	  "Subgraph",
  	  "SubMinus",
  	  "SubPlus",
  	  "SubresultantPolynomialRemainders",
  	  "SubresultantPolynomials",
  	  "Subresultants",
  	  "Subscript",
  	  "SubscriptBox",
  	  "SubscriptBoxOptions",
  	  "Subscripted",
  	  "Subsequences",
  	  "Subset",
  	  "SubsetCases",
  	  "SubsetCount",
  	  "SubsetEqual",
  	  "SubsetMap",
  	  "SubsetPosition",
  	  "SubsetQ",
  	  "SubsetReplace",
  	  "Subsets",
  	  "SubStar",
  	  "SubstitutionSystem",
  	  "Subsuperscript",
  	  "SubsuperscriptBox",
  	  "SubsuperscriptBoxOptions",
  	  "SubtitleEncoding",
  	  "SubtitleTrackSelection",
  	  "Subtract",
  	  "SubtractFrom",
  	  "SubtractSides",
  	  "SubValues",
  	  "Succeeds",
  	  "SucceedsEqual",
  	  "SucceedsSlantEqual",
  	  "SucceedsTilde",
  	  "Success",
  	  "SuchThat",
  	  "Sum",
  	  "SumConvergence",
  	  "SummationLayer",
  	  "Sunday",
  	  "SunPosition",
  	  "Sunrise",
  	  "Sunset",
  	  "SuperDagger",
  	  "SuperMinus",
  	  "SupernovaData",
  	  "SuperPlus",
  	  "Superscript",
  	  "SuperscriptBox",
  	  "SuperscriptBoxOptions",
  	  "Superset",
  	  "SupersetEqual",
  	  "SuperStar",
  	  "Surd",
  	  "SurdForm",
  	  "SurfaceAppearance",
  	  "SurfaceArea",
  	  "SurfaceColor",
  	  "SurfaceData",
  	  "SurfaceGraphics",
  	  "SurvivalDistribution",
  	  "SurvivalFunction",
  	  "SurvivalModel",
  	  "SurvivalModelFit",
  	  "SuspendPacket",
  	  "SuzukiDistribution",
  	  "SuzukiGroupSuz",
  	  "SwatchLegend",
  	  "Switch",
  	  "Symbol",
  	  "SymbolName",
  	  "SymletWavelet",
  	  "Symmetric",
  	  "SymmetricDifference",
  	  "SymmetricGroup",
  	  "SymmetricKey",
  	  "SymmetricMatrixQ",
  	  "SymmetricPolynomial",
  	  "SymmetricReduction",
  	  "Symmetrize",
  	  "SymmetrizedArray",
  	  "SymmetrizedArrayRules",
  	  "SymmetrizedDependentComponents",
  	  "SymmetrizedIndependentComponents",
  	  "SymmetrizedReplacePart",
  	  "SynchronousInitialization",
  	  "SynchronousUpdating",
  	  "Synonyms",
  	  "Syntax",
  	  "SyntaxForm",
  	  "SyntaxInformation",
  	  "SyntaxLength",
  	  "SyntaxPacket",
  	  "SyntaxQ",
  	  "SynthesizeMissingValues",
  	  "SystemCredential",
  	  "SystemCredentialData",
  	  "SystemCredentialKey",
  	  "SystemCredentialKeys",
  	  "SystemCredentialStoreObject",
  	  "SystemDialogInput",
  	  "SystemException",
  	  "SystemGet",
  	  "SystemHelpPath",
  	  "SystemInformation",
  	  "SystemInformationData",
  	  "SystemInstall",
  	  "SystemModel",
  	  "SystemModeler",
  	  "SystemModelExamples",
  	  "SystemModelLinearize",
  	  "SystemModelMeasurements",
  	  "SystemModelParametricSimulate",
  	  "SystemModelPlot",
  	  "SystemModelProgressReporting",
  	  "SystemModelReliability",
  	  "SystemModels",
  	  "SystemModelSimulate",
  	  "SystemModelSimulateSensitivity",
  	  "SystemModelSimulationData",
  	  "SystemOpen",
  	  "SystemOptions",
  	  "SystemProcessData",
  	  "SystemProcesses",
  	  "SystemsConnectionsModel",
  	  "SystemsModelControllerData",
  	  "SystemsModelDelay",
  	  "SystemsModelDelayApproximate",
  	  "SystemsModelDelete",
  	  "SystemsModelDimensions",
  	  "SystemsModelExtract",
  	  "SystemsModelFeedbackConnect",
  	  "SystemsModelLabels",
  	  "SystemsModelLinearity",
  	  "SystemsModelMerge",
  	  "SystemsModelOrder",
  	  "SystemsModelParallelConnect",
  	  "SystemsModelSeriesConnect",
  	  "SystemsModelStateFeedbackConnect",
  	  "SystemsModelVectorRelativeOrders",
  	  "SystemStub",
  	  "SystemTest",
  	  "Tab",
  	  "TabFilling",
  	  "Table",
  	  "TableAlignments",
  	  "TableDepth",
  	  "TableDirections",
  	  "TableForm",
  	  "TableHeadings",
  	  "TableSpacing",
  	  "TableView",
  	  "TableViewBox",
  	  "TableViewBoxAlignment",
  	  "TableViewBoxBackground",
  	  "TableViewBoxHeaders",
  	  "TableViewBoxItemSize",
  	  "TableViewBoxItemStyle",
  	  "TableViewBoxOptions",
  	  "TabSpacings",
  	  "TabView",
  	  "TabViewBox",
  	  "TabViewBoxOptions",
  	  "TagBox",
  	  "TagBoxNote",
  	  "TagBoxOptions",
  	  "TaggingRules",
  	  "TagSet",
  	  "TagSetDelayed",
  	  "TagStyle",
  	  "TagUnset",
  	  "Take",
  	  "TakeDrop",
  	  "TakeLargest",
  	  "TakeLargestBy",
  	  "TakeList",
  	  "TakeSmallest",
  	  "TakeSmallestBy",
  	  "TakeWhile",
  	  "Tally",
  	  "Tan",
  	  "Tanh",
  	  "TargetDevice",
  	  "TargetFunctions",
  	  "TargetSystem",
  	  "TargetUnits",
  	  "TaskAbort",
  	  "TaskExecute",
  	  "TaskObject",
  	  "TaskRemove",
  	  "TaskResume",
  	  "Tasks",
  	  "TaskSuspend",
  	  "TaskWait",
  	  "TautologyQ",
  	  "TelegraphProcess",
  	  "TemplateApply",
  	  "TemplateArgBox",
  	  "TemplateBox",
  	  "TemplateBoxOptions",
  	  "TemplateEvaluate",
  	  "TemplateExpression",
  	  "TemplateIf",
  	  "TemplateObject",
  	  "TemplateSequence",
  	  "TemplateSlot",
  	  "TemplateSlotSequence",
  	  "TemplateUnevaluated",
  	  "TemplateVerbatim",
  	  "TemplateWith",
  	  "TemporalData",
  	  "TemporalRegularity",
  	  "Temporary",
  	  "TemporaryVariable",
  	  "TensorContract",
  	  "TensorDimensions",
  	  "TensorExpand",
  	  "TensorProduct",
  	  "TensorQ",
  	  "TensorRank",
  	  "TensorReduce",
  	  "TensorSymmetry",
  	  "TensorTranspose",
  	  "TensorWedge",
  	  "TerminatedEvaluation",
  	  "TernaryListPlot",
  	  "TernaryPlotCorners",
  	  "TestID",
  	  "TestReport",
  	  "TestReportObject",
  	  "TestResultObject",
  	  "Tetrahedron",
  	  "TetrahedronBox",
  	  "TetrahedronBoxOptions",
  	  "TeXForm",
  	  "TeXSave",
  	  "Text",
  	  "Text3DBox",
  	  "Text3DBoxOptions",
  	  "TextAlignment",
  	  "TextBand",
  	  "TextBoundingBox",
  	  "TextBox",
  	  "TextCases",
  	  "TextCell",
  	  "TextClipboardType",
  	  "TextContents",
  	  "TextData",
  	  "TextElement",
  	  "TextForm",
  	  "TextGrid",
  	  "TextJustification",
  	  "TextLine",
  	  "TextPacket",
  	  "TextParagraph",
  	  "TextPosition",
  	  "TextRecognize",
  	  "TextSearch",
  	  "TextSearchReport",
  	  "TextSentences",
  	  "TextString",
  	  "TextStructure",
  	  "TextStyle",
  	  "TextTranslation",
  	  "Texture",
  	  "TextureCoordinateFunction",
  	  "TextureCoordinateScaling",
  	  "TextWords",
  	  "Therefore",
  	  "ThermodynamicData",
  	  "ThermometerGauge",
  	  "Thick",
  	  "Thickness",
  	  "Thin",
  	  "Thinning",
  	  "ThisLink",
  	  "ThomasPointProcess",
  	  "ThompsonGroupTh",
  	  "Thread",
  	  "Threaded",
  	  "ThreadingLayer",
  	  "ThreeJSymbol",
  	  "Threshold",
  	  "Through",
  	  "Throw",
  	  "ThueMorse",
  	  "Thumbnail",
  	  "Thursday",
  	  "TickDirection",
  	  "TickLabelOrientation",
  	  "TickLabelPositioning",
  	  "TickLabels",
  	  "TickLengths",
  	  "TickPositions",
  	  "Ticks",
  	  "TicksStyle",
  	  "TideData",
  	  "Tilde",
  	  "TildeEqual",
  	  "TildeFullEqual",
  	  "TildeTilde",
  	  "TimeConstrained",
  	  "TimeConstraint",
  	  "TimeDirection",
  	  "TimeFormat",
  	  "TimeGoal",
  	  "TimelinePlot",
  	  "TimeObject",
  	  "TimeObjectQ",
  	  "TimeRemaining",
  	  "Times",
  	  "TimesBy",
  	  "TimeSeries",
  	  "TimeSeriesAggregate",
  	  "TimeSeriesForecast",
  	  "TimeSeriesInsert",
  	  "TimeSeriesInvertibility",
  	  "TimeSeriesMap",
  	  "TimeSeriesMapThread",
  	  "TimeSeriesModel",
  	  "TimeSeriesModelFit",
  	  "TimeSeriesResample",
  	  "TimeSeriesRescale",
  	  "TimeSeriesShift",
  	  "TimeSeriesThread",
  	  "TimeSeriesWindow",
  	  "TimeSystem",
  	  "TimeSystemConvert",
  	  "TimeUsed",
  	  "TimeValue",
  	  "TimeWarpingCorrespondence",
  	  "TimeWarpingDistance",
  	  "TimeZone",
  	  "TimeZoneConvert",
  	  "TimeZoneOffset",
  	  "Timing",
  	  "Tiny",
  	  "TitleGrouping",
  	  "TitsGroupT",
  	  "ToBoxes",
  	  "ToCharacterCode",
  	  "ToColor",
  	  "ToContinuousTimeModel",
  	  "ToDate",
  	  "Today",
  	  "ToDiscreteTimeModel",
  	  "ToEntity",
  	  "ToeplitzMatrix",
  	  "ToExpression",
  	  "ToFileName",
  	  "Together",
  	  "Toggle",
  	  "ToggleFalse",
  	  "Toggler",
  	  "TogglerBar",
  	  "TogglerBox",
  	  "TogglerBoxOptions",
  	  "ToHeldExpression",
  	  "ToInvertibleTimeSeries",
  	  "TokenWords",
  	  "Tolerance",
  	  "ToLowerCase",
  	  "Tomorrow",
  	  "ToNumberField",
  	  "TooBig",
  	  "Tooltip",
  	  "TooltipBox",
  	  "TooltipBoxOptions",
  	  "TooltipDelay",
  	  "TooltipStyle",
  	  "ToonShading",
  	  "Top",
  	  "TopHatTransform",
  	  "ToPolarCoordinates",
  	  "TopologicalSort",
  	  "ToRadicals",
  	  "ToRawPointer",
  	  "ToRules",
  	  "Torus",
  	  "TorusGraph",
  	  "ToSphericalCoordinates",
  	  "ToString",
  	  "Total",
  	  "TotalHeight",
  	  "TotalLayer",
  	  "TotalVariationFilter",
  	  "TotalWidth",
  	  "TouchPosition",
  	  "TouchscreenAutoZoom",
  	  "TouchscreenControlPlacement",
  	  "ToUpperCase",
  	  "TourVideo",
  	  "Tr",
  	  "Trace",
  	  "TraceAbove",
  	  "TraceAction",
  	  "TraceBackward",
  	  "TraceDepth",
  	  "TraceDialog",
  	  "TraceForward",
  	  "TraceInternal",
  	  "TraceLevel",
  	  "TraceOff",
  	  "TraceOn",
  	  "TraceOriginal",
  	  "TracePrint",
  	  "TraceScan",
  	  "TrackCellChangeTimes",
  	  "TrackedSymbols",
  	  "TrackingFunction",
  	  "TracyWidomDistribution",
  	  "TradingChart",
  	  "TraditionalForm",
  	  "TraditionalFunctionNotation",
  	  "TraditionalNotation",
  	  "TraditionalOrder",
  	  "TrainImageContentDetector",
  	  "TrainingProgressCheckpointing",
  	  "TrainingProgressFunction",
  	  "TrainingProgressMeasurements",
  	  "TrainingProgressReporting",
  	  "TrainingStoppingCriterion",
  	  "TrainingUpdateSchedule",
  	  "TrainTextContentDetector",
  	  "TransferFunctionCancel",
  	  "TransferFunctionExpand",
  	  "TransferFunctionFactor",
  	  "TransferFunctionModel",
  	  "TransferFunctionPoles",
  	  "TransferFunctionTransform",
  	  "TransferFunctionZeros",
  	  "TransformationClass",
  	  "TransformationFunction",
  	  "TransformationFunctions",
  	  "TransformationMatrix",
  	  "TransformedDistribution",
  	  "TransformedField",
  	  "TransformedProcess",
  	  "TransformedRegion",
  	  "TransitionDirection",
  	  "TransitionDuration",
  	  "TransitionEffect",
  	  "TransitiveClosureGraph",
  	  "TransitiveReductionGraph",
  	  "Translate",
  	  "TranslationOptions",
  	  "TranslationTransform",
  	  "Transliterate",
  	  "Transparent",
  	  "TransparentColor",
  	  "Transpose",
  	  "TransposeLayer",
  	  "TrapEnterKey",
  	  "TrapSelection",
  	  "TravelDirections",
  	  "TravelDirectionsData",
  	  "TravelDistance",
  	  "TravelDistanceList",
  	  "TravelMethod",
  	  "TravelTime",
  	  "Tree",
  	  "TreeCases",
  	  "TreeChildren",
  	  "TreeCount",
  	  "TreeData",
  	  "TreeDelete",
  	  "TreeDepth",
  	  "TreeElementCoordinates",
  	  "TreeElementLabel",
  	  "TreeElementLabelFunction",
  	  "TreeElementLabelStyle",
  	  "TreeElementShape",
  	  "TreeElementShapeFunction",
  	  "TreeElementSize",
  	  "TreeElementSizeFunction",
  	  "TreeElementStyle",
  	  "TreeElementStyleFunction",
  	  "TreeExpression",
  	  "TreeExtract",
  	  "TreeFold",
  	  "TreeForm",
  	  "TreeGraph",
  	  "TreeGraphQ",
  	  "TreeInsert",
  	  "TreeLayout",
  	  "TreeLeafCount",
  	  "TreeLeafQ",
  	  "TreeLeaves",
  	  "TreeLevel",
  	  "TreeMap",
  	  "TreeMapAt",
  	  "TreeOutline",
  	  "TreePlot",
  	  "TreePosition",
  	  "TreeQ",
  	  "TreeReplacePart",
  	  "TreeRules",
  	  "TreeScan",
  	  "TreeSelect",
  	  "TreeSize",
  	  "TreeTraversalOrder",
  	  "TrendStyle",
  	  "Triangle",
  	  "TriangleCenter",
  	  "TriangleConstruct",
  	  "TriangleMeasurement",
  	  "TriangleWave",
  	  "TriangularDistribution",
  	  "TriangulateMesh",
  	  "Trig",
  	  "TrigExpand",
  	  "TrigFactor",
  	  "TrigFactorList",
  	  "Trigger",
  	  "TrigReduce",
  	  "TrigToExp",
  	  "TrimmedMean",
  	  "TrimmedVariance",
  	  "TropicalStormData",
  	  "True",
  	  "TrueQ",
  	  "TruncatedDistribution",
  	  "TruncatedPolyhedron",
  	  "TsallisQExponentialDistribution",
  	  "TsallisQGaussianDistribution",
  	  "TTest",
  	  "Tube",
  	  "TubeBezierCurveBox",
  	  "TubeBezierCurveBoxOptions",
  	  "TubeBox",
  	  "TubeBoxOptions",
  	  "TubeBSplineCurveBox",
  	  "TubeBSplineCurveBoxOptions",
  	  "Tuesday",
  	  "TukeyLambdaDistribution",
  	  "TukeyWindow",
  	  "TunnelData",
  	  "Tuples",
  	  "TuranGraph",
  	  "TuringMachine",
  	  "TuttePolynomial",
  	  "TwoWayRule",
  	  "Typed",
  	  "TypeDeclaration",
  	  "TypeEvaluate",
  	  "TypeHint",
  	  "TypeOf",
  	  "TypeSpecifier",
  	  "UnateQ",
  	  "Uncompress",
  	  "UnconstrainedParameters",
  	  "Undefined",
  	  "UnderBar",
  	  "Underflow",
  	  "Underlined",
  	  "Underoverscript",
  	  "UnderoverscriptBox",
  	  "UnderoverscriptBoxOptions",
  	  "Underscript",
  	  "UnderscriptBox",
  	  "UnderscriptBoxOptions",
  	  "UnderseaFeatureData",
  	  "UndirectedEdge",
  	  "UndirectedGraph",
  	  "UndirectedGraphQ",
  	  "UndoOptions",
  	  "UndoTrackedVariables",
  	  "Unequal",
  	  "UnequalTo",
  	  "Unevaluated",
  	  "UniformDistribution",
  	  "UniformGraphDistribution",
  	  "UniformPolyhedron",
  	  "UniformSumDistribution",
  	  "Uninstall",
  	  "Union",
  	  "UnionedEntityClass",
  	  "UnionPlus",
  	  "Unique",
  	  "UniqueElements",
  	  "UnitaryMatrixQ",
  	  "UnitBox",
  	  "UnitConvert",
  	  "UnitDimensions",
  	  "Unitize",
  	  "UnitRootTest",
  	  "UnitSimplify",
  	  "UnitStep",
  	  "UnitSystem",
  	  "UnitTriangle",
  	  "UnitVector",
  	  "UnitVectorLayer",
  	  "UnityDimensions",
  	  "UniverseModelData",
  	  "UniversityData",
  	  "UnixTime",
  	  "UnlabeledTree",
  	  "UnmanageObject",
  	  "Unprotect",
  	  "UnregisterExternalEvaluator",
  	  "UnsameQ",
  	  "UnsavedVariables",
  	  "Unset",
  	  "UnsetShared",
  	  "Until",
  	  "UntrackedVariables",
  	  "Up",
  	  "UpArrow",
  	  "UpArrowBar",
  	  "UpArrowDownArrow",
  	  "Update",
  	  "UpdateDynamicObjects",
  	  "UpdateDynamicObjectsSynchronous",
  	  "UpdateInterval",
  	  "UpdatePacletSites",
  	  "UpdateSearchIndex",
  	  "UpDownArrow",
  	  "UpEquilibrium",
  	  "UpperCaseQ",
  	  "UpperLeftArrow",
  	  "UpperRightArrow",
  	  "UpperTriangularize",
  	  "UpperTriangularMatrix",
  	  "UpperTriangularMatrixQ",
  	  "Upsample",
  	  "UpSet",
  	  "UpSetDelayed",
  	  "UpTee",
  	  "UpTeeArrow",
  	  "UpTo",
  	  "UpValues",
  	  "URL",
  	  "URLBuild",
  	  "URLDecode",
  	  "URLDispatcher",
  	  "URLDownload",
  	  "URLDownloadSubmit",
  	  "URLEncode",
  	  "URLExecute",
  	  "URLExpand",
  	  "URLFetch",
  	  "URLFetchAsynchronous",
  	  "URLParse",
  	  "URLQueryDecode",
  	  "URLQueryEncode",
  	  "URLRead",
  	  "URLResponseTime",
  	  "URLSave",
  	  "URLSaveAsynchronous",
  	  "URLShorten",
  	  "URLSubmit",
  	  "UseEmbeddedLibrary",
  	  "UseGraphicsRange",
  	  "UserDefinedWavelet",
  	  "Using",
  	  "UsingFrontEnd",
  	  "UtilityFunction",
  	  "V2Get",
  	  "ValenceErrorHandling",
  	  "ValenceFilling",
  	  "ValidationLength",
  	  "ValidationSet",
  	  "ValueBox",
  	  "ValueBoxOptions",
  	  "ValueDimensions",
  	  "ValueForm",
  	  "ValuePreprocessingFunction",
  	  "ValueQ",
  	  "Values",
  	  "ValuesData",
  	  "VandermondeMatrix",
  	  "Variables",
  	  "Variance",
  	  "VarianceEquivalenceTest",
  	  "VarianceEstimatorFunction",
  	  "VarianceGammaDistribution",
  	  "VarianceGammaPointProcess",
  	  "VarianceTest",
  	  "VariogramFunction",
  	  "VariogramModel",
  	  "VectorAngle",
  	  "VectorAround",
  	  "VectorAspectRatio",
  	  "VectorColorFunction",
  	  "VectorColorFunctionScaling",
  	  "VectorDensityPlot",
  	  "VectorDisplacementPlot",
  	  "VectorDisplacementPlot3D",
  	  "VectorGlyphData",
  	  "VectorGreater",
  	  "VectorGreaterEqual",
  	  "VectorLess",
  	  "VectorLessEqual",
  	  "VectorMarkers",
  	  "VectorPlot",
  	  "VectorPlot3D",
  	  "VectorPoints",
  	  "VectorQ",
  	  "VectorRange",
  	  "Vectors",
  	  "VectorScale",
  	  "VectorScaling",
  	  "VectorSizes",
  	  "VectorStyle",
  	  "Vee",
  	  "Verbatim",
  	  "Verbose",
  	  "VerificationTest",
  	  "VerifyConvergence",
  	  "VerifyDerivedKey",
  	  "VerifyDigitalSignature",
  	  "VerifyFileSignature",
  	  "VerifyInterpretation",
  	  "VerifySecurityCertificates",
  	  "VerifySolutions",
  	  "VerifyTestAssumptions",
  	  "VersionedPreferences",
  	  "VertexAdd",
  	  "VertexCapacity",
  	  "VertexChromaticNumber",
  	  "VertexColors",
  	  "VertexComponent",
  	  "VertexConnectivity",
  	  "VertexContract",
  	  "VertexCoordinateRules",
  	  "VertexCoordinates",
  	  "VertexCorrelationSimilarity",
  	  "VertexCosineSimilarity",
  	  "VertexCount",
  	  "VertexCoverQ",
  	  "VertexDataCoordinates",
  	  "VertexDegree",
  	  "VertexDelete",
  	  "VertexDiceSimilarity",
  	  "VertexEccentricity",
  	  "VertexInComponent",
  	  "VertexInComponentGraph",
  	  "VertexInDegree",
  	  "VertexIndex",
  	  "VertexJaccardSimilarity",
  	  "VertexLabeling",
  	  "VertexLabels",
  	  "VertexLabelStyle",
  	  "VertexList",
  	  "VertexNormals",
  	  "VertexOutComponent",
  	  "VertexOutComponentGraph",
  	  "VertexOutDegree",
  	  "VertexQ",
  	  "VertexRenderingFunction",
  	  "VertexReplace",
  	  "VertexShape",
  	  "VertexShapeFunction",
  	  "VertexSize",
  	  "VertexStyle",
  	  "VertexTextureCoordinates",
  	  "VertexTransitiveGraphQ",
  	  "VertexWeight",
  	  "VertexWeightedGraphQ",
  	  "Vertical",
  	  "VerticalBar",
  	  "VerticalForm",
  	  "VerticalGauge",
  	  "VerticalSeparator",
  	  "VerticalSlider",
  	  "VerticalTilde",
  	  "Video",
  	  "VideoCapture",
  	  "VideoCombine",
  	  "VideoDelete",
  	  "VideoEncoding",
  	  "VideoExtractFrames",
  	  "VideoFrameList",
  	  "VideoFrameMap",
  	  "VideoGenerator",
  	  "VideoInsert",
  	  "VideoIntervals",
  	  "VideoJoin",
  	  "VideoMap",
  	  "VideoMapList",
  	  "VideoMapTimeSeries",
  	  "VideoPadding",
  	  "VideoPause",
  	  "VideoPlay",
  	  "VideoQ",
  	  "VideoRecord",
  	  "VideoReplace",
  	  "VideoScreenCapture",
  	  "VideoSplit",
  	  "VideoStop",
  	  "VideoStream",
  	  "VideoStreams",
  	  "VideoTimeStretch",
  	  "VideoTrackSelection",
  	  "VideoTranscode",
  	  "VideoTransparency",
  	  "VideoTrim",
  	  "ViewAngle",
  	  "ViewCenter",
  	  "ViewMatrix",
  	  "ViewPoint",
  	  "ViewPointSelectorSettings",
  	  "ViewPort",
  	  "ViewProjection",
  	  "ViewRange",
  	  "ViewVector",
  	  "ViewVertical",
  	  "VirtualGroupData",
  	  "Visible",
  	  "VisibleCell",
  	  "VoiceStyleData",
  	  "VoigtDistribution",
  	  "VolcanoData",
  	  "Volume",
  	  "VonMisesDistribution",
  	  "VoronoiMesh",
  	  "WaitAll",
  	  "WaitAsynchronousTask",
  	  "WaitNext",
  	  "WaitUntil",
  	  "WakebyDistribution",
  	  "WalleniusHypergeometricDistribution",
  	  "WaringYuleDistribution",
  	  "WarpingCorrespondence",
  	  "WarpingDistance",
  	  "WatershedComponents",
  	  "WatsonUSquareTest",
  	  "WattsStrogatzGraphDistribution",
  	  "WaveletBestBasis",
  	  "WaveletFilterCoefficients",
  	  "WaveletImagePlot",
  	  "WaveletListPlot",
  	  "WaveletMapIndexed",
  	  "WaveletMatrixPlot",
  	  "WaveletPhi",
  	  "WaveletPsi",
  	  "WaveletScale",
  	  "WaveletScalogram",
  	  "WaveletThreshold",
  	  "WavePDEComponent",
  	  "WeaklyConnectedComponents",
  	  "WeaklyConnectedGraphComponents",
  	  "WeaklyConnectedGraphQ",
  	  "WeakStationarity",
  	  "WeatherData",
  	  "WeatherForecastData",
  	  "WebAudioSearch",
  	  "WebColumn",
  	  "WebElementObject",
  	  "WeberE",
  	  "WebExecute",
  	  "WebImage",
  	  "WebImageSearch",
  	  "WebItem",
  	  "WebPageMetaInformation",
  	  "WebRow",
  	  "WebSearch",
  	  "WebSessionObject",
  	  "WebSessions",
  	  "WebWindowObject",
  	  "Wedge",
  	  "Wednesday",
  	  "WeibullDistribution",
  	  "WeierstrassE1",
  	  "WeierstrassE2",
  	  "WeierstrassE3",
  	  "WeierstrassEta1",
  	  "WeierstrassEta2",
  	  "WeierstrassEta3",
  	  "WeierstrassHalfPeriods",
  	  "WeierstrassHalfPeriodW1",
  	  "WeierstrassHalfPeriodW2",
  	  "WeierstrassHalfPeriodW3",
  	  "WeierstrassInvariantG2",
  	  "WeierstrassInvariantG3",
  	  "WeierstrassInvariants",
  	  "WeierstrassP",
  	  "WeierstrassPPrime",
  	  "WeierstrassSigma",
  	  "WeierstrassZeta",
  	  "WeightedAdjacencyGraph",
  	  "WeightedAdjacencyMatrix",
  	  "WeightedData",
  	  "WeightedGraphQ",
  	  "Weights",
  	  "WelchWindow",
  	  "WheelGraph",
  	  "WhenEvent",
  	  "Which",
  	  "While",
  	  "White",
  	  "WhiteNoiseProcess",
  	  "WhitePoint",
  	  "Whitespace",
  	  "WhitespaceCharacter",
  	  "WhittakerM",
  	  "WhittakerW",
  	  "WholeCellGroupOpener",
  	  "WienerFilter",
  	  "WienerProcess",
  	  "WignerD",
  	  "WignerSemicircleDistribution",
  	  "WikidataData",
  	  "WikidataSearch",
  	  "WikipediaData",
  	  "WikipediaSearch",
  	  "WilksW",
  	  "WilksWTest",
  	  "WindDirectionData",
  	  "WindingCount",
  	  "WindingPolygon",
  	  "WindowClickSelect",
  	  "WindowElements",
  	  "WindowFloating",
  	  "WindowFrame",
  	  "WindowFrameElements",
  	  "WindowMargins",
  	  "WindowMovable",
  	  "WindowOpacity",
  	  "WindowPersistentStyles",
  	  "WindowSelected",
  	  "WindowSize",
  	  "WindowStatusArea",
  	  "WindowTitle",
  	  "WindowToolbars",
  	  "WindowWidth",
  	  "WindSpeedData",
  	  "WindVectorData",
  	  "WinsorizedMean",
  	  "WinsorizedVariance",
  	  "WishartMatrixDistribution",
  	  "With",
  	  "WithCleanup",
  	  "WithLock",
  	  "WolframAlpha",
  	  "WolframAlphaDate",
  	  "WolframAlphaQuantity",
  	  "WolframAlphaResult",
  	  "WolframCloudSettings",
  	  "WolframLanguageData",
  	  "Word",
  	  "WordBoundary",
  	  "WordCharacter",
  	  "WordCloud",
  	  "WordCount",
  	  "WordCounts",
  	  "WordData",
  	  "WordDefinition",
  	  "WordFrequency",
  	  "WordFrequencyData",
  	  "WordList",
  	  "WordOrientation",
  	  "WordSearch",
  	  "WordSelectionFunction",
  	  "WordSeparators",
  	  "WordSpacings",
  	  "WordStem",
  	  "WordTranslation",
  	  "WorkingPrecision",
  	  "WrapAround",
  	  "Write",
  	  "WriteLine",
  	  "WriteString",
  	  "Wronskian",
  	  "XMLElement",
  	  "XMLObject",
  	  "XMLTemplate",
  	  "Xnor",
  	  "Xor",
  	  "XYZColor",
  	  "Yellow",
  	  "Yesterday",
  	  "YuleDissimilarity",
  	  "ZernikeR",
  	  "ZeroSymmetric",
  	  "ZeroTest",
  	  "ZeroWidthTimes",
  	  "Zeta",
  	  "ZetaZero",
  	  "ZIPCodeData",
  	  "ZipfDistribution",
  	  "ZoomCenter",
  	  "ZoomFactor",
  	  "ZTest",
  	  "ZTransform",
  	  "$Aborted",
  	  "$ActivationGroupID",
  	  "$ActivationKey",
  	  "$ActivationUserRegistered",
  	  "$AddOnsDirectory",
  	  "$AllowDataUpdates",
  	  "$AllowExternalChannelFunctions",
  	  "$AllowInternet",
  	  "$AssertFunction",
  	  "$Assumptions",
  	  "$AsynchronousTask",
  	  "$AudioDecoders",
  	  "$AudioEncoders",
  	  "$AudioInputDevices",
  	  "$AudioOutputDevices",
  	  "$BaseDirectory",
  	  "$BasePacletsDirectory",
  	  "$BatchInput",
  	  "$BatchOutput",
  	  "$BlockchainBase",
  	  "$BoxForms",
  	  "$ByteOrdering",
  	  "$CacheBaseDirectory",
  	  "$Canceled",
  	  "$ChannelBase",
  	  "$CharacterEncoding",
  	  "$CharacterEncodings",
  	  "$CloudAccountName",
  	  "$CloudBase",
  	  "$CloudConnected",
  	  "$CloudConnection",
  	  "$CloudCreditsAvailable",
  	  "$CloudEvaluation",
  	  "$CloudExpressionBase",
  	  "$CloudObjectNameFormat",
  	  "$CloudObjectURLType",
  	  "$CloudRootDirectory",
  	  "$CloudSymbolBase",
  	  "$CloudUserID",
  	  "$CloudUserUUID",
  	  "$CloudVersion",
  	  "$CloudVersionNumber",
  	  "$CloudWolframEngineVersionNumber",
  	  "$CommandLine",
  	  "$CompilationTarget",
  	  "$CompilerEnvironment",
  	  "$ConditionHold",
  	  "$ConfiguredKernels",
  	  "$Context",
  	  "$ContextAliases",
  	  "$ContextPath",
  	  "$ControlActiveSetting",
  	  "$Cookies",
  	  "$CookieStore",
  	  "$CreationDate",
  	  "$CryptographicEllipticCurveNames",
  	  "$CurrentLink",
  	  "$CurrentTask",
  	  "$CurrentWebSession",
  	  "$DataStructures",
  	  "$DateStringFormat",
  	  "$DefaultAudioInputDevice",
  	  "$DefaultAudioOutputDevice",
  	  "$DefaultFont",
  	  "$DefaultFrontEnd",
  	  "$DefaultImagingDevice",
  	  "$DefaultKernels",
  	  "$DefaultLocalBase",
  	  "$DefaultLocalKernel",
  	  "$DefaultMailbox",
  	  "$DefaultNetworkInterface",
  	  "$DefaultPath",
  	  "$DefaultProxyRules",
  	  "$DefaultRemoteBatchSubmissionEnvironment",
  	  "$DefaultRemoteKernel",
  	  "$DefaultSystemCredentialStore",
  	  "$Display",
  	  "$DisplayFunction",
  	  "$DistributedContexts",
  	  "$DynamicEvaluation",
  	  "$Echo",
  	  "$EmbedCodeEnvironments",
  	  "$EmbeddableServices",
  	  "$EntityStores",
  	  "$Epilog",
  	  "$EvaluationCloudBase",
  	  "$EvaluationCloudObject",
  	  "$EvaluationEnvironment",
  	  "$ExportFormats",
  	  "$ExternalIdentifierTypes",
  	  "$ExternalStorageBase",
  	  "$Failed",
  	  "$FinancialDataSource",
  	  "$FontFamilies",
  	  "$FormatType",
  	  "$FrontEnd",
  	  "$FrontEndSession",
  	  "$GeneratedAssetLocation",
  	  "$GeoEntityTypes",
  	  "$GeoLocation",
  	  "$GeoLocationCity",
  	  "$GeoLocationCountry",
  	  "$GeoLocationPrecision",
  	  "$GeoLocationSource",
  	  "$HistoryLength",
  	  "$HomeDirectory",
  	  "$HTMLExportRules",
  	  "$HTTPCookies",
  	  "$HTTPRequest",
  	  "$IgnoreEOF",
  	  "$ImageFormattingWidth",
  	  "$ImageResolution",
  	  "$ImagingDevice",
  	  "$ImagingDevices",
  	  "$ImportFormats",
  	  "$IncomingMailSettings",
  	  "$InitialDirectory",
  	  "$Initialization",
  	  "$InitializationContexts",
  	  "$Input",
  	  "$InputFileName",
  	  "$InputStreamMethods",
  	  "$Inspector",
  	  "$InstallationDate",
  	  "$InstallationDirectory",
  	  "$InterfaceEnvironment",
  	  "$InterpreterTypes",
  	  "$IterationLimit",
  	  "$KernelCount",
  	  "$KernelID",
  	  "$Language",
  	  "$LaunchDirectory",
  	  "$LibraryPath",
  	  "$LicenseExpirationDate",
  	  "$LicenseID",
  	  "$LicenseProcesses",
  	  "$LicenseServer",
  	  "$LicenseSubprocesses",
  	  "$LicenseType",
  	  "$Line",
  	  "$Linked",
  	  "$LinkSupported",
  	  "$LoadedFiles",
  	  "$LocalBase",
  	  "$LocalSymbolBase",
  	  "$MachineAddresses",
  	  "$MachineDomain",
  	  "$MachineDomains",
  	  "$MachineEpsilon",
  	  "$MachineID",
  	  "$MachineName",
  	  "$MachinePrecision",
  	  "$MachineType",
  	  "$MaxDisplayedChildren",
  	  "$MaxExtraPrecision",
  	  "$MaxLicenseProcesses",
  	  "$MaxLicenseSubprocesses",
  	  "$MaxMachineNumber",
  	  "$MaxNumber",
  	  "$MaxPiecewiseCases",
  	  "$MaxPrecision",
  	  "$MaxRootDegree",
  	  "$MessageGroups",
  	  "$MessageList",
  	  "$MessagePrePrint",
  	  "$Messages",
  	  "$MinMachineNumber",
  	  "$MinNumber",
  	  "$MinorReleaseNumber",
  	  "$MinPrecision",
  	  "$MobilePhone",
  	  "$ModuleNumber",
  	  "$NetworkConnected",
  	  "$NetworkInterfaces",
  	  "$NetworkLicense",
  	  "$NewMessage",
  	  "$NewSymbol",
  	  "$NotebookInlineStorageLimit",
  	  "$Notebooks",
  	  "$NoValue",
  	  "$NumberMarks",
  	  "$Off",
  	  "$OperatingSystem",
  	  "$Output",
  	  "$OutputForms",
  	  "$OutputSizeLimit",
  	  "$OutputStreamMethods",
  	  "$Packages",
  	  "$ParentLink",
  	  "$ParentProcessID",
  	  "$PasswordFile",
  	  "$PatchLevelID",
  	  "$Path",
  	  "$PathnameSeparator",
  	  "$PerformanceGoal",
  	  "$Permissions",
  	  "$PermissionsGroupBase",
  	  "$PersistenceBase",
  	  "$PersistencePath",
  	  "$PipeSupported",
  	  "$PlotTheme",
  	  "$Post",
  	  "$Pre",
  	  "$PreferencesDirectory",
  	  "$PreInitialization",
  	  "$PrePrint",
  	  "$PreRead",
  	  "$PrintForms",
  	  "$PrintLiteral",
  	  "$Printout3DPreviewer",
  	  "$ProcessID",
  	  "$ProcessorCount",
  	  "$ProcessorType",
  	  "$ProductInformation",
  	  "$ProgramName",
  	  "$ProgressReporting",
  	  "$PublisherID",
  	  "$RandomGeneratorState",
  	  "$RandomState",
  	  "$RecursionLimit",
  	  "$RegisteredDeviceClasses",
  	  "$RegisteredUserName",
  	  "$ReleaseNumber",
  	  "$RequesterAddress",
  	  "$RequesterCloudUserID",
  	  "$RequesterCloudUserUUID",
  	  "$RequesterWolframID",
  	  "$RequesterWolframUUID",
  	  "$ResourceSystemBase",
  	  "$ResourceSystemPath",
  	  "$RootDirectory",
  	  "$ScheduledTask",
  	  "$ScriptCommandLine",
  	  "$ScriptInputString",
  	  "$SecuredAuthenticationKeyTokens",
  	  "$ServiceCreditsAvailable",
  	  "$Services",
  	  "$SessionID",
  	  "$SetParentLink",
  	  "$SharedFunctions",
  	  "$SharedVariables",
  	  "$SoundDisplay",
  	  "$SoundDisplayFunction",
  	  "$SourceLink",
  	  "$SSHAuthentication",
  	  "$SubtitleDecoders",
  	  "$SubtitleEncoders",
  	  "$SummaryBoxDataSizeLimit",
  	  "$SuppressInputFormHeads",
  	  "$SynchronousEvaluation",
  	  "$SyntaxHandler",
  	  "$System",
  	  "$SystemCharacterEncoding",
  	  "$SystemCredentialStore",
  	  "$SystemID",
  	  "$SystemMemory",
  	  "$SystemShell",
  	  "$SystemTimeZone",
  	  "$SystemWordLength",
  	  "$TargetSystems",
  	  "$TemplatePath",
  	  "$TemporaryDirectory",
  	  "$TemporaryPrefix",
  	  "$TestFileName",
  	  "$TextStyle",
  	  "$TimedOut",
  	  "$TimeUnit",
  	  "$TimeZone",
  	  "$TimeZoneEntity",
  	  "$TopDirectory",
  	  "$TraceOff",
  	  "$TraceOn",
  	  "$TracePattern",
  	  "$TracePostAction",
  	  "$TracePreAction",
  	  "$UnitSystem",
  	  "$Urgent",
  	  "$UserAddOnsDirectory",
  	  "$UserAgentLanguages",
  	  "$UserAgentMachine",
  	  "$UserAgentName",
  	  "$UserAgentOperatingSystem",
  	  "$UserAgentString",
  	  "$UserAgentVersion",
  	  "$UserBaseDirectory",
  	  "$UserBasePacletsDirectory",
  	  "$UserDocumentsDirectory",
  	  "$Username",
  	  "$UserName",
  	  "$UserURLBase",
  	  "$Version",
  	  "$VersionNumber",
  	  "$VideoDecoders",
  	  "$VideoEncoders",
  	  "$VoiceStyles",
  	  "$WolframDocumentsDirectory",
  	  "$WolframID",
  	  "$WolframUUID"
  	];

  	/*
  	Language: Wolfram Language
  	Description: The Wolfram Language is the programming language used in Wolfram Mathematica, a modern technical computing system spanning most areas of technical computing.
  	Authors: Patrick Scheibe <patrick@halirutan.de>, Robert Jacobson <robertjacobson@acm.org>
  	Website: https://www.wolfram.com/mathematica/
  	Category: scientific
  	*/

  	/** @type LanguageFn */
  	function mathematica(hljs) {
  	  const regex = hljs.regex;
  	  /*
  	  This rather scary looking matching of Mathematica numbers is carefully explained by Robert Jacobson here:
  	  https://wltools.github.io/LanguageSpec/Specification/Syntax/Number-representations/
  	   */
  	  const BASE_RE = /([2-9]|[1-2]\d|[3][0-5])\^\^/;
  	  const BASE_DIGITS_RE = /(\w*\.\w+|\w+\.\w*|\w+)/;
  	  const NUMBER_RE = /(\d*\.\d+|\d+\.\d*|\d+)/;
  	  const BASE_NUMBER_RE = regex.either(regex.concat(BASE_RE, BASE_DIGITS_RE), NUMBER_RE);

  	  const ACCURACY_RE = /``[+-]?(\d*\.\d+|\d+\.\d*|\d+)/;
  	  const PRECISION_RE = /`([+-]?(\d*\.\d+|\d+\.\d*|\d+))?/;
  	  const APPROXIMATE_NUMBER_RE = regex.either(ACCURACY_RE, PRECISION_RE);

  	  const SCIENTIFIC_NOTATION_RE = /\*\^[+-]?\d+/;

  	  const MATHEMATICA_NUMBER_RE = regex.concat(
  	    BASE_NUMBER_RE,
  	    regex.optional(APPROXIMATE_NUMBER_RE),
  	    regex.optional(SCIENTIFIC_NOTATION_RE)
  	  );

  	  const NUMBERS = {
  	    className: 'number',
  	    relevance: 0,
  	    begin: MATHEMATICA_NUMBER_RE
  	  };

  	  const SYMBOL_RE = /[a-zA-Z$][a-zA-Z0-9$]*/;
  	  const SYSTEM_SYMBOLS_SET = new Set(SYSTEM_SYMBOLS);
  	  /** @type {Mode} */
  	  const SYMBOLS = { variants: [
  	    {
  	      className: 'builtin-symbol',
  	      begin: SYMBOL_RE,
  	      // for performance out of fear of regex.either(...Mathematica.SYSTEM_SYMBOLS)
  	      "on:begin": (match, response) => {
  	        if (!SYSTEM_SYMBOLS_SET.has(match[0])) response.ignoreMatch();
  	      }
  	    },
  	    {
  	      className: 'symbol',
  	      relevance: 0,
  	      begin: SYMBOL_RE
  	    }
  	  ] };

  	  const NAMED_CHARACTER = {
  	    className: 'named-character',
  	    begin: /\\\[[$a-zA-Z][$a-zA-Z0-9]+\]/
  	  };

  	  const OPERATORS = {
  	    className: 'operator',
  	    relevance: 0,
  	    begin: /[+\-*/,;.:@~=><&|_`'^?!%]+/
  	  };
  	  const PATTERNS = {
  	    className: 'pattern',
  	    relevance: 0,
  	    begin: /([a-zA-Z$][a-zA-Z0-9$]*)?_+([a-zA-Z$][a-zA-Z0-9$]*)?/
  	  };

  	  const SLOTS = {
  	    className: 'slot',
  	    relevance: 0,
  	    begin: /#[a-zA-Z$][a-zA-Z0-9$]*|#+[0-9]?/
  	  };

  	  const BRACES = {
  	    className: 'brace',
  	    relevance: 0,
  	    begin: /[[\](){}]/
  	  };

  	  const MESSAGES = {
  	    className: 'message-name',
  	    relevance: 0,
  	    begin: regex.concat("::", SYMBOL_RE)
  	  };

  	  return {
  	    name: 'Mathematica',
  	    aliases: [
  	      'mma',
  	      'wl'
  	    ],
  	    classNameAliases: {
  	      brace: 'punctuation',
  	      pattern: 'type',
  	      slot: 'type',
  	      symbol: 'variable',
  	      'named-character': 'variable',
  	      'builtin-symbol': 'built_in',
  	      'message-name': 'string'
  	    },
  	    contains: [
  	      hljs.COMMENT(/\(\*/, /\*\)/, { contains: [ 'self' ] }),
  	      PATTERNS,
  	      SLOTS,
  	      MESSAGES,
  	      SYMBOLS,
  	      NAMED_CHARACTER,
  	      hljs.QUOTE_STRING_MODE,
  	      NUMBERS,
  	      OPERATORS,
  	      BRACES
  	    ]
  	  };
  	}

  	mathematica_1 = mathematica;
  	return mathematica_1;
  }

  /*
  Language: Matlab
  Author: Denis Bardadym <bardadymchik@gmail.com>
  Contributors: Eugene Nizhibitsky <nizhibitsky@ya.ru>, Egor Rogov <e.rogov@postgrespro.ru>
  Website: https://www.mathworks.com/products/matlab.html
  Category: scientific
  */

  var matlab_1;
  var hasRequiredMatlab;

  function requireMatlab () {
  	if (hasRequiredMatlab) return matlab_1;
  	hasRequiredMatlab = 1;
  	/*
  	  Formal syntax is not published, helpful link:
  	  https://github.com/kornilova-l/matlab-IntelliJ-plugin/blob/master/src/main/grammar/Matlab.bnf
  	*/
  	function matlab(hljs) {
  	  const TRANSPOSE_RE = '(\'|\\.\')+';
  	  const TRANSPOSE = {
  	    relevance: 0,
  	    contains: [ { begin: TRANSPOSE_RE } ]
  	  };

  	  return {
  	    name: 'Matlab',
  	    keywords: {
  	      keyword:
  	        'arguments break case catch classdef continue else elseif end enumeration events for function '
  	        + 'global if methods otherwise parfor persistent properties return spmd switch try while',
  	      built_in:
  	        'sin sind sinh asin asind asinh cos cosd cosh acos acosd acosh tan tand tanh atan '
  	        + 'atand atan2 atanh sec secd sech asec asecd asech csc cscd csch acsc acscd acsch cot '
  	        + 'cotd coth acot acotd acoth hypot exp expm1 log log1p log10 log2 pow2 realpow reallog '
  	        + 'realsqrt sqrt nthroot nextpow2 abs angle complex conj imag real unwrap isreal '
  	        + 'cplxpair fix floor ceil round mod rem sign airy besselj bessely besselh besseli '
  	        + 'besselk beta betainc betaln ellipj ellipke erf erfc erfcx erfinv expint gamma '
  	        + 'gammainc gammaln psi legendre cross dot factor isprime primes gcd lcm rat rats perms '
  	        + 'nchoosek factorial cart2sph cart2pol pol2cart sph2cart hsv2rgb rgb2hsv zeros ones '
  	        + 'eye repmat rand randn linspace logspace freqspace meshgrid accumarray size length '
  	        + 'ndims numel disp isempty isequal isequalwithequalnans cat reshape diag blkdiag tril '
  	        + 'triu fliplr flipud flipdim rot90 find sub2ind ind2sub bsxfun ndgrid permute ipermute '
  	        + 'shiftdim circshift squeeze isscalar isvector ans eps realmax realmin pi i|0 inf nan '
  	        + 'isnan isinf isfinite j|0 why compan gallery hadamard hankel hilb invhilb magic pascal '
  	        + 'rosser toeplitz vander wilkinson max min nanmax nanmin mean nanmean type table '
  	        + 'readtable writetable sortrows sort figure plot plot3 scatter scatter3 cellfun '
  	        + 'legend intersect ismember procrustes hold num2cell '
  	    },
  	    illegal: '(//|"|#|/\\*|\\s+/\\w+)',
  	    contains: [
  	      {
  	        className: 'function',
  	        beginKeywords: 'function',
  	        end: '$',
  	        contains: [
  	          hljs.UNDERSCORE_TITLE_MODE,
  	          {
  	            className: 'params',
  	            variants: [
  	              {
  	                begin: '\\(',
  	                end: '\\)'
  	              },
  	              {
  	                begin: '\\[',
  	                end: '\\]'
  	              }
  	            ]
  	          }
  	        ]
  	      },
  	      {
  	        className: 'built_in',
  	        begin: /true|false/,
  	        relevance: 0,
  	        starts: TRANSPOSE
  	      },
  	      {
  	        begin: '[a-zA-Z][a-zA-Z_0-9]*' + TRANSPOSE_RE,
  	        relevance: 0
  	      },
  	      {
  	        className: 'number',
  	        begin: hljs.C_NUMBER_RE,
  	        relevance: 0,
  	        starts: TRANSPOSE
  	      },
  	      {
  	        className: 'string',
  	        begin: '\'',
  	        end: '\'',
  	        contains: [ { begin: '\'\'' } ]
  	      },
  	      {
  	        begin: /\]|\}|\)/,
  	        relevance: 0,
  	        starts: TRANSPOSE
  	      },
  	      {
  	        className: 'string',
  	        begin: '"',
  	        end: '"',
  	        contains: [ { begin: '""' } ],
  	        starts: TRANSPOSE
  	      },
  	      hljs.COMMENT('^\\s*%\\{\\s*$', '^\\s*%\\}\\s*$'),
  	      hljs.COMMENT('%', '$')
  	    ]
  	  };
  	}

  	matlab_1 = matlab;
  	return matlab_1;
  }

  /*
  Language: Maxima
  Author: Robert Dodier <robert.dodier@gmail.com>
  Website: http://maxima.sourceforge.net
  Category: scientific
  */

  var maxima_1;
  var hasRequiredMaxima;

  function requireMaxima () {
  	if (hasRequiredMaxima) return maxima_1;
  	hasRequiredMaxima = 1;
  	function maxima(hljs) {
  	  const KEYWORDS =
  	    'if then else elseif for thru do while unless step in and or not';
  	  const LITERALS =
  	    'true false unknown inf minf ind und %e %i %pi %phi %gamma';
  	  const BUILTIN_FUNCTIONS =
  	    ' abasep abs absint absolute_real_time acos acosh acot acoth acsc acsch activate'
  	    + ' addcol add_edge add_edges addmatrices addrow add_vertex add_vertices adjacency_matrix'
  	    + ' adjoin adjoint af agd airy airy_ai airy_bi airy_dai airy_dbi algsys alg_type'
  	    + ' alias allroots alphacharp alphanumericp amortization %and annuity_fv'
  	    + ' annuity_pv antid antidiff AntiDifference append appendfile apply apply1 apply2'
  	    + ' applyb1 apropos args arit_amortization arithmetic arithsum array arrayapply'
  	    + ' arrayinfo arraymake arraysetapply ascii asec asech asin asinh askinteger'
  	    + ' asksign assoc assoc_legendre_p assoc_legendre_q assume assume_external_byte_order'
  	    + ' asympa at atan atan2 atanh atensimp atom atvalue augcoefmatrix augmented_lagrangian_method'
  	    + ' av average_degree backtrace bars barsplot barsplot_description base64 base64_decode'
  	    + ' bashindices batch batchload bc2 bdvac belln benefit_cost bern bernpoly bernstein_approx'
  	    + ' bernstein_expand bernstein_poly bessel bessel_i bessel_j bessel_k bessel_simplify'
  	    + ' bessel_y beta beta_incomplete beta_incomplete_generalized beta_incomplete_regularized'
  	    + ' bezout bfallroots bffac bf_find_root bf_fmin_cobyla bfhzeta bfloat bfloatp'
  	    + ' bfpsi bfpsi0 bfzeta biconnected_components bimetric binomial bipartition'
  	    + ' block blockmatrixp bode_gain bode_phase bothcoef box boxplot boxplot_description'
  	    + ' break bug_report build_info|10 buildq build_sample burn cabs canform canten'
  	    + ' cardinality carg cartan cartesian_product catch cauchy_matrix cbffac cdf_bernoulli'
  	    + ' cdf_beta cdf_binomial cdf_cauchy cdf_chi2 cdf_continuous_uniform cdf_discrete_uniform'
  	    + ' cdf_exp cdf_f cdf_gamma cdf_general_finite_discrete cdf_geometric cdf_gumbel'
  	    + ' cdf_hypergeometric cdf_laplace cdf_logistic cdf_lognormal cdf_negative_binomial'
  	    + ' cdf_noncentral_chi2 cdf_noncentral_student_t cdf_normal cdf_pareto cdf_poisson'
  	    + ' cdf_rank_sum cdf_rayleigh cdf_signed_rank cdf_student_t cdf_weibull cdisplay'
  	    + ' ceiling central_moment cequal cequalignore cf cfdisrep cfexpand cgeodesic'
  	    + ' cgreaterp cgreaterpignore changename changevar chaosgame charat charfun charfun2'
  	    + ' charlist charp charpoly chdir chebyshev_t chebyshev_u checkdiv check_overlaps'
  	    + ' chinese cholesky christof chromatic_index chromatic_number cint circulant_graph'
  	    + ' clear_edge_weight clear_rules clear_vertex_label clebsch_gordan clebsch_graph'
  	    + ' clessp clesspignore close closefile cmetric coeff coefmatrix cograd col collapse'
  	    + ' collectterms columnop columnspace columnswap columnvector combination combine'
  	    + ' comp2pui compare compfile compile compile_file complement_graph complete_bipartite_graph'
  	    + ' complete_graph complex_number_p components compose_functions concan concat'
  	    + ' conjugate conmetderiv connected_components connect_vertices cons constant'
  	    + ' constantp constituent constvalue cont2part content continuous_freq contortion'
  	    + ' contour_plot contract contract_edge contragrad contrib_ode convert coord'
  	    + ' copy copy_file copy_graph copylist copymatrix cor cos cosh cot coth cov cov1'
  	    + ' covdiff covect covers crc24sum create_graph create_list csc csch csetup cspline'
  	    + ' ctaylor ct_coordsys ctransform ctranspose cube_graph cuboctahedron_graph'
  	    + ' cunlisp cv cycle_digraph cycle_graph cylindrical days360 dblint deactivate'
  	    + ' declare declare_constvalue declare_dimensions declare_fundamental_dimensions'
  	    + ' declare_fundamental_units declare_qty declare_translated declare_unit_conversion'
  	    + ' declare_units declare_weights decsym defcon define define_alt_display define_variable'
  	    + ' defint defmatch defrule defstruct deftaylor degree_sequence del delete deleten'
  	    + ' delta demo demoivre denom depends derivdegree derivlist describe desolve'
  	    + ' determinant dfloat dgauss_a dgauss_b dgeev dgemm dgeqrf dgesv dgesvd diag'
  	    + ' diagmatrix diag_matrix diagmatrixp diameter diff digitcharp dimacs_export'
  	    + ' dimacs_import dimension dimensionless dimensions dimensions_as_list direct'
  	    + ' directory discrete_freq disjoin disjointp disolate disp dispcon dispform'
  	    + ' dispfun dispJordan display disprule dispterms distrib divide divisors divsum'
  	    + ' dkummer_m dkummer_u dlange dodecahedron_graph dotproduct dotsimp dpart'
  	    + ' draw draw2d draw3d drawdf draw_file draw_graph dscalar echelon edge_coloring'
  	    + ' edge_connectivity edges eigens_by_jacobi eigenvalues eigenvectors eighth'
  	    + ' einstein eivals eivects elapsed_real_time elapsed_run_time ele2comp ele2polynome'
  	    + ' ele2pui elem elementp elevation_grid elim elim_allbut eliminate eliminate_using'
  	    + ' ellipse elliptic_e elliptic_ec elliptic_eu elliptic_f elliptic_kc elliptic_pi'
  	    + ' ematrix empty_graph emptyp endcons entermatrix entertensor entier equal equalp'
  	    + ' equiv_classes erf erfc erf_generalized erfi errcatch error errormsg errors'
  	    + ' euler ev eval_string evenp every evolution evolution2d evundiff example exp'
  	    + ' expand expandwrt expandwrt_factored expint expintegral_chi expintegral_ci'
  	    + ' expintegral_e expintegral_e1 expintegral_ei expintegral_e_simplify expintegral_li'
  	    + ' expintegral_shi expintegral_si explicit explose exponentialize express expt'
  	    + ' exsec extdiff extract_linear_equations extremal_subset ezgcd %f f90 facsum'
  	    + ' factcomb factor factorfacsum factorial factorout factorsum facts fast_central_elements'
  	    + ' fast_linsolve fasttimes featurep fernfale fft fib fibtophi fifth filename_merge'
  	    + ' file_search file_type fillarray findde find_root find_root_abs find_root_error'
  	    + ' find_root_rel first fix flatten flength float floatnump floor flower_snark'
  	    + ' flush flush1deriv flushd flushnd flush_output fmin_cobyla forget fortran'
  	    + ' fourcos fourexpand fourier fourier_elim fourint fourintcos fourintsin foursimp'
  	    + ' foursin fourth fposition frame_bracket freeof freshline fresnel_c fresnel_s'
  	    + ' from_adjacency_matrix frucht_graph full_listify fullmap fullmapl fullratsimp'
  	    + ' fullratsubst fullsetify funcsolve fundamental_dimensions fundamental_units'
  	    + ' fundef funmake funp fv g0 g1 gamma gamma_greek gamma_incomplete gamma_incomplete_generalized'
  	    + ' gamma_incomplete_regularized gauss gauss_a gauss_b gaussprob gcd gcdex gcdivide'
  	    + ' gcfac gcfactor gd generalized_lambert_w genfact gen_laguerre genmatrix gensym'
  	    + ' geo_amortization geo_annuity_fv geo_annuity_pv geomap geometric geometric_mean'
  	    + ' geosum get getcurrentdirectory get_edge_weight getenv get_lu_factors get_output_stream_string'
  	    + ' get_pixel get_plot_option get_tex_environment get_tex_environment_default'
  	    + ' get_vertex_label gfactor gfactorsum ggf girth global_variances gn gnuplot_close'
  	    + ' gnuplot_replot gnuplot_reset gnuplot_restart gnuplot_start go Gosper GosperSum'
  	    + ' gr2d gr3d gradef gramschmidt graph6_decode graph6_encode graph6_export graph6_import'
  	    + ' graph_center graph_charpoly graph_eigenvalues graph_flow graph_order graph_periphery'
  	    + ' graph_product graph_size graph_union great_rhombicosidodecahedron_graph great_rhombicuboctahedron_graph'
  	    + ' grid_graph grind grobner_basis grotzch_graph hamilton_cycle hamilton_path'
  	    + ' hankel hankel_1 hankel_2 harmonic harmonic_mean hav heawood_graph hermite'
  	    + ' hessian hgfred hilbertmap hilbert_matrix hipow histogram histogram_description'
  	    + ' hodge horner hypergeometric i0 i1 %ibes ic1 ic2 ic_convert ichr1 ichr2 icosahedron_graph'
  	    + ' icosidodecahedron_graph icurvature ident identfor identity idiff idim idummy'
  	    + ' ieqn %if ifactors iframes ifs igcdex igeodesic_coords ilt image imagpart'
  	    + ' imetric implicit implicit_derivative implicit_plot indexed_tensor indices'
  	    + ' induced_subgraph inferencep inference_result infix info_display init_atensor'
  	    + ' init_ctensor in_neighbors innerproduct inpart inprod inrt integerp integer_partitions'
  	    + ' integrate intersect intersection intervalp intopois intosum invariant1 invariant2'
  	    + ' inverse_fft inverse_jacobi_cd inverse_jacobi_cn inverse_jacobi_cs inverse_jacobi_dc'
  	    + ' inverse_jacobi_dn inverse_jacobi_ds inverse_jacobi_nc inverse_jacobi_nd inverse_jacobi_ns'
  	    + ' inverse_jacobi_sc inverse_jacobi_sd inverse_jacobi_sn invert invert_by_adjoint'
  	    + ' invert_by_lu inv_mod irr is is_biconnected is_bipartite is_connected is_digraph'
  	    + ' is_edge_in_graph is_graph is_graph_or_digraph ishow is_isomorphic isolate'
  	    + ' isomorphism is_planar isqrt isreal_p is_sconnected is_tree is_vertex_in_graph'
  	    + ' items_inference %j j0 j1 jacobi jacobian jacobi_cd jacobi_cn jacobi_cs jacobi_dc'
  	    + ' jacobi_dn jacobi_ds jacobi_nc jacobi_nd jacobi_ns jacobi_p jacobi_sc jacobi_sd'
  	    + ' jacobi_sn JF jn join jordan julia julia_set julia_sin %k kdels kdelta kill'
  	    + ' killcontext kostka kron_delta kronecker_product kummer_m kummer_u kurtosis'
  	    + ' kurtosis_bernoulli kurtosis_beta kurtosis_binomial kurtosis_chi2 kurtosis_continuous_uniform'
  	    + ' kurtosis_discrete_uniform kurtosis_exp kurtosis_f kurtosis_gamma kurtosis_general_finite_discrete'
  	    + ' kurtosis_geometric kurtosis_gumbel kurtosis_hypergeometric kurtosis_laplace'
  	    + ' kurtosis_logistic kurtosis_lognormal kurtosis_negative_binomial kurtosis_noncentral_chi2'
  	    + ' kurtosis_noncentral_student_t kurtosis_normal kurtosis_pareto kurtosis_poisson'
  	    + ' kurtosis_rayleigh kurtosis_student_t kurtosis_weibull label labels lagrange'
  	    + ' laguerre lambda lambert_w laplace laplacian_matrix last lbfgs lc2kdt lcharp'
  	    + ' lc_l lcm lc_u ldefint ldisp ldisplay legendre_p legendre_q leinstein length'
  	    + ' let letrules letsimp levi_civita lfreeof lgtreillis lhs li liediff limit'
  	    + ' Lindstedt linear linearinterpol linear_program linear_regression line_graph'
  	    + ' linsolve listarray list_correlations listify list_matrix_entries list_nc_monomials'
  	    + ' listoftens listofvars listp lmax lmin load loadfile local locate_matrix_entry'
  	    + ' log logcontract log_gamma lopow lorentz_gauge lowercasep lpart lratsubst'
  	    + ' lreduce lriemann lsquares_estimates lsquares_estimates_approximate lsquares_estimates_exact'
  	    + ' lsquares_mse lsquares_residual_mse lsquares_residuals lsum ltreillis lu_backsub'
  	    + ' lucas lu_factor %m macroexpand macroexpand1 make_array makebox makefact makegamma'
  	    + ' make_graph make_level_picture makelist makeOrders make_poly_continent make_poly_country'
  	    + ' make_polygon make_random_state make_rgb_picture makeset make_string_input_stream'
  	    + ' make_string_output_stream make_transform mandelbrot mandelbrot_set map mapatom'
  	    + ' maplist matchdeclare matchfix mat_cond mat_fullunblocker mat_function mathml_display'
  	    + ' mat_norm matrix matrixmap matrixp matrix_size mattrace mat_trace mat_unblocker'
  	    + ' max max_clique max_degree max_flow maximize_lp max_independent_set max_matching'
  	    + ' maybe md5sum mean mean_bernoulli mean_beta mean_binomial mean_chi2 mean_continuous_uniform'
  	    + ' mean_deviation mean_discrete_uniform mean_exp mean_f mean_gamma mean_general_finite_discrete'
  	    + ' mean_geometric mean_gumbel mean_hypergeometric mean_laplace mean_logistic'
  	    + ' mean_lognormal mean_negative_binomial mean_noncentral_chi2 mean_noncentral_student_t'
  	    + ' mean_normal mean_pareto mean_poisson mean_rayleigh mean_student_t mean_weibull'
  	    + ' median median_deviation member mesh metricexpandall mgf1_sha1 min min_degree'
  	    + ' min_edge_cut minfactorial minimalPoly minimize_lp minimum_spanning_tree minor'
  	    + ' minpack_lsquares minpack_solve min_vertex_cover min_vertex_cut mkdir mnewton'
  	    + ' mod mode_declare mode_identity ModeMatrix moebius mon2schur mono monomial_dimensions'
  	    + ' multibernstein_poly multi_display_for_texinfo multi_elem multinomial multinomial_coeff'
  	    + ' multi_orbit multiplot_mode multi_pui multsym multthru mycielski_graph nary'
  	    + ' natural_unit nc_degree ncexpt ncharpoly negative_picture neighbors new newcontext'
  	    + ' newdet new_graph newline newton new_variable next_prime nicedummies niceindices'
  	    + ' ninth nofix nonarray noncentral_moment nonmetricity nonnegintegerp nonscalarp'
  	    + ' nonzeroandfreeof notequal nounify nptetrad npv nroots nterms ntermst'
  	    + ' nthroot nullity nullspace num numbered_boundaries numberp number_to_octets'
  	    + ' num_distinct_partitions numerval numfactor num_partitions nusum nzeta nzetai'
  	    + ' nzetar octets_to_number octets_to_oid odd_girth oddp ode2 ode_check odelin'
  	    + ' oid_to_octets op opena opena_binary openr openr_binary openw openw_binary'
  	    + ' operatorp opsubst optimize %or orbit orbits ordergreat ordergreatp orderless'
  	    + ' orderlessp orthogonal_complement orthopoly_recur orthopoly_weight outermap'
  	    + ' out_neighbors outofpois pade parabolic_cylinder_d parametric parametric_surface'
  	    + ' parg parGosper parse_string parse_timedate part part2cont partfrac partition'
  	    + ' partition_set partpol path_digraph path_graph pathname_directory pathname_name'
  	    + ' pathname_type pdf_bernoulli pdf_beta pdf_binomial pdf_cauchy pdf_chi2 pdf_continuous_uniform'
  	    + ' pdf_discrete_uniform pdf_exp pdf_f pdf_gamma pdf_general_finite_discrete'
  	    + ' pdf_geometric pdf_gumbel pdf_hypergeometric pdf_laplace pdf_logistic pdf_lognormal'
  	    + ' pdf_negative_binomial pdf_noncentral_chi2 pdf_noncentral_student_t pdf_normal'
  	    + ' pdf_pareto pdf_poisson pdf_rank_sum pdf_rayleigh pdf_signed_rank pdf_student_t'
  	    + ' pdf_weibull pearson_skewness permanent permut permutation permutations petersen_graph'
  	    + ' petrov pickapart picture_equalp picturep piechart piechart_description planar_embedding'
  	    + ' playback plog plot2d plot3d plotdf ploteq plsquares pochhammer points poisdiff'
  	    + ' poisexpt poisint poismap poisplus poissimp poissubst poistimes poistrim polar'
  	    + ' polarform polartorect polar_to_xy poly_add poly_buchberger poly_buchberger_criterion'
  	    + ' poly_colon_ideal poly_content polydecomp poly_depends_p poly_elimination_ideal'
  	    + ' poly_exact_divide poly_expand poly_expt poly_gcd polygon poly_grobner poly_grobner_equal'
  	    + ' poly_grobner_member poly_grobner_subsetp poly_ideal_intersection poly_ideal_polysaturation'
  	    + ' poly_ideal_polysaturation1 poly_ideal_saturation poly_ideal_saturation1 poly_lcm'
  	    + ' poly_minimization polymod poly_multiply polynome2ele polynomialp poly_normal_form'
  	    + ' poly_normalize poly_normalize_list poly_polysaturation_extension poly_primitive_part'
  	    + ' poly_pseudo_divide poly_reduced_grobner poly_reduction poly_saturation_extension'
  	    + ' poly_s_polynomial poly_subtract polytocompanion pop postfix potential power_mod'
  	    + ' powerseries powerset prefix prev_prime primep primes principal_components'
  	    + ' print printf printfile print_graph printpois printprops prodrac product properties'
  	    + ' propvars psi psubst ptriangularize pui pui2comp pui2ele pui2polynome pui_direct'
  	    + ' puireduc push put pv qput qrange qty quad_control quad_qag quad_qagi quad_qagp'
  	    + ' quad_qags quad_qawc quad_qawf quad_qawo quad_qaws quadrilateral quantile'
  	    + ' quantile_bernoulli quantile_beta quantile_binomial quantile_cauchy quantile_chi2'
  	    + ' quantile_continuous_uniform quantile_discrete_uniform quantile_exp quantile_f'
  	    + ' quantile_gamma quantile_general_finite_discrete quantile_geometric quantile_gumbel'
  	    + ' quantile_hypergeometric quantile_laplace quantile_logistic quantile_lognormal'
  	    + ' quantile_negative_binomial quantile_noncentral_chi2 quantile_noncentral_student_t'
  	    + ' quantile_normal quantile_pareto quantile_poisson quantile_rayleigh quantile_student_t'
  	    + ' quantile_weibull quartile_skewness quit qunit quotient racah_v racah_w radcan'
  	    + ' radius random random_bernoulli random_beta random_binomial random_bipartite_graph'
  	    + ' random_cauchy random_chi2 random_continuous_uniform random_digraph random_discrete_uniform'
  	    + ' random_exp random_f random_gamma random_general_finite_discrete random_geometric'
  	    + ' random_graph random_graph1 random_gumbel random_hypergeometric random_laplace'
  	    + ' random_logistic random_lognormal random_negative_binomial random_network'
  	    + ' random_noncentral_chi2 random_noncentral_student_t random_normal random_pareto'
  	    + ' random_permutation random_poisson random_rayleigh random_regular_graph random_student_t'
  	    + ' random_tournament random_tree random_weibull range rank rat ratcoef ratdenom'
  	    + ' ratdiff ratdisrep ratexpand ratinterpol rational rationalize ratnumer ratnump'
  	    + ' ratp ratsimp ratsubst ratvars ratweight read read_array read_binary_array'
  	    + ' read_binary_list read_binary_matrix readbyte readchar read_hashed_array readline'
  	    + ' read_list read_matrix read_nested_list readonly read_xpm real_imagpart_to_conjugate'
  	    + ' realpart realroots rearray rectangle rectform rectform_log_if_constant recttopolar'
  	    + ' rediff reduce_consts reduce_order region region_boundaries region_boundaries_plus'
  	    + ' rem remainder remarray rembox remcomps remcon remcoord remfun remfunction'
  	    + ' remlet remove remove_constvalue remove_dimensions remove_edge remove_fundamental_dimensions'
  	    + ' remove_fundamental_units remove_plot_option remove_vertex rempart remrule'
  	    + ' remsym remvalue rename rename_file reset reset_displays residue resolvante'
  	    + ' resolvante_alternee1 resolvante_bipartite resolvante_diedrale resolvante_klein'
  	    + ' resolvante_klein3 resolvante_produit_sym resolvante_unitaire resolvante_vierer'
  	    + ' rest resultant return reveal reverse revert revert2 rgb2level rhs ricci riemann'
  	    + ' rinvariant risch rk rmdir rncombine romberg room rootscontract round row'
  	    + ' rowop rowswap rreduce run_testsuite %s save saving scalarp scaled_bessel_i'
  	    + ' scaled_bessel_i0 scaled_bessel_i1 scalefactors scanmap scatterplot scatterplot_description'
  	    + ' scene schur2comp sconcat scopy scsimp scurvature sdowncase sec sech second'
  	    + ' sequal sequalignore set_alt_display setdifference set_draw_defaults set_edge_weight'
  	    + ' setelmx setequalp setify setp set_partitions set_plot_option set_prompt set_random_state'
  	    + ' set_tex_environment set_tex_environment_default setunits setup_autoload set_up_dot_simplifications'
  	    + ' set_vertex_label seventh sexplode sf sha1sum sha256sum shortest_path shortest_weighted_path'
  	    + ' show showcomps showratvars sierpinskiale sierpinskimap sign signum similaritytransform'
  	    + ' simp_inequality simplify_sum simplode simpmetderiv simtran sin sinh sinsert'
  	    + ' sinvertcase sixth skewness skewness_bernoulli skewness_beta skewness_binomial'
  	    + ' skewness_chi2 skewness_continuous_uniform skewness_discrete_uniform skewness_exp'
  	    + ' skewness_f skewness_gamma skewness_general_finite_discrete skewness_geometric'
  	    + ' skewness_gumbel skewness_hypergeometric skewness_laplace skewness_logistic'
  	    + ' skewness_lognormal skewness_negative_binomial skewness_noncentral_chi2 skewness_noncentral_student_t'
  	    + ' skewness_normal skewness_pareto skewness_poisson skewness_rayleigh skewness_student_t'
  	    + ' skewness_weibull slength smake small_rhombicosidodecahedron_graph small_rhombicuboctahedron_graph'
  	    + ' smax smin smismatch snowmap snub_cube_graph snub_dodecahedron_graph solve'
  	    + ' solve_rec solve_rec_rat some somrac sort sparse6_decode sparse6_encode sparse6_export'
  	    + ' sparse6_import specint spherical spherical_bessel_j spherical_bessel_y spherical_hankel1'
  	    + ' spherical_hankel2 spherical_harmonic spherical_to_xyz splice split sposition'
  	    + ' sprint sqfr sqrt sqrtdenest sremove sremovefirst sreverse ssearch ssort sstatus'
  	    + ' ssubst ssubstfirst staircase standardize standardize_inverse_trig starplot'
  	    + ' starplot_description status std std1 std_bernoulli std_beta std_binomial'
  	    + ' std_chi2 std_continuous_uniform std_discrete_uniform std_exp std_f std_gamma'
  	    + ' std_general_finite_discrete std_geometric std_gumbel std_hypergeometric std_laplace'
  	    + ' std_logistic std_lognormal std_negative_binomial std_noncentral_chi2 std_noncentral_student_t'
  	    + ' std_normal std_pareto std_poisson std_rayleigh std_student_t std_weibull'
  	    + ' stemplot stirling stirling1 stirling2 strim striml strimr string stringout'
  	    + ' stringp strong_components struve_h struve_l sublis sublist sublist_indices'
  	    + ' submatrix subsample subset subsetp subst substinpart subst_parallel substpart'
  	    + ' substring subvar subvarp sum sumcontract summand_to_rec supcase supcontext'
  	    + ' symbolp symmdifference symmetricp system take_channel take_inference tan'
  	    + ' tanh taylor taylorinfo taylorp taylor_simplifier taytorat tcl_output tcontract'
  	    + ' tellrat tellsimp tellsimpafter tentex tenth test_mean test_means_difference'
  	    + ' test_normality test_proportion test_proportions_difference test_rank_sum'
  	    + ' test_sign test_signed_rank test_variance test_variance_ratio tex tex1 tex_display'
  	    + ' texput %th third throw time timedate timer timer_info tldefint tlimit todd_coxeter'
  	    + ' toeplitz tokens to_lisp topological_sort to_poly to_poly_solve totaldisrep'
  	    + ' totalfourier totient tpartpol trace tracematrix trace_options transform_sample'
  	    + ' translate translate_file transpose treefale tree_reduce treillis treinat'
  	    + ' triangle triangularize trigexpand trigrat trigreduce trigsimp trunc truncate'
  	    + ' truncated_cube_graph truncated_dodecahedron_graph truncated_icosahedron_graph'
  	    + ' truncated_tetrahedron_graph tr_warnings_get tube tutte_graph ueivects uforget'
  	    + ' ultraspherical underlying_graph undiff union unique uniteigenvectors unitp'
  	    + ' units unit_step unitvector unorder unsum untellrat untimer'
  	    + ' untrace uppercasep uricci uriemann uvect vandermonde_matrix var var1 var_bernoulli'
  	    + ' var_beta var_binomial var_chi2 var_continuous_uniform var_discrete_uniform'
  	    + ' var_exp var_f var_gamma var_general_finite_discrete var_geometric var_gumbel'
  	    + ' var_hypergeometric var_laplace var_logistic var_lognormal var_negative_binomial'
  	    + ' var_noncentral_chi2 var_noncentral_student_t var_normal var_pareto var_poisson'
  	    + ' var_rayleigh var_student_t var_weibull vector vectorpotential vectorsimp'
  	    + ' verbify vers vertex_coloring vertex_connectivity vertex_degree vertex_distance'
  	    + ' vertex_eccentricity vertex_in_degree vertex_out_degree vertices vertices_to_cycle'
  	    + ' vertices_to_path %w weyl wheel_graph wiener_index wigner_3j wigner_6j'
  	    + ' wigner_9j with_stdout write_binary_data writebyte write_data writefile wronskian'
  	    + ' xreduce xthru %y Zeilberger zeroequiv zerofor zeromatrix zeromatrixp zeta'
  	    + ' zgeev zheev zlange zn_add_table zn_carmichael_lambda zn_characteristic_factors'
  	    + ' zn_determinant zn_factor_generators zn_invert_by_lu zn_log zn_mult_table'
  	    + ' absboxchar activecontexts adapt_depth additive adim aform algebraic'
  	    + ' algepsilon algexact aliases allbut all_dotsimp_denoms allocation allsym alphabetic'
  	    + ' animation antisymmetric arrays askexp assume_pos assume_pos_pred assumescalar'
  	    + ' asymbol atomgrad atrig1 axes axis_3d axis_bottom axis_left axis_right axis_top'
  	    + ' azimuth background background_color backsubst berlefact bernstein_explicit'
  	    + ' besselexpand beta_args_sum_to_integer beta_expand bftorat bftrunc bindtest'
  	    + ' border boundaries_array box boxchar breakup %c capping cauchysum cbrange'
  	    + ' cbtics center cflength cframe_flag cnonmet_flag color color_bar color_bar_tics'
  	    + ' colorbox columns commutative complex cone context contexts contour contour_levels'
  	    + ' cosnpiflag ctaypov ctaypt ctayswitch ctayvar ct_coords ctorsion_flag ctrgsimp'
  	    + ' cube current_let_rule_package cylinder data_file_name debugmode decreasing'
  	    + ' default_let_rule_package delay dependencies derivabbrev derivsubst detout'
  	    + ' diagmetric diff dim dimensions dispflag display2d|10 display_format_internal'
  	    + ' distribute_over doallmxops domain domxexpt domxmxops domxnctimes dontfactor'
  	    + ' doscmxops doscmxplus dot0nscsimp dot0simp dot1simp dotassoc dotconstrules'
  	    + ' dotdistrib dotexptsimp dotident dotscrules draw_graph_program draw_realpart'
  	    + ' edge_color edge_coloring edge_partition edge_type edge_width %edispflag'
  	    + ' elevation %emode endphi endtheta engineering_format_floats enhanced3d %enumer'
  	    + ' epsilon_lp erfflag erf_representation errormsg error_size error_syms error_type'
  	    + ' %e_to_numlog eval even evenfun evflag evfun ev_point expandwrt_denom expintexpand'
  	    + ' expintrep expon expop exptdispflag exptisolate exptsubst facexpand facsum_combine'
  	    + ' factlim factorflag factorial_expand factors_only fb feature features'
  	    + ' file_name file_output_append file_search_demo file_search_lisp file_search_maxima|10'
  	    + ' file_search_tests file_search_usage file_type_lisp file_type_maxima|10 fill_color'
  	    + ' fill_density filled_func fixed_vertices flipflag float2bf font font_size'
  	    + ' fortindent fortspaces fpprec fpprintprec functions gamma_expand gammalim'
  	    + ' gdet genindex gensumnum GGFCFMAX GGFINFINITY globalsolve gnuplot_command'
  	    + ' gnuplot_curve_styles gnuplot_curve_titles gnuplot_default_term_command gnuplot_dumb_term_command'
  	    + ' gnuplot_file_args gnuplot_file_name gnuplot_out_file gnuplot_pdf_term_command'
  	    + ' gnuplot_pm3d gnuplot_png_term_command gnuplot_postamble gnuplot_preamble'
  	    + ' gnuplot_ps_term_command gnuplot_svg_term_command gnuplot_term gnuplot_view_args'
  	    + ' Gosper_in_Zeilberger gradefs grid grid2d grind halfangles head_angle head_both'
  	    + ' head_length head_type height hypergeometric_representation %iargs ibase'
  	    + ' icc1 icc2 icounter idummyx ieqnprint ifb ifc1 ifc2 ifg ifgi ifr iframe_bracket_form'
  	    + ' ifri igeowedge_flag ikt1 ikt2 imaginary inchar increasing infeval'
  	    + ' infinity inflag infolists inm inmc1 inmc2 intanalysis integer integervalued'
  	    + ' integrate_use_rootsof integration_constant integration_constant_counter interpolate_color'
  	    + ' intfaclim ip_grid ip_grid_in irrational isolate_wrt_times iterations itr'
  	    + ' julia_parameter %k1 %k2 keepfloat key key_pos kinvariant kt label label_alignment'
  	    + ' label_orientation labels lassociative lbfgs_ncorrections lbfgs_nfeval_max'
  	    + ' leftjust legend letrat let_rule_packages lfg lg lhospitallim limsubst linear'
  	    + ' linear_solver linechar linel|10 linenum line_type linewidth line_width linsolve_params'
  	    + ' linsolvewarn lispdisp listarith listconstvars listdummyvars lmxchar load_pathname'
  	    + ' loadprint logabs logarc logcb logconcoeffp logexpand lognegint logsimp logx'
  	    + ' logx_secondary logy logy_secondary logz lriem m1pbranch macroexpansion macros'
  	    + ' mainvar manual_demo maperror mapprint matrix_element_add matrix_element_mult'
  	    + ' matrix_element_transpose maxapplydepth maxapplyheight maxima_tempdir|10 maxima_userdir|10'
  	    + ' maxnegex MAX_ORD maxposex maxpsifracdenom maxpsifracnum maxpsinegint maxpsiposint'
  	    + ' maxtayorder mesh_lines_color method mod_big_prime mode_check_errorp'
  	    + ' mode_checkp mode_check_warnp mod_test mod_threshold modular_linear_solver'
  	    + ' modulus multiplicative multiplicities myoptions nary negdistrib negsumdispflag'
  	    + ' newline newtonepsilon newtonmaxiter nextlayerfactor niceindicespref nm nmc'
  	    + ' noeval nolabels nonegative_lp noninteger nonscalar noun noundisp nouns np'
  	    + ' npi nticks ntrig numer numer_pbranch obase odd oddfun opacity opproperties'
  	    + ' opsubst optimprefix optionset orientation origin orthopoly_returns_intervals'
  	    + ' outative outchar packagefile palette partswitch pdf_file pfeformat phiresolution'
  	    + ' %piargs piece pivot_count_sx pivot_max_sx plot_format plot_options plot_realpart'
  	    + ' png_file pochhammer_max_index points pointsize point_size points_joined point_type'
  	    + ' poislim poisson poly_coefficient_ring poly_elimination_order polyfactor poly_grobner_algorithm'
  	    + ' poly_grobner_debug poly_monomial_order poly_primary_elimination_order poly_return_term_list'
  	    + ' poly_secondary_elimination_order poly_top_reduction_only posfun position'
  	    + ' powerdisp pred prederror primep_number_of_tests product_use_gamma program'
  	    + ' programmode promote_float_to_bigfloat prompt proportional_axes props psexpand'
  	    + ' ps_file radexpand radius radsubstflag rassociative ratalgdenom ratchristof'
  	    + ' ratdenomdivide rateinstein ratepsilon ratfac rational ratmx ratprint ratriemann'
  	    + ' ratsimpexpons ratvarswitch ratweights ratweyl ratwtlvl real realonly redraw'
  	    + ' refcheck resolution restart resultant ric riem rmxchar %rnum_list rombergabs'
  	    + ' rombergit rombergmin rombergtol rootsconmode rootsepsilon run_viewer same_xy'
  	    + ' same_xyz savedef savefactors scalar scalarmatrixp scale scale_lp setcheck'
  	    + ' setcheckbreak setval show_edge_color show_edges show_edge_type show_edge_width'
  	    + ' show_id show_label showtime show_vertex_color show_vertex_size show_vertex_type'
  	    + ' show_vertices show_weight simp simplified_output simplify_products simpproduct'
  	    + ' simpsum sinnpiflag solvedecomposes solveexplicit solvefactors solvenullwarn'
  	    + ' solveradcan solvetrigwarn space sparse sphere spring_embedding_depth sqrtdispflag'
  	    + ' stardisp startphi starttheta stats_numer stringdisp structures style sublis_apply_lambda'
  	    + ' subnumsimp sumexpand sumsplitfact surface surface_hide svg_file symmetric'
  	    + ' tab taylordepth taylor_logexpand taylor_order_coefficients taylor_truncate_polynomials'
  	    + ' tensorkill terminal testsuite_files thetaresolution timer_devalue title tlimswitch'
  	    + ' tr track transcompile transform transform_xy translate_fast_arrays transparent'
  	    + ' transrun tr_array_as_ref tr_bound_function_applyp tr_file_tty_messagesp tr_float_can_branch_complex'
  	    + ' tr_function_call_default trigexpandplus trigexpandtimes triginverses trigsign'
  	    + ' trivial_solutions tr_numer tr_optimize_max_loop tr_semicompile tr_state_vars'
  	    + ' tr_warn_bad_function_calls tr_warn_fexpr tr_warn_meval tr_warn_mode'
  	    + ' tr_warn_undeclared tr_warn_undefined_variable tstep ttyoff tube_extremes'
  	    + ' ufg ug %unitexpand unit_vectors uric uriem use_fast_arrays user_preamble'
  	    + ' usersetunits values vect_cross verbose vertex_color vertex_coloring vertex_partition'
  	    + ' vertex_size vertex_type view warnings weyl width windowname windowtitle wired_surface'
  	    + ' wireframe xaxis xaxis_color xaxis_secondary xaxis_type xaxis_width xlabel'
  	    + ' xlabel_secondary xlength xrange xrange_secondary xtics xtics_axis xtics_rotate'
  	    + ' xtics_rotate_secondary xtics_secondary xtics_secondary_axis xu_grid x_voxel'
  	    + ' xy_file xyplane xy_scale yaxis yaxis_color yaxis_secondary yaxis_type yaxis_width'
  	    + ' ylabel ylabel_secondary ylength yrange yrange_secondary ytics ytics_axis'
  	    + ' ytics_rotate ytics_rotate_secondary ytics_secondary ytics_secondary_axis'
  	    + ' yv_grid y_voxel yx_ratio zaxis zaxis_color zaxis_type zaxis_width zeroa zerob'
  	    + ' zerobern zeta%pi zlabel zlabel_rotate zlength zmin zn_primroot_limit zn_primroot_pretest';
  	  const SYMBOLS = '_ __ %|0 %%|0';

  	  return {
  	    name: 'Maxima',
  	    keywords: {
  	      $pattern: '[A-Za-z_%][0-9A-Za-z_%]*',
  	      keyword: KEYWORDS,
  	      literal: LITERALS,
  	      built_in: BUILTIN_FUNCTIONS,
  	      symbol: SYMBOLS
  	    },
  	    contains: [
  	      {
  	        className: 'comment',
  	        begin: '/\\*',
  	        end: '\\*/',
  	        contains: [ 'self' ]
  	      },
  	      hljs.QUOTE_STRING_MODE,
  	      {
  	        className: 'number',
  	        relevance: 0,
  	        variants: [
  	          {
  	            // float number w/ exponent
  	            // hmm, I wonder if we ought to include other exponent markers?
  	            begin: '\\b(\\d+|\\d+\\.|\\.\\d+|\\d+\\.\\d+)[Ee][-+]?\\d+\\b' },
  	          {
  	            // bigfloat number
  	            begin: '\\b(\\d+|\\d+\\.|\\.\\d+|\\d+\\.\\d+)[Bb][-+]?\\d+\\b',
  	            relevance: 10
  	          },
  	          {
  	            // float number w/out exponent
  	            // Doesn't seem to recognize floats which start with '.'
  	            begin: '\\b(\\.\\d+|\\d+\\.\\d+)\\b' },
  	          {
  	            // integer in base up to 36
  	            // Doesn't seem to recognize integers which end with '.'
  	            begin: '\\b(\\d+|0[0-9A-Za-z]+)\\.?\\b' }
  	        ]
  	      }
  	    ],
  	    illegal: /@/
  	  };
  	}

  	maxima_1 = maxima;
  	return maxima_1;
  }

  /*
  Language: MEL
  Description: Maya Embedded Language
  Author: Shuen-Huei Guan <drake.guan@gmail.com>
  Website: http://www.autodesk.com/products/autodesk-maya/overview
  Category: graphics
  */

  var mel_1;
  var hasRequiredMel;

  function requireMel () {
  	if (hasRequiredMel) return mel_1;
  	hasRequiredMel = 1;
  	function mel(hljs) {
  	  return {
  	    name: 'MEL',
  	    keywords:
  	      'int float string vector matrix if else switch case default while do for in break '
  	      + 'continue global proc return about abs addAttr addAttributeEditorNodeHelp addDynamic '
  	      + 'addNewShelfTab addPP addPanelCategory addPrefixToName advanceToNextDrivenKey '
  	      + 'affectedNet affects aimConstraint air alias aliasAttr align alignCtx alignCurve '
  	      + 'alignSurface allViewFit ambientLight angle angleBetween animCone animCurveEditor '
  	      + 'animDisplay animView annotate appendStringArray applicationName applyAttrPreset '
  	      + 'applyTake arcLenDimContext arcLengthDimension arclen arrayMapper art3dPaintCtx '
  	      + 'artAttrCtx artAttrPaintVertexCtx artAttrSkinPaintCtx artAttrTool artBuildPaintMenu '
  	      + 'artFluidAttrCtx artPuttyCtx artSelectCtx artSetPaintCtx artUserPaintCtx assignCommand '
  	      + 'assignInputDevice assignViewportFactories attachCurve attachDeviceAttr attachSurface '
  	      + 'attrColorSliderGrp attrCompatibility attrControlGrp attrEnumOptionMenu '
  	      + 'attrEnumOptionMenuGrp attrFieldGrp attrFieldSliderGrp attrNavigationControlGrp '
  	      + 'attrPresetEditWin attributeExists attributeInfo attributeMenu attributeQuery '
  	      + 'autoKeyframe autoPlace bakeClip bakeFluidShading bakePartialHistory bakeResults '
  	      + 'bakeSimulation basename basenameEx batchRender bessel bevel bevelPlus binMembership '
  	      + 'bindSkin blend2 blendShape blendShapeEditor blendShapePanel blendTwoAttr blindDataType '
  	      + 'boneLattice boundary boxDollyCtx boxZoomCtx bufferCurve buildBookmarkMenu '
  	      + 'buildKeyframeMenu button buttonManip CBG cacheFile cacheFileCombine cacheFileMerge '
  	      + 'cacheFileTrack camera cameraView canCreateManip canvas capitalizeString catch '
  	      + 'catchQuiet ceil changeSubdivComponentDisplayLevel changeSubdivRegion channelBox '
  	      + 'character characterMap characterOutlineEditor characterize chdir checkBox checkBoxGrp '
  	      + 'checkDefaultRenderGlobals choice circle circularFillet clamp clear clearCache clip '
  	      + 'clipEditor clipEditorCurrentTimeCtx clipSchedule clipSchedulerOutliner clipTrimBefore '
  	      + 'closeCurve closeSurface cluster cmdFileOutput cmdScrollFieldExecuter '
  	      + 'cmdScrollFieldReporter cmdShell coarsenSubdivSelectionList collision color '
  	      + 'colorAtPoint colorEditor colorIndex colorIndexSliderGrp colorSliderButtonGrp '
  	      + 'colorSliderGrp columnLayout commandEcho commandLine commandPort compactHairSystem '
  	      + 'componentEditor compositingInterop computePolysetVolume condition cone confirmDialog '
  	      + 'connectAttr connectControl connectDynamic connectJoint connectionInfo constrain '
  	      + 'constrainValue constructionHistory container containsMultibyte contextInfo control '
  	      + 'convertFromOldLayers convertIffToPsd convertLightmap convertSolidTx convertTessellation '
  	      + 'convertUnit copyArray copyFlexor copyKey copySkinWeights cos cpButton cpCache '
  	      + 'cpClothSet cpCollision cpConstraint cpConvClothToMesh cpForces cpGetSolverAttr cpPanel '
  	      + 'cpProperty cpRigidCollisionFilter cpSeam cpSetEdit cpSetSolverAttr cpSolver '
  	      + 'cpSolverTypes cpTool cpUpdateClothUVs createDisplayLayer createDrawCtx createEditor '
  	      + 'createLayeredPsdFile createMotionField createNewShelf createNode createRenderLayer '
  	      + 'createSubdivRegion cross crossProduct ctxAbort ctxCompletion ctxEditMode ctxTraverse '
  	      + 'currentCtx currentTime currentTimeCtx currentUnit curve curveAddPtCtx '
  	      + 'curveCVCtx curveEPCtx curveEditorCtx curveIntersect curveMoveEPCtx curveOnSurface '
  	      + 'curveSketchCtx cutKey cycleCheck cylinder dagPose date defaultLightListCheckBox '
  	      + 'defaultNavigation defineDataServer defineVirtualDevice deformer deg_to_rad delete '
  	      + 'deleteAttr deleteShadingGroupsAndMaterials deleteShelfTab deleteUI deleteUnusedBrushes '
  	      + 'delrandstr detachCurve detachDeviceAttr detachSurface deviceEditor devicePanel dgInfo '
  	      + 'dgdirty dgeval dgtimer dimWhen directKeyCtx directionalLight dirmap dirname disable '
  	      + 'disconnectAttr disconnectJoint diskCache displacementToPoly displayAffected '
  	      + 'displayColor displayCull displayLevelOfDetail displayPref displayRGBColor '
  	      + 'displaySmoothness displayStats displayString displaySurface distanceDimContext '
  	      + 'distanceDimension doBlur dolly dollyCtx dopeSheetEditor dot dotProduct '
  	      + 'doubleProfileBirailSurface drag dragAttrContext draggerContext dropoffLocator '
  	      + 'duplicate duplicateCurve duplicateSurface dynCache dynControl dynExport dynExpression '
  	      + 'dynGlobals dynPaintEditor dynParticleCtx dynPref dynRelEdPanel dynRelEditor '
  	      + 'dynamicLoad editAttrLimits editDisplayLayerGlobals editDisplayLayerMembers '
  	      + 'editRenderLayerAdjustment editRenderLayerGlobals editRenderLayerMembers editor '
  	      + 'editorTemplate effector emit emitter enableDevice encodeString endString endsWith env '
  	      + 'equivalent equivalentTol erf error eval evalDeferred evalEcho event '
  	      + 'exactWorldBoundingBox exclusiveLightCheckBox exec executeForEachObject exists exp '
  	      + 'expression expressionEditorListen extendCurve extendSurface extrude fcheck fclose feof '
  	      + 'fflush fgetline fgetword file fileBrowserDialog fileDialog fileExtension fileInfo '
  	      + 'filetest filletCurve filter filterCurve filterExpand filterStudioImport '
  	      + 'findAllIntersections findAnimCurves findKeyframe findMenuItem findRelatedSkinCluster '
  	      + 'finder firstParentOf fitBspline flexor floatEq floatField floatFieldGrp floatScrollBar '
  	      + 'floatSlider floatSlider2 floatSliderButtonGrp floatSliderGrp floor flow fluidCacheInfo '
  	      + 'fluidEmitter fluidVoxelInfo flushUndo fmod fontDialog fopen formLayout format fprint '
  	      + 'frameLayout fread freeFormFillet frewind fromNativePath fwrite gamma gauss '
  	      + 'geometryConstraint getApplicationVersionAsFloat getAttr getClassification '
  	      + 'getDefaultBrush getFileList getFluidAttr getInputDeviceRange getMayaPanelTypes '
  	      + 'getModifiers getPanel getParticleAttr getPluginResource getenv getpid glRender '
  	      + 'glRenderEditor globalStitch gmatch goal gotoBindPose grabColor gradientControl '
  	      + 'gradientControlNoAttr graphDollyCtx graphSelectContext graphTrackCtx gravity grid '
  	      + 'gridLayout group groupObjectsByName HfAddAttractorToAS HfAssignAS HfBuildEqualMap '
  	      + 'HfBuildFurFiles HfBuildFurImages HfCancelAFR HfConnectASToHF HfCreateAttractor '
  	      + 'HfDeleteAS HfEditAS HfPerformCreateAS HfRemoveAttractorFromAS HfSelectAttached '
  	      + 'HfSelectAttractors HfUnAssignAS hardenPointCurve hardware hardwareRenderPanel '
  	      + 'headsUpDisplay headsUpMessage help helpLine hermite hide hilite hitTest hotBox hotkey '
  	      + 'hotkeyCheck hsv_to_rgb hudButton hudSlider hudSliderButton hwReflectionMap hwRender '
  	      + 'hwRenderLoad hyperGraph hyperPanel hyperShade hypot iconTextButton iconTextCheckBox '
  	      + 'iconTextRadioButton iconTextRadioCollection iconTextScrollList iconTextStaticLabel '
  	      + 'ikHandle ikHandleCtx ikHandleDisplayScale ikSolver ikSplineHandleCtx ikSystem '
  	      + 'ikSystemInfo ikfkDisplayMethod illustratorCurves image imfPlugins inheritTransform '
  	      + 'insertJoint insertJointCtx insertKeyCtx insertKnotCurve insertKnotSurface instance '
  	      + 'instanceable instancer intField intFieldGrp intScrollBar intSlider intSliderGrp '
  	      + 'interToUI internalVar intersect iprEngine isAnimCurve isConnected isDirty isParentOf '
  	      + 'isSameObject isTrue isValidObjectName isValidString isValidUiName isolateSelect '
  	      + 'itemFilter itemFilterAttr itemFilterRender itemFilterType joint jointCluster jointCtx '
  	      + 'jointDisplayScale jointLattice keyTangent keyframe keyframeOutliner '
  	      + 'keyframeRegionCurrentTimeCtx keyframeRegionDirectKeyCtx keyframeRegionDollyCtx '
  	      + 'keyframeRegionInsertKeyCtx keyframeRegionMoveKeyCtx keyframeRegionScaleKeyCtx '
  	      + 'keyframeRegionSelectKeyCtx keyframeRegionSetKeyCtx keyframeRegionTrackCtx '
  	      + 'keyframeStats lassoContext lattice latticeDeformKeyCtx launch launchImageEditor '
  	      + 'layerButton layeredShaderPort layeredTexturePort layout layoutDialog lightList '
  	      + 'lightListEditor lightListPanel lightlink lineIntersection linearPrecision linstep '
  	      + 'listAnimatable listAttr listCameras listConnections listDeviceAttachments listHistory '
  	      + 'listInputDeviceAxes listInputDeviceButtons listInputDevices listMenuAnnotation '
  	      + 'listNodeTypes listPanelCategories listRelatives listSets listTransforms '
  	      + 'listUnselected listerEditor loadFluid loadNewShelf loadPlugin '
  	      + 'loadPluginLanguageResources loadPrefObjects localizedPanelLabel lockNode loft log '
  	      + 'longNameOf lookThru ls lsThroughFilter lsType lsUI Mayatomr mag makeIdentity makeLive '
  	      + 'makePaintable makeRoll makeSingleSurface makeTubeOn makebot manipMoveContext '
  	      + 'manipMoveLimitsCtx manipOptions manipRotateContext manipRotateLimitsCtx '
  	      + 'manipScaleContext manipScaleLimitsCtx marker match max memory menu menuBarLayout '
  	      + 'menuEditor menuItem menuItemToShelf menuSet menuSetPref messageLine min minimizeApp '
  	      + 'mirrorJoint modelCurrentTimeCtx modelEditor modelPanel mouse movIn movOut move '
  	      + 'moveIKtoFK moveKeyCtx moveVertexAlongDirection multiProfileBirailSurface mute '
  	      + 'nParticle nameCommand nameField namespace namespaceInfo newPanelItems newton nodeCast '
  	      + 'nodeIconButton nodeOutliner nodePreset nodeType noise nonLinear normalConstraint '
  	      + 'normalize nurbsBoolean nurbsCopyUVSet nurbsCube nurbsEditUV nurbsPlane nurbsSelect '
  	      + 'nurbsSquare nurbsToPoly nurbsToPolygonsPref nurbsToSubdiv nurbsToSubdivPref '
  	      + 'nurbsUVSet nurbsViewDirectionVector objExists objectCenter objectLayer objectType '
  	      + 'objectTypeUI obsoleteProc oceanNurbsPreviewPlane offsetCurve offsetCurveOnSurface '
  	      + 'offsetSurface openGLExtension openMayaPref optionMenu optionMenuGrp optionVar orbit '
  	      + 'orbitCtx orientConstraint outlinerEditor outlinerPanel overrideModifier '
  	      + 'paintEffectsDisplay pairBlend palettePort paneLayout panel panelConfiguration '
  	      + 'panelHistory paramDimContext paramDimension paramLocator parent parentConstraint '
  	      + 'particle particleExists particleInstancer particleRenderInfo partition pasteKey '
  	      + 'pathAnimation pause pclose percent performanceOptions pfxstrokes pickWalk picture '
  	      + 'pixelMove planarSrf plane play playbackOptions playblast plugAttr plugNode pluginInfo '
  	      + 'pluginResourceUtil pointConstraint pointCurveConstraint pointLight pointMatrixMult '
  	      + 'pointOnCurve pointOnSurface pointPosition poleVectorConstraint polyAppend '
  	      + 'polyAppendFacetCtx polyAppendVertex polyAutoProjection polyAverageNormal '
  	      + 'polyAverageVertex polyBevel polyBlendColor polyBlindData polyBoolOp polyBridgeEdge '
  	      + 'polyCacheMonitor polyCheck polyChipOff polyClipboard polyCloseBorder polyCollapseEdge '
  	      + 'polyCollapseFacet polyColorBlindData polyColorDel polyColorPerVertex polyColorSet '
  	      + 'polyCompare polyCone polyCopyUV polyCrease polyCreaseCtx polyCreateFacet '
  	      + 'polyCreateFacetCtx polyCube polyCut polyCutCtx polyCylinder polyCylindricalProjection '
  	      + 'polyDelEdge polyDelFacet polyDelVertex polyDuplicateAndConnect polyDuplicateEdge '
  	      + 'polyEditUV polyEditUVShell polyEvaluate polyExtrudeEdge polyExtrudeFacet '
  	      + 'polyExtrudeVertex polyFlipEdge polyFlipUV polyForceUV polyGeoSampler polyHelix '
  	      + 'polyInfo polyInstallAction polyLayoutUV polyListComponentConversion polyMapCut '
  	      + 'polyMapDel polyMapSew polyMapSewMove polyMergeEdge polyMergeEdgeCtx polyMergeFacet '
  	      + 'polyMergeFacetCtx polyMergeUV polyMergeVertex polyMirrorFace polyMoveEdge '
  	      + 'polyMoveFacet polyMoveFacetUV polyMoveUV polyMoveVertex polyNormal polyNormalPerVertex '
  	      + 'polyNormalizeUV polyOptUvs polyOptions polyOutput polyPipe polyPlanarProjection '
  	      + 'polyPlane polyPlatonicSolid polyPoke polyPrimitive polyPrism polyProjection '
  	      + 'polyPyramid polyQuad polyQueryBlindData polyReduce polySelect polySelectConstraint '
  	      + 'polySelectConstraintMonitor polySelectCtx polySelectEditCtx polySeparate '
  	      + 'polySetToFaceNormal polySewEdge polyShortestPathCtx polySmooth polySoftEdge '
  	      + 'polySphere polySphericalProjection polySplit polySplitCtx polySplitEdge polySplitRing '
  	      + 'polySplitVertex polyStraightenUVBorder polySubdivideEdge polySubdivideFacet '
  	      + 'polyToSubdiv polyTorus polyTransfer polyTriangulate polyUVSet polyUnite polyWedgeFace '
  	      + 'popen popupMenu pose pow preloadRefEd print progressBar progressWindow projFileViewer '
  	      + 'projectCurve projectTangent projectionContext projectionManip promptDialog propModCtx '
  	      + 'propMove psdChannelOutliner psdEditTextureFile psdExport psdTextureFile putenv pwd '
  	      + 'python querySubdiv quit rad_to_deg radial radioButton radioButtonGrp radioCollection '
  	      + 'radioMenuItemCollection rampColorPort rand randomizeFollicles randstate rangeControl '
  	      + 'readTake rebuildCurve rebuildSurface recordAttr recordDevice redo reference '
  	      + 'referenceEdit referenceQuery refineSubdivSelectionList refresh refreshAE '
  	      + 'registerPluginResource rehash reloadImage removeJoint removeMultiInstance '
  	      + 'removePanelCategory rename renameAttr renameSelectionList renameUI render '
  	      + 'renderGlobalsNode renderInfo renderLayerButton renderLayerParent '
  	      + 'renderLayerPostProcess renderLayerUnparent renderManip renderPartition '
  	      + 'renderQualityNode renderSettings renderThumbnailUpdate renderWindowEditor '
  	      + 'renderWindowSelectContext renderer reorder reorderDeformers requires reroot '
  	      + 'resampleFluid resetAE resetPfxToPolyCamera resetTool resolutionNode retarget '
  	      + 'reverseCurve reverseSurface revolve rgb_to_hsv rigidBody rigidSolver roll rollCtx '
  	      + 'rootOf rot rotate rotationInterpolation roundConstantRadius rowColumnLayout rowLayout '
  	      + 'runTimeCommand runup sampleImage saveAllShelves saveAttrPreset saveFluid saveImage '
  	      + 'saveInitialState saveMenu savePrefObjects savePrefs saveShelf saveToolSettings scale '
  	      + 'scaleBrushBrightness scaleComponents scaleConstraint scaleKey scaleKeyCtx sceneEditor '
  	      + 'sceneUIReplacement scmh scriptCtx scriptEditorInfo scriptJob scriptNode scriptTable '
  	      + 'scriptToShelf scriptedPanel scriptedPanelType scrollField scrollLayout sculpt '
  	      + 'searchPathArray seed selLoadSettings select selectContext selectCurveCV selectKey '
  	      + 'selectKeyCtx selectKeyframeRegionCtx selectMode selectPref selectPriority selectType '
  	      + 'selectedNodes selectionConnection separator setAttr setAttrEnumResource '
  	      + 'setAttrMapping setAttrNiceNameResource setConstraintRestPosition '
  	      + 'setDefaultShadingGroup setDrivenKeyframe setDynamic setEditCtx setEditor setFluidAttr '
  	      + 'setFocus setInfinity setInputDeviceMapping setKeyCtx setKeyPath setKeyframe '
  	      + 'setKeyframeBlendshapeTargetWts setMenuMode setNodeNiceNameResource setNodeTypeFlag '
  	      + 'setParent setParticleAttr setPfxToPolyCamera setPluginResource setProject '
  	      + 'setStampDensity setStartupMessage setState setToolTo setUITemplate setXformManip sets '
  	      + 'shadingConnection shadingGeometryRelCtx shadingLightRelCtx shadingNetworkCompare '
  	      + 'shadingNode shapeCompare shelfButton shelfLayout shelfTabLayout shellField '
  	      + 'shortNameOf showHelp showHidden showManipCtx showSelectionInTitle '
  	      + 'showShadingGroupAttrEditor showWindow sign simplify sin singleProfileBirailSurface '
  	      + 'size sizeBytes skinCluster skinPercent smoothCurve smoothTangentSurface smoothstep '
  	      + 'snap2to2 snapKey snapMode snapTogetherCtx snapshot soft softMod softModCtx sort sound '
  	      + 'soundControl source spaceLocator sphere sphrand spotLight spotLightPreviewPort '
  	      + 'spreadSheetEditor spring sqrt squareSurface srtContext stackTrace startString '
  	      + 'startsWith stitchAndExplodeShell stitchSurface stitchSurfacePoints strcmp '
  	      + 'stringArrayCatenate stringArrayContains stringArrayCount stringArrayInsertAtIndex '
  	      + 'stringArrayIntersector stringArrayRemove stringArrayRemoveAtIndex '
  	      + 'stringArrayRemoveDuplicates stringArrayRemoveExact stringArrayToString '
  	      + 'stringToStringArray strip stripPrefixFromName stroke subdAutoProjection '
  	      + 'subdCleanTopology subdCollapse subdDuplicateAndConnect subdEditUV '
  	      + 'subdListComponentConversion subdMapCut subdMapSewMove subdMatchTopology subdMirror '
  	      + 'subdToBlind subdToPoly subdTransferUVsToCache subdiv subdivCrease '
  	      + 'subdivDisplaySmoothness substitute substituteAllString substituteGeometry substring '
  	      + 'surface surfaceSampler surfaceShaderList swatchDisplayPort switchTable symbolButton '
  	      + 'symbolCheckBox sysFile system tabLayout tan tangentConstraint texLatticeDeformContext '
  	      + 'texManipContext texMoveContext texMoveUVShellContext texRotateContext texScaleContext '
  	      + 'texSelectContext texSelectShortestPathCtx texSmudgeUVContext texWinToolCtx text '
  	      + 'textCurves textField textFieldButtonGrp textFieldGrp textManip textScrollList '
  	      + 'textToShelf textureDisplacePlane textureHairColor texturePlacementContext '
  	      + 'textureWindow threadCount threePointArcCtx timeControl timePort timerX toNativePath '
  	      + 'toggle toggleAxis toggleWindowVisibility tokenize tokenizeList tolerance tolower '
  	      + 'toolButton toolCollection toolDropped toolHasOptions toolPropertyWindow torus toupper '
  	      + 'trace track trackCtx transferAttributes transformCompare transformLimits translator '
  	      + 'trim trunc truncateFluidCache truncateHairCache tumble tumbleCtx turbulence '
  	      + 'twoPointArcCtx uiRes uiTemplate unassignInputDevice undo undoInfo ungroup uniform unit '
  	      + 'unloadPlugin untangleUV untitledFileName untrim upAxis updateAE userCtx uvLink '
  	      + 'uvSnapshot validateShelfName vectorize view2dToolCtx viewCamera viewClipPlane '
  	      + 'viewFit viewHeadOn viewLookAt viewManip viewPlace viewSet visor volumeAxis vortex '
  	      + 'waitCursor warning webBrowser webBrowserPrefs whatIs window windowPref wire '
  	      + 'wireContext workspace wrinkle wrinkleContext writeTake xbmLangPathList xform',
  	    illegal: '</',
  	    contains: [
  	      hljs.C_NUMBER_MODE,
  	      hljs.APOS_STRING_MODE,
  	      hljs.QUOTE_STRING_MODE,
  	      {
  	        className: 'string',
  	        begin: '`',
  	        end: '`',
  	        contains: [ hljs.BACKSLASH_ESCAPE ]
  	      },
  	      { // eats variables
  	        begin: /[$%@](\^\w\b|#\w+|[^\s\w{]|\{\w+\}|\w+)/ },
  	      hljs.C_LINE_COMMENT_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE
  	    ]
  	  };
  	}

  	mel_1 = mel;
  	return mel_1;
  }

  /*
  Language: Mercury
  Author: mucaho <mkucko@gmail.com>
  Description: Mercury is a logic/functional programming language which combines the clarity and expressiveness of declarative programming with advanced static analysis and error detection features.
  Website: https://www.mercurylang.org
  */

  var mercury_1;
  var hasRequiredMercury;

  function requireMercury () {
  	if (hasRequiredMercury) return mercury_1;
  	hasRequiredMercury = 1;
  	function mercury(hljs) {
  	  const KEYWORDS = {
  	    keyword:
  	      'module use_module import_module include_module end_module initialise '
  	      + 'mutable initialize finalize finalise interface implementation pred '
  	      + 'mode func type inst solver any_pred any_func is semidet det nondet '
  	      + 'multi erroneous failure cc_nondet cc_multi typeclass instance where '
  	      + 'pragma promise external trace atomic or_else require_complete_switch '
  	      + 'require_det require_semidet require_multi require_nondet '
  	      + 'require_cc_multi require_cc_nondet require_erroneous require_failure',
  	    meta:
  	      // pragma
  	      'inline no_inline type_spec source_file fact_table obsolete memo '
  	      + 'loop_check minimal_model terminates does_not_terminate '
  	      + 'check_termination promise_equivalent_clauses '
  	      // preprocessor
  	      + 'foreign_proc foreign_decl foreign_code foreign_type '
  	      + 'foreign_import_module foreign_export_enum foreign_export '
  	      + 'foreign_enum may_call_mercury will_not_call_mercury thread_safe '
  	      + 'not_thread_safe maybe_thread_safe promise_pure promise_semipure '
  	      + 'tabled_for_io local untrailed trailed attach_to_io_state '
  	      + 'can_pass_as_mercury_type stable will_not_throw_exception '
  	      + 'may_modify_trail will_not_modify_trail may_duplicate '
  	      + 'may_not_duplicate affects_liveness does_not_affect_liveness '
  	      + 'doesnt_affect_liveness no_sharing unknown_sharing sharing',
  	    built_in:
  	      'some all not if then else true fail false try catch catch_any '
  	      + 'semidet_true semidet_false semidet_fail impure_true impure semipure'
  	  };

  	  const COMMENT = hljs.COMMENT('%', '$');

  	  const NUMCODE = {
  	    className: 'number',
  	    begin: "0'.\\|0[box][0-9a-fA-F]*"
  	  };

  	  const ATOM = hljs.inherit(hljs.APOS_STRING_MODE, { relevance: 0 });
  	  const STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, { relevance: 0 });
  	  const STRING_FMT = {
  	    className: 'subst',
  	    begin: '\\\\[abfnrtv]\\|\\\\x[0-9a-fA-F]*\\\\\\|%[-+# *.0-9]*[dioxXucsfeEgGp]',
  	    relevance: 0
  	  };
  	  STRING.contains = STRING.contains.slice(); // we need our own copy of contains
  	  STRING.contains.push(STRING_FMT);

  	  const IMPLICATION = {
  	    className: 'built_in',
  	    variants: [
  	      { begin: '<=>' },
  	      {
  	        begin: '<=',
  	        relevance: 0
  	      },
  	      {
  	        begin: '=>',
  	        relevance: 0
  	      },
  	      { begin: '/\\\\' },
  	      { begin: '\\\\/' }
  	    ]
  	  };

  	  const HEAD_BODY_CONJUNCTION = {
  	    className: 'built_in',
  	    variants: [
  	      { begin: ':-\\|-->' },
  	      {
  	        begin: '=',
  	        relevance: 0
  	      }
  	    ]
  	  };

  	  return {
  	    name: 'Mercury',
  	    aliases: [
  	      'm',
  	      'moo'
  	    ],
  	    keywords: KEYWORDS,
  	    contains: [
  	      IMPLICATION,
  	      HEAD_BODY_CONJUNCTION,
  	      COMMENT,
  	      hljs.C_BLOCK_COMMENT_MODE,
  	      NUMCODE,
  	      hljs.NUMBER_MODE,
  	      ATOM,
  	      STRING,
  	      { // relevance booster
  	        begin: /:-/ },
  	      { // relevance booster
  	        begin: /\.$/ }
  	    ]
  	  };
  	}

  	mercury_1 = mercury;
  	return mercury_1;
  }

  /*
  Language: MIPS Assembly
  Author: Nebuleon Fumika <nebuleon.fumika@gmail.com>
  Description: MIPS Assembly (up to MIPS32R2)
  Website: https://en.wikipedia.org/wiki/MIPS_architecture
  Category: assembler
  */

  var mipsasm_1;
  var hasRequiredMipsasm;

  function requireMipsasm () {
  	if (hasRequiredMipsasm) return mipsasm_1;
  	hasRequiredMipsasm = 1;
  	function mipsasm(hljs) {
  	  // local labels: %?[FB]?[AT]?\d{1,2}\w+
  	  return {
  	    name: 'MIPS Assembly',
  	    case_insensitive: true,
  	    aliases: [ 'mips' ],
  	    keywords: {
  	      $pattern: '\\.?' + hljs.IDENT_RE,
  	      meta:
  	        // GNU preprocs
  	        '.2byte .4byte .align .ascii .asciz .balign .byte .code .data .else .end .endif .endm .endr .equ .err .exitm .extern .global .hword .if .ifdef .ifndef .include .irp .long .macro .rept .req .section .set .skip .space .text .word .ltorg ',
  	      built_in:
  	        '$0 $1 $2 $3 $4 $5 $6 $7 $8 $9 $10 $11 $12 $13 $14 $15 ' // integer registers
  	        + '$16 $17 $18 $19 $20 $21 $22 $23 $24 $25 $26 $27 $28 $29 $30 $31 ' // integer registers
  	        + 'zero at v0 v1 a0 a1 a2 a3 a4 a5 a6 a7 ' // integer register aliases
  	        + 't0 t1 t2 t3 t4 t5 t6 t7 t8 t9 s0 s1 s2 s3 s4 s5 s6 s7 s8 ' // integer register aliases
  	        + 'k0 k1 gp sp fp ra ' // integer register aliases
  	        + '$f0 $f1 $f2 $f2 $f4 $f5 $f6 $f7 $f8 $f9 $f10 $f11 $f12 $f13 $f14 $f15 ' // floating-point registers
  	        + '$f16 $f17 $f18 $f19 $f20 $f21 $f22 $f23 $f24 $f25 $f26 $f27 $f28 $f29 $f30 $f31 ' // floating-point registers
  	        + 'Context Random EntryLo0 EntryLo1 Context PageMask Wired EntryHi ' // Coprocessor 0 registers
  	        + 'HWREna BadVAddr Count Compare SR IntCtl SRSCtl SRSMap Cause EPC PRId ' // Coprocessor 0 registers
  	        + 'EBase Config Config1 Config2 Config3 LLAddr Debug DEPC DESAVE CacheErr ' // Coprocessor 0 registers
  	        + 'ECC ErrorEPC TagLo DataLo TagHi DataHi WatchLo WatchHi PerfCtl PerfCnt ' // Coprocessor 0 registers
  	    },
  	    contains: [
  	      {
  	        className: 'keyword',
  	        begin: '\\b(' // mnemonics
  	            // 32-bit integer instructions
  	            + 'addi?u?|andi?|b(al)?|beql?|bgez(al)?l?|bgtzl?|blezl?|bltz(al)?l?|'
  	            + 'bnel?|cl[oz]|divu?|ext|ins|j(al)?|jalr(\\.hb)?|jr(\\.hb)?|lbu?|lhu?|'
  	            + 'll|lui|lw[lr]?|maddu?|mfhi|mflo|movn|movz|move|msubu?|mthi|mtlo|mul|'
  	            + 'multu?|nop|nor|ori?|rotrv?|sb|sc|se[bh]|sh|sllv?|slti?u?|srav?|'
  	            + 'srlv?|subu?|sw[lr]?|xori?|wsbh|'
  	            // floating-point instructions
  	            + 'abs\\.[sd]|add\\.[sd]|alnv.ps|bc1[ft]l?|'
  	            + 'c\\.(s?f|un|u?eq|[ou]lt|[ou]le|ngle?|seq|l[et]|ng[et])\\.[sd]|'
  	            + '(ceil|floor|round|trunc)\\.[lw]\\.[sd]|cfc1|cvt\\.d\\.[lsw]|'
  	            + 'cvt\\.l\\.[dsw]|cvt\\.ps\\.s|cvt\\.s\\.[dlw]|cvt\\.s\\.p[lu]|cvt\\.w\\.[dls]|'
  	            + 'div\\.[ds]|ldx?c1|luxc1|lwx?c1|madd\\.[sd]|mfc1|mov[fntz]?\\.[ds]|'
  	            + 'msub\\.[sd]|mth?c1|mul\\.[ds]|neg\\.[ds]|nmadd\\.[ds]|nmsub\\.[ds]|'
  	            + 'p[lu][lu]\\.ps|recip\\.fmt|r?sqrt\\.[ds]|sdx?c1|sub\\.[ds]|suxc1|'
  	            + 'swx?c1|'
  	            // system control instructions
  	            + 'break|cache|d?eret|[de]i|ehb|mfc0|mtc0|pause|prefx?|rdhwr|'
  	            + 'rdpgpr|sdbbp|ssnop|synci?|syscall|teqi?|tgei?u?|tlb(p|r|w[ir])|'
  	            + 'tlti?u?|tnei?|wait|wrpgpr'
  	        + ')',
  	        end: '\\s'
  	      },
  	      // lines ending with ; or # aren't really comments, probably auto-detect fail
  	      hljs.COMMENT('[;#](?!\\s*$)', '$'),
  	      hljs.C_BLOCK_COMMENT_MODE,
  	      hljs.QUOTE_STRING_MODE,
  	      {
  	        className: 'string',
  	        begin: '\'',
  	        end: '[^\\\\]\'',
  	        relevance: 0
  	      },
  	      {
  	        className: 'title',
  	        begin: '\\|',
  	        end: '\\|',
  	        illegal: '\\n',
  	        relevance: 0
  	      },
  	      {
  	        className: 'number',
  	        variants: [
  	          { // hex
  	            begin: '0x[0-9a-f]+' },
  	          { // bare number
  	            begin: '\\b-?\\d+' }
  	        ],
  	        relevance: 0
  	      },
  	      {
  	        className: 'symbol',
  	        variants: [
  	          { // GNU MIPS syntax
  	            begin: '^\\s*[a-z_\\.\\$][a-z0-9_\\.\\$]+:' },
  	          { // numbered local labels
  	            begin: '^\\s*[0-9]+:' },
  	          { // number local label reference (backwards, forwards)
  	            begin: '[0-9]+[bf]' }
  	        ],
  	        relevance: 0
  	      }
  	    ],
  	    // forward slashes are not allowed
  	    illegal: /\//
  	  };
  	}

  	mipsasm_1 = mipsasm;
  	return mipsasm_1;
  }

  /*
  Language: Mizar
  Description: The Mizar Language is a formal language derived from the mathematical vernacular.
  Author: Kelley van Evert <kelleyvanevert@gmail.com>
  Website: http://mizar.org/language/
  Category: scientific
  */

  var mizar_1;
  var hasRequiredMizar;

  function requireMizar () {
  	if (hasRequiredMizar) return mizar_1;
  	hasRequiredMizar = 1;
  	function mizar(hljs) {
  	  return {
  	    name: 'Mizar',
  	    keywords:
  	      'environ vocabularies notations constructors definitions '
  	      + 'registrations theorems schemes requirements begin end definition '
  	      + 'registration cluster existence pred func defpred deffunc theorem '
  	      + 'proof let take assume then thus hence ex for st holds consider '
  	      + 'reconsider such that and in provided of as from be being by means '
  	      + 'equals implies iff redefine define now not or attr is mode '
  	      + 'suppose per cases set thesis contradiction scheme reserve struct '
  	      + 'correctness compatibility coherence symmetry assymetry '
  	      + 'reflexivity irreflexivity connectedness uniqueness commutativity '
  	      + 'idempotence involutiveness projectivity',
  	    contains: [ hljs.COMMENT('::', '$') ]
  	  };
  	}

  	mizar_1 = mizar;
  	return mizar_1;
  }

  /*
  Language: Perl
  Author: Peter Leonov <gojpeg@yandex.ru>
  Website: https://www.perl.org
  Category: common
  */

  var perl_1;
  var hasRequiredPerl;

  function requirePerl () {
  	if (hasRequiredPerl) return perl_1;
  	hasRequiredPerl = 1;
  	/** @type LanguageFn */
  	function perl(hljs) {
  	  const regex = hljs.regex;
  	  const KEYWORDS = [
  	    'abs',
  	    'accept',
  	    'alarm',
  	    'and',
  	    'atan2',
  	    'bind',
  	    'binmode',
  	    'bless',
  	    'break',
  	    'caller',
  	    'chdir',
  	    'chmod',
  	    'chomp',
  	    'chop',
  	    'chown',
  	    'chr',
  	    'chroot',
  	    'close',
  	    'closedir',
  	    'connect',
  	    'continue',
  	    'cos',
  	    'crypt',
  	    'dbmclose',
  	    'dbmopen',
  	    'defined',
  	    'delete',
  	    'die',
  	    'do',
  	    'dump',
  	    'each',
  	    'else',
  	    'elsif',
  	    'endgrent',
  	    'endhostent',
  	    'endnetent',
  	    'endprotoent',
  	    'endpwent',
  	    'endservent',
  	    'eof',
  	    'eval',
  	    'exec',
  	    'exists',
  	    'exit',
  	    'exp',
  	    'fcntl',
  	    'fileno',
  	    'flock',
  	    'for',
  	    'foreach',
  	    'fork',
  	    'format',
  	    'formline',
  	    'getc',
  	    'getgrent',
  	    'getgrgid',
  	    'getgrnam',
  	    'gethostbyaddr',
  	    'gethostbyname',
  	    'gethostent',
  	    'getlogin',
  	    'getnetbyaddr',
  	    'getnetbyname',
  	    'getnetent',
  	    'getpeername',
  	    'getpgrp',
  	    'getpriority',
  	    'getprotobyname',
  	    'getprotobynumber',
  	    'getprotoent',
  	    'getpwent',
  	    'getpwnam',
  	    'getpwuid',
  	    'getservbyname',
  	    'getservbyport',
  	    'getservent',
  	    'getsockname',
  	    'getsockopt',
  	    'given',
  	    'glob',
  	    'gmtime',
  	    'goto',
  	    'grep',
  	    'gt',
  	    'hex',
  	    'if',
  	    'index',
  	    'int',
  	    'ioctl',
  	    'join',
  	    'keys',
  	    'kill',
  	    'last',
  	    'lc',
  	    'lcfirst',
  	    'length',
  	    'link',
  	    'listen',
  	    'local',
  	    'localtime',
  	    'log',
  	    'lstat',
  	    'lt',
  	    'ma',
  	    'map',
  	    'mkdir',
  	    'msgctl',
  	    'msgget',
  	    'msgrcv',
  	    'msgsnd',
  	    'my',
  	    'ne',
  	    'next',
  	    'no',
  	    'not',
  	    'oct',
  	    'open',
  	    'opendir',
  	    'or',
  	    'ord',
  	    'our',
  	    'pack',
  	    'package',
  	    'pipe',
  	    'pop',
  	    'pos',
  	    'print',
  	    'printf',
  	    'prototype',
  	    'push',
  	    'q|0',
  	    'qq',
  	    'quotemeta',
  	    'qw',
  	    'qx',
  	    'rand',
  	    'read',
  	    'readdir',
  	    'readline',
  	    'readlink',
  	    'readpipe',
  	    'recv',
  	    'redo',
  	    'ref',
  	    'rename',
  	    'require',
  	    'reset',
  	    'return',
  	    'reverse',
  	    'rewinddir',
  	    'rindex',
  	    'rmdir',
  	    'say',
  	    'scalar',
  	    'seek',
  	    'seekdir',
  	    'select',
  	    'semctl',
  	    'semget',
  	    'semop',
  	    'send',
  	    'setgrent',
  	    'sethostent',
  	    'setnetent',
  	    'setpgrp',
  	    'setpriority',
  	    'setprotoent',
  	    'setpwent',
  	    'setservent',
  	    'setsockopt',
  	    'shift',
  	    'shmctl',
  	    'shmget',
  	    'shmread',
  	    'shmwrite',
  	    'shutdown',
  	    'sin',
  	    'sleep',
  	    'socket',
  	    'socketpair',
  	    'sort',
  	    'splice',
  	    'split',
  	    'sprintf',
  	    'sqrt',
  	    'srand',
  	    'stat',
  	    'state',
  	    'study',
  	    'sub',
  	    'substr',
  	    'symlink',
  	    'syscall',
  	    'sysopen',
  	    'sysread',
  	    'sysseek',
  	    'system',
  	    'syswrite',
  	    'tell',
  	    'telldir',
  	    'tie',
  	    'tied',
  	    'time',
  	    'times',
  	    'tr',
  	    'truncate',
  	    'uc',
  	    'ucfirst',
  	    'umask',
  	    'undef',
  	    'unless',
  	    'unlink',
  	    'unpack',
  	    'unshift',
  	    'untie',
  	    'until',
  	    'use',
  	    'utime',
  	    'values',
  	    'vec',
  	    'wait',
  	    'waitpid',
  	    'wantarray',
  	    'warn',
  	    'when',
  	    'while',
  	    'write',
  	    'x|0',
  	    'xor',
  	    'y|0'
  	  ];

  	  // https://perldoc.perl.org/perlre#Modifiers
  	  const REGEX_MODIFIERS = /[dualxmsipngr]{0,12}/; // aa and xx are valid, making max length 12
  	  const PERL_KEYWORDS = {
  	    $pattern: /[\w.]+/,
  	    keyword: KEYWORDS.join(" ")
  	  };
  	  const SUBST = {
  	    className: 'subst',
  	    begin: '[$@]\\{',
  	    end: '\\}',
  	    keywords: PERL_KEYWORDS
  	  };
  	  const METHOD = {
  	    begin: /->\{/,
  	    end: /\}/
  	    // contains defined later
  	  };
  	  const VAR = { variants: [
  	    { begin: /\$\d/ },
  	    { begin: regex.concat(
  	      /[$%@](\^\w\b|#\w+(::\w+)*|\{\w+\}|\w+(::\w*)*)/,
  	      // negative look-ahead tries to avoid matching patterns that are not
  	      // Perl at all like $ident$, @ident@, etc.
  	      `(?![A-Za-z])(?![@$%])`
  	    ) },
  	    {
  	      begin: /[$%@][^\s\w{]/,
  	      relevance: 0
  	    }
  	  ] };
  	  const STRING_CONTAINS = [
  	    hljs.BACKSLASH_ESCAPE,
  	    SUBST,
  	    VAR
  	  ];
  	  const REGEX_DELIMS = [
  	    /!/,
  	    /\//,
  	    /\|/,
  	    /\?/,
  	    /'/,
  	    /"/, // valid but infrequent and weird
  	    /#/ // valid but infrequent and weird
  	  ];
  	  /**
  	   * @param {string|RegExp} prefix
  	   * @param {string|RegExp} open
  	   * @param {string|RegExp} close
  	   */
  	  const PAIRED_DOUBLE_RE = (prefix, open, close = '\\1') => {
  	    const middle = (close === '\\1')
  	      ? close
  	      : regex.concat(close, open);
  	    return regex.concat(
  	      regex.concat("(?:", prefix, ")"),
  	      open,
  	      /(?:\\.|[^\\\/])*?/,
  	      middle,
  	      /(?:\\.|[^\\\/])*?/,
  	      close,
  	      REGEX_MODIFIERS
  	    );
  	  };
  	  /**
  	   * @param {string|RegExp} prefix
  	   * @param {string|RegExp} open
  	   * @param {string|RegExp} close
  	   */
  	  const PAIRED_RE = (prefix, open, close) => {
  	    return regex.concat(
  	      regex.concat("(?:", prefix, ")"),
  	      open,
  	      /(?:\\.|[^\\\/])*?/,
  	      close,
  	      REGEX_MODIFIERS
  	    );
  	  };
  	  const PERL_DEFAULT_CONTAINS = [
  	    VAR,
  	    hljs.HASH_COMMENT_MODE,
  	    hljs.COMMENT(
  	      /^=\w/,
  	      /=cut/,
  	      { endsWithParent: true }
  	    ),
  	    METHOD,
  	    {
  	      className: 'string',
  	      contains: STRING_CONTAINS,
  	      variants: [
  	        {
  	          begin: 'q[qwxr]?\\s*\\(',
  	          end: '\\)',
  	          relevance: 5
  	        },
  	        {
  	          begin: 'q[qwxr]?\\s*\\[',
  	          end: '\\]',
  	          relevance: 5
  	        },
  	        {
  	          begin: 'q[qwxr]?\\s*\\{',
  	          end: '\\}',
  	          relevance: 5
  	        },
  	        {
  	          begin: 'q[qwxr]?\\s*\\|',
  	          end: '\\|',
  	          relevance: 5
  	        },
  	        {
  	          begin: 'q[qwxr]?\\s*<',
  	          end: '>',
  	          relevance: 5
  	        },
  	        {
  	          begin: 'qw\\s+q',
  	          end: 'q',
  	          relevance: 5
  	        },
  	        {
  	          begin: '\'',
  	          end: '\'',
  	          contains: [ hljs.BACKSLASH_ESCAPE ]
  	        },
  	        {
  	          begin: '"',
  	          end: '"'
  	        },
  	        {
  	          begin: '`',
  	          end: '`',
  	          contains: [ hljs.BACKSLASH_ESCAPE ]
  	        },
  	        {
  	          begin: /\{\w+\}/,
  	          relevance: 0
  	        },
  	        {
  	          begin: '-?\\w+\\s*=>',
  	          relevance: 0
  	        }
  	      ]
  	    },
  	    {
  	      className: 'number',
  	      begin: '(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b',
  	      relevance: 0
  	    },
  	    { // regexp container
  	      begin: '(\\/\\/|' + hljs.RE_STARTERS_RE + '|\\b(split|return|print|reverse|grep)\\b)\\s*',
  	      keywords: 'split return print reverse grep',
  	      relevance: 0,
  	      contains: [
  	        hljs.HASH_COMMENT_MODE,
  	        {
  	          className: 'regexp',
  	          variants: [
  	            // allow matching common delimiters
  	            { begin: PAIRED_DOUBLE_RE("s|tr|y", regex.either(...REGEX_DELIMS, { capture: true })) },
  	            // and then paired delmis
  	            { begin: PAIRED_DOUBLE_RE("s|tr|y", "\\(", "\\)") },
  	            { begin: PAIRED_DOUBLE_RE("s|tr|y", "\\[", "\\]") },
  	            { begin: PAIRED_DOUBLE_RE("s|tr|y", "\\{", "\\}") }
  	          ],
  	          relevance: 2
  	        },
  	        {
  	          className: 'regexp',
  	          variants: [
  	            {
  	              // could be a comment in many languages so do not count
  	              // as relevant
  	              begin: /(m|qr)\/\//,
  	              relevance: 0
  	            },
  	            // prefix is optional with /regex/
  	            { begin: PAIRED_RE("(?:m|qr)?", /\//, /\//) },
  	            // allow matching common delimiters
  	            { begin: PAIRED_RE("m|qr", regex.either(...REGEX_DELIMS, { capture: true }), /\1/) },
  	            // allow common paired delmins
  	            { begin: PAIRED_RE("m|qr", /\(/, /\)/) },
  	            { begin: PAIRED_RE("m|qr", /\[/, /\]/) },
  	            { begin: PAIRED_RE("m|qr", /\{/, /\}/) }
  	          ]
  	        }
  	      ]
  	    },
  	    {
  	      className: 'function',
  	      beginKeywords: 'sub',
  	      end: '(\\s*\\(.*?\\))?[;{]',
  	      excludeEnd: true,
  	      relevance: 5,
  	      contains: [ hljs.TITLE_MODE ]
  	    },
  	    {
  	      begin: '-\\w\\b',
  	      relevance: 0
  	    },
  	    {
  	      begin: "^__DATA__$",
  	      end: "^__END__$",
  	      subLanguage: 'mojolicious',
  	      contains: [
  	        {
  	          begin: "^@@.*",
  	          end: "$",
  	          className: "comment"
  	        }
  	      ]
  	    }
  	  ];
  	  SUBST.contains = PERL_DEFAULT_CONTAINS;
  	  METHOD.contains = PERL_DEFAULT_CONTAINS;

  	  return {
  	    name: 'Perl',
  	    aliases: [
  	      'pl',
  	      'pm'
  	    ],
  	    keywords: PERL_KEYWORDS,
  	    contains: PERL_DEFAULT_CONTAINS
  	  };
  	}

  	perl_1 = perl;
  	return perl_1;
  }

  /*
  Language: Mojolicious
  Requires: xml.js, perl.js
  Author: Dotan Dimet <dotan@corky.net>
  Description: Mojolicious .ep (Embedded Perl) templates
  Website: https://mojolicious.org
  Category: template
  */

  var mojolicious_1;
  var hasRequiredMojolicious;

  function requireMojolicious () {
  	if (hasRequiredMojolicious) return mojolicious_1;
  	hasRequiredMojolicious = 1;
  	function mojolicious(hljs) {
  	  return {
  	    name: 'Mojolicious',
  	    subLanguage: 'xml',
  	    contains: [
  	      {
  	        className: 'meta',
  	        begin: '^__(END|DATA)__$'
  	      },
  	      // mojolicious line
  	      {
  	        begin: "^\\s*%{1,2}={0,2}",
  	        end: '$',
  	        subLanguage: 'perl'
  	      },
  	      // mojolicious block
  	      {
  	        begin: "<%{1,2}={0,2}",
  	        end: "={0,1}%>",
  	        subLanguage: 'perl',
  	        excludeBegin: true,
  	        excludeEnd: true
  	      }
  	    ]
  	  };
  	}

  	mojolicious_1 = mojolicious;
  	return mojolicious_1;
  }

  /*
  Language: Monkey
  Description: Monkey2 is an easy to use, cross platform, games oriented programming language from Blitz Research.
  Author: Arthur Bikmullin <devolonter@gmail.com>
  Website: https://blitzresearch.itch.io/monkey2
  */

  var monkey_1;
  var hasRequiredMonkey;

  function requireMonkey () {
  	if (hasRequiredMonkey) return monkey_1;
  	hasRequiredMonkey = 1;
  	function monkey(hljs) {
  	  const NUMBER = {
  	    className: 'number',
  	    relevance: 0,
  	    variants: [
  	      { begin: '[$][a-fA-F0-9]+' },
  	      hljs.NUMBER_MODE
  	    ]
  	  };
  	  const FUNC_DEFINITION = {
  	    variants: [
  	      { match: [
  	        /(function|method)/,
  	        /\s+/,
  	        hljs.UNDERSCORE_IDENT_RE,
  	      ] },
  	    ],
  	    scope: {
  	      1: "keyword",
  	      3: "title.function"
  	    }
  	  };
  	  const CLASS_DEFINITION = {
  	    variants: [
  	      { match: [
  	        /(class|interface|extends|implements)/,
  	        /\s+/,
  	        hljs.UNDERSCORE_IDENT_RE,
  	      ] },
  	    ],
  	    scope: {
  	      1: "keyword",
  	      3: "title.class"
  	    }
  	  };
  	  const BUILT_INS = [
  	    "DebugLog",
  	    "DebugStop",
  	    "Error",
  	    "Print",
  	    "ACos",
  	    "ACosr",
  	    "ASin",
  	    "ASinr",
  	    "ATan",
  	    "ATan2",
  	    "ATan2r",
  	    "ATanr",
  	    "Abs",
  	    "Abs",
  	    "Ceil",
  	    "Clamp",
  	    "Clamp",
  	    "Cos",
  	    "Cosr",
  	    "Exp",
  	    "Floor",
  	    "Log",
  	    "Max",
  	    "Max",
  	    "Min",
  	    "Min",
  	    "Pow",
  	    "Sgn",
  	    "Sgn",
  	    "Sin",
  	    "Sinr",
  	    "Sqrt",
  	    "Tan",
  	    "Tanr",
  	    "Seed",
  	    "PI",
  	    "HALFPI",
  	    "TWOPI"
  	  ];
  	  const LITERALS = [
  	    "true",
  	    "false",
  	    "null"
  	  ];
  	  const KEYWORDS = [
  	    "public",
  	    "private",
  	    "property",
  	    "continue",
  	    "exit",
  	    "extern",
  	    "new",
  	    "try",
  	    "catch",
  	    "eachin",
  	    "not",
  	    "abstract",
  	    "final",
  	    "select",
  	    "case",
  	    "default",
  	    "const",
  	    "local",
  	    "global",
  	    "field",
  	    "end",
  	    "if",
  	    "then",
  	    "else",
  	    "elseif",
  	    "endif",
  	    "while",
  	    "wend",
  	    "repeat",
  	    "until",
  	    "forever",
  	    "for",
  	    "to",
  	    "step",
  	    "next",
  	    "return",
  	    "module",
  	    "inline",
  	    "throw",
  	    "import",
  	    // not positive, but these are not literals
  	    "and",
  	    "or",
  	    "shl",
  	    "shr",
  	    "mod"
  	  ];

  	  return {
  	    name: 'Monkey',
  	    case_insensitive: true,
  	    keywords: {
  	      keyword: KEYWORDS,
  	      built_in: BUILT_INS,
  	      literal: LITERALS
  	    },
  	    illegal: /\/\*/,
  	    contains: [
  	      hljs.COMMENT('#rem', '#end'),
  	      hljs.COMMENT(
  	        "'",
  	        '$',
  	        { relevance: 0 }
  	      ),
  	      FUNC_DEFINITION,
  	      CLASS_DEFINITION,
  	      {
  	        className: 'variable.language',
  	        begin: /\b(self|super)\b/
  	      },
  	      {
  	        className: 'meta',
  	        begin: /\s*#/,
  	        end: '$',
  	        keywords: { keyword: 'if else elseif endif end then' }
  	      },
  	      {
  	        match: [
  	          /^\s*/,
  	          /strict\b/
  	        ],
  	        scope: { 2: "meta" }
  	      },
  	      {
  	        beginKeywords: 'alias',
  	        end: '=',
  	        contains: [ hljs.UNDERSCORE_TITLE_MODE ]
  	      },
  	      hljs.QUOTE_STRING_MODE,
  	      NUMBER
  	    ]
  	  };
  	}

  	monkey_1 = monkey;
  	return monkey_1;
  }

  /*
  Language: MoonScript
  Author: Billy Quith <chinbillybilbo@gmail.com>
  Description: MoonScript is a programming language that transcompiles to Lua.
  Origin: coffeescript.js
  Website: http://moonscript.org/
  Category: scripting
  */

  var moonscript_1;
  var hasRequiredMoonscript;

  function requireMoonscript () {
  	if (hasRequiredMoonscript) return moonscript_1;
  	hasRequiredMoonscript = 1;
  	function moonscript(hljs) {
  	  const KEYWORDS = {
  	    keyword:
  	      // Moonscript keywords
  	      'if then not for in while do return else elseif break continue switch and or '
  	      + 'unless when class extends super local import export from using',
  	    literal:
  	      'true false nil',
  	    built_in:
  	      '_G _VERSION assert collectgarbage dofile error getfenv getmetatable ipairs load '
  	      + 'loadfile loadstring module next pairs pcall print rawequal rawget rawset require '
  	      + 'select setfenv setmetatable tonumber tostring type unpack xpcall coroutine debug '
  	      + 'io math os package string table'
  	  };
  	  const JS_IDENT_RE = '[A-Za-z$_][0-9A-Za-z$_]*';
  	  const SUBST = {
  	    className: 'subst',
  	    begin: /#\{/,
  	    end: /\}/,
  	    keywords: KEYWORDS
  	  };
  	  const EXPRESSIONS = [
  	    hljs.inherit(hljs.C_NUMBER_MODE,
  	      { starts: {
  	        end: '(\\s*/)?',
  	        relevance: 0
  	      } }), // a number tries to eat the following slash to prevent treating it as a regexp
  	    {
  	      className: 'string',
  	      variants: [
  	        {
  	          begin: /'/,
  	          end: /'/,
  	          contains: [ hljs.BACKSLASH_ESCAPE ]
  	        },
  	        {
  	          begin: /"/,
  	          end: /"/,
  	          contains: [
  	            hljs.BACKSLASH_ESCAPE,
  	            SUBST
  	          ]
  	        }
  	      ]
  	    },
  	    {
  	      className: 'built_in',
  	      begin: '@__' + hljs.IDENT_RE
  	    },
  	    { begin: '@' + hljs.IDENT_RE // relevance booster on par with CoffeeScript
  	    },
  	    { begin: hljs.IDENT_RE + '\\\\' + hljs.IDENT_RE // inst\method
  	    }
  	  ];
  	  SUBST.contains = EXPRESSIONS;

  	  const TITLE = hljs.inherit(hljs.TITLE_MODE, { begin: JS_IDENT_RE });
  	  const POSSIBLE_PARAMS_RE = '(\\(.*\\)\\s*)?\\B[-=]>';
  	  const PARAMS = {
  	    className: 'params',
  	    begin: '\\([^\\(]',
  	    returnBegin: true,
  	    /* We need another contained nameless mode to not have every nested
  	    pair of parens to be called "params" */
  	    contains: [
  	      {
  	        begin: /\(/,
  	        end: /\)/,
  	        keywords: KEYWORDS,
  	        contains: [ 'self' ].concat(EXPRESSIONS)
  	      }
  	    ]
  	  };

  	  return {
  	    name: 'MoonScript',
  	    aliases: [ 'moon' ],
  	    keywords: KEYWORDS,
  	    illegal: /\/\*/,
  	    contains: EXPRESSIONS.concat([
  	      hljs.COMMENT('--', '$'),
  	      {
  	        className: 'function', // function: -> =>
  	        begin: '^\\s*' + JS_IDENT_RE + '\\s*=\\s*' + POSSIBLE_PARAMS_RE,
  	        end: '[-=]>',
  	        returnBegin: true,
  	        contains: [
  	          TITLE,
  	          PARAMS
  	        ]
  	      },
  	      {
  	        begin: /[\(,:=]\s*/, // anonymous function start
  	        relevance: 0,
  	        contains: [
  	          {
  	            className: 'function',
  	            begin: POSSIBLE_PARAMS_RE,
  	            end: '[-=]>',
  	            returnBegin: true,
  	            contains: [ PARAMS ]
  	          }
  	        ]
  	      },
  	      {
  	        className: 'class',
  	        beginKeywords: 'class',
  	        end: '$',
  	        illegal: /[:="\[\]]/,
  	        contains: [
  	          {
  	            beginKeywords: 'extends',
  	            endsWithParent: true,
  	            illegal: /[:="\[\]]/,
  	            contains: [ TITLE ]
  	          },
  	          TITLE
  	        ]
  	      },
  	      {
  	        className: 'name', // table
  	        begin: JS_IDENT_RE + ':',
  	        end: ':',
  	        returnBegin: true,
  	        returnEnd: true,
  	        relevance: 0
  	      }
  	    ])
  	  };
  	}

  	moonscript_1 = moonscript;
  	return moonscript_1;
  }

  /*
   Language: N1QL
   Author: Andres Täht <andres.taht@gmail.com>
   Contributors: Rene Saarsoo <nene@triin.net>
   Description: Couchbase query language
   Website: https://www.couchbase.com/products/n1ql
   */

  var n1ql_1;
  var hasRequiredN1ql;

  function requireN1ql () {
  	if (hasRequiredN1ql) return n1ql_1;
  	hasRequiredN1ql = 1;
  	function n1ql(hljs) {
  	  // Taken from http://developer.couchbase.com/documentation/server/current/n1ql/n1ql-language-reference/reservedwords.html
  	  const KEYWORDS = [
  	    "all",
  	    "alter",
  	    "analyze",
  	    "and",
  	    "any",
  	    "array",
  	    "as",
  	    "asc",
  	    "begin",
  	    "between",
  	    "binary",
  	    "boolean",
  	    "break",
  	    "bucket",
  	    "build",
  	    "by",
  	    "call",
  	    "case",
  	    "cast",
  	    "cluster",
  	    "collate",
  	    "collection",
  	    "commit",
  	    "connect",
  	    "continue",
  	    "correlate",
  	    "cover",
  	    "create",
  	    "database",
  	    "dataset",
  	    "datastore",
  	    "declare",
  	    "decrement",
  	    "delete",
  	    "derived",
  	    "desc",
  	    "describe",
  	    "distinct",
  	    "do",
  	    "drop",
  	    "each",
  	    "element",
  	    "else",
  	    "end",
  	    "every",
  	    "except",
  	    "exclude",
  	    "execute",
  	    "exists",
  	    "explain",
  	    "fetch",
  	    "first",
  	    "flatten",
  	    "for",
  	    "force",
  	    "from",
  	    "function",
  	    "grant",
  	    "group",
  	    "gsi",
  	    "having",
  	    "if",
  	    "ignore",
  	    "ilike",
  	    "in",
  	    "include",
  	    "increment",
  	    "index",
  	    "infer",
  	    "inline",
  	    "inner",
  	    "insert",
  	    "intersect",
  	    "into",
  	    "is",
  	    "join",
  	    "key",
  	    "keys",
  	    "keyspace",
  	    "known",
  	    "last",
  	    "left",
  	    "let",
  	    "letting",
  	    "like",
  	    "limit",
  	    "lsm",
  	    "map",
  	    "mapping",
  	    "matched",
  	    "materialized",
  	    "merge",
  	    "minus",
  	    "namespace",
  	    "nest",
  	    "not",
  	    "number",
  	    "object",
  	    "offset",
  	    "on",
  	    "option",
  	    "or",
  	    "order",
  	    "outer",
  	    "over",
  	    "parse",
  	    "partition",
  	    "password",
  	    "path",
  	    "pool",
  	    "prepare",
  	    "primary",
  	    "private",
  	    "privilege",
  	    "procedure",
  	    "public",
  	    "raw",
  	    "realm",
  	    "reduce",
  	    "rename",
  	    "return",
  	    "returning",
  	    "revoke",
  	    "right",
  	    "role",
  	    "rollback",
  	    "satisfies",
  	    "schema",
  	    "select",
  	    "self",
  	    "semi",
  	    "set",
  	    "show",
  	    "some",
  	    "start",
  	    "statistics",
  	    "string",
  	    "system",
  	    "then",
  	    "to",
  	    "transaction",
  	    "trigger",
  	    "truncate",
  	    "under",
  	    "union",
  	    "unique",
  	    "unknown",
  	    "unnest",
  	    "unset",
  	    "update",
  	    "upsert",
  	    "use",
  	    "user",
  	    "using",
  	    "validate",
  	    "value",
  	    "valued",
  	    "values",
  	    "via",
  	    "view",
  	    "when",
  	    "where",
  	    "while",
  	    "with",
  	    "within",
  	    "work",
  	    "xor"
  	  ];
  	  // Taken from http://developer.couchbase.com/documentation/server/4.5/n1ql/n1ql-language-reference/literals.html
  	  const LITERALS = [
  	    "true",
  	    "false",
  	    "null",
  	    "missing|5"
  	  ];
  	  // Taken from http://developer.couchbase.com/documentation/server/4.5/n1ql/n1ql-language-reference/functions.html
  	  const BUILT_INS = [
  	    "array_agg",
  	    "array_append",
  	    "array_concat",
  	    "array_contains",
  	    "array_count",
  	    "array_distinct",
  	    "array_ifnull",
  	    "array_length",
  	    "array_max",
  	    "array_min",
  	    "array_position",
  	    "array_prepend",
  	    "array_put",
  	    "array_range",
  	    "array_remove",
  	    "array_repeat",
  	    "array_replace",
  	    "array_reverse",
  	    "array_sort",
  	    "array_sum",
  	    "avg",
  	    "count",
  	    "max",
  	    "min",
  	    "sum",
  	    "greatest",
  	    "least",
  	    "ifmissing",
  	    "ifmissingornull",
  	    "ifnull",
  	    "missingif",
  	    "nullif",
  	    "ifinf",
  	    "ifnan",
  	    "ifnanorinf",
  	    "naninf",
  	    "neginfif",
  	    "posinfif",
  	    "clock_millis",
  	    "clock_str",
  	    "date_add_millis",
  	    "date_add_str",
  	    "date_diff_millis",
  	    "date_diff_str",
  	    "date_part_millis",
  	    "date_part_str",
  	    "date_trunc_millis",
  	    "date_trunc_str",
  	    "duration_to_str",
  	    "millis",
  	    "str_to_millis",
  	    "millis_to_str",
  	    "millis_to_utc",
  	    "millis_to_zone_name",
  	    "now_millis",
  	    "now_str",
  	    "str_to_duration",
  	    "str_to_utc",
  	    "str_to_zone_name",
  	    "decode_json",
  	    "encode_json",
  	    "encoded_size",
  	    "poly_length",
  	    "base64",
  	    "base64_encode",
  	    "base64_decode",
  	    "meta",
  	    "uuid",
  	    "abs",
  	    "acos",
  	    "asin",
  	    "atan",
  	    "atan2",
  	    "ceil",
  	    "cos",
  	    "degrees",
  	    "e",
  	    "exp",
  	    "ln",
  	    "log",
  	    "floor",
  	    "pi",
  	    "power",
  	    "radians",
  	    "random",
  	    "round",
  	    "sign",
  	    "sin",
  	    "sqrt",
  	    "tan",
  	    "trunc",
  	    "object_length",
  	    "object_names",
  	    "object_pairs",
  	    "object_inner_pairs",
  	    "object_values",
  	    "object_inner_values",
  	    "object_add",
  	    "object_put",
  	    "object_remove",
  	    "object_unwrap",
  	    "regexp_contains",
  	    "regexp_like",
  	    "regexp_position",
  	    "regexp_replace",
  	    "contains",
  	    "initcap",
  	    "length",
  	    "lower",
  	    "ltrim",
  	    "position",
  	    "repeat",
  	    "replace",
  	    "rtrim",
  	    "split",
  	    "substr",
  	    "title",
  	    "trim",
  	    "upper",
  	    "isarray",
  	    "isatom",
  	    "isboolean",
  	    "isnumber",
  	    "isobject",
  	    "isstring",
  	    "type",
  	    "toarray",
  	    "toatom",
  	    "toboolean",
  	    "tonumber",
  	    "toobject",
  	    "tostring"
  	  ];

  	  return {
  	    name: 'N1QL',
  	    case_insensitive: true,
  	    contains: [
  	      {
  	        beginKeywords:
  	          'build create index delete drop explain infer|10 insert merge prepare select update upsert|10',
  	        end: /;/,
  	        keywords: {
  	          keyword: KEYWORDS,
  	          literal: LITERALS,
  	          built_in: BUILT_INS
  	        },
  	        contains: [
  	          {
  	            className: 'string',
  	            begin: '\'',
  	            end: '\'',
  	            contains: [ hljs.BACKSLASH_ESCAPE ]
  	          },
  	          {
  	            className: 'string',
  	            begin: '"',
  	            end: '"',
  	            contains: [ hljs.BACKSLASH_ESCAPE ]
  	          },
  	          {
  	            className: 'symbol',
  	            begin: '`',
  	            end: '`',
  	            contains: [ hljs.BACKSLASH_ESCAPE ]
  	          },
  	          hljs.C_NUMBER_MODE,
  	          hljs.C_BLOCK_COMMENT_MODE
  	        ]
  	      },
  	      hljs.C_BLOCK_COMMENT_MODE
  	    ]
  	  };
  	}

  	n1ql_1 = n1ql;
  	return n1ql_1;
  }

  /*
  Language: NestedText
  Description: NestedText is a file format for holding data that is to be entered, edited, or viewed by people.
  Website: https://nestedtext.org/
  Category: config
  */

  var nestedtext_1;
  var hasRequiredNestedtext;

  function requireNestedtext () {
  	if (hasRequiredNestedtext) return nestedtext_1;
  	hasRequiredNestedtext = 1;
  	/** @type LanguageFn */
  	function nestedtext(hljs) {
  	  const NESTED = {
  	    match: [
  	      /^\s*(?=\S)/, // have to look forward here to avoid polynomial backtracking
  	      /[^:]+/,
  	      /:\s*/,
  	      /$/
  	    ],
  	    className: {
  	      2: "attribute",
  	      3: "punctuation"
  	    }
  	  };
  	  const DICTIONARY_ITEM = {
  	    match: [
  	      /^\s*(?=\S)/, // have to look forward here to avoid polynomial backtracking
  	      /[^:]*[^: ]/,
  	      /[ ]*:/,
  	      /[ ]/,
  	      /.*$/
  	    ],
  	    className: {
  	      2: "attribute",
  	      3: "punctuation",
  	      5: "string"
  	    }
  	  };
  	  const STRING = {
  	    match: [
  	      /^\s*/,
  	      />/,
  	      /[ ]/,
  	      /.*$/
  	    ],
  	    className: {
  	      2: "punctuation",
  	      4: "string"
  	    }
  	  };
  	  const LIST_ITEM = {
  	    variants: [
  	      { match: [
  	        /^\s*/,
  	        /-/,
  	        /[ ]/,
  	        /.*$/
  	      ] },
  	      { match: [
  	        /^\s*/,
  	        /-$/
  	      ] }
  	    ],
  	    className: {
  	      2: "bullet",
  	      4: "string"
  	    }
  	  };

  	  return {
  	    name: 'Nested Text',
  	    aliases: [ 'nt' ],
  	    contains: [
  	      hljs.inherit(hljs.HASH_COMMENT_MODE, {
  	        begin: /^\s*(?=#)/,
  	        excludeBegin: true
  	      }),
  	      LIST_ITEM,
  	      STRING,
  	      NESTED,
  	      DICTIONARY_ITEM
  	    ]
  	  };
  	}

  	nestedtext_1 = nestedtext;
  	return nestedtext_1;
  }

  /*
  Language: Nginx config
  Author: Peter Leonov <gojpeg@yandex.ru>
  Contributors: Ivan Sagalaev <maniac@softwaremaniacs.org>
  Category: config, web
  Website: https://www.nginx.com
  */

  var nginx_1;
  var hasRequiredNginx;

  function requireNginx () {
  	if (hasRequiredNginx) return nginx_1;
  	hasRequiredNginx = 1;
  	/** @type LanguageFn */
  	function nginx(hljs) {
  	  const regex = hljs.regex;
  	  const VAR = {
  	    className: 'variable',
  	    variants: [
  	      { begin: /\$\d+/ },
  	      { begin: /\$\{\w+\}/ },
  	      { begin: regex.concat(/[$@]/, hljs.UNDERSCORE_IDENT_RE) }
  	    ]
  	  };
  	  const LITERALS = [
  	    "on",
  	    "off",
  	    "yes",
  	    "no",
  	    "true",
  	    "false",
  	    "none",
  	    "blocked",
  	    "debug",
  	    "info",
  	    "notice",
  	    "warn",
  	    "error",
  	    "crit",
  	    "select",
  	    "break",
  	    "last",
  	    "permanent",
  	    "redirect",
  	    "kqueue",
  	    "rtsig",
  	    "epoll",
  	    "poll",
  	    "/dev/poll"
  	  ];
  	  const DEFAULT = {
  	    endsWithParent: true,
  	    keywords: {
  	      $pattern: /[a-z_]{2,}|\/dev\/poll/,
  	      literal: LITERALS
  	    },
  	    relevance: 0,
  	    illegal: '=>',
  	    contains: [
  	      hljs.HASH_COMMENT_MODE,
  	      {
  	        className: 'string',
  	        contains: [
  	          hljs.BACKSLASH_ESCAPE,
  	          VAR
  	        ],
  	        variants: [
  	          {
  	            begin: /"/,
  	            end: /"/
  	          },
  	          {
  	            begin: /'/,
  	            end: /'/
  	          }
  	        ]
  	      },
  	      // this swallows entire URLs to avoid detecting numbers within
  	      {
  	        begin: '([a-z]+):/',
  	        end: '\\s',
  	        endsWithParent: true,
  	        excludeEnd: true,
  	        contains: [ VAR ]
  	      },
  	      {
  	        className: 'regexp',
  	        contains: [
  	          hljs.BACKSLASH_ESCAPE,
  	          VAR
  	        ],
  	        variants: [
  	          {
  	            begin: "\\s\\^",
  	            end: "\\s|\\{|;",
  	            returnEnd: true
  	          },
  	          // regexp locations (~, ~*)
  	          {
  	            begin: "~\\*?\\s+",
  	            end: "\\s|\\{|;",
  	            returnEnd: true
  	          },
  	          // *.example.com
  	          { begin: "\\*(\\.[a-z\\-]+)+" },
  	          // sub.example.*
  	          { begin: "([a-z\\-]+\\.)+\\*" }
  	        ]
  	      },
  	      // IP
  	      {
  	        className: 'number',
  	        begin: '\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}(:\\d{1,5})?\\b'
  	      },
  	      // units
  	      {
  	        className: 'number',
  	        begin: '\\b\\d+[kKmMgGdshdwy]?\\b',
  	        relevance: 0
  	      },
  	      VAR
  	    ]
  	  };

  	  return {
  	    name: 'Nginx config',
  	    aliases: [ 'nginxconf' ],
  	    contains: [
  	      hljs.HASH_COMMENT_MODE,
  	      {
  	        beginKeywords: "upstream location",
  	        end: /;|\{/,
  	        contains: DEFAULT.contains,
  	        keywords: { section: "upstream location" }
  	      },
  	      {
  	        className: 'section',
  	        begin: regex.concat(hljs.UNDERSCORE_IDENT_RE + regex.lookahead(/\s+\{/)),
  	        relevance: 0
  	      },
  	      {
  	        begin: regex.lookahead(hljs.UNDERSCORE_IDENT_RE + '\\s'),
  	        end: ';|\\{',
  	        contains: [
  	          {
  	            className: 'attribute',
  	            begin: hljs.UNDERSCORE_IDENT_RE,
  	            starts: DEFAULT
  	          }
  	        ],
  	        relevance: 0
  	      }
  	    ],
  	    illegal: '[^\\s\\}\\{]'
  	  };
  	}

  	nginx_1 = nginx;
  	return nginx_1;
  }

  /*
  Language: Nim
  Description: Nim is a statically typed compiled systems programming language.
  Website: https://nim-lang.org
  Category: system
  */

  var nim_1;
  var hasRequiredNim;

  function requireNim () {
  	if (hasRequiredNim) return nim_1;
  	hasRequiredNim = 1;
  	function nim(hljs) {
  	  const TYPES = [
  	    "int",
  	    "int8",
  	    "int16",
  	    "int32",
  	    "int64",
  	    "uint",
  	    "uint8",
  	    "uint16",
  	    "uint32",
  	    "uint64",
  	    "float",
  	    "float32",
  	    "float64",
  	    "bool",
  	    "char",
  	    "string",
  	    "cstring",
  	    "pointer",
  	    "expr",
  	    "stmt",
  	    "void",
  	    "auto",
  	    "any",
  	    "range",
  	    "array",
  	    "openarray",
  	    "varargs",
  	    "seq",
  	    "set",
  	    "clong",
  	    "culong",
  	    "cchar",
  	    "cschar",
  	    "cshort",
  	    "cint",
  	    "csize",
  	    "clonglong",
  	    "cfloat",
  	    "cdouble",
  	    "clongdouble",
  	    "cuchar",
  	    "cushort",
  	    "cuint",
  	    "culonglong",
  	    "cstringarray",
  	    "semistatic"
  	  ];
  	  const KEYWORDS = [
  	    "addr",
  	    "and",
  	    "as",
  	    "asm",
  	    "bind",
  	    "block",
  	    "break",
  	    "case",
  	    "cast",
  	    "const",
  	    "continue",
  	    "converter",
  	    "discard",
  	    "distinct",
  	    "div",
  	    "do",
  	    "elif",
  	    "else",
  	    "end",
  	    "enum",
  	    "except",
  	    "export",
  	    "finally",
  	    "for",
  	    "from",
  	    "func",
  	    "generic",
  	    "guarded",
  	    "if",
  	    "import",
  	    "in",
  	    "include",
  	    "interface",
  	    "is",
  	    "isnot",
  	    "iterator",
  	    "let",
  	    "macro",
  	    "method",
  	    "mixin",
  	    "mod",
  	    "nil",
  	    "not",
  	    "notin",
  	    "object",
  	    "of",
  	    "or",
  	    "out",
  	    "proc",
  	    "ptr",
  	    "raise",
  	    "ref",
  	    "return",
  	    "shared",
  	    "shl",
  	    "shr",
  	    "static",
  	    "template",
  	    "try",
  	    "tuple",
  	    "type",
  	    "using",
  	    "var",
  	    "when",
  	    "while",
  	    "with",
  	    "without",
  	    "xor",
  	    "yield"
  	  ];
  	  const BUILT_INS = [
  	    "stdin",
  	    "stdout",
  	    "stderr",
  	    "result"
  	  ];
  	  const LITERALS = [
  	    "true",
  	    "false"
  	  ];
  	  return {
  	    name: 'Nim',
  	    keywords: {
  	      keyword: KEYWORDS,
  	      literal: LITERALS,
  	      type: TYPES,
  	      built_in: BUILT_INS
  	    },
  	    contains: [
  	      {
  	        className: 'meta', // Actually pragma
  	        begin: /\{\./,
  	        end: /\.\}/,
  	        relevance: 10
  	      },
  	      {
  	        className: 'string',
  	        begin: /[a-zA-Z]\w*"/,
  	        end: /"/,
  	        contains: [ { begin: /""/ } ]
  	      },
  	      {
  	        className: 'string',
  	        begin: /([a-zA-Z]\w*)?"""/,
  	        end: /"""/
  	      },
  	      hljs.QUOTE_STRING_MODE,
  	      {
  	        className: 'type',
  	        begin: /\b[A-Z]\w+\b/,
  	        relevance: 0
  	      },
  	      {
  	        className: 'number',
  	        relevance: 0,
  	        variants: [
  	          { begin: /\b(0[xX][0-9a-fA-F][_0-9a-fA-F]*)('?[iIuU](8|16|32|64))?/ },
  	          { begin: /\b(0o[0-7][_0-7]*)('?[iIuUfF](8|16|32|64))?/ },
  	          { begin: /\b(0(b|B)[01][_01]*)('?[iIuUfF](8|16|32|64))?/ },
  	          { begin: /\b(\d[_\d]*)('?[iIuUfF](8|16|32|64))?/ }
  	        ]
  	      },
  	      hljs.HASH_COMMENT_MODE
  	    ]
  	  };
  	}

  	nim_1 = nim;
  	return nim_1;
  }

  /*
  Language: Nix
  Author: Domen Kožar <domen@dev.si>
  Description: Nix functional language
  Website: http://nixos.org/nix
  */

  var nix_1;
  var hasRequiredNix;

  function requireNix () {
  	if (hasRequiredNix) return nix_1;
  	hasRequiredNix = 1;
  	function nix(hljs) {
  	  const KEYWORDS = {
  	    keyword: [
  	      "rec",
  	      "with",
  	      "let",
  	      "in",
  	      "inherit",
  	      "assert",
  	      "if",
  	      "else",
  	      "then"
  	    ],
  	    literal: [
  	      "true",
  	      "false",
  	      "or",
  	      "and",
  	      "null"
  	    ],
  	    built_in: [
  	      "import",
  	      "abort",
  	      "baseNameOf",
  	      "dirOf",
  	      "isNull",
  	      "builtins",
  	      "map",
  	      "removeAttrs",
  	      "throw",
  	      "toString",
  	      "derivation"
  	    ]
  	  };
  	  const ANTIQUOTE = {
  	    className: 'subst',
  	    begin: /\$\{/,
  	    end: /\}/,
  	    keywords: KEYWORDS
  	  };
  	  const ESCAPED_DOLLAR = {
  	    className: 'char.escape',
  	    begin: /''\$/,
  	  };
  	  const ATTRS = {
  	    begin: /[a-zA-Z0-9-_]+(\s*=)/,
  	    returnBegin: true,
  	    relevance: 0,
  	    contains: [
  	      {
  	        className: 'attr',
  	        begin: /\S+/,
  	        relevance: 0.2
  	      }
  	    ]
  	  };
  	  const STRING = {
  	    className: 'string',
  	    contains: [ ESCAPED_DOLLAR, ANTIQUOTE ],
  	    variants: [
  	      {
  	        begin: "''",
  	        end: "''"
  	      },
  	      {
  	        begin: '"',
  	        end: '"'
  	      }
  	    ]
  	  };
  	  const EXPRESSIONS = [
  	    hljs.NUMBER_MODE,
  	    hljs.HASH_COMMENT_MODE,
  	    hljs.C_BLOCK_COMMENT_MODE,
  	    STRING,
  	    ATTRS
  	  ];
  	  ANTIQUOTE.contains = EXPRESSIONS;
  	  return {
  	    name: 'Nix',
  	    aliases: [ "nixos" ],
  	    keywords: KEYWORDS,
  	    contains: EXPRESSIONS
  	  };
  	}

  	nix_1 = nix;
  	return nix_1;
  }

  /*
  Language: Node REPL
  Requires: javascript.js
  Author: Marat Nagayev <nagaevmt@yandex.ru>
  Category: scripting
  */

  var nodeRepl_1;
  var hasRequiredNodeRepl;

  function requireNodeRepl () {
  	if (hasRequiredNodeRepl) return nodeRepl_1;
  	hasRequiredNodeRepl = 1;
  	/** @type LanguageFn */
  	function nodeRepl(hljs) {
  	  return {
  	    name: 'Node REPL',
  	    contains: [
  	      {
  	        className: 'meta.prompt',
  	        starts: {
  	          // a space separates the REPL prefix from the actual code
  	          // this is purely for cleaner HTML output
  	          end: / |$/,
  	          starts: {
  	            end: '$',
  	            subLanguage: 'javascript'
  	          }
  	        },
  	        variants: [
  	          { begin: /^>(?=[ ]|$)/ },
  	          { begin: /^\.\.\.(?=[ ]|$)/ }
  	        ]
  	      }
  	    ]
  	  };
  	}

  	nodeRepl_1 = nodeRepl;
  	return nodeRepl_1;
  }

  /*
  Language: NSIS
  Description: Nullsoft Scriptable Install System
  Author: Jan T. Sott <jan.sott@gmail.com>
  Website: https://nsis.sourceforge.io/Main_Page
  */

  var nsis_1;
  var hasRequiredNsis;

  function requireNsis () {
  	if (hasRequiredNsis) return nsis_1;
  	hasRequiredNsis = 1;
  	function nsis(hljs) {
  	  const regex = hljs.regex;
  	  const LANGUAGE_CONSTANTS = [
  	    "ADMINTOOLS",
  	    "APPDATA",
  	    "CDBURN_AREA",
  	    "CMDLINE",
  	    "COMMONFILES32",
  	    "COMMONFILES64",
  	    "COMMONFILES",
  	    "COOKIES",
  	    "DESKTOP",
  	    "DOCUMENTS",
  	    "EXEDIR",
  	    "EXEFILE",
  	    "EXEPATH",
  	    "FAVORITES",
  	    "FONTS",
  	    "HISTORY",
  	    "HWNDPARENT",
  	    "INSTDIR",
  	    "INTERNET_CACHE",
  	    "LANGUAGE",
  	    "LOCALAPPDATA",
  	    "MUSIC",
  	    "NETHOOD",
  	    "OUTDIR",
  	    "PICTURES",
  	    "PLUGINSDIR",
  	    "PRINTHOOD",
  	    "PROFILE",
  	    "PROGRAMFILES32",
  	    "PROGRAMFILES64",
  	    "PROGRAMFILES",
  	    "QUICKLAUNCH",
  	    "RECENT",
  	    "RESOURCES_LOCALIZED",
  	    "RESOURCES",
  	    "SENDTO",
  	    "SMPROGRAMS",
  	    "SMSTARTUP",
  	    "STARTMENU",
  	    "SYSDIR",
  	    "TEMP",
  	    "TEMPLATES",
  	    "VIDEOS",
  	    "WINDIR"
  	  ];

  	  const PARAM_NAMES = [
  	    "ARCHIVE",
  	    "FILE_ATTRIBUTE_ARCHIVE",
  	    "FILE_ATTRIBUTE_NORMAL",
  	    "FILE_ATTRIBUTE_OFFLINE",
  	    "FILE_ATTRIBUTE_READONLY",
  	    "FILE_ATTRIBUTE_SYSTEM",
  	    "FILE_ATTRIBUTE_TEMPORARY",
  	    "HKCR",
  	    "HKCU",
  	    "HKDD",
  	    "HKEY_CLASSES_ROOT",
  	    "HKEY_CURRENT_CONFIG",
  	    "HKEY_CURRENT_USER",
  	    "HKEY_DYN_DATA",
  	    "HKEY_LOCAL_MACHINE",
  	    "HKEY_PERFORMANCE_DATA",
  	    "HKEY_USERS",
  	    "HKLM",
  	    "HKPD",
  	    "HKU",
  	    "IDABORT",
  	    "IDCANCEL",
  	    "IDIGNORE",
  	    "IDNO",
  	    "IDOK",
  	    "IDRETRY",
  	    "IDYES",
  	    "MB_ABORTRETRYIGNORE",
  	    "MB_DEFBUTTON1",
  	    "MB_DEFBUTTON2",
  	    "MB_DEFBUTTON3",
  	    "MB_DEFBUTTON4",
  	    "MB_ICONEXCLAMATION",
  	    "MB_ICONINFORMATION",
  	    "MB_ICONQUESTION",
  	    "MB_ICONSTOP",
  	    "MB_OK",
  	    "MB_OKCANCEL",
  	    "MB_RETRYCANCEL",
  	    "MB_RIGHT",
  	    "MB_RTLREADING",
  	    "MB_SETFOREGROUND",
  	    "MB_TOPMOST",
  	    "MB_USERICON",
  	    "MB_YESNO",
  	    "NORMAL",
  	    "OFFLINE",
  	    "READONLY",
  	    "SHCTX",
  	    "SHELL_CONTEXT",
  	    "SYSTEM|TEMPORARY",
  	  ];

  	  const COMPILER_FLAGS = [
  	    "addincludedir",
  	    "addplugindir",
  	    "appendfile",
  	    "cd",
  	    "define",
  	    "delfile",
  	    "echo",
  	    "else",
  	    "endif",
  	    "error",
  	    "execute",
  	    "finalize",
  	    "getdllversion",
  	    "gettlbversion",
  	    "if",
  	    "ifdef",
  	    "ifmacrodef",
  	    "ifmacrondef",
  	    "ifndef",
  	    "include",
  	    "insertmacro",
  	    "macro",
  	    "macroend",
  	    "makensis",
  	    "packhdr",
  	    "searchparse",
  	    "searchreplace",
  	    "system",
  	    "tempfile",
  	    "undef",
  	    "uninstfinalize",
  	    "verbose",
  	    "warning",
  	  ];

  	  const CONSTANTS = {
  	    className: 'variable.constant',
  	    begin: regex.concat(/\$/, regex.either(...LANGUAGE_CONSTANTS))
  	  };

  	  const DEFINES = {
  	    // ${defines}
  	    className: 'variable',
  	    begin: /\$+\{[\!\w.:-]+\}/
  	  };

  	  const VARIABLES = {
  	    // $variables
  	    className: 'variable',
  	    begin: /\$+\w[\w\.]*/,
  	    illegal: /\(\)\{\}/
  	  };

  	  const LANGUAGES = {
  	    // $(language_strings)
  	    className: 'variable',
  	    begin: /\$+\([\w^.:!-]+\)/
  	  };

  	  const PARAMETERS = {
  	    // command parameters
  	    className: 'params',
  	    begin: regex.either(...PARAM_NAMES)
  	  };

  	  const COMPILER = {
  	    // !compiler_flags
  	    className: 'keyword',
  	    begin: regex.concat(
  	      /!/,
  	      regex.either(...COMPILER_FLAGS)
  	    )
  	  };

  	  const ESCAPE_CHARS = {
  	    // $\n, $\r, $\t, $$
  	    className: 'char.escape',
  	    begin: /\$(\\[nrt]|\$)/
  	  };

  	  const PLUGINS = {
  	    // plug::ins
  	    className: 'title.function',
  	    begin: /\w+::\w+/
  	  };

  	  const STRING = {
  	    className: 'string',
  	    variants: [
  	      {
  	        begin: '"',
  	        end: '"'
  	      },
  	      {
  	        begin: '\'',
  	        end: '\''
  	      },
  	      {
  	        begin: '`',
  	        end: '`'
  	      }
  	    ],
  	    illegal: /\n/,
  	    contains: [
  	      ESCAPE_CHARS,
  	      CONSTANTS,
  	      DEFINES,
  	      VARIABLES,
  	      LANGUAGES
  	    ]
  	  };

  	  const KEYWORDS = [
  	    "Abort",
  	    "AddBrandingImage",
  	    "AddSize",
  	    "AllowRootDirInstall",
  	    "AllowSkipFiles",
  	    "AutoCloseWindow",
  	    "BGFont",
  	    "BGGradient",
  	    "BrandingText",
  	    "BringToFront",
  	    "Call",
  	    "CallInstDLL",
  	    "Caption",
  	    "ChangeUI",
  	    "CheckBitmap",
  	    "ClearErrors",
  	    "CompletedText",
  	    "ComponentText",
  	    "CopyFiles",
  	    "CRCCheck",
  	    "CreateDirectory",
  	    "CreateFont",
  	    "CreateShortCut",
  	    "Delete",
  	    "DeleteINISec",
  	    "DeleteINIStr",
  	    "DeleteRegKey",
  	    "DeleteRegValue",
  	    "DetailPrint",
  	    "DetailsButtonText",
  	    "DirText",
  	    "DirVar",
  	    "DirVerify",
  	    "EnableWindow",
  	    "EnumRegKey",
  	    "EnumRegValue",
  	    "Exch",
  	    "Exec",
  	    "ExecShell",
  	    "ExecShellWait",
  	    "ExecWait",
  	    "ExpandEnvStrings",
  	    "File",
  	    "FileBufSize",
  	    "FileClose",
  	    "FileErrorText",
  	    "FileOpen",
  	    "FileRead",
  	    "FileReadByte",
  	    "FileReadUTF16LE",
  	    "FileReadWord",
  	    "FileWriteUTF16LE",
  	    "FileSeek",
  	    "FileWrite",
  	    "FileWriteByte",
  	    "FileWriteWord",
  	    "FindClose",
  	    "FindFirst",
  	    "FindNext",
  	    "FindWindow",
  	    "FlushINI",
  	    "GetCurInstType",
  	    "GetCurrentAddress",
  	    "GetDlgItem",
  	    "GetDLLVersion",
  	    "GetDLLVersionLocal",
  	    "GetErrorLevel",
  	    "GetFileTime",
  	    "GetFileTimeLocal",
  	    "GetFullPathName",
  	    "GetFunctionAddress",
  	    "GetInstDirError",
  	    "GetKnownFolderPath",
  	    "GetLabelAddress",
  	    "GetTempFileName",
  	    "GetWinVer",
  	    "Goto",
  	    "HideWindow",
  	    "Icon",
  	    "IfAbort",
  	    "IfErrors",
  	    "IfFileExists",
  	    "IfRebootFlag",
  	    "IfRtlLanguage",
  	    "IfShellVarContextAll",
  	    "IfSilent",
  	    "InitPluginsDir",
  	    "InstallButtonText",
  	    "InstallColors",
  	    "InstallDir",
  	    "InstallDirRegKey",
  	    "InstProgressFlags",
  	    "InstType",
  	    "InstTypeGetText",
  	    "InstTypeSetText",
  	    "Int64Cmp",
  	    "Int64CmpU",
  	    "Int64Fmt",
  	    "IntCmp",
  	    "IntCmpU",
  	    "IntFmt",
  	    "IntOp",
  	    "IntPtrCmp",
  	    "IntPtrCmpU",
  	    "IntPtrOp",
  	    "IsWindow",
  	    "LangString",
  	    "LicenseBkColor",
  	    "LicenseData",
  	    "LicenseForceSelection",
  	    "LicenseLangString",
  	    "LicenseText",
  	    "LoadAndSetImage",
  	    "LoadLanguageFile",
  	    "LockWindow",
  	    "LogSet",
  	    "LogText",
  	    "ManifestDPIAware",
  	    "ManifestLongPathAware",
  	    "ManifestMaxVersionTested",
  	    "ManifestSupportedOS",
  	    "MessageBox",
  	    "MiscButtonText",
  	    "Name|0",
  	    "Nop",
  	    "OutFile",
  	    "Page",
  	    "PageCallbacks",
  	    "PEAddResource",
  	    "PEDllCharacteristics",
  	    "PERemoveResource",
  	    "PESubsysVer",
  	    "Pop",
  	    "Push",
  	    "Quit",
  	    "ReadEnvStr",
  	    "ReadINIStr",
  	    "ReadRegDWORD",
  	    "ReadRegStr",
  	    "Reboot",
  	    "RegDLL",
  	    "Rename",
  	    "RequestExecutionLevel",
  	    "ReserveFile",
  	    "Return",
  	    "RMDir",
  	    "SearchPath",
  	    "SectionGetFlags",
  	    "SectionGetInstTypes",
  	    "SectionGetSize",
  	    "SectionGetText",
  	    "SectionIn",
  	    "SectionSetFlags",
  	    "SectionSetInstTypes",
  	    "SectionSetSize",
  	    "SectionSetText",
  	    "SendMessage",
  	    "SetAutoClose",
  	    "SetBrandingImage",
  	    "SetCompress",
  	    "SetCompressor",
  	    "SetCompressorDictSize",
  	    "SetCtlColors",
  	    "SetCurInstType",
  	    "SetDatablockOptimize",
  	    "SetDateSave",
  	    "SetDetailsPrint",
  	    "SetDetailsView",
  	    "SetErrorLevel",
  	    "SetErrors",
  	    "SetFileAttributes",
  	    "SetFont",
  	    "SetOutPath",
  	    "SetOverwrite",
  	    "SetRebootFlag",
  	    "SetRegView",
  	    "SetShellVarContext",
  	    "SetSilent",
  	    "ShowInstDetails",
  	    "ShowUninstDetails",
  	    "ShowWindow",
  	    "SilentInstall",
  	    "SilentUnInstall",
  	    "Sleep",
  	    "SpaceTexts",
  	    "StrCmp",
  	    "StrCmpS",
  	    "StrCpy",
  	    "StrLen",
  	    "SubCaption",
  	    "Unicode",
  	    "UninstallButtonText",
  	    "UninstallCaption",
  	    "UninstallIcon",
  	    "UninstallSubCaption",
  	    "UninstallText",
  	    "UninstPage",
  	    "UnRegDLL",
  	    "Var",
  	    "VIAddVersionKey",
  	    "VIFileVersion",
  	    "VIProductVersion",
  	    "WindowIcon",
  	    "WriteINIStr",
  	    "WriteRegBin",
  	    "WriteRegDWORD",
  	    "WriteRegExpandStr",
  	    "WriteRegMultiStr",
  	    "WriteRegNone",
  	    "WriteRegStr",
  	    "WriteUninstaller",
  	    "XPStyle"
  	  ];

  	  const LITERALS = [
  	    "admin",
  	    "all",
  	    "auto",
  	    "both",
  	    "bottom",
  	    "bzip2",
  	    "colored",
  	    "components",
  	    "current",
  	    "custom",
  	    "directory",
  	    "false",
  	    "force",
  	    "hide",
  	    "highest",
  	    "ifdiff",
  	    "ifnewer",
  	    "instfiles",
  	    "lastused",
  	    "leave",
  	    "left",
  	    "license",
  	    "listonly",
  	    "lzma",
  	    "nevershow",
  	    "none",
  	    "normal",
  	    "notset",
  	    "off",
  	    "on",
  	    "open",
  	    "print",
  	    "right",
  	    "show",
  	    "silent",
  	    "silentlog",
  	    "smooth",
  	    "textonly",
  	    "top",
  	    "true",
  	    "try",
  	    "un.components",
  	    "un.custom",
  	    "un.directory",
  	    "un.instfiles",
  	    "un.license",
  	    "uninstConfirm",
  	    "user",
  	    "Win10",
  	    "Win7",
  	    "Win8",
  	    "WinVista",
  	    "zlib"
  	  ];

  	  const FUNCTION_DEFINITION = {
  	    match: [
  	      /Function/,
  	      /\s+/,
  	      regex.concat(/(\.)?/, hljs.IDENT_RE)
  	    ],
  	    scope: {
  	      1: "keyword",
  	      3: "title.function"
  	    }
  	  };

  	  // Var Custom.Variable.Name.Item
  	  // Var /GLOBAL Custom.Variable.Name.Item
  	  const VARIABLE_NAME_RE = /[A-Za-z][\w.]*/;
  	  const VARIABLE_DEFINITION = {
  	    match: [
  	      /Var/,
  	      /\s+/,
  	      /(?:\/GLOBAL\s+)?/,
  	      VARIABLE_NAME_RE
  	    ],
  	    scope: {
  	      1: "keyword",
  	      3: "params",
  	      4: "variable"
  	    }
  	  };

  	  return {
  	    name: 'NSIS',
  	    case_insensitive: true,
  	    keywords: {
  	      keyword: KEYWORDS,
  	      literal: LITERALS
  	    },
  	    contains: [
  	      hljs.HASH_COMMENT_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE,
  	      hljs.COMMENT(
  	        ';',
  	        '$',
  	        { relevance: 0 }
  	      ),
  	      VARIABLE_DEFINITION,
  	      FUNCTION_DEFINITION,
  	      { beginKeywords: 'Function PageEx Section SectionGroup FunctionEnd SectionEnd', },
  	      STRING,
  	      COMPILER,
  	      DEFINES,
  	      VARIABLES,
  	      LANGUAGES,
  	      PARAMETERS,
  	      PLUGINS,
  	      hljs.NUMBER_MODE
  	    ]
  	  };
  	}

  	nsis_1 = nsis;
  	return nsis_1;
  }

  /*
  Language: Objective-C
  Author: Valerii Hiora <valerii.hiora@gmail.com>
  Contributors: Angel G. Olloqui <angelgarcia.mail@gmail.com>, Matt Diephouse <matt@diephouse.com>, Andrew Farmer <ahfarmer@gmail.com>, Minh Nguyễn <mxn@1ec5.org>
  Website: https://developer.apple.com/documentation/objectivec
  Category: common
  */

  var objectivec_1;
  var hasRequiredObjectivec;

  function requireObjectivec () {
  	if (hasRequiredObjectivec) return objectivec_1;
  	hasRequiredObjectivec = 1;
  	function objectivec(hljs) {
  	  const API_CLASS = {
  	    className: 'built_in',
  	    begin: '\\b(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)\\w+'
  	  };
  	  const IDENTIFIER_RE = /[a-zA-Z@][a-zA-Z0-9_]*/;
  	  const TYPES = [
  	    "int",
  	    "float",
  	    "char",
  	    "unsigned",
  	    "signed",
  	    "short",
  	    "long",
  	    "double",
  	    "wchar_t",
  	    "unichar",
  	    "void",
  	    "bool",
  	    "BOOL",
  	    "id|0",
  	    "_Bool"
  	  ];
  	  const KWS = [
  	    "while",
  	    "export",
  	    "sizeof",
  	    "typedef",
  	    "const",
  	    "struct",
  	    "for",
  	    "union",
  	    "volatile",
  	    "static",
  	    "mutable",
  	    "if",
  	    "do",
  	    "return",
  	    "goto",
  	    "enum",
  	    "else",
  	    "break",
  	    "extern",
  	    "asm",
  	    "case",
  	    "default",
  	    "register",
  	    "explicit",
  	    "typename",
  	    "switch",
  	    "continue",
  	    "inline",
  	    "readonly",
  	    "assign",
  	    "readwrite",
  	    "self",
  	    "@synchronized",
  	    "id",
  	    "typeof",
  	    "nonatomic",
  	    "IBOutlet",
  	    "IBAction",
  	    "strong",
  	    "weak",
  	    "copy",
  	    "in",
  	    "out",
  	    "inout",
  	    "bycopy",
  	    "byref",
  	    "oneway",
  	    "__strong",
  	    "__weak",
  	    "__block",
  	    "__autoreleasing",
  	    "@private",
  	    "@protected",
  	    "@public",
  	    "@try",
  	    "@property",
  	    "@end",
  	    "@throw",
  	    "@catch",
  	    "@finally",
  	    "@autoreleasepool",
  	    "@synthesize",
  	    "@dynamic",
  	    "@selector",
  	    "@optional",
  	    "@required",
  	    "@encode",
  	    "@package",
  	    "@import",
  	    "@defs",
  	    "@compatibility_alias",
  	    "__bridge",
  	    "__bridge_transfer",
  	    "__bridge_retained",
  	    "__bridge_retain",
  	    "__covariant",
  	    "__contravariant",
  	    "__kindof",
  	    "_Nonnull",
  	    "_Nullable",
  	    "_Null_unspecified",
  	    "__FUNCTION__",
  	    "__PRETTY_FUNCTION__",
  	    "__attribute__",
  	    "getter",
  	    "setter",
  	    "retain",
  	    "unsafe_unretained",
  	    "nonnull",
  	    "nullable",
  	    "null_unspecified",
  	    "null_resettable",
  	    "class",
  	    "instancetype",
  	    "NS_DESIGNATED_INITIALIZER",
  	    "NS_UNAVAILABLE",
  	    "NS_REQUIRES_SUPER",
  	    "NS_RETURNS_INNER_POINTER",
  	    "NS_INLINE",
  	    "NS_AVAILABLE",
  	    "NS_DEPRECATED",
  	    "NS_ENUM",
  	    "NS_OPTIONS",
  	    "NS_SWIFT_UNAVAILABLE",
  	    "NS_ASSUME_NONNULL_BEGIN",
  	    "NS_ASSUME_NONNULL_END",
  	    "NS_REFINED_FOR_SWIFT",
  	    "NS_SWIFT_NAME",
  	    "NS_SWIFT_NOTHROW",
  	    "NS_DURING",
  	    "NS_HANDLER",
  	    "NS_ENDHANDLER",
  	    "NS_VALUERETURN",
  	    "NS_VOIDRETURN"
  	  ];
  	  const LITERALS = [
  	    "false",
  	    "true",
  	    "FALSE",
  	    "TRUE",
  	    "nil",
  	    "YES",
  	    "NO",
  	    "NULL"
  	  ];
  	  const BUILT_INS = [
  	    "dispatch_once_t",
  	    "dispatch_queue_t",
  	    "dispatch_sync",
  	    "dispatch_async",
  	    "dispatch_once"
  	  ];
  	  const KEYWORDS = {
  	    "variable.language": [
  	      "this",
  	      "super"
  	    ],
  	    $pattern: IDENTIFIER_RE,
  	    keyword: KWS,
  	    literal: LITERALS,
  	    built_in: BUILT_INS,
  	    type: TYPES
  	  };
  	  const CLASS_KEYWORDS = {
  	    $pattern: IDENTIFIER_RE,
  	    keyword: [
  	      "@interface",
  	      "@class",
  	      "@protocol",
  	      "@implementation"
  	    ]
  	  };
  	  return {
  	    name: 'Objective-C',
  	    aliases: [
  	      'mm',
  	      'objc',
  	      'obj-c',
  	      'obj-c++',
  	      'objective-c++'
  	    ],
  	    keywords: KEYWORDS,
  	    illegal: '</',
  	    contains: [
  	      API_CLASS,
  	      hljs.C_LINE_COMMENT_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE,
  	      hljs.C_NUMBER_MODE,
  	      hljs.QUOTE_STRING_MODE,
  	      hljs.APOS_STRING_MODE,
  	      {
  	        className: 'string',
  	        variants: [
  	          {
  	            begin: '@"',
  	            end: '"',
  	            illegal: '\\n',
  	            contains: [ hljs.BACKSLASH_ESCAPE ]
  	          }
  	        ]
  	      },
  	      {
  	        className: 'meta',
  	        begin: /#\s*[a-z]+\b/,
  	        end: /$/,
  	        keywords: { keyword:
  	            'if else elif endif define undef warning error line '
  	            + 'pragma ifdef ifndef include' },
  	        contains: [
  	          {
  	            begin: /\\\n/,
  	            relevance: 0
  	          },
  	          hljs.inherit(hljs.QUOTE_STRING_MODE, { className: 'string' }),
  	          {
  	            className: 'string',
  	            begin: /<.*?>/,
  	            end: /$/,
  	            illegal: '\\n'
  	          },
  	          hljs.C_LINE_COMMENT_MODE,
  	          hljs.C_BLOCK_COMMENT_MODE
  	        ]
  	      },
  	      {
  	        className: 'class',
  	        begin: '(' + CLASS_KEYWORDS.keyword.join('|') + ')\\b',
  	        end: /(\{|$)/,
  	        excludeEnd: true,
  	        keywords: CLASS_KEYWORDS,
  	        contains: [ hljs.UNDERSCORE_TITLE_MODE ]
  	      },
  	      {
  	        begin: '\\.' + hljs.UNDERSCORE_IDENT_RE,
  	        relevance: 0
  	      }
  	    ]
  	  };
  	}

  	objectivec_1 = objectivec;
  	return objectivec_1;
  }

  /*
  Language: OCaml
  Author: Mehdi Dogguy <mehdi@dogguy.org>
  Contributors: Nicolas Braud-Santoni <nicolas.braud-santoni@ens-cachan.fr>, Mickael Delahaye <mickael.delahaye@gmail.com>
  Description: OCaml language definition.
  Website: https://ocaml.org
  Category: functional
  */

  var ocaml_1;
  var hasRequiredOcaml;

  function requireOcaml () {
  	if (hasRequiredOcaml) return ocaml_1;
  	hasRequiredOcaml = 1;
  	function ocaml(hljs) {
  	  /* missing support for heredoc-like string (OCaml 4.0.2+) */
  	  return {
  	    name: 'OCaml',
  	    aliases: [ 'ml' ],
  	    keywords: {
  	      $pattern: '[a-z_]\\w*!?',
  	      keyword:
  	        'and as assert asr begin class constraint do done downto else end '
  	        + 'exception external for fun function functor if in include '
  	        + 'inherit! inherit initializer land lazy let lor lsl lsr lxor match method!|10 method '
  	        + 'mod module mutable new object of open! open or private rec sig struct '
  	        + 'then to try type val! val virtual when while with '
  	        /* camlp4 */
  	        + 'parser value',
  	      built_in:
  	        /* built-in types */
  	        'array bool bytes char exn|5 float int int32 int64 list lazy_t|5 nativeint|5 string unit '
  	        /* (some) types in Pervasives */
  	        + 'in_channel out_channel ref',
  	      literal:
  	        'true false'
  	    },
  	    illegal: /\/\/|>>/,
  	    contains: [
  	      {
  	        className: 'literal',
  	        begin: '\\[(\\|\\|)?\\]|\\(\\)',
  	        relevance: 0
  	      },
  	      hljs.COMMENT(
  	        '\\(\\*',
  	        '\\*\\)',
  	        { contains: [ 'self' ] }
  	      ),
  	      { /* type variable */
  	        className: 'symbol',
  	        begin: '\'[A-Za-z_](?!\')[\\w\']*'
  	        /* the grammar is ambiguous on how 'a'b should be interpreted but not the compiler */
  	      },
  	      { /* polymorphic variant */
  	        className: 'type',
  	        begin: '`[A-Z][\\w\']*'
  	      },
  	      { /* module or constructor */
  	        className: 'type',
  	        begin: '\\b[A-Z][\\w\']*',
  	        relevance: 0
  	      },
  	      { /* don't color identifiers, but safely catch all identifiers with ' */
  	        begin: '[a-z_]\\w*\'[\\w\']*',
  	        relevance: 0
  	      },
  	      hljs.inherit(hljs.APOS_STRING_MODE, {
  	        className: 'string',
  	        relevance: 0
  	      }),
  	      hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null }),
  	      {
  	        className: 'number',
  	        begin:
  	          '\\b(0[xX][a-fA-F0-9_]+[Lln]?|'
  	          + '0[oO][0-7_]+[Lln]?|'
  	          + '0[bB][01_]+[Lln]?|'
  	          + '[0-9][0-9_]*([Lln]|(\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)?)',
  	        relevance: 0
  	      },
  	      { begin: /->/ // relevance booster
  	      }
  	    ]
  	  };
  	}

  	ocaml_1 = ocaml;
  	return ocaml_1;
  }

  /*
  Language: OpenSCAD
  Author: Dan Panzarella <alsoelp@gmail.com>
  Description: OpenSCAD is a language for the 3D CAD modeling software of the same name.
  Website: https://www.openscad.org
  Category: scientific
  */

  var openscad_1;
  var hasRequiredOpenscad;

  function requireOpenscad () {
  	if (hasRequiredOpenscad) return openscad_1;
  	hasRequiredOpenscad = 1;
  	function openscad(hljs) {
  	  const SPECIAL_VARS = {
  	    className: 'keyword',
  	    begin: '\\$(f[asn]|t|vp[rtd]|children)'
  	  };
  	  const LITERALS = {
  	    className: 'literal',
  	    begin: 'false|true|PI|undef'
  	  };
  	  const NUMBERS = {
  	    className: 'number',
  	    begin: '\\b\\d+(\\.\\d+)?(e-?\\d+)?', // adds 1e5, 1e-10
  	    relevance: 0
  	  };
  	  const STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null });
  	  const PREPRO = {
  	    className: 'meta',
  	    keywords: { keyword: 'include use' },
  	    begin: 'include|use <',
  	    end: '>'
  	  };
  	  const PARAMS = {
  	    className: 'params',
  	    begin: '\\(',
  	    end: '\\)',
  	    contains: [
  	      'self',
  	      NUMBERS,
  	      STRING,
  	      SPECIAL_VARS,
  	      LITERALS
  	    ]
  	  };
  	  const MODIFIERS = {
  	    begin: '[*!#%]',
  	    relevance: 0
  	  };
  	  const FUNCTIONS = {
  	    className: 'function',
  	    beginKeywords: 'module function',
  	    end: /=|\{/,
  	    contains: [
  	      PARAMS,
  	      hljs.UNDERSCORE_TITLE_MODE
  	    ]
  	  };

  	  return {
  	    name: 'OpenSCAD',
  	    aliases: [ 'scad' ],
  	    keywords: {
  	      keyword: 'function module include use for intersection_for if else \\%',
  	      literal: 'false true PI undef',
  	      built_in: 'circle square polygon text sphere cube cylinder polyhedron translate rotate scale resize mirror multmatrix color offset hull minkowski union difference intersection abs sign sin cos tan acos asin atan atan2 floor round ceil ln log pow sqrt exp rands min max concat lookup str chr search version version_num norm cross parent_module echo import import_dxf dxf_linear_extrude linear_extrude rotate_extrude surface projection render children dxf_cross dxf_dim let assign'
  	    },
  	    contains: [
  	      hljs.C_LINE_COMMENT_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE,
  	      NUMBERS,
  	      PREPRO,
  	      STRING,
  	      SPECIAL_VARS,
  	      MODIFIERS,
  	      FUNCTIONS
  	    ]
  	  };
  	}

  	openscad_1 = openscad;
  	return openscad_1;
  }

  /*
  Language: Oxygene
  Author: Carlo Kok <ck@remobjects.com>
  Description: Oxygene is built on the foundation of Object Pascal, revamped and extended to be a modern language for the twenty-first century.
  Website: https://www.elementscompiler.com/elements/default.aspx
  */

  var oxygene_1;
  var hasRequiredOxygene;

  function requireOxygene () {
  	if (hasRequiredOxygene) return oxygene_1;
  	hasRequiredOxygene = 1;
  	function oxygene(hljs) {
  	  const OXYGENE_KEYWORDS = {
  	    $pattern: /\.?\w+/,
  	    keyword:
  	      'abstract add and array as asc aspect assembly async begin break block by case class concat const copy constructor continue '
  	      + 'create default delegate desc distinct div do downto dynamic each else empty end ensure enum equals event except exit extension external false '
  	      + 'final finalize finalizer finally flags for forward from function future global group has if implementation implements implies in index inherited '
  	      + 'inline interface into invariants is iterator join locked locking loop matching method mod module namespace nested new nil not notify nullable of '
  	      + 'old on operator or order out override parallel params partial pinned private procedure property protected public queryable raise read readonly '
  	      + 'record reintroduce remove repeat require result reverse sealed select self sequence set shl shr skip static step soft take then to true try tuple '
  	      + 'type union unit unsafe until uses using var virtual raises volatile where while with write xor yield await mapped deprecated stdcall cdecl pascal '
  	      + 'register safecall overload library platform reference packed strict published autoreleasepool selector strong weak unretained'
  	  };
  	  const CURLY_COMMENT = hljs.COMMENT(
  	    /\{/,
  	    /\}/,
  	    { relevance: 0 }
  	  );
  	  const PAREN_COMMENT = hljs.COMMENT(
  	    '\\(\\*',
  	    '\\*\\)',
  	    { relevance: 10 }
  	  );
  	  const STRING = {
  	    className: 'string',
  	    begin: '\'',
  	    end: '\'',
  	    contains: [ { begin: '\'\'' } ]
  	  };
  	  const CHAR_STRING = {
  	    className: 'string',
  	    begin: '(#\\d+)+'
  	  };
  	  const FUNCTION = {
  	    beginKeywords: 'function constructor destructor procedure method',
  	    end: '[:;]',
  	    keywords: 'function constructor|10 destructor|10 procedure|10 method|10',
  	    contains: [
  	      hljs.inherit(hljs.TITLE_MODE, { scope: "title.function" }),
  	      {
  	        className: 'params',
  	        begin: '\\(',
  	        end: '\\)',
  	        keywords: OXYGENE_KEYWORDS,
  	        contains: [
  	          STRING,
  	          CHAR_STRING
  	        ]
  	      },
  	      CURLY_COMMENT,
  	      PAREN_COMMENT
  	    ]
  	  };

  	  const SEMICOLON = {
  	    scope: "punctuation",
  	    match: /;/,
  	    relevance: 0
  	  };

  	  return {
  	    name: 'Oxygene',
  	    case_insensitive: true,
  	    keywords: OXYGENE_KEYWORDS,
  	    illegal: '("|\\$[G-Zg-z]|\\/\\*|</|=>|->)',
  	    contains: [
  	      CURLY_COMMENT,
  	      PAREN_COMMENT,
  	      hljs.C_LINE_COMMENT_MODE,
  	      STRING,
  	      CHAR_STRING,
  	      hljs.NUMBER_MODE,
  	      FUNCTION,
  	      SEMICOLON
  	    ]
  	  };
  	}

  	oxygene_1 = oxygene;
  	return oxygene_1;
  }

  /*
  Language: Parser3
  Requires: xml.js
  Author: Oleg Volchkov <oleg@volchkov.net>
  Website: https://www.parser.ru/en/
  Category: template
  */

  var parser3_1;
  var hasRequiredParser3;

  function requireParser3 () {
  	if (hasRequiredParser3) return parser3_1;
  	hasRequiredParser3 = 1;
  	function parser3(hljs) {
  	  const CURLY_SUBCOMMENT = hljs.COMMENT(
  	    /\{/,
  	    /\}/,
  	    { contains: [ 'self' ] }
  	  );
  	  return {
  	    name: 'Parser3',
  	    subLanguage: 'xml',
  	    relevance: 0,
  	    contains: [
  	      hljs.COMMENT('^#', '$'),
  	      hljs.COMMENT(
  	        /\^rem\{/,
  	        /\}/,
  	        {
  	          relevance: 10,
  	          contains: [ CURLY_SUBCOMMENT ]
  	        }
  	      ),
  	      {
  	        className: 'meta',
  	        begin: '^@(?:BASE|USE|CLASS|OPTIONS)$',
  	        relevance: 10
  	      },
  	      {
  	        className: 'title',
  	        begin: '@[\\w\\-]+\\[[\\w^;\\-]*\\](?:\\[[\\w^;\\-]*\\])?(?:.*)$'
  	      },
  	      {
  	        className: 'variable',
  	        begin: /\$\{?[\w\-.:]+\}?/
  	      },
  	      {
  	        className: 'keyword',
  	        begin: /\^[\w\-.:]+/
  	      },
  	      {
  	        className: 'number',
  	        begin: '\\^#[0-9a-fA-F]+'
  	      },
  	      hljs.C_NUMBER_MODE
  	    ]
  	  };
  	}

  	parser3_1 = parser3;
  	return parser3_1;
  }

  /*
  Language: Packet Filter config
  Description: pf.conf — packet filter configuration file (OpenBSD)
  Author: Peter Piwowarski <oldlaptop654@aol.com>
  Website: http://man.openbsd.org/pf.conf
  Category: config
  */

  var pf_1;
  var hasRequiredPf;

  function requirePf () {
  	if (hasRequiredPf) return pf_1;
  	hasRequiredPf = 1;
  	function pf(hljs) {
  	  const MACRO = {
  	    className: 'variable',
  	    begin: /\$[\w\d#@][\w\d_]*/,
  	    relevance: 0
  	  };
  	  const TABLE = {
  	    className: 'variable',
  	    begin: /<(?!\/)/,
  	    end: />/
  	  };

  	  return {
  	    name: 'Packet Filter config',
  	    aliases: [ 'pf.conf' ],
  	    keywords: {
  	      $pattern: /[a-z0-9_<>-]+/,
  	      built_in: /* block match pass are "actions" in pf.conf(5), the rest are
  	                 * lexically similar top-level commands.
  	                 */
  	        'block match pass load anchor|5 antispoof|10 set table',
  	      keyword:
  	        'in out log quick on rdomain inet inet6 proto from port os to route '
  	        + 'allow-opts divert-packet divert-reply divert-to flags group icmp-type '
  	        + 'icmp6-type label once probability recieved-on rtable prio queue '
  	        + 'tos tag tagged user keep fragment for os drop '
  	        + 'af-to|10 binat-to|10 nat-to|10 rdr-to|10 bitmask least-stats random round-robin '
  	        + 'source-hash static-port '
  	        + 'dup-to reply-to route-to '
  	        + 'parent bandwidth default min max qlimit '
  	        + 'block-policy debug fingerprints hostid limit loginterface optimization '
  	        + 'reassemble ruleset-optimization basic none profile skip state-defaults '
  	        + 'state-policy timeout '
  	        + 'const counters persist '
  	        + 'no modulate synproxy state|5 floating if-bound no-sync pflow|10 sloppy '
  	        + 'source-track global rule max-src-nodes max-src-states max-src-conn '
  	        + 'max-src-conn-rate overload flush '
  	        + 'scrub|5 max-mss min-ttl no-df|10 random-id',
  	      literal:
  	        'all any no-route self urpf-failed egress|5 unknown'
  	    },
  	    contains: [
  	      hljs.HASH_COMMENT_MODE,
  	      hljs.NUMBER_MODE,
  	      hljs.QUOTE_STRING_MODE,
  	      MACRO,
  	      TABLE
  	    ]
  	  };
  	}

  	pf_1 = pf;
  	return pf_1;
  }

  /*
  Language: PostgreSQL and PL/pgSQL
  Author: Egor Rogov (e.rogov@postgrespro.ru)
  Website: https://www.postgresql.org/docs/11/sql.html
  Description:
      This language incorporates both PostgreSQL SQL dialect and PL/pgSQL language.
      It is based on PostgreSQL version 11. Some notes:
      - Text in double-dollar-strings is _always_ interpreted as some programming code. Text
        in ordinary quotes is _never_ interpreted that way and highlighted just as a string.
      - There are quite a bit "special cases". That's because many keywords are not strictly
        they are keywords in some contexts and ordinary identifiers in others. Only some
        of such cases are handled; you still can get some of your identifiers highlighted
        wrong way.
      - Function names deliberately are not highlighted. There is no way to tell function
        call from other constructs, hence we can't highlight _all_ function names. And
        some names highlighted while others not looks ugly.
  */

  var pgsql_1;
  var hasRequiredPgsql;

  function requirePgsql () {
  	if (hasRequiredPgsql) return pgsql_1;
  	hasRequiredPgsql = 1;
  	function pgsql(hljs) {
  	  const COMMENT_MODE = hljs.COMMENT('--', '$');
  	  const UNQUOTED_IDENT = '[a-zA-Z_][a-zA-Z_0-9$]*';
  	  const DOLLAR_STRING = '\\$([a-zA-Z_]?|[a-zA-Z_][a-zA-Z_0-9]*)\\$';
  	  const LABEL = '<<\\s*' + UNQUOTED_IDENT + '\\s*>>';

  	  const SQL_KW =
  	    // https://www.postgresql.org/docs/11/static/sql-keywords-appendix.html
  	    // https://www.postgresql.org/docs/11/static/sql-commands.html
  	    // SQL commands (starting words)
  	    'ABORT ALTER ANALYZE BEGIN CALL CHECKPOINT|10 CLOSE CLUSTER COMMENT COMMIT COPY CREATE DEALLOCATE DECLARE '
  	    + 'DELETE DISCARD DO DROP END EXECUTE EXPLAIN FETCH GRANT IMPORT INSERT LISTEN LOAD LOCK MOVE NOTIFY '
  	    + 'PREPARE REASSIGN|10 REFRESH REINDEX RELEASE RESET REVOKE ROLLBACK SAVEPOINT SECURITY SELECT SET SHOW '
  	    + 'START TRUNCATE UNLISTEN|10 UPDATE VACUUM|10 VALUES '
  	    // SQL commands (others)
  	    + 'AGGREGATE COLLATION CONVERSION|10 DATABASE DEFAULT PRIVILEGES DOMAIN TRIGGER EXTENSION FOREIGN '
  	    + 'WRAPPER|10 TABLE FUNCTION GROUP LANGUAGE LARGE OBJECT MATERIALIZED VIEW OPERATOR CLASS '
  	    + 'FAMILY POLICY PUBLICATION|10 ROLE RULE SCHEMA SEQUENCE SERVER STATISTICS SUBSCRIPTION SYSTEM '
  	    + 'TABLESPACE CONFIGURATION DICTIONARY PARSER TEMPLATE TYPE USER MAPPING PREPARED ACCESS '
  	    + 'METHOD CAST AS TRANSFORM TRANSACTION OWNED TO INTO SESSION AUTHORIZATION '
  	    + 'INDEX PROCEDURE ASSERTION '
  	    // additional reserved key words
  	    + 'ALL ANALYSE AND ANY ARRAY ASC ASYMMETRIC|10 BOTH CASE CHECK '
  	    + 'COLLATE COLUMN CONCURRENTLY|10 CONSTRAINT CROSS '
  	    + 'DEFERRABLE RANGE '
  	    + 'DESC DISTINCT ELSE EXCEPT FOR FREEZE|10 FROM FULL HAVING '
  	    + 'ILIKE IN INITIALLY INNER INTERSECT IS ISNULL JOIN LATERAL LEADING LIKE LIMIT '
  	    + 'NATURAL NOT NOTNULL NULL OFFSET ON ONLY OR ORDER OUTER OVERLAPS PLACING PRIMARY '
  	    + 'REFERENCES RETURNING SIMILAR SOME SYMMETRIC TABLESAMPLE THEN '
  	    + 'TRAILING UNION UNIQUE USING VARIADIC|10 VERBOSE WHEN WHERE WINDOW WITH '
  	    // some of non-reserved (which are used in clauses or as PL/pgSQL keyword)
  	    + 'BY RETURNS INOUT OUT SETOF|10 IF STRICT CURRENT CONTINUE OWNER LOCATION OVER PARTITION WITHIN '
  	    + 'BETWEEN ESCAPE EXTERNAL INVOKER DEFINER WORK RENAME VERSION CONNECTION CONNECT '
  	    + 'TABLES TEMP TEMPORARY FUNCTIONS SEQUENCES TYPES SCHEMAS OPTION CASCADE RESTRICT ADD ADMIN '
  	    + 'EXISTS VALID VALIDATE ENABLE DISABLE REPLICA|10 ALWAYS PASSING COLUMNS PATH '
  	    + 'REF VALUE OVERRIDING IMMUTABLE STABLE VOLATILE BEFORE AFTER EACH ROW PROCEDURAL '
  	    + 'ROUTINE NO HANDLER VALIDATOR OPTIONS STORAGE OIDS|10 WITHOUT INHERIT DEPENDS CALLED '
  	    + 'INPUT LEAKPROOF|10 COST ROWS NOWAIT SEARCH UNTIL ENCRYPTED|10 PASSWORD CONFLICT|10 '
  	    + 'INSTEAD INHERITS CHARACTERISTICS WRITE CURSOR ALSO STATEMENT SHARE EXCLUSIVE INLINE '
  	    + 'ISOLATION REPEATABLE READ COMMITTED SERIALIZABLE UNCOMMITTED LOCAL GLOBAL SQL PROCEDURES '
  	    + 'RECURSIVE SNAPSHOT ROLLUP CUBE TRUSTED|10 INCLUDE FOLLOWING PRECEDING UNBOUNDED RANGE GROUPS '
  	    + 'UNENCRYPTED|10 SYSID FORMAT DELIMITER HEADER QUOTE ENCODING FILTER OFF '
  	    // some parameters of VACUUM/ANALYZE/EXPLAIN
  	    + 'FORCE_QUOTE FORCE_NOT_NULL FORCE_NULL COSTS BUFFERS TIMING SUMMARY DISABLE_PAGE_SKIPPING '
  	    //
  	    + 'RESTART CYCLE GENERATED IDENTITY DEFERRED IMMEDIATE LEVEL LOGGED UNLOGGED '
  	    + 'OF NOTHING NONE EXCLUDE ATTRIBUTE '
  	    // from GRANT (not keywords actually)
  	    + 'USAGE ROUTINES '
  	    // actually literals, but look better this way (due to IS TRUE, IS FALSE, ISNULL etc)
  	    + 'TRUE FALSE NAN INFINITY ';

  	  const ROLE_ATTRS = // only those not in keywrods already
  	    'SUPERUSER NOSUPERUSER CREATEDB NOCREATEDB CREATEROLE NOCREATEROLE INHERIT NOINHERIT '
  	    + 'LOGIN NOLOGIN REPLICATION NOREPLICATION BYPASSRLS NOBYPASSRLS ';

  	  const PLPGSQL_KW =
  	    'ALIAS BEGIN CONSTANT DECLARE END EXCEPTION RETURN PERFORM|10 RAISE GET DIAGNOSTICS '
  	    + 'STACKED|10 FOREACH LOOP ELSIF EXIT WHILE REVERSE SLICE DEBUG LOG INFO NOTICE WARNING ASSERT '
  	    + 'OPEN ';

  	  const TYPES =
  	    // https://www.postgresql.org/docs/11/static/datatype.html
  	    'BIGINT INT8 BIGSERIAL SERIAL8 BIT VARYING VARBIT BOOLEAN BOOL BOX BYTEA CHARACTER CHAR VARCHAR '
  	    + 'CIDR CIRCLE DATE DOUBLE PRECISION FLOAT8 FLOAT INET INTEGER INT INT4 INTERVAL JSON JSONB LINE LSEG|10 '
  	    + 'MACADDR MACADDR8 MONEY NUMERIC DEC DECIMAL PATH POINT POLYGON REAL FLOAT4 SMALLINT INT2 '
  	    + 'SMALLSERIAL|10 SERIAL2|10 SERIAL|10 SERIAL4|10 TEXT TIME ZONE TIMETZ|10 TIMESTAMP TIMESTAMPTZ|10 TSQUERY|10 TSVECTOR|10 '
  	    + 'TXID_SNAPSHOT|10 UUID XML NATIONAL NCHAR '
  	    + 'INT4RANGE|10 INT8RANGE|10 NUMRANGE|10 TSRANGE|10 TSTZRANGE|10 DATERANGE|10 '
  	    // pseudotypes
  	    + 'ANYELEMENT ANYARRAY ANYNONARRAY ANYENUM ANYRANGE CSTRING INTERNAL '
  	    + 'RECORD PG_DDL_COMMAND VOID UNKNOWN OPAQUE REFCURSOR '
  	    // spec. type
  	    + 'NAME '
  	    // OID-types
  	    + 'OID REGPROC|10 REGPROCEDURE|10 REGOPER|10 REGOPERATOR|10 REGCLASS|10 REGTYPE|10 REGROLE|10 '
  	    + 'REGNAMESPACE|10 REGCONFIG|10 REGDICTIONARY|10 ';// +

  	  const TYPES_RE =
  	    TYPES.trim()
  	      .split(' ')
  	      .map(function(val) { return val.split('|')[0]; })
  	      .join('|');

  	  const SQL_BI =
  	    'CURRENT_TIME CURRENT_TIMESTAMP CURRENT_USER CURRENT_CATALOG|10 CURRENT_DATE LOCALTIME LOCALTIMESTAMP '
  	    + 'CURRENT_ROLE|10 CURRENT_SCHEMA|10 SESSION_USER PUBLIC ';

  	  const PLPGSQL_BI =
  	    'FOUND NEW OLD TG_NAME|10 TG_WHEN|10 TG_LEVEL|10 TG_OP|10 TG_RELID|10 TG_RELNAME|10 '
  	    + 'TG_TABLE_NAME|10 TG_TABLE_SCHEMA|10 TG_NARGS|10 TG_ARGV|10 TG_EVENT|10 TG_TAG|10 '
  	    // get diagnostics
  	    + 'ROW_COUNT RESULT_OID|10 PG_CONTEXT|10 RETURNED_SQLSTATE COLUMN_NAME CONSTRAINT_NAME '
  	    + 'PG_DATATYPE_NAME|10 MESSAGE_TEXT TABLE_NAME SCHEMA_NAME PG_EXCEPTION_DETAIL|10 '
  	    + 'PG_EXCEPTION_HINT|10 PG_EXCEPTION_CONTEXT|10 ';

  	  const PLPGSQL_EXCEPTIONS =
  	    // exceptions https://www.postgresql.org/docs/current/static/errcodes-appendix.html
  	    'SQLSTATE SQLERRM|10 '
  	    + 'SUCCESSFUL_COMPLETION WARNING DYNAMIC_RESULT_SETS_RETURNED IMPLICIT_ZERO_BIT_PADDING '
  	    + 'NULL_VALUE_ELIMINATED_IN_SET_FUNCTION PRIVILEGE_NOT_GRANTED PRIVILEGE_NOT_REVOKED '
  	    + 'STRING_DATA_RIGHT_TRUNCATION DEPRECATED_FEATURE NO_DATA NO_ADDITIONAL_DYNAMIC_RESULT_SETS_RETURNED '
  	    + 'SQL_STATEMENT_NOT_YET_COMPLETE CONNECTION_EXCEPTION CONNECTION_DOES_NOT_EXIST CONNECTION_FAILURE '
  	    + 'SQLCLIENT_UNABLE_TO_ESTABLISH_SQLCONNECTION SQLSERVER_REJECTED_ESTABLISHMENT_OF_SQLCONNECTION '
  	    + 'TRANSACTION_RESOLUTION_UNKNOWN PROTOCOL_VIOLATION TRIGGERED_ACTION_EXCEPTION FEATURE_NOT_SUPPORTED '
  	    + 'INVALID_TRANSACTION_INITIATION LOCATOR_EXCEPTION INVALID_LOCATOR_SPECIFICATION INVALID_GRANTOR '
  	    + 'INVALID_GRANT_OPERATION INVALID_ROLE_SPECIFICATION DIAGNOSTICS_EXCEPTION '
  	    + 'STACKED_DIAGNOSTICS_ACCESSED_WITHOUT_ACTIVE_HANDLER CASE_NOT_FOUND CARDINALITY_VIOLATION '
  	    + 'DATA_EXCEPTION ARRAY_SUBSCRIPT_ERROR CHARACTER_NOT_IN_REPERTOIRE DATETIME_FIELD_OVERFLOW '
  	    + 'DIVISION_BY_ZERO ERROR_IN_ASSIGNMENT ESCAPE_CHARACTER_CONFLICT INDICATOR_OVERFLOW '
  	    + 'INTERVAL_FIELD_OVERFLOW INVALID_ARGUMENT_FOR_LOGARITHM INVALID_ARGUMENT_FOR_NTILE_FUNCTION '
  	    + 'INVALID_ARGUMENT_FOR_NTH_VALUE_FUNCTION INVALID_ARGUMENT_FOR_POWER_FUNCTION '
  	    + 'INVALID_ARGUMENT_FOR_WIDTH_BUCKET_FUNCTION INVALID_CHARACTER_VALUE_FOR_CAST '
  	    + 'INVALID_DATETIME_FORMAT INVALID_ESCAPE_CHARACTER INVALID_ESCAPE_OCTET INVALID_ESCAPE_SEQUENCE '
  	    + 'NONSTANDARD_USE_OF_ESCAPE_CHARACTER INVALID_INDICATOR_PARAMETER_VALUE INVALID_PARAMETER_VALUE '
  	    + 'INVALID_REGULAR_EXPRESSION INVALID_ROW_COUNT_IN_LIMIT_CLAUSE '
  	    + 'INVALID_ROW_COUNT_IN_RESULT_OFFSET_CLAUSE INVALID_TABLESAMPLE_ARGUMENT INVALID_TABLESAMPLE_REPEAT '
  	    + 'INVALID_TIME_ZONE_DISPLACEMENT_VALUE INVALID_USE_OF_ESCAPE_CHARACTER MOST_SPECIFIC_TYPE_MISMATCH '
  	    + 'NULL_VALUE_NOT_ALLOWED NULL_VALUE_NO_INDICATOR_PARAMETER NUMERIC_VALUE_OUT_OF_RANGE '
  	    + 'SEQUENCE_GENERATOR_LIMIT_EXCEEDED STRING_DATA_LENGTH_MISMATCH STRING_DATA_RIGHT_TRUNCATION '
  	    + 'SUBSTRING_ERROR TRIM_ERROR UNTERMINATED_C_STRING ZERO_LENGTH_CHARACTER_STRING '
  	    + 'FLOATING_POINT_EXCEPTION INVALID_TEXT_REPRESENTATION INVALID_BINARY_REPRESENTATION '
  	    + 'BAD_COPY_FILE_FORMAT UNTRANSLATABLE_CHARACTER NOT_AN_XML_DOCUMENT INVALID_XML_DOCUMENT '
  	    + 'INVALID_XML_CONTENT INVALID_XML_COMMENT INVALID_XML_PROCESSING_INSTRUCTION '
  	    + 'INTEGRITY_CONSTRAINT_VIOLATION RESTRICT_VIOLATION NOT_NULL_VIOLATION FOREIGN_KEY_VIOLATION '
  	    + 'UNIQUE_VIOLATION CHECK_VIOLATION EXCLUSION_VIOLATION INVALID_CURSOR_STATE '
  	    + 'INVALID_TRANSACTION_STATE ACTIVE_SQL_TRANSACTION BRANCH_TRANSACTION_ALREADY_ACTIVE '
  	    + 'HELD_CURSOR_REQUIRES_SAME_ISOLATION_LEVEL INAPPROPRIATE_ACCESS_MODE_FOR_BRANCH_TRANSACTION '
  	    + 'INAPPROPRIATE_ISOLATION_LEVEL_FOR_BRANCH_TRANSACTION '
  	    + 'NO_ACTIVE_SQL_TRANSACTION_FOR_BRANCH_TRANSACTION READ_ONLY_SQL_TRANSACTION '
  	    + 'SCHEMA_AND_DATA_STATEMENT_MIXING_NOT_SUPPORTED NO_ACTIVE_SQL_TRANSACTION '
  	    + 'IN_FAILED_SQL_TRANSACTION IDLE_IN_TRANSACTION_SESSION_TIMEOUT INVALID_SQL_STATEMENT_NAME '
  	    + 'TRIGGERED_DATA_CHANGE_VIOLATION INVALID_AUTHORIZATION_SPECIFICATION INVALID_PASSWORD '
  	    + 'DEPENDENT_PRIVILEGE_DESCRIPTORS_STILL_EXIST DEPENDENT_OBJECTS_STILL_EXIST '
  	    + 'INVALID_TRANSACTION_TERMINATION SQL_ROUTINE_EXCEPTION FUNCTION_EXECUTED_NO_RETURN_STATEMENT '
  	    + 'MODIFYING_SQL_DATA_NOT_PERMITTED PROHIBITED_SQL_STATEMENT_ATTEMPTED '
  	    + 'READING_SQL_DATA_NOT_PERMITTED INVALID_CURSOR_NAME EXTERNAL_ROUTINE_EXCEPTION '
  	    + 'CONTAINING_SQL_NOT_PERMITTED MODIFYING_SQL_DATA_NOT_PERMITTED '
  	    + 'PROHIBITED_SQL_STATEMENT_ATTEMPTED READING_SQL_DATA_NOT_PERMITTED '
  	    + 'EXTERNAL_ROUTINE_INVOCATION_EXCEPTION INVALID_SQLSTATE_RETURNED NULL_VALUE_NOT_ALLOWED '
  	    + 'TRIGGER_PROTOCOL_VIOLATED SRF_PROTOCOL_VIOLATED EVENT_TRIGGER_PROTOCOL_VIOLATED '
  	    + 'SAVEPOINT_EXCEPTION INVALID_SAVEPOINT_SPECIFICATION INVALID_CATALOG_NAME '
  	    + 'INVALID_SCHEMA_NAME TRANSACTION_ROLLBACK TRANSACTION_INTEGRITY_CONSTRAINT_VIOLATION '
  	    + 'SERIALIZATION_FAILURE STATEMENT_COMPLETION_UNKNOWN DEADLOCK_DETECTED '
  	    + 'SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION SYNTAX_ERROR INSUFFICIENT_PRIVILEGE CANNOT_COERCE '
  	    + 'GROUPING_ERROR WINDOWING_ERROR INVALID_RECURSION INVALID_FOREIGN_KEY INVALID_NAME '
  	    + 'NAME_TOO_LONG RESERVED_NAME DATATYPE_MISMATCH INDETERMINATE_DATATYPE COLLATION_MISMATCH '
  	    + 'INDETERMINATE_COLLATION WRONG_OBJECT_TYPE GENERATED_ALWAYS UNDEFINED_COLUMN '
  	    + 'UNDEFINED_FUNCTION UNDEFINED_TABLE UNDEFINED_PARAMETER UNDEFINED_OBJECT '
  	    + 'DUPLICATE_COLUMN DUPLICATE_CURSOR DUPLICATE_DATABASE DUPLICATE_FUNCTION '
  	    + 'DUPLICATE_PREPARED_STATEMENT DUPLICATE_SCHEMA DUPLICATE_TABLE DUPLICATE_ALIAS '
  	    + 'DUPLICATE_OBJECT AMBIGUOUS_COLUMN AMBIGUOUS_FUNCTION AMBIGUOUS_PARAMETER AMBIGUOUS_ALIAS '
  	    + 'INVALID_COLUMN_REFERENCE INVALID_COLUMN_DEFINITION INVALID_CURSOR_DEFINITION '
  	    + 'INVALID_DATABASE_DEFINITION INVALID_FUNCTION_DEFINITION '
  	    + 'INVALID_PREPARED_STATEMENT_DEFINITION INVALID_SCHEMA_DEFINITION INVALID_TABLE_DEFINITION '
  	    + 'INVALID_OBJECT_DEFINITION WITH_CHECK_OPTION_VIOLATION INSUFFICIENT_RESOURCES DISK_FULL '
  	    + 'OUT_OF_MEMORY TOO_MANY_CONNECTIONS CONFIGURATION_LIMIT_EXCEEDED PROGRAM_LIMIT_EXCEEDED '
  	    + 'STATEMENT_TOO_COMPLEX TOO_MANY_COLUMNS TOO_MANY_ARGUMENTS OBJECT_NOT_IN_PREREQUISITE_STATE '
  	    + 'OBJECT_IN_USE CANT_CHANGE_RUNTIME_PARAM LOCK_NOT_AVAILABLE OPERATOR_INTERVENTION '
  	    + 'QUERY_CANCELED ADMIN_SHUTDOWN CRASH_SHUTDOWN CANNOT_CONNECT_NOW DATABASE_DROPPED '
  	    + 'SYSTEM_ERROR IO_ERROR UNDEFINED_FILE DUPLICATE_FILE SNAPSHOT_TOO_OLD CONFIG_FILE_ERROR '
  	    + 'LOCK_FILE_EXISTS FDW_ERROR FDW_COLUMN_NAME_NOT_FOUND FDW_DYNAMIC_PARAMETER_VALUE_NEEDED '
  	    + 'FDW_FUNCTION_SEQUENCE_ERROR FDW_INCONSISTENT_DESCRIPTOR_INFORMATION '
  	    + 'FDW_INVALID_ATTRIBUTE_VALUE FDW_INVALID_COLUMN_NAME FDW_INVALID_COLUMN_NUMBER '
  	    + 'FDW_INVALID_DATA_TYPE FDW_INVALID_DATA_TYPE_DESCRIPTORS '
  	    + 'FDW_INVALID_DESCRIPTOR_FIELD_IDENTIFIER FDW_INVALID_HANDLE FDW_INVALID_OPTION_INDEX '
  	    + 'FDW_INVALID_OPTION_NAME FDW_INVALID_STRING_LENGTH_OR_BUFFER_LENGTH '
  	    + 'FDW_INVALID_STRING_FORMAT FDW_INVALID_USE_OF_NULL_POINTER FDW_TOO_MANY_HANDLES '
  	    + 'FDW_OUT_OF_MEMORY FDW_NO_SCHEMAS FDW_OPTION_NAME_NOT_FOUND FDW_REPLY_HANDLE '
  	    + 'FDW_SCHEMA_NOT_FOUND FDW_TABLE_NOT_FOUND FDW_UNABLE_TO_CREATE_EXECUTION '
  	    + 'FDW_UNABLE_TO_CREATE_REPLY FDW_UNABLE_TO_ESTABLISH_CONNECTION PLPGSQL_ERROR '
  	    + 'RAISE_EXCEPTION NO_DATA_FOUND TOO_MANY_ROWS ASSERT_FAILURE INTERNAL_ERROR DATA_CORRUPTED '
  	    + 'INDEX_CORRUPTED ';

  	  const FUNCTIONS =
  	    // https://www.postgresql.org/docs/11/static/functions-aggregate.html
  	    'ARRAY_AGG AVG BIT_AND BIT_OR BOOL_AND BOOL_OR COUNT EVERY JSON_AGG JSONB_AGG JSON_OBJECT_AGG '
  	    + 'JSONB_OBJECT_AGG MAX MIN MODE STRING_AGG SUM XMLAGG '
  	    + 'CORR COVAR_POP COVAR_SAMP REGR_AVGX REGR_AVGY REGR_COUNT REGR_INTERCEPT REGR_R2 REGR_SLOPE '
  	    + 'REGR_SXX REGR_SXY REGR_SYY STDDEV STDDEV_POP STDDEV_SAMP VARIANCE VAR_POP VAR_SAMP '
  	    + 'PERCENTILE_CONT PERCENTILE_DISC '
  	    // https://www.postgresql.org/docs/11/static/functions-window.html
  	    + 'ROW_NUMBER RANK DENSE_RANK PERCENT_RANK CUME_DIST NTILE LAG LEAD FIRST_VALUE LAST_VALUE NTH_VALUE '
  	    // https://www.postgresql.org/docs/11/static/functions-comparison.html
  	    + 'NUM_NONNULLS NUM_NULLS '
  	    // https://www.postgresql.org/docs/11/static/functions-math.html
  	    + 'ABS CBRT CEIL CEILING DEGREES DIV EXP FLOOR LN LOG MOD PI POWER RADIANS ROUND SCALE SIGN SQRT '
  	    + 'TRUNC WIDTH_BUCKET '
  	    + 'RANDOM SETSEED '
  	    + 'ACOS ACOSD ASIN ASIND ATAN ATAND ATAN2 ATAN2D COS COSD COT COTD SIN SIND TAN TAND '
  	    // https://www.postgresql.org/docs/11/static/functions-string.html
  	    + 'BIT_LENGTH CHAR_LENGTH CHARACTER_LENGTH LOWER OCTET_LENGTH OVERLAY POSITION SUBSTRING TREAT TRIM UPPER '
  	    + 'ASCII BTRIM CHR CONCAT CONCAT_WS CONVERT CONVERT_FROM CONVERT_TO DECODE ENCODE INITCAP '
  	    + 'LEFT LENGTH LPAD LTRIM MD5 PARSE_IDENT PG_CLIENT_ENCODING QUOTE_IDENT|10 QUOTE_LITERAL|10 '
  	    + 'QUOTE_NULLABLE|10 REGEXP_MATCH REGEXP_MATCHES REGEXP_REPLACE REGEXP_SPLIT_TO_ARRAY '
  	    + 'REGEXP_SPLIT_TO_TABLE REPEAT REPLACE REVERSE RIGHT RPAD RTRIM SPLIT_PART STRPOS SUBSTR '
  	    + 'TO_ASCII TO_HEX TRANSLATE '
  	    // https://www.postgresql.org/docs/11/static/functions-binarystring.html
  	    + 'OCTET_LENGTH GET_BIT GET_BYTE SET_BIT SET_BYTE '
  	    // https://www.postgresql.org/docs/11/static/functions-formatting.html
  	    + 'TO_CHAR TO_DATE TO_NUMBER TO_TIMESTAMP '
  	    // https://www.postgresql.org/docs/11/static/functions-datetime.html
  	    + 'AGE CLOCK_TIMESTAMP|10 DATE_PART DATE_TRUNC ISFINITE JUSTIFY_DAYS JUSTIFY_HOURS JUSTIFY_INTERVAL '
  	    + 'MAKE_DATE MAKE_INTERVAL|10 MAKE_TIME MAKE_TIMESTAMP|10 MAKE_TIMESTAMPTZ|10 NOW STATEMENT_TIMESTAMP|10 '
  	    + 'TIMEOFDAY TRANSACTION_TIMESTAMP|10 '
  	    // https://www.postgresql.org/docs/11/static/functions-enum.html
  	    + 'ENUM_FIRST ENUM_LAST ENUM_RANGE '
  	    // https://www.postgresql.org/docs/11/static/functions-geometry.html
  	    + 'AREA CENTER DIAMETER HEIGHT ISCLOSED ISOPEN NPOINTS PCLOSE POPEN RADIUS WIDTH '
  	    + 'BOX BOUND_BOX CIRCLE LINE LSEG PATH POLYGON '
  	    // https://www.postgresql.org/docs/11/static/functions-net.html
  	    + 'ABBREV BROADCAST HOST HOSTMASK MASKLEN NETMASK NETWORK SET_MASKLEN TEXT INET_SAME_FAMILY '
  	    + 'INET_MERGE MACADDR8_SET7BIT '
  	    // https://www.postgresql.org/docs/11/static/functions-textsearch.html
  	    + 'ARRAY_TO_TSVECTOR GET_CURRENT_TS_CONFIG NUMNODE PLAINTO_TSQUERY PHRASETO_TSQUERY WEBSEARCH_TO_TSQUERY '
  	    + 'QUERYTREE SETWEIGHT STRIP TO_TSQUERY TO_TSVECTOR JSON_TO_TSVECTOR JSONB_TO_TSVECTOR TS_DELETE '
  	    + 'TS_FILTER TS_HEADLINE TS_RANK TS_RANK_CD TS_REWRITE TSQUERY_PHRASE TSVECTOR_TO_ARRAY '
  	    + 'TSVECTOR_UPDATE_TRIGGER TSVECTOR_UPDATE_TRIGGER_COLUMN '
  	    // https://www.postgresql.org/docs/11/static/functions-xml.html
  	    + 'XMLCOMMENT XMLCONCAT XMLELEMENT XMLFOREST XMLPI XMLROOT '
  	    + 'XMLEXISTS XML_IS_WELL_FORMED XML_IS_WELL_FORMED_DOCUMENT XML_IS_WELL_FORMED_CONTENT '
  	    + 'XPATH XPATH_EXISTS XMLTABLE XMLNAMESPACES '
  	    + 'TABLE_TO_XML TABLE_TO_XMLSCHEMA TABLE_TO_XML_AND_XMLSCHEMA '
  	    + 'QUERY_TO_XML QUERY_TO_XMLSCHEMA QUERY_TO_XML_AND_XMLSCHEMA '
  	    + 'CURSOR_TO_XML CURSOR_TO_XMLSCHEMA '
  	    + 'SCHEMA_TO_XML SCHEMA_TO_XMLSCHEMA SCHEMA_TO_XML_AND_XMLSCHEMA '
  	    + 'DATABASE_TO_XML DATABASE_TO_XMLSCHEMA DATABASE_TO_XML_AND_XMLSCHEMA '
  	    + 'XMLATTRIBUTES '
  	    // https://www.postgresql.org/docs/11/static/functions-json.html
  	    + 'TO_JSON TO_JSONB ARRAY_TO_JSON ROW_TO_JSON JSON_BUILD_ARRAY JSONB_BUILD_ARRAY JSON_BUILD_OBJECT '
  	    + 'JSONB_BUILD_OBJECT JSON_OBJECT JSONB_OBJECT JSON_ARRAY_LENGTH JSONB_ARRAY_LENGTH JSON_EACH '
  	    + 'JSONB_EACH JSON_EACH_TEXT JSONB_EACH_TEXT JSON_EXTRACT_PATH JSONB_EXTRACT_PATH '
  	    + 'JSON_OBJECT_KEYS JSONB_OBJECT_KEYS JSON_POPULATE_RECORD JSONB_POPULATE_RECORD JSON_POPULATE_RECORDSET '
  	    + 'JSONB_POPULATE_RECORDSET JSON_ARRAY_ELEMENTS JSONB_ARRAY_ELEMENTS JSON_ARRAY_ELEMENTS_TEXT '
  	    + 'JSONB_ARRAY_ELEMENTS_TEXT JSON_TYPEOF JSONB_TYPEOF JSON_TO_RECORD JSONB_TO_RECORD JSON_TO_RECORDSET '
  	    + 'JSONB_TO_RECORDSET JSON_STRIP_NULLS JSONB_STRIP_NULLS JSONB_SET JSONB_INSERT JSONB_PRETTY '
  	    // https://www.postgresql.org/docs/11/static/functions-sequence.html
  	    + 'CURRVAL LASTVAL NEXTVAL SETVAL '
  	    // https://www.postgresql.org/docs/11/static/functions-conditional.html
  	    + 'COALESCE NULLIF GREATEST LEAST '
  	    // https://www.postgresql.org/docs/11/static/functions-array.html
  	    + 'ARRAY_APPEND ARRAY_CAT ARRAY_NDIMS ARRAY_DIMS ARRAY_FILL ARRAY_LENGTH ARRAY_LOWER ARRAY_POSITION '
  	    + 'ARRAY_POSITIONS ARRAY_PREPEND ARRAY_REMOVE ARRAY_REPLACE ARRAY_TO_STRING ARRAY_UPPER CARDINALITY '
  	    + 'STRING_TO_ARRAY UNNEST '
  	    // https://www.postgresql.org/docs/11/static/functions-range.html
  	    + 'ISEMPTY LOWER_INC UPPER_INC LOWER_INF UPPER_INF RANGE_MERGE '
  	    // https://www.postgresql.org/docs/11/static/functions-srf.html
  	    + 'GENERATE_SERIES GENERATE_SUBSCRIPTS '
  	    // https://www.postgresql.org/docs/11/static/functions-info.html
  	    + 'CURRENT_DATABASE CURRENT_QUERY CURRENT_SCHEMA|10 CURRENT_SCHEMAS|10 INET_CLIENT_ADDR INET_CLIENT_PORT '
  	    + 'INET_SERVER_ADDR INET_SERVER_PORT ROW_SECURITY_ACTIVE FORMAT_TYPE '
  	    + 'TO_REGCLASS TO_REGPROC TO_REGPROCEDURE TO_REGOPER TO_REGOPERATOR TO_REGTYPE TO_REGNAMESPACE TO_REGROLE '
  	    + 'COL_DESCRIPTION OBJ_DESCRIPTION SHOBJ_DESCRIPTION '
  	    + 'TXID_CURRENT TXID_CURRENT_IF_ASSIGNED TXID_CURRENT_SNAPSHOT TXID_SNAPSHOT_XIP TXID_SNAPSHOT_XMAX '
  	    + 'TXID_SNAPSHOT_XMIN TXID_VISIBLE_IN_SNAPSHOT TXID_STATUS '
  	    // https://www.postgresql.org/docs/11/static/functions-admin.html
  	    + 'CURRENT_SETTING SET_CONFIG BRIN_SUMMARIZE_NEW_VALUES BRIN_SUMMARIZE_RANGE BRIN_DESUMMARIZE_RANGE '
  	    + 'GIN_CLEAN_PENDING_LIST '
  	    // https://www.postgresql.org/docs/11/static/functions-trigger.html
  	    + 'SUPPRESS_REDUNDANT_UPDATES_TRIGGER '
  	    // ihttps://www.postgresql.org/docs/devel/static/lo-funcs.html
  	    + 'LO_FROM_BYTEA LO_PUT LO_GET LO_CREAT LO_CREATE LO_UNLINK LO_IMPORT LO_EXPORT LOREAD LOWRITE '
  	    //
  	    + 'GROUPING CAST ';

  	  const FUNCTIONS_RE =
  	      FUNCTIONS.trim()
  	        .split(' ')
  	        .map(function(val) { return val.split('|')[0]; })
  	        .join('|');

  	  return {
  	    name: 'PostgreSQL',
  	    aliases: [
  	      'postgres',
  	      'postgresql'
  	    ],
  	    supersetOf: "sql",
  	    case_insensitive: true,
  	    keywords: {
  	      keyword:
  	            SQL_KW + PLPGSQL_KW + ROLE_ATTRS,
  	      built_in:
  	            SQL_BI + PLPGSQL_BI + PLPGSQL_EXCEPTIONS
  	    },
  	    // Forbid some cunstructs from other languages to improve autodetect. In fact
  	    // "[a-z]:" is legal (as part of array slice), but improbabal.
  	    illegal: /:==|\W\s*\(\*|(^|\s)\$[a-z]|\{\{|[a-z]:\s*$|\.\.\.|TO:|DO:/,
  	    contains: [
  	      // special handling of some words, which are reserved only in some contexts
  	      {
  	        className: 'keyword',
  	        variants: [
  	          { begin: /\bTEXT\s*SEARCH\b/ },
  	          { begin: /\b(PRIMARY|FOREIGN|FOR(\s+NO)?)\s+KEY\b/ },
  	          { begin: /\bPARALLEL\s+(UNSAFE|RESTRICTED|SAFE)\b/ },
  	          { begin: /\bSTORAGE\s+(PLAIN|EXTERNAL|EXTENDED|MAIN)\b/ },
  	          { begin: /\bMATCH\s+(FULL|PARTIAL|SIMPLE)\b/ },
  	          { begin: /\bNULLS\s+(FIRST|LAST)\b/ },
  	          { begin: /\bEVENT\s+TRIGGER\b/ },
  	          { begin: /\b(MAPPING|OR)\s+REPLACE\b/ },
  	          { begin: /\b(FROM|TO)\s+(PROGRAM|STDIN|STDOUT)\b/ },
  	          { begin: /\b(SHARE|EXCLUSIVE)\s+MODE\b/ },
  	          { begin: /\b(LEFT|RIGHT)\s+(OUTER\s+)?JOIN\b/ },
  	          { begin: /\b(FETCH|MOVE)\s+(NEXT|PRIOR|FIRST|LAST|ABSOLUTE|RELATIVE|FORWARD|BACKWARD)\b/ },
  	          { begin: /\bPRESERVE\s+ROWS\b/ },
  	          { begin: /\bDISCARD\s+PLANS\b/ },
  	          { begin: /\bREFERENCING\s+(OLD|NEW)\b/ },
  	          { begin: /\bSKIP\s+LOCKED\b/ },
  	          { begin: /\bGROUPING\s+SETS\b/ },
  	          { begin: /\b(BINARY|INSENSITIVE|SCROLL|NO\s+SCROLL)\s+(CURSOR|FOR)\b/ },
  	          { begin: /\b(WITH|WITHOUT)\s+HOLD\b/ },
  	          { begin: /\bWITH\s+(CASCADED|LOCAL)\s+CHECK\s+OPTION\b/ },
  	          { begin: /\bEXCLUDE\s+(TIES|NO\s+OTHERS)\b/ },
  	          { begin: /\bFORMAT\s+(TEXT|XML|JSON|YAML)\b/ },
  	          { begin: /\bSET\s+((SESSION|LOCAL)\s+)?NAMES\b/ },
  	          { begin: /\bIS\s+(NOT\s+)?UNKNOWN\b/ },
  	          { begin: /\bSECURITY\s+LABEL\b/ },
  	          { begin: /\bSTANDALONE\s+(YES|NO|NO\s+VALUE)\b/ },
  	          { begin: /\bWITH\s+(NO\s+)?DATA\b/ },
  	          { begin: /\b(FOREIGN|SET)\s+DATA\b/ },
  	          { begin: /\bSET\s+(CATALOG|CONSTRAINTS)\b/ },
  	          { begin: /\b(WITH|FOR)\s+ORDINALITY\b/ },
  	          { begin: /\bIS\s+(NOT\s+)?DOCUMENT\b/ },
  	          { begin: /\bXML\s+OPTION\s+(DOCUMENT|CONTENT)\b/ },
  	          { begin: /\b(STRIP|PRESERVE)\s+WHITESPACE\b/ },
  	          { begin: /\bNO\s+(ACTION|MAXVALUE|MINVALUE)\b/ },
  	          { begin: /\bPARTITION\s+BY\s+(RANGE|LIST|HASH)\b/ },
  	          { begin: /\bAT\s+TIME\s+ZONE\b/ },
  	          { begin: /\bGRANTED\s+BY\b/ },
  	          { begin: /\bRETURN\s+(QUERY|NEXT)\b/ },
  	          { begin: /\b(ATTACH|DETACH)\s+PARTITION\b/ },
  	          { begin: /\bFORCE\s+ROW\s+LEVEL\s+SECURITY\b/ },
  	          { begin: /\b(INCLUDING|EXCLUDING)\s+(COMMENTS|CONSTRAINTS|DEFAULTS|IDENTITY|INDEXES|STATISTICS|STORAGE|ALL)\b/ },
  	          { begin: /\bAS\s+(ASSIGNMENT|IMPLICIT|PERMISSIVE|RESTRICTIVE|ENUM|RANGE)\b/ }
  	        ]
  	      },
  	      // functions named as keywords, followed by '('
  	      { begin: /\b(FORMAT|FAMILY|VERSION)\s*\(/
  	        // keywords: { built_in: 'FORMAT FAMILY VERSION' }
  	      },
  	      // INCLUDE ( ... ) in index_parameters in CREATE TABLE
  	      {
  	        begin: /\bINCLUDE\s*\(/,
  	        keywords: 'INCLUDE'
  	      },
  	      // not highlight RANGE if not in frame_clause (not 100% correct, but seems satisfactory)
  	      { begin: /\bRANGE(?!\s*(BETWEEN|UNBOUNDED|CURRENT|[-0-9]+))/ },
  	      // disable highlighting in commands CREATE AGGREGATE/COLLATION/DATABASE/OPERTOR/TEXT SEARCH .../TYPE
  	      // and in PL/pgSQL RAISE ... USING
  	      { begin: /\b(VERSION|OWNER|TEMPLATE|TABLESPACE|CONNECTION\s+LIMIT|PROCEDURE|RESTRICT|JOIN|PARSER|COPY|START|END|COLLATION|INPUT|ANALYZE|STORAGE|LIKE|DEFAULT|DELIMITER|ENCODING|COLUMN|CONSTRAINT|TABLE|SCHEMA)\s*=/ },
  	      // PG_smth; HAS_some_PRIVILEGE
  	      {
  	        // className: 'built_in',
  	        begin: /\b(PG_\w+?|HAS_[A-Z_]+_PRIVILEGE)\b/,
  	        relevance: 10
  	      },
  	      // extract
  	      {
  	        begin: /\bEXTRACT\s*\(/,
  	        end: /\bFROM\b/,
  	        returnEnd: true,
  	        keywords: {
  	          // built_in: 'EXTRACT',
  	          type: 'CENTURY DAY DECADE DOW DOY EPOCH HOUR ISODOW ISOYEAR MICROSECONDS '
  	                        + 'MILLENNIUM MILLISECONDS MINUTE MONTH QUARTER SECOND TIMEZONE TIMEZONE_HOUR '
  	                        + 'TIMEZONE_MINUTE WEEK YEAR' }
  	      },
  	      // xmlelement, xmlpi - special NAME
  	      {
  	        begin: /\b(XMLELEMENT|XMLPI)\s*\(\s*NAME/,
  	        keywords: {
  	          // built_in: 'XMLELEMENT XMLPI',
  	          keyword: 'NAME' }
  	      },
  	      // xmlparse, xmlserialize
  	      {
  	        begin: /\b(XMLPARSE|XMLSERIALIZE)\s*\(\s*(DOCUMENT|CONTENT)/,
  	        keywords: {
  	          // built_in: 'XMLPARSE XMLSERIALIZE',
  	          keyword: 'DOCUMENT CONTENT' }
  	      },
  	      // Sequences. We actually skip everything between CACHE|INCREMENT|MAXVALUE|MINVALUE and
  	      // nearest following numeric constant. Without with trick we find a lot of "keywords"
  	      // in 'avrasm' autodetection test...
  	      {
  	        beginKeywords: 'CACHE INCREMENT MAXVALUE MINVALUE',
  	        end: hljs.C_NUMBER_RE,
  	        returnEnd: true,
  	        keywords: 'BY CACHE INCREMENT MAXVALUE MINVALUE'
  	      },
  	      // WITH|WITHOUT TIME ZONE as part of datatype
  	      {
  	        className: 'type',
  	        begin: /\b(WITH|WITHOUT)\s+TIME\s+ZONE\b/
  	      },
  	      // INTERVAL optional fields
  	      {
  	        className: 'type',
  	        begin: /\bINTERVAL\s+(YEAR|MONTH|DAY|HOUR|MINUTE|SECOND)(\s+TO\s+(MONTH|HOUR|MINUTE|SECOND))?\b/
  	      },
  	      // Pseudo-types which allowed only as return type
  	      {
  	        begin: /\bRETURNS\s+(LANGUAGE_HANDLER|TRIGGER|EVENT_TRIGGER|FDW_HANDLER|INDEX_AM_HANDLER|TSM_HANDLER)\b/,
  	        keywords: {
  	          keyword: 'RETURNS',
  	          type: 'LANGUAGE_HANDLER TRIGGER EVENT_TRIGGER FDW_HANDLER INDEX_AM_HANDLER TSM_HANDLER'
  	        }
  	      },
  	      // Known functions - only when followed by '('
  	      { begin: '\\b(' + FUNCTIONS_RE + ')\\s*\\('
  	        // keywords: { built_in: FUNCTIONS }
  	      },
  	      // Types
  	      { begin: '\\.(' + TYPES_RE + ')\\b' // prevent highlight as type, say, 'oid' in 'pgclass.oid'
  	      },
  	      {
  	        begin: '\\b(' + TYPES_RE + ')\\s+PATH\\b', // in XMLTABLE
  	        keywords: {
  	          keyword: 'PATH', // hopefully no one would use PATH type in XMLTABLE...
  	          type: TYPES.replace('PATH ', '')
  	        }
  	      },
  	      {
  	        className: 'type',
  	        begin: '\\b(' + TYPES_RE + ')\\b'
  	      },
  	      // Strings, see https://www.postgresql.org/docs/11/static/sql-syntax-lexical.html#SQL-SYNTAX-CONSTANTS
  	      {
  	        className: 'string',
  	        begin: '\'',
  	        end: '\'',
  	        contains: [ { begin: '\'\'' } ]
  	      },
  	      {
  	        className: 'string',
  	        begin: '(e|E|u&|U&)\'',
  	        end: '\'',
  	        contains: [ { begin: '\\\\.' } ],
  	        relevance: 10
  	      },
  	      hljs.END_SAME_AS_BEGIN({
  	        begin: DOLLAR_STRING,
  	        end: DOLLAR_STRING,
  	        contains: [
  	          {
  	            // actually we want them all except SQL; listed are those with known implementations
  	            // and XML + JSON just in case
  	            subLanguage: [
  	              'pgsql',
  	              'perl',
  	              'python',
  	              'tcl',
  	              'r',
  	              'lua',
  	              'java',
  	              'php',
  	              'ruby',
  	              'bash',
  	              'scheme',
  	              'xml',
  	              'json'
  	            ],
  	            endsWithParent: true
  	          }
  	        ]
  	      }),
  	      // identifiers in quotes
  	      {
  	        begin: '"',
  	        end: '"',
  	        contains: [ { begin: '""' } ]
  	      },
  	      // numbers
  	      hljs.C_NUMBER_MODE,
  	      // comments
  	      hljs.C_BLOCK_COMMENT_MODE,
  	      COMMENT_MODE,
  	      // PL/pgSQL staff
  	      // %ROWTYPE, %TYPE, $n
  	      {
  	        className: 'meta',
  	        variants: [
  	          { // %TYPE, %ROWTYPE
  	            begin: '%(ROW)?TYPE',
  	            relevance: 10
  	          },
  	          { // $n
  	            begin: '\\$\\d+' },
  	          { // #compiler option
  	            begin: '^#\\w',
  	            end: '$'
  	          }
  	        ]
  	      },
  	      // <<labeles>>
  	      {
  	        className: 'symbol',
  	        begin: LABEL,
  	        relevance: 10
  	      }
  	    ]
  	  };
  	}

  	pgsql_1 = pgsql;
  	return pgsql_1;
  }

  /*
  Language: PHP
  Author: Victor Karamzin <Victor.Karamzin@enterra-inc.com>
  Contributors: Evgeny Stepanischev <imbolk@gmail.com>, Ivan Sagalaev <maniac@softwaremaniacs.org>
  Website: https://www.php.net
  Category: common
  */

  var php_1;
  var hasRequiredPhp;

  function requirePhp () {
  	if (hasRequiredPhp) return php_1;
  	hasRequiredPhp = 1;
  	/**
  	 * @param {HLJSApi} hljs
  	 * @returns {LanguageDetail}
  	 * */
  	function php(hljs) {
  	  const regex = hljs.regex;
  	  // negative look-ahead tries to avoid matching patterns that are not
  	  // Perl at all like $ident$, @ident@, etc.
  	  const NOT_PERL_ETC = /(?![A-Za-z0-9])(?![$])/;
  	  const IDENT_RE = regex.concat(
  	    /[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/,
  	    NOT_PERL_ETC);
  	  // Will not detect camelCase classes
  	  const PASCAL_CASE_CLASS_NAME_RE = regex.concat(
  	    /(\\?[A-Z][a-z0-9_\x7f-\xff]+|\\?[A-Z]+(?=[A-Z][a-z0-9_\x7f-\xff])){1,}/,
  	    NOT_PERL_ETC);
  	  const VARIABLE = {
  	    scope: 'variable',
  	    match: '\\$+' + IDENT_RE,
  	  };
  	  const PREPROCESSOR = {
  	    scope: 'meta',
  	    variants: [
  	      { begin: /<\?php/, relevance: 10 }, // boost for obvious PHP
  	      { begin: /<\?=/ },
  	      // less relevant per PSR-1 which says not to use short-tags
  	      { begin: /<\?/, relevance: 0.1 },
  	      { begin: /\?>/ } // end php tag
  	    ]
  	  };
  	  const SUBST = {
  	    scope: 'subst',
  	    variants: [
  	      { begin: /\$\w+/ },
  	      {
  	        begin: /\{\$/,
  	        end: /\}/
  	      }
  	    ]
  	  };
  	  const SINGLE_QUOTED = hljs.inherit(hljs.APOS_STRING_MODE, { illegal: null, });
  	  const DOUBLE_QUOTED = hljs.inherit(hljs.QUOTE_STRING_MODE, {
  	    illegal: null,
  	    contains: hljs.QUOTE_STRING_MODE.contains.concat(SUBST),
  	  });

  	  const HEREDOC = {
  	    begin: /<<<[ \t]*(?:(\w+)|"(\w+)")\n/,
  	    end: /[ \t]*(\w+)\b/,
  	    contains: hljs.QUOTE_STRING_MODE.contains.concat(SUBST),
  	    'on:begin': (m, resp) => { resp.data._beginMatch = m[1] || m[2]; },
  	    'on:end': (m, resp) => { if (resp.data._beginMatch !== m[1]) resp.ignoreMatch(); },
  	  };

  	  const NOWDOC = hljs.END_SAME_AS_BEGIN({
  	    begin: /<<<[ \t]*'(\w+)'\n/,
  	    end: /[ \t]*(\w+)\b/,
  	  });
  	  // list of valid whitespaces because non-breaking space might be part of a IDENT_RE
  	  const WHITESPACE = '[ \t\n]';
  	  const STRING = {
  	    scope: 'string',
  	    variants: [
  	      DOUBLE_QUOTED,
  	      SINGLE_QUOTED,
  	      HEREDOC,
  	      NOWDOC
  	    ]
  	  };
  	  const NUMBER = {
  	    scope: 'number',
  	    variants: [
  	      { begin: `\\b0[bB][01]+(?:_[01]+)*\\b` }, // Binary w/ underscore support
  	      { begin: `\\b0[oO][0-7]+(?:_[0-7]+)*\\b` }, // Octals w/ underscore support
  	      { begin: `\\b0[xX][\\da-fA-F]+(?:_[\\da-fA-F]+)*\\b` }, // Hex w/ underscore support
  	      // Decimals w/ underscore support, with optional fragments and scientific exponent (e) suffix.
  	      { begin: `(?:\\b\\d+(?:_\\d+)*(\\.(?:\\d+(?:_\\d+)*))?|\\B\\.\\d+)(?:[eE][+-]?\\d+)?` }
  	    ],
  	    relevance: 0
  	  };
  	  const LITERALS = [
  	    "false",
  	    "null",
  	    "true"
  	  ];
  	  const KWS = [
  	    // Magic constants:
  	    // <https://www.php.net/manual/en/language.constants.predefined.php>
  	    "__CLASS__",
  	    "__DIR__",
  	    "__FILE__",
  	    "__FUNCTION__",
  	    "__COMPILER_HALT_OFFSET__",
  	    "__LINE__",
  	    "__METHOD__",
  	    "__NAMESPACE__",
  	    "__TRAIT__",
  	    // Function that look like language construct or language construct that look like function:
  	    // List of keywords that may not require parenthesis
  	    "die",
  	    "echo",
  	    "exit",
  	    "include",
  	    "include_once",
  	    "print",
  	    "require",
  	    "require_once",
  	    // These are not language construct (function) but operate on the currently-executing function and can access the current symbol table
  	    // 'compact extract func_get_arg func_get_args func_num_args get_called_class get_parent_class ' +
  	    // Other keywords:
  	    // <https://www.php.net/manual/en/reserved.php>
  	    // <https://www.php.net/manual/en/language.types.type-juggling.php>
  	    "array",
  	    "abstract",
  	    "and",
  	    "as",
  	    "binary",
  	    "bool",
  	    "boolean",
  	    "break",
  	    "callable",
  	    "case",
  	    "catch",
  	    "class",
  	    "clone",
  	    "const",
  	    "continue",
  	    "declare",
  	    "default",
  	    "do",
  	    "double",
  	    "else",
  	    "elseif",
  	    "empty",
  	    "enddeclare",
  	    "endfor",
  	    "endforeach",
  	    "endif",
  	    "endswitch",
  	    "endwhile",
  	    "enum",
  	    "eval",
  	    "extends",
  	    "final",
  	    "finally",
  	    "float",
  	    "for",
  	    "foreach",
  	    "from",
  	    "global",
  	    "goto",
  	    "if",
  	    "implements",
  	    "instanceof",
  	    "insteadof",
  	    "int",
  	    "integer",
  	    "interface",
  	    "isset",
  	    "iterable",
  	    "list",
  	    "match|0",
  	    "mixed",
  	    "new",
  	    "never",
  	    "object",
  	    "or",
  	    "private",
  	    "protected",
  	    "public",
  	    "readonly",
  	    "real",
  	    "return",
  	    "string",
  	    "switch",
  	    "throw",
  	    "trait",
  	    "try",
  	    "unset",
  	    "use",
  	    "var",
  	    "void",
  	    "while",
  	    "xor",
  	    "yield"
  	  ];

  	  const BUILT_INS = [
  	    // Standard PHP library:
  	    // <https://www.php.net/manual/en/book.spl.php>
  	    "Error|0",
  	    "AppendIterator",
  	    "ArgumentCountError",
  	    "ArithmeticError",
  	    "ArrayIterator",
  	    "ArrayObject",
  	    "AssertionError",
  	    "BadFunctionCallException",
  	    "BadMethodCallException",
  	    "CachingIterator",
  	    "CallbackFilterIterator",
  	    "CompileError",
  	    "Countable",
  	    "DirectoryIterator",
  	    "DivisionByZeroError",
  	    "DomainException",
  	    "EmptyIterator",
  	    "ErrorException",
  	    "Exception",
  	    "FilesystemIterator",
  	    "FilterIterator",
  	    "GlobIterator",
  	    "InfiniteIterator",
  	    "InvalidArgumentException",
  	    "IteratorIterator",
  	    "LengthException",
  	    "LimitIterator",
  	    "LogicException",
  	    "MultipleIterator",
  	    "NoRewindIterator",
  	    "OutOfBoundsException",
  	    "OutOfRangeException",
  	    "OuterIterator",
  	    "OverflowException",
  	    "ParentIterator",
  	    "ParseError",
  	    "RangeException",
  	    "RecursiveArrayIterator",
  	    "RecursiveCachingIterator",
  	    "RecursiveCallbackFilterIterator",
  	    "RecursiveDirectoryIterator",
  	    "RecursiveFilterIterator",
  	    "RecursiveIterator",
  	    "RecursiveIteratorIterator",
  	    "RecursiveRegexIterator",
  	    "RecursiveTreeIterator",
  	    "RegexIterator",
  	    "RuntimeException",
  	    "SeekableIterator",
  	    "SplDoublyLinkedList",
  	    "SplFileInfo",
  	    "SplFileObject",
  	    "SplFixedArray",
  	    "SplHeap",
  	    "SplMaxHeap",
  	    "SplMinHeap",
  	    "SplObjectStorage",
  	    "SplObserver",
  	    "SplPriorityQueue",
  	    "SplQueue",
  	    "SplStack",
  	    "SplSubject",
  	    "SplTempFileObject",
  	    "TypeError",
  	    "UnderflowException",
  	    "UnexpectedValueException",
  	    "UnhandledMatchError",
  	    // Reserved interfaces:
  	    // <https://www.php.net/manual/en/reserved.interfaces.php>
  	    "ArrayAccess",
  	    "BackedEnum",
  	    "Closure",
  	    "Fiber",
  	    "Generator",
  	    "Iterator",
  	    "IteratorAggregate",
  	    "Serializable",
  	    "Stringable",
  	    "Throwable",
  	    "Traversable",
  	    "UnitEnum",
  	    "WeakReference",
  	    "WeakMap",
  	    // Reserved classes:
  	    // <https://www.php.net/manual/en/reserved.classes.php>
  	    "Directory",
  	    "__PHP_Incomplete_Class",
  	    "parent",
  	    "php_user_filter",
  	    "self",
  	    "static",
  	    "stdClass"
  	  ];

  	  /** Dual-case keywords
  	   *
  	   * ["then","FILE"] =>
  	   *     ["then", "THEN", "FILE", "file"]
  	   *
  	   * @param {string[]} items */
  	  const dualCase = (items) => {
  	    /** @type string[] */
  	    const result = [];
  	    items.forEach(item => {
  	      result.push(item);
  	      if (item.toLowerCase() === item) {
  	        result.push(item.toUpperCase());
  	      } else {
  	        result.push(item.toLowerCase());
  	      }
  	    });
  	    return result;
  	  };

  	  const KEYWORDS = {
  	    keyword: KWS,
  	    literal: dualCase(LITERALS),
  	    built_in: BUILT_INS,
  	  };

  	  /**
  	   * @param {string[]} items */
  	  const normalizeKeywords = (items) => {
  	    return items.map(item => {
  	      return item.replace(/\|\d+$/, "");
  	    });
  	  };

  	  const CONSTRUCTOR_CALL = { variants: [
  	    {
  	      match: [
  	        /new/,
  	        regex.concat(WHITESPACE, "+"),
  	        // to prevent built ins from being confused as the class constructor call
  	        regex.concat("(?!", normalizeKeywords(BUILT_INS).join("\\b|"), "\\b)"),
  	        PASCAL_CASE_CLASS_NAME_RE,
  	      ],
  	      scope: {
  	        1: "keyword",
  	        4: "title.class",
  	      },
  	    }
  	  ] };

  	  const CONSTANT_REFERENCE = regex.concat(IDENT_RE, "\\b(?!\\()");

  	  const LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON = { variants: [
  	    {
  	      match: [
  	        regex.concat(
  	          /::/,
  	          regex.lookahead(/(?!class\b)/)
  	        ),
  	        CONSTANT_REFERENCE,
  	      ],
  	      scope: { 2: "variable.constant", },
  	    },
  	    {
  	      match: [
  	        /::/,
  	        /class/,
  	      ],
  	      scope: { 2: "variable.language", },
  	    },
  	    {
  	      match: [
  	        PASCAL_CASE_CLASS_NAME_RE,
  	        regex.concat(
  	          /::/,
  	          regex.lookahead(/(?!class\b)/)
  	        ),
  	        CONSTANT_REFERENCE,
  	      ],
  	      scope: {
  	        1: "title.class",
  	        3: "variable.constant",
  	      },
  	    },
  	    {
  	      match: [
  	        PASCAL_CASE_CLASS_NAME_RE,
  	        regex.concat(
  	          "::",
  	          regex.lookahead(/(?!class\b)/)
  	        ),
  	      ],
  	      scope: { 1: "title.class", },
  	    },
  	    {
  	      match: [
  	        PASCAL_CASE_CLASS_NAME_RE,
  	        /::/,
  	        /class/,
  	      ],
  	      scope: {
  	        1: "title.class",
  	        3: "variable.language",
  	      },
  	    }
  	  ] };

  	  const NAMED_ARGUMENT = {
  	    scope: 'attr',
  	    match: regex.concat(IDENT_RE, regex.lookahead(':'), regex.lookahead(/(?!::)/)),
  	  };
  	  const PARAMS_MODE = {
  	    relevance: 0,
  	    begin: /\(/,
  	    end: /\)/,
  	    keywords: KEYWORDS,
  	    contains: [
  	      NAMED_ARGUMENT,
  	      VARIABLE,
  	      LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON,
  	      hljs.C_BLOCK_COMMENT_MODE,
  	      STRING,
  	      NUMBER,
  	      CONSTRUCTOR_CALL,
  	    ],
  	  };
  	  const FUNCTION_INVOKE = {
  	    relevance: 0,
  	    match: [
  	      /\b/,
  	      // to prevent keywords from being confused as the function title
  	      regex.concat("(?!fn\\b|function\\b|", normalizeKeywords(KWS).join("\\b|"), "|", normalizeKeywords(BUILT_INS).join("\\b|"), "\\b)"),
  	      IDENT_RE,
  	      regex.concat(WHITESPACE, "*"),
  	      regex.lookahead(/(?=\()/)
  	    ],
  	    scope: { 3: "title.function.invoke", },
  	    contains: [ PARAMS_MODE ]
  	  };
  	  PARAMS_MODE.contains.push(FUNCTION_INVOKE);

  	  const ATTRIBUTE_CONTAINS = [
  	    NAMED_ARGUMENT,
  	    LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON,
  	    hljs.C_BLOCK_COMMENT_MODE,
  	    STRING,
  	    NUMBER,
  	    CONSTRUCTOR_CALL,
  	  ];

  	  const ATTRIBUTES = {
  	    begin: regex.concat(/#\[\s*/, PASCAL_CASE_CLASS_NAME_RE),
  	    beginScope: "meta",
  	    end: /]/,
  	    endScope: "meta",
  	    keywords: {
  	      literal: LITERALS,
  	      keyword: [
  	        'new',
  	        'array',
  	      ]
  	    },
  	    contains: [
  	      {
  	        begin: /\[/,
  	        end: /]/,
  	        keywords: {
  	          literal: LITERALS,
  	          keyword: [
  	            'new',
  	            'array',
  	          ]
  	        },
  	        contains: [
  	          'self',
  	          ...ATTRIBUTE_CONTAINS,
  	        ]
  	      },
  	      ...ATTRIBUTE_CONTAINS,
  	      {
  	        scope: 'meta',
  	        match: PASCAL_CASE_CLASS_NAME_RE
  	      }
  	    ]
  	  };

  	  return {
  	    case_insensitive: false,
  	    keywords: KEYWORDS,
  	    contains: [
  	      ATTRIBUTES,
  	      hljs.HASH_COMMENT_MODE,
  	      hljs.COMMENT('//', '$'),
  	      hljs.COMMENT(
  	        '/\\*',
  	        '\\*/',
  	        { contains: [
  	          {
  	            scope: 'doctag',
  	            match: '@[A-Za-z]+'
  	          }
  	        ] }
  	      ),
  	      {
  	        match: /__halt_compiler\(\);/,
  	        keywords: '__halt_compiler',
  	        starts: {
  	          scope: "comment",
  	          end: hljs.MATCH_NOTHING_RE,
  	          contains: [
  	            {
  	              match: /\?>/,
  	              scope: "meta",
  	              endsParent: true
  	            }
  	          ]
  	        }
  	      },
  	      PREPROCESSOR,
  	      {
  	        scope: 'variable.language',
  	        match: /\$this\b/
  	      },
  	      VARIABLE,
  	      FUNCTION_INVOKE,
  	      LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON,
  	      {
  	        match: [
  	          /const/,
  	          /\s/,
  	          IDENT_RE,
  	        ],
  	        scope: {
  	          1: "keyword",
  	          3: "variable.constant",
  	        },
  	      },
  	      CONSTRUCTOR_CALL,
  	      {
  	        scope: 'function',
  	        relevance: 0,
  	        beginKeywords: 'fn function',
  	        end: /[;{]/,
  	        excludeEnd: true,
  	        illegal: '[$%\\[]',
  	        contains: [
  	          { beginKeywords: 'use', },
  	          hljs.UNDERSCORE_TITLE_MODE,
  	          {
  	            begin: '=>', // No markup, just a relevance booster
  	            endsParent: true
  	          },
  	          {
  	            scope: 'params',
  	            begin: '\\(',
  	            end: '\\)',
  	            excludeBegin: true,
  	            excludeEnd: true,
  	            keywords: KEYWORDS,
  	            contains: [
  	              'self',
  	              VARIABLE,
  	              LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON,
  	              hljs.C_BLOCK_COMMENT_MODE,
  	              STRING,
  	              NUMBER
  	            ]
  	          },
  	        ]
  	      },
  	      {
  	        scope: 'class',
  	        variants: [
  	          {
  	            beginKeywords: "enum",
  	            illegal: /[($"]/
  	          },
  	          {
  	            beginKeywords: "class interface trait",
  	            illegal: /[:($"]/
  	          }
  	        ],
  	        relevance: 0,
  	        end: /\{/,
  	        excludeEnd: true,
  	        contains: [
  	          { beginKeywords: 'extends implements' },
  	          hljs.UNDERSCORE_TITLE_MODE
  	        ]
  	      },
  	      // both use and namespace still use "old style" rules (vs multi-match)
  	      // because the namespace name can include `\` and we still want each
  	      // element to be treated as its own *individual* title
  	      {
  	        beginKeywords: 'namespace',
  	        relevance: 0,
  	        end: ';',
  	        illegal: /[.']/,
  	        contains: [ hljs.inherit(hljs.UNDERSCORE_TITLE_MODE, { scope: "title.class" }) ]
  	      },
  	      {
  	        beginKeywords: 'use',
  	        relevance: 0,
  	        end: ';',
  	        contains: [
  	          // TODO: title.function vs title.class
  	          {
  	            match: /\b(as|const|function)\b/,
  	            scope: "keyword"
  	          },
  	          // TODO: could be title.class or title.function
  	          hljs.UNDERSCORE_TITLE_MODE
  	        ]
  	      },
  	      STRING,
  	      NUMBER,
  	    ]
  	  };
  	}

  	php_1 = php;
  	return php_1;
  }

  /*
  Language: PHP Template
  Requires: xml.js, php.js
  Author: Josh Goebel <hello@joshgoebel.com>
  Website: https://www.php.net
  Category: common
  */

  var phpTemplate_1;
  var hasRequiredPhpTemplate;

  function requirePhpTemplate () {
  	if (hasRequiredPhpTemplate) return phpTemplate_1;
  	hasRequiredPhpTemplate = 1;
  	function phpTemplate(hljs) {
  	  return {
  	    name: "PHP template",
  	    subLanguage: 'xml',
  	    contains: [
  	      {
  	        begin: /<\?(php|=)?/,
  	        end: /\?>/,
  	        subLanguage: 'php',
  	        contains: [
  	          // We don't want the php closing tag ?> to close the PHP block when
  	          // inside any of the following blocks:
  	          {
  	            begin: '/\\*',
  	            end: '\\*/',
  	            skip: true
  	          },
  	          {
  	            begin: 'b"',
  	            end: '"',
  	            skip: true
  	          },
  	          {
  	            begin: 'b\'',
  	            end: '\'',
  	            skip: true
  	          },
  	          hljs.inherit(hljs.APOS_STRING_MODE, {
  	            illegal: null,
  	            className: null,
  	            contains: null,
  	            skip: true
  	          }),
  	          hljs.inherit(hljs.QUOTE_STRING_MODE, {
  	            illegal: null,
  	            className: null,
  	            contains: null,
  	            skip: true
  	          })
  	        ]
  	      }
  	    ]
  	  };
  	}

  	phpTemplate_1 = phpTemplate;
  	return phpTemplate_1;
  }

  /*
  Language: Plain text
  Author: Egor Rogov (e.rogov@postgrespro.ru)
  Description: Plain text without any highlighting.
  Category: common
  */

  var plaintext_1;
  var hasRequiredPlaintext;

  function requirePlaintext () {
  	if (hasRequiredPlaintext) return plaintext_1;
  	hasRequiredPlaintext = 1;
  	function plaintext(hljs) {
  	  return {
  	    name: 'Plain text',
  	    aliases: [
  	      'text',
  	      'txt'
  	    ],
  	    disableAutodetect: true
  	  };
  	}

  	plaintext_1 = plaintext;
  	return plaintext_1;
  }

  /*
  Language: Pony
  Author: Joe Eli McIlvain <joe.eli.mac@gmail.com>
  Description: Pony is an open-source, object-oriented, actor-model,
               capabilities-secure, high performance programming language.
  Website: https://www.ponylang.io
  */

  var pony_1;
  var hasRequiredPony;

  function requirePony () {
  	if (hasRequiredPony) return pony_1;
  	hasRequiredPony = 1;
  	function pony(hljs) {
  	  const KEYWORDS = {
  	    keyword:
  	      'actor addressof and as be break class compile_error compile_intrinsic '
  	      + 'consume continue delegate digestof do else elseif embed end error '
  	      + 'for fun if ifdef in interface is isnt lambda let match new not object '
  	      + 'or primitive recover repeat return struct then trait try type until '
  	      + 'use var where while with xor',
  	    meta:
  	      'iso val tag trn box ref',
  	    literal:
  	      'this false true'
  	  };

  	  const TRIPLE_QUOTE_STRING_MODE = {
  	    className: 'string',
  	    begin: '"""',
  	    end: '"""',
  	    relevance: 10
  	  };

  	  const QUOTE_STRING_MODE = {
  	    className: 'string',
  	    begin: '"',
  	    end: '"',
  	    contains: [ hljs.BACKSLASH_ESCAPE ]
  	  };

  	  const SINGLE_QUOTE_CHAR_MODE = {
  	    className: 'string',
  	    begin: '\'',
  	    end: '\'',
  	    contains: [ hljs.BACKSLASH_ESCAPE ],
  	    relevance: 0
  	  };

  	  const TYPE_NAME = {
  	    className: 'type',
  	    begin: '\\b_?[A-Z][\\w]*',
  	    relevance: 0
  	  };

  	  const PRIMED_NAME = {
  	    begin: hljs.IDENT_RE + '\'',
  	    relevance: 0
  	  };

  	  const NUMBER_MODE = {
  	    className: 'number',
  	    begin: '(-?)(\\b0[xX][a-fA-F0-9]+|\\b0[bB][01]+|(\\b\\d+(_\\d+)?(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)',
  	    relevance: 0
  	  };

  	  /**
  	   * The `FUNCTION` and `CLASS` modes were intentionally removed to simplify
  	   * highlighting and fix cases like
  	   * ```
  	   * interface Iterator[A: A]
  	   *   fun has_next(): Bool
  	   *   fun next(): A?
  	   * ```
  	   * where it is valid to have a function head without a body
  	   */

  	  return {
  	    name: 'Pony',
  	    keywords: KEYWORDS,
  	    contains: [
  	      TYPE_NAME,
  	      TRIPLE_QUOTE_STRING_MODE,
  	      QUOTE_STRING_MODE,
  	      SINGLE_QUOTE_CHAR_MODE,
  	      PRIMED_NAME,
  	      NUMBER_MODE,
  	      hljs.C_LINE_COMMENT_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE
  	    ]
  	  };
  	}

  	pony_1 = pony;
  	return pony_1;
  }

  /*
  Language: PowerShell
  Description: PowerShell is a task-based command-line shell and scripting language built on .NET.
  Author: David Mohundro <david@mohundro.com>
  Contributors: Nicholas Blumhardt <nblumhardt@nblumhardt.com>, Victor Zhou <OiCMudkips@users.noreply.github.com>, Nicolas Le Gall <contact@nlegall.fr>
  Website: https://docs.microsoft.com/en-us/powershell/
  */

  var powershell_1;
  var hasRequiredPowershell;

  function requirePowershell () {
  	if (hasRequiredPowershell) return powershell_1;
  	hasRequiredPowershell = 1;
  	function powershell(hljs) {
  	  const TYPES = [
  	    "string",
  	    "char",
  	    "byte",
  	    "int",
  	    "long",
  	    "bool",
  	    "decimal",
  	    "single",
  	    "double",
  	    "DateTime",
  	    "xml",
  	    "array",
  	    "hashtable",
  	    "void"
  	  ];

  	  // https://docs.microsoft.com/en-us/powershell/scripting/developer/cmdlet/approved-verbs-for-windows-powershell-commands
  	  const VALID_VERBS =
  	    'Add|Clear|Close|Copy|Enter|Exit|Find|Format|Get|Hide|Join|Lock|'
  	    + 'Move|New|Open|Optimize|Pop|Push|Redo|Remove|Rename|Reset|Resize|'
  	    + 'Search|Select|Set|Show|Skip|Split|Step|Switch|Undo|Unlock|'
  	    + 'Watch|Backup|Checkpoint|Compare|Compress|Convert|ConvertFrom|'
  	    + 'ConvertTo|Dismount|Edit|Expand|Export|Group|Import|Initialize|'
  	    + 'Limit|Merge|Mount|Out|Publish|Restore|Save|Sync|Unpublish|Update|'
  	    + 'Approve|Assert|Build|Complete|Confirm|Deny|Deploy|Disable|Enable|Install|Invoke|'
  	    + 'Register|Request|Restart|Resume|Start|Stop|Submit|Suspend|Uninstall|'
  	    + 'Unregister|Wait|Debug|Measure|Ping|Repair|Resolve|Test|Trace|Connect|'
  	    + 'Disconnect|Read|Receive|Send|Write|Block|Grant|Protect|Revoke|Unblock|'
  	    + 'Unprotect|Use|ForEach|Sort|Tee|Where';

  	  const COMPARISON_OPERATORS =
  	    '-and|-as|-band|-bnot|-bor|-bxor|-casesensitive|-ccontains|-ceq|-cge|-cgt|'
  	    + '-cle|-clike|-clt|-cmatch|-cne|-cnotcontains|-cnotlike|-cnotmatch|-contains|'
  	    + '-creplace|-csplit|-eq|-exact|-f|-file|-ge|-gt|-icontains|-ieq|-ige|-igt|'
  	    + '-ile|-ilike|-ilt|-imatch|-in|-ine|-inotcontains|-inotlike|-inotmatch|'
  	    + '-ireplace|-is|-isnot|-isplit|-join|-le|-like|-lt|-match|-ne|-not|'
  	    + '-notcontains|-notin|-notlike|-notmatch|-or|-regex|-replace|-shl|-shr|'
  	    + '-split|-wildcard|-xor';

  	  const KEYWORDS = {
  	    $pattern: /-?[A-z\.\-]+\b/,
  	    keyword:
  	      'if else foreach return do while until elseif begin for trap data dynamicparam '
  	      + 'end break throw param continue finally in switch exit filter try process catch '
  	      + 'hidden static parameter',
  	    // "echo" relevance has been set to 0 to avoid auto-detect conflicts with shell transcripts
  	    built_in:
  	      'ac asnp cat cd CFS chdir clc clear clhy cli clp cls clv cnsn compare copy cp '
  	      + 'cpi cpp curl cvpa dbp del diff dir dnsn ebp echo|0 epal epcsv epsn erase etsn exsn fc fhx '
  	      + 'fl ft fw gal gbp gc gcb gci gcm gcs gdr gerr ghy gi gin gjb gl gm gmo gp gps gpv group '
  	      + 'gsn gsnp gsv gtz gu gv gwmi h history icm iex ihy ii ipal ipcsv ipmo ipsn irm ise iwmi '
  	      + 'iwr kill lp ls man md measure mi mount move mp mv nal ndr ni nmo npssc nsn nv ogv oh '
  	      + 'popd ps pushd pwd r rbp rcjb rcsn rd rdr ren ri rjb rm rmdir rmo rni rnp rp rsn rsnp '
  	      + 'rujb rv rvpa rwmi sajb sal saps sasv sbp sc scb select set shcm si sl sleep sls sort sp '
  	      + 'spjb spps spsv start stz sujb sv swmi tee trcm type wget where wjb write'
  	    // TODO: 'validate[A-Z]+' can't work in keywords
  	  };

  	  const TITLE_NAME_RE = /\w[\w\d]*((-)[\w\d]+)*/;

  	  const BACKTICK_ESCAPE = {
  	    begin: '`[\\s\\S]',
  	    relevance: 0
  	  };

  	  const VAR = {
  	    className: 'variable',
  	    variants: [
  	      { begin: /\$\B/ },
  	      {
  	        className: 'keyword',
  	        begin: /\$this/
  	      },
  	      { begin: /\$[\w\d][\w\d_:]*/ }
  	    ]
  	  };

  	  const LITERAL = {
  	    className: 'literal',
  	    begin: /\$(null|true|false)\b/
  	  };

  	  const QUOTE_STRING = {
  	    className: "string",
  	    variants: [
  	      {
  	        begin: /"/,
  	        end: /"/
  	      },
  	      {
  	        begin: /@"/,
  	        end: /^"@/
  	      }
  	    ],
  	    contains: [
  	      BACKTICK_ESCAPE,
  	      VAR,
  	      {
  	        className: 'variable',
  	        begin: /\$[A-z]/,
  	        end: /[^A-z]/
  	      }
  	    ]
  	  };

  	  const APOS_STRING = {
  	    className: 'string',
  	    variants: [
  	      {
  	        begin: /'/,
  	        end: /'/
  	      },
  	      {
  	        begin: /@'/,
  	        end: /^'@/
  	      }
  	    ]
  	  };

  	  const PS_HELPTAGS = {
  	    className: "doctag",
  	    variants: [
  	      /* no paramater help tags */
  	      { begin: /\.(synopsis|description|example|inputs|outputs|notes|link|component|role|functionality)/ },
  	      /* one parameter help tags */
  	      { begin: /\.(parameter|forwardhelptargetname|forwardhelpcategory|remotehelprunspace|externalhelp)\s+\S+/ }
  	    ]
  	  };

  	  const PS_COMMENT = hljs.inherit(
  	    hljs.COMMENT(null, null),
  	    {
  	      variants: [
  	        /* single-line comment */
  	        {
  	          begin: /#/,
  	          end: /$/
  	        },
  	        /* multi-line comment */
  	        {
  	          begin: /<#/,
  	          end: /#>/
  	        }
  	      ],
  	      contains: [ PS_HELPTAGS ]
  	    }
  	  );

  	  const CMDLETS = {
  	    className: 'built_in',
  	    variants: [ { begin: '('.concat(VALID_VERBS, ')+(-)[\\w\\d]+') } ]
  	  };

  	  const PS_CLASS = {
  	    className: 'class',
  	    beginKeywords: 'class enum',
  	    end: /\s*[{]/,
  	    excludeEnd: true,
  	    relevance: 0,
  	    contains: [ hljs.TITLE_MODE ]
  	  };

  	  const PS_FUNCTION = {
  	    className: 'function',
  	    begin: /function\s+/,
  	    end: /\s*\{|$/,
  	    excludeEnd: true,
  	    returnBegin: true,
  	    relevance: 0,
  	    contains: [
  	      {
  	        begin: "function",
  	        relevance: 0,
  	        className: "keyword"
  	      },
  	      {
  	        className: "title",
  	        begin: TITLE_NAME_RE,
  	        relevance: 0
  	      },
  	      {
  	        begin: /\(/,
  	        end: /\)/,
  	        className: "params",
  	        relevance: 0,
  	        contains: [ VAR ]
  	      }
  	      // CMDLETS
  	    ]
  	  };

  	  // Using statment, plus type, plus assembly name.
  	  const PS_USING = {
  	    begin: /using\s/,
  	    end: /$/,
  	    returnBegin: true,
  	    contains: [
  	      QUOTE_STRING,
  	      APOS_STRING,
  	      {
  	        className: 'keyword',
  	        begin: /(using|assembly|command|module|namespace|type)/
  	      }
  	    ]
  	  };

  	  // Comperison operators & function named parameters.
  	  const PS_ARGUMENTS = { variants: [
  	    // PS literals are pretty verbose so it's a good idea to accent them a bit.
  	    {
  	      className: 'operator',
  	      begin: '('.concat(COMPARISON_OPERATORS, ')\\b')
  	    },
  	    {
  	      className: 'literal',
  	      begin: /(-){1,2}[\w\d-]+/,
  	      relevance: 0
  	    }
  	  ] };

  	  const HASH_SIGNS = {
  	    className: 'selector-tag',
  	    begin: /@\B/,
  	    relevance: 0
  	  };

  	  // It's a very general rule so I'll narrow it a bit with some strict boundaries
  	  // to avoid any possible false-positive collisions!
  	  const PS_METHODS = {
  	    className: 'function',
  	    begin: /\[.*\]\s*[\w]+[ ]??\(/,
  	    end: /$/,
  	    returnBegin: true,
  	    relevance: 0,
  	    contains: [
  	      {
  	        className: 'keyword',
  	        begin: '('.concat(
  	          KEYWORDS.keyword.toString().replace(/\s/g, '|'
  	          ), ')\\b'),
  	        endsParent: true,
  	        relevance: 0
  	      },
  	      hljs.inherit(hljs.TITLE_MODE, { endsParent: true })
  	    ]
  	  };

  	  const GENTLEMANS_SET = [
  	    // STATIC_MEMBER,
  	    PS_METHODS,
  	    PS_COMMENT,
  	    BACKTICK_ESCAPE,
  	    hljs.NUMBER_MODE,
  	    QUOTE_STRING,
  	    APOS_STRING,
  	    // PS_NEW_OBJECT_TYPE,
  	    CMDLETS,
  	    VAR,
  	    LITERAL,
  	    HASH_SIGNS
  	  ];

  	  const PS_TYPE = {
  	    begin: /\[/,
  	    end: /\]/,
  	    excludeBegin: true,
  	    excludeEnd: true,
  	    relevance: 0,
  	    contains: [].concat(
  	      'self',
  	      GENTLEMANS_SET,
  	      {
  	        begin: "(" + TYPES.join("|") + ")",
  	        className: "built_in",
  	        relevance: 0
  	      },
  	      {
  	        className: 'type',
  	        begin: /[\.\w\d]+/,
  	        relevance: 0
  	      }
  	    )
  	  };

  	  PS_METHODS.contains.unshift(PS_TYPE);

  	  return {
  	    name: 'PowerShell',
  	    aliases: [
  	      "pwsh",
  	      "ps",
  	      "ps1"
  	    ],
  	    case_insensitive: true,
  	    keywords: KEYWORDS,
  	    contains: GENTLEMANS_SET.concat(
  	      PS_CLASS,
  	      PS_FUNCTION,
  	      PS_USING,
  	      PS_ARGUMENTS,
  	      PS_TYPE
  	    )
  	  };
  	}

  	powershell_1 = powershell;
  	return powershell_1;
  }

  /*
  Language: Processing
  Description: Processing is a flexible software sketchbook and a language for learning how to code within the context of the visual arts.
  Author: Erik Paluka <erik.paluka@gmail.com>
  Website: https://processing.org
  Category: graphics
  */

  var processing_1;
  var hasRequiredProcessing;

  function requireProcessing () {
  	if (hasRequiredProcessing) return processing_1;
  	hasRequiredProcessing = 1;
  	function processing(hljs) {
  	  const regex = hljs.regex;
  	  const BUILT_INS = [
  	    "displayHeight",
  	    "displayWidth",
  	    "mouseY",
  	    "mouseX",
  	    "mousePressed",
  	    "pmouseX",
  	    "pmouseY",
  	    "key",
  	    "keyCode",
  	    "pixels",
  	    "focused",
  	    "frameCount",
  	    "frameRate",
  	    "height",
  	    "width",
  	    "size",
  	    "createGraphics",
  	    "beginDraw",
  	    "createShape",
  	    "loadShape",
  	    "PShape",
  	    "arc",
  	    "ellipse",
  	    "line",
  	    "point",
  	    "quad",
  	    "rect",
  	    "triangle",
  	    "bezier",
  	    "bezierDetail",
  	    "bezierPoint",
  	    "bezierTangent",
  	    "curve",
  	    "curveDetail",
  	    "curvePoint",
  	    "curveTangent",
  	    "curveTightness",
  	    "shape",
  	    "shapeMode",
  	    "beginContour",
  	    "beginShape",
  	    "bezierVertex",
  	    "curveVertex",
  	    "endContour",
  	    "endShape",
  	    "quadraticVertex",
  	    "vertex",
  	    "ellipseMode",
  	    "noSmooth",
  	    "rectMode",
  	    "smooth",
  	    "strokeCap",
  	    "strokeJoin",
  	    "strokeWeight",
  	    "mouseClicked",
  	    "mouseDragged",
  	    "mouseMoved",
  	    "mousePressed",
  	    "mouseReleased",
  	    "mouseWheel",
  	    "keyPressed",
  	    "keyPressedkeyReleased",
  	    "keyTyped",
  	    "print",
  	    "println",
  	    "save",
  	    "saveFrame",
  	    "day",
  	    "hour",
  	    "millis",
  	    "minute",
  	    "month",
  	    "second",
  	    "year",
  	    "background",
  	    "clear",
  	    "colorMode",
  	    "fill",
  	    "noFill",
  	    "noStroke",
  	    "stroke",
  	    "alpha",
  	    "blue",
  	    "brightness",
  	    "color",
  	    "green",
  	    "hue",
  	    "lerpColor",
  	    "red",
  	    "saturation",
  	    "modelX",
  	    "modelY",
  	    "modelZ",
  	    "screenX",
  	    "screenY",
  	    "screenZ",
  	    "ambient",
  	    "emissive",
  	    "shininess",
  	    "specular",
  	    "add",
  	    "createImage",
  	    "beginCamera",
  	    "camera",
  	    "endCamera",
  	    "frustum",
  	    "ortho",
  	    "perspective",
  	    "printCamera",
  	    "printProjection",
  	    "cursor",
  	    "frameRate",
  	    "noCursor",
  	    "exit",
  	    "loop",
  	    "noLoop",
  	    "popStyle",
  	    "pushStyle",
  	    "redraw",
  	    "binary",
  	    "boolean",
  	    "byte",
  	    "char",
  	    "float",
  	    "hex",
  	    "int",
  	    "str",
  	    "unbinary",
  	    "unhex",
  	    "join",
  	    "match",
  	    "matchAll",
  	    "nf",
  	    "nfc",
  	    "nfp",
  	    "nfs",
  	    "split",
  	    "splitTokens",
  	    "trim",
  	    "append",
  	    "arrayCopy",
  	    "concat",
  	    "expand",
  	    "reverse",
  	    "shorten",
  	    "sort",
  	    "splice",
  	    "subset",
  	    "box",
  	    "sphere",
  	    "sphereDetail",
  	    "createInput",
  	    "createReader",
  	    "loadBytes",
  	    "loadJSONArray",
  	    "loadJSONObject",
  	    "loadStrings",
  	    "loadTable",
  	    "loadXML",
  	    "open",
  	    "parseXML",
  	    "saveTable",
  	    "selectFolder",
  	    "selectInput",
  	    "beginRaw",
  	    "beginRecord",
  	    "createOutput",
  	    "createWriter",
  	    "endRaw",
  	    "endRecord",
  	    "PrintWritersaveBytes",
  	    "saveJSONArray",
  	    "saveJSONObject",
  	    "saveStream",
  	    "saveStrings",
  	    "saveXML",
  	    "selectOutput",
  	    "popMatrix",
  	    "printMatrix",
  	    "pushMatrix",
  	    "resetMatrix",
  	    "rotate",
  	    "rotateX",
  	    "rotateY",
  	    "rotateZ",
  	    "scale",
  	    "shearX",
  	    "shearY",
  	    "translate",
  	    "ambientLight",
  	    "directionalLight",
  	    "lightFalloff",
  	    "lights",
  	    "lightSpecular",
  	    "noLights",
  	    "normal",
  	    "pointLight",
  	    "spotLight",
  	    "image",
  	    "imageMode",
  	    "loadImage",
  	    "noTint",
  	    "requestImage",
  	    "tint",
  	    "texture",
  	    "textureMode",
  	    "textureWrap",
  	    "blend",
  	    "copy",
  	    "filter",
  	    "get",
  	    "loadPixels",
  	    "set",
  	    "updatePixels",
  	    "blendMode",
  	    "loadShader",
  	    "PShaderresetShader",
  	    "shader",
  	    "createFont",
  	    "loadFont",
  	    "text",
  	    "textFont",
  	    "textAlign",
  	    "textLeading",
  	    "textMode",
  	    "textSize",
  	    "textWidth",
  	    "textAscent",
  	    "textDescent",
  	    "abs",
  	    "ceil",
  	    "constrain",
  	    "dist",
  	    "exp",
  	    "floor",
  	    "lerp",
  	    "log",
  	    "mag",
  	    "map",
  	    "max",
  	    "min",
  	    "norm",
  	    "pow",
  	    "round",
  	    "sq",
  	    "sqrt",
  	    "acos",
  	    "asin",
  	    "atan",
  	    "atan2",
  	    "cos",
  	    "degrees",
  	    "radians",
  	    "sin",
  	    "tan",
  	    "noise",
  	    "noiseDetail",
  	    "noiseSeed",
  	    "random",
  	    "randomGaussian",
  	    "randomSeed"
  	  ];
  	  const IDENT = hljs.IDENT_RE;
  	  const FUNC_NAME = { variants: [
  	    {
  	      match: regex.concat(regex.either(...BUILT_INS), regex.lookahead(/\s*\(/)),
  	      className: "built_in"
  	    },
  	    {
  	      relevance: 0,
  	      match: regex.concat(
  	        /\b(?!for|if|while)/,
  	        IDENT, regex.lookahead(/\s*\(/)),
  	      className: "title.function"
  	    }
  	  ] };
  	  const NEW_CLASS = {
  	    match: [
  	      /new\s+/,
  	      IDENT
  	    ],
  	    className: {
  	      1: "keyword",
  	      2: "class.title"
  	    }
  	  };
  	  const PROPERTY = {
  	    relevance: 0,
  	    match: [
  	      /\./,
  	      IDENT
  	    ],
  	    className: { 2: "property" }
  	  };
  	  const CLASS = {
  	    variants: [
  	      { match: [
  	        /class/,
  	        /\s+/,
  	        IDENT,
  	        /\s+/,
  	        /extends/,
  	        /\s+/,
  	        IDENT
  	      ] },
  	      { match: [
  	        /class/,
  	        /\s+/,
  	        IDENT
  	      ] }
  	    ],
  	    className: {
  	      1: "keyword",
  	      3: "title.class",
  	      5: "keyword",
  	      7: "title.class.inherited"
  	    }
  	  };

  	  const TYPES = [
  	    "boolean",
  	    "byte",
  	    "char",
  	    "color",
  	    "double",
  	    "float",
  	    "int",
  	    "long",
  	    "short",
  	  ];
  	  const CLASSES = [
  	    "BufferedReader",
  	    "PVector",
  	    "PFont",
  	    "PImage",
  	    "PGraphics",
  	    "HashMap",
  	    "String",
  	    "Array",
  	    "FloatDict",
  	    "ArrayList",
  	    "FloatList",
  	    "IntDict",
  	    "IntList",
  	    "JSONArray",
  	    "JSONObject",
  	    "Object",
  	    "StringDict",
  	    "StringList",
  	    "Table",
  	    "TableRow",
  	    "XML"
  	  ];
  	  const JAVA_KEYWORDS = [
  	    "abstract",
  	    "assert",
  	    "break",
  	    "case",
  	    "catch",
  	    "const",
  	    "continue",
  	    "default",
  	    "else",
  	    "enum",
  	    "final",
  	    "finally",
  	    "for",
  	    "if",
  	    "import",
  	    "instanceof",
  	    "long",
  	    "native",
  	    "new",
  	    "package",
  	    "private",
  	    "private",
  	    "protected",
  	    "protected",
  	    "public",
  	    "public",
  	    "return",
  	    "static",
  	    "strictfp",
  	    "switch",
  	    "synchronized",
  	    "throw",
  	    "throws",
  	    "transient",
  	    "try",
  	    "void",
  	    "volatile",
  	    "while"
  	  ];

  	  return {
  	    name: 'Processing',
  	    aliases: [ 'pde' ],
  	    keywords: {
  	      keyword: [ ...JAVA_KEYWORDS ],
  	      literal: 'P2D P3D HALF_PI PI QUARTER_PI TAU TWO_PI null true false',
  	      title: 'setup draw',
  	      variable: "super this",
  	      built_in: [
  	        ...BUILT_INS,
  	        ...CLASSES
  	      ],
  	      type: TYPES
  	    },
  	    contains: [
  	      CLASS,
  	      NEW_CLASS,
  	      FUNC_NAME,
  	      PROPERTY,
  	      hljs.C_LINE_COMMENT_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE,
  	      hljs.APOS_STRING_MODE,
  	      hljs.QUOTE_STRING_MODE,
  	      hljs.C_NUMBER_MODE
  	    ]
  	  };
  	}

  	processing_1 = processing;
  	return processing_1;
  }

  /*
  Language: Python profiler
  Description: Python profiler results
  Author: Brian Beck <exogen@gmail.com>
  */

  var profile_1;
  var hasRequiredProfile;

  function requireProfile () {
  	if (hasRequiredProfile) return profile_1;
  	hasRequiredProfile = 1;
  	function profile(hljs) {
  	  return {
  	    name: 'Python profiler',
  	    contains: [
  	      hljs.C_NUMBER_MODE,
  	      {
  	        begin: '[a-zA-Z_][\\da-zA-Z_]+\\.[\\da-zA-Z_]{1,3}',
  	        end: ':',
  	        excludeEnd: true
  	      },
  	      {
  	        begin: '(ncalls|tottime|cumtime)',
  	        end: '$',
  	        keywords: 'ncalls tottime|10 cumtime|10 filename',
  	        relevance: 10
  	      },
  	      {
  	        begin: 'function calls',
  	        end: '$',
  	        contains: [ hljs.C_NUMBER_MODE ],
  	        relevance: 10
  	      },
  	      hljs.APOS_STRING_MODE,
  	      hljs.QUOTE_STRING_MODE,
  	      {
  	        className: 'string',
  	        begin: '\\(',
  	        end: '\\)$',
  	        excludeBegin: true,
  	        excludeEnd: true,
  	        relevance: 0
  	      }
  	    ]
  	  };
  	}

  	profile_1 = profile;
  	return profile_1;
  }

  /*
  Language: Prolog
  Description: Prolog is a general purpose logic programming language associated with artificial intelligence and computational linguistics.
  Author: Raivo Laanemets <raivo@infdot.com>
  Website: https://en.wikipedia.org/wiki/Prolog
  */

  var prolog_1;
  var hasRequiredProlog;

  function requireProlog () {
  	if (hasRequiredProlog) return prolog_1;
  	hasRequiredProlog = 1;
  	function prolog(hljs) {
  	  const ATOM = {

  	    begin: /[a-z][A-Za-z0-9_]*/,
  	    relevance: 0
  	  };

  	  const VAR = {

  	    className: 'symbol',
  	    variants: [
  	      { begin: /[A-Z][a-zA-Z0-9_]*/ },
  	      { begin: /_[A-Za-z0-9_]*/ }
  	    ],
  	    relevance: 0
  	  };

  	  const PARENTED = {

  	    begin: /\(/,
  	    end: /\)/,
  	    relevance: 0
  	  };

  	  const LIST = {

  	    begin: /\[/,
  	    end: /\]/
  	  };

  	  const LINE_COMMENT = {

  	    className: 'comment',
  	    begin: /%/,
  	    end: /$/,
  	    contains: [ hljs.PHRASAL_WORDS_MODE ]
  	  };

  	  const BACKTICK_STRING = {

  	    className: 'string',
  	    begin: /`/,
  	    end: /`/,
  	    contains: [ hljs.BACKSLASH_ESCAPE ]
  	  };

  	  const CHAR_CODE = {
  	    className: 'string', // 0'a etc.
  	    begin: /0'(\\'|.)/
  	  };

  	  const SPACE_CODE = {
  	    className: 'string',
  	    begin: /0'\\s/ // 0'\s
  	  };

  	  const PRED_OP = { // relevance booster
  	    begin: /:-/ };

  	  const inner = [

  	    ATOM,
  	    VAR,
  	    PARENTED,
  	    PRED_OP,
  	    LIST,
  	    LINE_COMMENT,
  	    hljs.C_BLOCK_COMMENT_MODE,
  	    hljs.QUOTE_STRING_MODE,
  	    hljs.APOS_STRING_MODE,
  	    BACKTICK_STRING,
  	    CHAR_CODE,
  	    SPACE_CODE,
  	    hljs.C_NUMBER_MODE
  	  ];

  	  PARENTED.contains = inner;
  	  LIST.contains = inner;

  	  return {
  	    name: 'Prolog',
  	    contains: inner.concat([
  	      { // relevance booster
  	        begin: /\.$/ }
  	    ])
  	  };
  	}

  	prolog_1 = prolog;
  	return prolog_1;
  }

  /*
  Language: .properties
  Contributors: Valentin Aitken <valentin@nalisbg.com>, Egor Rogov <e.rogov@postgrespro.ru>
  Website: https://en.wikipedia.org/wiki/.properties
  Category: config
  */

  var properties_1;
  var hasRequiredProperties;

  function requireProperties () {
  	if (hasRequiredProperties) return properties_1;
  	hasRequiredProperties = 1;
  	/** @type LanguageFn */
  	function properties(hljs) {
  	  // whitespaces: space, tab, formfeed
  	  const WS0 = '[ \\t\\f]*';
  	  const WS1 = '[ \\t\\f]+';
  	  // delimiter
  	  const EQUAL_DELIM = WS0 + '[:=]' + WS0;
  	  const WS_DELIM = WS1;
  	  const DELIM = '(' + EQUAL_DELIM + '|' + WS_DELIM + ')';
  	  const KEY = '([^\\\\:= \\t\\f\\n]|\\\\.)+';

  	  const DELIM_AND_VALUE = {
  	    // skip DELIM
  	    end: DELIM,
  	    relevance: 0,
  	    starts: {
  	      // value: everything until end of line (again, taking into account backslashes)
  	      className: 'string',
  	      end: /$/,
  	      relevance: 0,
  	      contains: [
  	        { begin: '\\\\\\\\' },
  	        { begin: '\\\\\\n' }
  	      ]
  	    }
  	  };

  	  return {
  	    name: '.properties',
  	    disableAutodetect: true,
  	    case_insensitive: true,
  	    illegal: /\S/,
  	    contains: [
  	      hljs.COMMENT('^\\s*[!#]', '$'),
  	      // key: everything until whitespace or = or : (taking into account backslashes)
  	      // case of a key-value pair
  	      {
  	        returnBegin: true,
  	        variants: [
  	          { begin: KEY + EQUAL_DELIM },
  	          { begin: KEY + WS_DELIM }
  	        ],
  	        contains: [
  	          {
  	            className: 'attr',
  	            begin: KEY,
  	            endsParent: true
  	          }
  	        ],
  	        starts: DELIM_AND_VALUE
  	      },
  	      // case of an empty key
  	      {
  	        className: 'attr',
  	        begin: KEY + WS0 + '$'
  	      }
  	    ]
  	  };
  	}

  	properties_1 = properties;
  	return properties_1;
  }

  /*
  Language: Protocol Buffers
  Author: Dan Tao <daniel.tao@gmail.com>
  Description: Protocol buffer message definition format
  Website: https://developers.google.com/protocol-buffers/docs/proto3
  Category: protocols
  */

  var protobuf_1;
  var hasRequiredProtobuf;

  function requireProtobuf () {
  	if (hasRequiredProtobuf) return protobuf_1;
  	hasRequiredProtobuf = 1;
  	function protobuf(hljs) {
  	  const KEYWORDS = [
  	    "package",
  	    "import",
  	    "option",
  	    "optional",
  	    "required",
  	    "repeated",
  	    "group",
  	    "oneof"
  	  ];
  	  const TYPES = [
  	    "double",
  	    "float",
  	    "int32",
  	    "int64",
  	    "uint32",
  	    "uint64",
  	    "sint32",
  	    "sint64",
  	    "fixed32",
  	    "fixed64",
  	    "sfixed32",
  	    "sfixed64",
  	    "bool",
  	    "string",
  	    "bytes"
  	  ];
  	  const CLASS_DEFINITION = {
  	    match: [
  	      /(message|enum|service)\s+/,
  	      hljs.IDENT_RE
  	    ],
  	    scope: {
  	      1: "keyword",
  	      2: "title.class"
  	    }
  	  };

  	  return {
  	    name: 'Protocol Buffers',
  	    aliases: ['proto'],
  	    keywords: {
  	      keyword: KEYWORDS,
  	      type: TYPES,
  	      literal: [
  	        'true',
  	        'false'
  	      ]
  	    },
  	    contains: [
  	      hljs.QUOTE_STRING_MODE,
  	      hljs.NUMBER_MODE,
  	      hljs.C_LINE_COMMENT_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE,
  	      CLASS_DEFINITION,
  	      {
  	        className: 'function',
  	        beginKeywords: 'rpc',
  	        end: /[{;]/,
  	        excludeEnd: true,
  	        keywords: 'rpc returns'
  	      },
  	      { // match enum items (relevance)
  	        // BLAH = ...;
  	        begin: /^\s*[A-Z_]+(?=\s*=[^\n]+;$)/ }
  	    ]
  	  };
  	}

  	protobuf_1 = protobuf;
  	return protobuf_1;
  }

  /*
  Language: Puppet
  Author: Jose Molina Colmenero <gaudy41@gmail.com>
  Website: https://puppet.com/docs
  Category: config
  */

  var puppet_1;
  var hasRequiredPuppet;

  function requirePuppet () {
  	if (hasRequiredPuppet) return puppet_1;
  	hasRequiredPuppet = 1;
  	function puppet(hljs) {
  	  const PUPPET_KEYWORDS = {
  	    keyword:
  	    /* language keywords */
  	      'and case default else elsif false if in import enherits node or true undef unless main settings $string ',
  	    literal:
  	    /* metaparameters */
  	      'alias audit before loglevel noop require subscribe tag '
  	      /* normal attributes */
  	      + 'owner ensure group mode name|0 changes context force incl lens load_path onlyif provider returns root show_diff type_check '
  	      + 'en_address ip_address realname command environment hour monute month monthday special target weekday '
  	      + 'creates cwd ogoutput refresh refreshonly tries try_sleep umask backup checksum content ctime force ignore '
  	      + 'links mtime purge recurse recurselimit replace selinux_ignore_defaults selrange selrole seltype seluser source '
  	      + 'souirce_permissions sourceselect validate_cmd validate_replacement allowdupe attribute_membership auth_membership forcelocal gid '
  	      + 'ia_load_module members system host_aliases ip allowed_trunk_vlans description device_url duplex encapsulation etherchannel '
  	      + 'native_vlan speed principals allow_root auth_class auth_type authenticate_user k_of_n mechanisms rule session_owner shared options '
  	      + 'device fstype enable hasrestart directory present absent link atboot blockdevice device dump pass remounts poller_tag use '
  	      + 'message withpath adminfile allow_virtual allowcdrom category configfiles flavor install_options instance package_settings platform '
  	      + 'responsefile status uninstall_options vendor unless_system_user unless_uid binary control flags hasstatus manifest pattern restart running '
  	      + 'start stop allowdupe auths expiry gid groups home iterations key_membership keys managehome membership password password_max_age '
  	      + 'password_min_age profile_membership profiles project purge_ssh_keys role_membership roles salt shell uid baseurl cost descr enabled '
  	      + 'enablegroups exclude failovermethod gpgcheck gpgkey http_caching include includepkgs keepalive metadata_expire metalink mirrorlist '
  	      + 'priority protect proxy proxy_password proxy_username repo_gpgcheck s3_enabled skip_if_unavailable sslcacert sslclientcert sslclientkey '
  	      + 'sslverify mounted',
  	    built_in:
  	    /* core facts */
  	      'architecture augeasversion blockdevices boardmanufacturer boardproductname boardserialnumber cfkey dhcp_servers '
  	      + 'domain ec2_ ec2_userdata facterversion filesystems ldom fqdn gid hardwareisa hardwaremodel hostname id|0 interfaces '
  	      + 'ipaddress ipaddress_ ipaddress6 ipaddress6_ iphostnumber is_virtual kernel kernelmajversion kernelrelease kernelversion '
  	      + 'kernelrelease kernelversion lsbdistcodename lsbdistdescription lsbdistid lsbdistrelease lsbmajdistrelease lsbminordistrelease '
  	      + 'lsbrelease macaddress macaddress_ macosx_buildversion macosx_productname macosx_productversion macosx_productverson_major '
  	      + 'macosx_productversion_minor manufacturer memoryfree memorysize netmask metmask_ network_ operatingsystem operatingsystemmajrelease '
  	      + 'operatingsystemrelease osfamily partitions path physicalprocessorcount processor processorcount productname ps puppetversion '
  	      + 'rubysitedir rubyversion selinux selinux_config_mode selinux_config_policy selinux_current_mode selinux_current_mode selinux_enforced '
  	      + 'selinux_policyversion serialnumber sp_ sshdsakey sshecdsakey sshrsakey swapencrypted swapfree swapsize timezone type uniqueid uptime '
  	      + 'uptime_days uptime_hours uptime_seconds uuid virtual vlans xendomains zfs_version zonenae zones zpool_version'
  	  };

  	  const COMMENT = hljs.COMMENT('#', '$');

  	  const IDENT_RE = '([A-Za-z_]|::)(\\w|::)*';

  	  const TITLE = hljs.inherit(hljs.TITLE_MODE, { begin: IDENT_RE });

  	  const VARIABLE = {
  	    className: 'variable',
  	    begin: '\\$' + IDENT_RE
  	  };

  	  const STRING = {
  	    className: 'string',
  	    contains: [
  	      hljs.BACKSLASH_ESCAPE,
  	      VARIABLE
  	    ],
  	    variants: [
  	      {
  	        begin: /'/,
  	        end: /'/
  	      },
  	      {
  	        begin: /"/,
  	        end: /"/
  	      }
  	    ]
  	  };

  	  return {
  	    name: 'Puppet',
  	    aliases: [ 'pp' ],
  	    contains: [
  	      COMMENT,
  	      VARIABLE,
  	      STRING,
  	      {
  	        beginKeywords: 'class',
  	        end: '\\{|;',
  	        illegal: /=/,
  	        contains: [
  	          TITLE,
  	          COMMENT
  	        ]
  	      },
  	      {
  	        beginKeywords: 'define',
  	        end: /\{/,
  	        contains: [
  	          {
  	            className: 'section',
  	            begin: hljs.IDENT_RE,
  	            endsParent: true
  	          }
  	        ]
  	      },
  	      {
  	        begin: hljs.IDENT_RE + '\\s+\\{',
  	        returnBegin: true,
  	        end: /\S/,
  	        contains: [
  	          {
  	            className: 'keyword',
  	            begin: hljs.IDENT_RE,
  	            relevance: 0.2
  	          },
  	          {
  	            begin: /\{/,
  	            end: /\}/,
  	            keywords: PUPPET_KEYWORDS,
  	            relevance: 0,
  	            contains: [
  	              STRING,
  	              COMMENT,
  	              {
  	                begin: '[a-zA-Z_]+\\s*=>',
  	                returnBegin: true,
  	                end: '=>',
  	                contains: [
  	                  {
  	                    className: 'attr',
  	                    begin: hljs.IDENT_RE
  	                  }
  	                ]
  	              },
  	              {
  	                className: 'number',
  	                begin: '(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b',
  	                relevance: 0
  	              },
  	              VARIABLE
  	            ]
  	          }
  	        ],
  	        relevance: 0
  	      }
  	    ]
  	  };
  	}

  	puppet_1 = puppet;
  	return puppet_1;
  }

  /*
  Language: PureBASIC
  Author: Tristano Ajmone <tajmone@gmail.com>
  Description: Syntax highlighting for PureBASIC (v.5.00-5.60). No inline ASM highlighting. (v.1.2, May 2017)
  Credits: I've taken inspiration from the PureBasic language file for GeSHi, created by Gustavo Julio Fiorenza (GuShH).
  Website: https://www.purebasic.com
  */

  var purebasic_1;
  var hasRequiredPurebasic;

  function requirePurebasic () {
  	if (hasRequiredPurebasic) return purebasic_1;
  	hasRequiredPurebasic = 1;
  	// Base deafult colors in PB IDE: background: #FFFFDF; foreground: #000000;

  	function purebasic(hljs) {
  	  const STRINGS = { // PB IDE color: #0080FF (Azure Radiance)
  	    className: 'string',
  	    begin: '(~)?"',
  	    end: '"',
  	    illegal: '\\n'
  	  };
  	  const CONSTANTS = { // PB IDE color: #924B72 (Cannon Pink)
  	    //  "#" + a letter or underscore + letters, digits or underscores + (optional) "$"
  	    className: 'symbol',
  	    begin: '#[a-zA-Z_]\\w*\\$?'
  	  };

  	  return {
  	    name: 'PureBASIC',
  	    aliases: [
  	      'pb',
  	      'pbi'
  	    ],
  	    keywords: // PB IDE color: #006666 (Blue Stone) + Bold
  	      // Keywords from all version of PureBASIC 5.00 upward ...
  	      'Align And Array As Break CallDebugger Case CompilerCase CompilerDefault '
  	      + 'CompilerElse CompilerElseIf CompilerEndIf CompilerEndSelect CompilerError '
  	      + 'CompilerIf CompilerSelect CompilerWarning Continue Data DataSection Debug '
  	      + 'DebugLevel Declare DeclareC DeclareCDLL DeclareDLL DeclareModule Default '
  	      + 'Define Dim DisableASM DisableDebugger DisableExplicit Else ElseIf EnableASM '
  	      + 'EnableDebugger EnableExplicit End EndDataSection EndDeclareModule EndEnumeration '
  	      + 'EndIf EndImport EndInterface EndMacro EndModule EndProcedure EndSelect '
  	      + 'EndStructure EndStructureUnion EndWith Enumeration EnumerationBinary Extends '
  	      + 'FakeReturn For ForEach ForEver Global Gosub Goto If Import ImportC '
  	      + 'IncludeBinary IncludeFile IncludePath Interface List Macro MacroExpandedCount '
  	      + 'Map Module NewList NewMap Next Not Or Procedure ProcedureC '
  	      + 'ProcedureCDLL ProcedureDLL ProcedureReturn Protected Prototype PrototypeC ReDim '
  	      + 'Read Repeat Restore Return Runtime Select Shared Static Step Structure '
  	      + 'StructureUnion Swap Threaded To UndefineMacro Until Until  UnuseModule '
  	      + 'UseModule Wend While With XIncludeFile XOr',
  	    contains: [
  	      // COMMENTS | PB IDE color: #00AAAA (Persian Green)
  	      hljs.COMMENT(';', '$', { relevance: 0 }),

  	      { // PROCEDURES DEFINITIONS
  	        className: 'function',
  	        begin: '\\b(Procedure|Declare)(C|CDLL|DLL)?\\b',
  	        end: '\\(',
  	        excludeEnd: true,
  	        returnBegin: true,
  	        contains: [
  	          { // PROCEDURE KEYWORDS | PB IDE color: #006666 (Blue Stone) + Bold
  	            className: 'keyword',
  	            begin: '(Procedure|Declare)(C|CDLL|DLL)?',
  	            excludeEnd: true
  	          },
  	          { // PROCEDURE RETURN TYPE SETTING | PB IDE color: #000000 (Black)
  	            className: 'type',
  	            begin: '\\.\\w*'
  	            // end: ' ',
  	          },
  	          hljs.UNDERSCORE_TITLE_MODE // PROCEDURE NAME | PB IDE color: #006666 (Blue Stone)
  	        ]
  	      },
  	      STRINGS,
  	      CONSTANTS
  	    ]
  	  };
  	}

  	/*  ==============================================================================
  	                                      CHANGELOG
  	    ==============================================================================
  	    - v.1.2 (2017-05-12)
  	        -- BUG-FIX: Some keywords were accidentally joyned together. Now fixed.
  	    - v.1.1 (2017-04-30)
  	        -- Updated to PureBASIC 5.60.
  	        -- Keywords list now built by extracting them from the PureBASIC SDK's
  	           "SyntaxHilighting.dll" (from each PureBASIC version). Tokens from each
  	           version are added to the list, and renamed or removed tokens are kept
  	           for the sake of covering all versions of the language from PureBASIC
  	           v5.00 upward. (NOTE: currently, there are no renamed or deprecated
  	           tokens in the keywords list). For more info, see:
  	           -- http://www.purebasic.fr/english/viewtopic.php?&p=506269
  	           -- https://github.com/tajmone/purebasic-archives/tree/master/syntax-highlighting/guidelines
  	    - v.1.0 (April 2016)
  	        -- First release
  	        -- Keywords list taken and adapted from GuShH's (Gustavo Julio Fiorenza)
  	           PureBasic language file for GeSHi:
  	           -- https://github.com/easybook/geshi/blob/master/geshi/purebasic.php
  	*/

  	purebasic_1 = purebasic;
  	return purebasic_1;
  }

  /*
  Language: Python
  Description: Python is an interpreted, object-oriented, high-level programming language with dynamic semantics.
  Website: https://www.python.org
  Category: common
  */

  var python_1;
  var hasRequiredPython;

  function requirePython () {
  	if (hasRequiredPython) return python_1;
  	hasRequiredPython = 1;
  	function python(hljs) {
  	  const regex = hljs.regex;
  	  const IDENT_RE = /[\p{XID_Start}_]\p{XID_Continue}*/u;
  	  const RESERVED_WORDS = [
  	    'and',
  	    'as',
  	    'assert',
  	    'async',
  	    'await',
  	    'break',
  	    'case',
  	    'class',
  	    'continue',
  	    'def',
  	    'del',
  	    'elif',
  	    'else',
  	    'except',
  	    'finally',
  	    'for',
  	    'from',
  	    'global',
  	    'if',
  	    'import',
  	    'in',
  	    'is',
  	    'lambda',
  	    'match',
  	    'nonlocal|10',
  	    'not',
  	    'or',
  	    'pass',
  	    'raise',
  	    'return',
  	    'try',
  	    'while',
  	    'with',
  	    'yield'
  	  ];

  	  const BUILT_INS = [
  	    '__import__',
  	    'abs',
  	    'all',
  	    'any',
  	    'ascii',
  	    'bin',
  	    'bool',
  	    'breakpoint',
  	    'bytearray',
  	    'bytes',
  	    'callable',
  	    'chr',
  	    'classmethod',
  	    'compile',
  	    'complex',
  	    'delattr',
  	    'dict',
  	    'dir',
  	    'divmod',
  	    'enumerate',
  	    'eval',
  	    'exec',
  	    'filter',
  	    'float',
  	    'format',
  	    'frozenset',
  	    'getattr',
  	    'globals',
  	    'hasattr',
  	    'hash',
  	    'help',
  	    'hex',
  	    'id',
  	    'input',
  	    'int',
  	    'isinstance',
  	    'issubclass',
  	    'iter',
  	    'len',
  	    'list',
  	    'locals',
  	    'map',
  	    'max',
  	    'memoryview',
  	    'min',
  	    'next',
  	    'object',
  	    'oct',
  	    'open',
  	    'ord',
  	    'pow',
  	    'print',
  	    'property',
  	    'range',
  	    'repr',
  	    'reversed',
  	    'round',
  	    'set',
  	    'setattr',
  	    'slice',
  	    'sorted',
  	    'staticmethod',
  	    'str',
  	    'sum',
  	    'super',
  	    'tuple',
  	    'type',
  	    'vars',
  	    'zip'
  	  ];

  	  const LITERALS = [
  	    '__debug__',
  	    'Ellipsis',
  	    'False',
  	    'None',
  	    'NotImplemented',
  	    'True'
  	  ];

  	  // https://docs.python.org/3/library/typing.html
  	  // TODO: Could these be supplemented by a CamelCase matcher in certain
  	  // contexts, leaving these remaining only for relevance hinting?
  	  const TYPES = [
  	    "Any",
  	    "Callable",
  	    "Coroutine",
  	    "Dict",
  	    "List",
  	    "Literal",
  	    "Generic",
  	    "Optional",
  	    "Sequence",
  	    "Set",
  	    "Tuple",
  	    "Type",
  	    "Union"
  	  ];

  	  const KEYWORDS = {
  	    $pattern: /[A-Za-z]\w+|__\w+__/,
  	    keyword: RESERVED_WORDS,
  	    built_in: BUILT_INS,
  	    literal: LITERALS,
  	    type: TYPES
  	  };

  	  const PROMPT = {
  	    className: 'meta',
  	    begin: /^(>>>|\.\.\.) /
  	  };

  	  const SUBST = {
  	    className: 'subst',
  	    begin: /\{/,
  	    end: /\}/,
  	    keywords: KEYWORDS,
  	    illegal: /#/
  	  };

  	  const LITERAL_BRACKET = {
  	    begin: /\{\{/,
  	    relevance: 0
  	  };

  	  const STRING = {
  	    className: 'string',
  	    contains: [ hljs.BACKSLASH_ESCAPE ],
  	    variants: [
  	      {
  	        begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?'''/,
  	        end: /'''/,
  	        contains: [
  	          hljs.BACKSLASH_ESCAPE,
  	          PROMPT
  	        ],
  	        relevance: 10
  	      },
  	      {
  	        begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?"""/,
  	        end: /"""/,
  	        contains: [
  	          hljs.BACKSLASH_ESCAPE,
  	          PROMPT
  	        ],
  	        relevance: 10
  	      },
  	      {
  	        begin: /([fF][rR]|[rR][fF]|[fF])'''/,
  	        end: /'''/,
  	        contains: [
  	          hljs.BACKSLASH_ESCAPE,
  	          PROMPT,
  	          LITERAL_BRACKET,
  	          SUBST
  	        ]
  	      },
  	      {
  	        begin: /([fF][rR]|[rR][fF]|[fF])"""/,
  	        end: /"""/,
  	        contains: [
  	          hljs.BACKSLASH_ESCAPE,
  	          PROMPT,
  	          LITERAL_BRACKET,
  	          SUBST
  	        ]
  	      },
  	      {
  	        begin: /([uU]|[rR])'/,
  	        end: /'/,
  	        relevance: 10
  	      },
  	      {
  	        begin: /([uU]|[rR])"/,
  	        end: /"/,
  	        relevance: 10
  	      },
  	      {
  	        begin: /([bB]|[bB][rR]|[rR][bB])'/,
  	        end: /'/
  	      },
  	      {
  	        begin: /([bB]|[bB][rR]|[rR][bB])"/,
  	        end: /"/
  	      },
  	      {
  	        begin: /([fF][rR]|[rR][fF]|[fF])'/,
  	        end: /'/,
  	        contains: [
  	          hljs.BACKSLASH_ESCAPE,
  	          LITERAL_BRACKET,
  	          SUBST
  	        ]
  	      },
  	      {
  	        begin: /([fF][rR]|[rR][fF]|[fF])"/,
  	        end: /"/,
  	        contains: [
  	          hljs.BACKSLASH_ESCAPE,
  	          LITERAL_BRACKET,
  	          SUBST
  	        ]
  	      },
  	      hljs.APOS_STRING_MODE,
  	      hljs.QUOTE_STRING_MODE
  	    ]
  	  };

  	  // https://docs.python.org/3.9/reference/lexical_analysis.html#numeric-literals
  	  const digitpart = '[0-9](_?[0-9])*';
  	  const pointfloat = `(\\b(${digitpart}))?\\.(${digitpart})|\\b(${digitpart})\\.`;
  	  // Whitespace after a number (or any lexical token) is needed only if its absence
  	  // would change the tokenization
  	  // https://docs.python.org/3.9/reference/lexical_analysis.html#whitespace-between-tokens
  	  // We deviate slightly, requiring a word boundary or a keyword
  	  // to avoid accidentally recognizing *prefixes* (e.g., `0` in `0x41` or `08` or `0__1`)
  	  const lookahead = `\\b|${RESERVED_WORDS.join('|')}`;
  	  const NUMBER = {
  	    className: 'number',
  	    relevance: 0,
  	    variants: [
  	      // exponentfloat, pointfloat
  	      // https://docs.python.org/3.9/reference/lexical_analysis.html#floating-point-literals
  	      // optionally imaginary
  	      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals
  	      // Note: no leading \b because floats can start with a decimal point
  	      // and we don't want to mishandle e.g. `fn(.5)`,
  	      // no trailing \b for pointfloat because it can end with a decimal point
  	      // and we don't want to mishandle e.g. `0..hex()`; this should be safe
  	      // because both MUST contain a decimal point and so cannot be confused with
  	      // the interior part of an identifier
  	      {
  	        begin: `(\\b(${digitpart})|(${pointfloat}))[eE][+-]?(${digitpart})[jJ]?(?=${lookahead})`
  	      },
  	      {
  	        begin: `(${pointfloat})[jJ]?`
  	      },

  	      // decinteger, bininteger, octinteger, hexinteger
  	      // https://docs.python.org/3.9/reference/lexical_analysis.html#integer-literals
  	      // optionally "long" in Python 2
  	      // https://docs.python.org/2.7/reference/lexical_analysis.html#integer-and-long-integer-literals
  	      // decinteger is optionally imaginary
  	      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals
  	      {
  	        begin: `\\b([1-9](_?[0-9])*|0+(_?0)*)[lLjJ]?(?=${lookahead})`
  	      },
  	      {
  	        begin: `\\b0[bB](_?[01])+[lL]?(?=${lookahead})`
  	      },
  	      {
  	        begin: `\\b0[oO](_?[0-7])+[lL]?(?=${lookahead})`
  	      },
  	      {
  	        begin: `\\b0[xX](_?[0-9a-fA-F])+[lL]?(?=${lookahead})`
  	      },

  	      // imagnumber (digitpart-based)
  	      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals
  	      {
  	        begin: `\\b(${digitpart})[jJ](?=${lookahead})`
  	      }
  	    ]
  	  };
  	  const COMMENT_TYPE = {
  	    className: "comment",
  	    begin: regex.lookahead(/# type:/),
  	    end: /$/,
  	    keywords: KEYWORDS,
  	    contains: [
  	      { // prevent keywords from coloring `type`
  	        begin: /# type:/
  	      },
  	      // comment within a datatype comment includes no keywords
  	      {
  	        begin: /#/,
  	        end: /\b\B/,
  	        endsWithParent: true
  	      }
  	    ]
  	  };
  	  const PARAMS = {
  	    className: 'params',
  	    variants: [
  	      // Exclude params in functions without params
  	      {
  	        className: "",
  	        begin: /\(\s*\)/,
  	        skip: true
  	      },
  	      {
  	        begin: /\(/,
  	        end: /\)/,
  	        excludeBegin: true,
  	        excludeEnd: true,
  	        keywords: KEYWORDS,
  	        contains: [
  	          'self',
  	          PROMPT,
  	          NUMBER,
  	          STRING,
  	          hljs.HASH_COMMENT_MODE
  	        ]
  	      }
  	    ]
  	  };
  	  SUBST.contains = [
  	    STRING,
  	    NUMBER,
  	    PROMPT
  	  ];

  	  return {
  	    name: 'Python',
  	    aliases: [
  	      'py',
  	      'gyp',
  	      'ipython'
  	    ],
  	    unicodeRegex: true,
  	    keywords: KEYWORDS,
  	    illegal: /(<\/|\?)|=>/,
  	    contains: [
  	      PROMPT,
  	      NUMBER,
  	      {
  	        // very common convention
  	        begin: /\bself\b/
  	      },
  	      {
  	        // eat "if" prior to string so that it won't accidentally be
  	        // labeled as an f-string
  	        beginKeywords: "if",
  	        relevance: 0
  	      },
  	      STRING,
  	      COMMENT_TYPE,
  	      hljs.HASH_COMMENT_MODE,
  	      {
  	        match: [
  	          /\bdef/, /\s+/,
  	          IDENT_RE,
  	        ],
  	        scope: {
  	          1: "keyword",
  	          3: "title.function"
  	        },
  	        contains: [ PARAMS ]
  	      },
  	      {
  	        variants: [
  	          {
  	            match: [
  	              /\bclass/, /\s+/,
  	              IDENT_RE, /\s*/,
  	              /\(\s*/, IDENT_RE,/\s*\)/
  	            ],
  	          },
  	          {
  	            match: [
  	              /\bclass/, /\s+/,
  	              IDENT_RE
  	            ],
  	          }
  	        ],
  	        scope: {
  	          1: "keyword",
  	          3: "title.class",
  	          6: "title.class.inherited",
  	        }
  	      },
  	      {
  	        className: 'meta',
  	        begin: /^[\t ]*@/,
  	        end: /(?=#)|$/,
  	        contains: [
  	          NUMBER,
  	          PARAMS,
  	          STRING
  	        ]
  	      }
  	    ]
  	  };
  	}

  	python_1 = python;
  	return python_1;
  }

  /*
  Language: Python REPL
  Requires: python.js
  Author: Josh Goebel <hello@joshgoebel.com>
  Category: common
  */

  var pythonRepl_1;
  var hasRequiredPythonRepl;

  function requirePythonRepl () {
  	if (hasRequiredPythonRepl) return pythonRepl_1;
  	hasRequiredPythonRepl = 1;
  	function pythonRepl(hljs) {
  	  return {
  	    aliases: [ 'pycon' ],
  	    contains: [
  	      {
  	        className: 'meta.prompt',
  	        starts: {
  	          // a space separates the REPL prefix from the actual code
  	          // this is purely for cleaner HTML output
  	          end: / |$/,
  	          starts: {
  	            end: '$',
  	            subLanguage: 'python'
  	          }
  	        },
  	        variants: [
  	          { begin: /^>>>(?=[ ]|$)/ },
  	          { begin: /^\.\.\.(?=[ ]|$)/ }
  	        ]
  	      }
  	    ]
  	  };
  	}

  	pythonRepl_1 = pythonRepl;
  	return pythonRepl_1;
  }

  /*
  Language: Q
  Description: Q is a vector-based functional paradigm programming language built into the kdb+ database.
               (K/Q/Kdb+ from Kx Systems)
  Author: Sergey Vidyuk <svidyuk@gmail.com>
  Website: https://kx.com/connect-with-us/developers/
  */

  var q_1;
  var hasRequiredQ;

  function requireQ () {
  	if (hasRequiredQ) return q_1;
  	hasRequiredQ = 1;
  	function q(hljs) {
  	  const KEYWORDS = {
  	    $pattern: /(`?)[A-Za-z0-9_]+\b/,
  	    keyword:
  	      'do while select delete by update from',
  	    literal:
  	      '0b 1b',
  	    built_in:
  	      'neg not null string reciprocal floor ceiling signum mod xbar xlog and or each scan over prior mmu lsq inv md5 ltime gtime count first var dev med cov cor all any rand sums prds mins maxs fills deltas ratios avgs differ prev next rank reverse iasc idesc asc desc msum mcount mavg mdev xrank mmin mmax xprev rotate distinct group where flip type key til get value attr cut set upsert raze union inter except cross sv vs sublist enlist read0 read1 hopen hclose hdel hsym hcount peach system ltrim rtrim trim lower upper ssr view tables views cols xcols keys xkey xcol xasc xdesc fkeys meta lj aj aj0 ij pj asof uj ww wj wj1 fby xgroup ungroup ej save load rsave rload show csv parse eval min max avg wavg wsum sin cos tan sum',
  	    type:
  	      '`float `double int `timestamp `timespan `datetime `time `boolean `symbol `char `byte `short `long `real `month `date `minute `second `guid'
  	  };

  	  return {
  	    name: 'Q',
  	    aliases: [
  	      'k',
  	      'kdb'
  	    ],
  	    keywords: KEYWORDS,
  	    contains: [
  	      hljs.C_LINE_COMMENT_MODE,
  	      hljs.QUOTE_STRING_MODE,
  	      hljs.C_NUMBER_MODE
  	    ]
  	  };
  	}

  	q_1 = q;
  	return q_1;
  }

  /*
  Language: QML
  Requires: javascript.js, xml.js
  Author: John Foster <jfoster@esri.com>
  Description: Syntax highlighting for the Qt Quick QML scripting language, based mostly off
               the JavaScript parser.
  Website: https://doc.qt.io/qt-5/qmlapplications.html
  Category: scripting
  */

  var qml_1;
  var hasRequiredQml;

  function requireQml () {
  	if (hasRequiredQml) return qml_1;
  	hasRequiredQml = 1;
  	function qml(hljs) {
  	  const regex = hljs.regex;
  	  const KEYWORDS = {
  	    keyword:
  	      'in of on if for while finally var new function do return void else break catch '
  	      + 'instanceof with throw case default try this switch continue typeof delete '
  	      + 'let yield const export super debugger as async await import',
  	    literal:
  	      'true false null undefined NaN Infinity',
  	    built_in:
  	      'eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent '
  	      + 'encodeURI encodeURIComponent escape unescape Object Function Boolean Error '
  	      + 'EvalError InternalError RangeError ReferenceError StopIteration SyntaxError '
  	      + 'TypeError URIError Number Math Date String RegExp Array Float32Array '
  	      + 'Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array '
  	      + 'Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require '
  	      + 'module console window document Symbol Set Map WeakSet WeakMap Proxy Reflect '
  	      + 'Behavior bool color coordinate date double enumeration font geocircle georectangle '
  	      + 'geoshape int list matrix4x4 parent point quaternion real rect '
  	      + 'size string url variant vector2d vector3d vector4d '
  	      + 'Promise'
  	  };

  	  const QML_IDENT_RE = '[a-zA-Z_][a-zA-Z0-9\\._]*';

  	  // Isolate property statements. Ends at a :, =, ;, ,, a comment or end of line.
  	  // Use property class.
  	  const PROPERTY = {
  	    className: 'keyword',
  	    begin: '\\bproperty\\b',
  	    starts: {
  	      className: 'string',
  	      end: '(:|=|;|,|//|/\\*|$)',
  	      returnEnd: true
  	    }
  	  };

  	  // Isolate signal statements. Ends at a ) a comment or end of line.
  	  // Use property class.
  	  const SIGNAL = {
  	    className: 'keyword',
  	    begin: '\\bsignal\\b',
  	    starts: {
  	      className: 'string',
  	      end: '(\\(|:|=|;|,|//|/\\*|$)',
  	      returnEnd: true
  	    }
  	  };

  	  // id: is special in QML. When we see id: we want to mark the id: as attribute and
  	  // emphasize the token following.
  	  const ID_ID = {
  	    className: 'attribute',
  	    begin: '\\bid\\s*:',
  	    starts: {
  	      className: 'string',
  	      end: QML_IDENT_RE,
  	      returnEnd: false
  	    }
  	  };

  	  // Find QML object attribute. An attribute is a QML identifier followed by :.
  	  // Unfortunately it's hard to know where it ends, as it may contain scalars,
  	  // objects, object definitions, or javascript. The true end is either when the parent
  	  // ends or the next attribute is detected.
  	  const QML_ATTRIBUTE = {
  	    begin: QML_IDENT_RE + '\\s*:',
  	    returnBegin: true,
  	    contains: [
  	      {
  	        className: 'attribute',
  	        begin: QML_IDENT_RE,
  	        end: '\\s*:',
  	        excludeEnd: true,
  	        relevance: 0
  	      }
  	    ],
  	    relevance: 0
  	  };

  	  // Find QML object. A QML object is a QML identifier followed by { and ends at the matching }.
  	  // All we really care about is finding IDENT followed by { and just mark up the IDENT and ignore the {.
  	  const QML_OBJECT = {
  	    begin: regex.concat(QML_IDENT_RE, /\s*\{/),
  	    end: /\{/,
  	    returnBegin: true,
  	    relevance: 0,
  	    contains: [ hljs.inherit(hljs.TITLE_MODE, { begin: QML_IDENT_RE }) ]
  	  };

  	  return {
  	    name: 'QML',
  	    aliases: [ 'qt' ],
  	    case_insensitive: false,
  	    keywords: KEYWORDS,
  	    contains: [
  	      {
  	        className: 'meta',
  	        begin: /^\s*['"]use (strict|asm)['"]/
  	      },
  	      hljs.APOS_STRING_MODE,
  	      hljs.QUOTE_STRING_MODE,
  	      { // template string
  	        className: 'string',
  	        begin: '`',
  	        end: '`',
  	        contains: [
  	          hljs.BACKSLASH_ESCAPE,
  	          {
  	            className: 'subst',
  	            begin: '\\$\\{',
  	            end: '\\}'
  	          }
  	        ]
  	      },
  	      hljs.C_LINE_COMMENT_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE,
  	      {
  	        className: 'number',
  	        variants: [
  	          { begin: '\\b(0[bB][01]+)' },
  	          { begin: '\\b(0[oO][0-7]+)' },
  	          { begin: hljs.C_NUMBER_RE }
  	        ],
  	        relevance: 0
  	      },
  	      { // "value" container
  	        begin: '(' + hljs.RE_STARTERS_RE + '|\\b(case|return|throw)\\b)\\s*',
  	        keywords: 'return throw case',
  	        contains: [
  	          hljs.C_LINE_COMMENT_MODE,
  	          hljs.C_BLOCK_COMMENT_MODE,
  	          hljs.REGEXP_MODE,
  	          { // E4X / JSX
  	            begin: /</,
  	            end: />\s*[);\]]/,
  	            relevance: 0,
  	            subLanguage: 'xml'
  	          }
  	        ],
  	        relevance: 0
  	      },
  	      SIGNAL,
  	      PROPERTY,
  	      {
  	        className: 'function',
  	        beginKeywords: 'function',
  	        end: /\{/,
  	        excludeEnd: true,
  	        contains: [
  	          hljs.inherit(hljs.TITLE_MODE, { begin: /[A-Za-z$_][0-9A-Za-z$_]*/ }),
  	          {
  	            className: 'params',
  	            begin: /\(/,
  	            end: /\)/,
  	            excludeBegin: true,
  	            excludeEnd: true,
  	            contains: [
  	              hljs.C_LINE_COMMENT_MODE,
  	              hljs.C_BLOCK_COMMENT_MODE
  	            ]
  	          }
  	        ],
  	        illegal: /\[|%/
  	      },
  	      {
  	        // hack: prevents detection of keywords after dots
  	        begin: '\\.' + hljs.IDENT_RE,
  	        relevance: 0
  	      },
  	      ID_ID,
  	      QML_ATTRIBUTE,
  	      QML_OBJECT
  	    ],
  	    illegal: /#/
  	  };
  	}

  	qml_1 = qml;
  	return qml_1;
  }

  /*
  Language: R
  Description: R is a free software environment for statistical computing and graphics.
  Author: Joe Cheng <joe@rstudio.org>
  Contributors: Konrad Rudolph <konrad.rudolph@gmail.com>
  Website: https://www.r-project.org
  Category: common,scientific
  */

  var r_1;
  var hasRequiredR;

  function requireR () {
  	if (hasRequiredR) return r_1;
  	hasRequiredR = 1;
  	/** @type LanguageFn */
  	function r(hljs) {
  	  const regex = hljs.regex;
  	  // Identifiers in R cannot start with `_`, but they can start with `.` if it
  	  // is not immediately followed by a digit.
  	  // R also supports quoted identifiers, which are near-arbitrary sequences
  	  // delimited by backticks (`…`), which may contain escape sequences. These are
  	  // handled in a separate mode. See `test/markup/r/names.txt` for examples.
  	  // FIXME: Support Unicode identifiers.
  	  const IDENT_RE = /(?:(?:[a-zA-Z]|\.[._a-zA-Z])[._a-zA-Z0-9]*)|\.(?!\d)/;
  	  const NUMBER_TYPES_RE = regex.either(
  	    // Special case: only hexadecimal binary powers can contain fractions
  	    /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*[pP][+-]?\d+i?/,
  	    // Hexadecimal numbers without fraction and optional binary power
  	    /0[xX][0-9a-fA-F]+(?:[pP][+-]?\d+)?[Li]?/,
  	    // Decimal numbers
  	    /(?:\d+(?:\.\d*)?|\.\d+)(?:[eE][+-]?\d+)?[Li]?/
  	  );
  	  const OPERATORS_RE = /[=!<>:]=|\|\||&&|:::?|<-|<<-|->>|->|\|>|[-+*\/?!$&|:<=>@^~]|\*\*/;
  	  const PUNCTUATION_RE = regex.either(
  	    /[()]/,
  	    /[{}]/,
  	    /\[\[/,
  	    /[[\]]/,
  	    /\\/,
  	    /,/
  	  );

  	  return {
  	    name: 'R',

  	    keywords: {
  	      $pattern: IDENT_RE,
  	      keyword:
  	        'function if in break next repeat else for while',
  	      literal:
  	        'NULL NA TRUE FALSE Inf NaN NA_integer_|10 NA_real_|10 '
  	        + 'NA_character_|10 NA_complex_|10',
  	      built_in:
  	        // Builtin constants
  	        'LETTERS letters month.abb month.name pi T F '
  	        // Primitive functions
  	        // These are all the functions in `base` that are implemented as a
  	        // `.Primitive`, minus those functions that are also keywords.
  	        + 'abs acos acosh all any anyNA Arg as.call as.character '
  	        + 'as.complex as.double as.environment as.integer as.logical '
  	        + 'as.null.default as.numeric as.raw asin asinh atan atanh attr '
  	        + 'attributes baseenv browser c call ceiling class Conj cos cosh '
  	        + 'cospi cummax cummin cumprod cumsum digamma dim dimnames '
  	        + 'emptyenv exp expression floor forceAndCall gamma gc.time '
  	        + 'globalenv Im interactive invisible is.array is.atomic is.call '
  	        + 'is.character is.complex is.double is.environment is.expression '
  	        + 'is.finite is.function is.infinite is.integer is.language '
  	        + 'is.list is.logical is.matrix is.na is.name is.nan is.null '
  	        + 'is.numeric is.object is.pairlist is.raw is.recursive is.single '
  	        + 'is.symbol lazyLoadDBfetch length lgamma list log max min '
  	        + 'missing Mod names nargs nzchar oldClass on.exit pos.to.env '
  	        + 'proc.time prod quote range Re rep retracemem return round '
  	        + 'seq_along seq_len seq.int sign signif sin sinh sinpi sqrt '
  	        + 'standardGeneric substitute sum switch tan tanh tanpi tracemem '
  	        + 'trigamma trunc unclass untracemem UseMethod xtfrm',
  	    },

  	    contains: [
  	      // Roxygen comments
  	      hljs.COMMENT(
  	        /#'/,
  	        /$/,
  	        { contains: [
  	          {
  	            // Handle `@examples` separately to cause all subsequent code
  	            // until the next `@`-tag on its own line to be kept as-is,
  	            // preventing highlighting. This code is example R code, so nested
  	            // doctags shouldn’t be treated as such. See
  	            // `test/markup/r/roxygen.txt` for an example.
  	            scope: 'doctag',
  	            match: /@examples/,
  	            starts: {
  	              end: regex.lookahead(regex.either(
  	                // end if another doc comment
  	                /\n^#'\s*(?=@[a-zA-Z]+)/,
  	                // or a line with no comment
  	                /\n^(?!#')/
  	              )),
  	              endsParent: true
  	            }
  	          },
  	          {
  	            // Handle `@param` to highlight the parameter name following
  	            // after.
  	            scope: 'doctag',
  	            begin: '@param',
  	            end: /$/,
  	            contains: [
  	              {
  	                scope: 'variable',
  	                variants: [
  	                  { match: IDENT_RE },
  	                  { match: /`(?:\\.|[^`\\])+`/ }
  	                ],
  	                endsParent: true
  	              }
  	            ]
  	          },
  	          {
  	            scope: 'doctag',
  	            match: /@[a-zA-Z]+/
  	          },
  	          {
  	            scope: 'keyword',
  	            match: /\\[a-zA-Z]+/
  	          }
  	        ] }
  	      ),

  	      hljs.HASH_COMMENT_MODE,

  	      {
  	        scope: 'string',
  	        contains: [ hljs.BACKSLASH_ESCAPE ],
  	        variants: [
  	          hljs.END_SAME_AS_BEGIN({
  	            begin: /[rR]"(-*)\(/,
  	            end: /\)(-*)"/
  	          }),
  	          hljs.END_SAME_AS_BEGIN({
  	            begin: /[rR]"(-*)\{/,
  	            end: /\}(-*)"/
  	          }),
  	          hljs.END_SAME_AS_BEGIN({
  	            begin: /[rR]"(-*)\[/,
  	            end: /\](-*)"/
  	          }),
  	          hljs.END_SAME_AS_BEGIN({
  	            begin: /[rR]'(-*)\(/,
  	            end: /\)(-*)'/
  	          }),
  	          hljs.END_SAME_AS_BEGIN({
  	            begin: /[rR]'(-*)\{/,
  	            end: /\}(-*)'/
  	          }),
  	          hljs.END_SAME_AS_BEGIN({
  	            begin: /[rR]'(-*)\[/,
  	            end: /\](-*)'/
  	          }),
  	          {
  	            begin: '"',
  	            end: '"',
  	            relevance: 0
  	          },
  	          {
  	            begin: "'",
  	            end: "'",
  	            relevance: 0
  	          }
  	        ],
  	      },

  	      // Matching numbers immediately following punctuation and operators is
  	      // tricky since we need to look at the character ahead of a number to
  	      // ensure the number is not part of an identifier, and we cannot use
  	      // negative look-behind assertions. So instead we explicitly handle all
  	      // possible combinations of (operator|punctuation), number.
  	      // TODO: replace with negative look-behind when available
  	      // { begin: /(?<![a-zA-Z0-9._])0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*[pP][+-]?\d+i?/ },
  	      // { begin: /(?<![a-zA-Z0-9._])0[xX][0-9a-fA-F]+([pP][+-]?\d+)?[Li]?/ },
  	      // { begin: /(?<![a-zA-Z0-9._])(\d+(\.\d*)?|\.\d+)([eE][+-]?\d+)?[Li]?/ }
  	      {
  	        relevance: 0,
  	        variants: [
  	          {
  	            scope: {
  	              1: 'operator',
  	              2: 'number'
  	            },
  	            match: [
  	              OPERATORS_RE,
  	              NUMBER_TYPES_RE
  	            ]
  	          },
  	          {
  	            scope: {
  	              1: 'operator',
  	              2: 'number'
  	            },
  	            match: [
  	              /%[^%]*%/,
  	              NUMBER_TYPES_RE
  	            ]
  	          },
  	          {
  	            scope: {
  	              1: 'punctuation',
  	              2: 'number'
  	            },
  	            match: [
  	              PUNCTUATION_RE,
  	              NUMBER_TYPES_RE
  	            ]
  	          },
  	          {
  	            scope: { 2: 'number' },
  	            match: [
  	              /[^a-zA-Z0-9._]|^/, // not part of an identifier, or start of document
  	              NUMBER_TYPES_RE
  	            ]
  	          }
  	        ]
  	      },

  	      // Operators/punctuation when they're not directly followed by numbers
  	      {
  	        // Relevance boost for the most common assignment form.
  	        scope: { 3: 'operator' },
  	        match: [
  	          IDENT_RE,
  	          /\s+/,
  	          /<-/,
  	          /\s+/
  	        ]
  	      },

  	      {
  	        scope: 'operator',
  	        relevance: 0,
  	        variants: [
  	          { match: OPERATORS_RE },
  	          { match: /%[^%]*%/ }
  	        ]
  	      },

  	      {
  	        scope: 'punctuation',
  	        relevance: 0,
  	        match: PUNCTUATION_RE
  	      },

  	      {
  	        // Escaped identifier
  	        begin: '`',
  	        end: '`',
  	        contains: [ { begin: /\\./ } ]
  	      }
  	    ]
  	  };
  	}

  	r_1 = r;
  	return r_1;
  }

  /*
  Language: ReasonML
  Description: Reason lets you write simple, fast and quality type safe code while leveraging both the JavaScript & OCaml ecosystems.
  Website: https://reasonml.github.io
  Author: Gidi Meir Morris <oss@gidi.io>
  Category: functional
  */

  var reasonml_1;
  var hasRequiredReasonml;

  function requireReasonml () {
  	if (hasRequiredReasonml) return reasonml_1;
  	hasRequiredReasonml = 1;
  	function reasonml(hljs) {
  	  function orReValues(ops) {
  	    return ops
  	      .map(function(op) {
  	        return op
  	          .split('')
  	          .map(function(char) {
  	            return '\\' + char;
  	          })
  	          .join('');
  	      })
  	      .join('|');
  	  }

  	  const RE_IDENT = '~?[a-z$_][0-9a-zA-Z$_]*';
  	  const RE_MODULE_IDENT = '`?[A-Z$_][0-9a-zA-Z$_]*';

  	  const RE_PARAM_TYPEPARAM = '\'?[a-z$_][0-9a-z$_]*';
  	  const RE_PARAM_TYPE = '\\s*:\\s*[a-z$_][0-9a-z$_]*(\\(\\s*(' + RE_PARAM_TYPEPARAM + '\\s*(,' + RE_PARAM_TYPEPARAM + '\\s*)*)?\\))?';
  	  const RE_PARAM = RE_IDENT + '(' + RE_PARAM_TYPE + '){0,2}';
  	  const RE_OPERATOR = "(" + orReValues([
  	    '||',
  	    '++',
  	    '**',
  	    '+.',
  	    '*',
  	    '/',
  	    '*.',
  	    '/.',
  	    '...'
  	  ]) + "|\\|>|&&|==|===)";
  	  const RE_OPERATOR_SPACED = "\\s+" + RE_OPERATOR + "\\s+";

  	  const KEYWORDS = {
  	    keyword:
  	      'and as asr assert begin class constraint do done downto else end exception external '
  	      + 'for fun function functor if in include inherit initializer '
  	      + 'land lazy let lor lsl lsr lxor match method mod module mutable new nonrec '
  	      + 'object of open or private rec sig struct then to try type val virtual when while with',
  	    built_in:
  	      'array bool bytes char exn|5 float int int32 int64 list lazy_t|5 nativeint|5 ref string unit ',
  	    literal:
  	      'true false'
  	  };

  	  const RE_NUMBER = '\\b(0[xX][a-fA-F0-9_]+[Lln]?|'
  	    + '0[oO][0-7_]+[Lln]?|'
  	    + '0[bB][01_]+[Lln]?|'
  	    + '[0-9][0-9_]*([Lln]|(\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)?)';

  	  const NUMBER_MODE = {
  	    className: 'number',
  	    relevance: 0,
  	    variants: [
  	      { begin: RE_NUMBER },
  	      { begin: '\\(-' + RE_NUMBER + '\\)' }
  	    ]
  	  };

  	  const OPERATOR_MODE = {
  	    className: 'operator',
  	    relevance: 0,
  	    begin: RE_OPERATOR
  	  };
  	  const LIST_CONTENTS_MODES = [
  	    {
  	      className: 'identifier',
  	      relevance: 0,
  	      begin: RE_IDENT
  	    },
  	    OPERATOR_MODE,
  	    NUMBER_MODE
  	  ];

  	  const MODULE_ACCESS_CONTENTS = [
  	    hljs.QUOTE_STRING_MODE,
  	    OPERATOR_MODE,
  	    {
  	      className: 'module',
  	      begin: "\\b" + RE_MODULE_IDENT,
  	      returnBegin: true,
  	      relevance: 0,
  	      end: "\.",
  	      contains: [
  	        {
  	          className: 'identifier',
  	          begin: RE_MODULE_IDENT,
  	          relevance: 0
  	        }
  	      ]
  	    }
  	  ];

  	  const PARAMS_CONTENTS = [
  	    {
  	      className: 'module',
  	      begin: "\\b" + RE_MODULE_IDENT,
  	      returnBegin: true,
  	      end: "\.",
  	      relevance: 0,
  	      contains: [
  	        {
  	          className: 'identifier',
  	          begin: RE_MODULE_IDENT,
  	          relevance: 0
  	        }
  	      ]
  	    }
  	  ];

  	  const PARAMS_MODE = {
  	    begin: RE_IDENT,
  	    end: '(,|\\n|\\))',
  	    relevance: 0,
  	    contains: [
  	      OPERATOR_MODE,
  	      {
  	        className: 'typing',
  	        begin: ':',
  	        end: '(,|\\n)',
  	        returnBegin: true,
  	        relevance: 0,
  	        contains: PARAMS_CONTENTS
  	      }
  	    ]
  	  };

  	  const FUNCTION_BLOCK_MODE = {
  	    className: 'function',
  	    relevance: 0,
  	    keywords: KEYWORDS,
  	    variants: [
  	      {
  	        begin: '\\s(\\(\\.?.*?\\)|' + RE_IDENT + ')\\s*=>',
  	        end: '\\s*=>',
  	        returnBegin: true,
  	        relevance: 0,
  	        contains: [
  	          {
  	            className: 'params',
  	            variants: [
  	              { begin: RE_IDENT },
  	              { begin: RE_PARAM },
  	              { begin: /\(\s*\)/ }
  	            ]
  	          }
  	        ]
  	      },
  	      {
  	        begin: '\\s\\(\\.?[^;\\|]*\\)\\s*=>',
  	        end: '\\s=>',
  	        returnBegin: true,
  	        relevance: 0,
  	        contains: [
  	          {
  	            className: 'params',
  	            relevance: 0,
  	            variants: [ PARAMS_MODE ]
  	          }
  	        ]
  	      },
  	      { begin: '\\(\\.\\s' + RE_IDENT + '\\)\\s*=>' }
  	    ]
  	  };
  	  MODULE_ACCESS_CONTENTS.push(FUNCTION_BLOCK_MODE);

  	  const CONSTRUCTOR_MODE = {
  	    className: 'constructor',
  	    begin: RE_MODULE_IDENT + '\\(',
  	    end: '\\)',
  	    illegal: '\\n',
  	    keywords: KEYWORDS,
  	    contains: [
  	      hljs.QUOTE_STRING_MODE,
  	      OPERATOR_MODE,
  	      {
  	        className: 'params',
  	        begin: '\\b' + RE_IDENT
  	      }
  	    ]
  	  };

  	  const PATTERN_MATCH_BLOCK_MODE = {
  	    className: 'pattern-match',
  	    begin: '\\|',
  	    returnBegin: true,
  	    keywords: KEYWORDS,
  	    end: '=>',
  	    relevance: 0,
  	    contains: [
  	      CONSTRUCTOR_MODE,
  	      OPERATOR_MODE,
  	      {
  	        relevance: 0,
  	        className: 'constructor',
  	        begin: RE_MODULE_IDENT
  	      }
  	    ]
  	  };

  	  const MODULE_ACCESS_MODE = {
  	    className: 'module-access',
  	    keywords: KEYWORDS,
  	    returnBegin: true,
  	    variants: [
  	      { begin: "\\b(" + RE_MODULE_IDENT + "\\.)+" + RE_IDENT },
  	      {
  	        begin: "\\b(" + RE_MODULE_IDENT + "\\.)+\\(",
  	        end: "\\)",
  	        returnBegin: true,
  	        contains: [
  	          FUNCTION_BLOCK_MODE,
  	          {
  	            begin: '\\(',
  	            end: '\\)',
  	            relevance: 0,
  	            skip: true
  	          }
  	        ].concat(MODULE_ACCESS_CONTENTS)
  	      },
  	      {
  	        begin: "\\b(" + RE_MODULE_IDENT + "\\.)+\\{",
  	        end: /\}/
  	      }
  	    ],
  	    contains: MODULE_ACCESS_CONTENTS
  	  };

  	  PARAMS_CONTENTS.push(MODULE_ACCESS_MODE);

  	  return {
  	    name: 'ReasonML',
  	    aliases: [ 're' ],
  	    keywords: KEYWORDS,
  	    illegal: '(:-|:=|\\$\\{|\\+=)',
  	    contains: [
  	      hljs.COMMENT('/\\*', '\\*/', { illegal: '^(#,\\/\\/)' }),
  	      {
  	        className: 'character',
  	        begin: '\'(\\\\[^\']+|[^\'])\'',
  	        illegal: '\\n',
  	        relevance: 0
  	      },
  	      hljs.QUOTE_STRING_MODE,
  	      {
  	        className: 'literal',
  	        begin: '\\(\\)',
  	        relevance: 0
  	      },
  	      {
  	        className: 'literal',
  	        begin: '\\[\\|',
  	        end: '\\|\\]',
  	        relevance: 0,
  	        contains: LIST_CONTENTS_MODES
  	      },
  	      {
  	        className: 'literal',
  	        begin: '\\[',
  	        end: '\\]',
  	        relevance: 0,
  	        contains: LIST_CONTENTS_MODES
  	      },
  	      CONSTRUCTOR_MODE,
  	      {
  	        className: 'operator',
  	        begin: RE_OPERATOR_SPACED,
  	        illegal: '-->',
  	        relevance: 0
  	      },
  	      NUMBER_MODE,
  	      hljs.C_LINE_COMMENT_MODE,
  	      PATTERN_MATCH_BLOCK_MODE,
  	      FUNCTION_BLOCK_MODE,
  	      {
  	        className: 'module-def',
  	        begin: "\\bmodule\\s+" + RE_IDENT + "\\s+" + RE_MODULE_IDENT + "\\s+=\\s+\\{",
  	        end: /\}/,
  	        returnBegin: true,
  	        keywords: KEYWORDS,
  	        relevance: 0,
  	        contains: [
  	          {
  	            className: 'module',
  	            relevance: 0,
  	            begin: RE_MODULE_IDENT
  	          },
  	          {
  	            begin: /\{/,
  	            end: /\}/,
  	            relevance: 0,
  	            skip: true
  	          }
  	        ].concat(MODULE_ACCESS_CONTENTS)
  	      },
  	      MODULE_ACCESS_MODE
  	    ]
  	  };
  	}

  	reasonml_1 = reasonml;
  	return reasonml_1;
  }

  /*
  Language: RenderMan RIB
  Author: Konstantin Evdokimenko <qewerty@gmail.com>
  Contributors: Shuen-Huei Guan <drake.guan@gmail.com>
  Website: https://renderman.pixar.com/resources/RenderMan_20/ribBinding.html
  Category: graphics
  */

  var rib_1;
  var hasRequiredRib;

  function requireRib () {
  	if (hasRequiredRib) return rib_1;
  	hasRequiredRib = 1;
  	function rib(hljs) {
  	  return {
  	    name: 'RenderMan RIB',
  	    keywords:
  	      'ArchiveRecord AreaLightSource Atmosphere Attribute AttributeBegin AttributeEnd Basis '
  	      + 'Begin Blobby Bound Clipping ClippingPlane Color ColorSamples ConcatTransform Cone '
  	      + 'CoordinateSystem CoordSysTransform CropWindow Curves Cylinder DepthOfField Detail '
  	      + 'DetailRange Disk Displacement Display End ErrorHandler Exposure Exterior Format '
  	      + 'FrameAspectRatio FrameBegin FrameEnd GeneralPolygon GeometricApproximation Geometry '
  	      + 'Hider Hyperboloid Identity Illuminate Imager Interior LightSource '
  	      + 'MakeCubeFaceEnvironment MakeLatLongEnvironment MakeShadow MakeTexture Matte '
  	      + 'MotionBegin MotionEnd NuPatch ObjectBegin ObjectEnd ObjectInstance Opacity Option '
  	      + 'Orientation Paraboloid Patch PatchMesh Perspective PixelFilter PixelSamples '
  	      + 'PixelVariance Points PointsGeneralPolygons PointsPolygons Polygon Procedural Projection '
  	      + 'Quantize ReadArchive RelativeDetail ReverseOrientation Rotate Scale ScreenWindow '
  	      + 'ShadingInterpolation ShadingRate Shutter Sides Skew SolidBegin SolidEnd Sphere '
  	      + 'SubdivisionMesh Surface TextureCoordinates Torus Transform TransformBegin TransformEnd '
  	      + 'TransformPoints Translate TrimCurve WorldBegin WorldEnd',
  	    illegal: '</',
  	    contains: [
  	      hljs.HASH_COMMENT_MODE,
  	      hljs.C_NUMBER_MODE,
  	      hljs.APOS_STRING_MODE,
  	      hljs.QUOTE_STRING_MODE
  	    ]
  	  };
  	}

  	rib_1 = rib;
  	return rib_1;
  }

  /*
  Language: Roboconf
  Author: Vincent Zurczak <vzurczak@linagora.com>
  Description: Syntax highlighting for Roboconf's DSL
  Website: http://roboconf.net
  Category: config
  */

  var roboconf_1;
  var hasRequiredRoboconf;

  function requireRoboconf () {
  	if (hasRequiredRoboconf) return roboconf_1;
  	hasRequiredRoboconf = 1;
  	function roboconf(hljs) {
  	  const IDENTIFIER = '[a-zA-Z-_][^\\n{]+\\{';

  	  const PROPERTY = {
  	    className: 'attribute',
  	    begin: /[a-zA-Z-_]+/,
  	    end: /\s*:/,
  	    excludeEnd: true,
  	    starts: {
  	      end: ';',
  	      relevance: 0,
  	      contains: [
  	        {
  	          className: 'variable',
  	          begin: /\.[a-zA-Z-_]+/
  	        },
  	        {
  	          className: 'keyword',
  	          begin: /\(optional\)/
  	        }
  	      ]
  	    }
  	  };

  	  return {
  	    name: 'Roboconf',
  	    aliases: [
  	      'graph',
  	      'instances'
  	    ],
  	    case_insensitive: true,
  	    keywords: 'import',
  	    contains: [
  	      // Facet sections
  	      {
  	        begin: '^facet ' + IDENTIFIER,
  	        end: /\}/,
  	        keywords: 'facet',
  	        contains: [
  	          PROPERTY,
  	          hljs.HASH_COMMENT_MODE
  	        ]
  	      },

  	      // Instance sections
  	      {
  	        begin: '^\\s*instance of ' + IDENTIFIER,
  	        end: /\}/,
  	        keywords: 'name count channels instance-data instance-state instance of',
  	        illegal: /\S/,
  	        contains: [
  	          'self',
  	          PROPERTY,
  	          hljs.HASH_COMMENT_MODE
  	        ]
  	      },

  	      // Component sections
  	      {
  	        begin: '^' + IDENTIFIER,
  	        end: /\}/,
  	        contains: [
  	          PROPERTY,
  	          hljs.HASH_COMMENT_MODE
  	        ]
  	      },

  	      // Comments
  	      hljs.HASH_COMMENT_MODE
  	    ]
  	  };
  	}

  	roboconf_1 = roboconf;
  	return roboconf_1;
  }

  /*
  Language: MikroTik RouterOS script
  Author: Ivan Dementev <ivan_div@mail.ru>
  Description: Scripting host provides a way to automate some router maintenance tasks by means of executing user-defined scripts bounded to some event occurrence
  Website: https://wiki.mikrotik.com/wiki/Manual:Scripting
  */

  var routeros_1;
  var hasRequiredRouteros;

  function requireRouteros () {
  	if (hasRequiredRouteros) return routeros_1;
  	hasRequiredRouteros = 1;
  	// Colors from RouterOS terminal:
  	//   green        - #0E9A00
  	//   teal         - #0C9A9A
  	//   purple       - #99069A
  	//   light-brown  - #9A9900

  	function routeros(hljs) {
  	  const STATEMENTS = 'foreach do while for if from to step else on-error and or not in';

  	  // Global commands: Every global command should start with ":" token, otherwise it will be treated as variable.
  	  const GLOBAL_COMMANDS = 'global local beep delay put len typeof pick log time set find environment terminal error execute parse resolve toarray tobool toid toip toip6 tonum tostr totime';

  	  // Common commands: Following commands available from most sub-menus:
  	  const COMMON_COMMANDS = 'add remove enable disable set get print export edit find run debug error info warning';

  	  const LITERALS = 'true false yes no nothing nil null';

  	  const OBJECTS = 'traffic-flow traffic-generator firewall scheduler aaa accounting address-list address align area bandwidth-server bfd bgp bridge client clock community config connection console customer default dhcp-client dhcp-server discovery dns e-mail ethernet filter firmware gps graphing group hardware health hotspot identity igmp-proxy incoming instance interface ip ipsec ipv6 irq l2tp-server lcd ldp logging mac-server mac-winbox mangle manual mirror mme mpls nat nd neighbor network note ntp ospf ospf-v3 ovpn-server page peer pim ping policy pool port ppp pppoe-client pptp-server prefix profile proposal proxy queue radius resource rip ripng route routing screen script security-profiles server service service-port settings shares smb sms sniffer snmp snooper socks sstp-server system tool tracking type upgrade upnp user-manager users user vlan secret vrrp watchdog web-access wireless pptp pppoe lan wan layer7-protocol lease simple raw';

  	  const VAR = {
  	    className: 'variable',
  	    variants: [
  	      { begin: /\$[\w\d#@][\w\d_]*/ },
  	      { begin: /\$\{(.*?)\}/ }
  	    ]
  	  };

  	  const QUOTE_STRING = {
  	    className: 'string',
  	    begin: /"/,
  	    end: /"/,
  	    contains: [
  	      hljs.BACKSLASH_ESCAPE,
  	      VAR,
  	      {
  	        className: 'variable',
  	        begin: /\$\(/,
  	        end: /\)/,
  	        contains: [ hljs.BACKSLASH_ESCAPE ]
  	      }
  	    ]
  	  };

  	  const APOS_STRING = {
  	    className: 'string',
  	    begin: /'/,
  	    end: /'/
  	  };

  	  return {
  	    name: 'MikroTik RouterOS script',
  	    aliases: [ 'mikrotik' ],
  	    case_insensitive: true,
  	    keywords: {
  	      $pattern: /:?[\w-]+/,
  	      literal: LITERALS,
  	      keyword: STATEMENTS + ' :' + STATEMENTS.split(' ').join(' :') + ' :' + GLOBAL_COMMANDS.split(' ').join(' :')
  	    },
  	    contains: [
  	      { // illegal syntax
  	        variants: [
  	          { // -- comment
  	            begin: /\/\*/,
  	            end: /\*\//
  	          },
  	          { // Stan comment
  	            begin: /\/\//,
  	            end: /$/
  	          },
  	          { // HTML tags
  	            begin: /<\//,
  	            end: />/
  	          }
  	        ],
  	        illegal: /./
  	      },
  	      hljs.COMMENT('^#', '$'),
  	      QUOTE_STRING,
  	      APOS_STRING,
  	      VAR,
  	      // attribute=value
  	      {
  	        // > is to avoid matches with => in other grammars
  	        begin: /[\w-]+=([^\s{}[\]()>]+)/,
  	        relevance: 0,
  	        returnBegin: true,
  	        contains: [
  	          {
  	            className: 'attribute',
  	            begin: /[^=]+/
  	          },
  	          {
  	            begin: /=/,
  	            endsWithParent: true,
  	            relevance: 0,
  	            contains: [
  	              QUOTE_STRING,
  	              APOS_STRING,
  	              VAR,
  	              {
  	                className: 'literal',
  	                begin: '\\b(' + LITERALS.split(' ').join('|') + ')\\b'
  	              },
  	              {
  	                // Do not format unclassified values. Needed to exclude highlighting of values as built_in.
  	                begin: /("[^"]*"|[^\s{}[\]]+)/ }
  	              /*
  	              {
  	                // IPv4 addresses and subnets
  	                className: 'number',
  	                variants: [
  	                  {begin: IPADDR_wBITMASK+'(,'+IPADDR_wBITMASK+')*'}, //192.168.0.0/24,1.2.3.0/24
  	                  {begin: IPADDR+'-'+IPADDR},       // 192.168.0.1-192.168.0.3
  	                  {begin: IPADDR+'(,'+IPADDR+')*'}, // 192.168.0.1,192.168.0.34,192.168.24.1,192.168.0.1
  	                ]
  	              },
  	              {
  	                // MAC addresses and DHCP Client IDs
  	                className: 'number',
  	                begin: /\b(1:)?([0-9A-Fa-f]{1,2}[:-]){5}([0-9A-Fa-f]){1,2}\b/,
  	              },
  	              */
  	            ]
  	          }
  	        ]
  	      },
  	      {
  	        // HEX values
  	        className: 'number',
  	        begin: /\*[0-9a-fA-F]+/
  	      },
  	      {
  	        begin: '\\b(' + COMMON_COMMANDS.split(' ').join('|') + ')([\\s[(\\]|])',
  	        returnBegin: true,
  	        contains: [
  	          {
  	            className: 'built_in', // 'function',
  	            begin: /\w+/
  	          }
  	        ]
  	      },
  	      {
  	        className: 'built_in',
  	        variants: [
  	          { begin: '(\\.\\./|/|\\s)((' + OBJECTS.split(' ').join('|') + ');?\\s)+' },
  	          {
  	            begin: /\.\./,
  	            relevance: 0
  	          }
  	        ]
  	      }
  	    ]
  	  };
  	}

  	routeros_1 = routeros;
  	return routeros_1;
  }

  /*
  Language: RenderMan RSL
  Author: Konstantin Evdokimenko <qewerty@gmail.com>
  Contributors: Shuen-Huei Guan <drake.guan@gmail.com>
  Website: https://renderman.pixar.com/resources/RenderMan_20/shadingLanguage.html
  Category: graphics
  */

  var rsl_1;
  var hasRequiredRsl;

  function requireRsl () {
  	if (hasRequiredRsl) return rsl_1;
  	hasRequiredRsl = 1;
  	function rsl(hljs) {
  	  const BUILT_INS = [
  	    "abs",
  	    "acos",
  	    "ambient",
  	    "area",
  	    "asin",
  	    "atan",
  	    "atmosphere",
  	    "attribute",
  	    "calculatenormal",
  	    "ceil",
  	    "cellnoise",
  	    "clamp",
  	    "comp",
  	    "concat",
  	    "cos",
  	    "degrees",
  	    "depth",
  	    "Deriv",
  	    "diffuse",
  	    "distance",
  	    "Du",
  	    "Dv",
  	    "environment",
  	    "exp",
  	    "faceforward",
  	    "filterstep",
  	    "floor",
  	    "format",
  	    "fresnel",
  	    "incident",
  	    "length",
  	    "lightsource",
  	    "log",
  	    "match",
  	    "max",
  	    "min",
  	    "mod",
  	    "noise",
  	    "normalize",
  	    "ntransform",
  	    "opposite",
  	    "option",
  	    "phong",
  	    "pnoise",
  	    "pow",
  	    "printf",
  	    "ptlined",
  	    "radians",
  	    "random",
  	    "reflect",
  	    "refract",
  	    "renderinfo",
  	    "round",
  	    "setcomp",
  	    "setxcomp",
  	    "setycomp",
  	    "setzcomp",
  	    "shadow",
  	    "sign",
  	    "sin",
  	    "smoothstep",
  	    "specular",
  	    "specularbrdf",
  	    "spline",
  	    "sqrt",
  	    "step",
  	    "tan",
  	    "texture",
  	    "textureinfo",
  	    "trace",
  	    "transform",
  	    "vtransform",
  	    "xcomp",
  	    "ycomp",
  	    "zcomp"
  	  ];

  	  const TYPES = [
  	    "matrix",
  	    "float",
  	    "color",
  	    "point",
  	    "normal",
  	    "vector"
  	  ];

  	  const KEYWORDS = [
  	    "while",
  	    "for",
  	    "if",
  	    "do",
  	    "return",
  	    "else",
  	    "break",
  	    "extern",
  	    "continue"
  	  ];

  	  const CLASS_DEFINITION = {
  	    match: [
  	      /(surface|displacement|light|volume|imager)/,
  	      /\s+/,
  	      hljs.IDENT_RE,
  	    ],
  	    scope: {
  	      1: "keyword",
  	      3: "title.class",
  	    }
  	  };

  	  return {
  	    name: 'RenderMan RSL',
  	    keywords: {
  	      keyword: KEYWORDS,
  	      built_in: BUILT_INS,
  	      type: TYPES
  	    },
  	    illegal: '</',
  	    contains: [
  	      hljs.C_LINE_COMMENT_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE,
  	      hljs.QUOTE_STRING_MODE,
  	      hljs.APOS_STRING_MODE,
  	      hljs.C_NUMBER_MODE,
  	      {
  	        className: 'meta',
  	        begin: '#',
  	        end: '$'
  	      },
  	      CLASS_DEFINITION,
  	      {
  	        beginKeywords: 'illuminate illuminance gather',
  	        end: '\\('
  	      }
  	    ]
  	  };
  	}

  	rsl_1 = rsl;
  	return rsl_1;
  }

  /*
  Language: Oracle Rules Language
  Author: Jason Jacobson <jason.a.jacobson@gmail.com>
  Description: The Oracle Utilities Rules Language is used to program the Oracle Utilities Applications acquired from LODESTAR Corporation.  The products include Billing Component, LPSS, Pricing Component etc. through version 1.6.1.
  Website: https://docs.oracle.com/cd/E17904_01/dev.1111/e10227/rlref.htm
  Category: enterprise
  */

  var ruleslanguage_1;
  var hasRequiredRuleslanguage;

  function requireRuleslanguage () {
  	if (hasRequiredRuleslanguage) return ruleslanguage_1;
  	hasRequiredRuleslanguage = 1;
  	function ruleslanguage(hljs) {
  	  return {
  	    name: 'Oracle Rules Language',
  	    keywords: {
  	      keyword:
  	        'BILL_PERIOD BILL_START BILL_STOP RS_EFFECTIVE_START RS_EFFECTIVE_STOP RS_JURIS_CODE RS_OPCO_CODE '
  	        + 'INTDADDATTRIBUTE|5 INTDADDVMSG|5 INTDBLOCKOP|5 INTDBLOCKOPNA|5 INTDCLOSE|5 INTDCOUNT|5 '
  	        + 'INTDCOUNTSTATUSCODE|5 INTDCREATEMASK|5 INTDCREATEDAYMASK|5 INTDCREATEFACTORMASK|5 '
  	        + 'INTDCREATEHANDLE|5 INTDCREATEOVERRIDEDAYMASK|5 INTDCREATEOVERRIDEMASK|5 '
  	        + 'INTDCREATESTATUSCODEMASK|5 INTDCREATETOUPERIOD|5 INTDDELETE|5 INTDDIPTEST|5 INTDEXPORT|5 '
  	        + 'INTDGETERRORCODE|5 INTDGETERRORMESSAGE|5 INTDISEQUAL|5 INTDJOIN|5 INTDLOAD|5 INTDLOADACTUALCUT|5 '
  	        + 'INTDLOADDATES|5 INTDLOADHIST|5 INTDLOADLIST|5 INTDLOADLISTDATES|5 INTDLOADLISTENERGY|5 '
  	        + 'INTDLOADLISTHIST|5 INTDLOADRELATEDCHANNEL|5 INTDLOADSP|5 INTDLOADSTAGING|5 INTDLOADUOM|5 '
  	        + 'INTDLOADUOMDATES|5 INTDLOADUOMHIST|5 INTDLOADVERSION|5 INTDOPEN|5 INTDREADFIRST|5 INTDREADNEXT|5 '
  	        + 'INTDRECCOUNT|5 INTDRELEASE|5 INTDREPLACE|5 INTDROLLAVG|5 INTDROLLPEAK|5 INTDSCALAROP|5 INTDSCALE|5 '
  	        + 'INTDSETATTRIBUTE|5 INTDSETDSTPARTICIPANT|5 INTDSETSTRING|5 INTDSETVALUE|5 INTDSETVALUESTATUS|5 '
  	        + 'INTDSHIFTSTARTTIME|5 INTDSMOOTH|5 INTDSORT|5 INTDSPIKETEST|5 INTDSUBSET|5 INTDTOU|5 '
  	        + 'INTDTOURELEASE|5 INTDTOUVALUE|5 INTDUPDATESTATS|5 INTDVALUE|5 STDEV INTDDELETEEX|5 '
  	        + 'INTDLOADEXACTUAL|5 INTDLOADEXCUT|5 INTDLOADEXDATES|5 INTDLOADEX|5 INTDLOADEXRELATEDCHANNEL|5 '
  	        + 'INTDSAVEEX|5 MVLOAD|5 MVLOADACCT|5 MVLOADACCTDATES|5 MVLOADACCTHIST|5 MVLOADDATES|5 MVLOADHIST|5 '
  	        + 'MVLOADLIST|5 MVLOADLISTDATES|5 MVLOADLISTHIST|5 IF FOR NEXT DONE SELECT END CALL ABORT CLEAR CHANNEL FACTOR LIST NUMBER '
  	        + 'OVERRIDE SET WEEK DISTRIBUTIONNODE ELSE WHEN THEN OTHERWISE IENUM CSV INCLUDE LEAVE RIDER SAVE DELETE '
  	        + 'NOVALUE SECTION WARN SAVE_UPDATE DETERMINANT LABEL REPORT REVENUE EACH '
  	        + 'IN FROM TOTAL CHARGE BLOCK AND OR CSV_FILE RATE_CODE AUXILIARY_DEMAND '
  	        + 'UIDACCOUNT RS BILL_PERIOD_SELECT HOURS_PER_MONTH INTD_ERROR_STOP SEASON_SCHEDULE_NAME '
  	        + 'ACCOUNTFACTOR ARRAYUPPERBOUND CALLSTOREDPROC GETADOCONNECTION GETCONNECT GETDATASOURCE '
  	        + 'GETQUALIFIER GETUSERID HASVALUE LISTCOUNT LISTOP LISTUPDATE LISTVALUE PRORATEFACTOR RSPRORATE '
  	        + 'SETBINPATH SETDBMONITOR WQ_OPEN BILLINGHOURS DATE DATEFROMFLOAT DATETIMEFROMSTRING '
  	        + 'DATETIMETOSTRING DATETOFLOAT DAY DAYDIFF DAYNAME DBDATETIME HOUR MINUTE MONTH MONTHDIFF '
  	        + 'MONTHHOURS MONTHNAME ROUNDDATE SAMEWEEKDAYLASTYEAR SECOND WEEKDAY WEEKDIFF YEAR YEARDAY '
  	        + 'YEARSTR COMPSUM HISTCOUNT HISTMAX HISTMIN HISTMINNZ HISTVALUE MAXNRANGE MAXRANGE MINRANGE '
  	        + 'COMPIKVA COMPKVA COMPKVARFROMKQKW COMPLF IDATTR FLAG LF2KW LF2KWH MAXKW POWERFACTOR '
  	        + 'READING2USAGE AVGSEASON MAXSEASON MONTHLYMERGE SEASONVALUE SUMSEASON ACCTREADDATES '
  	        + 'ACCTTABLELOAD CONFIGADD CONFIGGET CREATEOBJECT CREATEREPORT EMAILCLIENT EXPBLKMDMUSAGE '
  	        + 'EXPMDMUSAGE EXPORT_USAGE FACTORINEFFECT GETUSERSPECIFIEDSTOP INEFFECT ISHOLIDAY RUNRATE '
  	        + 'SAVE_PROFILE SETREPORTTITLE USEREXIT WATFORRUNRATE TO TABLE ACOS ASIN ATAN ATAN2 BITAND CEIL '
  	        + 'COS COSECANT COSH COTANGENT DIVQUOT DIVREM EXP FABS FLOOR FMOD FREPM FREXPN LOG LOG10 MAX MAXN '
  	        + 'MIN MINNZ MODF POW ROUND ROUND2VALUE ROUNDINT SECANT SIN SINH SQROOT TAN TANH FLOAT2STRING '
  	        + 'FLOAT2STRINGNC INSTR LEFT LEN LTRIM MID RIGHT RTRIM STRING STRINGNC TOLOWER TOUPPER TRIM '
  	        + 'NUMDAYS READ_DATE STAGING',
  	      built_in:
  	        'IDENTIFIER OPTIONS XML_ELEMENT XML_OP XML_ELEMENT_OF DOMDOCCREATE DOMDOCLOADFILE DOMDOCLOADXML '
  	        + 'DOMDOCSAVEFILE DOMDOCGETROOT DOMDOCADDPI DOMNODEGETNAME DOMNODEGETTYPE DOMNODEGETVALUE DOMNODEGETCHILDCT '
  	        + 'DOMNODEGETFIRSTCHILD DOMNODEGETSIBLING DOMNODECREATECHILDELEMENT DOMNODESETATTRIBUTE '
  	        + 'DOMNODEGETCHILDELEMENTCT DOMNODEGETFIRSTCHILDELEMENT DOMNODEGETSIBLINGELEMENT DOMNODEGETATTRIBUTECT '
  	        + 'DOMNODEGETATTRIBUTEI DOMNODEGETATTRIBUTEBYNAME DOMNODEGETBYNAME'
  	    },
  	    contains: [
  	      hljs.C_LINE_COMMENT_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE,
  	      hljs.APOS_STRING_MODE,
  	      hljs.QUOTE_STRING_MODE,
  	      hljs.C_NUMBER_MODE,
  	      {
  	        className: 'literal',
  	        variants: [
  	          { // looks like #-comment
  	            begin: '#\\s+',
  	            relevance: 0
  	          },
  	          { begin: '#[a-zA-Z .]+' }
  	        ]
  	      }
  	    ]
  	  };
  	}

  	ruleslanguage_1 = ruleslanguage;
  	return ruleslanguage_1;
  }

  /*
  Language: Rust
  Author: Andrey Vlasovskikh <andrey.vlasovskikh@gmail.com>
  Contributors: Roman Shmatov <romanshmatov@gmail.com>, Kasper Andersen <kma_untrusted@protonmail.com>
  Website: https://www.rust-lang.org
  Category: common, system
  */

  var rust_1;
  var hasRequiredRust;

  function requireRust () {
  	if (hasRequiredRust) return rust_1;
  	hasRequiredRust = 1;
  	/** @type LanguageFn */
  	function rust(hljs) {
  	  const regex = hljs.regex;
  	  const FUNCTION_INVOKE = {
  	    className: "title.function.invoke",
  	    relevance: 0,
  	    begin: regex.concat(
  	      /\b/,
  	      /(?!let\b)/,
  	      hljs.IDENT_RE,
  	      regex.lookahead(/\s*\(/))
  	  };
  	  const NUMBER_SUFFIX = '([ui](8|16|32|64|128|size)|f(32|64))\?';
  	  const KEYWORDS = [
  	    "abstract",
  	    "as",
  	    "async",
  	    "await",
  	    "become",
  	    "box",
  	    "break",
  	    "const",
  	    "continue",
  	    "crate",
  	    "do",
  	    "dyn",
  	    "else",
  	    "enum",
  	    "extern",
  	    "false",
  	    "final",
  	    "fn",
  	    "for",
  	    "if",
  	    "impl",
  	    "in",
  	    "let",
  	    "loop",
  	    "macro",
  	    "match",
  	    "mod",
  	    "move",
  	    "mut",
  	    "override",
  	    "priv",
  	    "pub",
  	    "ref",
  	    "return",
  	    "self",
  	    "Self",
  	    "static",
  	    "struct",
  	    "super",
  	    "trait",
  	    "true",
  	    "try",
  	    "type",
  	    "typeof",
  	    "unsafe",
  	    "unsized",
  	    "use",
  	    "virtual",
  	    "where",
  	    "while",
  	    "yield"
  	  ];
  	  const LITERALS = [
  	    "true",
  	    "false",
  	    "Some",
  	    "None",
  	    "Ok",
  	    "Err"
  	  ];
  	  const BUILTINS = [
  	    // functions
  	    'drop ',
  	    // traits
  	    "Copy",
  	    "Send",
  	    "Sized",
  	    "Sync",
  	    "Drop",
  	    "Fn",
  	    "FnMut",
  	    "FnOnce",
  	    "ToOwned",
  	    "Clone",
  	    "Debug",
  	    "PartialEq",
  	    "PartialOrd",
  	    "Eq",
  	    "Ord",
  	    "AsRef",
  	    "AsMut",
  	    "Into",
  	    "From",
  	    "Default",
  	    "Iterator",
  	    "Extend",
  	    "IntoIterator",
  	    "DoubleEndedIterator",
  	    "ExactSizeIterator",
  	    "SliceConcatExt",
  	    "ToString",
  	    // macros
  	    "assert!",
  	    "assert_eq!",
  	    "bitflags!",
  	    "bytes!",
  	    "cfg!",
  	    "col!",
  	    "concat!",
  	    "concat_idents!",
  	    "debug_assert!",
  	    "debug_assert_eq!",
  	    "env!",
  	    "panic!",
  	    "file!",
  	    "format!",
  	    "format_args!",
  	    "include_bytes!",
  	    "include_str!",
  	    "line!",
  	    "local_data_key!",
  	    "module_path!",
  	    "option_env!",
  	    "print!",
  	    "println!",
  	    "select!",
  	    "stringify!",
  	    "try!",
  	    "unimplemented!",
  	    "unreachable!",
  	    "vec!",
  	    "write!",
  	    "writeln!",
  	    "macro_rules!",
  	    "assert_ne!",
  	    "debug_assert_ne!"
  	  ];
  	  const TYPES = [
  	    "i8",
  	    "i16",
  	    "i32",
  	    "i64",
  	    "i128",
  	    "isize",
  	    "u8",
  	    "u16",
  	    "u32",
  	    "u64",
  	    "u128",
  	    "usize",
  	    "f32",
  	    "f64",
  	    "str",
  	    "char",
  	    "bool",
  	    "Box",
  	    "Option",
  	    "Result",
  	    "String",
  	    "Vec"
  	  ];
  	  return {
  	    name: 'Rust',
  	    aliases: [ 'rs' ],
  	    keywords: {
  	      $pattern: hljs.IDENT_RE + '!?',
  	      type: TYPES,
  	      keyword: KEYWORDS,
  	      literal: LITERALS,
  	      built_in: BUILTINS
  	    },
  	    illegal: '</',
  	    contains: [
  	      hljs.C_LINE_COMMENT_MODE,
  	      hljs.COMMENT('/\\*', '\\*/', { contains: [ 'self' ] }),
  	      hljs.inherit(hljs.QUOTE_STRING_MODE, {
  	        begin: /b?"/,
  	        illegal: null
  	      }),
  	      {
  	        className: 'string',
  	        variants: [
  	          { begin: /b?r(#*)"(.|\n)*?"\1(?!#)/ },
  	          { begin: /b?'\\?(x\w{2}|u\w{4}|U\w{8}|.)'/ }
  	        ]
  	      },
  	      {
  	        className: 'symbol',
  	        begin: /'[a-zA-Z_][a-zA-Z0-9_]*/
  	      },
  	      {
  	        className: 'number',
  	        variants: [
  	          { begin: '\\b0b([01_]+)' + NUMBER_SUFFIX },
  	          { begin: '\\b0o([0-7_]+)' + NUMBER_SUFFIX },
  	          { begin: '\\b0x([A-Fa-f0-9_]+)' + NUMBER_SUFFIX },
  	          { begin: '\\b(\\d[\\d_]*(\\.[0-9_]+)?([eE][+-]?[0-9_]+)?)'
  	                   + NUMBER_SUFFIX }
  	        ],
  	        relevance: 0
  	      },
  	      {
  	        begin: [
  	          /fn/,
  	          /\s+/,
  	          hljs.UNDERSCORE_IDENT_RE
  	        ],
  	        className: {
  	          1: "keyword",
  	          3: "title.function"
  	        }
  	      },
  	      {
  	        className: 'meta',
  	        begin: '#!?\\[',
  	        end: '\\]',
  	        contains: [
  	          {
  	            className: 'string',
  	            begin: /"/,
  	            end: /"/
  	          }
  	        ]
  	      },
  	      {
  	        begin: [
  	          /let/,
  	          /\s+/,
  	          /(?:mut\s+)?/,
  	          hljs.UNDERSCORE_IDENT_RE
  	        ],
  	        className: {
  	          1: "keyword",
  	          3: "keyword",
  	          4: "variable"
  	        }
  	      },
  	      // must come before impl/for rule later
  	      {
  	        begin: [
  	          /for/,
  	          /\s+/,
  	          hljs.UNDERSCORE_IDENT_RE,
  	          /\s+/,
  	          /in/
  	        ],
  	        className: {
  	          1: "keyword",
  	          3: "variable",
  	          5: "keyword"
  	        }
  	      },
  	      {
  	        begin: [
  	          /type/,
  	          /\s+/,
  	          hljs.UNDERSCORE_IDENT_RE
  	        ],
  	        className: {
  	          1: "keyword",
  	          3: "title.class"
  	        }
  	      },
  	      {
  	        begin: [
  	          /(?:trait|enum|struct|union|impl|for)/,
  	          /\s+/,
  	          hljs.UNDERSCORE_IDENT_RE
  	        ],
  	        className: {
  	          1: "keyword",
  	          3: "title.class"
  	        }
  	      },
  	      {
  	        begin: hljs.IDENT_RE + '::',
  	        keywords: {
  	          keyword: "Self",
  	          built_in: BUILTINS,
  	          type: TYPES
  	        }
  	      },
  	      {
  	        className: "punctuation",
  	        begin: '->'
  	      },
  	      FUNCTION_INVOKE
  	    ]
  	  };
  	}

  	rust_1 = rust;
  	return rust_1;
  }

  /*
  Language: SAS
  Author: Mauricio Caceres <mauricio.caceres.bravo@gmail.com>
  Description: Syntax Highlighting for SAS
  */

  var sas_1;
  var hasRequiredSas;

  function requireSas () {
  	if (hasRequiredSas) return sas_1;
  	hasRequiredSas = 1;
  	/** @type LanguageFn */
  	function sas(hljs) {
  	  const regex = hljs.regex;
  	  // Data step and PROC SQL statements
  	  const SAS_KEYWORDS = [
  	    "do",
  	    "if",
  	    "then",
  	    "else",
  	    "end",
  	    "until",
  	    "while",
  	    "abort",
  	    "array",
  	    "attrib",
  	    "by",
  	    "call",
  	    "cards",
  	    "cards4",
  	    "catname",
  	    "continue",
  	    "datalines",
  	    "datalines4",
  	    "delete",
  	    "delim",
  	    "delimiter",
  	    "display",
  	    "dm",
  	    "drop",
  	    "endsas",
  	    "error",
  	    "file",
  	    "filename",
  	    "footnote",
  	    "format",
  	    "goto",
  	    "in",
  	    "infile",
  	    "informat",
  	    "input",
  	    "keep",
  	    "label",
  	    "leave",
  	    "length",
  	    "libname",
  	    "link",
  	    "list",
  	    "lostcard",
  	    "merge",
  	    "missing",
  	    "modify",
  	    "options",
  	    "output",
  	    "out",
  	    "page",
  	    "put",
  	    "redirect",
  	    "remove",
  	    "rename",
  	    "replace",
  	    "retain",
  	    "return",
  	    "select",
  	    "set",
  	    "skip",
  	    "startsas",
  	    "stop",
  	    "title",
  	    "update",
  	    "waitsas",
  	    "where",
  	    "window",
  	    "x|0",
  	    "systask",
  	    "add",
  	    "and",
  	    "alter",
  	    "as",
  	    "cascade",
  	    "check",
  	    "create",
  	    "delete",
  	    "describe",
  	    "distinct",
  	    "drop",
  	    "foreign",
  	    "from",
  	    "group",
  	    "having",
  	    "index",
  	    "insert",
  	    "into",
  	    "in",
  	    "key",
  	    "like",
  	    "message",
  	    "modify",
  	    "msgtype",
  	    "not",
  	    "null",
  	    "on",
  	    "or",
  	    "order",
  	    "primary",
  	    "references",
  	    "reset",
  	    "restrict",
  	    "select",
  	    "set",
  	    "table",
  	    "unique",
  	    "update",
  	    "validate",
  	    "view",
  	    "where"
  	  ];

  	  // Built-in SAS functions
  	  const FUNCTIONS = [
  	    "abs",
  	    "addr",
  	    "airy",
  	    "arcos",
  	    "arsin",
  	    "atan",
  	    "attrc",
  	    "attrn",
  	    "band",
  	    "betainv",
  	    "blshift",
  	    "bnot",
  	    "bor",
  	    "brshift",
  	    "bxor",
  	    "byte",
  	    "cdf",
  	    "ceil",
  	    "cexist",
  	    "cinv",
  	    "close",
  	    "cnonct",
  	    "collate",
  	    "compbl",
  	    "compound",
  	    "compress",
  	    "cos",
  	    "cosh",
  	    "css",
  	    "curobs",
  	    "cv",
  	    "daccdb",
  	    "daccdbsl",
  	    "daccsl",
  	    "daccsyd",
  	    "dacctab",
  	    "dairy",
  	    "date",
  	    "datejul",
  	    "datepart",
  	    "datetime",
  	    "day",
  	    "dclose",
  	    "depdb",
  	    "depdbsl",
  	    "depdbsl",
  	    "depsl",
  	    "depsl",
  	    "depsyd",
  	    "depsyd",
  	    "deptab",
  	    "deptab",
  	    "dequote",
  	    "dhms",
  	    "dif",
  	    "digamma",
  	    "dim",
  	    "dinfo",
  	    "dnum",
  	    "dopen",
  	    "doptname",
  	    "doptnum",
  	    "dread",
  	    "dropnote",
  	    "dsname",
  	    "erf",
  	    "erfc",
  	    "exist",
  	    "exp",
  	    "fappend",
  	    "fclose",
  	    "fcol",
  	    "fdelete",
  	    "fetch",
  	    "fetchobs",
  	    "fexist",
  	    "fget",
  	    "fileexist",
  	    "filename",
  	    "fileref",
  	    "finfo",
  	    "finv",
  	    "fipname",
  	    "fipnamel",
  	    "fipstate",
  	    "floor",
  	    "fnonct",
  	    "fnote",
  	    "fopen",
  	    "foptname",
  	    "foptnum",
  	    "fpoint",
  	    "fpos",
  	    "fput",
  	    "fread",
  	    "frewind",
  	    "frlen",
  	    "fsep",
  	    "fuzz",
  	    "fwrite",
  	    "gaminv",
  	    "gamma",
  	    "getoption",
  	    "getvarc",
  	    "getvarn",
  	    "hbound",
  	    "hms",
  	    "hosthelp",
  	    "hour",
  	    "ibessel",
  	    "index",
  	    "indexc",
  	    "indexw",
  	    "input",
  	    "inputc",
  	    "inputn",
  	    "int",
  	    "intck",
  	    "intnx",
  	    "intrr",
  	    "irr",
  	    "jbessel",
  	    "juldate",
  	    "kurtosis",
  	    "lag",
  	    "lbound",
  	    "left",
  	    "length",
  	    "lgamma",
  	    "libname",
  	    "libref",
  	    "log",
  	    "log10",
  	    "log2",
  	    "logpdf",
  	    "logpmf",
  	    "logsdf",
  	    "lowcase",
  	    "max",
  	    "mdy",
  	    "mean",
  	    "min",
  	    "minute",
  	    "mod",
  	    "month",
  	    "mopen",
  	    "mort",
  	    "n",
  	    "netpv",
  	    "nmiss",
  	    "normal",
  	    "note",
  	    "npv",
  	    "open",
  	    "ordinal",
  	    "pathname",
  	    "pdf",
  	    "peek",
  	    "peekc",
  	    "pmf",
  	    "point",
  	    "poisson",
  	    "poke",
  	    "probbeta",
  	    "probbnml",
  	    "probchi",
  	    "probf",
  	    "probgam",
  	    "probhypr",
  	    "probit",
  	    "probnegb",
  	    "probnorm",
  	    "probt",
  	    "put",
  	    "putc",
  	    "putn",
  	    "qtr",
  	    "quote",
  	    "ranbin",
  	    "rancau",
  	    "ranexp",
  	    "rangam",
  	    "range",
  	    "rank",
  	    "rannor",
  	    "ranpoi",
  	    "rantbl",
  	    "rantri",
  	    "ranuni",
  	    "repeat",
  	    "resolve",
  	    "reverse",
  	    "rewind",
  	    "right",
  	    "round",
  	    "saving",
  	    "scan",
  	    "sdf",
  	    "second",
  	    "sign",
  	    "sin",
  	    "sinh",
  	    "skewness",
  	    "soundex",
  	    "spedis",
  	    "sqrt",
  	    "std",
  	    "stderr",
  	    "stfips",
  	    "stname",
  	    "stnamel",
  	    "substr",
  	    "sum",
  	    "symget",
  	    "sysget",
  	    "sysmsg",
  	    "sysprod",
  	    "sysrc",
  	    "system",
  	    "tan",
  	    "tanh",
  	    "time",
  	    "timepart",
  	    "tinv",
  	    "tnonct",
  	    "today",
  	    "translate",
  	    "tranwrd",
  	    "trigamma",
  	    "trim",
  	    "trimn",
  	    "trunc",
  	    "uniform",
  	    "upcase",
  	    "uss",
  	    "var",
  	    "varfmt",
  	    "varinfmt",
  	    "varlabel",
  	    "varlen",
  	    "varname",
  	    "varnum",
  	    "varray",
  	    "varrayx",
  	    "vartype",
  	    "verify",
  	    "vformat",
  	    "vformatd",
  	    "vformatdx",
  	    "vformatn",
  	    "vformatnx",
  	    "vformatw",
  	    "vformatwx",
  	    "vformatx",
  	    "vinarray",
  	    "vinarrayx",
  	    "vinformat",
  	    "vinformatd",
  	    "vinformatdx",
  	    "vinformatn",
  	    "vinformatnx",
  	    "vinformatw",
  	    "vinformatwx",
  	    "vinformatx",
  	    "vlabel",
  	    "vlabelx",
  	    "vlength",
  	    "vlengthx",
  	    "vname",
  	    "vnamex",
  	    "vtype",
  	    "vtypex",
  	    "weekday",
  	    "year",
  	    "yyq",
  	    "zipfips",
  	    "zipname",
  	    "zipnamel",
  	    "zipstate"
  	  ];

  	  // Built-in macro functions
  	  const MACRO_FUNCTIONS = [
  	    "bquote",
  	    "nrbquote",
  	    "cmpres",
  	    "qcmpres",
  	    "compstor",
  	    "datatyp",
  	    "display",
  	    "do",
  	    "else",
  	    "end",
  	    "eval",
  	    "global",
  	    "goto",
  	    "if",
  	    "index",
  	    "input",
  	    "keydef",
  	    "label",
  	    "left",
  	    "length",
  	    "let",
  	    "local",
  	    "lowcase",
  	    "macro",
  	    "mend",
  	    "nrbquote",
  	    "nrquote",
  	    "nrstr",
  	    "put",
  	    "qcmpres",
  	    "qleft",
  	    "qlowcase",
  	    "qscan",
  	    "qsubstr",
  	    "qsysfunc",
  	    "qtrim",
  	    "quote",
  	    "qupcase",
  	    "scan",
  	    "str",
  	    "substr",
  	    "superq",
  	    "syscall",
  	    "sysevalf",
  	    "sysexec",
  	    "sysfunc",
  	    "sysget",
  	    "syslput",
  	    "sysprod",
  	    "sysrc",
  	    "sysrput",
  	    "then",
  	    "to",
  	    "trim",
  	    "unquote",
  	    "until",
  	    "upcase",
  	    "verify",
  	    "while",
  	    "window"
  	  ];

  	  const LITERALS = [
  	    "null",
  	    "missing",
  	    "_all_",
  	    "_automatic_",
  	    "_character_",
  	    "_infile_",
  	    "_n_",
  	    "_name_",
  	    "_null_",
  	    "_numeric_",
  	    "_user_",
  	    "_webout_"
  	  ];

  	  return {
  	    name: 'SAS',
  	    case_insensitive: true,
  	    keywords: {
  	      literal: LITERALS,
  	      keyword: SAS_KEYWORDS
  	    },
  	    contains: [
  	      {
  	        // Distinct highlight for proc <proc>, data, run, quit
  	        className: 'keyword',
  	        begin: /^\s*(proc [\w\d_]+|data|run|quit)[\s;]/
  	      },
  	      {
  	        // Macro variables
  	        className: 'variable',
  	        begin: /&[a-zA-Z_&][a-zA-Z0-9_]*\.?/
  	      },
  	      {
  	        begin: [
  	          /^\s*/,
  	          /datalines;|cards;/,
  	          /(?:.*\n)+/,
  	          /^\s*;\s*$/
  	        ],
  	        className: {
  	          2: "keyword",
  	          3: "string"
  	        }
  	      },
  	      {
  	        begin: [
  	          /%mend|%macro/,
  	          /\s+/,
  	          /[a-zA-Z_&][a-zA-Z0-9_]*/
  	        ],
  	        className: {
  	          1: "built_in",
  	          3: "title.function"
  	        }
  	      },
  	      { // Built-in macro variables
  	        className: 'built_in',
  	        begin: '%' + regex.either(...MACRO_FUNCTIONS)
  	      },
  	      {
  	        // User-defined macro functions
  	        className: 'title.function',
  	        begin: /%[a-zA-Z_][a-zA-Z_0-9]*/
  	      },
  	      {
  	        // TODO: this is most likely an incorrect classification
  	        // built_in may need more nuance
  	        // https://github.com/highlightjs/highlight.js/issues/2521
  	        className: 'meta',
  	        begin: regex.either(...FUNCTIONS) + '(?=\\()'
  	      },
  	      {
  	        className: 'string',
  	        variants: [
  	          hljs.APOS_STRING_MODE,
  	          hljs.QUOTE_STRING_MODE
  	        ]
  	      },
  	      hljs.COMMENT('\\*', ';'),
  	      hljs.C_BLOCK_COMMENT_MODE
  	    ]
  	  };
  	}

  	sas_1 = sas;
  	return sas_1;
  }

  /*
  Language: Scala
  Category: functional
  Author: Jan Berkel <jan.berkel@gmail.com>
  Contributors: Erik Osheim <d_m@plastic-idolatry.com>
  Website: https://www.scala-lang.org
  */

  var scala_1;
  var hasRequiredScala;

  function requireScala () {
  	if (hasRequiredScala) return scala_1;
  	hasRequiredScala = 1;
  	function scala(hljs) {
  	  const regex = hljs.regex;
  	  const ANNOTATION = {
  	    className: 'meta',
  	    begin: '@[A-Za-z]+'
  	  };

  	  // used in strings for escaping/interpolation/substitution
  	  const SUBST = {
  	    className: 'subst',
  	    variants: [
  	      { begin: '\\$[A-Za-z0-9_]+' },
  	      {
  	        begin: /\$\{/,
  	        end: /\}/
  	      }
  	    ]
  	  };

  	  const STRING = {
  	    className: 'string',
  	    variants: [
  	      {
  	        begin: '"""',
  	        end: '"""'
  	      },
  	      {
  	        begin: '"',
  	        end: '"',
  	        illegal: '\\n',
  	        contains: [ hljs.BACKSLASH_ESCAPE ]
  	      },
  	      {
  	        begin: '[a-z]+"',
  	        end: '"',
  	        illegal: '\\n',
  	        contains: [
  	          hljs.BACKSLASH_ESCAPE,
  	          SUBST
  	        ]
  	      },
  	      {
  	        className: 'string',
  	        begin: '[a-z]+"""',
  	        end: '"""',
  	        contains: [ SUBST ],
  	        relevance: 10
  	      }
  	    ]

  	  };

  	  const TYPE = {
  	    className: 'type',
  	    begin: '\\b[A-Z][A-Za-z0-9_]*',
  	    relevance: 0
  	  };

  	  const NAME = {
  	    className: 'title',
  	    begin: /[^0-9\n\t "'(),.`{}\[\]:;][^\n\t "'(),.`{}\[\]:;]+|[^0-9\n\t "'(),.`{}\[\]:;=]/,
  	    relevance: 0
  	  };

  	  const CLASS = {
  	    className: 'class',
  	    beginKeywords: 'class object trait type',
  	    end: /[:={\[\n;]/,
  	    excludeEnd: true,
  	    contains: [
  	      hljs.C_LINE_COMMENT_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE,
  	      {
  	        beginKeywords: 'extends with',
  	        relevance: 10
  	      },
  	      {
  	        begin: /\[/,
  	        end: /\]/,
  	        excludeBegin: true,
  	        excludeEnd: true,
  	        relevance: 0,
  	        contains: [ TYPE ]
  	      },
  	      {
  	        className: 'params',
  	        begin: /\(/,
  	        end: /\)/,
  	        excludeBegin: true,
  	        excludeEnd: true,
  	        relevance: 0,
  	        contains: [ TYPE ]
  	      },
  	      NAME
  	    ]
  	  };

  	  const METHOD = {
  	    className: 'function',
  	    beginKeywords: 'def',
  	    end: regex.lookahead(/[:={\[(\n;]/),
  	    contains: [ NAME ]
  	  };

  	  const EXTENSION = {
  	    begin: [
  	      /^\s*/, // Is first token on the line
  	      'extension',
  	      /\s+(?=[[(])/, // followed by at least one space and `[` or `(`
  	    ],
  	    beginScope: { 2: "keyword", }
  	  };

  	  const END = {
  	    begin: [
  	      /^\s*/, // Is first token on the line
  	      /end/,
  	      /\s+/,
  	      /(extension\b)?/, // `extension` is the only marker that follows an `end` that cannot be captured by another rule.
  	    ],
  	    beginScope: {
  	      2: "keyword",
  	      4: "keyword",
  	    }
  	  };

  	  // TODO: use negative look-behind in future
  	  //       /(?<!\.)\binline(?=\s)/
  	  const INLINE_MODES = [
  	    { match: /\.inline\b/ },
  	    {
  	      begin: /\binline(?=\s)/,
  	      keywords: 'inline'
  	    }
  	  ];

  	  const USING_PARAM_CLAUSE = {
  	    begin: [
  	      /\(\s*/, // Opening `(` of a parameter or argument list
  	      /using/,
  	      /\s+(?!\))/, // Spaces not followed by `)`
  	    ],
  	    beginScope: { 2: "keyword", }
  	  };

  	  return {
  	    name: 'Scala',
  	    keywords: {
  	      literal: 'true false null',
  	      keyword: 'type yield lazy override def with val var sealed abstract private trait object if then forSome for while do throw finally protected extends import final return else break new catch super class case package default try this match continue throws implicit export enum given transparent'
  	    },
  	    contains: [
  	      hljs.C_LINE_COMMENT_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE,
  	      STRING,
  	      TYPE,
  	      METHOD,
  	      CLASS,
  	      hljs.C_NUMBER_MODE,
  	      EXTENSION,
  	      END,
  	      ...INLINE_MODES,
  	      USING_PARAM_CLAUSE,
  	      ANNOTATION
  	    ]
  	  };
  	}

  	scala_1 = scala;
  	return scala_1;
  }

  /*
  Language: Scheme
  Description: Scheme is a programming language in the Lisp family.
               (keywords based on http://community.schemewiki.org/?scheme-keywords)
  Author: JP Verkamp <me@jverkamp.com>
  Contributors: Ivan Sagalaev <maniac@softwaremaniacs.org>
  Origin: clojure.js
  Website: http://community.schemewiki.org/?what-is-scheme
  Category: lisp
  */

  var scheme_1;
  var hasRequiredScheme;

  function requireScheme () {
  	if (hasRequiredScheme) return scheme_1;
  	hasRequiredScheme = 1;
  	function scheme(hljs) {
  	  const SCHEME_IDENT_RE = '[^\\(\\)\\[\\]\\{\\}",\'`;#|\\\\\\s]+';
  	  const SCHEME_SIMPLE_NUMBER_RE = '(-|\\+)?\\d+([./]\\d+)?';
  	  const SCHEME_COMPLEX_NUMBER_RE = SCHEME_SIMPLE_NUMBER_RE + '[+\\-]' + SCHEME_SIMPLE_NUMBER_RE + 'i';
  	  const KEYWORDS = {
  	    $pattern: SCHEME_IDENT_RE,
  	    built_in:
  	      'case-lambda call/cc class define-class exit-handler field import '
  	      + 'inherit init-field interface let*-values let-values let/ec mixin '
  	      + 'opt-lambda override protect provide public rename require '
  	      + 'require-for-syntax syntax syntax-case syntax-error unit/sig unless '
  	      + 'when with-syntax and begin call-with-current-continuation '
  	      + 'call-with-input-file call-with-output-file case cond define '
  	      + 'define-syntax delay do dynamic-wind else for-each if lambda let let* '
  	      + 'let-syntax letrec letrec-syntax map or syntax-rules \' * + , ,@ - ... / '
  	      + '; < <= = => > >= ` abs acos angle append apply asin assoc assq assv atan '
  	      + 'boolean? caar cadr call-with-input-file call-with-output-file '
  	      + 'call-with-values car cdddar cddddr cdr ceiling char->integer '
  	      + 'char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? '
  	      + 'char-downcase char-lower-case? char-numeric? char-ready? char-upcase '
  	      + 'char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? '
  	      + 'char? close-input-port close-output-port complex? cons cos '
  	      + 'current-input-port current-output-port denominator display eof-object? '
  	      + 'eq? equal? eqv? eval even? exact->inexact exact? exp expt floor '
  	      + 'force gcd imag-part inexact->exact inexact? input-port? integer->char '
  	      + 'integer? interaction-environment lcm length list list->string '
  	      + 'list->vector list-ref list-tail list? load log magnitude make-polar '
  	      + 'make-rectangular make-string make-vector max member memq memv min '
  	      + 'modulo negative? newline not null-environment null? number->string '
  	      + 'number? numerator odd? open-input-file open-output-file output-port? '
  	      + 'pair? peek-char port? positive? procedure? quasiquote quote quotient '
  	      + 'rational? rationalize read read-char real-part real? remainder reverse '
  	      + 'round scheme-report-environment set! set-car! set-cdr! sin sqrt string '
  	      + 'string->list string->number string->symbol string-append string-ci<=? '
  	      + 'string-ci<? string-ci=? string-ci>=? string-ci>? string-copy '
  	      + 'string-fill! string-length string-ref string-set! string<=? string<? '
  	      + 'string=? string>=? string>? string? substring symbol->string symbol? '
  	      + 'tan transcript-off transcript-on truncate values vector '
  	      + 'vector->list vector-fill! vector-length vector-ref vector-set! '
  	      + 'with-input-from-file with-output-to-file write write-char zero?'
  	  };

  	  const LITERAL = {
  	    className: 'literal',
  	    begin: '(#t|#f|#\\\\' + SCHEME_IDENT_RE + '|#\\\\.)'
  	  };

  	  const NUMBER = {
  	    className: 'number',
  	    variants: [
  	      {
  	        begin: SCHEME_SIMPLE_NUMBER_RE,
  	        relevance: 0
  	      },
  	      {
  	        begin: SCHEME_COMPLEX_NUMBER_RE,
  	        relevance: 0
  	      },
  	      { begin: '#b[0-1]+(/[0-1]+)?' },
  	      { begin: '#o[0-7]+(/[0-7]+)?' },
  	      { begin: '#x[0-9a-f]+(/[0-9a-f]+)?' }
  	    ]
  	  };

  	  const STRING = hljs.QUOTE_STRING_MODE;

  	  const COMMENT_MODES = [
  	    hljs.COMMENT(
  	      ';',
  	      '$',
  	      { relevance: 0 }
  	    ),
  	    hljs.COMMENT('#\\|', '\\|#')
  	  ];

  	  const IDENT = {
  	    begin: SCHEME_IDENT_RE,
  	    relevance: 0
  	  };

  	  const QUOTED_IDENT = {
  	    className: 'symbol',
  	    begin: '\'' + SCHEME_IDENT_RE
  	  };

  	  const BODY = {
  	    endsWithParent: true,
  	    relevance: 0
  	  };

  	  const QUOTED_LIST = {
  	    variants: [
  	      { begin: /'/ },
  	      { begin: '`' }
  	    ],
  	    contains: [
  	      {
  	        begin: '\\(',
  	        end: '\\)',
  	        contains: [
  	          'self',
  	          LITERAL,
  	          STRING,
  	          NUMBER,
  	          IDENT,
  	          QUOTED_IDENT
  	        ]
  	      }
  	    ]
  	  };

  	  const NAME = {
  	    className: 'name',
  	    relevance: 0,
  	    begin: SCHEME_IDENT_RE,
  	    keywords: KEYWORDS
  	  };

  	  const LAMBDA = {
  	    begin: /lambda/,
  	    endsWithParent: true,
  	    returnBegin: true,
  	    contains: [
  	      NAME,
  	      {
  	        endsParent: true,
  	        variants: [
  	          {
  	            begin: /\(/,
  	            end: /\)/
  	          },
  	          {
  	            begin: /\[/,
  	            end: /\]/
  	          }
  	        ],
  	        contains: [ IDENT ]
  	      }
  	    ]
  	  };

  	  const LIST = {
  	    variants: [
  	      {
  	        begin: '\\(',
  	        end: '\\)'
  	      },
  	      {
  	        begin: '\\[',
  	        end: '\\]'
  	      }
  	    ],
  	    contains: [
  	      LAMBDA,
  	      NAME,
  	      BODY
  	    ]
  	  };

  	  BODY.contains = [
  	    LITERAL,
  	    NUMBER,
  	    STRING,
  	    IDENT,
  	    QUOTED_IDENT,
  	    QUOTED_LIST,
  	    LIST
  	  ].concat(COMMENT_MODES);

  	  return {
  	    name: 'Scheme',
  	    aliases: ['scm'],
  	    illegal: /\S/,
  	    contains: [
  	      hljs.SHEBANG(),
  	      NUMBER,
  	      STRING,
  	      QUOTED_IDENT,
  	      QUOTED_LIST,
  	      LIST
  	    ].concat(COMMENT_MODES)
  	  };
  	}

  	scheme_1 = scheme;
  	return scheme_1;
  }

  /*
  Language: Scilab
  Author: Sylvestre Ledru <sylvestre.ledru@scilab-enterprises.com>
  Origin: matlab.js
  Description: Scilab is a port from Matlab
  Website: https://www.scilab.org
  Category: scientific
  */

  var scilab_1;
  var hasRequiredScilab;

  function requireScilab () {
  	if (hasRequiredScilab) return scilab_1;
  	hasRequiredScilab = 1;
  	function scilab(hljs) {
  	  const COMMON_CONTAINS = [
  	    hljs.C_NUMBER_MODE,
  	    {
  	      className: 'string',
  	      begin: '\'|\"',
  	      end: '\'|\"',
  	      contains: [
  	        hljs.BACKSLASH_ESCAPE,
  	        { begin: '\'\'' }
  	      ]
  	    }
  	  ];

  	  return {
  	    name: 'Scilab',
  	    aliases: [ 'sci' ],
  	    keywords: {
  	      $pattern: /%?\w+/,
  	      keyword: 'abort break case clear catch continue do elseif else endfunction end for function '
  	        + 'global if pause return resume select try then while',
  	      literal:
  	        '%f %F %t %T %pi %eps %inf %nan %e %i %z %s',
  	      built_in: // Scilab has more than 2000 functions. Just list the most commons
  	       'abs and acos asin atan ceil cd chdir clearglobal cosh cos cumprod deff disp error '
  	       + 'exec execstr exists exp eye gettext floor fprintf fread fsolve imag isdef isempty '
  	       + 'isinfisnan isvector lasterror length load linspace list listfiles log10 log2 log '
  	       + 'max min msprintf mclose mopen ones or pathconvert poly printf prod pwd rand real '
  	       + 'round sinh sin size gsort sprintf sqrt strcat strcmps tring sum system tanh tan '
  	       + 'type typename warning zeros matrix'
  	    },
  	    illegal: '("|#|/\\*|\\s+/\\w+)',
  	    contains: [
  	      {
  	        className: 'function',
  	        beginKeywords: 'function',
  	        end: '$',
  	        contains: [
  	          hljs.UNDERSCORE_TITLE_MODE,
  	          {
  	            className: 'params',
  	            begin: '\\(',
  	            end: '\\)'
  	          }
  	        ]
  	      },
  	      // seems to be a guard against [ident]' or [ident].
  	      // perhaps to prevent attributes from flagging as keywords?
  	      {
  	        begin: '[a-zA-Z_][a-zA-Z_0-9]*[\\.\']+',
  	        relevance: 0
  	      },
  	      {
  	        begin: '\\[',
  	        end: '\\][\\.\']*',
  	        relevance: 0,
  	        contains: COMMON_CONTAINS
  	      },
  	      hljs.COMMENT('//', '$')
  	    ].concat(COMMON_CONTAINS)
  	  };
  	}

  	scilab_1 = scilab;
  	return scilab_1;
  }

  var scss_1;
  var hasRequiredScss;

  function requireScss () {
  	if (hasRequiredScss) return scss_1;
  	hasRequiredScss = 1;
  	const MODES = (hljs) => {
  	  return {
  	    IMPORTANT: {
  	      scope: 'meta',
  	      begin: '!important'
  	    },
  	    BLOCK_COMMENT: hljs.C_BLOCK_COMMENT_MODE,
  	    HEXCOLOR: {
  	      scope: 'number',
  	      begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/
  	    },
  	    FUNCTION_DISPATCH: {
  	      className: "built_in",
  	      begin: /[\w-]+(?=\()/
  	    },
  	    ATTRIBUTE_SELECTOR_MODE: {
  	      scope: 'selector-attr',
  	      begin: /\[/,
  	      end: /\]/,
  	      illegal: '$',
  	      contains: [
  	        hljs.APOS_STRING_MODE,
  	        hljs.QUOTE_STRING_MODE
  	      ]
  	    },
  	    CSS_NUMBER_MODE: {
  	      scope: 'number',
  	      begin: hljs.NUMBER_RE + '(' +
  	        '%|em|ex|ch|rem' +
  	        '|vw|vh|vmin|vmax' +
  	        '|cm|mm|in|pt|pc|px' +
  	        '|deg|grad|rad|turn' +
  	        '|s|ms' +
  	        '|Hz|kHz' +
  	        '|dpi|dpcm|dppx' +
  	        ')?',
  	      relevance: 0
  	    },
  	    CSS_VARIABLE: {
  	      className: "attr",
  	      begin: /--[A-Za-z][A-Za-z0-9_-]*/
  	    }
  	  };
  	};

  	const TAGS = [
  	  'a',
  	  'abbr',
  	  'address',
  	  'article',
  	  'aside',
  	  'audio',
  	  'b',
  	  'blockquote',
  	  'body',
  	  'button',
  	  'canvas',
  	  'caption',
  	  'cite',
  	  'code',
  	  'dd',
  	  'del',
  	  'details',
  	  'dfn',
  	  'div',
  	  'dl',
  	  'dt',
  	  'em',
  	  'fieldset',
  	  'figcaption',
  	  'figure',
  	  'footer',
  	  'form',
  	  'h1',
  	  'h2',
  	  'h3',
  	  'h4',
  	  'h5',
  	  'h6',
  	  'header',
  	  'hgroup',
  	  'html',
  	  'i',
  	  'iframe',
  	  'img',
  	  'input',
  	  'ins',
  	  'kbd',
  	  'label',
  	  'legend',
  	  'li',
  	  'main',
  	  'mark',
  	  'menu',
  	  'nav',
  	  'object',
  	  'ol',
  	  'p',
  	  'q',
  	  'quote',
  	  'samp',
  	  'section',
  	  'span',
  	  'strong',
  	  'summary',
  	  'sup',
  	  'table',
  	  'tbody',
  	  'td',
  	  'textarea',
  	  'tfoot',
  	  'th',
  	  'thead',
  	  'time',
  	  'tr',
  	  'ul',
  	  'var',
  	  'video'
  	];

  	const MEDIA_FEATURES = [
  	  'any-hover',
  	  'any-pointer',
  	  'aspect-ratio',
  	  'color',
  	  'color-gamut',
  	  'color-index',
  	  'device-aspect-ratio',
  	  'device-height',
  	  'device-width',
  	  'display-mode',
  	  'forced-colors',
  	  'grid',
  	  'height',
  	  'hover',
  	  'inverted-colors',
  	  'monochrome',
  	  'orientation',
  	  'overflow-block',
  	  'overflow-inline',
  	  'pointer',
  	  'prefers-color-scheme',
  	  'prefers-contrast',
  	  'prefers-reduced-motion',
  	  'prefers-reduced-transparency',
  	  'resolution',
  	  'scan',
  	  'scripting',
  	  'update',
  	  'width',
  	  // TODO: find a better solution?
  	  'min-width',
  	  'max-width',
  	  'min-height',
  	  'max-height'
  	];

  	// https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes
  	const PSEUDO_CLASSES = [
  	  'active',
  	  'any-link',
  	  'blank',
  	  'checked',
  	  'current',
  	  'default',
  	  'defined',
  	  'dir', // dir()
  	  'disabled',
  	  'drop',
  	  'empty',
  	  'enabled',
  	  'first',
  	  'first-child',
  	  'first-of-type',
  	  'fullscreen',
  	  'future',
  	  'focus',
  	  'focus-visible',
  	  'focus-within',
  	  'has', // has()
  	  'host', // host or host()
  	  'host-context', // host-context()
  	  'hover',
  	  'indeterminate',
  	  'in-range',
  	  'invalid',
  	  'is', // is()
  	  'lang', // lang()
  	  'last-child',
  	  'last-of-type',
  	  'left',
  	  'link',
  	  'local-link',
  	  'not', // not()
  	  'nth-child', // nth-child()
  	  'nth-col', // nth-col()
  	  'nth-last-child', // nth-last-child()
  	  'nth-last-col', // nth-last-col()
  	  'nth-last-of-type', //nth-last-of-type()
  	  'nth-of-type', //nth-of-type()
  	  'only-child',
  	  'only-of-type',
  	  'optional',
  	  'out-of-range',
  	  'past',
  	  'placeholder-shown',
  	  'read-only',
  	  'read-write',
  	  'required',
  	  'right',
  	  'root',
  	  'scope',
  	  'target',
  	  'target-within',
  	  'user-invalid',
  	  'valid',
  	  'visited',
  	  'where' // where()
  	];

  	// https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements
  	const PSEUDO_ELEMENTS = [
  	  'after',
  	  'backdrop',
  	  'before',
  	  'cue',
  	  'cue-region',
  	  'first-letter',
  	  'first-line',
  	  'grammar-error',
  	  'marker',
  	  'part',
  	  'placeholder',
  	  'selection',
  	  'slotted',
  	  'spelling-error'
  	];

  	const ATTRIBUTES = [
  	  'align-content',
  	  'align-items',
  	  'align-self',
  	  'all',
  	  'animation',
  	  'animation-delay',
  	  'animation-direction',
  	  'animation-duration',
  	  'animation-fill-mode',
  	  'animation-iteration-count',
  	  'animation-name',
  	  'animation-play-state',
  	  'animation-timing-function',
  	  'backface-visibility',
  	  'background',
  	  'background-attachment',
  	  'background-blend-mode',
  	  'background-clip',
  	  'background-color',
  	  'background-image',
  	  'background-origin',
  	  'background-position',
  	  'background-repeat',
  	  'background-size',
  	  'block-size',
  	  'border',
  	  'border-block',
  	  'border-block-color',
  	  'border-block-end',
  	  'border-block-end-color',
  	  'border-block-end-style',
  	  'border-block-end-width',
  	  'border-block-start',
  	  'border-block-start-color',
  	  'border-block-start-style',
  	  'border-block-start-width',
  	  'border-block-style',
  	  'border-block-width',
  	  'border-bottom',
  	  'border-bottom-color',
  	  'border-bottom-left-radius',
  	  'border-bottom-right-radius',
  	  'border-bottom-style',
  	  'border-bottom-width',
  	  'border-collapse',
  	  'border-color',
  	  'border-image',
  	  'border-image-outset',
  	  'border-image-repeat',
  	  'border-image-slice',
  	  'border-image-source',
  	  'border-image-width',
  	  'border-inline',
  	  'border-inline-color',
  	  'border-inline-end',
  	  'border-inline-end-color',
  	  'border-inline-end-style',
  	  'border-inline-end-width',
  	  'border-inline-start',
  	  'border-inline-start-color',
  	  'border-inline-start-style',
  	  'border-inline-start-width',
  	  'border-inline-style',
  	  'border-inline-width',
  	  'border-left',
  	  'border-left-color',
  	  'border-left-style',
  	  'border-left-width',
  	  'border-radius',
  	  'border-right',
  	  'border-right-color',
  	  'border-right-style',
  	  'border-right-width',
  	  'border-spacing',
  	  'border-style',
  	  'border-top',
  	  'border-top-color',
  	  'border-top-left-radius',
  	  'border-top-right-radius',
  	  'border-top-style',
  	  'border-top-width',
  	  'border-width',
  	  'bottom',
  	  'box-decoration-break',
  	  'box-shadow',
  	  'box-sizing',
  	  'break-after',
  	  'break-before',
  	  'break-inside',
  	  'caption-side',
  	  'caret-color',
  	  'clear',
  	  'clip',
  	  'clip-path',
  	  'clip-rule',
  	  'color',
  	  'column-count',
  	  'column-fill',
  	  'column-gap',
  	  'column-rule',
  	  'column-rule-color',
  	  'column-rule-style',
  	  'column-rule-width',
  	  'column-span',
  	  'column-width',
  	  'columns',
  	  'contain',
  	  'content',
  	  'content-visibility',
  	  'counter-increment',
  	  'counter-reset',
  	  'cue',
  	  'cue-after',
  	  'cue-before',
  	  'cursor',
  	  'direction',
  	  'display',
  	  'empty-cells',
  	  'filter',
  	  'flex',
  	  'flex-basis',
  	  'flex-direction',
  	  'flex-flow',
  	  'flex-grow',
  	  'flex-shrink',
  	  'flex-wrap',
  	  'float',
  	  'flow',
  	  'font',
  	  'font-display',
  	  'font-family',
  	  'font-feature-settings',
  	  'font-kerning',
  	  'font-language-override',
  	  'font-size',
  	  'font-size-adjust',
  	  'font-smoothing',
  	  'font-stretch',
  	  'font-style',
  	  'font-synthesis',
  	  'font-variant',
  	  'font-variant-caps',
  	  'font-variant-east-asian',
  	  'font-variant-ligatures',
  	  'font-variant-numeric',
  	  'font-variant-position',
  	  'font-variation-settings',
  	  'font-weight',
  	  'gap',
  	  'glyph-orientation-vertical',
  	  'grid',
  	  'grid-area',
  	  'grid-auto-columns',
  	  'grid-auto-flow',
  	  'grid-auto-rows',
  	  'grid-column',
  	  'grid-column-end',
  	  'grid-column-start',
  	  'grid-gap',
  	  'grid-row',
  	  'grid-row-end',
  	  'grid-row-start',
  	  'grid-template',
  	  'grid-template-areas',
  	  'grid-template-columns',
  	  'grid-template-rows',
  	  'hanging-punctuation',
  	  'height',
  	  'hyphens',
  	  'icon',
  	  'image-orientation',
  	  'image-rendering',
  	  'image-resolution',
  	  'ime-mode',
  	  'inline-size',
  	  'isolation',
  	  'justify-content',
  	  'left',
  	  'letter-spacing',
  	  'line-break',
  	  'line-height',
  	  'list-style',
  	  'list-style-image',
  	  'list-style-position',
  	  'list-style-type',
  	  'margin',
  	  'margin-block',
  	  'margin-block-end',
  	  'margin-block-start',
  	  'margin-bottom',
  	  'margin-inline',
  	  'margin-inline-end',
  	  'margin-inline-start',
  	  'margin-left',
  	  'margin-right',
  	  'margin-top',
  	  'marks',
  	  'mask',
  	  'mask-border',
  	  'mask-border-mode',
  	  'mask-border-outset',
  	  'mask-border-repeat',
  	  'mask-border-slice',
  	  'mask-border-source',
  	  'mask-border-width',
  	  'mask-clip',
  	  'mask-composite',
  	  'mask-image',
  	  'mask-mode',
  	  'mask-origin',
  	  'mask-position',
  	  'mask-repeat',
  	  'mask-size',
  	  'mask-type',
  	  'max-block-size',
  	  'max-height',
  	  'max-inline-size',
  	  'max-width',
  	  'min-block-size',
  	  'min-height',
  	  'min-inline-size',
  	  'min-width',
  	  'mix-blend-mode',
  	  'nav-down',
  	  'nav-index',
  	  'nav-left',
  	  'nav-right',
  	  'nav-up',
  	  'none',
  	  'normal',
  	  'object-fit',
  	  'object-position',
  	  'opacity',
  	  'order',
  	  'orphans',
  	  'outline',
  	  'outline-color',
  	  'outline-offset',
  	  'outline-style',
  	  'outline-width',
  	  'overflow',
  	  'overflow-wrap',
  	  'overflow-x',
  	  'overflow-y',
  	  'padding',
  	  'padding-block',
  	  'padding-block-end',
  	  'padding-block-start',
  	  'padding-bottom',
  	  'padding-inline',
  	  'padding-inline-end',
  	  'padding-inline-start',
  	  'padding-left',
  	  'padding-right',
  	  'padding-top',
  	  'page-break-after',
  	  'page-break-before',
  	  'page-break-inside',
  	  'pause',
  	  'pause-after',
  	  'pause-before',
  	  'perspective',
  	  'perspective-origin',
  	  'pointer-events',
  	  'position',
  	  'quotes',
  	  'resize',
  	  'rest',
  	  'rest-after',
  	  'rest-before',
  	  'right',
  	  'row-gap',
  	  'scroll-margin',
  	  'scroll-margin-block',
  	  'scroll-margin-block-end',
  	  'scroll-margin-block-start',
  	  'scroll-margin-bottom',
  	  'scroll-margin-inline',
  	  'scroll-margin-inline-end',
  	  'scroll-margin-inline-start',
  	  'scroll-margin-left',
  	  'scroll-margin-right',
  	  'scroll-margin-top',
  	  'scroll-padding',
  	  'scroll-padding-block',
  	  'scroll-padding-block-end',
  	  'scroll-padding-block-start',
  	  'scroll-padding-bottom',
  	  'scroll-padding-inline',
  	  'scroll-padding-inline-end',
  	  'scroll-padding-inline-start',
  	  'scroll-padding-left',
  	  'scroll-padding-right',
  	  'scroll-padding-top',
  	  'scroll-snap-align',
  	  'scroll-snap-stop',
  	  'scroll-snap-type',
  	  'scrollbar-color',
  	  'scrollbar-gutter',
  	  'scrollbar-width',
  	  'shape-image-threshold',
  	  'shape-margin',
  	  'shape-outside',
  	  'speak',
  	  'speak-as',
  	  'src', // @font-face
  	  'tab-size',
  	  'table-layout',
  	  'text-align',
  	  'text-align-all',
  	  'text-align-last',
  	  'text-combine-upright',
  	  'text-decoration',
  	  'text-decoration-color',
  	  'text-decoration-line',
  	  'text-decoration-style',
  	  'text-emphasis',
  	  'text-emphasis-color',
  	  'text-emphasis-position',
  	  'text-emphasis-style',
  	  'text-indent',
  	  'text-justify',
  	  'text-orientation',
  	  'text-overflow',
  	  'text-rendering',
  	  'text-shadow',
  	  'text-transform',
  	  'text-underline-position',
  	  'top',
  	  'transform',
  	  'transform-box',
  	  'transform-origin',
  	  'transform-style',
  	  'transition',
  	  'transition-delay',
  	  'transition-duration',
  	  'transition-property',
  	  'transition-timing-function',
  	  'unicode-bidi',
  	  'vertical-align',
  	  'visibility',
  	  'voice-balance',
  	  'voice-duration',
  	  'voice-family',
  	  'voice-pitch',
  	  'voice-range',
  	  'voice-rate',
  	  'voice-stress',
  	  'voice-volume',
  	  'white-space',
  	  'widows',
  	  'width',
  	  'will-change',
  	  'word-break',
  	  'word-spacing',
  	  'word-wrap',
  	  'writing-mode',
  	  'z-index'
  	  // reverse makes sure longer attributes `font-weight` are matched fully
  	  // instead of getting false positives on say `font`
  	].reverse();

  	/*
  	Language: SCSS
  	Description: Scss is an extension of the syntax of CSS.
  	Author: Kurt Emch <kurt@kurtemch.com>
  	Website: https://sass-lang.com
  	Category: common, css, web
  	*/

  	/** @type LanguageFn */
  	function scss(hljs) {
  	  const modes = MODES(hljs);
  	  const PSEUDO_ELEMENTS$1 = PSEUDO_ELEMENTS;
  	  const PSEUDO_CLASSES$1 = PSEUDO_CLASSES;

  	  const AT_IDENTIFIER = '@[a-z-]+'; // @font-face
  	  const AT_MODIFIERS = "and or not only";
  	  const IDENT_RE = '[a-zA-Z-][a-zA-Z0-9_-]*';
  	  const VARIABLE = {
  	    className: 'variable',
  	    begin: '(\\$' + IDENT_RE + ')\\b',
  	    relevance: 0
  	  };

  	  return {
  	    name: 'SCSS',
  	    case_insensitive: true,
  	    illegal: '[=/|\']',
  	    contains: [
  	      hljs.C_LINE_COMMENT_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE,
  	      // to recognize keyframe 40% etc which are outside the scope of our
  	      // attribute value mode
  	      modes.CSS_NUMBER_MODE,
  	      {
  	        className: 'selector-id',
  	        begin: '#[A-Za-z0-9_-]+',
  	        relevance: 0
  	      },
  	      {
  	        className: 'selector-class',
  	        begin: '\\.[A-Za-z0-9_-]+',
  	        relevance: 0
  	      },
  	      modes.ATTRIBUTE_SELECTOR_MODE,
  	      {
  	        className: 'selector-tag',
  	        begin: '\\b(' + TAGS.join('|') + ')\\b',
  	        // was there, before, but why?
  	        relevance: 0
  	      },
  	      {
  	        className: 'selector-pseudo',
  	        begin: ':(' + PSEUDO_CLASSES$1.join('|') + ')'
  	      },
  	      {
  	        className: 'selector-pseudo',
  	        begin: ':(:)?(' + PSEUDO_ELEMENTS$1.join('|') + ')'
  	      },
  	      VARIABLE,
  	      { // pseudo-selector params
  	        begin: /\(/,
  	        end: /\)/,
  	        contains: [ modes.CSS_NUMBER_MODE ]
  	      },
  	      modes.CSS_VARIABLE,
  	      {
  	        className: 'attribute',
  	        begin: '\\b(' + ATTRIBUTES.join('|') + ')\\b'
  	      },
  	      { begin: '\\b(whitespace|wait|w-resize|visible|vertical-text|vertical-ideographic|uppercase|upper-roman|upper-alpha|underline|transparent|top|thin|thick|text|text-top|text-bottom|tb-rl|table-header-group|table-footer-group|sw-resize|super|strict|static|square|solid|small-caps|separate|se-resize|scroll|s-resize|rtl|row-resize|ridge|right|repeat|repeat-y|repeat-x|relative|progress|pointer|overline|outside|outset|oblique|nowrap|not-allowed|normal|none|nw-resize|no-repeat|no-drop|newspaper|ne-resize|n-resize|move|middle|medium|ltr|lr-tb|lowercase|lower-roman|lower-alpha|loose|list-item|line|line-through|line-edge|lighter|left|keep-all|justify|italic|inter-word|inter-ideograph|inside|inset|inline|inline-block|inherit|inactive|ideograph-space|ideograph-parenthesis|ideograph-numeric|ideograph-alpha|horizontal|hidden|help|hand|groove|fixed|ellipsis|e-resize|double|dotted|distribute|distribute-space|distribute-letter|distribute-all-lines|disc|disabled|default|decimal|dashed|crosshair|collapse|col-resize|circle|char|center|capitalize|break-word|break-all|bottom|both|bolder|bold|block|bidi-override|below|baseline|auto|always|all-scroll|absolute|table|table-cell)\\b' },
  	      {
  	        begin: /:/,
  	        end: /[;}{]/,
  	        relevance: 0,
  	        contains: [
  	          modes.BLOCK_COMMENT,
  	          VARIABLE,
  	          modes.HEXCOLOR,
  	          modes.CSS_NUMBER_MODE,
  	          hljs.QUOTE_STRING_MODE,
  	          hljs.APOS_STRING_MODE,
  	          modes.IMPORTANT,
  	          modes.FUNCTION_DISPATCH
  	        ]
  	      },
  	      // matching these here allows us to treat them more like regular CSS
  	      // rules so everything between the {} gets regular rule highlighting,
  	      // which is what we want for page and font-face
  	      {
  	        begin: '@(page|font-face)',
  	        keywords: {
  	          $pattern: AT_IDENTIFIER,
  	          keyword: '@page @font-face'
  	        }
  	      },
  	      {
  	        begin: '@',
  	        end: '[{;]',
  	        returnBegin: true,
  	        keywords: {
  	          $pattern: /[a-z-]+/,
  	          keyword: AT_MODIFIERS,
  	          attribute: MEDIA_FEATURES.join(" ")
  	        },
  	        contains: [
  	          {
  	            begin: AT_IDENTIFIER,
  	            className: "keyword"
  	          },
  	          {
  	            begin: /[a-z-]+(?=:)/,
  	            className: "attribute"
  	          },
  	          VARIABLE,
  	          hljs.QUOTE_STRING_MODE,
  	          hljs.APOS_STRING_MODE,
  	          modes.HEXCOLOR,
  	          modes.CSS_NUMBER_MODE
  	        ]
  	      },
  	      modes.FUNCTION_DISPATCH
  	    ]
  	  };
  	}

  	scss_1 = scss;
  	return scss_1;
  }

  /*
  Language: Shell Session
  Requires: bash.js
  Author: TSUYUSATO Kitsune <make.just.on@gmail.com>
  Category: common
  Audit: 2020
  */

  var shell_1;
  var hasRequiredShell;

  function requireShell () {
  	if (hasRequiredShell) return shell_1;
  	hasRequiredShell = 1;
  	/** @type LanguageFn */
  	function shell(hljs) {
  	  return {
  	    name: 'Shell Session',
  	    aliases: [
  	      'console',
  	      'shellsession'
  	    ],
  	    contains: [
  	      {
  	        className: 'meta.prompt',
  	        // We cannot add \s (spaces) in the regular expression otherwise it will be too broad and produce unexpected result.
  	        // For instance, in the following example, it would match "echo /path/to/home >" as a prompt:
  	        // echo /path/to/home > t.exe
  	        begin: /^\s{0,3}[/~\w\d[\]()@-]*[>%$#][ ]?/,
  	        starts: {
  	          end: /[^\\](?=\s*$)/,
  	          subLanguage: 'bash'
  	        }
  	      }
  	    ]
  	  };
  	}

  	shell_1 = shell;
  	return shell_1;
  }

  /*
  Language: Smali
  Author: Dennis Titze <dennis.titze@gmail.com>
  Description: Basic Smali highlighting
  Website: https://github.com/JesusFreke/smali
  */

  var smali_1;
  var hasRequiredSmali;

  function requireSmali () {
  	if (hasRequiredSmali) return smali_1;
  	hasRequiredSmali = 1;
  	function smali(hljs) {
  	  const smali_instr_low_prio = [
  	    'add',
  	    'and',
  	    'cmp',
  	    'cmpg',
  	    'cmpl',
  	    'const',
  	    'div',
  	    'double',
  	    'float',
  	    'goto',
  	    'if',
  	    'int',
  	    'long',
  	    'move',
  	    'mul',
  	    'neg',
  	    'new',
  	    'nop',
  	    'not',
  	    'or',
  	    'rem',
  	    'return',
  	    'shl',
  	    'shr',
  	    'sput',
  	    'sub',
  	    'throw',
  	    'ushr',
  	    'xor'
  	  ];
  	  const smali_instr_high_prio = [
  	    'aget',
  	    'aput',
  	    'array',
  	    'check',
  	    'execute',
  	    'fill',
  	    'filled',
  	    'goto/16',
  	    'goto/32',
  	    'iget',
  	    'instance',
  	    'invoke',
  	    'iput',
  	    'monitor',
  	    'packed',
  	    'sget',
  	    'sparse'
  	  ];
  	  const smali_keywords = [
  	    'transient',
  	    'constructor',
  	    'abstract',
  	    'final',
  	    'synthetic',
  	    'public',
  	    'private',
  	    'protected',
  	    'static',
  	    'bridge',
  	    'system'
  	  ];
  	  return {
  	    name: 'Smali',
  	    contains: [
  	      {
  	        className: 'string',
  	        begin: '"',
  	        end: '"',
  	        relevance: 0
  	      },
  	      hljs.COMMENT(
  	        '#',
  	        '$',
  	        { relevance: 0 }
  	      ),
  	      {
  	        className: 'keyword',
  	        variants: [
  	          { begin: '\\s*\\.end\\s[a-zA-Z0-9]*' },
  	          {
  	            begin: '^[ ]*\\.[a-zA-Z]*',
  	            relevance: 0
  	          },
  	          {
  	            begin: '\\s:[a-zA-Z_0-9]*',
  	            relevance: 0
  	          },
  	          { begin: '\\s(' + smali_keywords.join('|') + ')' }
  	        ]
  	      },
  	      {
  	        className: 'built_in',
  	        variants: [
  	          { begin: '\\s(' + smali_instr_low_prio.join('|') + ')\\s' },
  	          {
  	            begin: '\\s(' + smali_instr_low_prio.join('|') + ')((-|/)[a-zA-Z0-9]+)+\\s',
  	            relevance: 10
  	          },
  	          {
  	            begin: '\\s(' + smali_instr_high_prio.join('|') + ')((-|/)[a-zA-Z0-9]+)*\\s',
  	            relevance: 10
  	          }
  	        ]
  	      },
  	      {
  	        className: 'class',
  	        begin: 'L[^\(;:\n]*;',
  	        relevance: 0
  	      },
  	      { begin: '[vp][0-9]+' }
  	    ]
  	  };
  	}

  	smali_1 = smali;
  	return smali_1;
  }

  /*
  Language: Smalltalk
  Description: Smalltalk is an object-oriented, dynamically typed reflective programming language.
  Author: Vladimir Gubarkov <xonixx@gmail.com>
  Website: https://en.wikipedia.org/wiki/Smalltalk
  */

  var smalltalk_1;
  var hasRequiredSmalltalk;

  function requireSmalltalk () {
  	if (hasRequiredSmalltalk) return smalltalk_1;
  	hasRequiredSmalltalk = 1;
  	function smalltalk(hljs) {
  	  const VAR_IDENT_RE = '[a-z][a-zA-Z0-9_]*';
  	  const CHAR = {
  	    className: 'string',
  	    begin: '\\$.{1}'
  	  };
  	  const SYMBOL = {
  	    className: 'symbol',
  	    begin: '#' + hljs.UNDERSCORE_IDENT_RE
  	  };
  	  return {
  	    name: 'Smalltalk',
  	    aliases: [ 'st' ],
  	    keywords: [
  	      "self",
  	      "super",
  	      "nil",
  	      "true",
  	      "false",
  	      "thisContext"
  	    ],
  	    contains: [
  	      hljs.COMMENT('"', '"'),
  	      hljs.APOS_STRING_MODE,
  	      {
  	        className: 'type',
  	        begin: '\\b[A-Z][A-Za-z0-9_]*',
  	        relevance: 0
  	      },
  	      {
  	        begin: VAR_IDENT_RE + ':',
  	        relevance: 0
  	      },
  	      hljs.C_NUMBER_MODE,
  	      SYMBOL,
  	      CHAR,
  	      {
  	        // This looks more complicated than needed to avoid combinatorial
  	        // explosion under V8. It effectively means `| var1 var2 ... |` with
  	        // whitespace adjacent to `|` being optional.
  	        begin: '\\|[ ]*' + VAR_IDENT_RE + '([ ]+' + VAR_IDENT_RE + ')*[ ]*\\|',
  	        returnBegin: true,
  	        end: /\|/,
  	        illegal: /\S/,
  	        contains: [ { begin: '(\\|[ ]*)?' + VAR_IDENT_RE } ]
  	      },
  	      {
  	        begin: '#\\(',
  	        end: '\\)',
  	        contains: [
  	          hljs.APOS_STRING_MODE,
  	          CHAR,
  	          hljs.C_NUMBER_MODE,
  	          SYMBOL
  	        ]
  	      }
  	    ]
  	  };
  	}

  	smalltalk_1 = smalltalk;
  	return smalltalk_1;
  }

  /*
  Language: SML (Standard ML)
  Author: Edwin Dalorzo <edwin@dalorzo.org>
  Description: SML language definition.
  Website: https://www.smlnj.org
  Origin: ocaml.js
  Category: functional
  */

  var sml_1;
  var hasRequiredSml;

  function requireSml () {
  	if (hasRequiredSml) return sml_1;
  	hasRequiredSml = 1;
  	function sml(hljs) {
  	  return {
  	    name: 'SML (Standard ML)',
  	    aliases: [ 'ml' ],
  	    keywords: {
  	      $pattern: '[a-z_]\\w*!?',
  	      keyword:
  	        /* according to Definition of Standard ML 97  */
  	        'abstype and andalso as case datatype do else end eqtype '
  	        + 'exception fn fun functor handle if in include infix infixr '
  	        + 'let local nonfix of op open orelse raise rec sharing sig '
  	        + 'signature struct structure then type val with withtype where while',
  	      built_in:
  	        /* built-in types according to basis library */
  	        'array bool char exn int list option order real ref string substring vector unit word',
  	      literal:
  	        'true false NONE SOME LESS EQUAL GREATER nil'
  	    },
  	    illegal: /\/\/|>>/,
  	    contains: [
  	      {
  	        className: 'literal',
  	        begin: /\[(\|\|)?\]|\(\)/,
  	        relevance: 0
  	      },
  	      hljs.COMMENT(
  	        '\\(\\*',
  	        '\\*\\)',
  	        { contains: [ 'self' ] }
  	      ),
  	      { /* type variable */
  	        className: 'symbol',
  	        begin: '\'[A-Za-z_](?!\')[\\w\']*'
  	        /* the grammar is ambiguous on how 'a'b should be interpreted but not the compiler */
  	      },
  	      { /* polymorphic variant */
  	        className: 'type',
  	        begin: '`[A-Z][\\w\']*'
  	      },
  	      { /* module or constructor */
  	        className: 'type',
  	        begin: '\\b[A-Z][\\w\']*',
  	        relevance: 0
  	      },
  	      { /* don't color identifiers, but safely catch all identifiers with ' */
  	        begin: '[a-z_]\\w*\'[\\w\']*' },
  	      hljs.inherit(hljs.APOS_STRING_MODE, {
  	        className: 'string',
  	        relevance: 0
  	      }),
  	      hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null }),
  	      {
  	        className: 'number',
  	        begin:
  	          '\\b(0[xX][a-fA-F0-9_]+[Lln]?|'
  	          + '0[oO][0-7_]+[Lln]?|'
  	          + '0[bB][01_]+[Lln]?|'
  	          + '[0-9][0-9_]*([Lln]|(\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)?)',
  	        relevance: 0
  	      },
  	      { begin: /[-=]>/ // relevance booster
  	      }
  	    ]
  	  };
  	}

  	sml_1 = sml;
  	return sml_1;
  }

  /*
  Language: SQF
  Author: Søren Enevoldsen <senevoldsen90@gmail.com>
  Contributors: Marvin Saignat <contact@zgmrvn.com>, Dedmen Miller <dedmen@dedmen.de>, Leopard20
  Description: Scripting language for the Arma game series
  Website: https://community.bistudio.com/wiki/SQF_syntax
  Category: scripting
  Last update: 07.01.2023, Arma 3 v2.11
  */

  var sqf_1;
  var hasRequiredSqf;

  function requireSqf () {
  	if (hasRequiredSqf) return sqf_1;
  	hasRequiredSqf = 1;
  	/*
  	////////////////////////////////////////////////////////////////////////////////////////////
  	  * Author: Leopard20
  	  
  	  * Description:
  	  This script can be used to dump all commands to the clipboard.
  	  Make sure you're using the Diag EXE to dump all of the commands.
  	  
  	  * How to use:
  	  Simply replace the _KEYWORDS and _LITERAL arrays with the one from this sqf.js file.
  	  Execute the script from the debug console.
  	  All commands will be copied to the clipboard.
  	////////////////////////////////////////////////////////////////////////////////////////////
  	_KEYWORDS = ['if'];                                                //Array of all KEYWORDS
  	_LITERALS = ['west'];                                              //Array of all LITERALS
  	_allCommands = createHashMap;
  	{
  	  _type = _x select [0,1];
  	  if (_type != "t") then {
  	    _command_lowercase = ((_x select [2]) splitString " ")#(((["n", "u", "b"] find _type) - 1) max 0);
  	    _command_uppercase = supportInfo ("i:" + _command_lowercase) # 0 # 2;
  	    _allCommands set [_command_lowercase, _command_uppercase];
  	  };
  	} forEach supportInfo "";
  	_allCommands = _allCommands toArray false;
  	_allCommands sort true;                                            //sort by lowercase
  	_allCommands = ((_allCommands apply {_x#1}) -_KEYWORDS)-_LITERALS; //remove KEYWORDS and LITERALS
  	copyToClipboard (str (_allCommands select {_x regexMatch "\w+"}) regexReplace ["""", "'"] regexReplace [",", ",\n"]);
  	*/

  	function sqf(hljs) {
  	  // In SQF, a local variable starts with _
  	  const VARIABLE = {
  	    className: 'variable',
  	    begin: /\b_+[a-zA-Z]\w*/
  	  };

  	  // In SQF, a function should fit myTag_fnc_myFunction pattern
  	  // https://community.bistudio.com/wiki/Functions_Library_(Arma_3)#Adding_a_Function
  	  const FUNCTION = {
  	    className: 'title',
  	    begin: /[a-zA-Z][a-zA-Z_0-9]*_fnc_[a-zA-Z_0-9]+/
  	  };

  	  // In SQF strings, quotes matching the start are escaped by adding a consecutive.
  	  // Example of single escaped quotes: " "" " and  ' '' '.
  	  const STRINGS = {
  	    className: 'string',
  	    variants: [
  	      {
  	        begin: '"',
  	        end: '"',
  	        contains: [
  	          {
  	            begin: '""',
  	            relevance: 0
  	          }
  	        ]
  	      },
  	      {
  	        begin: '\'',
  	        end: '\'',
  	        contains: [
  	          {
  	            begin: '\'\'',
  	            relevance: 0
  	          }
  	        ]
  	      }
  	    ]
  	  };

  	  const KEYWORDS = [
  	    'break',
  	    'breakWith',
  	    'breakOut',
  	    'breakTo',
  	    'case',
  	    'catch',
  	    'continue',
  	    'continueWith',
  	    'default',
  	    'do',
  	    'else',
  	    'exit',
  	    'exitWith',
  	    'for',
  	    'forEach',
  	    'from',
  	    'if',
  	    'local',
  	    'private',
  	    'switch',
  	    'step',
  	    'then',
  	    'throw',
  	    'to',
  	    'try',
  	    'waitUntil',
  	    'while',
  	    'with'
  	  ];

  	  const LITERAL = [
  	    'blufor',
  	    'civilian',
  	    'configNull',
  	    'controlNull',
  	    'displayNull',
  	    'diaryRecordNull',
  	    'east',
  	    'endl',
  	    'false',
  	    'grpNull',
  	    'independent',
  	    'lineBreak',
  	    'locationNull',
  	    'nil',
  	    'objNull',
  	    'opfor',
  	    'pi',
  	    'resistance',
  	    'scriptNull',
  	    'sideAmbientLife',
  	    'sideEmpty',
  	    'sideEnemy',
  	    'sideFriendly',
  	    'sideLogic',
  	    'sideUnknown',
  	    'taskNull',
  	    'teamMemberNull',
  	    'true',
  	    'west'
  	  ];

  	  const BUILT_IN = [
  	    'abs',
  	    'accTime',
  	    'acos',
  	    'action',
  	    'actionIDs',
  	    'actionKeys',
  	    'actionKeysEx',
  	    'actionKeysImages',
  	    'actionKeysNames',
  	    'actionKeysNamesArray',
  	    'actionName',
  	    'actionParams',
  	    'activateAddons',
  	    'activatedAddons',
  	    'activateKey',
  	    'activeTitleEffectParams',
  	    'add3DENConnection',
  	    'add3DENEventHandler',
  	    'add3DENLayer',
  	    'addAction',
  	    'addBackpack',
  	    'addBackpackCargo',
  	    'addBackpackCargoGlobal',
  	    'addBackpackGlobal',
  	    'addBinocularItem',
  	    'addCamShake',
  	    'addCuratorAddons',
  	    'addCuratorCameraArea',
  	    'addCuratorEditableObjects',
  	    'addCuratorEditingArea',
  	    'addCuratorPoints',
  	    'addEditorObject',
  	    'addEventHandler',
  	    'addForce',
  	    'addForceGeneratorRTD',
  	    'addGoggles',
  	    'addGroupIcon',
  	    'addHandgunItem',
  	    'addHeadgear',
  	    'addItem',
  	    'addItemCargo',
  	    'addItemCargoGlobal',
  	    'addItemPool',
  	    'addItemToBackpack',
  	    'addItemToUniform',
  	    'addItemToVest',
  	    'addLiveStats',
  	    'addMagazine',
  	    'addMagazineAmmoCargo',
  	    'addMagazineCargo',
  	    'addMagazineCargoGlobal',
  	    'addMagazineGlobal',
  	    'addMagazinePool',
  	    'addMagazines',
  	    'addMagazineTurret',
  	    'addMenu',
  	    'addMenuItem',
  	    'addMissionEventHandler',
  	    'addMPEventHandler',
  	    'addMusicEventHandler',
  	    'addonFiles',
  	    'addOwnedMine',
  	    'addPlayerScores',
  	    'addPrimaryWeaponItem',
  	    'addPublicVariableEventHandler',
  	    'addRating',
  	    'addResources',
  	    'addScore',
  	    'addScoreSide',
  	    'addSecondaryWeaponItem',
  	    'addSwitchableUnit',
  	    'addTeamMember',
  	    'addToRemainsCollector',
  	    'addTorque',
  	    'addUniform',
  	    'addUserActionEventHandler',
  	    'addVehicle',
  	    'addVest',
  	    'addWaypoint',
  	    'addWeapon',
  	    'addWeaponCargo',
  	    'addWeaponCargoGlobal',
  	    'addWeaponGlobal',
  	    'addWeaponItem',
  	    'addWeaponPool',
  	    'addWeaponTurret',
  	    'addWeaponWithAttachmentsCargo',
  	    'addWeaponWithAttachmentsCargoGlobal',
  	    'admin',
  	    'agent',
  	    'agents',
  	    'AGLToASL',
  	    'aimedAtTarget',
  	    'aimPos',
  	    'airDensityCurveRTD',
  	    'airDensityRTD',
  	    'airplaneThrottle',
  	    'airportSide',
  	    'AISFinishHeal',
  	    'alive',
  	    'all3DENEntities',
  	    'allActiveTitleEffects',
  	    'allAddonsInfo',
  	    'allAirports',
  	    'allControls',
  	    'allCurators',
  	    'allCutLayers',
  	    'allDead',
  	    'allDeadMen',
  	    'allDiaryRecords',
  	    'allDiarySubjects',
  	    'allDisplays',
  	    'allEnv3DSoundSources',
  	    'allGroups',
  	    'allLODs',
  	    'allMapMarkers',
  	    'allMines',
  	    'allMissionObjects',
  	    'allObjects',
  	    'allow3DMode',
  	    'allowCrewInImmobile',
  	    'allowCuratorLogicIgnoreAreas',
  	    'allowDamage',
  	    'allowDammage',
  	    'allowedService',
  	    'allowFileOperations',
  	    'allowFleeing',
  	    'allowGetIn',
  	    'allowService',
  	    'allowSprint',
  	    'allPlayers',
  	    'allSimpleObjects',
  	    'allSites',
  	    'allTurrets',
  	    'allUnits',
  	    'allUnitsUAV',
  	    'allUsers',
  	    'allVariables',
  	    'ambientTemperature',
  	    'ammo',
  	    'ammoOnPylon',
  	    'and',
  	    'animate',
  	    'animateBay',
  	    'animateDoor',
  	    'animatePylon',
  	    'animateSource',
  	    'animationNames',
  	    'animationPhase',
  	    'animationSourcePhase',
  	    'animationState',
  	    'apertureParams',
  	    'append',
  	    'apply',
  	    'armoryPoints',
  	    'arrayIntersect',
  	    'asin',
  	    'ASLToAGL',
  	    'ASLToATL',
  	    'assert',
  	    'assignAsCargo',
  	    'assignAsCargoIndex',
  	    'assignAsCommander',
  	    'assignAsDriver',
  	    'assignAsGunner',
  	    'assignAsTurret',
  	    'assignCurator',
  	    'assignedCargo',
  	    'assignedCommander',
  	    'assignedDriver',
  	    'assignedGroup',
  	    'assignedGunner',
  	    'assignedItems',
  	    'assignedTarget',
  	    'assignedTeam',
  	    'assignedVehicle',
  	    'assignedVehicleRole',
  	    'assignedVehicles',
  	    'assignItem',
  	    'assignTeam',
  	    'assignToAirport',
  	    'atan',
  	    'atan2',
  	    'atg',
  	    'ATLToASL',
  	    'attachedObject',
  	    'attachedObjects',
  	    'attachedTo',
  	    'attachObject',
  	    'attachTo',
  	    'attackEnabled',
  	    'awake',
  	    'backpack',
  	    'backpackCargo',
  	    'backpackContainer',
  	    'backpackItems',
  	    'backpackMagazines',
  	    'backpackSpaceFor',
  	    'behaviour',
  	    'benchmark',
  	    'bezierInterpolation',
  	    'binocular',
  	    'binocularItems',
  	    'binocularMagazine',
  	    'boundingBox',
  	    'boundingBoxReal',
  	    'boundingCenter',
  	    'brakesDisabled',
  	    'briefingName',
  	    'buildingExit',
  	    'buildingPos',
  	    'buldozer_EnableRoadDiag',
  	    'buldozer_IsEnabledRoadDiag',
  	    'buldozer_LoadNewRoads',
  	    'buldozer_reloadOperMap',
  	    'buttonAction',
  	    'buttonSetAction',
  	    'cadetMode',
  	    'calculatePath',
  	    'calculatePlayerVisibilityByFriendly',
  	    'call',
  	    'callExtension',
  	    'camCommand',
  	    'camCommit',
  	    'camCommitPrepared',
  	    'camCommitted',
  	    'camConstuctionSetParams',
  	    'camCreate',
  	    'camDestroy',
  	    'cameraEffect',
  	    'cameraEffectEnableHUD',
  	    'cameraInterest',
  	    'cameraOn',
  	    'cameraView',
  	    'campaignConfigFile',
  	    'camPreload',
  	    'camPreloaded',
  	    'camPrepareBank',
  	    'camPrepareDir',
  	    'camPrepareDive',
  	    'camPrepareFocus',
  	    'camPrepareFov',
  	    'camPrepareFovRange',
  	    'camPreparePos',
  	    'camPrepareRelPos',
  	    'camPrepareTarget',
  	    'camSetBank',
  	    'camSetDir',
  	    'camSetDive',
  	    'camSetFocus',
  	    'camSetFov',
  	    'camSetFovRange',
  	    'camSetPos',
  	    'camSetRelPos',
  	    'camSetTarget',
  	    'camTarget',
  	    'camUseNVG',
  	    'canAdd',
  	    'canAddItemToBackpack',
  	    'canAddItemToUniform',
  	    'canAddItemToVest',
  	    'cancelSimpleTaskDestination',
  	    'canDeployWeapon',
  	    'canFire',
  	    'canMove',
  	    'canSlingLoad',
  	    'canStand',
  	    'canSuspend',
  	    'canTriggerDynamicSimulation',
  	    'canUnloadInCombat',
  	    'canVehicleCargo',
  	    'captive',
  	    'captiveNum',
  	    'cbChecked',
  	    'cbSetChecked',
  	    'ceil',
  	    'channelEnabled',
  	    'cheatsEnabled',
  	    'checkAIFeature',
  	    'checkVisibility',
  	    'className',
  	    'clear3DENAttribute',
  	    'clear3DENInventory',
  	    'clearAllItemsFromBackpack',
  	    'clearBackpackCargo',
  	    'clearBackpackCargoGlobal',
  	    'clearForcesRTD',
  	    'clearGroupIcons',
  	    'clearItemCargo',
  	    'clearItemCargoGlobal',
  	    'clearItemPool',
  	    'clearMagazineCargo',
  	    'clearMagazineCargoGlobal',
  	    'clearMagazinePool',
  	    'clearOverlay',
  	    'clearRadio',
  	    'clearWeaponCargo',
  	    'clearWeaponCargoGlobal',
  	    'clearWeaponPool',
  	    'clientOwner',
  	    'closeDialog',
  	    'closeDisplay',
  	    'closeOverlay',
  	    'collapseObjectTree',
  	    'collect3DENHistory',
  	    'collectiveRTD',
  	    'collisionDisabledWith',
  	    'combatBehaviour',
  	    'combatMode',
  	    'commandArtilleryFire',
  	    'commandChat',
  	    'commander',
  	    'commandFire',
  	    'commandFollow',
  	    'commandFSM',
  	    'commandGetOut',
  	    'commandingMenu',
  	    'commandMove',
  	    'commandRadio',
  	    'commandStop',
  	    'commandSuppressiveFire',
  	    'commandTarget',
  	    'commandWatch',
  	    'comment',
  	    'commitOverlay',
  	    'compatibleItems',
  	    'compatibleMagazines',
  	    'compile',
  	    'compileFinal',
  	    'compileScript',
  	    'completedFSM',
  	    'composeText',
  	    'configClasses',
  	    'configFile',
  	    'configHierarchy',
  	    'configName',
  	    'configOf',
  	    'configProperties',
  	    'configSourceAddonList',
  	    'configSourceMod',
  	    'configSourceModList',
  	    'confirmSensorTarget',
  	    'connectTerminalToUAV',
  	    'connectToServer',
  	    'controlsGroupCtrl',
  	    'conversationDisabled',
  	    'copyFromClipboard',
  	    'copyToClipboard',
  	    'copyWaypoints',
  	    'cos',
  	    'count',
  	    'countEnemy',
  	    'countFriendly',
  	    'countSide',
  	    'countType',
  	    'countUnknown',
  	    'create3DENComposition',
  	    'create3DENEntity',
  	    'createAgent',
  	    'createCenter',
  	    'createDialog',
  	    'createDiaryLink',
  	    'createDiaryRecord',
  	    'createDiarySubject',
  	    'createDisplay',
  	    'createGearDialog',
  	    'createGroup',
  	    'createGuardedPoint',
  	    'createHashMap',
  	    'createHashMapFromArray',
  	    'createLocation',
  	    'createMarker',
  	    'createMarkerLocal',
  	    'createMenu',
  	    'createMine',
  	    'createMissionDisplay',
  	    'createMPCampaignDisplay',
  	    'createSimpleObject',
  	    'createSimpleTask',
  	    'createSite',
  	    'createSoundSource',
  	    'createTask',
  	    'createTeam',
  	    'createTrigger',
  	    'createUnit',
  	    'createVehicle',
  	    'createVehicleCrew',
  	    'createVehicleLocal',
  	    'crew',
  	    'ctAddHeader',
  	    'ctAddRow',
  	    'ctClear',
  	    'ctCurSel',
  	    'ctData',
  	    'ctFindHeaderRows',
  	    'ctFindRowHeader',
  	    'ctHeaderControls',
  	    'ctHeaderCount',
  	    'ctRemoveHeaders',
  	    'ctRemoveRows',
  	    'ctrlActivate',
  	    'ctrlAddEventHandler',
  	    'ctrlAngle',
  	    'ctrlAnimateModel',
  	    'ctrlAnimationPhaseModel',
  	    'ctrlAt',
  	    'ctrlAutoScrollDelay',
  	    'ctrlAutoScrollRewind',
  	    'ctrlAutoScrollSpeed',
  	    'ctrlBackgroundColor',
  	    'ctrlChecked',
  	    'ctrlClassName',
  	    'ctrlCommit',
  	    'ctrlCommitted',
  	    'ctrlCreate',
  	    'ctrlDelete',
  	    'ctrlEnable',
  	    'ctrlEnabled',
  	    'ctrlFade',
  	    'ctrlFontHeight',
  	    'ctrlForegroundColor',
  	    'ctrlHTMLLoaded',
  	    'ctrlIDC',
  	    'ctrlIDD',
  	    'ctrlMapAnimAdd',
  	    'ctrlMapAnimClear',
  	    'ctrlMapAnimCommit',
  	    'ctrlMapAnimDone',
  	    'ctrlMapCursor',
  	    'ctrlMapMouseOver',
  	    'ctrlMapPosition',
  	    'ctrlMapScale',
  	    'ctrlMapScreenToWorld',
  	    'ctrlMapSetPosition',
  	    'ctrlMapWorldToScreen',
  	    'ctrlModel',
  	    'ctrlModelDirAndUp',
  	    'ctrlModelScale',
  	    'ctrlMousePosition',
  	    'ctrlParent',
  	    'ctrlParentControlsGroup',
  	    'ctrlPosition',
  	    'ctrlRemoveAllEventHandlers',
  	    'ctrlRemoveEventHandler',
  	    'ctrlScale',
  	    'ctrlScrollValues',
  	    'ctrlSetActiveColor',
  	    'ctrlSetAngle',
  	    'ctrlSetAutoScrollDelay',
  	    'ctrlSetAutoScrollRewind',
  	    'ctrlSetAutoScrollSpeed',
  	    'ctrlSetBackgroundColor',
  	    'ctrlSetChecked',
  	    'ctrlSetDisabledColor',
  	    'ctrlSetEventHandler',
  	    'ctrlSetFade',
  	    'ctrlSetFocus',
  	    'ctrlSetFont',
  	    'ctrlSetFontH1',
  	    'ctrlSetFontH1B',
  	    'ctrlSetFontH2',
  	    'ctrlSetFontH2B',
  	    'ctrlSetFontH3',
  	    'ctrlSetFontH3B',
  	    'ctrlSetFontH4',
  	    'ctrlSetFontH4B',
  	    'ctrlSetFontH5',
  	    'ctrlSetFontH5B',
  	    'ctrlSetFontH6',
  	    'ctrlSetFontH6B',
  	    'ctrlSetFontHeight',
  	    'ctrlSetFontHeightH1',
  	    'ctrlSetFontHeightH2',
  	    'ctrlSetFontHeightH3',
  	    'ctrlSetFontHeightH4',
  	    'ctrlSetFontHeightH5',
  	    'ctrlSetFontHeightH6',
  	    'ctrlSetFontHeightSecondary',
  	    'ctrlSetFontP',
  	    'ctrlSetFontPB',
  	    'ctrlSetFontSecondary',
  	    'ctrlSetForegroundColor',
  	    'ctrlSetModel',
  	    'ctrlSetModelDirAndUp',
  	    'ctrlSetModelScale',
  	    'ctrlSetMousePosition',
  	    'ctrlSetPixelPrecision',
  	    'ctrlSetPosition',
  	    'ctrlSetPositionH',
  	    'ctrlSetPositionW',
  	    'ctrlSetPositionX',
  	    'ctrlSetPositionY',
  	    'ctrlSetScale',
  	    'ctrlSetScrollValues',
  	    'ctrlSetShadow',
  	    'ctrlSetStructuredText',
  	    'ctrlSetText',
  	    'ctrlSetTextColor',
  	    'ctrlSetTextColorSecondary',
  	    'ctrlSetTextSecondary',
  	    'ctrlSetTextSelection',
  	    'ctrlSetTooltip',
  	    'ctrlSetTooltipColorBox',
  	    'ctrlSetTooltipColorShade',
  	    'ctrlSetTooltipColorText',
  	    'ctrlSetTooltipMaxWidth',
  	    'ctrlSetURL',
  	    'ctrlSetURLOverlayMode',
  	    'ctrlShadow',
  	    'ctrlShow',
  	    'ctrlShown',
  	    'ctrlStyle',
  	    'ctrlText',
  	    'ctrlTextColor',
  	    'ctrlTextHeight',
  	    'ctrlTextSecondary',
  	    'ctrlTextSelection',
  	    'ctrlTextWidth',
  	    'ctrlTooltip',
  	    'ctrlType',
  	    'ctrlURL',
  	    'ctrlURLOverlayMode',
  	    'ctrlVisible',
  	    'ctRowControls',
  	    'ctRowCount',
  	    'ctSetCurSel',
  	    'ctSetData',
  	    'ctSetHeaderTemplate',
  	    'ctSetRowTemplate',
  	    'ctSetValue',
  	    'ctValue',
  	    'curatorAddons',
  	    'curatorCamera',
  	    'curatorCameraArea',
  	    'curatorCameraAreaCeiling',
  	    'curatorCoef',
  	    'curatorEditableObjects',
  	    'curatorEditingArea',
  	    'curatorEditingAreaType',
  	    'curatorMouseOver',
  	    'curatorPoints',
  	    'curatorRegisteredObjects',
  	    'curatorSelected',
  	    'curatorWaypointCost',
  	    'current3DENOperation',
  	    'currentChannel',
  	    'currentCommand',
  	    'currentMagazine',
  	    'currentMagazineDetail',
  	    'currentMagazineDetailTurret',
  	    'currentMagazineTurret',
  	    'currentMuzzle',
  	    'currentNamespace',
  	    'currentPilot',
  	    'currentTask',
  	    'currentTasks',
  	    'currentThrowable',
  	    'currentVisionMode',
  	    'currentWaypoint',
  	    'currentWeapon',
  	    'currentWeaponMode',
  	    'currentWeaponTurret',
  	    'currentZeroing',
  	    'cursorObject',
  	    'cursorTarget',
  	    'customChat',
  	    'customRadio',
  	    'customWaypointPosition',
  	    'cutFadeOut',
  	    'cutObj',
  	    'cutRsc',
  	    'cutText',
  	    'damage',
  	    'date',
  	    'dateToNumber',
  	    'dayTime',
  	    'deActivateKey',
  	    'debriefingText',
  	    'debugFSM',
  	    'debugLog',
  	    'decayGraphValues',
  	    'deg',
  	    'delete3DENEntities',
  	    'deleteAt',
  	    'deleteCenter',
  	    'deleteCollection',
  	    'deleteEditorObject',
  	    'deleteGroup',
  	    'deleteGroupWhenEmpty',
  	    'deleteIdentity',
  	    'deleteLocation',
  	    'deleteMarker',
  	    'deleteMarkerLocal',
  	    'deleteRange',
  	    'deleteResources',
  	    'deleteSite',
  	    'deleteStatus',
  	    'deleteTeam',
  	    'deleteVehicle',
  	    'deleteVehicleCrew',
  	    'deleteWaypoint',
  	    'detach',
  	    'detectedMines',
  	    'diag_activeMissionFSMs',
  	    'diag_activeScripts',
  	    'diag_activeSQFScripts',
  	    'diag_activeSQSScripts',
  	    'diag_allMissionEventHandlers',
  	    'diag_captureFrame',
  	    'diag_captureFrameToFile',
  	    'diag_captureSlowFrame',
  	    'diag_codePerformance',
  	    'diag_deltaTime',
  	    'diag_drawmode',
  	    'diag_dumpCalltraceToLog',
  	    'diag_dumpScriptAssembly',
  	    'diag_dumpTerrainSynth',
  	    'diag_dynamicSimulationEnd',
  	    'diag_enable',
  	    'diag_enabled',
  	    'diag_exportConfig',
  	    'diag_exportTerrainSVG',
  	    'diag_fps',
  	    'diag_fpsmin',
  	    'diag_frameno',
  	    'diag_getTerrainSegmentOffset',
  	    'diag_lightNewLoad',
  	    'diag_list',
  	    'diag_localized',
  	    'diag_log',
  	    'diag_logSlowFrame',
  	    'diag_mergeConfigFile',
  	    'diag_recordTurretLimits',
  	    'diag_resetFSM',
  	    'diag_resetshapes',
  	    'diag_scope',
  	    'diag_setLightNew',
  	    'diag_stacktrace',
  	    'diag_tickTime',
  	    'diag_toggle',
  	    'dialog',
  	    'diarySubjectExists',
  	    'didJIP',
  	    'didJIPOwner',
  	    'difficulty',
  	    'difficultyEnabled',
  	    'difficultyEnabledRTD',
  	    'difficultyOption',
  	    'direction',
  	    'directionStabilizationEnabled',
  	    'directSay',
  	    'disableAI',
  	    'disableBrakes',
  	    'disableCollisionWith',
  	    'disableConversation',
  	    'disableDebriefingStats',
  	    'disableMapIndicators',
  	    'disableNVGEquipment',
  	    'disableRemoteSensors',
  	    'disableSerialization',
  	    'disableTIEquipment',
  	    'disableUAVConnectability',
  	    'disableUserInput',
  	    'displayAddEventHandler',
  	    'displayChild',
  	    'displayCtrl',
  	    'displayParent',
  	    'displayRemoveAllEventHandlers',
  	    'displayRemoveEventHandler',
  	    'displaySetEventHandler',
  	    'displayUniqueName',
  	    'displayUpdate',
  	    'dissolveTeam',
  	    'distance',
  	    'distance2D',
  	    'distanceSqr',
  	    'distributionRegion',
  	    'do3DENAction',
  	    'doArtilleryFire',
  	    'doFire',
  	    'doFollow',
  	    'doFSM',
  	    'doGetOut',
  	    'doMove',
  	    'doorPhase',
  	    'doStop',
  	    'doSuppressiveFire',
  	    'doTarget',
  	    'doWatch',
  	    'drawArrow',
  	    'drawEllipse',
  	    'drawIcon',
  	    'drawIcon3D',
  	    'drawLaser',
  	    'drawLine',
  	    'drawLine3D',
  	    'drawLink',
  	    'drawLocation',
  	    'drawPolygon',
  	    'drawRectangle',
  	    'drawTriangle',
  	    'driver',
  	    'drop',
  	    'dynamicSimulationDistance',
  	    'dynamicSimulationDistanceCoef',
  	    'dynamicSimulationEnabled',
  	    'dynamicSimulationSystemEnabled',
  	    'echo',
  	    'edit3DENMissionAttributes',
  	    'editObject',
  	    'editorSetEventHandler',
  	    'effectiveCommander',
  	    'elevatePeriscope',
  	    'emptyPositions',
  	    'enableAI',
  	    'enableAIFeature',
  	    'enableAimPrecision',
  	    'enableAttack',
  	    'enableAudioFeature',
  	    'enableAutoStartUpRTD',
  	    'enableAutoTrimRTD',
  	    'enableCamShake',
  	    'enableCaustics',
  	    'enableChannel',
  	    'enableCollisionWith',
  	    'enableCopilot',
  	    'enableDebriefingStats',
  	    'enableDiagLegend',
  	    'enableDirectionStabilization',
  	    'enableDynamicSimulation',
  	    'enableDynamicSimulationSystem',
  	    'enableEndDialog',
  	    'enableEngineArtillery',
  	    'enableEnvironment',
  	    'enableFatigue',
  	    'enableGunLights',
  	    'enableInfoPanelComponent',
  	    'enableIRLasers',
  	    'enableMimics',
  	    'enablePersonTurret',
  	    'enableRadio',
  	    'enableReload',
  	    'enableRopeAttach',
  	    'enableSatNormalOnDetail',
  	    'enableSaving',
  	    'enableSentences',
  	    'enableSimulation',
  	    'enableSimulationGlobal',
  	    'enableStamina',
  	    'enableStressDamage',
  	    'enableTeamSwitch',
  	    'enableTraffic',
  	    'enableUAVConnectability',
  	    'enableUAVWaypoints',
  	    'enableVehicleCargo',
  	    'enableVehicleSensor',
  	    'enableWeaponDisassembly',
  	    'endLoadingScreen',
  	    'endMission',
  	    'engineOn',
  	    'enginesIsOnRTD',
  	    'enginesPowerRTD',
  	    'enginesRpmRTD',
  	    'enginesTorqueRTD',
  	    'entities',
  	    'environmentEnabled',
  	    'environmentVolume',
  	    'equipmentDisabled',
  	    'estimatedEndServerTime',
  	    'estimatedTimeLeft',
  	    'evalObjectArgument',
  	    'everyBackpack',
  	    'everyContainer',
  	    'exec',
  	    'execEditorScript',
  	    'execFSM',
  	    'execVM',
  	    'exp',
  	    'expectedDestination',
  	    'exportJIPMessages',
  	    'eyeDirection',
  	    'eyePos',
  	    'face',
  	    'faction',
  	    'fadeEnvironment',
  	    'fadeMusic',
  	    'fadeRadio',
  	    'fadeSound',
  	    'fadeSpeech',
  	    'failMission',
  	    'fileExists',
  	    'fillWeaponsFromPool',
  	    'find',
  	    'findAny',
  	    'findCover',
  	    'findDisplay',
  	    'findEditorObject',
  	    'findEmptyPosition',
  	    'findEmptyPositionReady',
  	    'findIf',
  	    'findNearestEnemy',
  	    'finishMissionInit',
  	    'finite',
  	    'fire',
  	    'fireAtTarget',
  	    'firstBackpack',
  	    'flag',
  	    'flagAnimationPhase',
  	    'flagOwner',
  	    'flagSide',
  	    'flagTexture',
  	    'flatten',
  	    'fleeing',
  	    'floor',
  	    'flyInHeight',
  	    'flyInHeightASL',
  	    'focusedCtrl',
  	    'fog',
  	    'fogForecast',
  	    'fogParams',
  	    'forceAddUniform',
  	    'forceAtPositionRTD',
  	    'forceCadetDifficulty',
  	    'forcedMap',
  	    'forceEnd',
  	    'forceFlagTexture',
  	    'forceFollowRoad',
  	    'forceGeneratorRTD',
  	    'forceMap',
  	    'forceRespawn',
  	    'forceSpeed',
  	    'forceUnicode',
  	    'forceWalk',
  	    'forceWeaponFire',
  	    'forceWeatherChange',
  	    'forEachMember',
  	    'forEachMemberAgent',
  	    'forEachMemberTeam',
  	    'forgetTarget',
  	    'format',
  	    'formation',
  	    'formationDirection',
  	    'formationLeader',
  	    'formationMembers',
  	    'formationPosition',
  	    'formationTask',
  	    'formatText',
  	    'formLeader',
  	    'freeExtension',
  	    'freeLook',
  	    'fromEditor',
  	    'fuel',
  	    'fullCrew',
  	    'gearIDCAmmoCount',
  	    'gearSlotAmmoCount',
  	    'gearSlotData',
  	    'gestureState',
  	    'get',
  	    'get3DENActionState',
  	    'get3DENAttribute',
  	    'get3DENCamera',
  	    'get3DENConnections',
  	    'get3DENEntity',
  	    'get3DENEntityID',
  	    'get3DENGrid',
  	    'get3DENIconsVisible',
  	    'get3DENLayerEntities',
  	    'get3DENLinesVisible',
  	    'get3DENMissionAttribute',
  	    'get3DENMouseOver',
  	    'get3DENSelected',
  	    'getAimingCoef',
  	    'getAllEnv3DSoundControllers',
  	    'getAllEnvSoundControllers',
  	    'getAllHitPointsDamage',
  	    'getAllOwnedMines',
  	    'getAllPylonsInfo',
  	    'getAllSoundControllers',
  	    'getAllUnitTraits',
  	    'getAmmoCargo',
  	    'getAnimAimPrecision',
  	    'getAnimSpeedCoef',
  	    'getArray',
  	    'getArtilleryAmmo',
  	    'getArtilleryComputerSettings',
  	    'getArtilleryETA',
  	    'getAssetDLCInfo',
  	    'getAssignedCuratorLogic',
  	    'getAssignedCuratorUnit',
  	    'getAttackTarget',
  	    'getAudioOptionVolumes',
  	    'getBackpackCargo',
  	    'getBleedingRemaining',
  	    'getBurningValue',
  	    'getCalculatePlayerVisibilityByFriendly',
  	    'getCameraViewDirection',
  	    'getCargoIndex',
  	    'getCenterOfMass',
  	    'getClientState',
  	    'getClientStateNumber',
  	    'getCompatiblePylonMagazines',
  	    'getConnectedUAV',
  	    'getConnectedUAVUnit',
  	    'getContainerMaxLoad',
  	    'getCorpse',
  	    'getCruiseControl',
  	    'getCursorObjectParams',
  	    'getCustomAimCoef',
  	    'getCustomSoundController',
  	    'getCustomSoundControllerCount',
  	    'getDammage',
  	    'getDebriefingText',
  	    'getDescription',
  	    'getDir',
  	    'getDirVisual',
  	    'getDiverState',
  	    'getDLCAssetsUsage',
  	    'getDLCAssetsUsageByName',
  	    'getDLCs',
  	    'getDLCUsageTime',
  	    'getEditorCamera',
  	    'getEditorMode',
  	    'getEditorObjectScope',
  	    'getElevationOffset',
  	    'getEngineTargetRPMRTD',
  	    'getEnv3DSoundController',
  	    'getEnvSoundController',
  	    'getEventHandlerInfo',
  	    'getFatigue',
  	    'getFieldManualStartPage',
  	    'getForcedFlagTexture',
  	    'getForcedSpeed',
  	    'getFriend',
  	    'getFSMVariable',
  	    'getFuelCargo',
  	    'getGraphValues',
  	    'getGroupIcon',
  	    'getGroupIconParams',
  	    'getGroupIcons',
  	    'getHideFrom',
  	    'getHit',
  	    'getHitIndex',
  	    'getHitPointDamage',
  	    'getItemCargo',
  	    'getLighting',
  	    'getLightingAt',
  	    'getLoadedModsInfo',
  	    'getMagazineCargo',
  	    'getMarkerColor',
  	    'getMarkerPos',
  	    'getMarkerSize',
  	    'getMarkerType',
  	    'getMass',
  	    'getMissionConfig',
  	    'getMissionConfigValue',
  	    'getMissionDLCs',
  	    'getMissionLayerEntities',
  	    'getMissionLayers',
  	    'getMissionPath',
  	    'getModelInfo',
  	    'getMousePosition',
  	    'getMusicPlayedTime',
  	    'getNumber',
  	    'getObjectArgument',
  	    'getObjectChildren',
  	    'getObjectDLC',
  	    'getObjectFOV',
  	    'getObjectID',
  	    'getObjectMaterials',
  	    'getObjectProxy',
  	    'getObjectScale',
  	    'getObjectTextures',
  	    'getObjectType',
  	    'getObjectViewDistance',
  	    'getOpticsMode',
  	    'getOrDefault',
  	    'getOrDefaultCall',
  	    'getOxygenRemaining',
  	    'getPersonUsedDLCs',
  	    'getPilotCameraDirection',
  	    'getPilotCameraPosition',
  	    'getPilotCameraRotation',
  	    'getPilotCameraTarget',
  	    'getPiPViewDistance',
  	    'getPlateNumber',
  	    'getPlayerChannel',
  	    'getPlayerID',
  	    'getPlayerScores',
  	    'getPlayerUID',
  	    'getPlayerVoNVolume',
  	    'getPos',
  	    'getPosASL',
  	    'getPosASLVisual',
  	    'getPosASLW',
  	    'getPosATL',
  	    'getPosATLVisual',
  	    'getPosVisual',
  	    'getPosWorld',
  	    'getPosWorldVisual',
  	    'getPylonMagazines',
  	    'getRelDir',
  	    'getRelPos',
  	    'getRemoteSensorsDisabled',
  	    'getRepairCargo',
  	    'getResolution',
  	    'getRoadInfo',
  	    'getRotorBrakeRTD',
  	    'getSensorTargets',
  	    'getSensorThreats',
  	    'getShadowDistance',
  	    'getShotParents',
  	    'getSlingLoad',
  	    'getSoundController',
  	    'getSoundControllerResult',
  	    'getSpeed',
  	    'getStamina',
  	    'getStatValue',
  	    'getSteamFriendsServers',
  	    'getSubtitleOptions',
  	    'getSuppression',
  	    'getTerrainGrid',
  	    'getTerrainHeight',
  	    'getTerrainHeightASL',
  	    'getTerrainInfo',
  	    'getText',
  	    'getTextRaw',
  	    'getTextureInfo',
  	    'getTextWidth',
  	    'getTiParameters',
  	    'getTotalDLCUsageTime',
  	    'getTrimOffsetRTD',
  	    'getTurretLimits',
  	    'getTurretOpticsMode',
  	    'getUnitFreefallInfo',
  	    'getUnitLoadout',
  	    'getUnitTrait',
  	    'getUnloadInCombat',
  	    'getUserInfo',
  	    'getUserMFDText',
  	    'getUserMFDValue',
  	    'getVariable',
  	    'getVehicleCargo',
  	    'getVehicleTiPars',
  	    'getWeaponCargo',
  	    'getWeaponSway',
  	    'getWingsOrientationRTD',
  	    'getWingsPositionRTD',
  	    'getWPPos',
  	    'glanceAt',
  	    'globalChat',
  	    'globalRadio',
  	    'goggles',
  	    'goto',
  	    'group',
  	    'groupChat',
  	    'groupFromNetId',
  	    'groupIconSelectable',
  	    'groupIconsVisible',
  	    'groupID',
  	    'groupOwner',
  	    'groupRadio',
  	    'groups',
  	    'groupSelectedUnits',
  	    'groupSelectUnit',
  	    'gunner',
  	    'gusts',
  	    'halt',
  	    'handgunItems',
  	    'handgunMagazine',
  	    'handgunWeapon',
  	    'handsHit',
  	    'hashValue',
  	    'hasInterface',
  	    'hasPilotCamera',
  	    'hasWeapon',
  	    'hcAllGroups',
  	    'hcGroupParams',
  	    'hcLeader',
  	    'hcRemoveAllGroups',
  	    'hcRemoveGroup',
  	    'hcSelected',
  	    'hcSelectGroup',
  	    'hcSetGroup',
  	    'hcShowBar',
  	    'hcShownBar',
  	    'headgear',
  	    'hideBody',
  	    'hideObject',
  	    'hideObjectGlobal',
  	    'hideSelection',
  	    'hint',
  	    'hintC',
  	    'hintCadet',
  	    'hintSilent',
  	    'hmd',
  	    'hostMission',
  	    'htmlLoad',
  	    'HUDMovementLevels',
  	    'humidity',
  	    'image',
  	    'importAllGroups',
  	    'importance',
  	    'in',
  	    'inArea',
  	    'inAreaArray',
  	    'incapacitatedState',
  	    'inflame',
  	    'inflamed',
  	    'infoPanel',
  	    'infoPanelComponentEnabled',
  	    'infoPanelComponents',
  	    'infoPanels',
  	    'inGameUISetEventHandler',
  	    'inheritsFrom',
  	    'initAmbientLife',
  	    'inPolygon',
  	    'inputAction',
  	    'inputController',
  	    'inputMouse',
  	    'inRangeOfArtillery',
  	    'insert',
  	    'insertEditorObject',
  	    'intersect',
  	    'is3DEN',
  	    'is3DENMultiplayer',
  	    'is3DENPreview',
  	    'isAbleToBreathe',
  	    'isActionMenuVisible',
  	    'isAgent',
  	    'isAimPrecisionEnabled',
  	    'isAllowedCrewInImmobile',
  	    'isArray',
  	    'isAutoHoverOn',
  	    'isAutonomous',
  	    'isAutoStartUpEnabledRTD',
  	    'isAutotest',
  	    'isAutoTrimOnRTD',
  	    'isAwake',
  	    'isBleeding',
  	    'isBurning',
  	    'isClass',
  	    'isCollisionLightOn',
  	    'isCopilotEnabled',
  	    'isDamageAllowed',
  	    'isDedicated',
  	    'isDLCAvailable',
  	    'isEngineOn',
  	    'isEqualRef',
  	    'isEqualTo',
  	    'isEqualType',
  	    'isEqualTypeAll',
  	    'isEqualTypeAny',
  	    'isEqualTypeArray',
  	    'isEqualTypeParams',
  	    'isFilePatchingEnabled',
  	    'isFinal',
  	    'isFlashlightOn',
  	    'isFlatEmpty',
  	    'isForcedWalk',
  	    'isFormationLeader',
  	    'isGameFocused',
  	    'isGamePaused',
  	    'isGroupDeletedWhenEmpty',
  	    'isHidden',
  	    'isInRemainsCollector',
  	    'isInstructorFigureEnabled',
  	    'isIRLaserOn',
  	    'isKeyActive',
  	    'isKindOf',
  	    'isLaserOn',
  	    'isLightOn',
  	    'isLocalized',
  	    'isManualFire',
  	    'isMarkedForCollection',
  	    'isMissionProfileNamespaceLoaded',
  	    'isMultiplayer',
  	    'isMultiplayerSolo',
  	    'isNil',
  	    'isNotEqualRef',
  	    'isNotEqualTo',
  	    'isNull',
  	    'isNumber',
  	    'isObjectHidden',
  	    'isObjectRTD',
  	    'isOnRoad',
  	    'isPiPEnabled',
  	    'isPlayer',
  	    'isRealTime',
  	    'isRemoteExecuted',
  	    'isRemoteExecutedJIP',
  	    'isSaving',
  	    'isSensorTargetConfirmed',
  	    'isServer',
  	    'isShowing3DIcons',
  	    'isSimpleObject',
  	    'isSprintAllowed',
  	    'isStaminaEnabled',
  	    'isSteamMission',
  	    'isSteamOverlayEnabled',
  	    'isStreamFriendlyUIEnabled',
  	    'isStressDamageEnabled',
  	    'isText',
  	    'isTouchingGround',
  	    'isTurnedOut',
  	    'isTutHintsEnabled',
  	    'isUAVConnectable',
  	    'isUAVConnected',
  	    'isUIContext',
  	    'isUniformAllowed',
  	    'isVehicleCargo',
  	    'isVehicleRadarOn',
  	    'isVehicleSensorEnabled',
  	    'isWalking',
  	    'isWeaponDeployed',
  	    'isWeaponRested',
  	    'itemCargo',
  	    'items',
  	    'itemsWithMagazines',
  	    'join',
  	    'joinAs',
  	    'joinAsSilent',
  	    'joinSilent',
  	    'joinString',
  	    'kbAddDatabase',
  	    'kbAddDatabaseTargets',
  	    'kbAddTopic',
  	    'kbHasTopic',
  	    'kbReact',
  	    'kbRemoveTopic',
  	    'kbTell',
  	    'kbWasSaid',
  	    'keyImage',
  	    'keyName',
  	    'keys',
  	    'knowsAbout',
  	    'land',
  	    'landAt',
  	    'landResult',
  	    'language',
  	    'laserTarget',
  	    'lbAdd',
  	    'lbClear',
  	    'lbColor',
  	    'lbColorRight',
  	    'lbCurSel',
  	    'lbData',
  	    'lbDelete',
  	    'lbIsSelected',
  	    'lbPicture',
  	    'lbPictureRight',
  	    'lbSelection',
  	    'lbSetColor',
  	    'lbSetColorRight',
  	    'lbSetCurSel',
  	    'lbSetData',
  	    'lbSetPicture',
  	    'lbSetPictureColor',
  	    'lbSetPictureColorDisabled',
  	    'lbSetPictureColorSelected',
  	    'lbSetPictureRight',
  	    'lbSetPictureRightColor',
  	    'lbSetPictureRightColorDisabled',
  	    'lbSetPictureRightColorSelected',
  	    'lbSetSelectColor',
  	    'lbSetSelectColorRight',
  	    'lbSetSelected',
  	    'lbSetText',
  	    'lbSetTextRight',
  	    'lbSetTooltip',
  	    'lbSetValue',
  	    'lbSize',
  	    'lbSort',
  	    'lbSortBy',
  	    'lbSortByValue',
  	    'lbText',
  	    'lbTextRight',
  	    'lbTooltip',
  	    'lbValue',
  	    'leader',
  	    'leaderboardDeInit',
  	    'leaderboardGetRows',
  	    'leaderboardInit',
  	    'leaderboardRequestRowsFriends',
  	    'leaderboardRequestRowsGlobal',
  	    'leaderboardRequestRowsGlobalAroundUser',
  	    'leaderboardsRequestUploadScore',
  	    'leaderboardsRequestUploadScoreKeepBest',
  	    'leaderboardState',
  	    'leaveVehicle',
  	    'libraryCredits',
  	    'libraryDisclaimers',
  	    'lifeState',
  	    'lightAttachObject',
  	    'lightDetachObject',
  	    'lightIsOn',
  	    'lightnings',
  	    'limitSpeed',
  	    'linearConversion',
  	    'lineIntersects',
  	    'lineIntersectsObjs',
  	    'lineIntersectsSurfaces',
  	    'lineIntersectsWith',
  	    'linkItem',
  	    'list',
  	    'listObjects',
  	    'listRemoteTargets',
  	    'listVehicleSensors',
  	    'ln',
  	    'lnbAddArray',
  	    'lnbAddColumn',
  	    'lnbAddRow',
  	    'lnbClear',
  	    'lnbColor',
  	    'lnbColorRight',
  	    'lnbCurSelRow',
  	    'lnbData',
  	    'lnbDeleteColumn',
  	    'lnbDeleteRow',
  	    'lnbGetColumnsPosition',
  	    'lnbPicture',
  	    'lnbPictureRight',
  	    'lnbSetColor',
  	    'lnbSetColorRight',
  	    'lnbSetColumnsPos',
  	    'lnbSetCurSelRow',
  	    'lnbSetData',
  	    'lnbSetPicture',
  	    'lnbSetPictureColor',
  	    'lnbSetPictureColorRight',
  	    'lnbSetPictureColorSelected',
  	    'lnbSetPictureColorSelectedRight',
  	    'lnbSetPictureRight',
  	    'lnbSetText',
  	    'lnbSetTextRight',
  	    'lnbSetTooltip',
  	    'lnbSetValue',
  	    'lnbSize',
  	    'lnbSort',
  	    'lnbSortBy',
  	    'lnbSortByValue',
  	    'lnbText',
  	    'lnbTextRight',
  	    'lnbValue',
  	    'load',
  	    'loadAbs',
  	    'loadBackpack',
  	    'loadConfig',
  	    'loadFile',
  	    'loadGame',
  	    'loadIdentity',
  	    'loadMagazine',
  	    'loadOverlay',
  	    'loadStatus',
  	    'loadUniform',
  	    'loadVest',
  	    'localize',
  	    'localNamespace',
  	    'locationPosition',
  	    'lock',
  	    'lockCameraTo',
  	    'lockCargo',
  	    'lockDriver',
  	    'locked',
  	    'lockedCameraTo',
  	    'lockedCargo',
  	    'lockedDriver',
  	    'lockedInventory',
  	    'lockedTurret',
  	    'lockIdentity',
  	    'lockInventory',
  	    'lockTurret',
  	    'lockWp',
  	    'log',
  	    'logEntities',
  	    'logNetwork',
  	    'logNetworkTerminate',
  	    'lookAt',
  	    'lookAtPos',
  	    'magazineCargo',
  	    'magazines',
  	    'magazinesAllTurrets',
  	    'magazinesAmmo',
  	    'magazinesAmmoCargo',
  	    'magazinesAmmoFull',
  	    'magazinesDetail',
  	    'magazinesDetailBackpack',
  	    'magazinesDetailUniform',
  	    'magazinesDetailVest',
  	    'magazinesTurret',
  	    'magazineTurretAmmo',
  	    'mapAnimAdd',
  	    'mapAnimClear',
  	    'mapAnimCommit',
  	    'mapAnimDone',
  	    'mapCenterOnCamera',
  	    'mapGridPosition',
  	    'markAsFinishedOnSteam',
  	    'markerAlpha',
  	    'markerBrush',
  	    'markerChannel',
  	    'markerColor',
  	    'markerDir',
  	    'markerPolyline',
  	    'markerPos',
  	    'markerShadow',
  	    'markerShape',
  	    'markerSize',
  	    'markerText',
  	    'markerType',
  	    'matrixMultiply',
  	    'matrixTranspose',
  	    'max',
  	    'maxLoad',
  	    'members',
  	    'menuAction',
  	    'menuAdd',
  	    'menuChecked',
  	    'menuClear',
  	    'menuCollapse',
  	    'menuData',
  	    'menuDelete',
  	    'menuEnable',
  	    'menuEnabled',
  	    'menuExpand',
  	    'menuHover',
  	    'menuPicture',
  	    'menuSetAction',
  	    'menuSetCheck',
  	    'menuSetData',
  	    'menuSetPicture',
  	    'menuSetShortcut',
  	    'menuSetText',
  	    'menuSetURL',
  	    'menuSetValue',
  	    'menuShortcut',
  	    'menuShortcutText',
  	    'menuSize',
  	    'menuSort',
  	    'menuText',
  	    'menuURL',
  	    'menuValue',
  	    'merge',
  	    'min',
  	    'mineActive',
  	    'mineDetectedBy',
  	    'missileTarget',
  	    'missileTargetPos',
  	    'missionConfigFile',
  	    'missionDifficulty',
  	    'missionEnd',
  	    'missionName',
  	    'missionNameSource',
  	    'missionNamespace',
  	    'missionProfileNamespace',
  	    'missionStart',
  	    'missionVersion',
  	    'mod',
  	    'modelToWorld',
  	    'modelToWorldVisual',
  	    'modelToWorldVisualWorld',
  	    'modelToWorldWorld',
  	    'modParams',
  	    'moonIntensity',
  	    'moonPhase',
  	    'morale',
  	    'move',
  	    'move3DENCamera',
  	    'moveInAny',
  	    'moveInCargo',
  	    'moveInCommander',
  	    'moveInDriver',
  	    'moveInGunner',
  	    'moveInTurret',
  	    'moveObjectToEnd',
  	    'moveOut',
  	    'moveTime',
  	    'moveTo',
  	    'moveToCompleted',
  	    'moveToFailed',
  	    'musicVolume',
  	    'name',
  	    'namedProperties',
  	    'nameSound',
  	    'nearEntities',
  	    'nearestBuilding',
  	    'nearestLocation',
  	    'nearestLocations',
  	    'nearestLocationWithDubbing',
  	    'nearestMines',
  	    'nearestObject',
  	    'nearestObjects',
  	    'nearestTerrainObjects',
  	    'nearObjects',
  	    'nearObjectsReady',
  	    'nearRoads',
  	    'nearSupplies',
  	    'nearTargets',
  	    'needReload',
  	    'needService',
  	    'netId',
  	    'netObjNull',
  	    'newOverlay',
  	    'nextMenuItemIndex',
  	    'nextWeatherChange',
  	    'nMenuItems',
  	    'not',
  	    'numberOfEnginesRTD',
  	    'numberToDate',
  	    'objectCurators',
  	    'objectFromNetId',
  	    'objectParent',
  	    'objStatus',
  	    'onBriefingGroup',
  	    'onBriefingNotes',
  	    'onBriefingPlan',
  	    'onBriefingTeamSwitch',
  	    'onCommandModeChanged',
  	    'onDoubleClick',
  	    'onEachFrame',
  	    'onGroupIconClick',
  	    'onGroupIconOverEnter',
  	    'onGroupIconOverLeave',
  	    'onHCGroupSelectionChanged',
  	    'onMapSingleClick',
  	    'onPlayerConnected',
  	    'onPlayerDisconnected',
  	    'onPreloadFinished',
  	    'onPreloadStarted',
  	    'onShowNewObject',
  	    'onTeamSwitch',
  	    'openCuratorInterface',
  	    'openDLCPage',
  	    'openGPS',
  	    'openMap',
  	    'openSteamApp',
  	    'openYoutubeVideo',
  	    'or',
  	    'orderGetIn',
  	    'overcast',
  	    'overcastForecast',
  	    'owner',
  	    'param',
  	    'params',
  	    'parseNumber',
  	    'parseSimpleArray',
  	    'parseText',
  	    'parsingNamespace',
  	    'particlesQuality',
  	    'periscopeElevation',
  	    'pickWeaponPool',
  	    'pitch',
  	    'pixelGrid',
  	    'pixelGridBase',
  	    'pixelGridNoUIScale',
  	    'pixelH',
  	    'pixelW',
  	    'playableSlotsNumber',
  	    'playableUnits',
  	    'playAction',
  	    'playActionNow',
  	    'player',
  	    'playerRespawnTime',
  	    'playerSide',
  	    'playersNumber',
  	    'playGesture',
  	    'playMission',
  	    'playMove',
  	    'playMoveNow',
  	    'playMusic',
  	    'playScriptedMission',
  	    'playSound',
  	    'playSound3D',
  	    'playSoundUI',
  	    'pose',
  	    'position',
  	    'positionCameraToWorld',
  	    'posScreenToWorld',
  	    'posWorldToScreen',
  	    'ppEffectAdjust',
  	    'ppEffectCommit',
  	    'ppEffectCommitted',
  	    'ppEffectCreate',
  	    'ppEffectDestroy',
  	    'ppEffectEnable',
  	    'ppEffectEnabled',
  	    'ppEffectForceInNVG',
  	    'precision',
  	    'preloadCamera',
  	    'preloadObject',
  	    'preloadSound',
  	    'preloadTitleObj',
  	    'preloadTitleRsc',
  	    'preprocessFile',
  	    'preprocessFileLineNumbers',
  	    'primaryWeapon',
  	    'primaryWeaponItems',
  	    'primaryWeaponMagazine',
  	    'priority',
  	    'processDiaryLink',
  	    'productVersion',
  	    'profileName',
  	    'profileNamespace',
  	    'profileNameSteam',
  	    'progressLoadingScreen',
  	    'progressPosition',
  	    'progressSetPosition',
  	    'publicVariable',
  	    'publicVariableClient',
  	    'publicVariableServer',
  	    'pushBack',
  	    'pushBackUnique',
  	    'putWeaponPool',
  	    'queryItemsPool',
  	    'queryMagazinePool',
  	    'queryWeaponPool',
  	    'rad',
  	    'radioChannelAdd',
  	    'radioChannelCreate',
  	    'radioChannelInfo',
  	    'radioChannelRemove',
  	    'radioChannelSetCallSign',
  	    'radioChannelSetLabel',
  	    'radioEnabled',
  	    'radioVolume',
  	    'rain',
  	    'rainbow',
  	    'rainParams',
  	    'random',
  	    'rank',
  	    'rankId',
  	    'rating',
  	    'rectangular',
  	    'regexFind',
  	    'regexMatch',
  	    'regexReplace',
  	    'registeredTasks',
  	    'registerTask',
  	    'reload',
  	    'reloadEnabled',
  	    'remoteControl',
  	    'remoteExec',
  	    'remoteExecCall',
  	    'remoteExecutedOwner',
  	    'remove3DENConnection',
  	    'remove3DENEventHandler',
  	    'remove3DENLayer',
  	    'removeAction',
  	    'removeAll3DENEventHandlers',
  	    'removeAllActions',
  	    'removeAllAssignedItems',
  	    'removeAllBinocularItems',
  	    'removeAllContainers',
  	    'removeAllCuratorAddons',
  	    'removeAllCuratorCameraAreas',
  	    'removeAllCuratorEditingAreas',
  	    'removeAllEventHandlers',
  	    'removeAllHandgunItems',
  	    'removeAllItems',
  	    'removeAllItemsWithMagazines',
  	    'removeAllMissionEventHandlers',
  	    'removeAllMPEventHandlers',
  	    'removeAllMusicEventHandlers',
  	    'removeAllOwnedMines',
  	    'removeAllPrimaryWeaponItems',
  	    'removeAllSecondaryWeaponItems',
  	    'removeAllUserActionEventHandlers',
  	    'removeAllWeapons',
  	    'removeBackpack',
  	    'removeBackpackGlobal',
  	    'removeBinocularItem',
  	    'removeCuratorAddons',
  	    'removeCuratorCameraArea',
  	    'removeCuratorEditableObjects',
  	    'removeCuratorEditingArea',
  	    'removeDiaryRecord',
  	    'removeDiarySubject',
  	    'removeDrawIcon',
  	    'removeDrawLinks',
  	    'removeEventHandler',
  	    'removeFromRemainsCollector',
  	    'removeGoggles',
  	    'removeGroupIcon',
  	    'removeHandgunItem',
  	    'removeHeadgear',
  	    'removeItem',
  	    'removeItemFromBackpack',
  	    'removeItemFromUniform',
  	    'removeItemFromVest',
  	    'removeItems',
  	    'removeMagazine',
  	    'removeMagazineGlobal',
  	    'removeMagazines',
  	    'removeMagazinesTurret',
  	    'removeMagazineTurret',
  	    'removeMenuItem',
  	    'removeMissionEventHandler',
  	    'removeMPEventHandler',
  	    'removeMusicEventHandler',
  	    'removeOwnedMine',
  	    'removePrimaryWeaponItem',
  	    'removeSecondaryWeaponItem',
  	    'removeSimpleTask',
  	    'removeSwitchableUnit',
  	    'removeTeamMember',
  	    'removeUniform',
  	    'removeUserActionEventHandler',
  	    'removeVest',
  	    'removeWeapon',
  	    'removeWeaponAttachmentCargo',
  	    'removeWeaponCargo',
  	    'removeWeaponGlobal',
  	    'removeWeaponTurret',
  	    'reportRemoteTarget',
  	    'requiredVersion',
  	    'resetCamShake',
  	    'resetSubgroupDirection',
  	    'resize',
  	    'resources',
  	    'respawnVehicle',
  	    'restartEditorCamera',
  	    'reveal',
  	    'revealMine',
  	    'reverse',
  	    'reversedMouseY',
  	    'roadAt',
  	    'roadsConnectedTo',
  	    'roleDescription',
  	    'ropeAttachedObjects',
  	    'ropeAttachedTo',
  	    'ropeAttachEnabled',
  	    'ropeAttachTo',
  	    'ropeCreate',
  	    'ropeCut',
  	    'ropeDestroy',
  	    'ropeDetach',
  	    'ropeEndPosition',
  	    'ropeLength',
  	    'ropes',
  	    'ropesAttachedTo',
  	    'ropeSegments',
  	    'ropeUnwind',
  	    'ropeUnwound',
  	    'rotorsForcesRTD',
  	    'rotorsRpmRTD',
  	    'round',
  	    'runInitScript',
  	    'safeZoneH',
  	    'safeZoneW',
  	    'safeZoneWAbs',
  	    'safeZoneX',
  	    'safeZoneXAbs',
  	    'safeZoneY',
  	    'save3DENInventory',
  	    'saveGame',
  	    'saveIdentity',
  	    'saveJoysticks',
  	    'saveMissionProfileNamespace',
  	    'saveOverlay',
  	    'saveProfileNamespace',
  	    'saveStatus',
  	    'saveVar',
  	    'savingEnabled',
  	    'say',
  	    'say2D',
  	    'say3D',
  	    'scopeName',
  	    'score',
  	    'scoreSide',
  	    'screenshot',
  	    'screenToWorld',
  	    'scriptDone',
  	    'scriptName',
  	    'scudState',
  	    'secondaryWeapon',
  	    'secondaryWeaponItems',
  	    'secondaryWeaponMagazine',
  	    'select',
  	    'selectBestPlaces',
  	    'selectDiarySubject',
  	    'selectedEditorObjects',
  	    'selectEditorObject',
  	    'selectionNames',
  	    'selectionPosition',
  	    'selectionVectorDirAndUp',
  	    'selectLeader',
  	    'selectMax',
  	    'selectMin',
  	    'selectNoPlayer',
  	    'selectPlayer',
  	    'selectRandom',
  	    'selectRandomWeighted',
  	    'selectWeapon',
  	    'selectWeaponTurret',
  	    'sendAUMessage',
  	    'sendSimpleCommand',
  	    'sendTask',
  	    'sendTaskResult',
  	    'sendUDPMessage',
  	    'sentencesEnabled',
  	    'serverCommand',
  	    'serverCommandAvailable',
  	    'serverCommandExecutable',
  	    'serverName',
  	    'serverNamespace',
  	    'serverTime',
  	    'set',
  	    'set3DENAttribute',
  	    'set3DENAttributes',
  	    'set3DENGrid',
  	    'set3DENIconsVisible',
  	    'set3DENLayer',
  	    'set3DENLinesVisible',
  	    'set3DENLogicType',
  	    'set3DENMissionAttribute',
  	    'set3DENMissionAttributes',
  	    'set3DENModelsVisible',
  	    'set3DENObjectType',
  	    'set3DENSelected',
  	    'setAccTime',
  	    'setActualCollectiveRTD',
  	    'setAirplaneThrottle',
  	    'setAirportSide',
  	    'setAmmo',
  	    'setAmmoCargo',
  	    'setAmmoOnPylon',
  	    'setAnimSpeedCoef',
  	    'setAperture',
  	    'setApertureNew',
  	    'setArmoryPoints',
  	    'setAttributes',
  	    'setAutonomous',
  	    'setBehaviour',
  	    'setBehaviourStrong',
  	    'setBleedingRemaining',
  	    'setBrakesRTD',
  	    'setCameraInterest',
  	    'setCamShakeDefParams',
  	    'setCamShakeParams',
  	    'setCamUseTi',
  	    'setCaptive',
  	    'setCenterOfMass',
  	    'setCollisionLight',
  	    'setCombatBehaviour',
  	    'setCombatMode',
  	    'setCompassOscillation',
  	    'setConvoySeparation',
  	    'setCruiseControl',
  	    'setCuratorCameraAreaCeiling',
  	    'setCuratorCoef',
  	    'setCuratorEditingAreaType',
  	    'setCuratorWaypointCost',
  	    'setCurrentChannel',
  	    'setCurrentTask',
  	    'setCurrentWaypoint',
  	    'setCustomAimCoef',
  	    'SetCustomMissionData',
  	    'setCustomSoundController',
  	    'setCustomWeightRTD',
  	    'setDamage',
  	    'setDammage',
  	    'setDate',
  	    'setDebriefingText',
  	    'setDefaultCamera',
  	    'setDestination',
  	    'setDetailMapBlendPars',
  	    'setDiaryRecordText',
  	    'setDiarySubjectPicture',
  	    'setDir',
  	    'setDirection',
  	    'setDrawIcon',
  	    'setDriveOnPath',
  	    'setDropInterval',
  	    'setDynamicSimulationDistance',
  	    'setDynamicSimulationDistanceCoef',
  	    'setEditorMode',
  	    'setEditorObjectScope',
  	    'setEffectCondition',
  	    'setEffectiveCommander',
  	    'setEngineRpmRTD',
  	    'setFace',
  	    'setFaceanimation',
  	    'setFatigue',
  	    'setFeatureType',
  	    'setFlagAnimationPhase',
  	    'setFlagOwner',
  	    'setFlagSide',
  	    'setFlagTexture',
  	    'setFog',
  	    'setForceGeneratorRTD',
  	    'setFormation',
  	    'setFormationTask',
  	    'setFormDir',
  	    'setFriend',
  	    'setFromEditor',
  	    'setFSMVariable',
  	    'setFuel',
  	    'setFuelCargo',
  	    'setGroupIcon',
  	    'setGroupIconParams',
  	    'setGroupIconsSelectable',
  	    'setGroupIconsVisible',
  	    'setGroupid',
  	    'setGroupIdGlobal',
  	    'setGroupOwner',
  	    'setGusts',
  	    'setHideBehind',
  	    'setHit',
  	    'setHitIndex',
  	    'setHitPointDamage',
  	    'setHorizonParallaxCoef',
  	    'setHUDMovementLevels',
  	    'setHumidity',
  	    'setIdentity',
  	    'setImportance',
  	    'setInfoPanel',
  	    'setLeader',
  	    'setLightAmbient',
  	    'setLightAttenuation',
  	    'setLightBrightness',
  	    'setLightColor',
  	    'setLightConePars',
  	    'setLightDayLight',
  	    'setLightFlareMaxDistance',
  	    'setLightFlareSize',
  	    'setLightIntensity',
  	    'setLightIR',
  	    'setLightnings',
  	    'setLightUseFlare',
  	    'setLightVolumeShape',
  	    'setLocalWindParams',
  	    'setMagazineTurretAmmo',
  	    'setMarkerAlpha',
  	    'setMarkerAlphaLocal',
  	    'setMarkerBrush',
  	    'setMarkerBrushLocal',
  	    'setMarkerColor',
  	    'setMarkerColorLocal',
  	    'setMarkerDir',
  	    'setMarkerDirLocal',
  	    'setMarkerPolyline',
  	    'setMarkerPolylineLocal',
  	    'setMarkerPos',
  	    'setMarkerPosLocal',
  	    'setMarkerShadow',
  	    'setMarkerShadowLocal',
  	    'setMarkerShape',
  	    'setMarkerShapeLocal',
  	    'setMarkerSize',
  	    'setMarkerSizeLocal',
  	    'setMarkerText',
  	    'setMarkerTextLocal',
  	    'setMarkerType',
  	    'setMarkerTypeLocal',
  	    'setMass',
  	    'setMaxLoad',
  	    'setMimic',
  	    'setMissileTarget',
  	    'setMissileTargetPos',
  	    'setMousePosition',
  	    'setMusicEffect',
  	    'setMusicEventHandler',
  	    'setName',
  	    'setNameSound',
  	    'setObjectArguments',
  	    'setObjectMaterial',
  	    'setObjectMaterialGlobal',
  	    'setObjectProxy',
  	    'setObjectScale',
  	    'setObjectTexture',
  	    'setObjectTextureGlobal',
  	    'setObjectViewDistance',
  	    'setOpticsMode',
  	    'setOvercast',
  	    'setOwner',
  	    'setOxygenRemaining',
  	    'setParticleCircle',
  	    'setParticleClass',
  	    'setParticleFire',
  	    'setParticleParams',
  	    'setParticleRandom',
  	    'setPilotCameraDirection',
  	    'setPilotCameraRotation',
  	    'setPilotCameraTarget',
  	    'setPilotLight',
  	    'setPiPEffect',
  	    'setPiPViewDistance',
  	    'setPitch',
  	    'setPlateNumber',
  	    'setPlayable',
  	    'setPlayerRespawnTime',
  	    'setPlayerVoNVolume',
  	    'setPos',
  	    'setPosASL',
  	    'setPosASL2',
  	    'setPosASLW',
  	    'setPosATL',
  	    'setPosition',
  	    'setPosWorld',
  	    'setPylonLoadout',
  	    'setPylonsPriority',
  	    'setRadioMsg',
  	    'setRain',
  	    'setRainbow',
  	    'setRandomLip',
  	    'setRank',
  	    'setRectangular',
  	    'setRepairCargo',
  	    'setRotorBrakeRTD',
  	    'setShadowDistance',
  	    'setShotParents',
  	    'setSide',
  	    'setSimpleTaskAlwaysVisible',
  	    'setSimpleTaskCustomData',
  	    'setSimpleTaskDescription',
  	    'setSimpleTaskDestination',
  	    'setSimpleTaskTarget',
  	    'setSimpleTaskType',
  	    'setSimulWeatherLayers',
  	    'setSize',
  	    'setSkill',
  	    'setSlingLoad',
  	    'setSoundEffect',
  	    'setSpeaker',
  	    'setSpeech',
  	    'setSpeedMode',
  	    'setStamina',
  	    'setStaminaScheme',
  	    'setStatValue',
  	    'setSuppression',
  	    'setSystemOfUnits',
  	    'setTargetAge',
  	    'setTaskMarkerOffset',
  	    'setTaskResult',
  	    'setTaskState',
  	    'setTerrainGrid',
  	    'setTerrainHeight',
  	    'setText',
  	    'setTimeMultiplier',
  	    'setTiParameter',
  	    'setTitleEffect',
  	    'setTowParent',
  	    'setTrafficDensity',
  	    'setTrafficDistance',
  	    'setTrafficGap',
  	    'setTrafficSpeed',
  	    'setTriggerActivation',
  	    'setTriggerArea',
  	    'setTriggerInterval',
  	    'setTriggerStatements',
  	    'setTriggerText',
  	    'setTriggerTimeout',
  	    'setTriggerType',
  	    'setTurretLimits',
  	    'setTurretOpticsMode',
  	    'setType',
  	    'setUnconscious',
  	    'setUnitAbility',
  	    'setUnitCombatMode',
  	    'setUnitFreefallHeight',
  	    'setUnitLoadout',
  	    'setUnitPos',
  	    'setUnitPosWeak',
  	    'setUnitRank',
  	    'setUnitRecoilCoefficient',
  	    'setUnitTrait',
  	    'setUnloadInCombat',
  	    'setUserActionText',
  	    'setUserMFDText',
  	    'setUserMFDValue',
  	    'setVariable',
  	    'setVectorDir',
  	    'setVectorDirAndUp',
  	    'setVectorUp',
  	    'setVehicleAmmo',
  	    'setVehicleAmmoDef',
  	    'setVehicleArmor',
  	    'setVehicleCargo',
  	    'setVehicleId',
  	    'setVehicleLock',
  	    'setVehiclePosition',
  	    'setVehicleRadar',
  	    'setVehicleReceiveRemoteTargets',
  	    'setVehicleReportOwnPosition',
  	    'setVehicleReportRemoteTargets',
  	    'setVehicleTiPars',
  	    'setVehicleVarName',
  	    'setVelocity',
  	    'setVelocityModelSpace',
  	    'setVelocityTransformation',
  	    'setViewDistance',
  	    'setVisibleIfTreeCollapsed',
  	    'setWantedRPMRTD',
  	    'setWaves',
  	    'setWaypointBehaviour',
  	    'setWaypointCombatMode',
  	    'setWaypointCompletionRadius',
  	    'setWaypointDescription',
  	    'setWaypointForceBehaviour',
  	    'setWaypointFormation',
  	    'setWaypointHousePosition',
  	    'setWaypointLoiterAltitude',
  	    'setWaypointLoiterRadius',
  	    'setWaypointLoiterType',
  	    'setWaypointName',
  	    'setWaypointPosition',
  	    'setWaypointScript',
  	    'setWaypointSpeed',
  	    'setWaypointStatements',
  	    'setWaypointTimeout',
  	    'setWaypointType',
  	    'setWaypointVisible',
  	    'setWeaponReloadingTime',
  	    'setWeaponZeroing',
  	    'setWind',
  	    'setWindDir',
  	    'setWindForce',
  	    'setWindStr',
  	    'setWingForceScaleRTD',
  	    'setWPPos',
  	    'show3DIcons',
  	    'showChat',
  	    'showCinemaBorder',
  	    'showCommandingMenu',
  	    'showCompass',
  	    'showCuratorCompass',
  	    'showGps',
  	    'showHUD',
  	    'showLegend',
  	    'showMap',
  	    'shownArtilleryComputer',
  	    'shownChat',
  	    'shownCompass',
  	    'shownCuratorCompass',
  	    'showNewEditorObject',
  	    'shownGps',
  	    'shownHUD',
  	    'shownMap',
  	    'shownPad',
  	    'shownRadio',
  	    'shownScoretable',
  	    'shownSubtitles',
  	    'shownUAVFeed',
  	    'shownWarrant',
  	    'shownWatch',
  	    'showPad',
  	    'showRadio',
  	    'showScoretable',
  	    'showSubtitles',
  	    'showUAVFeed',
  	    'showWarrant',
  	    'showWatch',
  	    'showWaypoint',
  	    'showWaypoints',
  	    'side',
  	    'sideChat',
  	    'sideRadio',
  	    'simpleTasks',
  	    'simulationEnabled',
  	    'simulCloudDensity',
  	    'simulCloudOcclusion',
  	    'simulInClouds',
  	    'simulWeatherSync',
  	    'sin',
  	    'size',
  	    'sizeOf',
  	    'skill',
  	    'skillFinal',
  	    'skipTime',
  	    'sleep',
  	    'sliderPosition',
  	    'sliderRange',
  	    'sliderSetPosition',
  	    'sliderSetRange',
  	    'sliderSetSpeed',
  	    'sliderSpeed',
  	    'slingLoadAssistantShown',
  	    'soldierMagazines',
  	    'someAmmo',
  	    'sort',
  	    'soundVolume',
  	    'spawn',
  	    'speaker',
  	    'speechVolume',
  	    'speed',
  	    'speedMode',
  	    'splitString',
  	    'sqrt',
  	    'squadParams',
  	    'stance',
  	    'startLoadingScreen',
  	    'stop',
  	    'stopEngineRTD',
  	    'stopped',
  	    'str',
  	    'sunOrMoon',
  	    'supportInfo',
  	    'suppressFor',
  	    'surfaceIsWater',
  	    'surfaceNormal',
  	    'surfaceTexture',
  	    'surfaceType',
  	    'swimInDepth',
  	    'switchableUnits',
  	    'switchAction',
  	    'switchCamera',
  	    'switchGesture',
  	    'switchLight',
  	    'switchMove',
  	    'synchronizedObjects',
  	    'synchronizedTriggers',
  	    'synchronizedWaypoints',
  	    'synchronizeObjectsAdd',
  	    'synchronizeObjectsRemove',
  	    'synchronizeTrigger',
  	    'synchronizeWaypoint',
  	    'systemChat',
  	    'systemOfUnits',
  	    'systemTime',
  	    'systemTimeUTC',
  	    'tan',
  	    'targetKnowledge',
  	    'targets',
  	    'targetsAggregate',
  	    'targetsQuery',
  	    'taskAlwaysVisible',
  	    'taskChildren',
  	    'taskCompleted',
  	    'taskCustomData',
  	    'taskDescription',
  	    'taskDestination',
  	    'taskHint',
  	    'taskMarkerOffset',
  	    'taskName',
  	    'taskParent',
  	    'taskResult',
  	    'taskState',
  	    'taskType',
  	    'teamMember',
  	    'teamName',
  	    'teams',
  	    'teamSwitch',
  	    'teamSwitchEnabled',
  	    'teamType',
  	    'terminate',
  	    'terrainIntersect',
  	    'terrainIntersectASL',
  	    'terrainIntersectAtASL',
  	    'text',
  	    'textLog',
  	    'textLogFormat',
  	    'tg',
  	    'time',
  	    'timeMultiplier',
  	    'titleCut',
  	    'titleFadeOut',
  	    'titleObj',
  	    'titleRsc',
  	    'titleText',
  	    'toArray',
  	    'toFixed',
  	    'toLower',
  	    'toLowerANSI',
  	    'toString',
  	    'toUpper',
  	    'toUpperANSI',
  	    'triggerActivated',
  	    'triggerActivation',
  	    'triggerAmmo',
  	    'triggerArea',
  	    'triggerAttachedVehicle',
  	    'triggerAttachObject',
  	    'triggerAttachVehicle',
  	    'triggerDynamicSimulation',
  	    'triggerInterval',
  	    'triggerStatements',
  	    'triggerText',
  	    'triggerTimeout',
  	    'triggerTimeoutCurrent',
  	    'triggerType',
  	    'trim',
  	    'turretLocal',
  	    'turretOwner',
  	    'turretUnit',
  	    'tvAdd',
  	    'tvClear',
  	    'tvCollapse',
  	    'tvCollapseAll',
  	    'tvCount',
  	    'tvCurSel',
  	    'tvData',
  	    'tvDelete',
  	    'tvExpand',
  	    'tvExpandAll',
  	    'tvIsSelected',
  	    'tvPicture',
  	    'tvPictureRight',
  	    'tvSelection',
  	    'tvSetColor',
  	    'tvSetCurSel',
  	    'tvSetData',
  	    'tvSetPicture',
  	    'tvSetPictureColor',
  	    'tvSetPictureColorDisabled',
  	    'tvSetPictureColorSelected',
  	    'tvSetPictureRight',
  	    'tvSetPictureRightColor',
  	    'tvSetPictureRightColorDisabled',
  	    'tvSetPictureRightColorSelected',
  	    'tvSetSelectColor',
  	    'tvSetSelected',
  	    'tvSetText',
  	    'tvSetTooltip',
  	    'tvSetValue',
  	    'tvSort',
  	    'tvSortAll',
  	    'tvSortByValue',
  	    'tvSortByValueAll',
  	    'tvText',
  	    'tvTooltip',
  	    'tvValue',
  	    'type',
  	    'typeName',
  	    'typeOf',
  	    'UAVControl',
  	    'uiNamespace',
  	    'uiSleep',
  	    'unassignCurator',
  	    'unassignItem',
  	    'unassignTeam',
  	    'unassignVehicle',
  	    'underwater',
  	    'uniform',
  	    'uniformContainer',
  	    'uniformItems',
  	    'uniformMagazines',
  	    'uniqueUnitItems',
  	    'unitAddons',
  	    'unitAimPosition',
  	    'unitAimPositionVisual',
  	    'unitBackpack',
  	    'unitCombatMode',
  	    'unitIsUAV',
  	    'unitPos',
  	    'unitReady',
  	    'unitRecoilCoefficient',
  	    'units',
  	    'unitsBelowHeight',
  	    'unitTurret',
  	    'unlinkItem',
  	    'unlockAchievement',
  	    'unregisterTask',
  	    'updateDrawIcon',
  	    'updateMenuItem',
  	    'updateObjectTree',
  	    'useAIOperMapObstructionTest',
  	    'useAISteeringComponent',
  	    'useAudioTimeForMoves',
  	    'userInputDisabled',
  	    'values',
  	    'vectorAdd',
  	    'vectorCos',
  	    'vectorCrossProduct',
  	    'vectorDiff',
  	    'vectorDir',
  	    'vectorDirVisual',
  	    'vectorDistance',
  	    'vectorDistanceSqr',
  	    'vectorDotProduct',
  	    'vectorFromTo',
  	    'vectorLinearConversion',
  	    'vectorMagnitude',
  	    'vectorMagnitudeSqr',
  	    'vectorModelToWorld',
  	    'vectorModelToWorldVisual',
  	    'vectorMultiply',
  	    'vectorNormalized',
  	    'vectorUp',
  	    'vectorUpVisual',
  	    'vectorWorldToModel',
  	    'vectorWorldToModelVisual',
  	    'vehicle',
  	    'vehicleCargoEnabled',
  	    'vehicleChat',
  	    'vehicleMoveInfo',
  	    'vehicleRadio',
  	    'vehicleReceiveRemoteTargets',
  	    'vehicleReportOwnPosition',
  	    'vehicleReportRemoteTargets',
  	    'vehicles',
  	    'vehicleVarName',
  	    'velocity',
  	    'velocityModelSpace',
  	    'verifySignature',
  	    'vest',
  	    'vestContainer',
  	    'vestItems',
  	    'vestMagazines',
  	    'viewDistance',
  	    'visibleCompass',
  	    'visibleGps',
  	    'visibleMap',
  	    'visiblePosition',
  	    'visiblePositionASL',
  	    'visibleScoretable',
  	    'visibleWatch',
  	    'waves',
  	    'waypointAttachedObject',
  	    'waypointAttachedVehicle',
  	    'waypointAttachObject',
  	    'waypointAttachVehicle',
  	    'waypointBehaviour',
  	    'waypointCombatMode',
  	    'waypointCompletionRadius',
  	    'waypointDescription',
  	    'waypointForceBehaviour',
  	    'waypointFormation',
  	    'waypointHousePosition',
  	    'waypointLoiterAltitude',
  	    'waypointLoiterRadius',
  	    'waypointLoiterType',
  	    'waypointName',
  	    'waypointPosition',
  	    'waypoints',
  	    'waypointScript',
  	    'waypointsEnabledUAV',
  	    'waypointShow',
  	    'waypointSpeed',
  	    'waypointStatements',
  	    'waypointTimeout',
  	    'waypointTimeoutCurrent',
  	    'waypointType',
  	    'waypointVisible',
  	    'weaponAccessories',
  	    'weaponAccessoriesCargo',
  	    'weaponCargo',
  	    'weaponDirection',
  	    'weaponInertia',
  	    'weaponLowered',
  	    'weaponReloadingTime',
  	    'weapons',
  	    'weaponsInfo',
  	    'weaponsItems',
  	    'weaponsItemsCargo',
  	    'weaponState',
  	    'weaponsTurret',
  	    'weightRTD',
  	    'WFSideText',
  	    'wind',
  	    'windDir',
  	    'windRTD',
  	    'windStr',
  	    'wingsForcesRTD',
  	    'worldName',
  	    'worldSize',
  	    'worldToModel',
  	    'worldToModelVisual',
  	    'worldToScreen'
  	  ];
  	  
  	  // list of keywords from:
  	  // https://community.bistudio.com/wiki/PreProcessor_Commands
  	  const PREPROCESSOR = {
  	    className: 'meta',
  	    begin: /#\s*[a-z]+\b/,
  	    end: /$/,
  	    keywords: 'define undef ifdef ifndef else endif include if',
  	    contains: [
  	      {
  	        begin: /\\\n/,
  	        relevance: 0
  	      },
  	      hljs.inherit(STRINGS, { className: 'string' }),
  	      {
  	        begin: /<[^\n>]*>/,
  	        end: /$/,
  	        illegal: '\\n'
  	      },
  	      hljs.C_LINE_COMMENT_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE
  	    ]
  	  };
  	  
  	  return {
  	    name: 'SQF',
  	    case_insensitive: true,
  	    keywords: {
  	      keyword: KEYWORDS,
  	      built_in: BUILT_IN,
  	      literal: LITERAL
  	    },
  	    contains: [
  	      hljs.C_LINE_COMMENT_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE,
  	      hljs.NUMBER_MODE,
  	      VARIABLE,
  	      FUNCTION,
  	      STRINGS,
  	      PREPROCESSOR
  	    ],
  	    illegal: [
  	      //$ is only valid when used with Hex numbers (e.g. $FF)
  	      /\$[^a-fA-F0-9]/, 
  	      /\w\$/,
  	      /\?/,      //There's no ? in SQF
  	      /@/,       //There's no @ in SQF
  	      // Brute-force-fixing the build error. See https://github.com/highlightjs/highlight.js/pull/3193#issuecomment-843088729
  	      / \| /,
  	      // . is only used in numbers
  	      /[a-zA-Z_]\./,
  	      /\:\=/,
  	      /\[\:/
  	    ]
  	  };
  	}

  	sqf_1 = sqf;
  	return sqf_1;
  }

  /*
   Language: SQL
   Website: https://en.wikipedia.org/wiki/SQL
   Category: common, database
   */

  var sql_1;
  var hasRequiredSql;

  function requireSql () {
  	if (hasRequiredSql) return sql_1;
  	hasRequiredSql = 1;
  	/*

  	Goals:

  	SQL is intended to highlight basic/common SQL keywords and expressions

  	- If pretty much every single SQL server includes supports, then it's a canidate.
  	- It is NOT intended to include tons of vendor specific keywords (Oracle, MySQL,
  	  PostgreSQL) although the list of data types is purposely a bit more expansive.
  	- For more specific SQL grammars please see:
  	  - PostgreSQL and PL/pgSQL - core
  	  - T-SQL - https://github.com/highlightjs/highlightjs-tsql
  	  - sql_more (core)

  	 */

  	function sql(hljs) {
  	  const regex = hljs.regex;
  	  const COMMENT_MODE = hljs.COMMENT('--', '$');
  	  const STRING = {
  	    className: 'string',
  	    variants: [
  	      {
  	        begin: /'/,
  	        end: /'/,
  	        contains: [ { begin: /''/ } ]
  	      }
  	    ]
  	  };
  	  const QUOTED_IDENTIFIER = {
  	    begin: /"/,
  	    end: /"/,
  	    contains: [ { begin: /""/ } ]
  	  };

  	  const LITERALS = [
  	    "true",
  	    "false",
  	    // Not sure it's correct to call NULL literal, and clauses like IS [NOT] NULL look strange that way.
  	    // "null",
  	    "unknown"
  	  ];

  	  const MULTI_WORD_TYPES = [
  	    "double precision",
  	    "large object",
  	    "with timezone",
  	    "without timezone"
  	  ];

  	  const TYPES = [
  	    'bigint',
  	    'binary',
  	    'blob',
  	    'boolean',
  	    'char',
  	    'character',
  	    'clob',
  	    'date',
  	    'dec',
  	    'decfloat',
  	    'decimal',
  	    'float',
  	    'int',
  	    'integer',
  	    'interval',
  	    'nchar',
  	    'nclob',
  	    'national',
  	    'numeric',
  	    'real',
  	    'row',
  	    'smallint',
  	    'time',
  	    'timestamp',
  	    'varchar',
  	    'varying', // modifier (character varying)
  	    'varbinary'
  	  ];

  	  const NON_RESERVED_WORDS = [
  	    "add",
  	    "asc",
  	    "collation",
  	    "desc",
  	    "final",
  	    "first",
  	    "last",
  	    "view"
  	  ];

  	  // https://jakewheat.github.io/sql-overview/sql-2016-foundation-grammar.html#reserved-word
  	  const RESERVED_WORDS = [
  	    "abs",
  	    "acos",
  	    "all",
  	    "allocate",
  	    "alter",
  	    "and",
  	    "any",
  	    "are",
  	    "array",
  	    "array_agg",
  	    "array_max_cardinality",
  	    "as",
  	    "asensitive",
  	    "asin",
  	    "asymmetric",
  	    "at",
  	    "atan",
  	    "atomic",
  	    "authorization",
  	    "avg",
  	    "begin",
  	    "begin_frame",
  	    "begin_partition",
  	    "between",
  	    "bigint",
  	    "binary",
  	    "blob",
  	    "boolean",
  	    "both",
  	    "by",
  	    "call",
  	    "called",
  	    "cardinality",
  	    "cascaded",
  	    "case",
  	    "cast",
  	    "ceil",
  	    "ceiling",
  	    "char",
  	    "char_length",
  	    "character",
  	    "character_length",
  	    "check",
  	    "classifier",
  	    "clob",
  	    "close",
  	    "coalesce",
  	    "collate",
  	    "collect",
  	    "column",
  	    "commit",
  	    "condition",
  	    "connect",
  	    "constraint",
  	    "contains",
  	    "convert",
  	    "copy",
  	    "corr",
  	    "corresponding",
  	    "cos",
  	    "cosh",
  	    "count",
  	    "covar_pop",
  	    "covar_samp",
  	    "create",
  	    "cross",
  	    "cube",
  	    "cume_dist",
  	    "current",
  	    "current_catalog",
  	    "current_date",
  	    "current_default_transform_group",
  	    "current_path",
  	    "current_role",
  	    "current_row",
  	    "current_schema",
  	    "current_time",
  	    "current_timestamp",
  	    "current_path",
  	    "current_role",
  	    "current_transform_group_for_type",
  	    "current_user",
  	    "cursor",
  	    "cycle",
  	    "date",
  	    "day",
  	    "deallocate",
  	    "dec",
  	    "decimal",
  	    "decfloat",
  	    "declare",
  	    "default",
  	    "define",
  	    "delete",
  	    "dense_rank",
  	    "deref",
  	    "describe",
  	    "deterministic",
  	    "disconnect",
  	    "distinct",
  	    "double",
  	    "drop",
  	    "dynamic",
  	    "each",
  	    "element",
  	    "else",
  	    "empty",
  	    "end",
  	    "end_frame",
  	    "end_partition",
  	    "end-exec",
  	    "equals",
  	    "escape",
  	    "every",
  	    "except",
  	    "exec",
  	    "execute",
  	    "exists",
  	    "exp",
  	    "external",
  	    "extract",
  	    "false",
  	    "fetch",
  	    "filter",
  	    "first_value",
  	    "float",
  	    "floor",
  	    "for",
  	    "foreign",
  	    "frame_row",
  	    "free",
  	    "from",
  	    "full",
  	    "function",
  	    "fusion",
  	    "get",
  	    "global",
  	    "grant",
  	    "group",
  	    "grouping",
  	    "groups",
  	    "having",
  	    "hold",
  	    "hour",
  	    "identity",
  	    "in",
  	    "indicator",
  	    "initial",
  	    "inner",
  	    "inout",
  	    "insensitive",
  	    "insert",
  	    "int",
  	    "integer",
  	    "intersect",
  	    "intersection",
  	    "interval",
  	    "into",
  	    "is",
  	    "join",
  	    "json_array",
  	    "json_arrayagg",
  	    "json_exists",
  	    "json_object",
  	    "json_objectagg",
  	    "json_query",
  	    "json_table",
  	    "json_table_primitive",
  	    "json_value",
  	    "lag",
  	    "language",
  	    "large",
  	    "last_value",
  	    "lateral",
  	    "lead",
  	    "leading",
  	    "left",
  	    "like",
  	    "like_regex",
  	    "listagg",
  	    "ln",
  	    "local",
  	    "localtime",
  	    "localtimestamp",
  	    "log",
  	    "log10",
  	    "lower",
  	    "match",
  	    "match_number",
  	    "match_recognize",
  	    "matches",
  	    "max",
  	    "member",
  	    "merge",
  	    "method",
  	    "min",
  	    "minute",
  	    "mod",
  	    "modifies",
  	    "module",
  	    "month",
  	    "multiset",
  	    "national",
  	    "natural",
  	    "nchar",
  	    "nclob",
  	    "new",
  	    "no",
  	    "none",
  	    "normalize",
  	    "not",
  	    "nth_value",
  	    "ntile",
  	    "null",
  	    "nullif",
  	    "numeric",
  	    "octet_length",
  	    "occurrences_regex",
  	    "of",
  	    "offset",
  	    "old",
  	    "omit",
  	    "on",
  	    "one",
  	    "only",
  	    "open",
  	    "or",
  	    "order",
  	    "out",
  	    "outer",
  	    "over",
  	    "overlaps",
  	    "overlay",
  	    "parameter",
  	    "partition",
  	    "pattern",
  	    "per",
  	    "percent",
  	    "percent_rank",
  	    "percentile_cont",
  	    "percentile_disc",
  	    "period",
  	    "portion",
  	    "position",
  	    "position_regex",
  	    "power",
  	    "precedes",
  	    "precision",
  	    "prepare",
  	    "primary",
  	    "procedure",
  	    "ptf",
  	    "range",
  	    "rank",
  	    "reads",
  	    "real",
  	    "recursive",
  	    "ref",
  	    "references",
  	    "referencing",
  	    "regr_avgx",
  	    "regr_avgy",
  	    "regr_count",
  	    "regr_intercept",
  	    "regr_r2",
  	    "regr_slope",
  	    "regr_sxx",
  	    "regr_sxy",
  	    "regr_syy",
  	    "release",
  	    "result",
  	    "return",
  	    "returns",
  	    "revoke",
  	    "right",
  	    "rollback",
  	    "rollup",
  	    "row",
  	    "row_number",
  	    "rows",
  	    "running",
  	    "savepoint",
  	    "scope",
  	    "scroll",
  	    "search",
  	    "second",
  	    "seek",
  	    "select",
  	    "sensitive",
  	    "session_user",
  	    "set",
  	    "show",
  	    "similar",
  	    "sin",
  	    "sinh",
  	    "skip",
  	    "smallint",
  	    "some",
  	    "specific",
  	    "specifictype",
  	    "sql",
  	    "sqlexception",
  	    "sqlstate",
  	    "sqlwarning",
  	    "sqrt",
  	    "start",
  	    "static",
  	    "stddev_pop",
  	    "stddev_samp",
  	    "submultiset",
  	    "subset",
  	    "substring",
  	    "substring_regex",
  	    "succeeds",
  	    "sum",
  	    "symmetric",
  	    "system",
  	    "system_time",
  	    "system_user",
  	    "table",
  	    "tablesample",
  	    "tan",
  	    "tanh",
  	    "then",
  	    "time",
  	    "timestamp",
  	    "timezone_hour",
  	    "timezone_minute",
  	    "to",
  	    "trailing",
  	    "translate",
  	    "translate_regex",
  	    "translation",
  	    "treat",
  	    "trigger",
  	    "trim",
  	    "trim_array",
  	    "true",
  	    "truncate",
  	    "uescape",
  	    "union",
  	    "unique",
  	    "unknown",
  	    "unnest",
  	    "update",
  	    "upper",
  	    "user",
  	    "using",
  	    "value",
  	    "values",
  	    "value_of",
  	    "var_pop",
  	    "var_samp",
  	    "varbinary",
  	    "varchar",
  	    "varying",
  	    "versioning",
  	    "when",
  	    "whenever",
  	    "where",
  	    "width_bucket",
  	    "window",
  	    "with",
  	    "within",
  	    "without",
  	    "year",
  	  ];

  	  // these are reserved words we have identified to be functions
  	  // and should only be highlighted in a dispatch-like context
  	  // ie, array_agg(...), etc.
  	  const RESERVED_FUNCTIONS = [
  	    "abs",
  	    "acos",
  	    "array_agg",
  	    "asin",
  	    "atan",
  	    "avg",
  	    "cast",
  	    "ceil",
  	    "ceiling",
  	    "coalesce",
  	    "corr",
  	    "cos",
  	    "cosh",
  	    "count",
  	    "covar_pop",
  	    "covar_samp",
  	    "cume_dist",
  	    "dense_rank",
  	    "deref",
  	    "element",
  	    "exp",
  	    "extract",
  	    "first_value",
  	    "floor",
  	    "json_array",
  	    "json_arrayagg",
  	    "json_exists",
  	    "json_object",
  	    "json_objectagg",
  	    "json_query",
  	    "json_table",
  	    "json_table_primitive",
  	    "json_value",
  	    "lag",
  	    "last_value",
  	    "lead",
  	    "listagg",
  	    "ln",
  	    "log",
  	    "log10",
  	    "lower",
  	    "max",
  	    "min",
  	    "mod",
  	    "nth_value",
  	    "ntile",
  	    "nullif",
  	    "percent_rank",
  	    "percentile_cont",
  	    "percentile_disc",
  	    "position",
  	    "position_regex",
  	    "power",
  	    "rank",
  	    "regr_avgx",
  	    "regr_avgy",
  	    "regr_count",
  	    "regr_intercept",
  	    "regr_r2",
  	    "regr_slope",
  	    "regr_sxx",
  	    "regr_sxy",
  	    "regr_syy",
  	    "row_number",
  	    "sin",
  	    "sinh",
  	    "sqrt",
  	    "stddev_pop",
  	    "stddev_samp",
  	    "substring",
  	    "substring_regex",
  	    "sum",
  	    "tan",
  	    "tanh",
  	    "translate",
  	    "translate_regex",
  	    "treat",
  	    "trim",
  	    "trim_array",
  	    "unnest",
  	    "upper",
  	    "value_of",
  	    "var_pop",
  	    "var_samp",
  	    "width_bucket",
  	  ];

  	  // these functions can
  	  const POSSIBLE_WITHOUT_PARENS = [
  	    "current_catalog",
  	    "current_date",
  	    "current_default_transform_group",
  	    "current_path",
  	    "current_role",
  	    "current_schema",
  	    "current_transform_group_for_type",
  	    "current_user",
  	    "session_user",
  	    "system_time",
  	    "system_user",
  	    "current_time",
  	    "localtime",
  	    "current_timestamp",
  	    "localtimestamp"
  	  ];

  	  // those exist to boost relevance making these very
  	  // "SQL like" keyword combos worth +1 extra relevance
  	  const COMBOS = [
  	    "create table",
  	    "insert into",
  	    "primary key",
  	    "foreign key",
  	    "not null",
  	    "alter table",
  	    "add constraint",
  	    "grouping sets",
  	    "on overflow",
  	    "character set",
  	    "respect nulls",
  	    "ignore nulls",
  	    "nulls first",
  	    "nulls last",
  	    "depth first",
  	    "breadth first"
  	  ];

  	  const FUNCTIONS = RESERVED_FUNCTIONS;

  	  const KEYWORDS = [
  	    ...RESERVED_WORDS,
  	    ...NON_RESERVED_WORDS
  	  ].filter((keyword) => {
  	    return !RESERVED_FUNCTIONS.includes(keyword);
  	  });

  	  const VARIABLE = {
  	    className: "variable",
  	    begin: /@[a-z0-9][a-z0-9_]*/,
  	  };

  	  const OPERATOR = {
  	    className: "operator",
  	    begin: /[-+*/=%^~]|&&?|\|\|?|!=?|<(?:=>?|<|>)?|>[>=]?/,
  	    relevance: 0,
  	  };

  	  const FUNCTION_CALL = {
  	    begin: regex.concat(/\b/, regex.either(...FUNCTIONS), /\s*\(/),
  	    relevance: 0,
  	    keywords: { built_in: FUNCTIONS }
  	  };

  	  // keywords with less than 3 letters are reduced in relevancy
  	  function reduceRelevancy(list, {
  	    exceptions, when
  	  } = {}) {
  	    const qualifyFn = when;
  	    exceptions = exceptions || [];
  	    return list.map((item) => {
  	      if (item.match(/\|\d+$/) || exceptions.includes(item)) {
  	        return item;
  	      } else if (qualifyFn(item)) {
  	        return `${item}|0`;
  	      } else {
  	        return item;
  	      }
  	    });
  	  }

  	  return {
  	    name: 'SQL',
  	    case_insensitive: true,
  	    // does not include {} or HTML tags `</`
  	    illegal: /[{}]|<\//,
  	    keywords: {
  	      $pattern: /\b[\w\.]+/,
  	      keyword:
  	        reduceRelevancy(KEYWORDS, { when: (x) => x.length < 3 }),
  	      literal: LITERALS,
  	      type: TYPES,
  	      built_in: POSSIBLE_WITHOUT_PARENS
  	    },
  	    contains: [
  	      {
  	        begin: regex.either(...COMBOS),
  	        relevance: 0,
  	        keywords: {
  	          $pattern: /[\w\.]+/,
  	          keyword: KEYWORDS.concat(COMBOS),
  	          literal: LITERALS,
  	          type: TYPES
  	        },
  	      },
  	      {
  	        className: "type",
  	        begin: regex.either(...MULTI_WORD_TYPES)
  	      },
  	      FUNCTION_CALL,
  	      VARIABLE,
  	      STRING,
  	      QUOTED_IDENTIFIER,
  	      hljs.C_NUMBER_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE,
  	      COMMENT_MODE,
  	      OPERATOR
  	    ]
  	  };
  	}

  	sql_1 = sql;
  	return sql_1;
  }

  /*
  Language: Stan
  Description: The Stan probabilistic programming language
  Author: Sean Pinkney <sean.pinkney@gmail.com>
  Website: http://mc-stan.org/
  Category: scientific
  */

  var stan_1;
  var hasRequiredStan;

  function requireStan () {
  	if (hasRequiredStan) return stan_1;
  	hasRequiredStan = 1;
  	function stan(hljs) {
  	  const regex = hljs.regex;
  	  // variable names cannot conflict with block identifiers
  	  const BLOCKS = [
  	    'functions',
  	    'model',
  	    'data',
  	    'parameters',
  	    'quantities',
  	    'transformed',
  	    'generated'
  	  ];

  	  const STATEMENTS = [
  	    'for',
  	    'in',
  	    'if',
  	    'else',
  	    'while',
  	    'break',
  	    'continue',
  	    'return'
  	  ];

  	  const TYPES = [
  	    'array',
  	    'complex',
  	    'int',
  	    'real',
  	    'vector',
  	    'ordered',
  	    'positive_ordered',
  	    'simplex',
  	    'unit_vector',
  	    'row_vector',
  	    'matrix',
  	    'cholesky_factor_corr|10',
  	    'cholesky_factor_cov|10',
  	    'corr_matrix|10',
  	    'cov_matrix|10',
  	    'void'
  	  ];

  	  // to get the functions list
  	  // clone the [stan-docs repo](https://github.com/stan-dev/docs)
  	  // then cd into it and run this bash script https://gist.github.com/joshgoebel/dcd33f82d4059a907c986049893843cf
  	  //
  	  // the output files are
  	  // distributions_quoted.txt
  	  // functions_quoted.txt

  	  const FUNCTIONS = [
  	    'Phi',
  	    'Phi_approx',
  	    'abs',
  	    'acos',
  	    'acosh',
  	    'add_diag',
  	    'algebra_solver',
  	    'algebra_solver_newton',
  	    'append_array',
  	    'append_col',
  	    'append_row',
  	    'asin',
  	    'asinh',
  	    'atan',
  	    'atan2',
  	    'atanh',
  	    'bessel_first_kind',
  	    'bessel_second_kind',
  	    'binary_log_loss',
  	    'binomial_coefficient_log',
  	    'block',
  	    'cbrt',
  	    'ceil',
  	    'chol2inv',
  	    'cholesky_decompose',
  	    'choose',
  	    'col',
  	    'cols',
  	    'columns_dot_product',
  	    'columns_dot_self',
  	    'conj',
  	    'cos',
  	    'cosh',
  	    'cov_exp_quad',
  	    'crossprod',
  	    'csr_extract_u',
  	    'csr_extract_v',
  	    'csr_extract_w',
  	    'csr_matrix_times_vector',
  	    'csr_to_dense_matrix',
  	    'cumulative_sum',
  	    'determinant',
  	    'diag_matrix',
  	    'diag_post_multiply',
  	    'diag_pre_multiply',
  	    'diagonal',
  	    'digamma',
  	    'dims',
  	    'distance',
  	    'dot_product',
  	    'dot_self',
  	    'eigenvalues_sym',
  	    'eigenvectors_sym',
  	    'erf',
  	    'erfc',
  	    'exp',
  	    'exp2',
  	    'expm1',
  	    'fabs',
  	    'falling_factorial',
  	    'fdim',
  	    'floor',
  	    'fma',
  	    'fmax',
  	    'fmin',
  	    'fmod',
  	    'gamma_p',
  	    'gamma_q',
  	    'generalized_inverse',
  	    'get_imag',
  	    'get_lp',
  	    'get_real',
  	    'head',
  	    'hmm_hidden_state_prob',
  	    'hmm_marginal',
  	    'hypot',
  	    'identity_matrix',
  	    'inc_beta',
  	    'int_step',
  	    'integrate_1d',
  	    'integrate_ode',
  	    'integrate_ode_adams',
  	    'integrate_ode_bdf',
  	    'integrate_ode_rk45',
  	    'inv',
  	    'inv_Phi',
  	    'inv_cloglog',
  	    'inv_logit',
  	    'inv_sqrt',
  	    'inv_square',
  	    'inverse',
  	    'inverse_spd',
  	    'is_inf',
  	    'is_nan',
  	    'lambert_w0',
  	    'lambert_wm1',
  	    'lbeta',
  	    'lchoose',
  	    'ldexp',
  	    'lgamma',
  	    'linspaced_array',
  	    'linspaced_int_array',
  	    'linspaced_row_vector',
  	    'linspaced_vector',
  	    'lmgamma',
  	    'lmultiply',
  	    'log',
  	    'log1m',
  	    'log1m_exp',
  	    'log1m_inv_logit',
  	    'log1p',
  	    'log1p_exp',
  	    'log_determinant',
  	    'log_diff_exp',
  	    'log_falling_factorial',
  	    'log_inv_logit',
  	    'log_inv_logit_diff',
  	    'log_mix',
  	    'log_modified_bessel_first_kind',
  	    'log_rising_factorial',
  	    'log_softmax',
  	    'log_sum_exp',
  	    'logit',
  	    'machine_precision',
  	    'map_rect',
  	    'matrix_exp',
  	    'matrix_exp_multiply',
  	    'matrix_power',
  	    'max',
  	    'mdivide_left_spd',
  	    'mdivide_left_tri_low',
  	    'mdivide_right_spd',
  	    'mdivide_right_tri_low',
  	    'mean',
  	    'min',
  	    'modified_bessel_first_kind',
  	    'modified_bessel_second_kind',
  	    'multiply_log',
  	    'multiply_lower_tri_self_transpose',
  	    'negative_infinity',
  	    'norm',
  	    'not_a_number',
  	    'num_elements',
  	    'ode_adams',
  	    'ode_adams_tol',
  	    'ode_adjoint_tol_ctl',
  	    'ode_bdf',
  	    'ode_bdf_tol',
  	    'ode_ckrk',
  	    'ode_ckrk_tol',
  	    'ode_rk45',
  	    'ode_rk45_tol',
  	    'one_hot_array',
  	    'one_hot_int_array',
  	    'one_hot_row_vector',
  	    'one_hot_vector',
  	    'ones_array',
  	    'ones_int_array',
  	    'ones_row_vector',
  	    'ones_vector',
  	    'owens_t',
  	    'polar',
  	    'positive_infinity',
  	    'pow',
  	    'print',
  	    'prod',
  	    'proj',
  	    'qr_Q',
  	    'qr_R',
  	    'qr_thin_Q',
  	    'qr_thin_R',
  	    'quad_form',
  	    'quad_form_diag',
  	    'quad_form_sym',
  	    'quantile',
  	    'rank',
  	    'reduce_sum',
  	    'reject',
  	    'rep_array',
  	    'rep_matrix',
  	    'rep_row_vector',
  	    'rep_vector',
  	    'reverse',
  	    'rising_factorial',
  	    'round',
  	    'row',
  	    'rows',
  	    'rows_dot_product',
  	    'rows_dot_self',
  	    'scale_matrix_exp_multiply',
  	    'sd',
  	    'segment',
  	    'sin',
  	    'singular_values',
  	    'sinh',
  	    'size',
  	    'softmax',
  	    'sort_asc',
  	    'sort_desc',
  	    'sort_indices_asc',
  	    'sort_indices_desc',
  	    'sqrt',
  	    'square',
  	    'squared_distance',
  	    'step',
  	    'sub_col',
  	    'sub_row',
  	    'sum',
  	    'svd_U',
  	    'svd_V',
  	    'symmetrize_from_lower_tri',
  	    'tail',
  	    'tan',
  	    'tanh',
  	    'target',
  	    'tcrossprod',
  	    'tgamma',
  	    'to_array_1d',
  	    'to_array_2d',
  	    'to_complex',
  	    'to_matrix',
  	    'to_row_vector',
  	    'to_vector',
  	    'trace',
  	    'trace_gen_quad_form',
  	    'trace_quad_form',
  	    'trigamma',
  	    'trunc',
  	    'uniform_simplex',
  	    'variance',
  	    'zeros_array',
  	    'zeros_int_array',
  	    'zeros_row_vector'
  	  ];

  	  const DISTRIBUTIONS = [
  	    'bernoulli',
  	    'bernoulli_logit',
  	    'bernoulli_logit_glm',
  	    'beta',
  	    'beta_binomial',
  	    'beta_proportion',
  	    'binomial',
  	    'binomial_logit',
  	    'categorical',
  	    'categorical_logit',
  	    'categorical_logit_glm',
  	    'cauchy',
  	    'chi_square',
  	    'dirichlet',
  	    'discrete_range',
  	    'double_exponential',
  	    'exp_mod_normal',
  	    'exponential',
  	    'frechet',
  	    'gamma',
  	    'gaussian_dlm_obs',
  	    'gumbel',
  	    'hmm_latent',
  	    'hypergeometric',
  	    'inv_chi_square',
  	    'inv_gamma',
  	    'inv_wishart',
  	    'lkj_corr',
  	    'lkj_corr_cholesky',
  	    'logistic',
  	    'lognormal',
  	    'multi_gp',
  	    'multi_gp_cholesky',
  	    'multi_normal',
  	    'multi_normal_cholesky',
  	    'multi_normal_prec',
  	    'multi_student_t',
  	    'multinomial',
  	    'multinomial_logit',
  	    'neg_binomial',
  	    'neg_binomial_2',
  	    'neg_binomial_2_log',
  	    'neg_binomial_2_log_glm',
  	    'normal',
  	    'normal_id_glm',
  	    'ordered_logistic',
  	    'ordered_logistic_glm',
  	    'ordered_probit',
  	    'pareto',
  	    'pareto_type_2',
  	    'poisson',
  	    'poisson_log',
  	    'poisson_log_glm',
  	    'rayleigh',
  	    'scaled_inv_chi_square',
  	    'skew_double_exponential',
  	    'skew_normal',
  	    'std_normal',
  	    'student_t',
  	    'uniform',
  	    'von_mises',
  	    'weibull',
  	    'wiener',
  	    'wishart'
  	  ];

  	  const BLOCK_COMMENT = hljs.COMMENT(
  	    /\/\*/,
  	    /\*\//,
  	    {
  	      relevance: 0,
  	      contains: [
  	        {
  	          scope: 'doctag',
  	          match: /@(return|param)/
  	        }
  	      ]
  	    }
  	  );

  	  const INCLUDE = {
  	    scope: 'meta',
  	    begin: /#include\b/,
  	    end: /$/,
  	    contains: [
  	      {
  	        match: /[a-z][a-z-._]+/,
  	        scope: 'string'
  	      },
  	      hljs.C_LINE_COMMENT_MODE
  	    ]
  	  };

  	  const RANGE_CONSTRAINTS = [
  	    "lower",
  	    "upper",
  	    "offset",
  	    "multiplier"
  	  ];

  	  return {
  	    name: 'Stan',
  	    aliases: [ 'stanfuncs' ],
  	    keywords: {
  	      $pattern: hljs.IDENT_RE,
  	      title: BLOCKS,
  	      type: TYPES,
  	      keyword: STATEMENTS,
  	      built_in: FUNCTIONS
  	    },
  	    contains: [
  	      hljs.C_LINE_COMMENT_MODE,
  	      INCLUDE,
  	      hljs.HASH_COMMENT_MODE,
  	      BLOCK_COMMENT,
  	      {
  	        scope: 'built_in',
  	        match: /\s(pi|e|sqrt2|log2|log10)(?=\()/,
  	        relevance: 0
  	      },
  	      {
  	        match: regex.concat(/[<,]\s*/, regex.either(...RANGE_CONSTRAINTS), /\s*=/),
  	        keywords: RANGE_CONSTRAINTS
  	      },
  	      {
  	        scope: 'keyword',
  	        match: /\btarget(?=\s*\+=)/,
  	      },
  	      {
  	        // highlights the 'T' in T[,] for only Stan language distributrions
  	        match: [
  	          /~\s*/,
  	          regex.either(...DISTRIBUTIONS),
  	          /(?:\(\))/,
  	          /\s*T(?=\s*\[)/
  	        ],
  	        scope: {
  	          2: "built_in",
  	          4: "keyword"
  	        }
  	      },
  	      {
  	        // highlights distributions that end with special endings
  	        scope: 'built_in',
  	        keywords: DISTRIBUTIONS,
  	        begin: regex.concat(/\w*/, regex.either(...DISTRIBUTIONS), /(_lpdf|_lupdf|_lpmf|_cdf|_lcdf|_lccdf|_qf)(?=\s*[\(.*\)])/)
  	      },
  	      {
  	        // highlights distributions after ~
  	        begin: [
  	          /~/,
  	          /\s*/,
  	          regex.concat(regex.either(...DISTRIBUTIONS), /(?=\s*[\(.*\)])/)
  	        ],
  	        scope: { 3: "built_in" }
  	      },
  	      {
  	        // highlights user defined distributions after ~
  	        begin: [
  	          /~/,
  	          /\s*\w+(?=\s*[\(.*\)])/,
  	          '(?!.*/\b(' + regex.either(...DISTRIBUTIONS) + ')\b)'
  	        ],
  	        scope: { 2: "title.function" }
  	      },
  	      {
  	        // highlights user defined distributions with special endings
  	        scope: 'title.function',
  	        begin: /\w*(_lpdf|_lupdf|_lpmf|_cdf|_lcdf|_lccdf|_qf)(?=\s*[\(.*\)])/
  	      },
  	      {
  	        scope: 'number',
  	        match: regex.concat(
  	          // Comes from @RunDevelopment accessed 11/29/2021 at
  	          // https://github.com/PrismJS/prism/blob/c53ad2e65b7193ab4f03a1797506a54bbb33d5a2/components/prism-stan.js#L56

  	          // start of big noncapture group which
  	          // 1. gets numbers that are by themselves
  	          // 2. numbers that are separated by _
  	          // 3. numbers that are separted by .
  	          /(?:\b\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\B\.\d+(?:_\d+)*)/,
  	          // grabs scientific notation
  	          // grabs complex numbers with i
  	          /(?:[eE][+-]?\d+(?:_\d+)*)?i?(?!\w)/
  	        ),
  	        relevance: 0
  	      },
  	      {
  	        scope: 'string',
  	        begin: /"/,
  	        end: /"/
  	      }
  	    ]
  	  };
  	}

  	stan_1 = stan;
  	return stan_1;
  }

  /*
  Language: Stata
  Author: Brian Quistorff <bquistorff@gmail.com>
  Contributors: Drew McDonald <drewmcdo@gmail.com>
  Description: Stata is a general-purpose statistical software package created in 1985 by StataCorp.
  Website: https://en.wikipedia.org/wiki/Stata
  Category: scientific
  */

  var stata_1;
  var hasRequiredStata;

  function requireStata () {
  	if (hasRequiredStata) return stata_1;
  	hasRequiredStata = 1;
  	/*
  	  This is a fork and modification of Drew McDonald's file (https://github.com/drewmcdonald/stata-highlighting). I have also included a list of builtin commands from https://bugs.kde.org/show_bug.cgi?id=135646.
  	*/

  	function stata(hljs) {
  	  return {
  	    name: 'Stata',
  	    aliases: [
  	      'do',
  	      'ado'
  	    ],
  	    case_insensitive: true,
  	    keywords: 'if else in foreach for forv forva forval forvalu forvalue forvalues by bys bysort xi quietly qui capture about ac ac_7 acprplot acprplot_7 adjust ado adopath adoupdate alpha ameans an ano anov anova anova_estat anova_terms anovadef aorder ap app appe appen append arch arch_dr arch_estat arch_p archlm areg areg_p args arima arima_dr arima_estat arima_p as asmprobit asmprobit_estat asmprobit_lf asmprobit_mfx__dlg asmprobit_p ass asse asser assert avplot avplot_7 avplots avplots_7 bcskew0 bgodfrey bias binreg bip0_lf biplot bipp_lf bipr_lf bipr_p biprobit bitest bitesti bitowt blogit bmemsize boot bootsamp bootstrap bootstrap_8 boxco_l boxco_p boxcox boxcox_6 boxcox_p bprobit br break brier bro brow brows browse brr brrstat bs bs_7 bsampl_w bsample bsample_7 bsqreg bstat bstat_7 bstat_8 bstrap bstrap_7 bubble bubbleplot ca ca_estat ca_p cabiplot camat canon canon_8 canon_8_p canon_estat canon_p cap caprojection capt captu captur capture cat cc cchart cchart_7 cci cd censobs_table centile cf char chdir checkdlgfiles checkestimationsample checkhlpfiles checksum chelp ci cii cl class classutil clear cli clis clist clo clog clog_lf clog_p clogi clogi_sw clogit clogit_lf clogit_p clogitp clogl_sw cloglog clonevar clslistarray cluster cluster_measures cluster_stop cluster_tree cluster_tree_8 clustermat cmdlog cnr cnre cnreg cnreg_p cnreg_sw cnsreg codebook collaps4 collapse colormult_nb colormult_nw compare compress conf confi confir confirm conren cons const constr constra constrai constrain constraint continue contract copy copyright copysource cor corc corr corr2data corr_anti corr_kmo corr_smc corre correl correla correlat correlate corrgram cou coun count cox cox_p cox_sw coxbase coxhaz coxvar cprplot cprplot_7 crc cret cretu cretur creturn cross cs cscript cscript_log csi ct ct_is ctset ctst_5 ctst_st cttost cumsp cumsp_7 cumul cusum cusum_7 cutil d|0 datasig datasign datasigna datasignat datasignatu datasignatur datasignature datetof db dbeta de dec deco decod decode deff des desc descr descri describ describe destring dfbeta dfgls dfuller di di_g dir dirstats dis discard disp disp_res disp_s displ displa display distinct do doe doed doedi doedit dotplot dotplot_7 dprobit drawnorm drop ds ds_util dstdize duplicates durbina dwstat dydx e|0 ed edi edit egen eivreg emdef en enc enco encod encode eq erase ereg ereg_lf ereg_p ereg_sw ereghet ereghet_glf ereghet_glf_sh ereghet_gp ereghet_ilf ereghet_ilf_sh ereghet_ip eret eretu eretur ereturn err erro error esize est est_cfexist est_cfname est_clickable est_expand est_hold est_table est_unhold est_unholdok estat estat_default estat_summ estat_vce_only esti estimates etodow etof etomdy ex exi exit expand expandcl fac fact facto factor factor_estat factor_p factor_pca_rotated factor_rotate factormat fcast fcast_compute fcast_graph fdades fdadesc fdadescr fdadescri fdadescrib fdadescribe fdasav fdasave fdause fh_st file open file read file close file filefilter fillin find_hlp_file findfile findit findit_7 fit fl fli flis flist for5_0 forest forestplot form forma format fpredict frac_154 frac_adj frac_chk frac_cox frac_ddp frac_dis frac_dv frac_in frac_mun frac_pp frac_pq frac_pv frac_wgt frac_xo fracgen fracplot fracplot_7 fracpoly fracpred fron_ex fron_hn fron_p fron_tn fron_tn2 frontier ftodate ftoe ftomdy ftowdate funnel funnelplot g|0 gamhet_glf gamhet_gp gamhet_ilf gamhet_ip gamma gamma_d2 gamma_p gamma_sw gammahet gdi_hexagon gdi_spokes ge gen gene gener genera generat generate genrank genstd genvmean gettoken gl gladder gladder_7 glim_l01 glim_l02 glim_l03 glim_l04 glim_l05 glim_l06 glim_l07 glim_l08 glim_l09 glim_l10 glim_l11 glim_l12 glim_lf glim_mu glim_nw1 glim_nw2 glim_nw3 glim_p glim_v1 glim_v2 glim_v3 glim_v4 glim_v5 glim_v6 glim_v7 glm glm_6 glm_p glm_sw glmpred glo glob globa global glogit glogit_8 glogit_p gmeans gnbre_lf gnbreg gnbreg_5 gnbreg_p gomp_lf gompe_sw gomper_p gompertz gompertzhet gomphet_glf gomphet_glf_sh gomphet_gp gomphet_ilf gomphet_ilf_sh gomphet_ip gphdot gphpen gphprint gprefs gprobi_p gprobit gprobit_8 gr gr7 gr_copy gr_current gr_db gr_describe gr_dir gr_draw gr_draw_replay gr_drop gr_edit gr_editviewopts gr_example gr_example2 gr_export gr_print gr_qscheme gr_query gr_read gr_rename gr_replay gr_save gr_set gr_setscheme gr_table gr_undo gr_use graph graph7 grebar greigen greigen_7 greigen_8 grmeanby grmeanby_7 gs_fileinfo gs_filetype gs_graphinfo gs_stat gsort gwood h|0 hadimvo hareg hausman haver he heck_d2 heckma_p heckman heckp_lf heckpr_p heckprob hel help hereg hetpr_lf hetpr_p hetprob hettest hexdump hilite hist hist_7 histogram hlogit hlu hmeans hotel hotelling hprobit hreg hsearch icd9 icd9_ff icd9p iis impute imtest inbase include inf infi infil infile infix inp inpu input ins insheet insp inspe inspec inspect integ inten intreg intreg_7 intreg_p intrg2_ll intrg_ll intrg_ll2 ipolate iqreg ir irf irf_create irfm iri is_svy is_svysum isid istdize ivprob_1_lf ivprob_lf ivprobit ivprobit_p ivreg ivreg_footnote ivtob_1_lf ivtob_lf ivtobit ivtobit_p jackknife jacknife jknife jknife_6 jknife_8 jkstat joinby kalarma1 kap kap_3 kapmeier kappa kapwgt kdensity kdensity_7 keep ksm ksmirnov ktau kwallis l|0 la lab labbe labbeplot labe label labelbook ladder levels levelsof leverage lfit lfit_p li lincom line linktest lis list lloghet_glf lloghet_glf_sh lloghet_gp lloghet_ilf lloghet_ilf_sh lloghet_ip llogi_sw llogis_p llogist llogistic llogistichet lnorm_lf lnorm_sw lnorma_p lnormal lnormalhet lnormhet_glf lnormhet_glf_sh lnormhet_gp lnormhet_ilf lnormhet_ilf_sh lnormhet_ip lnskew0 loadingplot loc loca local log logi logis_lf logistic logistic_p logit logit_estat logit_p loglogs logrank loneway lookfor lookup lowess lowess_7 lpredict lrecomp lroc lroc_7 lrtest ls lsens lsens_7 lsens_x lstat ltable ltable_7 ltriang lv lvr2plot lvr2plot_7 m|0 ma mac macr macro makecns man manova manova_estat manova_p manovatest mantel mark markin markout marksample mat mat_capp mat_order mat_put_rr mat_rapp mata mata_clear mata_describe mata_drop mata_matdescribe mata_matsave mata_matuse mata_memory mata_mlib mata_mosave mata_rename mata_which matalabel matcproc matlist matname matr matri matrix matrix_input__dlg matstrik mcc mcci md0_ md1_ md1debug_ md2_ md2debug_ mds mds_estat mds_p mdsconfig mdslong mdsmat mdsshepard mdytoe mdytof me_derd mean means median memory memsize menl meqparse mer merg merge meta mfp mfx mhelp mhodds minbound mixed_ll mixed_ll_reparm mkassert mkdir mkmat mkspline ml ml_5 ml_adjs ml_bhhhs ml_c_d ml_check ml_clear ml_cnt ml_debug ml_defd ml_e0 ml_e0_bfgs ml_e0_cycle ml_e0_dfp ml_e0i ml_e1 ml_e1_bfgs ml_e1_bhhh ml_e1_cycle ml_e1_dfp ml_e2 ml_e2_cycle ml_ebfg0 ml_ebfr0 ml_ebfr1 ml_ebh0q ml_ebhh0 ml_ebhr0 ml_ebr0i ml_ecr0i ml_edfp0 ml_edfr0 ml_edfr1 ml_edr0i ml_eds ml_eer0i ml_egr0i ml_elf ml_elf_bfgs ml_elf_bhhh ml_elf_cycle ml_elf_dfp ml_elfi ml_elfs ml_enr0i ml_enrr0 ml_erdu0 ml_erdu0_bfgs ml_erdu0_bhhh ml_erdu0_bhhhq ml_erdu0_cycle ml_erdu0_dfp ml_erdu0_nrbfgs ml_exde ml_footnote ml_geqnr ml_grad0 ml_graph ml_hbhhh ml_hd0 ml_hold ml_init ml_inv ml_log ml_max ml_mlout ml_mlout_8 ml_model ml_nb0 ml_opt ml_p ml_plot ml_query ml_rdgrd ml_repor ml_s_e ml_score ml_searc ml_technique ml_unhold mleval mlf_ mlmatbysum mlmatsum mlog mlogi mlogit mlogit_footnote mlogit_p mlopts mlsum mlvecsum mnl0_ mor more mov move mprobit mprobit_lf mprobit_p mrdu0_ mrdu1_ mvdecode mvencode mvreg mvreg_estat n|0 nbreg nbreg_al nbreg_lf nbreg_p nbreg_sw nestreg net newey newey_7 newey_p news nl nl_7 nl_9 nl_9_p nl_p nl_p_7 nlcom nlcom_p nlexp2 nlexp2_7 nlexp2a nlexp2a_7 nlexp3 nlexp3_7 nlgom3 nlgom3_7 nlgom4 nlgom4_7 nlinit nllog3 nllog3_7 nllog4 nllog4_7 nlog_rd nlogit nlogit_p nlogitgen nlogittree nlpred no nobreak noi nois noisi noisil noisily note notes notes_dlg nptrend numlabel numlist odbc old_ver olo olog ologi ologi_sw ologit ologit_p ologitp on one onew onewa oneway op_colnm op_comp op_diff op_inv op_str opr opro oprob oprob_sw oprobi oprobi_p oprobit oprobitp opts_exclusive order orthog orthpoly ou out outf outfi outfil outfile outs outsh outshe outshee outsheet ovtest pac pac_7 palette parse parse_dissim pause pca pca_8 pca_display pca_estat pca_p pca_rotate pcamat pchart pchart_7 pchi pchi_7 pcorr pctile pentium pergram pergram_7 permute permute_8 personal peto_st pkcollapse pkcross pkequiv pkexamine pkexamine_7 pkshape pksumm pksumm_7 pl plo plot plugin pnorm pnorm_7 poisgof poiss_lf poiss_sw poisso_p poisson poisson_estat post postclose postfile postutil pperron pr prais prais_e prais_e2 prais_p predict predictnl preserve print pro prob probi probit probit_estat probit_p proc_time procoverlay procrustes procrustes_estat procrustes_p profiler prog progr progra program prop proportion prtest prtesti pwcorr pwd q\\s qby qbys qchi qchi_7 qladder qladder_7 qnorm qnorm_7 qqplot qqplot_7 qreg qreg_c qreg_p qreg_sw qu quadchk quantile quantile_7 que quer query range ranksum ratio rchart rchart_7 rcof recast reclink recode reg reg3 reg3_p regdw regr regre regre_p2 regres regres_p regress regress_estat regriv_p remap ren rena renam rename renpfix repeat replace report reshape restore ret retu retur return rm rmdir robvar roccomp roccomp_7 roccomp_8 rocf_lf rocfit rocfit_8 rocgold rocplot rocplot_7 roctab roctab_7 rolling rologit rologit_p rot rota rotat rotate rotatemat rreg rreg_p ru run runtest rvfplot rvfplot_7 rvpplot rvpplot_7 sa safesum sample sampsi sav save savedresults saveold sc sca scal scala scalar scatter scm_mine sco scob_lf scob_p scobi_sw scobit scor score scoreplot scoreplot_help scree screeplot screeplot_help sdtest sdtesti se search separate seperate serrbar serrbar_7 serset set set_defaults sfrancia sh she shel shell shewhart shewhart_7 signestimationsample signrank signtest simul simul_7 simulate simulate_8 sktest sleep slogit slogit_d2 slogit_p smooth snapspan so sor sort spearman spikeplot spikeplot_7 spikeplt spline_x split sqreg sqreg_p sret sretu sretur sreturn ssc st st_ct st_hc st_hcd st_hcd_sh st_is st_issys st_note st_promo st_set st_show st_smpl st_subid stack statsby statsby_8 stbase stci stci_7 stcox stcox_estat stcox_fr stcox_fr_ll stcox_p stcox_sw stcoxkm stcoxkm_7 stcstat stcurv stcurve stcurve_7 stdes stem stepwise stereg stfill stgen stir stjoin stmc stmh stphplot stphplot_7 stphtest stphtest_7 stptime strate strate_7 streg streg_sw streset sts sts_7 stset stsplit stsum sttocc sttoct stvary stweib su suest suest_8 sum summ summa summar summari summariz summarize sunflower sureg survcurv survsum svar svar_p svmat svy svy_disp svy_dreg svy_est svy_est_7 svy_estat svy_get svy_gnbreg_p svy_head svy_header svy_heckman_p svy_heckprob_p svy_intreg_p svy_ivreg_p svy_logistic_p svy_logit_p svy_mlogit_p svy_nbreg_p svy_ologit_p svy_oprobit_p svy_poisson_p svy_probit_p svy_regress_p svy_sub svy_sub_7 svy_x svy_x_7 svy_x_p svydes svydes_8 svygen svygnbreg svyheckman svyheckprob svyintreg svyintreg_7 svyintrg svyivreg svylc svylog_p svylogit svymarkout svymarkout_8 svymean svymlog svymlogit svynbreg svyolog svyologit svyoprob svyoprobit svyopts svypois svypois_7 svypoisson svyprobit svyprobt svyprop svyprop_7 svyratio svyreg svyreg_p svyregress svyset svyset_7 svyset_8 svytab svytab_7 svytest svytotal sw sw_8 swcnreg swcox swereg swilk swlogis swlogit swologit swoprbt swpois swprobit swqreg swtobit swweib symmetry symmi symplot symplot_7 syntax sysdescribe sysdir sysuse szroeter ta tab tab1 tab2 tab_or tabd tabdi tabdis tabdisp tabi table tabodds tabodds_7 tabstat tabu tabul tabula tabulat tabulate te tempfile tempname tempvar tes test testnl testparm teststd tetrachoric time_it timer tis tob tobi tobit tobit_p tobit_sw token tokeni tokeniz tokenize tostring total translate translator transmap treat_ll treatr_p treatreg trim trimfill trnb_cons trnb_mean trpoiss_d2 trunc_ll truncr_p truncreg tsappend tset tsfill tsline tsline_ex tsreport tsrevar tsrline tsset tssmooth tsunab ttest ttesti tut_chk tut_wait tutorial tw tware_st two twoway twoway__fpfit_serset twoway__function_gen twoway__histogram_gen twoway__ipoint_serset twoway__ipoints_serset twoway__kdensity_gen twoway__lfit_serset twoway__normgen_gen twoway__pci_serset twoway__qfit_serset twoway__scatteri_serset twoway__sunflower_gen twoway_ksm_serset ty typ type typeof u|0 unab unabbrev unabcmd update us use uselabel var var_mkcompanion var_p varbasic varfcast vargranger varirf varirf_add varirf_cgraph varirf_create varirf_ctable varirf_describe varirf_dir varirf_drop varirf_erase varirf_graph varirf_ograph varirf_rename varirf_set varirf_table varlist varlmar varnorm varsoc varstable varstable_w varstable_w2 varwle vce vec vec_fevd vec_mkphi vec_p vec_p_w vecirf_create veclmar veclmar_w vecnorm vecnorm_w vecrank vecstable verinst vers versi versio version view viewsource vif vwls wdatetof webdescribe webseek webuse weib1_lf weib2_lf weib_lf weib_lf0 weibhet_glf weibhet_glf_sh weibhet_glfa weibhet_glfa_sh weibhet_gp weibhet_ilf weibhet_ilf_sh weibhet_ilfa weibhet_ilfa_sh weibhet_ip weibu_sw weibul_p weibull weibull_c weibull_s weibullhet wh whelp whi which whil while wilc_st wilcoxon win wind windo window winexec wntestb wntestb_7 wntestq xchart xchart_7 xcorr xcorr_7 xi xi_6 xmlsav xmlsave xmluse xpose xsh xshe xshel xshell xt_iis xt_tis xtab_p xtabond xtbin_p xtclog xtcloglog xtcloglog_8 xtcloglog_d2 xtcloglog_pa_p xtcloglog_re_p xtcnt_p xtcorr xtdata xtdes xtfront_p xtfrontier xtgee xtgee_elink xtgee_estat xtgee_makeivar xtgee_p xtgee_plink xtgls xtgls_p xthaus xthausman xtht_p xthtaylor xtile xtint_p xtintreg xtintreg_8 xtintreg_d2 xtintreg_p xtivp_1 xtivp_2 xtivreg xtline xtline_ex xtlogit xtlogit_8 xtlogit_d2 xtlogit_fe_p xtlogit_pa_p xtlogit_re_p xtmixed xtmixed_estat xtmixed_p xtnb_fe xtnb_lf xtnbreg xtnbreg_pa_p xtnbreg_refe_p xtpcse xtpcse_p xtpois xtpoisson xtpoisson_d2 xtpoisson_pa_p xtpoisson_refe_p xtpred xtprobit xtprobit_8 xtprobit_d2 xtprobit_re_p xtps_fe xtps_lf xtps_ren xtps_ren_8 xtrar_p xtrc xtrc_p xtrchh xtrefe_p xtreg xtreg_be xtreg_fe xtreg_ml xtreg_pa_p xtreg_re xtregar xtrere_p xtset xtsf_ll xtsf_llti xtsum xttab xttest0 xttobit xttobit_8 xttobit_p xttrans yx yxview__barlike_draw yxview_area_draw yxview_bar_draw yxview_dot_draw yxview_dropline_draw yxview_function_draw yxview_iarrow_draw yxview_ilabels_draw yxview_normal_draw yxview_pcarrow_draw yxview_pcbarrow_draw yxview_pccapsym_draw yxview_pcscatter_draw yxview_pcspike_draw yxview_rarea_draw yxview_rbar_draw yxview_rbarm_draw yxview_rcap_draw yxview_rcapsym_draw yxview_rconnected_draw yxview_rline_draw yxview_rscatter_draw yxview_rspike_draw yxview_spike_draw yxview_sunflower_draw zap_s zinb zinb_llf zinb_plf zip zip_llf zip_p zip_plf zt_ct_5 zt_hc_5 zt_hcd_5 zt_is_5 zt_iss_5 zt_sho_5 zt_smp_5 ztbase_5 ztcox_5 ztdes_5 ztereg_5 ztfill_5 ztgen_5 ztir_5 ztjoin_5 ztnb ztnb_p ztp ztp_p zts_5 ztset_5 ztspli_5 ztsum_5 zttoct_5 ztvary_5 ztweib_5',
  	    contains: [
  	      {
  	        className: 'symbol',
  	        begin: /`[a-zA-Z0-9_]+'/
  	      },
  	      {
  	        className: 'variable',
  	        begin: /\$\{?[a-zA-Z0-9_]+\}?/,
  	        relevance: 0
  	      },
  	      {
  	        className: 'string',
  	        variants: [
  	          { begin: '`"[^\r\n]*?"\'' },
  	          { begin: '"[^\r\n"]*"' }
  	        ]
  	      },

  	      {
  	        className: 'built_in',
  	        variants: [ { begin: '\\b(abs|acos|asin|atan|atan2|atanh|ceil|cloglog|comb|cos|digamma|exp|floor|invcloglog|invlogit|ln|lnfact|lnfactorial|lngamma|log|log10|max|min|mod|reldif|round|sign|sin|sqrt|sum|tan|tanh|trigamma|trunc|betaden|Binomial|binorm|binormal|chi2|chi2tail|dgammapda|dgammapdada|dgammapdadx|dgammapdx|dgammapdxdx|F|Fden|Ftail|gammaden|gammap|ibeta|invbinomial|invchi2|invchi2tail|invF|invFtail|invgammap|invibeta|invnchi2|invnFtail|invnibeta|invnorm|invnormal|invttail|nbetaden|nchi2|nFden|nFtail|nibeta|norm|normal|normalden|normd|npnchi2|tden|ttail|uniform|abbrev|char|index|indexnot|length|lower|ltrim|match|plural|proper|real|regexm|regexr|regexs|reverse|rtrim|string|strlen|strlower|strltrim|strmatch|strofreal|strpos|strproper|strreverse|strrtrim|strtrim|strupper|subinstr|subinword|substr|trim|upper|word|wordcount|_caller|autocode|byteorder|chop|clip|cond|e|epsdouble|epsfloat|group|inlist|inrange|irecode|matrix|maxbyte|maxdouble|maxfloat|maxint|maxlong|mi|minbyte|mindouble|minfloat|minint|minlong|missing|r|recode|replay|return|s|scalar|d|date|day|dow|doy|halfyear|mdy|month|quarter|week|year|d|daily|dofd|dofh|dofm|dofq|dofw|dofy|h|halfyearly|hofd|m|mofd|monthly|q|qofd|quarterly|tin|twithin|w|weekly|wofd|y|yearly|yh|ym|yofd|yq|yw|cholesky|colnumb|colsof|corr|det|diag|diag0cnt|el|get|hadamard|I|inv|invsym|issym|issymmetric|J|matmissing|matuniform|mreldif|nullmat|rownumb|rowsof|sweep|syminv|trace|vec|vecdiag)(?=\\()' } ]
  	      },

  	      hljs.COMMENT('^[ \t]*\\*.*$', false),
  	      hljs.C_LINE_COMMENT_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE
  	    ]
  	  };
  	}

  	stata_1 = stata;
  	return stata_1;
  }

  /*
  Language: STEP Part 21
  Contributors: Adam Joseph Cook <adam.joseph.cook@gmail.com>
  Description: Syntax highlighter for STEP Part 21 files (ISO 10303-21).
  Website: https://en.wikipedia.org/wiki/ISO_10303-21
  */

  var step21_1;
  var hasRequiredStep21;

  function requireStep21 () {
  	if (hasRequiredStep21) return step21_1;
  	hasRequiredStep21 = 1;
  	function step21(hljs) {
  	  const STEP21_IDENT_RE = '[A-Z_][A-Z0-9_.]*';
  	  const STEP21_KEYWORDS = {
  	    $pattern: STEP21_IDENT_RE,
  	    keyword: [
  	      "HEADER",
  	      "ENDSEC",
  	      "DATA"
  	    ]
  	  };
  	  const STEP21_START = {
  	    className: 'meta',
  	    begin: 'ISO-10303-21;',
  	    relevance: 10
  	  };
  	  const STEP21_CLOSE = {
  	    className: 'meta',
  	    begin: 'END-ISO-10303-21;',
  	    relevance: 10
  	  };

  	  return {
  	    name: 'STEP Part 21',
  	    aliases: [
  	      'p21',
  	      'step',
  	      'stp'
  	    ],
  	    case_insensitive: true, // STEP 21 is case insensitive in theory, in practice all non-comments are capitalized.
  	    keywords: STEP21_KEYWORDS,
  	    contains: [
  	      STEP21_START,
  	      STEP21_CLOSE,
  	      hljs.C_LINE_COMMENT_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE,
  	      hljs.COMMENT('/\\*\\*!', '\\*/'),
  	      hljs.C_NUMBER_MODE,
  	      hljs.inherit(hljs.APOS_STRING_MODE, { illegal: null }),
  	      hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null }),
  	      {
  	        className: 'string',
  	        begin: "'",
  	        end: "'"
  	      },
  	      {
  	        className: 'symbol',
  	        variants: [
  	          {
  	            begin: '#',
  	            end: '\\d+',
  	            illegal: '\\W'
  	          }
  	        ]
  	      }
  	    ]
  	  };
  	}

  	step21_1 = step21;
  	return step21_1;
  }

  var stylus_1;
  var hasRequiredStylus;

  function requireStylus () {
  	if (hasRequiredStylus) return stylus_1;
  	hasRequiredStylus = 1;
  	const MODES = (hljs) => {
  	  return {
  	    IMPORTANT: {
  	      scope: 'meta',
  	      begin: '!important'
  	    },
  	    BLOCK_COMMENT: hljs.C_BLOCK_COMMENT_MODE,
  	    HEXCOLOR: {
  	      scope: 'number',
  	      begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/
  	    },
  	    FUNCTION_DISPATCH: {
  	      className: "built_in",
  	      begin: /[\w-]+(?=\()/
  	    },
  	    ATTRIBUTE_SELECTOR_MODE: {
  	      scope: 'selector-attr',
  	      begin: /\[/,
  	      end: /\]/,
  	      illegal: '$',
  	      contains: [
  	        hljs.APOS_STRING_MODE,
  	        hljs.QUOTE_STRING_MODE
  	      ]
  	    },
  	    CSS_NUMBER_MODE: {
  	      scope: 'number',
  	      begin: hljs.NUMBER_RE + '(' +
  	        '%|em|ex|ch|rem' +
  	        '|vw|vh|vmin|vmax' +
  	        '|cm|mm|in|pt|pc|px' +
  	        '|deg|grad|rad|turn' +
  	        '|s|ms' +
  	        '|Hz|kHz' +
  	        '|dpi|dpcm|dppx' +
  	        ')?',
  	      relevance: 0
  	    },
  	    CSS_VARIABLE: {
  	      className: "attr",
  	      begin: /--[A-Za-z][A-Za-z0-9_-]*/
  	    }
  	  };
  	};

  	const TAGS = [
  	  'a',
  	  'abbr',
  	  'address',
  	  'article',
  	  'aside',
  	  'audio',
  	  'b',
  	  'blockquote',
  	  'body',
  	  'button',
  	  'canvas',
  	  'caption',
  	  'cite',
  	  'code',
  	  'dd',
  	  'del',
  	  'details',
  	  'dfn',
  	  'div',
  	  'dl',
  	  'dt',
  	  'em',
  	  'fieldset',
  	  'figcaption',
  	  'figure',
  	  'footer',
  	  'form',
  	  'h1',
  	  'h2',
  	  'h3',
  	  'h4',
  	  'h5',
  	  'h6',
  	  'header',
  	  'hgroup',
  	  'html',
  	  'i',
  	  'iframe',
  	  'img',
  	  'input',
  	  'ins',
  	  'kbd',
  	  'label',
  	  'legend',
  	  'li',
  	  'main',
  	  'mark',
  	  'menu',
  	  'nav',
  	  'object',
  	  'ol',
  	  'p',
  	  'q',
  	  'quote',
  	  'samp',
  	  'section',
  	  'span',
  	  'strong',
  	  'summary',
  	  'sup',
  	  'table',
  	  'tbody',
  	  'td',
  	  'textarea',
  	  'tfoot',
  	  'th',
  	  'thead',
  	  'time',
  	  'tr',
  	  'ul',
  	  'var',
  	  'video'
  	];

  	const MEDIA_FEATURES = [
  	  'any-hover',
  	  'any-pointer',
  	  'aspect-ratio',
  	  'color',
  	  'color-gamut',
  	  'color-index',
  	  'device-aspect-ratio',
  	  'device-height',
  	  'device-width',
  	  'display-mode',
  	  'forced-colors',
  	  'grid',
  	  'height',
  	  'hover',
  	  'inverted-colors',
  	  'monochrome',
  	  'orientation',
  	  'overflow-block',
  	  'overflow-inline',
  	  'pointer',
  	  'prefers-color-scheme',
  	  'prefers-contrast',
  	  'prefers-reduced-motion',
  	  'prefers-reduced-transparency',
  	  'resolution',
  	  'scan',
  	  'scripting',
  	  'update',
  	  'width',
  	  // TODO: find a better solution?
  	  'min-width',
  	  'max-width',
  	  'min-height',
  	  'max-height'
  	];

  	// https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes
  	const PSEUDO_CLASSES = [
  	  'active',
  	  'any-link',
  	  'blank',
  	  'checked',
  	  'current',
  	  'default',
  	  'defined',
  	  'dir', // dir()
  	  'disabled',
  	  'drop',
  	  'empty',
  	  'enabled',
  	  'first',
  	  'first-child',
  	  'first-of-type',
  	  'fullscreen',
  	  'future',
  	  'focus',
  	  'focus-visible',
  	  'focus-within',
  	  'has', // has()
  	  'host', // host or host()
  	  'host-context', // host-context()
  	  'hover',
  	  'indeterminate',
  	  'in-range',
  	  'invalid',
  	  'is', // is()
  	  'lang', // lang()
  	  'last-child',
  	  'last-of-type',
  	  'left',
  	  'link',
  	  'local-link',
  	  'not', // not()
  	  'nth-child', // nth-child()
  	  'nth-col', // nth-col()
  	  'nth-last-child', // nth-last-child()
  	  'nth-last-col', // nth-last-col()
  	  'nth-last-of-type', //nth-last-of-type()
  	  'nth-of-type', //nth-of-type()
  	  'only-child',
  	  'only-of-type',
  	  'optional',
  	  'out-of-range',
  	  'past',
  	  'placeholder-shown',
  	  'read-only',
  	  'read-write',
  	  'required',
  	  'right',
  	  'root',
  	  'scope',
  	  'target',
  	  'target-within',
  	  'user-invalid',
  	  'valid',
  	  'visited',
  	  'where' // where()
  	];

  	// https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements
  	const PSEUDO_ELEMENTS = [
  	  'after',
  	  'backdrop',
  	  'before',
  	  'cue',
  	  'cue-region',
  	  'first-letter',
  	  'first-line',
  	  'grammar-error',
  	  'marker',
  	  'part',
  	  'placeholder',
  	  'selection',
  	  'slotted',
  	  'spelling-error'
  	];

  	const ATTRIBUTES = [
  	  'align-content',
  	  'align-items',
  	  'align-self',
  	  'all',
  	  'animation',
  	  'animation-delay',
  	  'animation-direction',
  	  'animation-duration',
  	  'animation-fill-mode',
  	  'animation-iteration-count',
  	  'animation-name',
  	  'animation-play-state',
  	  'animation-timing-function',
  	  'backface-visibility',
  	  'background',
  	  'background-attachment',
  	  'background-blend-mode',
  	  'background-clip',
  	  'background-color',
  	  'background-image',
  	  'background-origin',
  	  'background-position',
  	  'background-repeat',
  	  'background-size',
  	  'block-size',
  	  'border',
  	  'border-block',
  	  'border-block-color',
  	  'border-block-end',
  	  'border-block-end-color',
  	  'border-block-end-style',
  	  'border-block-end-width',
  	  'border-block-start',
  	  'border-block-start-color',
  	  'border-block-start-style',
  	  'border-block-start-width',
  	  'border-block-style',
  	  'border-block-width',
  	  'border-bottom',
  	  'border-bottom-color',
  	  'border-bottom-left-radius',
  	  'border-bottom-right-radius',
  	  'border-bottom-style',
  	  'border-bottom-width',
  	  'border-collapse',
  	  'border-color',
  	  'border-image',
  	  'border-image-outset',
  	  'border-image-repeat',
  	  'border-image-slice',
  	  'border-image-source',
  	  'border-image-width',
  	  'border-inline',
  	  'border-inline-color',
  	  'border-inline-end',
  	  'border-inline-end-color',
  	  'border-inline-end-style',
  	  'border-inline-end-width',
  	  'border-inline-start',
  	  'border-inline-start-color',
  	  'border-inline-start-style',
  	  'border-inline-start-width',
  	  'border-inline-style',
  	  'border-inline-width',
  	  'border-left',
  	  'border-left-color',
  	  'border-left-style',
  	  'border-left-width',
  	  'border-radius',
  	  'border-right',
  	  'border-right-color',
  	  'border-right-style',
  	  'border-right-width',
  	  'border-spacing',
  	  'border-style',
  	  'border-top',
  	  'border-top-color',
  	  'border-top-left-radius',
  	  'border-top-right-radius',
  	  'border-top-style',
  	  'border-top-width',
  	  'border-width',
  	  'bottom',
  	  'box-decoration-break',
  	  'box-shadow',
  	  'box-sizing',
  	  'break-after',
  	  'break-before',
  	  'break-inside',
  	  'caption-side',
  	  'caret-color',
  	  'clear',
  	  'clip',
  	  'clip-path',
  	  'clip-rule',
  	  'color',
  	  'column-count',
  	  'column-fill',
  	  'column-gap',
  	  'column-rule',
  	  'column-rule-color',
  	  'column-rule-style',
  	  'column-rule-width',
  	  'column-span',
  	  'column-width',
  	  'columns',
  	  'contain',
  	  'content',
  	  'content-visibility',
  	  'counter-increment',
  	  'counter-reset',
  	  'cue',
  	  'cue-after',
  	  'cue-before',
  	  'cursor',
  	  'direction',
  	  'display',
  	  'empty-cells',
  	  'filter',
  	  'flex',
  	  'flex-basis',
  	  'flex-direction',
  	  'flex-flow',
  	  'flex-grow',
  	  'flex-shrink',
  	  'flex-wrap',
  	  'float',
  	  'flow',
  	  'font',
  	  'font-display',
  	  'font-family',
  	  'font-feature-settings',
  	  'font-kerning',
  	  'font-language-override',
  	  'font-size',
  	  'font-size-adjust',
  	  'font-smoothing',
  	  'font-stretch',
  	  'font-style',
  	  'font-synthesis',
  	  'font-variant',
  	  'font-variant-caps',
  	  'font-variant-east-asian',
  	  'font-variant-ligatures',
  	  'font-variant-numeric',
  	  'font-variant-position',
  	  'font-variation-settings',
  	  'font-weight',
  	  'gap',
  	  'glyph-orientation-vertical',
  	  'grid',
  	  'grid-area',
  	  'grid-auto-columns',
  	  'grid-auto-flow',
  	  'grid-auto-rows',
  	  'grid-column',
  	  'grid-column-end',
  	  'grid-column-start',
  	  'grid-gap',
  	  'grid-row',
  	  'grid-row-end',
  	  'grid-row-start',
  	  'grid-template',
  	  'grid-template-areas',
  	  'grid-template-columns',
  	  'grid-template-rows',
  	  'hanging-punctuation',
  	  'height',
  	  'hyphens',
  	  'icon',
  	  'image-orientation',
  	  'image-rendering',
  	  'image-resolution',
  	  'ime-mode',
  	  'inline-size',
  	  'isolation',
  	  'justify-content',
  	  'left',
  	  'letter-spacing',
  	  'line-break',
  	  'line-height',
  	  'list-style',
  	  'list-style-image',
  	  'list-style-position',
  	  'list-style-type',
  	  'margin',
  	  'margin-block',
  	  'margin-block-end',
  	  'margin-block-start',
  	  'margin-bottom',
  	  'margin-inline',
  	  'margin-inline-end',
  	  'margin-inline-start',
  	  'margin-left',
  	  'margin-right',
  	  'margin-top',
  	  'marks',
  	  'mask',
  	  'mask-border',
  	  'mask-border-mode',
  	  'mask-border-outset',
  	  'mask-border-repeat',
  	  'mask-border-slice',
  	  'mask-border-source',
  	  'mask-border-width',
  	  'mask-clip',
  	  'mask-composite',
  	  'mask-image',
  	  'mask-mode',
  	  'mask-origin',
  	  'mask-position',
  	  'mask-repeat',
  	  'mask-size',
  	  'mask-type',
  	  'max-block-size',
  	  'max-height',
  	  'max-inline-size',
  	  'max-width',
  	  'min-block-size',
  	  'min-height',
  	  'min-inline-size',
  	  'min-width',
  	  'mix-blend-mode',
  	  'nav-down',
  	  'nav-index',
  	  'nav-left',
  	  'nav-right',
  	  'nav-up',
  	  'none',
  	  'normal',
  	  'object-fit',
  	  'object-position',
  	  'opacity',
  	  'order',
  	  'orphans',
  	  'outline',
  	  'outline-color',
  	  'outline-offset',
  	  'outline-style',
  	  'outline-width',
  	  'overflow',
  	  'overflow-wrap',
  	  'overflow-x',
  	  'overflow-y',
  	  'padding',
  	  'padding-block',
  	  'padding-block-end',
  	  'padding-block-start',
  	  'padding-bottom',
  	  'padding-inline',
  	  'padding-inline-end',
  	  'padding-inline-start',
  	  'padding-left',
  	  'padding-right',
  	  'padding-top',
  	  'page-break-after',
  	  'page-break-before',
  	  'page-break-inside',
  	  'pause',
  	  'pause-after',
  	  'pause-before',
  	  'perspective',
  	  'perspective-origin',
  	  'pointer-events',
  	  'position',
  	  'quotes',
  	  'resize',
  	  'rest',
  	  'rest-after',
  	  'rest-before',
  	  'right',
  	  'row-gap',
  	  'scroll-margin',
  	  'scroll-margin-block',
  	  'scroll-margin-block-end',
  	  'scroll-margin-block-start',
  	  'scroll-margin-bottom',
  	  'scroll-margin-inline',
  	  'scroll-margin-inline-end',
  	  'scroll-margin-inline-start',
  	  'scroll-margin-left',
  	  'scroll-margin-right',
  	  'scroll-margin-top',
  	  'scroll-padding',
  	  'scroll-padding-block',
  	  'scroll-padding-block-end',
  	  'scroll-padding-block-start',
  	  'scroll-padding-bottom',
  	  'scroll-padding-inline',
  	  'scroll-padding-inline-end',
  	  'scroll-padding-inline-start',
  	  'scroll-padding-left',
  	  'scroll-padding-right',
  	  'scroll-padding-top',
  	  'scroll-snap-align',
  	  'scroll-snap-stop',
  	  'scroll-snap-type',
  	  'scrollbar-color',
  	  'scrollbar-gutter',
  	  'scrollbar-width',
  	  'shape-image-threshold',
  	  'shape-margin',
  	  'shape-outside',
  	  'speak',
  	  'speak-as',
  	  'src', // @font-face
  	  'tab-size',
  	  'table-layout',
  	  'text-align',
  	  'text-align-all',
  	  'text-align-last',
  	  'text-combine-upright',
  	  'text-decoration',
  	  'text-decoration-color',
  	  'text-decoration-line',
  	  'text-decoration-style',
  	  'text-emphasis',
  	  'text-emphasis-color',
  	  'text-emphasis-position',
  	  'text-emphasis-style',
  	  'text-indent',
  	  'text-justify',
  	  'text-orientation',
  	  'text-overflow',
  	  'text-rendering',
  	  'text-shadow',
  	  'text-transform',
  	  'text-underline-position',
  	  'top',
  	  'transform',
  	  'transform-box',
  	  'transform-origin',
  	  'transform-style',
  	  'transition',
  	  'transition-delay',
  	  'transition-duration',
  	  'transition-property',
  	  'transition-timing-function',
  	  'unicode-bidi',
  	  'vertical-align',
  	  'visibility',
  	  'voice-balance',
  	  'voice-duration',
  	  'voice-family',
  	  'voice-pitch',
  	  'voice-range',
  	  'voice-rate',
  	  'voice-stress',
  	  'voice-volume',
  	  'white-space',
  	  'widows',
  	  'width',
  	  'will-change',
  	  'word-break',
  	  'word-spacing',
  	  'word-wrap',
  	  'writing-mode',
  	  'z-index'
  	  // reverse makes sure longer attributes `font-weight` are matched fully
  	  // instead of getting false positives on say `font`
  	].reverse();

  	/*
  	Language: Stylus
  	Author: Bryant Williams <b.n.williams@gmail.com>
  	Description: Stylus is an expressive, robust, feature-rich CSS language built for nodejs.
  	Website: https://github.com/stylus/stylus
  	Category: css, web
  	*/

  	/** @type LanguageFn */
  	function stylus(hljs) {
  	  const modes = MODES(hljs);

  	  const AT_MODIFIERS = "and or not only";
  	  const VARIABLE = {
  	    className: 'variable',
  	    begin: '\\$' + hljs.IDENT_RE
  	  };

  	  const AT_KEYWORDS = [
  	    'charset',
  	    'css',
  	    'debug',
  	    'extend',
  	    'font-face',
  	    'for',
  	    'import',
  	    'include',
  	    'keyframes',
  	    'media',
  	    'mixin',
  	    'page',
  	    'warn',
  	    'while'
  	  ];

  	  const LOOKAHEAD_TAG_END = '(?=[.\\s\\n[:,(])';

  	  // illegals
  	  const ILLEGAL = [
  	    '\\?',
  	    '(\\bReturn\\b)', // monkey
  	    '(\\bEnd\\b)', // monkey
  	    '(\\bend\\b)', // vbscript
  	    '(\\bdef\\b)', // gradle
  	    ';', // a whole lot of languages
  	    '#\\s', // markdown
  	    '\\*\\s', // markdown
  	    '===\\s', // markdown
  	    '\\|',
  	    '%' // prolog
  	  ];

  	  return {
  	    name: 'Stylus',
  	    aliases: [ 'styl' ],
  	    case_insensitive: false,
  	    keywords: 'if else for in',
  	    illegal: '(' + ILLEGAL.join('|') + ')',
  	    contains: [

  	      // strings
  	      hljs.QUOTE_STRING_MODE,
  	      hljs.APOS_STRING_MODE,

  	      // comments
  	      hljs.C_LINE_COMMENT_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE,

  	      // hex colors
  	      modes.HEXCOLOR,

  	      // class tag
  	      {
  	        begin: '\\.[a-zA-Z][a-zA-Z0-9_-]*' + LOOKAHEAD_TAG_END,
  	        className: 'selector-class'
  	      },

  	      // id tag
  	      {
  	        begin: '#[a-zA-Z][a-zA-Z0-9_-]*' + LOOKAHEAD_TAG_END,
  	        className: 'selector-id'
  	      },

  	      // tags
  	      {
  	        begin: '\\b(' + TAGS.join('|') + ')' + LOOKAHEAD_TAG_END,
  	        className: 'selector-tag'
  	      },

  	      // psuedo selectors
  	      {
  	        className: 'selector-pseudo',
  	        begin: '&?:(' + PSEUDO_CLASSES.join('|') + ')' + LOOKAHEAD_TAG_END
  	      },
  	      {
  	        className: 'selector-pseudo',
  	        begin: '&?:(:)?(' + PSEUDO_ELEMENTS.join('|') + ')' + LOOKAHEAD_TAG_END
  	      },

  	      modes.ATTRIBUTE_SELECTOR_MODE,

  	      {
  	        className: "keyword",
  	        begin: /@media/,
  	        starts: {
  	          end: /[{;}]/,
  	          keywords: {
  	            $pattern: /[a-z-]+/,
  	            keyword: AT_MODIFIERS,
  	            attribute: MEDIA_FEATURES.join(" ")
  	          },
  	          contains: [ modes.CSS_NUMBER_MODE ]
  	        }
  	      },

  	      // @ keywords
  	      {
  	        className: 'keyword',
  	        begin: '\@((-(o|moz|ms|webkit)-)?(' + AT_KEYWORDS.join('|') + '))\\b'
  	      },

  	      // variables
  	      VARIABLE,

  	      // dimension
  	      modes.CSS_NUMBER_MODE,

  	      // functions
  	      //  - only from beginning of line + whitespace
  	      {
  	        className: 'function',
  	        begin: '^[a-zA-Z][a-zA-Z0-9_\-]*\\(.*\\)',
  	        illegal: '[\\n]',
  	        returnBegin: true,
  	        contains: [
  	          {
  	            className: 'title',
  	            begin: '\\b[a-zA-Z][a-zA-Z0-9_\-]*'
  	          },
  	          {
  	            className: 'params',
  	            begin: /\(/,
  	            end: /\)/,
  	            contains: [
  	              modes.HEXCOLOR,
  	              VARIABLE,
  	              hljs.APOS_STRING_MODE,
  	              modes.CSS_NUMBER_MODE,
  	              hljs.QUOTE_STRING_MODE
  	            ]
  	          }
  	        ]
  	      },

  	      // css variables
  	      modes.CSS_VARIABLE,

  	      // attributes
  	      //  - only from beginning of line + whitespace
  	      //  - must have whitespace after it
  	      {
  	        className: 'attribute',
  	        begin: '\\b(' + ATTRIBUTES.join('|') + ')\\b',
  	        starts: {
  	          // value container
  	          end: /;|$/,
  	          contains: [
  	            modes.HEXCOLOR,
  	            VARIABLE,
  	            hljs.APOS_STRING_MODE,
  	            hljs.QUOTE_STRING_MODE,
  	            modes.CSS_NUMBER_MODE,
  	            hljs.C_BLOCK_COMMENT_MODE,
  	            modes.IMPORTANT,
  	            modes.FUNCTION_DISPATCH
  	          ],
  	          illegal: /\./,
  	          relevance: 0
  	        }
  	      },
  	      modes.FUNCTION_DISPATCH
  	    ]
  	  };
  	}

  	stylus_1 = stylus;
  	return stylus_1;
  }

  /*
  Language: SubUnit
  Author: Sergey Bronnikov <sergeyb@bronevichok.ru>
  Website: https://pypi.org/project/python-subunit/
  */

  var subunit_1;
  var hasRequiredSubunit;

  function requireSubunit () {
  	if (hasRequiredSubunit) return subunit_1;
  	hasRequiredSubunit = 1;
  	function subunit(hljs) {
  	  const DETAILS = {
  	    className: 'string',
  	    begin: '\\[\n(multipart)?',
  	    end: '\\]\n'
  	  };
  	  const TIME = {
  	    className: 'string',
  	    begin: '\\d{4}-\\d{2}-\\d{2}(\\s+)\\d{2}:\\d{2}:\\d{2}\.\\d+Z'
  	  };
  	  const PROGRESSVALUE = {
  	    className: 'string',
  	    begin: '(\\+|-)\\d+'
  	  };
  	  const KEYWORDS = {
  	    className: 'keyword',
  	    relevance: 10,
  	    variants: [
  	      { begin: '^(test|testing|success|successful|failure|error|skip|xfail|uxsuccess)(:?)\\s+(test)?' },
  	      { begin: '^progress(:?)(\\s+)?(pop|push)?' },
  	      { begin: '^tags:' },
  	      { begin: '^time:' }
  	    ]
  	  };
  	  return {
  	    name: 'SubUnit',
  	    case_insensitive: true,
  	    contains: [
  	      DETAILS,
  	      TIME,
  	      PROGRESSVALUE,
  	      KEYWORDS
  	    ]
  	  };
  	}

  	subunit_1 = subunit;
  	return subunit_1;
  }

  /**
   * @param {string} value
   * @returns {RegExp}
   * */

  var swift_1;
  var hasRequiredSwift;

  function requireSwift () {
  	if (hasRequiredSwift) return swift_1;
  	hasRequiredSwift = 1;
  	/**
  	 * @param {RegExp | string } re
  	 * @returns {string}
  	 */
  	function source(re) {
  	  if (!re) return null;
  	  if (typeof re === "string") return re;

  	  return re.source;
  	}

  	/**
  	 * @param {RegExp | string } re
  	 * @returns {string}
  	 */
  	function lookahead(re) {
  	  return concat('(?=', re, ')');
  	}

  	/**
  	 * @param {...(RegExp | string) } args
  	 * @returns {string}
  	 */
  	function concat(...args) {
  	  const joined = args.map((x) => source(x)).join("");
  	  return joined;
  	}

  	/**
  	 * @param { Array<string | RegExp | Object> } args
  	 * @returns {object}
  	 */
  	function stripOptionsFromArgs(args) {
  	  const opts = args[args.length - 1];

  	  if (typeof opts === 'object' && opts.constructor === Object) {
  	    args.splice(args.length - 1, 1);
  	    return opts;
  	  } else {
  	    return {};
  	  }
  	}

  	/** @typedef { {capture?: boolean} } RegexEitherOptions */

  	/**
  	 * Any of the passed expresssions may match
  	 *
  	 * Creates a huge this | this | that | that match
  	 * @param {(RegExp | string)[] | [...(RegExp | string)[], RegexEitherOptions]} args
  	 * @returns {string}
  	 */
  	function either(...args) {
  	  /** @type { object & {capture?: boolean} }  */
  	  const opts = stripOptionsFromArgs(args);
  	  const joined = '('
  	    + (opts.capture ? "" : "?:")
  	    + args.map((x) => source(x)).join("|") + ")";
  	  return joined;
  	}

  	const keywordWrapper = keyword => concat(
  	  /\b/,
  	  keyword,
  	  /\w$/.test(keyword) ? /\b/ : /\B/
  	);

  	// Keywords that require a leading dot.
  	const dotKeywords = [
  	  'Protocol', // contextual
  	  'Type' // contextual
  	].map(keywordWrapper);

  	// Keywords that may have a leading dot.
  	const optionalDotKeywords = [
  	  'init',
  	  'self'
  	].map(keywordWrapper);

  	// should register as keyword, not type
  	const keywordTypes = [
  	  'Any',
  	  'Self'
  	];

  	// Regular keywords and literals.
  	const keywords = [
  	  // strings below will be fed into the regular `keywords` engine while regex
  	  // will result in additional modes being created to scan for those keywords to
  	  // avoid conflicts with other rules
  	  'actor',
  	  'any', // contextual
  	  'associatedtype',
  	  'async',
  	  'await',
  	  /as\?/, // operator
  	  /as!/, // operator
  	  'as', // operator
  	  'break',
  	  'case',
  	  'catch',
  	  'class',
  	  'continue',
  	  'convenience', // contextual
  	  'default',
  	  'defer',
  	  'deinit',
  	  'didSet', // contextual
  	  'distributed',
  	  'do',
  	  'dynamic', // contextual
  	  'else',
  	  'enum',
  	  'extension',
  	  'fallthrough',
  	  /fileprivate\(set\)/,
  	  'fileprivate',
  	  'final', // contextual
  	  'for',
  	  'func',
  	  'get', // contextual
  	  'guard',
  	  'if',
  	  'import',
  	  'indirect', // contextual
  	  'infix', // contextual
  	  /init\?/,
  	  /init!/,
  	  'inout',
  	  /internal\(set\)/,
  	  'internal',
  	  'in',
  	  'is', // operator
  	  'isolated', // contextual
  	  'nonisolated', // contextual
  	  'lazy', // contextual
  	  'let',
  	  'mutating', // contextual
  	  'nonmutating', // contextual
  	  /open\(set\)/, // contextual
  	  'open', // contextual
  	  'operator',
  	  'optional', // contextual
  	  'override', // contextual
  	  'postfix', // contextual
  	  'precedencegroup',
  	  'prefix', // contextual
  	  /private\(set\)/,
  	  'private',
  	  'protocol',
  	  /public\(set\)/,
  	  'public',
  	  'repeat',
  	  'required', // contextual
  	  'rethrows',
  	  'return',
  	  'set', // contextual
  	  'some', // contextual
  	  'static',
  	  'struct',
  	  'subscript',
  	  'super',
  	  'switch',
  	  'throws',
  	  'throw',
  	  /try\?/, // operator
  	  /try!/, // operator
  	  'try', // operator
  	  'typealias',
  	  /unowned\(safe\)/, // contextual
  	  /unowned\(unsafe\)/, // contextual
  	  'unowned', // contextual
  	  'var',
  	  'weak', // contextual
  	  'where',
  	  'while',
  	  'willSet' // contextual
  	];

  	// NOTE: Contextual keywords are reserved only in specific contexts.
  	// Ideally, these should be matched using modes to avoid false positives.

  	// Literals.
  	const literals = [
  	  'false',
  	  'nil',
  	  'true'
  	];

  	// Keywords used in precedence groups.
  	const precedencegroupKeywords = [
  	  'assignment',
  	  'associativity',
  	  'higherThan',
  	  'left',
  	  'lowerThan',
  	  'none',
  	  'right'
  	];

  	// Keywords that start with a number sign (#).
  	// #(un)available is handled separately.
  	const numberSignKeywords = [
  	  '#colorLiteral',
  	  '#column',
  	  '#dsohandle',
  	  '#else',
  	  '#elseif',
  	  '#endif',
  	  '#error',
  	  '#file',
  	  '#fileID',
  	  '#fileLiteral',
  	  '#filePath',
  	  '#function',
  	  '#if',
  	  '#imageLiteral',
  	  '#keyPath',
  	  '#line',
  	  '#selector',
  	  '#sourceLocation',
  	  '#warn_unqualified_access',
  	  '#warning'
  	];

  	// Global functions in the Standard Library.
  	const builtIns = [
  	  'abs',
  	  'all',
  	  'any',
  	  'assert',
  	  'assertionFailure',
  	  'debugPrint',
  	  'dump',
  	  'fatalError',
  	  'getVaList',
  	  'isKnownUniquelyReferenced',
  	  'max',
  	  'min',
  	  'numericCast',
  	  'pointwiseMax',
  	  'pointwiseMin',
  	  'precondition',
  	  'preconditionFailure',
  	  'print',
  	  'readLine',
  	  'repeatElement',
  	  'sequence',
  	  'stride',
  	  'swap',
  	  'swift_unboxFromSwiftValueWithType',
  	  'transcode',
  	  'type',
  	  'unsafeBitCast',
  	  'unsafeDowncast',
  	  'withExtendedLifetime',
  	  'withUnsafeMutablePointer',
  	  'withUnsafePointer',
  	  'withVaList',
  	  'withoutActuallyEscaping',
  	  'zip'
  	];

  	// Valid first characters for operators.
  	const operatorHead = either(
  	  /[/=\-+!*%<>&|^~?]/,
  	  /[\u00A1-\u00A7]/,
  	  /[\u00A9\u00AB]/,
  	  /[\u00AC\u00AE]/,
  	  /[\u00B0\u00B1]/,
  	  /[\u00B6\u00BB\u00BF\u00D7\u00F7]/,
  	  /[\u2016-\u2017]/,
  	  /[\u2020-\u2027]/,
  	  /[\u2030-\u203E]/,
  	  /[\u2041-\u2053]/,
  	  /[\u2055-\u205E]/,
  	  /[\u2190-\u23FF]/,
  	  /[\u2500-\u2775]/,
  	  /[\u2794-\u2BFF]/,
  	  /[\u2E00-\u2E7F]/,
  	  /[\u3001-\u3003]/,
  	  /[\u3008-\u3020]/,
  	  /[\u3030]/
  	);

  	// Valid characters for operators.
  	const operatorCharacter = either(
  	  operatorHead,
  	  /[\u0300-\u036F]/,
  	  /[\u1DC0-\u1DFF]/,
  	  /[\u20D0-\u20FF]/,
  	  /[\uFE00-\uFE0F]/,
  	  /[\uFE20-\uFE2F]/
  	  // TODO: The following characters are also allowed, but the regex isn't supported yet.
  	  // /[\u{E0100}-\u{E01EF}]/u
  	);

  	// Valid operator.
  	const operator = concat(operatorHead, operatorCharacter, '*');

  	// Valid first characters for identifiers.
  	const identifierHead = either(
  	  /[a-zA-Z_]/,
  	  /[\u00A8\u00AA\u00AD\u00AF\u00B2-\u00B5\u00B7-\u00BA]/,
  	  /[\u00BC-\u00BE\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u00FF]/,
  	  /[\u0100-\u02FF\u0370-\u167F\u1681-\u180D\u180F-\u1DBF]/,
  	  /[\u1E00-\u1FFF]/,
  	  /[\u200B-\u200D\u202A-\u202E\u203F-\u2040\u2054\u2060-\u206F]/,
  	  /[\u2070-\u20CF\u2100-\u218F\u2460-\u24FF\u2776-\u2793]/,
  	  /[\u2C00-\u2DFF\u2E80-\u2FFF]/,
  	  /[\u3004-\u3007\u3021-\u302F\u3031-\u303F\u3040-\uD7FF]/,
  	  /[\uF900-\uFD3D\uFD40-\uFDCF\uFDF0-\uFE1F\uFE30-\uFE44]/,
  	  /[\uFE47-\uFEFE\uFF00-\uFFFD]/ // Should be /[\uFE47-\uFFFD]/, but we have to exclude FEFF.
  	  // The following characters are also allowed, but the regexes aren't supported yet.
  	  // /[\u{10000}-\u{1FFFD}\u{20000-\u{2FFFD}\u{30000}-\u{3FFFD}\u{40000}-\u{4FFFD}]/u,
  	  // /[\u{50000}-\u{5FFFD}\u{60000-\u{6FFFD}\u{70000}-\u{7FFFD}\u{80000}-\u{8FFFD}]/u,
  	  // /[\u{90000}-\u{9FFFD}\u{A0000-\u{AFFFD}\u{B0000}-\u{BFFFD}\u{C0000}-\u{CFFFD}]/u,
  	  // /[\u{D0000}-\u{DFFFD}\u{E0000-\u{EFFFD}]/u
  	);

  	// Valid characters for identifiers.
  	const identifierCharacter = either(
  	  identifierHead,
  	  /\d/,
  	  /[\u0300-\u036F\u1DC0-\u1DFF\u20D0-\u20FF\uFE20-\uFE2F]/
  	);

  	// Valid identifier.
  	const identifier = concat(identifierHead, identifierCharacter, '*');

  	// Valid type identifier.
  	const typeIdentifier = concat(/[A-Z]/, identifierCharacter, '*');

  	// Built-in attributes, which are highlighted as keywords.
  	// @available is handled separately.
  	const keywordAttributes = [
  	  'autoclosure',
  	  concat(/convention\(/, either('swift', 'block', 'c'), /\)/),
  	  'discardableResult',
  	  'dynamicCallable',
  	  'dynamicMemberLookup',
  	  'escaping',
  	  'frozen',
  	  'GKInspectable',
  	  'IBAction',
  	  'IBDesignable',
  	  'IBInspectable',
  	  'IBOutlet',
  	  'IBSegueAction',
  	  'inlinable',
  	  'main',
  	  'nonobjc',
  	  'NSApplicationMain',
  	  'NSCopying',
  	  'NSManaged',
  	  concat(/objc\(/, identifier, /\)/),
  	  'objc',
  	  'objcMembers',
  	  'propertyWrapper',
  	  'requires_stored_property_inits',
  	  'resultBuilder',
  	  'testable',
  	  'UIApplicationMain',
  	  'unknown',
  	  'usableFromInline'
  	];

  	// Contextual keywords used in @available and #(un)available.
  	const availabilityKeywords = [
  	  'iOS',
  	  'iOSApplicationExtension',
  	  'macOS',
  	  'macOSApplicationExtension',
  	  'macCatalyst',
  	  'macCatalystApplicationExtension',
  	  'watchOS',
  	  'watchOSApplicationExtension',
  	  'tvOS',
  	  'tvOSApplicationExtension',
  	  'swift'
  	];

  	/*
  	Language: Swift
  	Description: Swift is a general-purpose programming language built using a modern approach to safety, performance, and software design patterns.
  	Author: Steven Van Impe <steven.vanimpe@icloud.com>
  	Contributors: Chris Eidhof <chris@eidhof.nl>, Nate Cook <natecook@gmail.com>, Alexander Lichter <manniL@gmx.net>, Richard Gibson <gibson042@github>
  	Website: https://swift.org
  	Category: common, system
  	*/

  	/** @type LanguageFn */
  	function swift(hljs) {
  	  const WHITESPACE = {
  	    match: /\s+/,
  	    relevance: 0
  	  };
  	  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID411
  	  const BLOCK_COMMENT = hljs.COMMENT(
  	    '/\\*',
  	    '\\*/',
  	    { contains: [ 'self' ] }
  	  );
  	  const COMMENTS = [
  	    hljs.C_LINE_COMMENT_MODE,
  	    BLOCK_COMMENT
  	  ];

  	  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID413
  	  // https://docs.swift.org/swift-book/ReferenceManual/zzSummaryOfTheGrammar.html
  	  const DOT_KEYWORD = {
  	    match: [
  	      /\./,
  	      either(...dotKeywords, ...optionalDotKeywords)
  	    ],
  	    className: { 2: "keyword" }
  	  };
  	  const KEYWORD_GUARD = {
  	    // Consume .keyword to prevent highlighting properties and methods as keywords.
  	    match: concat(/\./, either(...keywords)),
  	    relevance: 0
  	  };
  	  const PLAIN_KEYWORDS = keywords
  	    .filter(kw => typeof kw === 'string')
  	    .concat([ "_|0" ]); // seems common, so 0 relevance
  	  const REGEX_KEYWORDS = keywords
  	    .filter(kw => typeof kw !== 'string') // find regex
  	    .concat(keywordTypes)
  	    .map(keywordWrapper);
  	  const KEYWORD = { variants: [
  	    {
  	      className: 'keyword',
  	      match: either(...REGEX_KEYWORDS, ...optionalDotKeywords)
  	    }
  	  ] };
  	  // find all the regular keywords
  	  const KEYWORDS = {
  	    $pattern: either(
  	      /\b\w+/, // regular keywords
  	      /#\w+/ // number keywords
  	    ),
  	    keyword: PLAIN_KEYWORDS
  	      .concat(numberSignKeywords),
  	    literal: literals
  	  };
  	  const KEYWORD_MODES = [
  	    DOT_KEYWORD,
  	    KEYWORD_GUARD,
  	    KEYWORD
  	  ];

  	  // https://github.com/apple/swift/tree/main/stdlib/public/core
  	  const BUILT_IN_GUARD = {
  	    // Consume .built_in to prevent highlighting properties and methods.
  	    match: concat(/\./, either(...builtIns)),
  	    relevance: 0
  	  };
  	  const BUILT_IN = {
  	    className: 'built_in',
  	    match: concat(/\b/, either(...builtIns), /(?=\()/)
  	  };
  	  const BUILT_INS = [
  	    BUILT_IN_GUARD,
  	    BUILT_IN
  	  ];

  	  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID418
  	  const OPERATOR_GUARD = {
  	    // Prevent -> from being highlighting as an operator.
  	    match: /->/,
  	    relevance: 0
  	  };
  	  const OPERATOR = {
  	    className: 'operator',
  	    relevance: 0,
  	    variants: [
  	      { match: operator },
  	      {
  	        // dot-operator: only operators that start with a dot are allowed to use dots as
  	        // characters (..., ...<, .*, etc). So there rule here is: a dot followed by one or more
  	        // characters that may also include dots.
  	        match: `\\.(\\.|${operatorCharacter})+` }
  	    ]
  	  };
  	  const OPERATORS = [
  	    OPERATOR_GUARD,
  	    OPERATOR
  	  ];

  	  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_numeric-literal
  	  // TODO: Update for leading `-` after lookbehind is supported everywhere
  	  const decimalDigits = '([0-9]_*)+';
  	  const hexDigits = '([0-9a-fA-F]_*)+';
  	  const NUMBER = {
  	    className: 'number',
  	    relevance: 0,
  	    variants: [
  	      // decimal floating-point-literal (subsumes decimal-literal)
  	      { match: `\\b(${decimalDigits})(\\.(${decimalDigits}))?` + `([eE][+-]?(${decimalDigits}))?\\b` },
  	      // hexadecimal floating-point-literal (subsumes hexadecimal-literal)
  	      { match: `\\b0x(${hexDigits})(\\.(${hexDigits}))?` + `([pP][+-]?(${decimalDigits}))?\\b` },
  	      // octal-literal
  	      { match: /\b0o([0-7]_*)+\b/ },
  	      // binary-literal
  	      { match: /\b0b([01]_*)+\b/ }
  	    ]
  	  };

  	  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_string-literal
  	  const ESCAPED_CHARACTER = (rawDelimiter = "") => ({
  	    className: 'subst',
  	    variants: [
  	      { match: concat(/\\/, rawDelimiter, /[0\\tnr"']/) },
  	      { match: concat(/\\/, rawDelimiter, /u\{[0-9a-fA-F]{1,8}\}/) }
  	    ]
  	  });
  	  const ESCAPED_NEWLINE = (rawDelimiter = "") => ({
  	    className: 'subst',
  	    match: concat(/\\/, rawDelimiter, /[\t ]*(?:[\r\n]|\r\n)/)
  	  });
  	  const INTERPOLATION = (rawDelimiter = "") => ({
  	    className: 'subst',
  	    label: "interpol",
  	    begin: concat(/\\/, rawDelimiter, /\(/),
  	    end: /\)/
  	  });
  	  const MULTILINE_STRING = (rawDelimiter = "") => ({
  	    begin: concat(rawDelimiter, /"""/),
  	    end: concat(/"""/, rawDelimiter),
  	    contains: [
  	      ESCAPED_CHARACTER(rawDelimiter),
  	      ESCAPED_NEWLINE(rawDelimiter),
  	      INTERPOLATION(rawDelimiter)
  	    ]
  	  });
  	  const SINGLE_LINE_STRING = (rawDelimiter = "") => ({
  	    begin: concat(rawDelimiter, /"/),
  	    end: concat(/"/, rawDelimiter),
  	    contains: [
  	      ESCAPED_CHARACTER(rawDelimiter),
  	      INTERPOLATION(rawDelimiter)
  	    ]
  	  });
  	  const STRING = {
  	    className: 'string',
  	    variants: [
  	      MULTILINE_STRING(),
  	      MULTILINE_STRING("#"),
  	      MULTILINE_STRING("##"),
  	      MULTILINE_STRING("###"),
  	      SINGLE_LINE_STRING(),
  	      SINGLE_LINE_STRING("#"),
  	      SINGLE_LINE_STRING("##"),
  	      SINGLE_LINE_STRING("###")
  	    ]
  	  };

  	  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID412
  	  const QUOTED_IDENTIFIER = { match: concat(/`/, identifier, /`/) };
  	  const IMPLICIT_PARAMETER = {
  	    className: 'variable',
  	    match: /\$\d+/
  	  };
  	  const PROPERTY_WRAPPER_PROJECTION = {
  	    className: 'variable',
  	    match: `\\$${identifierCharacter}+`
  	  };
  	  const IDENTIFIERS = [
  	    QUOTED_IDENTIFIER,
  	    IMPLICIT_PARAMETER,
  	    PROPERTY_WRAPPER_PROJECTION
  	  ];

  	  // https://docs.swift.org/swift-book/ReferenceManual/Attributes.html
  	  const AVAILABLE_ATTRIBUTE = {
  	    match: /(@|#(un)?)available/,
  	    className: "keyword",
  	    starts: { contains: [
  	      {
  	        begin: /\(/,
  	        end: /\)/,
  	        keywords: availabilityKeywords,
  	        contains: [
  	          ...OPERATORS,
  	          NUMBER,
  	          STRING
  	        ]
  	      }
  	    ] }
  	  };
  	  const KEYWORD_ATTRIBUTE = {
  	    className: 'keyword',
  	    match: concat(/@/, either(...keywordAttributes))
  	  };
  	  const USER_DEFINED_ATTRIBUTE = {
  	    className: 'meta',
  	    match: concat(/@/, identifier)
  	  };
  	  const ATTRIBUTES = [
  	    AVAILABLE_ATTRIBUTE,
  	    KEYWORD_ATTRIBUTE,
  	    USER_DEFINED_ATTRIBUTE
  	  ];

  	  // https://docs.swift.org/swift-book/ReferenceManual/Types.html
  	  const TYPE = {
  	    match: lookahead(/\b[A-Z]/),
  	    relevance: 0,
  	    contains: [
  	      { // Common Apple frameworks, for relevance boost
  	        className: 'type',
  	        match: concat(/(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)/, identifierCharacter, '+')
  	      },
  	      { // Type identifier
  	        className: 'type',
  	        match: typeIdentifier,
  	        relevance: 0
  	      },
  	      { // Optional type
  	        match: /[?!]+/,
  	        relevance: 0
  	      },
  	      { // Variadic parameter
  	        match: /\.\.\./,
  	        relevance: 0
  	      },
  	      { // Protocol composition
  	        match: concat(/\s+&\s+/, lookahead(typeIdentifier)),
  	        relevance: 0
  	      }
  	    ]
  	  };
  	  const GENERIC_ARGUMENTS = {
  	    begin: /</,
  	    end: />/,
  	    keywords: KEYWORDS,
  	    contains: [
  	      ...COMMENTS,
  	      ...KEYWORD_MODES,
  	      ...ATTRIBUTES,
  	      OPERATOR_GUARD,
  	      TYPE
  	    ]
  	  };
  	  TYPE.contains.push(GENERIC_ARGUMENTS);

  	  // https://docs.swift.org/swift-book/ReferenceManual/Expressions.html#ID552
  	  // Prevents element names from being highlighted as keywords.
  	  const TUPLE_ELEMENT_NAME = {
  	    match: concat(identifier, /\s*:/),
  	    keywords: "_|0",
  	    relevance: 0
  	  };
  	  // Matches tuples as well as the parameter list of a function type.
  	  const TUPLE = {
  	    begin: /\(/,
  	    end: /\)/,
  	    relevance: 0,
  	    keywords: KEYWORDS,
  	    contains: [
  	      'self',
  	      TUPLE_ELEMENT_NAME,
  	      ...COMMENTS,
  	      ...KEYWORD_MODES,
  	      ...BUILT_INS,
  	      ...OPERATORS,
  	      NUMBER,
  	      STRING,
  	      ...IDENTIFIERS,
  	      ...ATTRIBUTES,
  	      TYPE
  	    ]
  	  };

  	  const GENERIC_PARAMETERS = {
  	    begin: /</,
  	    end: />/,
  	    contains: [
  	      ...COMMENTS,
  	      TYPE
  	    ]
  	  };
  	  const FUNCTION_PARAMETER_NAME = {
  	    begin: either(
  	      lookahead(concat(identifier, /\s*:/)),
  	      lookahead(concat(identifier, /\s+/, identifier, /\s*:/))
  	    ),
  	    end: /:/,
  	    relevance: 0,
  	    contains: [
  	      {
  	        className: 'keyword',
  	        match: /\b_\b/
  	      },
  	      {
  	        className: 'params',
  	        match: identifier
  	      }
  	    ]
  	  };
  	  const FUNCTION_PARAMETERS = {
  	    begin: /\(/,
  	    end: /\)/,
  	    keywords: KEYWORDS,
  	    contains: [
  	      FUNCTION_PARAMETER_NAME,
  	      ...COMMENTS,
  	      ...KEYWORD_MODES,
  	      ...OPERATORS,
  	      NUMBER,
  	      STRING,
  	      ...ATTRIBUTES,
  	      TYPE,
  	      TUPLE
  	    ],
  	    endsParent: true,
  	    illegal: /["']/
  	  };
  	  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID362
  	  const FUNCTION = {
  	    match: [
  	      /func/,
  	      /\s+/,
  	      either(QUOTED_IDENTIFIER.match, identifier, operator)
  	    ],
  	    className: {
  	      1: "keyword",
  	      3: "title.function"
  	    },
  	    contains: [
  	      GENERIC_PARAMETERS,
  	      FUNCTION_PARAMETERS,
  	      WHITESPACE
  	    ],
  	    illegal: [
  	      /\[/,
  	      /%/
  	    ]
  	  };

  	  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID375
  	  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID379
  	  const INIT_SUBSCRIPT = {
  	    match: [
  	      /\b(?:subscript|init[?!]?)/,
  	      /\s*(?=[<(])/,
  	    ],
  	    className: { 1: "keyword" },
  	    contains: [
  	      GENERIC_PARAMETERS,
  	      FUNCTION_PARAMETERS,
  	      WHITESPACE
  	    ],
  	    illegal: /\[|%/
  	  };
  	  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID380
  	  const OPERATOR_DECLARATION = {
  	    match: [
  	      /operator/,
  	      /\s+/,
  	      operator
  	    ],
  	    className: {
  	      1: "keyword",
  	      3: "title"
  	    }
  	  };

  	  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID550
  	  const PRECEDENCEGROUP = {
  	    begin: [
  	      /precedencegroup/,
  	      /\s+/,
  	      typeIdentifier
  	    ],
  	    className: {
  	      1: "keyword",
  	      3: "title"
  	    },
  	    contains: [ TYPE ],
  	    keywords: [
  	      ...precedencegroupKeywords,
  	      ...literals
  	    ],
  	    end: /}/
  	  };

  	  // Add supported submodes to string interpolation.
  	  for (const variant of STRING.variants) {
  	    const interpolation = variant.contains.find(mode => mode.label === "interpol");
  	    // TODO: Interpolation can contain any expression, so there's room for improvement here.
  	    interpolation.keywords = KEYWORDS;
  	    const submodes = [
  	      ...KEYWORD_MODES,
  	      ...BUILT_INS,
  	      ...OPERATORS,
  	      NUMBER,
  	      STRING,
  	      ...IDENTIFIERS
  	    ];
  	    interpolation.contains = [
  	      ...submodes,
  	      {
  	        begin: /\(/,
  	        end: /\)/,
  	        contains: [
  	          'self',
  	          ...submodes
  	        ]
  	      }
  	    ];
  	  }

  	  return {
  	    name: 'Swift',
  	    keywords: KEYWORDS,
  	    contains: [
  	      ...COMMENTS,
  	      FUNCTION,
  	      INIT_SUBSCRIPT,
  	      {
  	        beginKeywords: 'struct protocol class extension enum actor',
  	        end: '\\{',
  	        excludeEnd: true,
  	        keywords: KEYWORDS,
  	        contains: [
  	          hljs.inherit(hljs.TITLE_MODE, {
  	            className: "title.class",
  	            begin: /[A-Za-z$_][\u00C0-\u02B80-9A-Za-z$_]*/
  	          }),
  	          ...KEYWORD_MODES
  	        ]
  	      },
  	      OPERATOR_DECLARATION,
  	      PRECEDENCEGROUP,
  	      {
  	        beginKeywords: 'import',
  	        end: /$/,
  	        contains: [ ...COMMENTS ],
  	        relevance: 0
  	      },
  	      ...KEYWORD_MODES,
  	      ...BUILT_INS,
  	      ...OPERATORS,
  	      NUMBER,
  	      STRING,
  	      ...IDENTIFIERS,
  	      ...ATTRIBUTES,
  	      TYPE,
  	      TUPLE
  	    ]
  	  };
  	}

  	swift_1 = swift;
  	return swift_1;
  }

  /*
  Language: Tagger Script
  Author: Philipp Wolfer <ph.wolfer@gmail.com>
  Description: Syntax Highlighting for the Tagger Script as used by MusicBrainz Picard.
  Website: https://picard.musicbrainz.org
   */

  var taggerscript_1;
  var hasRequiredTaggerscript;

  function requireTaggerscript () {
  	if (hasRequiredTaggerscript) return taggerscript_1;
  	hasRequiredTaggerscript = 1;
  	function taggerscript(hljs) {
  	  const NOOP = {
  	    className: 'comment',
  	    begin: /\$noop\(/,
  	    end: /\)/,
  	    contains: [
  	      { begin: /\\[()]/ },
  	      {
  	        begin: /\(/,
  	        end: /\)/,
  	        contains: [
  	          { begin: /\\[()]/ },
  	          'self'
  	        ]
  	      }
  	    ],
  	    relevance: 10
  	  };

  	  const FUNCTION = {
  	    className: 'keyword',
  	    begin: /\$[_a-zA-Z0-9]+(?=\()/
  	  };

  	  const VARIABLE = {
  	    className: 'variable',
  	    begin: /%[_a-zA-Z0-9:]+%/
  	  };

  	  const ESCAPE_SEQUENCE_UNICODE = {
  	    className: 'symbol',
  	    begin: /\\u[a-fA-F0-9]{4}/
  	  };

  	  const ESCAPE_SEQUENCE = {
  	    className: 'symbol',
  	    begin: /\\[\\nt$%,()]/
  	  };

  	  return {
  	    name: 'Tagger Script',
  	    contains: [
  	      NOOP,
  	      FUNCTION,
  	      VARIABLE,
  	      ESCAPE_SEQUENCE,
  	      ESCAPE_SEQUENCE_UNICODE
  	    ]
  	  };
  	}

  	taggerscript_1 = taggerscript;
  	return taggerscript_1;
  }

  /*
  Language: YAML
  Description: Yet Another Markdown Language
  Author: Stefan Wienert <stwienert@gmail.com>
  Contributors: Carl Baxter <carl@cbax.tech>
  Requires: ruby.js
  Website: https://yaml.org
  Category: common, config
  */

  var yaml_1;
  var hasRequiredYaml;

  function requireYaml () {
  	if (hasRequiredYaml) return yaml_1;
  	hasRequiredYaml = 1;
  	function yaml(hljs) {
  	  const LITERALS = 'true false yes no null';

  	  // YAML spec allows non-reserved URI characters in tags.
  	  const URI_CHARACTERS = '[\\w#;/?:@&=+$,.~*\'()[\\]]+';

  	  // Define keys as starting with a word character
  	  // ...containing word chars, spaces, colons, forward-slashes, hyphens and periods
  	  // ...and ending with a colon followed immediately by a space, tab or newline.
  	  // The YAML spec allows for much more than this, but this covers most use-cases.
  	  const KEY = {
  	    className: 'attr',
  	    variants: [
  	      { begin: '\\w[\\w :\\/.-]*:(?=[ \t]|$)' },
  	      { // double quoted keys
  	        begin: '"\\w[\\w :\\/.-]*":(?=[ \t]|$)' },
  	      { // single quoted keys
  	        begin: '\'\\w[\\w :\\/.-]*\':(?=[ \t]|$)' }
  	    ]
  	  };

  	  const TEMPLATE_VARIABLES = {
  	    className: 'template-variable',
  	    variants: [
  	      { // jinja templates Ansible
  	        begin: /\{\{/,
  	        end: /\}\}/
  	      },
  	      { // Ruby i18n
  	        begin: /%\{/,
  	        end: /\}/
  	      }
  	    ]
  	  };
  	  const STRING = {
  	    className: 'string',
  	    relevance: 0,
  	    variants: [
  	      {
  	        begin: /'/,
  	        end: /'/
  	      },
  	      {
  	        begin: /"/,
  	        end: /"/
  	      },
  	      { begin: /\S+/ }
  	    ],
  	    contains: [
  	      hljs.BACKSLASH_ESCAPE,
  	      TEMPLATE_VARIABLES
  	    ]
  	  };

  	  // Strings inside of value containers (objects) can't contain braces,
  	  // brackets, or commas
  	  const CONTAINER_STRING = hljs.inherit(STRING, { variants: [
  	    {
  	      begin: /'/,
  	      end: /'/
  	    },
  	    {
  	      begin: /"/,
  	      end: /"/
  	    },
  	    { begin: /[^\s,{}[\]]+/ }
  	  ] });

  	  const DATE_RE = '[0-9]{4}(-[0-9][0-9]){0,2}';
  	  const TIME_RE = '([Tt \\t][0-9][0-9]?(:[0-9][0-9]){2})?';
  	  const FRACTION_RE = '(\\.[0-9]*)?';
  	  const ZONE_RE = '([ \\t])*(Z|[-+][0-9][0-9]?(:[0-9][0-9])?)?';
  	  const TIMESTAMP = {
  	    className: 'number',
  	    begin: '\\b' + DATE_RE + TIME_RE + FRACTION_RE + ZONE_RE + '\\b'
  	  };

  	  const VALUE_CONTAINER = {
  	    end: ',',
  	    endsWithParent: true,
  	    excludeEnd: true,
  	    keywords: LITERALS,
  	    relevance: 0
  	  };
  	  const OBJECT = {
  	    begin: /\{/,
  	    end: /\}/,
  	    contains: [ VALUE_CONTAINER ],
  	    illegal: '\\n',
  	    relevance: 0
  	  };
  	  const ARRAY = {
  	    begin: '\\[',
  	    end: '\\]',
  	    contains: [ VALUE_CONTAINER ],
  	    illegal: '\\n',
  	    relevance: 0
  	  };

  	  const MODES = [
  	    KEY,
  	    {
  	      className: 'meta',
  	      begin: '^---\\s*$',
  	      relevance: 10
  	    },
  	    { // multi line string
  	      // Blocks start with a | or > followed by a newline
  	      //
  	      // Indentation of subsequent lines must be the same to
  	      // be considered part of the block
  	      className: 'string',
  	      begin: '[\\|>]([1-9]?[+-])?[ ]*\\n( +)[^ ][^\\n]*\\n(\\2[^\\n]+\\n?)*'
  	    },
  	    { // Ruby/Rails erb
  	      begin: '<%[%=-]?',
  	      end: '[%-]?%>',
  	      subLanguage: 'ruby',
  	      excludeBegin: true,
  	      excludeEnd: true,
  	      relevance: 0
  	    },
  	    { // named tags
  	      className: 'type',
  	      begin: '!\\w+!' + URI_CHARACTERS
  	    },
  	    // https://yaml.org/spec/1.2/spec.html#id2784064
  	    { // verbatim tags
  	      className: 'type',
  	      begin: '!<' + URI_CHARACTERS + ">"
  	    },
  	    { // primary tags
  	      className: 'type',
  	      begin: '!' + URI_CHARACTERS
  	    },
  	    { // secondary tags
  	      className: 'type',
  	      begin: '!!' + URI_CHARACTERS
  	    },
  	    { // fragment id &ref
  	      className: 'meta',
  	      begin: '&' + hljs.UNDERSCORE_IDENT_RE + '$'
  	    },
  	    { // fragment reference *ref
  	      className: 'meta',
  	      begin: '\\*' + hljs.UNDERSCORE_IDENT_RE + '$'
  	    },
  	    { // array listing
  	      className: 'bullet',
  	      // TODO: remove |$ hack when we have proper look-ahead support
  	      begin: '-(?=[ ]|$)',
  	      relevance: 0
  	    },
  	    hljs.HASH_COMMENT_MODE,
  	    {
  	      beginKeywords: LITERALS,
  	      keywords: { literal: LITERALS }
  	    },
  	    TIMESTAMP,
  	    // numbers are any valid C-style number that
  	    // sit isolated from other words
  	    {
  	      className: 'number',
  	      begin: hljs.C_NUMBER_RE + '\\b',
  	      relevance: 0
  	    },
  	    OBJECT,
  	    ARRAY,
  	    STRING
  	  ];

  	  const VALUE_MODES = [ ...MODES ];
  	  VALUE_MODES.pop();
  	  VALUE_MODES.push(CONTAINER_STRING);
  	  VALUE_CONTAINER.contains = VALUE_MODES;

  	  return {
  	    name: 'YAML',
  	    case_insensitive: true,
  	    aliases: [ 'yml' ],
  	    contains: MODES
  	  };
  	}

  	yaml_1 = yaml;
  	return yaml_1;
  }

  /*
  Language: Test Anything Protocol
  Description: TAP, the Test Anything Protocol, is a simple text-based interface between testing modules in a test harness.
  Requires: yaml.js
  Author: Sergey Bronnikov <sergeyb@bronevichok.ru>
  Website: https://testanything.org
  */

  var tap_1;
  var hasRequiredTap;

  function requireTap () {
  	if (hasRequiredTap) return tap_1;
  	hasRequiredTap = 1;
  	function tap(hljs) {
  	  return {
  	    name: 'Test Anything Protocol',
  	    case_insensitive: true,
  	    contains: [
  	      hljs.HASH_COMMENT_MODE,
  	      // version of format and total amount of testcases
  	      {
  	        className: 'meta',
  	        variants: [
  	          { begin: '^TAP version (\\d+)$' },
  	          { begin: '^1\\.\\.(\\d+)$' }
  	        ]
  	      },
  	      // YAML block
  	      {
  	        begin: /---$/,
  	        end: '\\.\\.\\.$',
  	        subLanguage: 'yaml',
  	        relevance: 0
  	      },
  	      // testcase number
  	      {
  	        className: 'number',
  	        begin: ' (\\d+) '
  	      },
  	      // testcase status and description
  	      {
  	        className: 'symbol',
  	        variants: [
  	          { begin: '^ok' },
  	          { begin: '^not ok' }
  	        ]
  	      }
  	    ]
  	  };
  	}

  	tap_1 = tap;
  	return tap_1;
  }

  /*
  Language: Tcl
  Description: Tcl is a very simple programming language.
  Author: Radek Liska <radekliska@gmail.com>
  Website: https://www.tcl.tk/about/language.html
  */

  var tcl_1;
  var hasRequiredTcl;

  function requireTcl () {
  	if (hasRequiredTcl) return tcl_1;
  	hasRequiredTcl = 1;
  	function tcl(hljs) {
  	  const regex = hljs.regex;
  	  const TCL_IDENT = /[a-zA-Z_][a-zA-Z0-9_]*/;

  	  const NUMBER = {
  	    className: 'number',
  	    variants: [
  	      hljs.BINARY_NUMBER_MODE,
  	      hljs.C_NUMBER_MODE
  	    ]
  	  };

  	  const KEYWORDS = [
  	    "after",
  	    "append",
  	    "apply",
  	    "array",
  	    "auto_execok",
  	    "auto_import",
  	    "auto_load",
  	    "auto_mkindex",
  	    "auto_mkindex_old",
  	    "auto_qualify",
  	    "auto_reset",
  	    "bgerror",
  	    "binary",
  	    "break",
  	    "catch",
  	    "cd",
  	    "chan",
  	    "clock",
  	    "close",
  	    "concat",
  	    "continue",
  	    "dde",
  	    "dict",
  	    "encoding",
  	    "eof",
  	    "error",
  	    "eval",
  	    "exec",
  	    "exit",
  	    "expr",
  	    "fblocked",
  	    "fconfigure",
  	    "fcopy",
  	    "file",
  	    "fileevent",
  	    "filename",
  	    "flush",
  	    "for",
  	    "foreach",
  	    "format",
  	    "gets",
  	    "glob",
  	    "global",
  	    "history",
  	    "http",
  	    "if",
  	    "incr",
  	    "info",
  	    "interp",
  	    "join",
  	    "lappend|10",
  	    "lassign|10",
  	    "lindex|10",
  	    "linsert|10",
  	    "list",
  	    "llength|10",
  	    "load",
  	    "lrange|10",
  	    "lrepeat|10",
  	    "lreplace|10",
  	    "lreverse|10",
  	    "lsearch|10",
  	    "lset|10",
  	    "lsort|10",
  	    "mathfunc",
  	    "mathop",
  	    "memory",
  	    "msgcat",
  	    "namespace",
  	    "open",
  	    "package",
  	    "parray",
  	    "pid",
  	    "pkg::create",
  	    "pkg_mkIndex",
  	    "platform",
  	    "platform::shell",
  	    "proc",
  	    "puts",
  	    "pwd",
  	    "read",
  	    "refchan",
  	    "regexp",
  	    "registry",
  	    "regsub|10",
  	    "rename",
  	    "return",
  	    "safe",
  	    "scan",
  	    "seek",
  	    "set",
  	    "socket",
  	    "source",
  	    "split",
  	    "string",
  	    "subst",
  	    "switch",
  	    "tcl_endOfWord",
  	    "tcl_findLibrary",
  	    "tcl_startOfNextWord",
  	    "tcl_startOfPreviousWord",
  	    "tcl_wordBreakAfter",
  	    "tcl_wordBreakBefore",
  	    "tcltest",
  	    "tclvars",
  	    "tell",
  	    "time",
  	    "tm",
  	    "trace",
  	    "unknown",
  	    "unload",
  	    "unset",
  	    "update",
  	    "uplevel",
  	    "upvar",
  	    "variable",
  	    "vwait",
  	    "while"
  	  ];

  	  return {
  	    name: 'Tcl',
  	    aliases: [ 'tk' ],
  	    keywords: KEYWORDS,
  	    contains: [
  	      hljs.COMMENT(';[ \\t]*#', '$'),
  	      hljs.COMMENT('^[ \\t]*#', '$'),
  	      {
  	        beginKeywords: 'proc',
  	        end: '[\\{]',
  	        excludeEnd: true,
  	        contains: [
  	          {
  	            className: 'title',
  	            begin: '[ \\t\\n\\r]+(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*',
  	            end: '[ \\t\\n\\r]',
  	            endsWithParent: true,
  	            excludeEnd: true
  	          }
  	        ]
  	      },
  	      {
  	        className: "variable",
  	        variants: [
  	          { begin: regex.concat(
  	            /\$/,
  	            regex.optional(/::/),
  	            TCL_IDENT,
  	            '(::',
  	            TCL_IDENT,
  	            ')*'
  	          ) },
  	          {
  	            begin: '\\$\\{(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*',
  	            end: '\\}',
  	            contains: [ NUMBER ]
  	          }
  	        ]
  	      },
  	      {
  	        className: 'string',
  	        contains: [ hljs.BACKSLASH_ESCAPE ],
  	        variants: [ hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null }) ]
  	      },
  	      NUMBER
  	    ]
  	  };
  	}

  	tcl_1 = tcl;
  	return tcl_1;
  }

  /*
  Language: Thrift
  Author: Oleg Efimov <efimovov@gmail.com>
  Description: Thrift message definition format
  Website: https://thrift.apache.org
  Category: protocols
  */

  var thrift_1;
  var hasRequiredThrift;

  function requireThrift () {
  	if (hasRequiredThrift) return thrift_1;
  	hasRequiredThrift = 1;
  	function thrift(hljs) {
  	  const TYPES = [
  	    "bool",
  	    "byte",
  	    "i16",
  	    "i32",
  	    "i64",
  	    "double",
  	    "string",
  	    "binary"
  	  ];
  	  const KEYWORDS = [
  	    "namespace",
  	    "const",
  	    "typedef",
  	    "struct",
  	    "enum",
  	    "service",
  	    "exception",
  	    "void",
  	    "oneway",
  	    "set",
  	    "list",
  	    "map",
  	    "required",
  	    "optional"
  	  ];
  	  return {
  	    name: 'Thrift',
  	    keywords: {
  	      keyword: KEYWORDS,
  	      type: TYPES,
  	      literal: 'true false'
  	    },
  	    contains: [
  	      hljs.QUOTE_STRING_MODE,
  	      hljs.NUMBER_MODE,
  	      hljs.C_LINE_COMMENT_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE,
  	      {
  	        className: 'class',
  	        beginKeywords: 'struct enum service exception',
  	        end: /\{/,
  	        illegal: /\n/,
  	        contains: [
  	          hljs.inherit(hljs.TITLE_MODE, {
  	            // hack: eating everything after the first title
  	            starts: {
  	              endsWithParent: true,
  	              excludeEnd: true
  	            } })
  	        ]
  	      },
  	      {
  	        begin: '\\b(set|list|map)\\s*<',
  	        keywords: { type: [
  	          ...TYPES,
  	          "set",
  	          "list",
  	          "map"
  	        ] },
  	        end: '>',
  	        contains: [ 'self' ]
  	      }
  	    ]
  	  };
  	}

  	thrift_1 = thrift;
  	return thrift_1;
  }

  /*
  Language: TP
  Author: Jay Strybis <jay.strybis@gmail.com>
  Description: FANUC TP programming language (TPP).
  */

  var tp_1;
  var hasRequiredTp;

  function requireTp () {
  	if (hasRequiredTp) return tp_1;
  	hasRequiredTp = 1;
  	function tp(hljs) {
  	  const TPID = {
  	    className: 'number',
  	    begin: '[1-9][0-9]*', /* no leading zeros */
  	    relevance: 0
  	  };
  	  const TPLABEL = {
  	    className: 'symbol',
  	    begin: ':[^\\]]+'
  	  };
  	  const TPDATA = {
  	    className: 'built_in',
  	    begin: '(AR|P|PAYLOAD|PR|R|SR|RSR|LBL|VR|UALM|MESSAGE|UTOOL|UFRAME|TIMER|'
  	    + 'TIMER_OVERFLOW|JOINT_MAX_SPEED|RESUME_PROG|DIAG_REC)\\[',
  	    end: '\\]',
  	    contains: [
  	      'self',
  	      TPID,
  	      TPLABEL
  	    ]
  	  };
  	  const TPIO = {
  	    className: 'built_in',
  	    begin: '(AI|AO|DI|DO|F|RI|RO|UI|UO|GI|GO|SI|SO)\\[',
  	    end: '\\]',
  	    contains: [
  	      'self',
  	      TPID,
  	      hljs.QUOTE_STRING_MODE, /* for pos section at bottom */
  	      TPLABEL
  	    ]
  	  };

  	  const KEYWORDS = [
  	    "ABORT",
  	    "ACC",
  	    "ADJUST",
  	    "AND",
  	    "AP_LD",
  	    "BREAK",
  	    "CALL",
  	    "CNT",
  	    "COL",
  	    "CONDITION",
  	    "CONFIG",
  	    "DA",
  	    "DB",
  	    "DIV",
  	    "DETECT",
  	    "ELSE",
  	    "END",
  	    "ENDFOR",
  	    "ERR_NUM",
  	    "ERROR_PROG",
  	    "FINE",
  	    "FOR",
  	    "GP",
  	    "GUARD",
  	    "INC",
  	    "IF",
  	    "JMP",
  	    "LINEAR_MAX_SPEED",
  	    "LOCK",
  	    "MOD",
  	    "MONITOR",
  	    "OFFSET",
  	    "Offset",
  	    "OR",
  	    "OVERRIDE",
  	    "PAUSE",
  	    "PREG",
  	    "PTH",
  	    "RT_LD",
  	    "RUN",
  	    "SELECT",
  	    "SKIP",
  	    "Skip",
  	    "TA",
  	    "TB",
  	    "TO",
  	    "TOOL_OFFSET",
  	    "Tool_Offset",
  	    "UF",
  	    "UT",
  	    "UFRAME_NUM",
  	    "UTOOL_NUM",
  	    "UNLOCK",
  	    "WAIT",
  	    "X",
  	    "Y",
  	    "Z",
  	    "W",
  	    "P",
  	    "R",
  	    "STRLEN",
  	    "SUBSTR",
  	    "FINDSTR",
  	    "VOFFSET",
  	    "PROG",
  	    "ATTR",
  	    "MN",
  	    "POS"
  	  ];
  	  const LITERALS = [
  	    "ON",
  	    "OFF",
  	    "max_speed",
  	    "LPOS",
  	    "JPOS",
  	    "ENABLE",
  	    "DISABLE",
  	    "START",
  	    "STOP",
  	    "RESET"
  	  ];

  	  return {
  	    name: 'TP',
  	    keywords: {
  	      keyword: KEYWORDS,
  	      literal: LITERALS
  	    },
  	    contains: [
  	      TPDATA,
  	      TPIO,
  	      {
  	        className: 'keyword',
  	        begin: '/(PROG|ATTR|MN|POS|END)\\b'
  	      },
  	      {
  	        /* this is for cases like ,CALL */
  	        className: 'keyword',
  	        begin: '(CALL|RUN|POINT_LOGIC|LBL)\\b'
  	      },
  	      {
  	        /* this is for cases like CNT100 where the default lexemes do not
  	         * separate the keyword and the number */
  	        className: 'keyword',
  	        begin: '\\b(ACC|CNT|Skip|Offset|PSPD|RT_LD|AP_LD|Tool_Offset)'
  	      },
  	      {
  	        /* to catch numbers that do not have a word boundary on the left */
  	        className: 'number',
  	        begin: '\\d+(sec|msec|mm/sec|cm/min|inch/min|deg/sec|mm|in|cm)?\\b',
  	        relevance: 0
  	      },
  	      hljs.COMMENT('//', '[;$]'),
  	      hljs.COMMENT('!', '[;$]'),
  	      hljs.COMMENT('--eg:', '$'),
  	      hljs.QUOTE_STRING_MODE,
  	      {
  	        className: 'string',
  	        begin: '\'',
  	        end: '\''
  	      },
  	      hljs.C_NUMBER_MODE,
  	      {
  	        className: 'variable',
  	        begin: '\\$[A-Za-z0-9_]+'
  	      }
  	    ]
  	  };
  	}

  	tp_1 = tp;
  	return tp_1;
  }

  /*
  Language: Twig
  Requires: xml.js
  Author: Luke Holder <lukemh@gmail.com>
  Description: Twig is a templating language for PHP
  Website: https://twig.symfony.com
  Category: template
  */

  var twig_1;
  var hasRequiredTwig;

  function requireTwig () {
  	if (hasRequiredTwig) return twig_1;
  	hasRequiredTwig = 1;
  	function twig(hljs) {
  	  const regex = hljs.regex;
  	  const FUNCTION_NAMES = [
  	    "absolute_url",
  	    "asset|0",
  	    "asset_version",
  	    "attribute",
  	    "block",
  	    "constant",
  	    "controller|0",
  	    "country_timezones",
  	    "csrf_token",
  	    "cycle",
  	    "date",
  	    "dump",
  	    "expression",
  	    "form|0",
  	    "form_end",
  	    "form_errors",
  	    "form_help",
  	    "form_label",
  	    "form_rest",
  	    "form_row",
  	    "form_start",
  	    "form_widget",
  	    "html_classes",
  	    "include",
  	    "is_granted",
  	    "logout_path",
  	    "logout_url",
  	    "max",
  	    "min",
  	    "parent",
  	    "path|0",
  	    "random",
  	    "range",
  	    "relative_path",
  	    "render",
  	    "render_esi",
  	    "source",
  	    "template_from_string",
  	    "url|0"
  	  ];

  	  const FILTERS = [
  	    "abs",
  	    "abbr_class",
  	    "abbr_method",
  	    "batch",
  	    "capitalize",
  	    "column",
  	    "convert_encoding",
  	    "country_name",
  	    "currency_name",
  	    "currency_symbol",
  	    "data_uri",
  	    "date",
  	    "date_modify",
  	    "default",
  	    "escape",
  	    "file_excerpt",
  	    "file_link",
  	    "file_relative",
  	    "filter",
  	    "first",
  	    "format",
  	    "format_args",
  	    "format_args_as_text",
  	    "format_currency",
  	    "format_date",
  	    "format_datetime",
  	    "format_file",
  	    "format_file_from_text",
  	    "format_number",
  	    "format_time",
  	    "html_to_markdown",
  	    "humanize",
  	    "inky_to_html",
  	    "inline_css",
  	    "join",
  	    "json_encode",
  	    "keys",
  	    "language_name",
  	    "last",
  	    "length",
  	    "locale_name",
  	    "lower",
  	    "map",
  	    "markdown",
  	    "markdown_to_html",
  	    "merge",
  	    "nl2br",
  	    "number_format",
  	    "raw",
  	    "reduce",
  	    "replace",
  	    "reverse",
  	    "round",
  	    "slice",
  	    "slug",
  	    "sort",
  	    "spaceless",
  	    "split",
  	    "striptags",
  	    "timezone_name",
  	    "title",
  	    "trans",
  	    "transchoice",
  	    "trim",
  	    "u|0",
  	    "upper",
  	    "url_encode",
  	    "yaml_dump",
  	    "yaml_encode"
  	  ];

  	  let TAG_NAMES = [
  	    "apply",
  	    "autoescape",
  	    "block",
  	    "cache",
  	    "deprecated",
  	    "do",
  	    "embed",
  	    "extends",
  	    "filter",
  	    "flush",
  	    "for",
  	    "form_theme",
  	    "from",
  	    "if",
  	    "import",
  	    "include",
  	    "macro",
  	    "sandbox",
  	    "set",
  	    "stopwatch",
  	    "trans",
  	    "trans_default_domain",
  	    "transchoice",
  	    "use",
  	    "verbatim",
  	    "with"
  	  ];

  	  TAG_NAMES = TAG_NAMES.concat(TAG_NAMES.map(t => `end${t}`));

  	  const STRING = {
  	    scope: 'string',
  	    variants: [
  	      {
  	        begin: /'/,
  	        end: /'/
  	      },
  	      {
  	        begin: /"/,
  	        end: /"/
  	      },
  	    ]
  	  };

  	  const NUMBER = {
  	    scope: "number",
  	    match: /\d+/
  	  };

  	  const PARAMS = {
  	    begin: /\(/,
  	    end: /\)/,
  	    excludeBegin: true,
  	    excludeEnd: true,
  	    contains: [
  	      STRING,
  	      NUMBER
  	    ]
  	  };


  	  const FUNCTIONS = {
  	    beginKeywords: FUNCTION_NAMES.join(" "),
  	    keywords: { name: FUNCTION_NAMES },
  	    relevance: 0,
  	    contains: [ PARAMS ]
  	  };

  	  const FILTER = {
  	    match: /\|(?=[A-Za-z_]+:?)/,
  	    beginScope: "punctuation",
  	    relevance: 0,
  	    contains: [
  	      {
  	        match: /[A-Za-z_]+:?/,
  	        keywords: FILTERS
  	      },
  	    ]
  	  };

  	  const tagNamed = (tagnames, { relevance }) => {
  	    return {
  	      beginScope: {
  	        1: 'template-tag',
  	        3: 'name'
  	      },
  	      relevance: relevance || 2,
  	      endScope: 'template-tag',
  	      begin: [
  	        /\{%/,
  	        /\s*/,
  	        regex.either(...tagnames)
  	      ],
  	      end: /%\}/,
  	      keywords: "in",
  	      contains: [
  	        FILTER,
  	        FUNCTIONS,
  	        STRING,
  	        NUMBER
  	      ]
  	    };
  	  };

  	  const CUSTOM_TAG_RE = /[a-z_]+/;
  	  const TAG = tagNamed(TAG_NAMES, { relevance: 2 });
  	  const CUSTOM_TAG = tagNamed([ CUSTOM_TAG_RE ], { relevance: 1 });

  	  return {
  	    name: 'Twig',
  	    aliases: [ 'craftcms' ],
  	    case_insensitive: true,
  	    subLanguage: 'xml',
  	    contains: [
  	      hljs.COMMENT(/\{#/, /#\}/),
  	      TAG,
  	      CUSTOM_TAG,
  	      {
  	        className: 'template-variable',
  	        begin: /\{\{/,
  	        end: /\}\}/,
  	        contains: [
  	          'self',
  	          FILTER,
  	          FUNCTIONS,
  	          STRING,
  	          NUMBER
  	        ]
  	      }
  	    ]
  	  };
  	}

  	twig_1 = twig;
  	return twig_1;
  }

  var typescript_1;
  var hasRequiredTypescript;

  function requireTypescript () {
  	if (hasRequiredTypescript) return typescript_1;
  	hasRequiredTypescript = 1;
  	const IDENT_RE = '[A-Za-z$_][0-9A-Za-z$_]*';
  	const KEYWORDS = [
  	  "as", // for exports
  	  "in",
  	  "of",
  	  "if",
  	  "for",
  	  "while",
  	  "finally",
  	  "var",
  	  "new",
  	  "function",
  	  "do",
  	  "return",
  	  "void",
  	  "else",
  	  "break",
  	  "catch",
  	  "instanceof",
  	  "with",
  	  "throw",
  	  "case",
  	  "default",
  	  "try",
  	  "switch",
  	  "continue",
  	  "typeof",
  	  "delete",
  	  "let",
  	  "yield",
  	  "const",
  	  "class",
  	  // JS handles these with a special rule
  	  // "get",
  	  // "set",
  	  "debugger",
  	  "async",
  	  "await",
  	  "static",
  	  "import",
  	  "from",
  	  "export",
  	  "extends"
  	];
  	const LITERALS = [
  	  "true",
  	  "false",
  	  "null",
  	  "undefined",
  	  "NaN",
  	  "Infinity"
  	];

  	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects
  	const TYPES = [
  	  // Fundamental objects
  	  "Object",
  	  "Function",
  	  "Boolean",
  	  "Symbol",
  	  // numbers and dates
  	  "Math",
  	  "Date",
  	  "Number",
  	  "BigInt",
  	  // text
  	  "String",
  	  "RegExp",
  	  // Indexed collections
  	  "Array",
  	  "Float32Array",
  	  "Float64Array",
  	  "Int8Array",
  	  "Uint8Array",
  	  "Uint8ClampedArray",
  	  "Int16Array",
  	  "Int32Array",
  	  "Uint16Array",
  	  "Uint32Array",
  	  "BigInt64Array",
  	  "BigUint64Array",
  	  // Keyed collections
  	  "Set",
  	  "Map",
  	  "WeakSet",
  	  "WeakMap",
  	  // Structured data
  	  "ArrayBuffer",
  	  "SharedArrayBuffer",
  	  "Atomics",
  	  "DataView",
  	  "JSON",
  	  // Control abstraction objects
  	  "Promise",
  	  "Generator",
  	  "GeneratorFunction",
  	  "AsyncFunction",
  	  // Reflection
  	  "Reflect",
  	  "Proxy",
  	  // Internationalization
  	  "Intl",
  	  // WebAssembly
  	  "WebAssembly"
  	];

  	const ERROR_TYPES = [
  	  "Error",
  	  "EvalError",
  	  "InternalError",
  	  "RangeError",
  	  "ReferenceError",
  	  "SyntaxError",
  	  "TypeError",
  	  "URIError"
  	];

  	const BUILT_IN_GLOBALS = [
  	  "setInterval",
  	  "setTimeout",
  	  "clearInterval",
  	  "clearTimeout",

  	  "require",
  	  "exports",

  	  "eval",
  	  "isFinite",
  	  "isNaN",
  	  "parseFloat",
  	  "parseInt",
  	  "decodeURI",
  	  "decodeURIComponent",
  	  "encodeURI",
  	  "encodeURIComponent",
  	  "escape",
  	  "unescape"
  	];

  	const BUILT_IN_VARIABLES = [
  	  "arguments",
  	  "this",
  	  "super",
  	  "console",
  	  "window",
  	  "document",
  	  "localStorage",
  	  "sessionStorage",
  	  "module",
  	  "global" // Node.js
  	];

  	const BUILT_INS = [].concat(
  	  BUILT_IN_GLOBALS,
  	  TYPES,
  	  ERROR_TYPES
  	);

  	/*
  	Language: JavaScript
  	Description: JavaScript (JS) is a lightweight, interpreted, or just-in-time compiled programming language with first-class functions.
  	Category: common, scripting, web
  	Website: https://developer.mozilla.org/en-US/docs/Web/JavaScript
  	*/

  	/** @type LanguageFn */
  	function javascript(hljs) {
  	  const regex = hljs.regex;
  	  /**
  	   * Takes a string like "<Booger" and checks to see
  	   * if we can find a matching "</Booger" later in the
  	   * content.
  	   * @param {RegExpMatchArray} match
  	   * @param {{after:number}} param1
  	   */
  	  const hasClosingTag = (match, { after }) => {
  	    const tag = "</" + match[0].slice(1);
  	    const pos = match.input.indexOf(tag, after);
  	    return pos !== -1;
  	  };

  	  const IDENT_RE$1 = IDENT_RE;
  	  const FRAGMENT = {
  	    begin: '<>',
  	    end: '</>'
  	  };
  	  // to avoid some special cases inside isTrulyOpeningTag
  	  const XML_SELF_CLOSING = /<[A-Za-z0-9\\._:-]+\s*\/>/;
  	  const XML_TAG = {
  	    begin: /<[A-Za-z0-9\\._:-]+/,
  	    end: /\/[A-Za-z0-9\\._:-]+>|\/>/,
  	    /**
  	     * @param {RegExpMatchArray} match
  	     * @param {CallbackResponse} response
  	     */
  	    isTrulyOpeningTag: (match, response) => {
  	      const afterMatchIndex = match[0].length + match.index;
  	      const nextChar = match.input[afterMatchIndex];
  	      if (
  	        // HTML should not include another raw `<` inside a tag
  	        // nested type?
  	        // `<Array<Array<number>>`, etc.
  	        nextChar === "<" ||
  	        // the , gives away that this is not HTML
  	        // `<T, A extends keyof T, V>`
  	        nextChar === ","
  	        ) {
  	        response.ignoreMatch();
  	        return;
  	      }

  	      // `<something>`
  	      // Quite possibly a tag, lets look for a matching closing tag...
  	      if (nextChar === ">") {
  	        // if we cannot find a matching closing tag, then we
  	        // will ignore it
  	        if (!hasClosingTag(match, { after: afterMatchIndex })) {
  	          response.ignoreMatch();
  	        }
  	      }

  	      // `<blah />` (self-closing)
  	      // handled by simpleSelfClosing rule

  	      let m;
  	      const afterMatch = match.input.substring(afterMatchIndex);

  	      // some more template typing stuff
  	      //  <T = any>(key?: string) => Modify<
  	      if ((m = afterMatch.match(/^\s*=/))) {
  	        response.ignoreMatch();
  	        return;
  	      }

  	      // `<From extends string>`
  	      // technically this could be HTML, but it smells like a type
  	      // NOTE: This is ugh, but added specifically for https://github.com/highlightjs/highlight.js/issues/3276
  	      if ((m = afterMatch.match(/^\s+extends\s+/))) {
  	        if (m.index === 0) {
  	          response.ignoreMatch();
  	          // eslint-disable-next-line no-useless-return
  	          return;
  	        }
  	      }
  	    }
  	  };
  	  const KEYWORDS$1 = {
  	    $pattern: IDENT_RE,
  	    keyword: KEYWORDS,
  	    literal: LITERALS,
  	    built_in: BUILT_INS,
  	    "variable.language": BUILT_IN_VARIABLES
  	  };

  	  // https://tc39.es/ecma262/#sec-literals-numeric-literals
  	  const decimalDigits = '[0-9](_?[0-9])*';
  	  const frac = `\\.(${decimalDigits})`;
  	  // DecimalIntegerLiteral, including Annex B NonOctalDecimalIntegerLiteral
  	  // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals
  	  const decimalInteger = `0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*`;
  	  const NUMBER = {
  	    className: 'number',
  	    variants: [
  	      // DecimalLiteral
  	      { begin: `(\\b(${decimalInteger})((${frac})|\\.)?|(${frac}))` +
  	        `[eE][+-]?(${decimalDigits})\\b` },
  	      { begin: `\\b(${decimalInteger})\\b((${frac})\\b|\\.)?|(${frac})\\b` },

  	      // DecimalBigIntegerLiteral
  	      { begin: `\\b(0|[1-9](_?[0-9])*)n\\b` },

  	      // NonDecimalIntegerLiteral
  	      { begin: "\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\b" },
  	      { begin: "\\b0[bB][0-1](_?[0-1])*n?\\b" },
  	      { begin: "\\b0[oO][0-7](_?[0-7])*n?\\b" },

  	      // LegacyOctalIntegerLiteral (does not include underscore separators)
  	      // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals
  	      { begin: "\\b0[0-7]+n?\\b" },
  	    ],
  	    relevance: 0
  	  };

  	  const SUBST = {
  	    className: 'subst',
  	    begin: '\\$\\{',
  	    end: '\\}',
  	    keywords: KEYWORDS$1,
  	    contains: [] // defined later
  	  };
  	  const HTML_TEMPLATE = {
  	    begin: 'html`',
  	    end: '',
  	    starts: {
  	      end: '`',
  	      returnEnd: false,
  	      contains: [
  	        hljs.BACKSLASH_ESCAPE,
  	        SUBST
  	      ],
  	      subLanguage: 'xml'
  	    }
  	  };
  	  const CSS_TEMPLATE = {
  	    begin: 'css`',
  	    end: '',
  	    starts: {
  	      end: '`',
  	      returnEnd: false,
  	      contains: [
  	        hljs.BACKSLASH_ESCAPE,
  	        SUBST
  	      ],
  	      subLanguage: 'css'
  	    }
  	  };
  	  const GRAPHQL_TEMPLATE = {
  	    begin: 'gql`',
  	    end: '',
  	    starts: {
  	      end: '`',
  	      returnEnd: false,
  	      contains: [
  	        hljs.BACKSLASH_ESCAPE,
  	        SUBST
  	      ],
  	      subLanguage: 'graphql'
  	    }
  	  };
  	  const TEMPLATE_STRING = {
  	    className: 'string',
  	    begin: '`',
  	    end: '`',
  	    contains: [
  	      hljs.BACKSLASH_ESCAPE,
  	      SUBST
  	    ]
  	  };
  	  const JSDOC_COMMENT = hljs.COMMENT(
  	    /\/\*\*(?!\/)/,
  	    '\\*/',
  	    {
  	      relevance: 0,
  	      contains: [
  	        {
  	          begin: '(?=@[A-Za-z]+)',
  	          relevance: 0,
  	          contains: [
  	            {
  	              className: 'doctag',
  	              begin: '@[A-Za-z]+'
  	            },
  	            {
  	              className: 'type',
  	              begin: '\\{',
  	              end: '\\}',
  	              excludeEnd: true,
  	              excludeBegin: true,
  	              relevance: 0
  	            },
  	            {
  	              className: 'variable',
  	              begin: IDENT_RE$1 + '(?=\\s*(-)|$)',
  	              endsParent: true,
  	              relevance: 0
  	            },
  	            // eat spaces (not newlines) so we can find
  	            // types or variables
  	            {
  	              begin: /(?=[^\n])\s/,
  	              relevance: 0
  	            }
  	          ]
  	        }
  	      ]
  	    }
  	  );
  	  const COMMENT = {
  	    className: "comment",
  	    variants: [
  	      JSDOC_COMMENT,
  	      hljs.C_BLOCK_COMMENT_MODE,
  	      hljs.C_LINE_COMMENT_MODE
  	    ]
  	  };
  	  const SUBST_INTERNALS = [
  	    hljs.APOS_STRING_MODE,
  	    hljs.QUOTE_STRING_MODE,
  	    HTML_TEMPLATE,
  	    CSS_TEMPLATE,
  	    GRAPHQL_TEMPLATE,
  	    TEMPLATE_STRING,
  	    // Skip numbers when they are part of a variable name
  	    { match: /\$\d+/ },
  	    NUMBER,
  	    // This is intentional:
  	    // See https://github.com/highlightjs/highlight.js/issues/3288
  	    // hljs.REGEXP_MODE
  	  ];
  	  SUBST.contains = SUBST_INTERNALS
  	    .concat({
  	      // we need to pair up {} inside our subst to prevent
  	      // it from ending too early by matching another }
  	      begin: /\{/,
  	      end: /\}/,
  	      keywords: KEYWORDS$1,
  	      contains: [
  	        "self"
  	      ].concat(SUBST_INTERNALS)
  	    });
  	  const SUBST_AND_COMMENTS = [].concat(COMMENT, SUBST.contains);
  	  const PARAMS_CONTAINS = SUBST_AND_COMMENTS.concat([
  	    // eat recursive parens in sub expressions
  	    {
  	      begin: /\(/,
  	      end: /\)/,
  	      keywords: KEYWORDS$1,
  	      contains: ["self"].concat(SUBST_AND_COMMENTS)
  	    }
  	  ]);
  	  const PARAMS = {
  	    className: 'params',
  	    begin: /\(/,
  	    end: /\)/,
  	    excludeBegin: true,
  	    excludeEnd: true,
  	    keywords: KEYWORDS$1,
  	    contains: PARAMS_CONTAINS
  	  };

  	  // ES6 classes
  	  const CLASS_OR_EXTENDS = {
  	    variants: [
  	      // class Car extends vehicle
  	      {
  	        match: [
  	          /class/,
  	          /\s+/,
  	          IDENT_RE$1,
  	          /\s+/,
  	          /extends/,
  	          /\s+/,
  	          regex.concat(IDENT_RE$1, "(", regex.concat(/\./, IDENT_RE$1), ")*")
  	        ],
  	        scope: {
  	          1: "keyword",
  	          3: "title.class",
  	          5: "keyword",
  	          7: "title.class.inherited"
  	        }
  	      },
  	      // class Car
  	      {
  	        match: [
  	          /class/,
  	          /\s+/,
  	          IDENT_RE$1
  	        ],
  	        scope: {
  	          1: "keyword",
  	          3: "title.class"
  	        }
  	      },

  	    ]
  	  };

  	  const CLASS_REFERENCE = {
  	    relevance: 0,
  	    match:
  	    regex.either(
  	      // Hard coded exceptions
  	      /\bJSON/,
  	      // Float32Array, OutT
  	      /\b[A-Z][a-z]+([A-Z][a-z]*|\d)*/,
  	      // CSSFactory, CSSFactoryT
  	      /\b[A-Z]{2,}([A-Z][a-z]+|\d)+([A-Z][a-z]*)*/,
  	      // FPs, FPsT
  	      /\b[A-Z]{2,}[a-z]+([A-Z][a-z]+|\d)*([A-Z][a-z]*)*/,
  	      // P
  	      // single letters are not highlighted
  	      // BLAH
  	      // this will be flagged as a UPPER_CASE_CONSTANT instead
  	    ),
  	    className: "title.class",
  	    keywords: {
  	      _: [
  	        // se we still get relevance credit for JS library classes
  	        ...TYPES,
  	        ...ERROR_TYPES
  	      ]
  	    }
  	  };

  	  const USE_STRICT = {
  	    label: "use_strict",
  	    className: 'meta',
  	    relevance: 10,
  	    begin: /^\s*['"]use (strict|asm)['"]/
  	  };

  	  const FUNCTION_DEFINITION = {
  	    variants: [
  	      {
  	        match: [
  	          /function/,
  	          /\s+/,
  	          IDENT_RE$1,
  	          /(?=\s*\()/
  	        ]
  	      },
  	      // anonymous function
  	      {
  	        match: [
  	          /function/,
  	          /\s*(?=\()/
  	        ]
  	      }
  	    ],
  	    className: {
  	      1: "keyword",
  	      3: "title.function"
  	    },
  	    label: "func.def",
  	    contains: [ PARAMS ],
  	    illegal: /%/
  	  };

  	  const UPPER_CASE_CONSTANT = {
  	    relevance: 0,
  	    match: /\b[A-Z][A-Z_0-9]+\b/,
  	    className: "variable.constant"
  	  };

  	  function noneOf(list) {
  	    return regex.concat("(?!", list.join("|"), ")");
  	  }

  	  const FUNCTION_CALL = {
  	    match: regex.concat(
  	      /\b/,
  	      noneOf([
  	        ...BUILT_IN_GLOBALS,
  	        "super",
  	        "import"
  	      ]),
  	      IDENT_RE$1, regex.lookahead(/\(/)),
  	    className: "title.function",
  	    relevance: 0
  	  };

  	  const PROPERTY_ACCESS = {
  	    begin: regex.concat(/\./, regex.lookahead(
  	      regex.concat(IDENT_RE$1, /(?![0-9A-Za-z$_(])/)
  	    )),
  	    end: IDENT_RE$1,
  	    excludeBegin: true,
  	    keywords: "prototype",
  	    className: "property",
  	    relevance: 0
  	  };

  	  const GETTER_OR_SETTER = {
  	    match: [
  	      /get|set/,
  	      /\s+/,
  	      IDENT_RE$1,
  	      /(?=\()/
  	    ],
  	    className: {
  	      1: "keyword",
  	      3: "title.function"
  	    },
  	    contains: [
  	      { // eat to avoid empty params
  	        begin: /\(\)/
  	      },
  	      PARAMS
  	    ]
  	  };

  	  const FUNC_LEAD_IN_RE = '(\\(' +
  	    '[^()]*(\\(' +
  	    '[^()]*(\\(' +
  	    '[^()]*' +
  	    '\\)[^()]*)*' +
  	    '\\)[^()]*)*' +
  	    '\\)|' + hljs.UNDERSCORE_IDENT_RE + ')\\s*=>';

  	  const FUNCTION_VARIABLE = {
  	    match: [
  	      /const|var|let/, /\s+/,
  	      IDENT_RE$1, /\s*/,
  	      /=\s*/,
  	      /(async\s*)?/, // async is optional
  	      regex.lookahead(FUNC_LEAD_IN_RE)
  	    ],
  	    keywords: "async",
  	    className: {
  	      1: "keyword",
  	      3: "title.function"
  	    },
  	    contains: [
  	      PARAMS
  	    ]
  	  };

  	  return {
  	    name: 'JavaScript',
  	    aliases: ['js', 'jsx', 'mjs', 'cjs'],
  	    keywords: KEYWORDS$1,
  	    // this will be extended by TypeScript
  	    exports: { PARAMS_CONTAINS, CLASS_REFERENCE },
  	    illegal: /#(?![$_A-z])/,
  	    contains: [
  	      hljs.SHEBANG({
  	        label: "shebang",
  	        binary: "node",
  	        relevance: 5
  	      }),
  	      USE_STRICT,
  	      hljs.APOS_STRING_MODE,
  	      hljs.QUOTE_STRING_MODE,
  	      HTML_TEMPLATE,
  	      CSS_TEMPLATE,
  	      GRAPHQL_TEMPLATE,
  	      TEMPLATE_STRING,
  	      COMMENT,
  	      // Skip numbers when they are part of a variable name
  	      { match: /\$\d+/ },
  	      NUMBER,
  	      CLASS_REFERENCE,
  	      {
  	        className: 'attr',
  	        begin: IDENT_RE$1 + regex.lookahead(':'),
  	        relevance: 0
  	      },
  	      FUNCTION_VARIABLE,
  	      { // "value" container
  	        begin: '(' + hljs.RE_STARTERS_RE + '|\\b(case|return|throw)\\b)\\s*',
  	        keywords: 'return throw case',
  	        relevance: 0,
  	        contains: [
  	          COMMENT,
  	          hljs.REGEXP_MODE,
  	          {
  	            className: 'function',
  	            // we have to count the parens to make sure we actually have the
  	            // correct bounding ( ) before the =>.  There could be any number of
  	            // sub-expressions inside also surrounded by parens.
  	            begin: FUNC_LEAD_IN_RE,
  	            returnBegin: true,
  	            end: '\\s*=>',
  	            contains: [
  	              {
  	                className: 'params',
  	                variants: [
  	                  {
  	                    begin: hljs.UNDERSCORE_IDENT_RE,
  	                    relevance: 0
  	                  },
  	                  {
  	                    className: null,
  	                    begin: /\(\s*\)/,
  	                    skip: true
  	                  },
  	                  {
  	                    begin: /\(/,
  	                    end: /\)/,
  	                    excludeBegin: true,
  	                    excludeEnd: true,
  	                    keywords: KEYWORDS$1,
  	                    contains: PARAMS_CONTAINS
  	                  }
  	                ]
  	              }
  	            ]
  	          },
  	          { // could be a comma delimited list of params to a function call
  	            begin: /,/,
  	            relevance: 0
  	          },
  	          {
  	            match: /\s+/,
  	            relevance: 0
  	          },
  	          { // JSX
  	            variants: [
  	              { begin: FRAGMENT.begin, end: FRAGMENT.end },
  	              { match: XML_SELF_CLOSING },
  	              {
  	                begin: XML_TAG.begin,
  	                // we carefully check the opening tag to see if it truly
  	                // is a tag and not a false positive
  	                'on:begin': XML_TAG.isTrulyOpeningTag,
  	                end: XML_TAG.end
  	              }
  	            ],
  	            subLanguage: 'xml',
  	            contains: [
  	              {
  	                begin: XML_TAG.begin,
  	                end: XML_TAG.end,
  	                skip: true,
  	                contains: ['self']
  	              }
  	            ]
  	          }
  	        ],
  	      },
  	      FUNCTION_DEFINITION,
  	      {
  	        // prevent this from getting swallowed up by function
  	        // since they appear "function like"
  	        beginKeywords: "while if switch catch for"
  	      },
  	      {
  	        // we have to count the parens to make sure we actually have the correct
  	        // bounding ( ).  There could be any number of sub-expressions inside
  	        // also surrounded by parens.
  	        begin: '\\b(?!function)' + hljs.UNDERSCORE_IDENT_RE +
  	          '\\(' + // first parens
  	          '[^()]*(\\(' +
  	            '[^()]*(\\(' +
  	              '[^()]*' +
  	            '\\)[^()]*)*' +
  	          '\\)[^()]*)*' +
  	          '\\)\\s*\\{', // end parens
  	        returnBegin:true,
  	        label: "func.def",
  	        contains: [
  	          PARAMS,
  	          hljs.inherit(hljs.TITLE_MODE, { begin: IDENT_RE$1, className: "title.function" })
  	        ]
  	      },
  	      // catch ... so it won't trigger the property rule below
  	      {
  	        match: /\.\.\./,
  	        relevance: 0
  	      },
  	      PROPERTY_ACCESS,
  	      // hack: prevents detection of keywords in some circumstances
  	      // .keyword()
  	      // $keyword = x
  	      {
  	        match: '\\$' + IDENT_RE$1,
  	        relevance: 0
  	      },
  	      {
  	        match: [ /\bconstructor(?=\s*\()/ ],
  	        className: { 1: "title.function" },
  	        contains: [ PARAMS ]
  	      },
  	      FUNCTION_CALL,
  	      UPPER_CASE_CONSTANT,
  	      CLASS_OR_EXTENDS,
  	      GETTER_OR_SETTER,
  	      {
  	        match: /\$[(.]/ // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`
  	      }
  	    ]
  	  };
  	}

  	/*
  	Language: TypeScript
  	Author: Panu Horsmalahti <panu.horsmalahti@iki.fi>
  	Contributors: Ike Ku <dempfi@yahoo.com>
  	Description: TypeScript is a strict superset of JavaScript
  	Website: https://www.typescriptlang.org
  	Category: common, scripting
  	*/

  	/** @type LanguageFn */
  	function typescript(hljs) {
  	  const tsLanguage = javascript(hljs);

  	  const IDENT_RE$1 = IDENT_RE;
  	  const TYPES = [
  	    "any",
  	    "void",
  	    "number",
  	    "boolean",
  	    "string",
  	    "object",
  	    "never",
  	    "symbol",
  	    "bigint",
  	    "unknown"
  	  ];
  	  const NAMESPACE = {
  	    beginKeywords: 'namespace',
  	    end: /\{/,
  	    excludeEnd: true,
  	    contains: [ tsLanguage.exports.CLASS_REFERENCE ]
  	  };
  	  const INTERFACE = {
  	    beginKeywords: 'interface',
  	    end: /\{/,
  	    excludeEnd: true,
  	    keywords: {
  	      keyword: 'interface extends',
  	      built_in: TYPES
  	    },
  	    contains: [ tsLanguage.exports.CLASS_REFERENCE ]
  	  };
  	  const USE_STRICT = {
  	    className: 'meta',
  	    relevance: 10,
  	    begin: /^\s*['"]use strict['"]/
  	  };
  	  const TS_SPECIFIC_KEYWORDS = [
  	    "type",
  	    "namespace",
  	    "interface",
  	    "public",
  	    "private",
  	    "protected",
  	    "implements",
  	    "declare",
  	    "abstract",
  	    "readonly",
  	    "enum",
  	    "override"
  	  ];
  	  const KEYWORDS$1 = {
  	    $pattern: IDENT_RE,
  	    keyword: KEYWORDS.concat(TS_SPECIFIC_KEYWORDS),
  	    literal: LITERALS,
  	    built_in: BUILT_INS.concat(TYPES),
  	    "variable.language": BUILT_IN_VARIABLES
  	  };
  	  const DECORATOR = {
  	    className: 'meta',
  	    begin: '@' + IDENT_RE$1,
  	  };

  	  const swapMode = (mode, label, replacement) => {
  	    const indx = mode.contains.findIndex(m => m.label === label);
  	    if (indx === -1) { throw new Error("can not find mode to replace"); }

  	    mode.contains.splice(indx, 1, replacement);
  	  };


  	  // this should update anywhere keywords is used since
  	  // it will be the same actual JS object
  	  Object.assign(tsLanguage.keywords, KEYWORDS$1);

  	  tsLanguage.exports.PARAMS_CONTAINS.push(DECORATOR);
  	  tsLanguage.contains = tsLanguage.contains.concat([
  	    DECORATOR,
  	    NAMESPACE,
  	    INTERFACE,
  	  ]);

  	  // TS gets a simpler shebang rule than JS
  	  swapMode(tsLanguage, "shebang", hljs.SHEBANG());
  	  // JS use strict rule purposely excludes `asm` which makes no sense
  	  swapMode(tsLanguage, "use_strict", USE_STRICT);

  	  const functionDeclaration = tsLanguage.contains.find(m => m.label === "func.def");
  	  functionDeclaration.relevance = 0; // () => {} is more typical in TypeScript

  	  Object.assign(tsLanguage, {
  	    name: 'TypeScript',
  	    aliases: [
  	      'ts',
  	      'tsx',
  	      'mts',
  	      'cts'
  	    ]
  	  });

  	  return tsLanguage;
  	}

  	typescript_1 = typescript;
  	return typescript_1;
  }

  /*
  Language: Vala
  Author: Antono Vasiljev <antono.vasiljev@gmail.com>
  Description: Vala is a new programming language that aims to bring modern programming language features to GNOME developers without imposing any additional runtime requirements and without using a different ABI compared to applications and libraries written in C.
  Website: https://wiki.gnome.org/Projects/Vala
  */

  var vala_1;
  var hasRequiredVala;

  function requireVala () {
  	if (hasRequiredVala) return vala_1;
  	hasRequiredVala = 1;
  	function vala(hljs) {
  	  return {
  	    name: 'Vala',
  	    keywords: {
  	      keyword:
  	        // Value types
  	        'char uchar unichar int uint long ulong short ushort int8 int16 int32 int64 uint8 '
  	        + 'uint16 uint32 uint64 float double bool struct enum string void '
  	        // Reference types
  	        + 'weak unowned owned '
  	        // Modifiers
  	        + 'async signal static abstract interface override virtual delegate '
  	        // Control Structures
  	        + 'if while do for foreach else switch case break default return try catch '
  	        // Visibility
  	        + 'public private protected internal '
  	        // Other
  	        + 'using new this get set const stdout stdin stderr var',
  	      built_in:
  	        'DBus GLib CCode Gee Object Gtk Posix',
  	      literal:
  	        'false true null'
  	    },
  	    contains: [
  	      {
  	        className: 'class',
  	        beginKeywords: 'class interface namespace',
  	        end: /\{/,
  	        excludeEnd: true,
  	        illegal: '[^,:\\n\\s\\.]',
  	        contains: [ hljs.UNDERSCORE_TITLE_MODE ]
  	      },
  	      hljs.C_LINE_COMMENT_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE,
  	      {
  	        className: 'string',
  	        begin: '"""',
  	        end: '"""',
  	        relevance: 5
  	      },
  	      hljs.APOS_STRING_MODE,
  	      hljs.QUOTE_STRING_MODE,
  	      hljs.C_NUMBER_MODE,
  	      {
  	        className: 'meta',
  	        begin: '^#',
  	        end: '$',
  	      }
  	    ]
  	  };
  	}

  	vala_1 = vala;
  	return vala_1;
  }

  /*
  Language: Visual Basic .NET
  Description: Visual Basic .NET (VB.NET) is a multi-paradigm, object-oriented programming language, implemented on the .NET Framework.
  Authors: Poren Chiang <ren.chiang@gmail.com>, Jan Pilzer
  Website: https://docs.microsoft.com/dotnet/visual-basic/getting-started
  Category: common
  */

  var vbnet_1;
  var hasRequiredVbnet;

  function requireVbnet () {
  	if (hasRequiredVbnet) return vbnet_1;
  	hasRequiredVbnet = 1;
  	/** @type LanguageFn */
  	function vbnet(hljs) {
  	  const regex = hljs.regex;
  	  /**
  	   * Character Literal
  	   * Either a single character ("a"C) or an escaped double quote (""""C).
  	   */
  	  const CHARACTER = {
  	    className: 'string',
  	    begin: /"(""|[^/n])"C\b/
  	  };

  	  const STRING = {
  	    className: 'string',
  	    begin: /"/,
  	    end: /"/,
  	    illegal: /\n/,
  	    contains: [
  	      {
  	        // double quote escape
  	        begin: /""/ }
  	    ]
  	  };

  	  /** Date Literals consist of a date, a time, or both separated by whitespace, surrounded by # */
  	  const MM_DD_YYYY = /\d{1,2}\/\d{1,2}\/\d{4}/;
  	  const YYYY_MM_DD = /\d{4}-\d{1,2}-\d{1,2}/;
  	  const TIME_12H = /(\d|1[012])(:\d+){0,2} *(AM|PM)/;
  	  const TIME_24H = /\d{1,2}(:\d{1,2}){1,2}/;
  	  const DATE = {
  	    className: 'literal',
  	    variants: [
  	      {
  	        // #YYYY-MM-DD# (ISO-Date) or #M/D/YYYY# (US-Date)
  	        begin: regex.concat(/# */, regex.either(YYYY_MM_DD, MM_DD_YYYY), / *#/) },
  	      {
  	        // #H:mm[:ss]# (24h Time)
  	        begin: regex.concat(/# */, TIME_24H, / *#/) },
  	      {
  	        // #h[:mm[:ss]] A# (12h Time)
  	        begin: regex.concat(/# */, TIME_12H, / *#/) },
  	      {
  	        // date plus time
  	        begin: regex.concat(
  	          /# */,
  	          regex.either(YYYY_MM_DD, MM_DD_YYYY),
  	          / +/,
  	          regex.either(TIME_12H, TIME_24H),
  	          / *#/
  	        ) }
  	    ]
  	  };

  	  const NUMBER = {
  	    className: 'number',
  	    relevance: 0,
  	    variants: [
  	      {
  	        // Float
  	        begin: /\b\d[\d_]*((\.[\d_]+(E[+-]?[\d_]+)?)|(E[+-]?[\d_]+))[RFD@!#]?/ },
  	      {
  	        // Integer (base 10)
  	        begin: /\b\d[\d_]*((U?[SIL])|[%&])?/ },
  	      {
  	        // Integer (base 16)
  	        begin: /&H[\dA-F_]+((U?[SIL])|[%&])?/ },
  	      {
  	        // Integer (base 8)
  	        begin: /&O[0-7_]+((U?[SIL])|[%&])?/ },
  	      {
  	        // Integer (base 2)
  	        begin: /&B[01_]+((U?[SIL])|[%&])?/ }
  	    ]
  	  };

  	  const LABEL = {
  	    className: 'label',
  	    begin: /^\w+:/
  	  };

  	  const DOC_COMMENT = hljs.COMMENT(/'''/, /$/, { contains: [
  	    {
  	      className: 'doctag',
  	      begin: /<\/?/,
  	      end: />/
  	    }
  	  ] });

  	  const COMMENT = hljs.COMMENT(null, /$/, { variants: [
  	    { begin: /'/ },
  	    {
  	      // TODO: Use multi-class for leading spaces
  	      begin: /([\t ]|^)REM(?=\s)/ }
  	  ] });

  	  const DIRECTIVES = {
  	    className: 'meta',
  	    // TODO: Use multi-class for indentation once available
  	    begin: /[\t ]*#(const|disable|else|elseif|enable|end|externalsource|if|region)\b/,
  	    end: /$/,
  	    keywords: { keyword:
  	        'const disable else elseif enable end externalsource if region then' },
  	    contains: [ COMMENT ]
  	  };

  	  return {
  	    name: 'Visual Basic .NET',
  	    aliases: [ 'vb' ],
  	    case_insensitive: true,
  	    classNameAliases: { label: 'symbol' },
  	    keywords: {
  	      keyword:
  	        'addhandler alias aggregate ansi as async assembly auto binary by byref byval ' /* a-b */
  	        + 'call case catch class compare const continue custom declare default delegate dim distinct do ' /* c-d */
  	        + 'each equals else elseif end enum erase error event exit explicit finally for friend from function ' /* e-f */
  	        + 'get global goto group handles if implements imports in inherits interface into iterator ' /* g-i */
  	        + 'join key let lib loop me mid module mustinherit mustoverride mybase myclass ' /* j-m */
  	        + 'namespace narrowing new next notinheritable notoverridable ' /* n */
  	        + 'of off on operator option optional order overloads overridable overrides ' /* o */
  	        + 'paramarray partial preserve private property protected public ' /* p */
  	        + 'raiseevent readonly redim removehandler resume return ' /* r */
  	        + 'select set shadows shared skip static step stop structure strict sub synclock ' /* s */
  	        + 'take text then throw to try unicode until using when where while widening with withevents writeonly yield' /* t-y */,
  	      built_in:
  	        // Operators https://docs.microsoft.com/dotnet/visual-basic/language-reference/operators
  	        'addressof and andalso await directcast gettype getxmlnamespace is isfalse isnot istrue like mod nameof new not or orelse trycast typeof xor '
  	        // Type Conversion Functions https://docs.microsoft.com/dotnet/visual-basic/language-reference/functions/type-conversion-functions
  	        + 'cbool cbyte cchar cdate cdbl cdec cint clng cobj csbyte cshort csng cstr cuint culng cushort',
  	      type:
  	        // Data types https://docs.microsoft.com/dotnet/visual-basic/language-reference/data-types
  	        'boolean byte char date decimal double integer long object sbyte short single string uinteger ulong ushort',
  	      literal: 'true false nothing'
  	    },
  	    illegal:
  	      '//|\\{|\\}|endif|gosub|variant|wend|^\\$ ' /* reserved deprecated keywords */,
  	    contains: [
  	      CHARACTER,
  	      STRING,
  	      DATE,
  	      NUMBER,
  	      LABEL,
  	      DOC_COMMENT,
  	      COMMENT,
  	      DIRECTIVES
  	    ]
  	  };
  	}

  	vbnet_1 = vbnet;
  	return vbnet_1;
  }

  /*
  Language: VBScript
  Description: VBScript ("Microsoft Visual Basic Scripting Edition") is an Active Scripting language developed by Microsoft that is modeled on Visual Basic.
  Author: Nikita Ledyaev <lenikita@yandex.ru>
  Contributors: Michal Gabrukiewicz <mgabru@gmail.com>
  Website: https://en.wikipedia.org/wiki/VBScript
  Category: scripting
  */

  var vbscript_1;
  var hasRequiredVbscript;

  function requireVbscript () {
  	if (hasRequiredVbscript) return vbscript_1;
  	hasRequiredVbscript = 1;
  	/** @type LanguageFn */
  	function vbscript(hljs) {
  	  const regex = hljs.regex;
  	  const BUILT_IN_FUNCTIONS = [
  	    "lcase",
  	    "month",
  	    "vartype",
  	    "instrrev",
  	    "ubound",
  	    "setlocale",
  	    "getobject",
  	    "rgb",
  	    "getref",
  	    "string",
  	    "weekdayname",
  	    "rnd",
  	    "dateadd",
  	    "monthname",
  	    "now",
  	    "day",
  	    "minute",
  	    "isarray",
  	    "cbool",
  	    "round",
  	    "formatcurrency",
  	    "conversions",
  	    "csng",
  	    "timevalue",
  	    "second",
  	    "year",
  	    "space",
  	    "abs",
  	    "clng",
  	    "timeserial",
  	    "fixs",
  	    "len",
  	    "asc",
  	    "isempty",
  	    "maths",
  	    "dateserial",
  	    "atn",
  	    "timer",
  	    "isobject",
  	    "filter",
  	    "weekday",
  	    "datevalue",
  	    "ccur",
  	    "isdate",
  	    "instr",
  	    "datediff",
  	    "formatdatetime",
  	    "replace",
  	    "isnull",
  	    "right",
  	    "sgn",
  	    "array",
  	    "snumeric",
  	    "log",
  	    "cdbl",
  	    "hex",
  	    "chr",
  	    "lbound",
  	    "msgbox",
  	    "ucase",
  	    "getlocale",
  	    "cos",
  	    "cdate",
  	    "cbyte",
  	    "rtrim",
  	    "join",
  	    "hour",
  	    "oct",
  	    "typename",
  	    "trim",
  	    "strcomp",
  	    "int",
  	    "createobject",
  	    "loadpicture",
  	    "tan",
  	    "formatnumber",
  	    "mid",
  	    "split",
  	    "cint",
  	    "sin",
  	    "datepart",
  	    "ltrim",
  	    "sqr",
  	    "time",
  	    "derived",
  	    "eval",
  	    "date",
  	    "formatpercent",
  	    "exp",
  	    "inputbox",
  	    "left",
  	    "ascw",
  	    "chrw",
  	    "regexp",
  	    "cstr",
  	    "err"
  	  ];
  	  const BUILT_IN_OBJECTS = [
  	    "server",
  	    "response",
  	    "request",
  	    // take no arguments so can be called without ()
  	    "scriptengine",
  	    "scriptenginebuildversion",
  	    "scriptengineminorversion",
  	    "scriptenginemajorversion"
  	  ];

  	  const BUILT_IN_CALL = {
  	    begin: regex.concat(regex.either(...BUILT_IN_FUNCTIONS), "\\s*\\("),
  	    // relevance 0 because this is acting as a beginKeywords really
  	    relevance: 0,
  	    keywords: { built_in: BUILT_IN_FUNCTIONS }
  	  };

  	  const LITERALS = [
  	    "true",
  	    "false",
  	    "null",
  	    "nothing",
  	    "empty"
  	  ];

  	  const KEYWORDS = [
  	    "call",
  	    "class",
  	    "const",
  	    "dim",
  	    "do",
  	    "loop",
  	    "erase",
  	    "execute",
  	    "executeglobal",
  	    "exit",
  	    "for",
  	    "each",
  	    "next",
  	    "function",
  	    "if",
  	    "then",
  	    "else",
  	    "on",
  	    "error",
  	    "option",
  	    "explicit",
  	    "new",
  	    "private",
  	    "property",
  	    "let",
  	    "get",
  	    "public",
  	    "randomize",
  	    "redim",
  	    "rem",
  	    "select",
  	    "case",
  	    "set",
  	    "stop",
  	    "sub",
  	    "while",
  	    "wend",
  	    "with",
  	    "end",
  	    "to",
  	    "elseif",
  	    "is",
  	    "or",
  	    "xor",
  	    "and",
  	    "not",
  	    "class_initialize",
  	    "class_terminate",
  	    "default",
  	    "preserve",
  	    "in",
  	    "me",
  	    "byval",
  	    "byref",
  	    "step",
  	    "resume",
  	    "goto"
  	  ];

  	  return {
  	    name: 'VBScript',
  	    aliases: [ 'vbs' ],
  	    case_insensitive: true,
  	    keywords: {
  	      keyword: KEYWORDS,
  	      built_in: BUILT_IN_OBJECTS,
  	      literal: LITERALS
  	    },
  	    illegal: '//',
  	    contains: [
  	      BUILT_IN_CALL,
  	      hljs.inherit(hljs.QUOTE_STRING_MODE, { contains: [ { begin: '""' } ] }),
  	      hljs.COMMENT(
  	        /'/,
  	        /$/,
  	        { relevance: 0 }
  	      ),
  	      hljs.C_NUMBER_MODE
  	    ]
  	  };
  	}

  	vbscript_1 = vbscript;
  	return vbscript_1;
  }

  /*
  Language: VBScript in HTML
  Requires: xml.js, vbscript.js
  Author: Ivan Sagalaev <maniac@softwaremaniacs.org>
  Description: "Bridge" language defining fragments of VBScript in HTML within <% .. %>
  Website: https://en.wikipedia.org/wiki/VBScript
  Category: scripting
  */

  var vbscriptHtml_1;
  var hasRequiredVbscriptHtml;

  function requireVbscriptHtml () {
  	if (hasRequiredVbscriptHtml) return vbscriptHtml_1;
  	hasRequiredVbscriptHtml = 1;
  	function vbscriptHtml(hljs) {
  	  return {
  	    name: 'VBScript in HTML',
  	    subLanguage: 'xml',
  	    contains: [
  	      {
  	        begin: '<%',
  	        end: '%>',
  	        subLanguage: 'vbscript'
  	      }
  	    ]
  	  };
  	}

  	vbscriptHtml_1 = vbscriptHtml;
  	return vbscriptHtml_1;
  }

  /*
  Language: Verilog
  Author: Jon Evans <jon@craftyjon.com>
  Contributors: Boone Severson <boone.severson@gmail.com>
  Description: Verilog is a hardware description language used in electronic design automation to describe digital and mixed-signal systems. This highlighter supports Verilog and SystemVerilog through IEEE 1800-2012.
  Website: http://www.verilog.com
  */

  var verilog_1;
  var hasRequiredVerilog;

  function requireVerilog () {
  	if (hasRequiredVerilog) return verilog_1;
  	hasRequiredVerilog = 1;
  	function verilog(hljs) {
  	  const regex = hljs.regex;
  	  const KEYWORDS = {
  	    $pattern: /\$?[\w]+(\$[\w]+)*/,
  	    keyword: [
  	      "accept_on",
  	      "alias",
  	      "always",
  	      "always_comb",
  	      "always_ff",
  	      "always_latch",
  	      "and",
  	      "assert",
  	      "assign",
  	      "assume",
  	      "automatic",
  	      "before",
  	      "begin",
  	      "bind",
  	      "bins",
  	      "binsof",
  	      "bit",
  	      "break",
  	      "buf|0",
  	      "bufif0",
  	      "bufif1",
  	      "byte",
  	      "case",
  	      "casex",
  	      "casez",
  	      "cell",
  	      "chandle",
  	      "checker",
  	      "class",
  	      "clocking",
  	      "cmos",
  	      "config",
  	      "const",
  	      "constraint",
  	      "context",
  	      "continue",
  	      "cover",
  	      "covergroup",
  	      "coverpoint",
  	      "cross",
  	      "deassign",
  	      "default",
  	      "defparam",
  	      "design",
  	      "disable",
  	      "dist",
  	      "do",
  	      "edge",
  	      "else",
  	      "end",
  	      "endcase",
  	      "endchecker",
  	      "endclass",
  	      "endclocking",
  	      "endconfig",
  	      "endfunction",
  	      "endgenerate",
  	      "endgroup",
  	      "endinterface",
  	      "endmodule",
  	      "endpackage",
  	      "endprimitive",
  	      "endprogram",
  	      "endproperty",
  	      "endspecify",
  	      "endsequence",
  	      "endtable",
  	      "endtask",
  	      "enum",
  	      "event",
  	      "eventually",
  	      "expect",
  	      "export",
  	      "extends",
  	      "extern",
  	      "final",
  	      "first_match",
  	      "for",
  	      "force",
  	      "foreach",
  	      "forever",
  	      "fork",
  	      "forkjoin",
  	      "function",
  	      "generate|5",
  	      "genvar",
  	      "global",
  	      "highz0",
  	      "highz1",
  	      "if",
  	      "iff",
  	      "ifnone",
  	      "ignore_bins",
  	      "illegal_bins",
  	      "implements",
  	      "implies",
  	      "import",
  	      "incdir",
  	      "include",
  	      "initial",
  	      "inout",
  	      "input",
  	      "inside",
  	      "instance",
  	      "int",
  	      "integer",
  	      "interconnect",
  	      "interface",
  	      "intersect",
  	      "join",
  	      "join_any",
  	      "join_none",
  	      "large",
  	      "let",
  	      "liblist",
  	      "library",
  	      "local",
  	      "localparam",
  	      "logic",
  	      "longint",
  	      "macromodule",
  	      "matches",
  	      "medium",
  	      "modport",
  	      "module",
  	      "nand",
  	      "negedge",
  	      "nettype",
  	      "new",
  	      "nexttime",
  	      "nmos",
  	      "nor",
  	      "noshowcancelled",
  	      "not",
  	      "notif0",
  	      "notif1",
  	      "or",
  	      "output",
  	      "package",
  	      "packed",
  	      "parameter",
  	      "pmos",
  	      "posedge",
  	      "primitive",
  	      "priority",
  	      "program",
  	      "property",
  	      "protected",
  	      "pull0",
  	      "pull1",
  	      "pulldown",
  	      "pullup",
  	      "pulsestyle_ondetect",
  	      "pulsestyle_onevent",
  	      "pure",
  	      "rand",
  	      "randc",
  	      "randcase",
  	      "randsequence",
  	      "rcmos",
  	      "real",
  	      "realtime",
  	      "ref",
  	      "reg",
  	      "reject_on",
  	      "release",
  	      "repeat",
  	      "restrict",
  	      "return",
  	      "rnmos",
  	      "rpmos",
  	      "rtran",
  	      "rtranif0",
  	      "rtranif1",
  	      "s_always",
  	      "s_eventually",
  	      "s_nexttime",
  	      "s_until",
  	      "s_until_with",
  	      "scalared",
  	      "sequence",
  	      "shortint",
  	      "shortreal",
  	      "showcancelled",
  	      "signed",
  	      "small",
  	      "soft",
  	      "solve",
  	      "specify",
  	      "specparam",
  	      "static",
  	      "string",
  	      "strong",
  	      "strong0",
  	      "strong1",
  	      "struct",
  	      "super",
  	      "supply0",
  	      "supply1",
  	      "sync_accept_on",
  	      "sync_reject_on",
  	      "table",
  	      "tagged",
  	      "task",
  	      "this",
  	      "throughout",
  	      "time",
  	      "timeprecision",
  	      "timeunit",
  	      "tran",
  	      "tranif0",
  	      "tranif1",
  	      "tri",
  	      "tri0",
  	      "tri1",
  	      "triand",
  	      "trior",
  	      "trireg",
  	      "type",
  	      "typedef",
  	      "union",
  	      "unique",
  	      "unique0",
  	      "unsigned",
  	      "until",
  	      "until_with",
  	      "untyped",
  	      "use",
  	      "uwire",
  	      "var",
  	      "vectored",
  	      "virtual",
  	      "void",
  	      "wait",
  	      "wait_order",
  	      "wand",
  	      "weak",
  	      "weak0",
  	      "weak1",
  	      "while",
  	      "wildcard",
  	      "wire",
  	      "with",
  	      "within",
  	      "wor",
  	      "xnor",
  	      "xor"
  	    ],
  	    literal: [ 'null' ],
  	    built_in: [
  	      "$finish",
  	      "$stop",
  	      "$exit",
  	      "$fatal",
  	      "$error",
  	      "$warning",
  	      "$info",
  	      "$realtime",
  	      "$time",
  	      "$printtimescale",
  	      "$bitstoreal",
  	      "$bitstoshortreal",
  	      "$itor",
  	      "$signed",
  	      "$cast",
  	      "$bits",
  	      "$stime",
  	      "$timeformat",
  	      "$realtobits",
  	      "$shortrealtobits",
  	      "$rtoi",
  	      "$unsigned",
  	      "$asserton",
  	      "$assertkill",
  	      "$assertpasson",
  	      "$assertfailon",
  	      "$assertnonvacuouson",
  	      "$assertoff",
  	      "$assertcontrol",
  	      "$assertpassoff",
  	      "$assertfailoff",
  	      "$assertvacuousoff",
  	      "$isunbounded",
  	      "$sampled",
  	      "$fell",
  	      "$changed",
  	      "$past_gclk",
  	      "$fell_gclk",
  	      "$changed_gclk",
  	      "$rising_gclk",
  	      "$steady_gclk",
  	      "$coverage_control",
  	      "$coverage_get",
  	      "$coverage_save",
  	      "$set_coverage_db_name",
  	      "$rose",
  	      "$stable",
  	      "$past",
  	      "$rose_gclk",
  	      "$stable_gclk",
  	      "$future_gclk",
  	      "$falling_gclk",
  	      "$changing_gclk",
  	      "$display",
  	      "$coverage_get_max",
  	      "$coverage_merge",
  	      "$get_coverage",
  	      "$load_coverage_db",
  	      "$typename",
  	      "$unpacked_dimensions",
  	      "$left",
  	      "$low",
  	      "$increment",
  	      "$clog2",
  	      "$ln",
  	      "$log10",
  	      "$exp",
  	      "$sqrt",
  	      "$pow",
  	      "$floor",
  	      "$ceil",
  	      "$sin",
  	      "$cos",
  	      "$tan",
  	      "$countbits",
  	      "$onehot",
  	      "$isunknown",
  	      "$fatal",
  	      "$warning",
  	      "$dimensions",
  	      "$right",
  	      "$high",
  	      "$size",
  	      "$asin",
  	      "$acos",
  	      "$atan",
  	      "$atan2",
  	      "$hypot",
  	      "$sinh",
  	      "$cosh",
  	      "$tanh",
  	      "$asinh",
  	      "$acosh",
  	      "$atanh",
  	      "$countones",
  	      "$onehot0",
  	      "$error",
  	      "$info",
  	      "$random",
  	      "$dist_chi_square",
  	      "$dist_erlang",
  	      "$dist_exponential",
  	      "$dist_normal",
  	      "$dist_poisson",
  	      "$dist_t",
  	      "$dist_uniform",
  	      "$q_initialize",
  	      "$q_remove",
  	      "$q_exam",
  	      "$async$and$array",
  	      "$async$nand$array",
  	      "$async$or$array",
  	      "$async$nor$array",
  	      "$sync$and$array",
  	      "$sync$nand$array",
  	      "$sync$or$array",
  	      "$sync$nor$array",
  	      "$q_add",
  	      "$q_full",
  	      "$psprintf",
  	      "$async$and$plane",
  	      "$async$nand$plane",
  	      "$async$or$plane",
  	      "$async$nor$plane",
  	      "$sync$and$plane",
  	      "$sync$nand$plane",
  	      "$sync$or$plane",
  	      "$sync$nor$plane",
  	      "$system",
  	      "$display",
  	      "$displayb",
  	      "$displayh",
  	      "$displayo",
  	      "$strobe",
  	      "$strobeb",
  	      "$strobeh",
  	      "$strobeo",
  	      "$write",
  	      "$readmemb",
  	      "$readmemh",
  	      "$writememh",
  	      "$value$plusargs",
  	      "$dumpvars",
  	      "$dumpon",
  	      "$dumplimit",
  	      "$dumpports",
  	      "$dumpportson",
  	      "$dumpportslimit",
  	      "$writeb",
  	      "$writeh",
  	      "$writeo",
  	      "$monitor",
  	      "$monitorb",
  	      "$monitorh",
  	      "$monitoro",
  	      "$writememb",
  	      "$dumpfile",
  	      "$dumpoff",
  	      "$dumpall",
  	      "$dumpflush",
  	      "$dumpportsoff",
  	      "$dumpportsall",
  	      "$dumpportsflush",
  	      "$fclose",
  	      "$fdisplay",
  	      "$fdisplayb",
  	      "$fdisplayh",
  	      "$fdisplayo",
  	      "$fstrobe",
  	      "$fstrobeb",
  	      "$fstrobeh",
  	      "$fstrobeo",
  	      "$swrite",
  	      "$swriteb",
  	      "$swriteh",
  	      "$swriteo",
  	      "$fscanf",
  	      "$fread",
  	      "$fseek",
  	      "$fflush",
  	      "$feof",
  	      "$fopen",
  	      "$fwrite",
  	      "$fwriteb",
  	      "$fwriteh",
  	      "$fwriteo",
  	      "$fmonitor",
  	      "$fmonitorb",
  	      "$fmonitorh",
  	      "$fmonitoro",
  	      "$sformat",
  	      "$sformatf",
  	      "$fgetc",
  	      "$ungetc",
  	      "$fgets",
  	      "$sscanf",
  	      "$rewind",
  	      "$ftell",
  	      "$ferror"
  	    ]
  	  };
  	  const BUILT_IN_CONSTANTS = [
  	    "__FILE__",
  	    "__LINE__"
  	  ];
  	  const DIRECTIVES = [
  	    "begin_keywords",
  	    "celldefine",
  	    "default_nettype",
  	    "default_decay_time",
  	    "default_trireg_strength",
  	    "define",
  	    "delay_mode_distributed",
  	    "delay_mode_path",
  	    "delay_mode_unit",
  	    "delay_mode_zero",
  	    "else",
  	    "elsif",
  	    "end_keywords",
  	    "endcelldefine",
  	    "endif",
  	    "ifdef",
  	    "ifndef",
  	    "include",
  	    "line",
  	    "nounconnected_drive",
  	    "pragma",
  	    "resetall",
  	    "timescale",
  	    "unconnected_drive",
  	    "undef",
  	    "undefineall"
  	  ];

  	  return {
  	    name: 'Verilog',
  	    aliases: [
  	      'v',
  	      'sv',
  	      'svh'
  	    ],
  	    case_insensitive: false,
  	    keywords: KEYWORDS,
  	    contains: [
  	      hljs.C_BLOCK_COMMENT_MODE,
  	      hljs.C_LINE_COMMENT_MODE,
  	      hljs.QUOTE_STRING_MODE,
  	      {
  	        scope: 'number',
  	        contains: [ hljs.BACKSLASH_ESCAPE ],
  	        variants: [
  	          { begin: /\b((\d+'([bhodBHOD]))[0-9xzXZa-fA-F_]+)/ },
  	          { begin: /\B(('([bhodBHOD]))[0-9xzXZa-fA-F_]+)/ },
  	          { // decimal
  	            begin: /\b[0-9][0-9_]*/,
  	            relevance: 0
  	          }
  	        ]
  	      },
  	      /* parameters to instances */
  	      {
  	        scope: 'variable',
  	        variants: [
  	          { begin: '#\\((?!parameter).+\\)' },
  	          {
  	            begin: '\\.\\w+',
  	            relevance: 0
  	          }
  	        ]
  	      },
  	      {
  	        scope: 'variable.constant',
  	        match: regex.concat(/`/, regex.either(...BUILT_IN_CONSTANTS)),
  	      },
  	      {
  	        scope: 'meta',
  	        begin: regex.concat(/`/, regex.either(...DIRECTIVES)),
  	        end: /$|\/\/|\/\*/,
  	        returnEnd: true,
  	        keywords: DIRECTIVES
  	      }
  	    ]
  	  };
  	}

  	verilog_1 = verilog;
  	return verilog_1;
  }

  /*
  Language: VHDL
  Author: Igor Kalnitsky <igor@kalnitsky.org>
  Contributors: Daniel C.K. Kho <daniel.kho@tauhop.com>, Guillaume Savaton <guillaume.savaton@eseo.fr>
  Description: VHDL is a hardware description language used in electronic design automation to describe digital and mixed-signal systems.
  Website: https://en.wikipedia.org/wiki/VHDL
  */

  var vhdl_1;
  var hasRequiredVhdl;

  function requireVhdl () {
  	if (hasRequiredVhdl) return vhdl_1;
  	hasRequiredVhdl = 1;
  	function vhdl(hljs) {
  	  // Regular expression for VHDL numeric literals.

  	  // Decimal literal:
  	  const INTEGER_RE = '\\d(_|\\d)*';
  	  const EXPONENT_RE = '[eE][-+]?' + INTEGER_RE;
  	  const DECIMAL_LITERAL_RE = INTEGER_RE + '(\\.' + INTEGER_RE + ')?' + '(' + EXPONENT_RE + ')?';
  	  // Based literal:
  	  const BASED_INTEGER_RE = '\\w+';
  	  const BASED_LITERAL_RE = INTEGER_RE + '#' + BASED_INTEGER_RE + '(\\.' + BASED_INTEGER_RE + ')?' + '#' + '(' + EXPONENT_RE + ')?';

  	  const NUMBER_RE = '\\b(' + BASED_LITERAL_RE + '|' + DECIMAL_LITERAL_RE + ')';

  	  const KEYWORDS = [
  	    "abs",
  	    "access",
  	    "after",
  	    "alias",
  	    "all",
  	    "and",
  	    "architecture",
  	    "array",
  	    "assert",
  	    "assume",
  	    "assume_guarantee",
  	    "attribute",
  	    "begin",
  	    "block",
  	    "body",
  	    "buffer",
  	    "bus",
  	    "case",
  	    "component",
  	    "configuration",
  	    "constant",
  	    "context",
  	    "cover",
  	    "disconnect",
  	    "downto",
  	    "default",
  	    "else",
  	    "elsif",
  	    "end",
  	    "entity",
  	    "exit",
  	    "fairness",
  	    "file",
  	    "for",
  	    "force",
  	    "function",
  	    "generate",
  	    "generic",
  	    "group",
  	    "guarded",
  	    "if",
  	    "impure",
  	    "in",
  	    "inertial",
  	    "inout",
  	    "is",
  	    "label",
  	    "library",
  	    "linkage",
  	    "literal",
  	    "loop",
  	    "map",
  	    "mod",
  	    "nand",
  	    "new",
  	    "next",
  	    "nor",
  	    "not",
  	    "null",
  	    "of",
  	    "on",
  	    "open",
  	    "or",
  	    "others",
  	    "out",
  	    "package",
  	    "parameter",
  	    "port",
  	    "postponed",
  	    "procedure",
  	    "process",
  	    "property",
  	    "protected",
  	    "pure",
  	    "range",
  	    "record",
  	    "register",
  	    "reject",
  	    "release",
  	    "rem",
  	    "report",
  	    "restrict",
  	    "restrict_guarantee",
  	    "return",
  	    "rol",
  	    "ror",
  	    "select",
  	    "sequence",
  	    "severity",
  	    "shared",
  	    "signal",
  	    "sla",
  	    "sll",
  	    "sra",
  	    "srl",
  	    "strong",
  	    "subtype",
  	    "then",
  	    "to",
  	    "transport",
  	    "type",
  	    "unaffected",
  	    "units",
  	    "until",
  	    "use",
  	    "variable",
  	    "view",
  	    "vmode",
  	    "vprop",
  	    "vunit",
  	    "wait",
  	    "when",
  	    "while",
  	    "with",
  	    "xnor",
  	    "xor"
  	  ];
  	  const BUILT_INS = [
  	    "boolean",
  	    "bit",
  	    "character",
  	    "integer",
  	    "time",
  	    "delay_length",
  	    "natural",
  	    "positive",
  	    "string",
  	    "bit_vector",
  	    "file_open_kind",
  	    "file_open_status",
  	    "std_logic",
  	    "std_logic_vector",
  	    "unsigned",
  	    "signed",
  	    "boolean_vector",
  	    "integer_vector",
  	    "std_ulogic",
  	    "std_ulogic_vector",
  	    "unresolved_unsigned",
  	    "u_unsigned",
  	    "unresolved_signed",
  	    "u_signed",
  	    "real_vector",
  	    "time_vector"
  	  ];
  	  const LITERALS = [
  	    // severity_level
  	    "false",
  	    "true",
  	    "note",
  	    "warning",
  	    "error",
  	    "failure",
  	    // textio
  	    "line",
  	    "text",
  	    "side",
  	    "width"
  	  ];

  	  return {
  	    name: 'VHDL',
  	    case_insensitive: true,
  	    keywords: {
  	      keyword: KEYWORDS,
  	      built_in: BUILT_INS,
  	      literal: LITERALS
  	    },
  	    illegal: /\{/,
  	    contains: [
  	      hljs.C_BLOCK_COMMENT_MODE, // VHDL-2008 block commenting.
  	      hljs.COMMENT('--', '$'),
  	      hljs.QUOTE_STRING_MODE,
  	      {
  	        className: 'number',
  	        begin: NUMBER_RE,
  	        relevance: 0
  	      },
  	      {
  	        className: 'string',
  	        begin: '\'(U|X|0|1|Z|W|L|H|-)\'',
  	        contains: [ hljs.BACKSLASH_ESCAPE ]
  	      },
  	      {
  	        className: 'symbol',
  	        begin: '\'[A-Za-z](_?[A-Za-z0-9])*',
  	        contains: [ hljs.BACKSLASH_ESCAPE ]
  	      }
  	    ]
  	  };
  	}

  	vhdl_1 = vhdl;
  	return vhdl_1;
  }

  /*
  Language: Vim Script
  Author: Jun Yang <yangjvn@126.com>
  Description: full keyword and built-in from http://vimdoc.sourceforge.net/htmldoc/
  Website: https://www.vim.org
  Category: scripting
  */

  var vim_1;
  var hasRequiredVim;

  function requireVim () {
  	if (hasRequiredVim) return vim_1;
  	hasRequiredVim = 1;
  	function vim(hljs) {
  	  return {
  	    name: 'Vim Script',
  	    keywords: {
  	      $pattern: /[!#@\w]+/,
  	      keyword:
  	        // express version except: ! & * < = > !! # @ @@
  	        'N|0 P|0 X|0 a|0 ab abc abo al am an|0 ar arga argd arge argdo argg argl argu as au aug aun b|0 bN ba bad bd be bel bf bl bm bn bo bp br brea breaka breakd breakl bro bufdo buffers bun bw c|0 cN cNf ca cabc caddb cad caddf cal cat cb cc ccl cd ce cex cf cfir cgetb cgete cg changes chd che checkt cl cla clo cm cmapc cme cn cnew cnf cno cnorea cnoreme co col colo com comc comp con conf cope '
  	        + 'cp cpf cq cr cs cst cu cuna cunme cw delm deb debugg delc delf dif diffg diffo diffp diffpu diffs diffthis dig di dl dell dj dli do doautoa dp dr ds dsp e|0 ea ec echoe echoh echom echon el elsei em en endfo endf endt endw ene ex exe exi exu f|0 files filet fin fina fini fir fix fo foldc foldd folddoc foldo for fu go gr grepa gu gv ha helpf helpg helpt hi hid his ia iabc if ij il im imapc '
  	        + 'ime ino inorea inoreme int is isp iu iuna iunme j|0 ju k|0 keepa kee keepj lN lNf l|0 lad laddb laddf la lan lat lb lc lch lcl lcs le lefta let lex lf lfir lgetb lgete lg lgr lgrepa lh ll lla lli lmak lm lmapc lne lnew lnf ln loadk lo loc lockv lol lope lp lpf lr ls lt lu lua luad luaf lv lvimgrepa lw m|0 ma mak map mapc marks mat me menut mes mk mks mksp mkv mkvie mod mz mzf nbc nb nbs new nm nmapc nme nn nnoreme noa no noh norea noreme norm nu nun nunme ol o|0 om omapc ome on ono onoreme opt ou ounme ow p|0 '
  	        + 'profd prof pro promptr pc ped pe perld po popu pp pre prev ps pt ptN ptf ptj ptl ptn ptp ptr pts pu pw py3 python3 py3d py3f py pyd pyf quita qa rec red redi redr redraws reg res ret retu rew ri rightb rub rubyd rubyf rund ru rv sN san sa sal sav sb sbN sba sbf sbl sbm sbn sbp sbr scrip scripte scs se setf setg setl sf sfir sh sim sig sil sl sla sm smap smapc sme sn sni sno snor snoreme sor '
  	        + 'so spelld spe spelli spellr spellu spellw sp spr sre st sta startg startr star stopi stj sts sun sunm sunme sus sv sw sy synti sync tN tabN tabc tabdo tabe tabf tabfir tabl tabm tabnew '
  	        + 'tabn tabo tabp tabr tabs tab ta tags tc tcld tclf te tf th tj tl tm tn to tp tr try ts tu u|0 undoj undol una unh unl unlo unm unme uns up ve verb vert vim vimgrepa vi viu vie vm vmapc vme vne vn vnoreme vs vu vunme windo w|0 wN wa wh wi winc winp wn wp wq wqa ws wu wv x|0 xa xmapc xm xme xn xnoreme xu xunme y|0 z|0 ~ '
  	        // full version
  	        + 'Next Print append abbreviate abclear aboveleft all amenu anoremenu args argadd argdelete argedit argglobal arglocal argument ascii autocmd augroup aunmenu buffer bNext ball badd bdelete behave belowright bfirst blast bmodified bnext botright bprevious brewind break breakadd breakdel breaklist browse bunload '
  	        + 'bwipeout change cNext cNfile cabbrev cabclear caddbuffer caddexpr caddfile call catch cbuffer cclose center cexpr cfile cfirst cgetbuffer cgetexpr cgetfile chdir checkpath checktime clist clast close cmap cmapclear cmenu cnext cnewer cnfile cnoremap cnoreabbrev cnoremenu copy colder colorscheme command comclear compiler continue confirm copen cprevious cpfile cquit crewind cscope cstag cunmap '
  	        + 'cunabbrev cunmenu cwindow delete delmarks debug debuggreedy delcommand delfunction diffupdate diffget diffoff diffpatch diffput diffsplit digraphs display deletel djump dlist doautocmd doautoall deletep drop dsearch dsplit edit earlier echo echoerr echohl echomsg else elseif emenu endif endfor '
  	        + 'endfunction endtry endwhile enew execute exit exusage file filetype find finally finish first fixdel fold foldclose folddoopen folddoclosed foldopen function global goto grep grepadd gui gvim hardcopy help helpfind helpgrep helptags highlight hide history insert iabbrev iabclear ijump ilist imap '
  	        + 'imapclear imenu inoremap inoreabbrev inoremenu intro isearch isplit iunmap iunabbrev iunmenu join jumps keepalt keepmarks keepjumps lNext lNfile list laddexpr laddbuffer laddfile last language later lbuffer lcd lchdir lclose lcscope left leftabove lexpr lfile lfirst lgetbuffer lgetexpr lgetfile lgrep lgrepadd lhelpgrep llast llist lmake lmap lmapclear lnext lnewer lnfile lnoremap loadkeymap loadview '
  	        + 'lockmarks lockvar lolder lopen lprevious lpfile lrewind ltag lunmap luado luafile lvimgrep lvimgrepadd lwindow move mark make mapclear match menu menutranslate messages mkexrc mksession mkspell mkvimrc mkview mode mzscheme mzfile nbclose nbkey nbsart next nmap nmapclear nmenu nnoremap '
  	        + 'nnoremenu noautocmd noremap nohlsearch noreabbrev noremenu normal number nunmap nunmenu oldfiles open omap omapclear omenu only onoremap onoremenu options ounmap ounmenu ownsyntax print profdel profile promptfind promptrepl pclose pedit perl perldo pop popup ppop preserve previous psearch ptag ptNext '
  	        + 'ptfirst ptjump ptlast ptnext ptprevious ptrewind ptselect put pwd py3do py3file python pydo pyfile quit quitall qall read recover redo redir redraw redrawstatus registers resize retab return rewind right rightbelow ruby rubydo rubyfile rundo runtime rviminfo substitute sNext sandbox sargument sall saveas sbuffer sbNext sball sbfirst sblast sbmodified sbnext sbprevious sbrewind scriptnames scriptencoding '
  	        + 'scscope set setfiletype setglobal setlocal sfind sfirst shell simalt sign silent sleep slast smagic smapclear smenu snext sniff snomagic snoremap snoremenu sort source spelldump spellgood spellinfo spellrepall spellundo spellwrong split sprevious srewind stop stag startgreplace startreplace '
  	        + 'startinsert stopinsert stjump stselect sunhide sunmap sunmenu suspend sview swapname syntax syntime syncbind tNext tabNext tabclose tabedit tabfind tabfirst tablast tabmove tabnext tabonly tabprevious tabrewind tag tcl tcldo tclfile tearoff tfirst throw tjump tlast tmenu tnext topleft tprevious ' + 'trewind tselect tunmenu undo undojoin undolist unabbreviate unhide unlet unlockvar unmap unmenu unsilent update vglobal version verbose vertical vimgrep vimgrepadd visual viusage view vmap vmapclear vmenu vnew '
  	        + 'vnoremap vnoremenu vsplit vunmap vunmenu write wNext wall while winsize wincmd winpos wnext wprevious wqall wsverb wundo wviminfo xit xall xmapclear xmap xmenu xnoremap xnoremenu xunmap xunmenu yank',
  	      built_in: // built in func
  	        'synIDtrans atan2 range matcharg did_filetype asin feedkeys xor argv '
  	        + 'complete_check add getwinposx getqflist getwinposy screencol '
  	        + 'clearmatches empty extend getcmdpos mzeval garbagecollect setreg '
  	        + 'ceil sqrt diff_hlID inputsecret get getfperm getpid filewritable '
  	        + 'shiftwidth max sinh isdirectory synID system inputrestore winline '
  	        + 'atan visualmode inputlist tabpagewinnr round getregtype mapcheck '
  	        + 'hasmapto histdel argidx findfile sha256 exists toupper getcmdline '
  	        + 'taglist string getmatches bufnr strftime winwidth bufexists '
  	        + 'strtrans tabpagebuflist setcmdpos remote_read printf setloclist '
  	        + 'getpos getline bufwinnr float2nr len getcmdtype diff_filler luaeval '
  	        + 'resolve libcallnr foldclosedend reverse filter has_key bufname '
  	        + 'str2float strlen setline getcharmod setbufvar index searchpos '
  	        + 'shellescape undofile foldclosed setqflist buflisted strchars str2nr '
  	        + 'virtcol floor remove undotree remote_expr winheight gettabwinvar '
  	        + 'reltime cursor tabpagenr finddir localtime acos getloclist search '
  	        + 'tanh matchend rename gettabvar strdisplaywidth type abs py3eval '
  	        + 'setwinvar tolower wildmenumode log10 spellsuggest bufloaded '
  	        + 'synconcealed nextnonblank server2client complete settabwinvar '
  	        + 'executable input wincol setmatches getftype hlID inputsave '
  	        + 'searchpair or screenrow line settabvar histadd deepcopy strpart '
  	        + 'remote_peek and eval getftime submatch screenchar winsaveview '
  	        + 'matchadd mkdir screenattr getfontname libcall reltimestr getfsize '
  	        + 'winnr invert pow getbufline byte2line soundfold repeat fnameescape '
  	        + 'tagfiles sin strwidth spellbadword trunc maparg log lispindent '
  	        + 'hostname setpos globpath remote_foreground getchar synIDattr '
  	        + 'fnamemodify cscope_connection stridx winbufnr indent min '
  	        + 'complete_add nr2char searchpairpos inputdialog values matchlist '
  	        + 'items hlexists strridx browsedir expand fmod pathshorten line2byte '
  	        + 'argc count getwinvar glob foldtextresult getreg foreground cosh '
  	        + 'matchdelete has char2nr simplify histget searchdecl iconv '
  	        + 'winrestcmd pumvisible writefile foldlevel haslocaldir keys cos '
  	        + 'matchstr foldtext histnr tan tempname getcwd byteidx getbufvar '
  	        + 'islocked escape eventhandler remote_send serverlist winrestview '
  	        + 'synstack pyeval prevnonblank readfile cindent filereadable changenr '
  	        + 'exp'
  	    },
  	    illegal: /;/,
  	    contains: [
  	      hljs.NUMBER_MODE,
  	      {
  	        className: 'string',
  	        begin: '\'',
  	        end: '\'',
  	        illegal: '\\n'
  	      },

  	      /*
  	      A double quote can start either a string or a line comment. Strings are
  	      ended before the end of a line by another double quote and can contain
  	      escaped double-quotes and post-escaped line breaks.

  	      Also, any double quote at the beginning of a line is a comment but we
  	      don't handle that properly at the moment: any double quote inside will
  	      turn them into a string. Handling it properly will require a smarter
  	      parser.
  	      */
  	      {
  	        className: 'string',
  	        begin: /"(\\"|\n\\|[^"\n])*"/
  	      },
  	      hljs.COMMENT('"', '$'),

  	      {
  	        className: 'variable',
  	        begin: /[bwtglsav]:[\w\d_]+/
  	      },
  	      {
  	        begin: [
  	          /\b(?:function|function!)/,
  	          /\s+/,
  	          hljs.IDENT_RE
  	        ],
  	        className: {
  	          1: "keyword",
  	          3: "title"
  	        },
  	        end: '$',
  	        relevance: 0,
  	        contains: [
  	          {
  	            className: 'params',
  	            begin: '\\(',
  	            end: '\\)'
  	          }
  	        ]
  	      },
  	      {
  	        className: 'symbol',
  	        begin: /<[\w-]+>/
  	      }
  	    ]
  	  };
  	}

  	vim_1 = vim;
  	return vim_1;
  }

  /*
  Language: WebAssembly
  Website: https://webassembly.org
  Description:  Wasm is designed as a portable compilation target for programming languages, enabling deployment on the web for client and server applications.
  Category: web, common
  Audit: 2020
  */

  var wasm_1;
  var hasRequiredWasm;

  function requireWasm () {
  	if (hasRequiredWasm) return wasm_1;
  	hasRequiredWasm = 1;
  	/** @type LanguageFn */
  	function wasm(hljs) {
  	  hljs.regex;
  	  const BLOCK_COMMENT = hljs.COMMENT(/\(;/, /;\)/);
  	  BLOCK_COMMENT.contains.push("self");
  	  const LINE_COMMENT = hljs.COMMENT(/;;/, /$/);

  	  const KWS = [
  	    "anyfunc",
  	    "block",
  	    "br",
  	    "br_if",
  	    "br_table",
  	    "call",
  	    "call_indirect",
  	    "data",
  	    "drop",
  	    "elem",
  	    "else",
  	    "end",
  	    "export",
  	    "func",
  	    "global.get",
  	    "global.set",
  	    "local.get",
  	    "local.set",
  	    "local.tee",
  	    "get_global",
  	    "get_local",
  	    "global",
  	    "if",
  	    "import",
  	    "local",
  	    "loop",
  	    "memory",
  	    "memory.grow",
  	    "memory.size",
  	    "module",
  	    "mut",
  	    "nop",
  	    "offset",
  	    "param",
  	    "result",
  	    "return",
  	    "select",
  	    "set_global",
  	    "set_local",
  	    "start",
  	    "table",
  	    "tee_local",
  	    "then",
  	    "type",
  	    "unreachable"
  	  ];

  	  const FUNCTION_REFERENCE = {
  	    begin: [
  	      /(?:func|call|call_indirect)/,
  	      /\s+/,
  	      /\$[^\s)]+/
  	    ],
  	    className: {
  	      1: "keyword",
  	      3: "title.function"
  	    }
  	  };

  	  const ARGUMENT = {
  	    className: "variable",
  	    begin: /\$[\w_]+/
  	  };

  	  const PARENS = {
  	    match: /(\((?!;)|\))+/,
  	    className: "punctuation",
  	    relevance: 0
  	  };

  	  const NUMBER = {
  	    className: "number",
  	    relevance: 0,
  	    // borrowed from Prism, TODO: split out into variants
  	    match: /[+-]?\b(?:\d(?:_?\d)*(?:\.\d(?:_?\d)*)?(?:[eE][+-]?\d(?:_?\d)*)?|0x[\da-fA-F](?:_?[\da-fA-F])*(?:\.[\da-fA-F](?:_?[\da-fA-D])*)?(?:[pP][+-]?\d(?:_?\d)*)?)\b|\binf\b|\bnan(?::0x[\da-fA-F](?:_?[\da-fA-D])*)?\b/
  	  };

  	  const TYPE = {
  	    // look-ahead prevents us from gobbling up opcodes
  	    match: /(i32|i64|f32|f64)(?!\.)/,
  	    className: "type"
  	  };

  	  const MATH_OPERATIONS = {
  	    className: "keyword",
  	    // borrowed from Prism, TODO: split out into variants
  	    match: /\b(f32|f64|i32|i64)(?:\.(?:abs|add|and|ceil|clz|const|convert_[su]\/i(?:32|64)|copysign|ctz|demote\/f64|div(?:_[su])?|eqz?|extend_[su]\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|nearest|neg?|or|popcnt|promote\/f32|reinterpret\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|store(?:8|16|32)?|sqrt|sub|trunc(?:_[su]\/f(?:32|64))?|wrap\/i64|xor))\b/
  	  };

  	  const OFFSET_ALIGN = {
  	    match: [
  	      /(?:offset|align)/,
  	      /\s*/,
  	      /=/
  	    ],
  	    className: {
  	      1: "keyword",
  	      3: "operator"
  	    }
  	  };

  	  return {
  	    name: 'WebAssembly',
  	    keywords: {
  	      $pattern: /[\w.]+/,
  	      keyword: KWS
  	    },
  	    contains: [
  	      LINE_COMMENT,
  	      BLOCK_COMMENT,
  	      OFFSET_ALIGN,
  	      ARGUMENT,
  	      PARENS,
  	      FUNCTION_REFERENCE,
  	      hljs.QUOTE_STRING_MODE,
  	      TYPE,
  	      MATH_OPERATIONS,
  	      NUMBER
  	    ]
  	  };
  	}

  	wasm_1 = wasm;
  	return wasm_1;
  }

  /*
  Language: Wren
  Description: Think Smalltalk in a Lua-sized package with a dash of Erlang and wrapped up in a familiar, modern syntax.
  Category: scripting
  Author: @joshgoebel
  Maintainer: @joshgoebel
  Website: https://wren.io/
  */

  var wren_1;
  var hasRequiredWren;

  function requireWren () {
  	if (hasRequiredWren) return wren_1;
  	hasRequiredWren = 1;
  	/** @type LanguageFn */
  	function wren(hljs) {
  	  const regex = hljs.regex;
  	  const IDENT_RE = /[a-zA-Z]\w*/;
  	  const KEYWORDS = [
  	    "as",
  	    "break",
  	    "class",
  	    "construct",
  	    "continue",
  	    "else",
  	    "for",
  	    "foreign",
  	    "if",
  	    "import",
  	    "in",
  	    "is",
  	    "return",
  	    "static",
  	    "var",
  	    "while"
  	  ];
  	  const LITERALS = [
  	    "true",
  	    "false",
  	    "null"
  	  ];
  	  const LANGUAGE_VARS = [
  	    "this",
  	    "super"
  	  ];
  	  const CORE_CLASSES = [
  	    "Bool",
  	    "Class",
  	    "Fiber",
  	    "Fn",
  	    "List",
  	    "Map",
  	    "Null",
  	    "Num",
  	    "Object",
  	    "Range",
  	    "Sequence",
  	    "String",
  	    "System"
  	  ];
  	  const OPERATORS = [
  	    "-",
  	    "~",
  	    /\*/,
  	    "%",
  	    /\.\.\./,
  	    /\.\./,
  	    /\+/,
  	    "<<",
  	    ">>",
  	    ">=",
  	    "<=",
  	    "<",
  	    ">",
  	    /\^/,
  	    /!=/,
  	    /!/,
  	    /\bis\b/,
  	    "==",
  	    "&&",
  	    "&",
  	    /\|\|/,
  	    /\|/,
  	    /\?:/,
  	    "="
  	  ];
  	  const FUNCTION = {
  	    relevance: 0,
  	    match: regex.concat(/\b(?!(if|while|for|else|super)\b)/, IDENT_RE, /(?=\s*[({])/),
  	    className: "title.function"
  	  };
  	  const FUNCTION_DEFINITION = {
  	    match: regex.concat(
  	      regex.either(
  	        regex.concat(/\b(?!(if|while|for|else|super)\b)/, IDENT_RE),
  	        regex.either(...OPERATORS)
  	      ),
  	      /(?=\s*\([^)]+\)\s*\{)/),
  	    className: "title.function",
  	    starts: { contains: [
  	      {
  	        begin: /\(/,
  	        end: /\)/,
  	        contains: [
  	          {
  	            relevance: 0,
  	            scope: "params",
  	            match: IDENT_RE
  	          }
  	        ]
  	      }
  	    ] }
  	  };
  	  const CLASS_DEFINITION = {
  	    variants: [
  	      { match: [
  	        /class\s+/,
  	        IDENT_RE,
  	        /\s+is\s+/,
  	        IDENT_RE
  	      ] },
  	      { match: [
  	        /class\s+/,
  	        IDENT_RE
  	      ] }
  	    ],
  	    scope: {
  	      2: "title.class",
  	      4: "title.class.inherited"
  	    },
  	    keywords: KEYWORDS
  	  };

  	  const OPERATOR = {
  	    relevance: 0,
  	    match: regex.either(...OPERATORS),
  	    className: "operator"
  	  };

  	  const TRIPLE_STRING = {
  	    className: "string",
  	    begin: /"""/,
  	    end: /"""/
  	  };

  	  const PROPERTY = {
  	    className: "property",
  	    begin: regex.concat(/\./, regex.lookahead(IDENT_RE)),
  	    end: IDENT_RE,
  	    excludeBegin: true,
  	    relevance: 0
  	  };

  	  const FIELD = {
  	    relevance: 0,
  	    match: regex.concat(/\b_/, IDENT_RE),
  	    scope: "variable"
  	  };

  	  // CamelCase
  	  const CLASS_REFERENCE = {
  	    relevance: 0,
  	    match: /\b[A-Z]+[a-z]+([A-Z]+[a-z]+)*/,
  	    scope: "title.class",
  	    keywords: { _: CORE_CLASSES }
  	  };

  	  // TODO: add custom number modes
  	  const NUMBER = hljs.C_NUMBER_MODE;

  	  const SETTER = {
  	    match: [
  	      IDENT_RE,
  	      /\s*/,
  	      /=/,
  	      /\s*/,
  	      /\(/,
  	      IDENT_RE,
  	      /\)\s*\{/
  	    ],
  	    scope: {
  	      1: "title.function",
  	      3: "operator",
  	      6: "params"
  	    }
  	  };

  	  const COMMENT_DOCS = hljs.COMMENT(
  	    /\/\*\*/,
  	    /\*\//,
  	    { contains: [
  	      {
  	        match: /@[a-z]+/,
  	        scope: "doctag"
  	      },
  	      "self"
  	    ] }
  	  );
  	  const SUBST = {
  	    scope: "subst",
  	    begin: /%\(/,
  	    end: /\)/,
  	    contains: [
  	      NUMBER,
  	      CLASS_REFERENCE,
  	      FUNCTION,
  	      FIELD,
  	      OPERATOR
  	    ]
  	  };
  	  const STRING = {
  	    scope: "string",
  	    begin: /"/,
  	    end: /"/,
  	    contains: [
  	      SUBST,
  	      {
  	        scope: "char.escape",
  	        variants: [
  	          { match: /\\\\|\\["0%abefnrtv]/ },
  	          { match: /\\x[0-9A-F]{2}/ },
  	          { match: /\\u[0-9A-F]{4}/ },
  	          { match: /\\U[0-9A-F]{8}/ }
  	        ]
  	      }
  	    ]
  	  };
  	  SUBST.contains.push(STRING);

  	  const ALL_KWS = [
  	    ...KEYWORDS,
  	    ...LANGUAGE_VARS,
  	    ...LITERALS
  	  ];
  	  const VARIABLE = {
  	    relevance: 0,
  	    match: regex.concat(
  	      "\\b(?!",
  	      ALL_KWS.join("|"),
  	      "\\b)",
  	      /[a-zA-Z_]\w*(?:[?!]|\b)/
  	    ),
  	    className: "variable"
  	  };

  	  // TODO: reconsider this in the future
  	  const ATTRIBUTE = {
  	    // scope: "meta",
  	    scope: "comment",
  	    variants: [
  	      {
  	        begin: [
  	          /#!?/,
  	          /[A-Za-z_]+(?=\()/
  	        ],
  	        beginScope: {
  	          // 2: "attr"
  	        },
  	        keywords: { literal: LITERALS },
  	        contains: [
  	          // NUMBER,
  	          // VARIABLE
  	        ],
  	        end: /\)/
  	      },
  	      {
  	        begin: [
  	          /#!?/,
  	          /[A-Za-z_]+/
  	        ],
  	        beginScope: {
  	          // 2: "attr"
  	        },
  	        end: /$/
  	      }
  	    ]
  	  };

  	  return {
  	    name: "Wren",
  	    keywords: {
  	      keyword: KEYWORDS,
  	      "variable.language": LANGUAGE_VARS,
  	      literal: LITERALS
  	    },
  	    contains: [
  	      ATTRIBUTE,
  	      NUMBER,
  	      STRING,
  	      TRIPLE_STRING,
  	      COMMENT_DOCS,
  	      hljs.C_LINE_COMMENT_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE,
  	      CLASS_REFERENCE,
  	      CLASS_DEFINITION,
  	      SETTER,
  	      FUNCTION_DEFINITION,
  	      FUNCTION,
  	      OPERATOR,
  	      FIELD,
  	      PROPERTY,
  	      VARIABLE
  	    ]
  	  };
  	}

  	wren_1 = wren;
  	return wren_1;
  }

  /*
  Language: Intel x86 Assembly
  Author: innocenat <innocenat@gmail.com>
  Description: x86 assembly language using Intel's mnemonic and NASM syntax
  Website: https://en.wikipedia.org/wiki/X86_assembly_language
  Category: assembler
  */

  var x86asm_1;
  var hasRequiredX86asm;

  function requireX86asm () {
  	if (hasRequiredX86asm) return x86asm_1;
  	hasRequiredX86asm = 1;
  	function x86asm(hljs) {
  	  return {
  	    name: 'Intel x86 Assembly',
  	    case_insensitive: true,
  	    keywords: {
  	      $pattern: '[.%]?' + hljs.IDENT_RE,
  	      keyword:
  	        'lock rep repe repz repne repnz xaquire xrelease bnd nobnd '
  	        + 'aaa aad aam aas adc add and arpl bb0_reset bb1_reset bound bsf bsr bswap bt btc btr bts call cbw cdq cdqe clc cld cli clts cmc cmp cmpsb cmpsd cmpsq cmpsw cmpxchg cmpxchg486 cmpxchg8b cmpxchg16b cpuid cpu_read cpu_write cqo cwd cwde daa das dec div dmint emms enter equ f2xm1 fabs fadd faddp fbld fbstp fchs fclex fcmovb fcmovbe fcmove fcmovnb fcmovnbe fcmovne fcmovnu fcmovu fcom fcomi fcomip fcomp fcompp fcos fdecstp fdisi fdiv fdivp fdivr fdivrp femms feni ffree ffreep fiadd ficom ficomp fidiv fidivr fild fimul fincstp finit fist fistp fisttp fisub fisubr fld fld1 fldcw fldenv fldl2e fldl2t fldlg2 fldln2 fldpi fldz fmul fmulp fnclex fndisi fneni fninit fnop fnsave fnstcw fnstenv fnstsw fpatan fprem fprem1 fptan frndint frstor fsave fscale fsetpm fsin fsincos fsqrt fst fstcw fstenv fstp fstsw fsub fsubp fsubr fsubrp ftst fucom fucomi fucomip fucomp fucompp fxam fxch fxtract fyl2x fyl2xp1 hlt ibts icebp idiv imul in inc incbin insb insd insw int int01 int1 int03 int3 into invd invpcid invlpg invlpga iret iretd iretq iretw jcxz jecxz jrcxz jmp jmpe lahf lar lds lea leave les lfence lfs lgdt lgs lidt lldt lmsw loadall loadall286 lodsb lodsd lodsq lodsw loop loope loopne loopnz loopz lsl lss ltr mfence monitor mov movd movq movsb movsd movsq movsw movsx movsxd movzx mul mwait neg nop not or out outsb outsd outsw packssdw packsswb packuswb paddb paddd paddsb paddsiw paddsw paddusb paddusw paddw pand pandn pause paveb pavgusb pcmpeqb pcmpeqd pcmpeqw pcmpgtb pcmpgtd pcmpgtw pdistib pf2id pfacc pfadd pfcmpeq pfcmpge pfcmpgt pfmax pfmin pfmul pfrcp pfrcpit1 pfrcpit2 pfrsqit1 pfrsqrt pfsub pfsubr pi2fd pmachriw pmaddwd pmagw pmulhriw pmulhrwa pmulhrwc pmulhw pmullw pmvgezb pmvlzb pmvnzb pmvzb pop popa popad popaw popf popfd popfq popfw por prefetch prefetchw pslld psllq psllw psrad psraw psrld psrlq psrlw psubb psubd psubsb psubsiw psubsw psubusb psubusw psubw punpckhbw punpckhdq punpckhwd punpcklbw punpckldq punpcklwd push pusha pushad pushaw pushf pushfd pushfq pushfw pxor rcl rcr rdshr rdmsr rdpmc rdtsc rdtscp ret retf retn rol ror rdm rsdc rsldt rsm rsts sahf sal salc sar sbb scasb scasd scasq scasw sfence sgdt shl shld shr shrd sidt sldt skinit smi smint smintold smsw stc std sti stosb stosd stosq stosw str sub svdc svldt svts swapgs syscall sysenter sysexit sysret test ud0 ud1 ud2b ud2 ud2a umov verr verw fwait wbinvd wrshr wrmsr xadd xbts xchg xlatb xlat xor cmove cmovz cmovne cmovnz cmova cmovnbe cmovae cmovnb cmovb cmovnae cmovbe cmovna cmovg cmovnle cmovge cmovnl cmovl cmovnge cmovle cmovng cmovc cmovnc cmovo cmovno cmovs cmovns cmovp cmovpe cmovnp cmovpo je jz jne jnz ja jnbe jae jnb jb jnae jbe jna jg jnle jge jnl jl jnge jle jng jc jnc jo jno js jns jpo jnp jpe jp sete setz setne setnz seta setnbe setae setnb setnc setb setnae setcset setbe setna setg setnle setge setnl setl setnge setle setng sets setns seto setno setpe setp setpo setnp addps addss andnps andps cmpeqps cmpeqss cmpleps cmpless cmpltps cmpltss cmpneqps cmpneqss cmpnleps cmpnless cmpnltps cmpnltss cmpordps cmpordss cmpunordps cmpunordss cmpps cmpss comiss cvtpi2ps cvtps2pi cvtsi2ss cvtss2si cvttps2pi cvttss2si divps divss ldmxcsr maxps maxss minps minss movaps movhps movlhps movlps movhlps movmskps movntps movss movups mulps mulss orps rcpps rcpss rsqrtps rsqrtss shufps sqrtps sqrtss stmxcsr subps subss ucomiss unpckhps unpcklps xorps fxrstor fxrstor64 fxsave fxsave64 xgetbv xsetbv xsave xsave64 xsaveopt xsaveopt64 xrstor xrstor64 prefetchnta prefetcht0 prefetcht1 prefetcht2 maskmovq movntq pavgb pavgw pextrw pinsrw pmaxsw pmaxub pminsw pminub pmovmskb pmulhuw psadbw pshufw pf2iw pfnacc pfpnacc pi2fw pswapd maskmovdqu clflush movntdq movnti movntpd movdqa movdqu movdq2q movq2dq paddq pmuludq pshufd pshufhw pshuflw pslldq psrldq psubq punpckhqdq punpcklqdq addpd addsd andnpd andpd cmpeqpd cmpeqsd cmplepd cmplesd cmpltpd cmpltsd cmpneqpd cmpneqsd cmpnlepd cmpnlesd cmpnltpd cmpnltsd cmpordpd cmpordsd cmpunordpd cmpunordsd cmppd comisd cvtdq2pd cvtdq2ps cvtpd2dq cvtpd2pi cvtpd2ps cvtpi2pd cvtps2dq cvtps2pd cvtsd2si cvtsd2ss cvtsi2sd cvtss2sd cvttpd2pi cvttpd2dq cvttps2dq cvttsd2si divpd divsd maxpd maxsd minpd minsd movapd movhpd movlpd movmskpd movupd mulpd mulsd orpd shufpd sqrtpd sqrtsd subpd subsd ucomisd unpckhpd unpcklpd xorpd addsubpd addsubps haddpd haddps hsubpd hsubps lddqu movddup movshdup movsldup clgi stgi vmcall vmclear vmfunc vmlaunch vmload vmmcall vmptrld vmptrst vmread vmresume vmrun vmsave vmwrite vmxoff vmxon invept invvpid pabsb pabsw pabsd palignr phaddw phaddd phaddsw phsubw phsubd phsubsw pmaddubsw pmulhrsw pshufb psignb psignw psignd extrq insertq movntsd movntss lzcnt blendpd blendps blendvpd blendvps dppd dpps extractps insertps movntdqa mpsadbw packusdw pblendvb pblendw pcmpeqq pextrb pextrd pextrq phminposuw pinsrb pinsrd pinsrq pmaxsb pmaxsd pmaxud pmaxuw pminsb pminsd pminud pminuw pmovsxbw pmovsxbd pmovsxbq pmovsxwd pmovsxwq pmovsxdq pmovzxbw pmovzxbd pmovzxbq pmovzxwd pmovzxwq pmovzxdq pmuldq pmulld ptest roundpd roundps roundsd roundss crc32 pcmpestri pcmpestrm pcmpistri pcmpistrm pcmpgtq popcnt getsec pfrcpv pfrsqrtv movbe aesenc aesenclast aesdec aesdeclast aesimc aeskeygenassist vaesenc vaesenclast vaesdec vaesdeclast vaesimc vaeskeygenassist vaddpd vaddps vaddsd vaddss vaddsubpd vaddsubps vandpd vandps vandnpd vandnps vblendpd vblendps vblendvpd vblendvps vbroadcastss vbroadcastsd vbroadcastf128 vcmpeq_ospd vcmpeqpd vcmplt_ospd vcmpltpd vcmple_ospd vcmplepd vcmpunord_qpd vcmpunordpd vcmpneq_uqpd vcmpneqpd vcmpnlt_uspd vcmpnltpd vcmpnle_uspd vcmpnlepd vcmpord_qpd vcmpordpd vcmpeq_uqpd vcmpnge_uspd vcmpngepd vcmpngt_uspd vcmpngtpd vcmpfalse_oqpd vcmpfalsepd vcmpneq_oqpd vcmpge_ospd vcmpgepd vcmpgt_ospd vcmpgtpd vcmptrue_uqpd vcmptruepd vcmplt_oqpd vcmple_oqpd vcmpunord_spd vcmpneq_uspd vcmpnlt_uqpd vcmpnle_uqpd vcmpord_spd vcmpeq_uspd vcmpnge_uqpd vcmpngt_uqpd vcmpfalse_ospd vcmpneq_ospd vcmpge_oqpd vcmpgt_oqpd vcmptrue_uspd vcmppd vcmpeq_osps vcmpeqps vcmplt_osps vcmpltps vcmple_osps vcmpleps vcmpunord_qps vcmpunordps vcmpneq_uqps vcmpneqps vcmpnlt_usps vcmpnltps vcmpnle_usps vcmpnleps vcmpord_qps vcmpordps vcmpeq_uqps vcmpnge_usps vcmpngeps vcmpngt_usps vcmpngtps vcmpfalse_oqps vcmpfalseps vcmpneq_oqps vcmpge_osps vcmpgeps vcmpgt_osps vcmpgtps vcmptrue_uqps vcmptrueps vcmplt_oqps vcmple_oqps vcmpunord_sps vcmpneq_usps vcmpnlt_uqps vcmpnle_uqps vcmpord_sps vcmpeq_usps vcmpnge_uqps vcmpngt_uqps vcmpfalse_osps vcmpneq_osps vcmpge_oqps vcmpgt_oqps vcmptrue_usps vcmpps vcmpeq_ossd vcmpeqsd vcmplt_ossd vcmpltsd vcmple_ossd vcmplesd vcmpunord_qsd vcmpunordsd vcmpneq_uqsd vcmpneqsd vcmpnlt_ussd vcmpnltsd vcmpnle_ussd vcmpnlesd vcmpord_qsd vcmpordsd vcmpeq_uqsd vcmpnge_ussd vcmpngesd vcmpngt_ussd vcmpngtsd vcmpfalse_oqsd vcmpfalsesd vcmpneq_oqsd vcmpge_ossd vcmpgesd vcmpgt_ossd vcmpgtsd vcmptrue_uqsd vcmptruesd vcmplt_oqsd vcmple_oqsd vcmpunord_ssd vcmpneq_ussd vcmpnlt_uqsd vcmpnle_uqsd vcmpord_ssd vcmpeq_ussd vcmpnge_uqsd vcmpngt_uqsd vcmpfalse_ossd vcmpneq_ossd vcmpge_oqsd vcmpgt_oqsd vcmptrue_ussd vcmpsd vcmpeq_osss vcmpeqss vcmplt_osss vcmpltss vcmple_osss vcmpless vcmpunord_qss vcmpunordss vcmpneq_uqss vcmpneqss vcmpnlt_usss vcmpnltss vcmpnle_usss vcmpnless vcmpord_qss vcmpordss vcmpeq_uqss vcmpnge_usss vcmpngess vcmpngt_usss vcmpngtss vcmpfalse_oqss vcmpfalsess vcmpneq_oqss vcmpge_osss vcmpgess vcmpgt_osss vcmpgtss vcmptrue_uqss vcmptruess vcmplt_oqss vcmple_oqss vcmpunord_sss vcmpneq_usss vcmpnlt_uqss vcmpnle_uqss vcmpord_sss vcmpeq_usss vcmpnge_uqss vcmpngt_uqss vcmpfalse_osss vcmpneq_osss vcmpge_oqss vcmpgt_oqss vcmptrue_usss vcmpss vcomisd vcomiss vcvtdq2pd vcvtdq2ps vcvtpd2dq vcvtpd2ps vcvtps2dq vcvtps2pd vcvtsd2si vcvtsd2ss vcvtsi2sd vcvtsi2ss vcvtss2sd vcvtss2si vcvttpd2dq vcvttps2dq vcvttsd2si vcvttss2si vdivpd vdivps vdivsd vdivss vdppd vdpps vextractf128 vextractps vhaddpd vhaddps vhsubpd vhsubps vinsertf128 vinsertps vlddqu vldqqu vldmxcsr vmaskmovdqu vmaskmovps vmaskmovpd vmaxpd vmaxps vmaxsd vmaxss vminpd vminps vminsd vminss vmovapd vmovaps vmovd vmovq vmovddup vmovdqa vmovqqa vmovdqu vmovqqu vmovhlps vmovhpd vmovhps vmovlhps vmovlpd vmovlps vmovmskpd vmovmskps vmovntdq vmovntqq vmovntdqa vmovntpd vmovntps vmovsd vmovshdup vmovsldup vmovss vmovupd vmovups vmpsadbw vmulpd vmulps vmulsd vmulss vorpd vorps vpabsb vpabsw vpabsd vpacksswb vpackssdw vpackuswb vpackusdw vpaddb vpaddw vpaddd vpaddq vpaddsb vpaddsw vpaddusb vpaddusw vpalignr vpand vpandn vpavgb vpavgw vpblendvb vpblendw vpcmpestri vpcmpestrm vpcmpistri vpcmpistrm vpcmpeqb vpcmpeqw vpcmpeqd vpcmpeqq vpcmpgtb vpcmpgtw vpcmpgtd vpcmpgtq vpermilpd vpermilps vperm2f128 vpextrb vpextrw vpextrd vpextrq vphaddw vphaddd vphaddsw vphminposuw vphsubw vphsubd vphsubsw vpinsrb vpinsrw vpinsrd vpinsrq vpmaddwd vpmaddubsw vpmaxsb vpmaxsw vpmaxsd vpmaxub vpmaxuw vpmaxud vpminsb vpminsw vpminsd vpminub vpminuw vpminud vpmovmskb vpmovsxbw vpmovsxbd vpmovsxbq vpmovsxwd vpmovsxwq vpmovsxdq vpmovzxbw vpmovzxbd vpmovzxbq vpmovzxwd vpmovzxwq vpmovzxdq vpmulhuw vpmulhrsw vpmulhw vpmullw vpmulld vpmuludq vpmuldq vpor vpsadbw vpshufb vpshufd vpshufhw vpshuflw vpsignb vpsignw vpsignd vpslldq vpsrldq vpsllw vpslld vpsllq vpsraw vpsrad vpsrlw vpsrld vpsrlq vptest vpsubb vpsubw vpsubd vpsubq vpsubsb vpsubsw vpsubusb vpsubusw vpunpckhbw vpunpckhwd vpunpckhdq vpunpckhqdq vpunpcklbw vpunpcklwd vpunpckldq vpunpcklqdq vpxor vrcpps vrcpss vrsqrtps vrsqrtss vroundpd vroundps vroundsd vroundss vshufpd vshufps vsqrtpd vsqrtps vsqrtsd vsqrtss vstmxcsr vsubpd vsubps vsubsd vsubss vtestps vtestpd vucomisd vucomiss vunpckhpd vunpckhps vunpcklpd vunpcklps vxorpd vxorps vzeroall vzeroupper pclmullqlqdq pclmulhqlqdq pclmullqhqdq pclmulhqhqdq pclmulqdq vpclmullqlqdq vpclmulhqlqdq vpclmullqhqdq vpclmulhqhqdq vpclmulqdq vfmadd132ps vfmadd132pd vfmadd312ps vfmadd312pd vfmadd213ps vfmadd213pd vfmadd123ps vfmadd123pd vfmadd231ps vfmadd231pd vfmadd321ps vfmadd321pd vfmaddsub132ps vfmaddsub132pd vfmaddsub312ps vfmaddsub312pd vfmaddsub213ps vfmaddsub213pd vfmaddsub123ps vfmaddsub123pd vfmaddsub231ps vfmaddsub231pd vfmaddsub321ps vfmaddsub321pd vfmsub132ps vfmsub132pd vfmsub312ps vfmsub312pd vfmsub213ps vfmsub213pd vfmsub123ps vfmsub123pd vfmsub231ps vfmsub231pd vfmsub321ps vfmsub321pd vfmsubadd132ps vfmsubadd132pd vfmsubadd312ps vfmsubadd312pd vfmsubadd213ps vfmsubadd213pd vfmsubadd123ps vfmsubadd123pd vfmsubadd231ps vfmsubadd231pd vfmsubadd321ps vfmsubadd321pd vfnmadd132ps vfnmadd132pd vfnmadd312ps vfnmadd312pd vfnmadd213ps vfnmadd213pd vfnmadd123ps vfnmadd123pd vfnmadd231ps vfnmadd231pd vfnmadd321ps vfnmadd321pd vfnmsub132ps vfnmsub132pd vfnmsub312ps vfnmsub312pd vfnmsub213ps vfnmsub213pd vfnmsub123ps vfnmsub123pd vfnmsub231ps vfnmsub231pd vfnmsub321ps vfnmsub321pd vfmadd132ss vfmadd132sd vfmadd312ss vfmadd312sd vfmadd213ss vfmadd213sd vfmadd123ss vfmadd123sd vfmadd231ss vfmadd231sd vfmadd321ss vfmadd321sd vfmsub132ss vfmsub132sd vfmsub312ss vfmsub312sd vfmsub213ss vfmsub213sd vfmsub123ss vfmsub123sd vfmsub231ss vfmsub231sd vfmsub321ss vfmsub321sd vfnmadd132ss vfnmadd132sd vfnmadd312ss vfnmadd312sd vfnmadd213ss vfnmadd213sd vfnmadd123ss vfnmadd123sd vfnmadd231ss vfnmadd231sd vfnmadd321ss vfnmadd321sd vfnmsub132ss vfnmsub132sd vfnmsub312ss vfnmsub312sd vfnmsub213ss vfnmsub213sd vfnmsub123ss vfnmsub123sd vfnmsub231ss vfnmsub231sd vfnmsub321ss vfnmsub321sd rdfsbase rdgsbase rdrand wrfsbase wrgsbase vcvtph2ps vcvtps2ph adcx adox rdseed clac stac xstore xcryptecb xcryptcbc xcryptctr xcryptcfb xcryptofb montmul xsha1 xsha256 llwpcb slwpcb lwpval lwpins vfmaddpd vfmaddps vfmaddsd vfmaddss vfmaddsubpd vfmaddsubps vfmsubaddpd vfmsubaddps vfmsubpd vfmsubps vfmsubsd vfmsubss vfnmaddpd vfnmaddps vfnmaddsd vfnmaddss vfnmsubpd vfnmsubps vfnmsubsd vfnmsubss vfrczpd vfrczps vfrczsd vfrczss vpcmov vpcomb vpcomd vpcomq vpcomub vpcomud vpcomuq vpcomuw vpcomw vphaddbd vphaddbq vphaddbw vphadddq vphaddubd vphaddubq vphaddubw vphaddudq vphadduwd vphadduwq vphaddwd vphaddwq vphsubbw vphsubdq vphsubwd vpmacsdd vpmacsdqh vpmacsdql vpmacssdd vpmacssdqh vpmacssdql vpmacsswd vpmacssww vpmacswd vpmacsww vpmadcsswd vpmadcswd vpperm vprotb vprotd vprotq vprotw vpshab vpshad vpshaq vpshaw vpshlb vpshld vpshlq vpshlw vbroadcasti128 vpblendd vpbroadcastb vpbroadcastw vpbroadcastd vpbroadcastq vpermd vpermpd vpermps vpermq vperm2i128 vextracti128 vinserti128 vpmaskmovd vpmaskmovq vpsllvd vpsllvq vpsravd vpsrlvd vpsrlvq vgatherdpd vgatherqpd vgatherdps vgatherqps vpgatherdd vpgatherqd vpgatherdq vpgatherqq xabort xbegin xend xtest andn bextr blci blcic blsi blsic blcfill blsfill blcmsk blsmsk blsr blcs bzhi mulx pdep pext rorx sarx shlx shrx tzcnt tzmsk t1mskc valignd valignq vblendmpd vblendmps vbroadcastf32x4 vbroadcastf64x4 vbroadcasti32x4 vbroadcasti64x4 vcompresspd vcompressps vcvtpd2udq vcvtps2udq vcvtsd2usi vcvtss2usi vcvttpd2udq vcvttps2udq vcvttsd2usi vcvttss2usi vcvtudq2pd vcvtudq2ps vcvtusi2sd vcvtusi2ss vexpandpd vexpandps vextractf32x4 vextractf64x4 vextracti32x4 vextracti64x4 vfixupimmpd vfixupimmps vfixupimmsd vfixupimmss vgetexppd vgetexpps vgetexpsd vgetexpss vgetmantpd vgetmantps vgetmantsd vgetmantss vinsertf32x4 vinsertf64x4 vinserti32x4 vinserti64x4 vmovdqa32 vmovdqa64 vmovdqu32 vmovdqu64 vpabsq vpandd vpandnd vpandnq vpandq vpblendmd vpblendmq vpcmpltd vpcmpled vpcmpneqd vpcmpnltd vpcmpnled vpcmpd vpcmpltq vpcmpleq vpcmpneqq vpcmpnltq vpcmpnleq vpcmpq vpcmpequd vpcmpltud vpcmpleud vpcmpnequd vpcmpnltud vpcmpnleud vpcmpud vpcmpequq vpcmpltuq vpcmpleuq vpcmpnequq vpcmpnltuq vpcmpnleuq vpcmpuq vpcompressd vpcompressq vpermi2d vpermi2pd vpermi2ps vpermi2q vpermt2d vpermt2pd vpermt2ps vpermt2q vpexpandd vpexpandq vpmaxsq vpmaxuq vpminsq vpminuq vpmovdb vpmovdw vpmovqb vpmovqd vpmovqw vpmovsdb vpmovsdw vpmovsqb vpmovsqd vpmovsqw vpmovusdb vpmovusdw vpmovusqb vpmovusqd vpmovusqw vpord vporq vprold vprolq vprolvd vprolvq vprord vprorq vprorvd vprorvq vpscatterdd vpscatterdq vpscatterqd vpscatterqq vpsraq vpsravq vpternlogd vpternlogq vptestmd vptestmq vptestnmd vptestnmq vpxord vpxorq vrcp14pd vrcp14ps vrcp14sd vrcp14ss vrndscalepd vrndscaleps vrndscalesd vrndscaless vrsqrt14pd vrsqrt14ps vrsqrt14sd vrsqrt14ss vscalefpd vscalefps vscalefsd vscalefss vscatterdpd vscatterdps vscatterqpd vscatterqps vshuff32x4 vshuff64x2 vshufi32x4 vshufi64x2 kandnw kandw kmovw knotw kortestw korw kshiftlw kshiftrw kunpckbw kxnorw kxorw vpbroadcastmb2q vpbroadcastmw2d vpconflictd vpconflictq vplzcntd vplzcntq vexp2pd vexp2ps vrcp28pd vrcp28ps vrcp28sd vrcp28ss vrsqrt28pd vrsqrt28ps vrsqrt28sd vrsqrt28ss vgatherpf0dpd vgatherpf0dps vgatherpf0qpd vgatherpf0qps vgatherpf1dpd vgatherpf1dps vgatherpf1qpd vgatherpf1qps vscatterpf0dpd vscatterpf0dps vscatterpf0qpd vscatterpf0qps vscatterpf1dpd vscatterpf1dps vscatterpf1qpd vscatterpf1qps prefetchwt1 bndmk bndcl bndcu bndcn bndmov bndldx bndstx sha1rnds4 sha1nexte sha1msg1 sha1msg2 sha256rnds2 sha256msg1 sha256msg2 hint_nop0 hint_nop1 hint_nop2 hint_nop3 hint_nop4 hint_nop5 hint_nop6 hint_nop7 hint_nop8 hint_nop9 hint_nop10 hint_nop11 hint_nop12 hint_nop13 hint_nop14 hint_nop15 hint_nop16 hint_nop17 hint_nop18 hint_nop19 hint_nop20 hint_nop21 hint_nop22 hint_nop23 hint_nop24 hint_nop25 hint_nop26 hint_nop27 hint_nop28 hint_nop29 hint_nop30 hint_nop31 hint_nop32 hint_nop33 hint_nop34 hint_nop35 hint_nop36 hint_nop37 hint_nop38 hint_nop39 hint_nop40 hint_nop41 hint_nop42 hint_nop43 hint_nop44 hint_nop45 hint_nop46 hint_nop47 hint_nop48 hint_nop49 hint_nop50 hint_nop51 hint_nop52 hint_nop53 hint_nop54 hint_nop55 hint_nop56 hint_nop57 hint_nop58 hint_nop59 hint_nop60 hint_nop61 hint_nop62 hint_nop63',
  	      built_in:
  	        // Instruction pointer
  	        'ip eip rip '
  	        // 8-bit registers
  	        + 'al ah bl bh cl ch dl dh sil dil bpl spl r8b r9b r10b r11b r12b r13b r14b r15b '
  	        // 16-bit registers
  	        + 'ax bx cx dx si di bp sp r8w r9w r10w r11w r12w r13w r14w r15w '
  	        // 32-bit registers
  	        + 'eax ebx ecx edx esi edi ebp esp eip r8d r9d r10d r11d r12d r13d r14d r15d '
  	        // 64-bit registers
  	        + 'rax rbx rcx rdx rsi rdi rbp rsp r8 r9 r10 r11 r12 r13 r14 r15 '
  	        // Segment registers
  	        + 'cs ds es fs gs ss '
  	        // Floating point stack registers
  	        + 'st st0 st1 st2 st3 st4 st5 st6 st7 '
  	        // MMX Registers
  	        + 'mm0 mm1 mm2 mm3 mm4 mm5 mm6 mm7 '
  	        // SSE registers
  	        + 'xmm0  xmm1  xmm2  xmm3  xmm4  xmm5  xmm6  xmm7  xmm8  xmm9 xmm10  xmm11 xmm12 xmm13 xmm14 xmm15 '
  	        + 'xmm16 xmm17 xmm18 xmm19 xmm20 xmm21 xmm22 xmm23 xmm24 xmm25 xmm26 xmm27 xmm28 xmm29 xmm30 xmm31 '
  	        // AVX registers
  	        + 'ymm0  ymm1  ymm2  ymm3  ymm4  ymm5  ymm6  ymm7  ymm8  ymm9 ymm10  ymm11 ymm12 ymm13 ymm14 ymm15 '
  	        + 'ymm16 ymm17 ymm18 ymm19 ymm20 ymm21 ymm22 ymm23 ymm24 ymm25 ymm26 ymm27 ymm28 ymm29 ymm30 ymm31 '
  	        // AVX-512F registers
  	        + 'zmm0  zmm1  zmm2  zmm3  zmm4  zmm5  zmm6  zmm7  zmm8  zmm9 zmm10  zmm11 zmm12 zmm13 zmm14 zmm15 '
  	        + 'zmm16 zmm17 zmm18 zmm19 zmm20 zmm21 zmm22 zmm23 zmm24 zmm25 zmm26 zmm27 zmm28 zmm29 zmm30 zmm31 '
  	        // AVX-512F mask registers
  	        + 'k0 k1 k2 k3 k4 k5 k6 k7 '
  	        // Bound (MPX) register
  	        + 'bnd0 bnd1 bnd2 bnd3 '
  	        // Special register
  	        + 'cr0 cr1 cr2 cr3 cr4 cr8 dr0 dr1 dr2 dr3 dr8 tr3 tr4 tr5 tr6 tr7 '
  	        // NASM altreg package
  	        + 'r0 r1 r2 r3 r4 r5 r6 r7 r0b r1b r2b r3b r4b r5b r6b r7b '
  	        + 'r0w r1w r2w r3w r4w r5w r6w r7w r0d r1d r2d r3d r4d r5d r6d r7d '
  	        + 'r0h r1h r2h r3h '
  	        + 'r0l r1l r2l r3l r4l r5l r6l r7l r8l r9l r10l r11l r12l r13l r14l r15l '

  	        + 'db dw dd dq dt ddq do dy dz '
  	        + 'resb resw resd resq rest resdq reso resy resz '
  	        + 'incbin equ times '
  	        + 'byte word dword qword nosplit rel abs seg wrt strict near far a32 ptr',

  	      meta:
  	        '%define %xdefine %+ %undef %defstr %deftok %assign %strcat %strlen %substr %rotate %elif %else %endif '
  	        + '%if %ifmacro %ifctx %ifidn %ifidni %ifid %ifnum %ifstr %iftoken %ifempty %ifenv %error %warning %fatal %rep '
  	        + '%endrep %include %push %pop %repl %pathsearch %depend %use %arg %stacksize %local %line %comment %endcomment '
  	        + '.nolist '
  	        + '__FILE__ __LINE__ __SECT__  __BITS__ __OUTPUT_FORMAT__ __DATE__ __TIME__ __DATE_NUM__ __TIME_NUM__ '
  	        + '__UTC_DATE__ __UTC_TIME__ __UTC_DATE_NUM__ __UTC_TIME_NUM__  __PASS__ struc endstruc istruc at iend '
  	        + 'align alignb sectalign daz nodaz up down zero default option assume public '

  	        + 'bits use16 use32 use64 default section segment absolute extern global common cpu float '
  	        + '__utf16__ __utf16le__ __utf16be__ __utf32__ __utf32le__ __utf32be__ '
  	        + '__float8__ __float16__ __float32__ __float64__ __float80m__ __float80e__ __float128l__ __float128h__ '
  	        + '__Infinity__ __QNaN__ __SNaN__ Inf NaN QNaN SNaN float8 float16 float32 float64 float80m float80e '
  	        + 'float128l float128h __FLOAT_DAZ__ __FLOAT_ROUND__ __FLOAT__'
  	    },
  	    contains: [
  	      hljs.COMMENT(
  	        ';',
  	        '$',
  	        { relevance: 0 }
  	      ),
  	      {
  	        className: 'number',
  	        variants: [
  	          // Float number and x87 BCD
  	          {
  	            begin: '\\b(?:([0-9][0-9_]*)?\\.[0-9_]*(?:[eE][+-]?[0-9_]+)?|'
  	                   + '(0[Xx])?[0-9][0-9_]*(\\.[0-9_]*)?(?:[pP](?:[+-]?[0-9_]+)?)?)\\b',
  	            relevance: 0
  	          },

  	          // Hex number in $
  	          {
  	            begin: '\\$[0-9][0-9A-Fa-f]*',
  	            relevance: 0
  	          },

  	          // Number in H,D,T,Q,O,B,Y suffix
  	          { begin: '\\b(?:[0-9A-Fa-f][0-9A-Fa-f_]*[Hh]|[0-9][0-9_]*[DdTt]?|[0-7][0-7_]*[QqOo]|[0-1][0-1_]*[BbYy])\\b' },

  	          // Number in X,D,T,Q,O,B,Y prefix
  	          { begin: '\\b(?:0[Xx][0-9A-Fa-f_]+|0[DdTt][0-9_]+|0[QqOo][0-7_]+|0[BbYy][0-1_]+)\\b' }
  	        ]
  	      },
  	      // Double quote string
  	      hljs.QUOTE_STRING_MODE,
  	      {
  	        className: 'string',
  	        variants: [
  	          // Single-quoted string
  	          {
  	            begin: '\'',
  	            end: '[^\\\\]\''
  	          },
  	          // Backquoted string
  	          {
  	            begin: '`',
  	            end: '[^\\\\]`'
  	          }
  	        ],
  	        relevance: 0
  	      },
  	      {
  	        className: 'symbol',
  	        variants: [
  	          // Global label and local label
  	          { begin: '^\\s*[A-Za-z._?][A-Za-z0-9_$#@~.?]*(:|\\s+label)' },
  	          // Macro-local label
  	          { begin: '^\\s*%%[A-Za-z0-9_$#@~.?]*:' }
  	        ],
  	        relevance: 0
  	      },
  	      // Macro parameter
  	      {
  	        className: 'subst',
  	        begin: '%[0-9]+',
  	        relevance: 0
  	      },
  	      // Macro parameter
  	      {
  	        className: 'subst',
  	        begin: '%!\S+',
  	        relevance: 0
  	      },
  	      {
  	        className: 'meta',
  	        begin: /^\s*\.[\w_-]+/
  	      }
  	    ]
  	  };
  	}

  	x86asm_1 = x86asm;
  	return x86asm_1;
  }

  /*
  Language: XL
  Author: Christophe de Dinechin <christophe@taodyne.com>
  Description: An extensible programming language, based on parse tree rewriting
  Website: http://xlr.sf.net
  */

  var xl_1;
  var hasRequiredXl;

  function requireXl () {
  	if (hasRequiredXl) return xl_1;
  	hasRequiredXl = 1;
  	function xl(hljs) {
  	  const KWS = [
  	    "if",
  	    "then",
  	    "else",
  	    "do",
  	    "while",
  	    "until",
  	    "for",
  	    "loop",
  	    "import",
  	    "with",
  	    "is",
  	    "as",
  	    "where",
  	    "when",
  	    "by",
  	    "data",
  	    "constant",
  	    "integer",
  	    "real",
  	    "text",
  	    "name",
  	    "boolean",
  	    "symbol",
  	    "infix",
  	    "prefix",
  	    "postfix",
  	    "block",
  	    "tree"
  	  ];
  	  const BUILT_INS = [
  	    "in",
  	    "mod",
  	    "rem",
  	    "and",
  	    "or",
  	    "xor",
  	    "not",
  	    "abs",
  	    "sign",
  	    "floor",
  	    "ceil",
  	    "sqrt",
  	    "sin",
  	    "cos",
  	    "tan",
  	    "asin",
  	    "acos",
  	    "atan",
  	    "exp",
  	    "expm1",
  	    "log",
  	    "log2",
  	    "log10",
  	    "log1p",
  	    "pi",
  	    "at",
  	    "text_length",
  	    "text_range",
  	    "text_find",
  	    "text_replace",
  	    "contains",
  	    "page",
  	    "slide",
  	    "basic_slide",
  	    "title_slide",
  	    "title",
  	    "subtitle",
  	    "fade_in",
  	    "fade_out",
  	    "fade_at",
  	    "clear_color",
  	    "color",
  	    "line_color",
  	    "line_width",
  	    "texture_wrap",
  	    "texture_transform",
  	    "texture",
  	    "scale_?x",
  	    "scale_?y",
  	    "scale_?z?",
  	    "translate_?x",
  	    "translate_?y",
  	    "translate_?z?",
  	    "rotate_?x",
  	    "rotate_?y",
  	    "rotate_?z?",
  	    "rectangle",
  	    "circle",
  	    "ellipse",
  	    "sphere",
  	    "path",
  	    "line_to",
  	    "move_to",
  	    "quad_to",
  	    "curve_to",
  	    "theme",
  	    "background",
  	    "contents",
  	    "locally",
  	    "time",
  	    "mouse_?x",
  	    "mouse_?y",
  	    "mouse_buttons"
  	  ];
  	  const BUILTIN_MODULES = [
  	    "ObjectLoader",
  	    "Animate",
  	    "MovieCredits",
  	    "Slides",
  	    "Filters",
  	    "Shading",
  	    "Materials",
  	    "LensFlare",
  	    "Mapping",
  	    "VLCAudioVideo",
  	    "StereoDecoder",
  	    "PointCloud",
  	    "NetworkAccess",
  	    "RemoteControl",
  	    "RegExp",
  	    "ChromaKey",
  	    "Snowfall",
  	    "NodeJS",
  	    "Speech",
  	    "Charts"
  	  ];
  	  const LITERALS = [
  	    "true",
  	    "false",
  	    "nil"
  	  ];
  	  const KEYWORDS = {
  	    $pattern: /[a-zA-Z][a-zA-Z0-9_?]*/,
  	    keyword: KWS,
  	    literal: LITERALS,
  	    built_in: BUILT_INS.concat(BUILTIN_MODULES)
  	  };

  	  const DOUBLE_QUOTE_TEXT = {
  	    className: 'string',
  	    begin: '"',
  	    end: '"',
  	    illegal: '\\n'
  	  };
  	  const SINGLE_QUOTE_TEXT = {
  	    className: 'string',
  	    begin: '\'',
  	    end: '\'',
  	    illegal: '\\n'
  	  };
  	  const LONG_TEXT = {
  	    className: 'string',
  	    begin: '<<',
  	    end: '>>'
  	  };
  	  const BASED_NUMBER = {
  	    className: 'number',
  	    begin: '[0-9]+#[0-9A-Z_]+(\\.[0-9-A-Z_]+)?#?([Ee][+-]?[0-9]+)?'
  	  };
  	  const IMPORT = {
  	    beginKeywords: 'import',
  	    end: '$',
  	    keywords: KEYWORDS,
  	    contains: [ DOUBLE_QUOTE_TEXT ]
  	  };
  	  const FUNCTION_DEFINITION = {
  	    className: 'function',
  	    begin: /[a-z][^\n]*->/,
  	    returnBegin: true,
  	    end: /->/,
  	    contains: [
  	      hljs.inherit(hljs.TITLE_MODE, { starts: {
  	        endsWithParent: true,
  	        keywords: KEYWORDS
  	      } })
  	    ]
  	  };
  	  return {
  	    name: 'XL',
  	    aliases: [ 'tao' ],
  	    keywords: KEYWORDS,
  	    contains: [
  	      hljs.C_LINE_COMMENT_MODE,
  	      hljs.C_BLOCK_COMMENT_MODE,
  	      DOUBLE_QUOTE_TEXT,
  	      SINGLE_QUOTE_TEXT,
  	      LONG_TEXT,
  	      FUNCTION_DEFINITION,
  	      IMPORT,
  	      BASED_NUMBER,
  	      hljs.NUMBER_MODE
  	    ]
  	  };
  	}

  	xl_1 = xl;
  	return xl_1;
  }

  /*
  Language: XQuery
  Author: Dirk Kirsten <dk@basex.org>
  Contributor: Duncan Paterson
  Description: Supports XQuery 3.1 including XQuery Update 3, so also XPath (as it is a superset)
  Refactored to process xml constructor syntax and function-bodies. Added missing data-types, xpath operands, inbuilt functions, and query prologs
  Website: https://www.w3.org/XML/Query/
  Category: functional
  Audit: 2020
  */

  var xquery_1;
  var hasRequiredXquery;

  function requireXquery () {
  	if (hasRequiredXquery) return xquery_1;
  	hasRequiredXquery = 1;
  	/** @type LanguageFn */
  	function xquery(_hljs) {
  	  // see https://www.w3.org/TR/xquery/#id-terminal-delimitation
  	  const KEYWORDS = [
  	    "module",
  	    "schema",
  	    "namespace",
  	    "boundary-space",
  	    "preserve",
  	    "no-preserve",
  	    "strip",
  	    "default",
  	    "collation",
  	    "base-uri",
  	    "ordering",
  	    "context",
  	    "decimal-format",
  	    "decimal-separator",
  	    "copy-namespaces",
  	    "empty-sequence",
  	    "except",
  	    "exponent-separator",
  	    "external",
  	    "grouping-separator",
  	    "inherit",
  	    "no-inherit",
  	    "lax",
  	    "minus-sign",
  	    "per-mille",
  	    "percent",
  	    "schema-attribute",
  	    "schema-element",
  	    "strict",
  	    "unordered",
  	    "zero-digit",
  	    "declare",
  	    "import",
  	    "option",
  	    "function",
  	    "validate",
  	    "variable",
  	    "for",
  	    "at",
  	    "in",
  	    "let",
  	    "where",
  	    "order",
  	    "group",
  	    "by",
  	    "return",
  	    "if",
  	    "then",
  	    "else",
  	    "tumbling",
  	    "sliding",
  	    "window",
  	    "start",
  	    "when",
  	    "only",
  	    "end",
  	    "previous",
  	    "next",
  	    "stable",
  	    "ascending",
  	    "descending",
  	    "allowing",
  	    "empty",
  	    "greatest",
  	    "least",
  	    "some",
  	    "every",
  	    "satisfies",
  	    "switch",
  	    "case",
  	    "typeswitch",
  	    "try",
  	    "catch",
  	    "and",
  	    "or",
  	    "to",
  	    "union",
  	    "intersect",
  	    "instance",
  	    "of",
  	    "treat",
  	    "as",
  	    "castable",
  	    "cast",
  	    "map",
  	    "array",
  	    "delete",
  	    "insert",
  	    "into",
  	    "replace",
  	    "value",
  	    "rename",
  	    "copy",
  	    "modify",
  	    "update"
  	  ];

  	  // Node Types (sorted by inheritance)
  	  // atomic types (sorted by inheritance)
  	  const TYPES = [
  	    "item",
  	    "document-node",
  	    "node",
  	    "attribute",
  	    "document",
  	    "element",
  	    "comment",
  	    "namespace",
  	    "namespace-node",
  	    "processing-instruction",
  	    "text",
  	    "construction",
  	    "xs:anyAtomicType",
  	    "xs:untypedAtomic",
  	    "xs:duration",
  	    "xs:time",
  	    "xs:decimal",
  	    "xs:float",
  	    "xs:double",
  	    "xs:gYearMonth",
  	    "xs:gYear",
  	    "xs:gMonthDay",
  	    "xs:gMonth",
  	    "xs:gDay",
  	    "xs:boolean",
  	    "xs:base64Binary",
  	    "xs:hexBinary",
  	    "xs:anyURI",
  	    "xs:QName",
  	    "xs:NOTATION",
  	    "xs:dateTime",
  	    "xs:dateTimeStamp",
  	    "xs:date",
  	    "xs:string",
  	    "xs:normalizedString",
  	    "xs:token",
  	    "xs:language",
  	    "xs:NMTOKEN",
  	    "xs:Name",
  	    "xs:NCName",
  	    "xs:ID",
  	    "xs:IDREF",
  	    "xs:ENTITY",
  	    "xs:integer",
  	    "xs:nonPositiveInteger",
  	    "xs:negativeInteger",
  	    "xs:long",
  	    "xs:int",
  	    "xs:short",
  	    "xs:byte",
  	    "xs:nonNegativeInteger",
  	    "xs:unisignedLong",
  	    "xs:unsignedInt",
  	    "xs:unsignedShort",
  	    "xs:unsignedByte",
  	    "xs:positiveInteger",
  	    "xs:yearMonthDuration",
  	    "xs:dayTimeDuration"
  	  ];

  	  const LITERALS = [
  	    "eq",
  	    "ne",
  	    "lt",
  	    "le",
  	    "gt",
  	    "ge",
  	    "is",
  	    "self::",
  	    "child::",
  	    "descendant::",
  	    "descendant-or-self::",
  	    "attribute::",
  	    "following::",
  	    "following-sibling::",
  	    "parent::",
  	    "ancestor::",
  	    "ancestor-or-self::",
  	    "preceding::",
  	    "preceding-sibling::",
  	    "NaN"
  	  ];

  	  // functions (TODO: find regex for op: without breaking build)
  	  const BUILT_IN = {
  	    className: 'built_in',
  	    variants: [
  	      {
  	        begin: /\barray:/,
  	        end: /(?:append|filter|flatten|fold-(?:left|right)|for-each(?:-pair)?|get|head|insert-before|join|put|remove|reverse|size|sort|subarray|tail)\b/
  	      },
  	      {
  	        begin: /\bmap:/,
  	        end: /(?:contains|entry|find|for-each|get|keys|merge|put|remove|size)\b/
  	      },
  	      {
  	        begin: /\bmath:/,
  	        end: /(?:a(?:cos|sin|tan[2]?)|cos|exp(?:10)?|log(?:10)?|pi|pow|sin|sqrt|tan)\b/
  	      },
  	      {
  	        begin: /\bop:/,
  	        end: /\(/,
  	        excludeEnd: true
  	      },
  	      {
  	        begin: /\bfn:/,
  	        end: /\(/,
  	        excludeEnd: true
  	      },
  	      // do not highlight inbuilt strings as variable or xml element names
  	      { begin: /[^</$:'"-]\b(?:abs|accumulator-(?:after|before)|adjust-(?:date(?:Time)?|time)-to-timezone|analyze-string|apply|available-(?:environment-variables|system-properties)|avg|base-uri|boolean|ceiling|codepoints?-(?:equal|to-string)|collation-key|collection|compare|concat|contains(?:-token)?|copy-of|count|current(?:-)?(?:date(?:Time)?|time|group(?:ing-key)?|output-uri|merge-(?:group|key))?data|dateTime|days?-from-(?:date(?:Time)?|duration)|deep-equal|default-(?:collation|language)|distinct-values|document(?:-uri)?|doc(?:-available)?|element-(?:available|with-id)|empty|encode-for-uri|ends-with|environment-variable|error|escape-html-uri|exactly-one|exists|false|filter|floor|fold-(?:left|right)|for-each(?:-pair)?|format-(?:date(?:Time)?|time|integer|number)|function-(?:arity|available|lookup|name)|generate-id|has-children|head|hours-from-(?:dateTime|duration|time)|id(?:ref)?|implicit-timezone|in-scope-prefixes|index-of|innermost|insert-before|iri-to-uri|json-(?:doc|to-xml)|key|lang|last|load-xquery-module|local-name(?:-from-QName)?|(?:lower|upper)-case|matches|max|minutes-from-(?:dateTime|duration|time)|min|months?-from-(?:date(?:Time)?|duration)|name(?:space-uri-?(?:for-prefix|from-QName)?)?|nilled|node-name|normalize-(?:space|unicode)|not|number|one-or-more|outermost|parse-(?:ietf-date|json)|path|position|(?:prefix-from-)?QName|random-number-generator|regex-group|remove|replace|resolve-(?:QName|uri)|reverse|root|round(?:-half-to-even)?|seconds-from-(?:dateTime|duration|time)|snapshot|sort|starts-with|static-base-uri|stream-available|string-?(?:join|length|to-codepoints)?|subsequence|substring-?(?:after|before)?|sum|system-property|tail|timezone-from-(?:date(?:Time)?|time)|tokenize|trace|trans(?:form|late)|true|type-available|unordered|unparsed-(?:entity|text)?-?(?:public-id|uri|available|lines)?|uri-collection|xml-to-json|years?-from-(?:date(?:Time)?|duration)|zero-or-one)\b/ },
  	      {
  	        begin: /\blocal:/,
  	        end: /\(/,
  	        excludeEnd: true
  	      },
  	      {
  	        begin: /\bzip:/,
  	        end: /(?:zip-file|(?:xml|html|text|binary)-entry| (?:update-)?entries)\b/
  	      },
  	      {
  	        begin: /\b(?:util|db|functx|app|xdmp|xmldb):/,
  	        end: /\(/,
  	        excludeEnd: true
  	      }
  	    ]
  	  };

  	  const TITLE = {
  	    className: 'title',
  	    begin: /\bxquery version "[13]\.[01]"\s?(?:encoding ".+")?/,
  	    end: /;/
  	  };

  	  const VAR = {
  	    className: 'variable',
  	    begin: /[$][\w\-:]+/
  	  };

  	  const NUMBER = {
  	    className: 'number',
  	    begin: /(\b0[0-7_]+)|(\b0x[0-9a-fA-F_]+)|(\b[1-9][0-9_]*(\.[0-9_]+)?)|[0_]\b/,
  	    relevance: 0
  	  };

  	  const STRING = {
  	    className: 'string',
  	    variants: [
  	      {
  	        begin: /"/,
  	        end: /"/,
  	        contains: [
  	          {
  	            begin: /""/,
  	            relevance: 0
  	          }
  	        ]
  	      },
  	      {
  	        begin: /'/,
  	        end: /'/,
  	        contains: [
  	          {
  	            begin: /''/,
  	            relevance: 0
  	          }
  	        ]
  	      }
  	    ]
  	  };

  	  const ANNOTATION = {
  	    className: 'meta',
  	    begin: /%[\w\-:]+/
  	  };

  	  const COMMENT = {
  	    className: 'comment',
  	    begin: /\(:/,
  	    end: /:\)/,
  	    relevance: 10,
  	    contains: [
  	      {
  	        className: 'doctag',
  	        begin: /@\w+/
  	      }
  	    ]
  	  };

  	  // see https://www.w3.org/TR/xquery/#id-computedConstructors
  	  // mocha: computed_inbuilt
  	  // see https://www.regexpal.com/?fam=99749
  	  const COMPUTED = {
  	    beginKeywords: 'element attribute comment document processing-instruction',
  	    end: /\{/,
  	    excludeEnd: true
  	  };

  	  // mocha: direct_method
  	  const DIRECT = {
  	    begin: /<([\w._:-]+)(\s+\S*=('|").*('|"))?>/,
  	    end: /(\/[\w._:-]+>)/,
  	    subLanguage: 'xml',
  	    contains: [
  	      {
  	        begin: /\{/,
  	        end: /\}/,
  	        subLanguage: 'xquery'
  	      },
  	      'self'
  	    ]
  	  };

  	  const CONTAINS = [
  	    VAR,
  	    BUILT_IN,
  	    STRING,
  	    NUMBER,
  	    COMMENT,
  	    ANNOTATION,
  	    TITLE,
  	    COMPUTED,
  	    DIRECT
  	  ];

  	  return {
  	    name: 'XQuery',
  	    aliases: [
  	      'xpath',
  	      'xq'
  	    ],
  	    case_insensitive: false,
  	    illegal: /(proc)|(abstract)|(extends)|(until)|(#)/,
  	    keywords: {
  	      $pattern: /[a-zA-Z$][a-zA-Z0-9_:-]*/,
  	      keyword: KEYWORDS,
  	      type: TYPES,
  	      literal: LITERALS
  	    },
  	    contains: CONTAINS
  	  };
  	}

  	xquery_1 = xquery;
  	return xquery_1;
  }

  /*
   Language: Zephir
   Description: Zephir, an open source, high-level language designed to ease the creation and maintainability of extensions for PHP with a focus on type and memory safety.
   Author: Oleg Efimov <efimovov@gmail.com>
   Website: https://zephir-lang.com/en
   Audit: 2020
   */

  var zephir_1;
  var hasRequiredZephir;

  function requireZephir () {
  	if (hasRequiredZephir) return zephir_1;
  	hasRequiredZephir = 1;
  	/** @type LanguageFn */
  	function zephir(hljs) {
  	  const STRING = {
  	    className: 'string',
  	    contains: [ hljs.BACKSLASH_ESCAPE ],
  	    variants: [
  	      hljs.inherit(hljs.APOS_STRING_MODE, { illegal: null }),
  	      hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null })
  	    ]
  	  };
  	  const TITLE_MODE = hljs.UNDERSCORE_TITLE_MODE;
  	  const NUMBER = { variants: [
  	    hljs.BINARY_NUMBER_MODE,
  	    hljs.C_NUMBER_MODE
  	  ] };
  	  const KEYWORDS =
  	    // classes and objects
  	    'namespace class interface use extends '
  	    + 'function return '
  	    + 'abstract final public protected private static deprecated '
  	    // error handling
  	    + 'throw try catch Exception '
  	    // keyword-ish things their website does NOT seem to highlight (in their own snippets)
  	    // 'typeof fetch in ' +
  	    // operators/helpers
  	    + 'echo empty isset instanceof unset '
  	    // assignment/variables
  	    + 'let var new const self '
  	    // control
  	    + 'require '
  	    + 'if else elseif switch case default '
  	    + 'do while loop for continue break '
  	    + 'likely unlikely '
  	    // magic constants
  	    // https://github.com/phalcon/zephir/blob/master/Library/Expression/Constants.php
  	    + '__LINE__ __FILE__ __DIR__ __FUNCTION__ __CLASS__ __TRAIT__ __METHOD__ __NAMESPACE__ '
  	    // types - https://docs.zephir-lang.com/0.12/en/types
  	    + 'array boolean float double integer object resource string '
  	    + 'char long unsigned bool int uint ulong uchar '
  	    // built-ins
  	    + 'true false null undefined';

  	  return {
  	    name: 'Zephir',
  	    aliases: [ 'zep' ],
  	    keywords: KEYWORDS,
  	    contains: [
  	      hljs.C_LINE_COMMENT_MODE,
  	      hljs.COMMENT(
  	        /\/\*/,
  	        /\*\//,
  	        { contains: [
  	          {
  	            className: 'doctag',
  	            begin: /@[A-Za-z]+/
  	          }
  	        ] }
  	      ),
  	      {
  	        className: 'string',
  	        begin: /<<<['"]?\w+['"]?$/,
  	        end: /^\w+;/,
  	        contains: [ hljs.BACKSLASH_ESCAPE ]
  	      },
  	      {
  	        // swallow composed identifiers to avoid parsing them as keywords
  	        begin: /(::|->)+[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/ },
  	      {
  	        className: 'function',
  	        beginKeywords: 'function fn',
  	        end: /[;{]/,
  	        excludeEnd: true,
  	        illegal: /\$|\[|%/,
  	        contains: [
  	          TITLE_MODE,
  	          {
  	            className: 'params',
  	            begin: /\(/,
  	            end: /\)/,
  	            keywords: KEYWORDS,
  	            contains: [
  	              'self',
  	              hljs.C_BLOCK_COMMENT_MODE,
  	              STRING,
  	              NUMBER
  	            ]
  	          }
  	        ]
  	      },
  	      {
  	        className: 'class',
  	        beginKeywords: 'class interface',
  	        end: /\{/,
  	        excludeEnd: true,
  	        illegal: /[:($"]/,
  	        contains: [
  	          { beginKeywords: 'extends implements' },
  	          TITLE_MODE
  	        ]
  	      },
  	      {
  	        beginKeywords: 'namespace',
  	        end: /;/,
  	        illegal: /[.']/,
  	        contains: [ TITLE_MODE ]
  	      },
  	      {
  	        beginKeywords: 'use',
  	        end: /;/,
  	        contains: [ TITLE_MODE ]
  	      },
  	      { begin: /=>/ // No markup, just a relevance booster
  	      },
  	      STRING,
  	      NUMBER
  	    ]
  	  };
  	}

  	zephir_1 = zephir;
  	return zephir_1;
  }

  var hljs = core;

  hljs.registerLanguage('1c', require_1c());
  hljs.registerLanguage('abnf', requireAbnf());
  hljs.registerLanguage('accesslog', requireAccesslog());
  hljs.registerLanguage('actionscript', requireActionscript());
  hljs.registerLanguage('ada', requireAda());
  hljs.registerLanguage('angelscript', requireAngelscript());
  hljs.registerLanguage('apache', requireApache());
  hljs.registerLanguage('applescript', requireApplescript());
  hljs.registerLanguage('arcade', requireArcade());
  hljs.registerLanguage('arduino', requireArduino());
  hljs.registerLanguage('armasm', requireArmasm());
  hljs.registerLanguage('xml', requireXml());
  hljs.registerLanguage('asciidoc', requireAsciidoc());
  hljs.registerLanguage('aspectj', requireAspectj());
  hljs.registerLanguage('autohotkey', requireAutohotkey());
  hljs.registerLanguage('autoit', requireAutoit());
  hljs.registerLanguage('avrasm', requireAvrasm());
  hljs.registerLanguage('awk', requireAwk());
  hljs.registerLanguage('axapta', requireAxapta());
  hljs.registerLanguage('bash', requireBash());
  hljs.registerLanguage('basic', requireBasic());
  hljs.registerLanguage('bnf', requireBnf());
  hljs.registerLanguage('brainfuck', requireBrainfuck());
  hljs.registerLanguage('c', requireC());
  hljs.registerLanguage('cal', requireCal());
  hljs.registerLanguage('capnproto', requireCapnproto());
  hljs.registerLanguage('ceylon', requireCeylon());
  hljs.registerLanguage('clean', requireClean());
  hljs.registerLanguage('clojure', requireClojure());
  hljs.registerLanguage('clojure-repl', requireClojureRepl());
  hljs.registerLanguage('cmake', requireCmake());
  hljs.registerLanguage('coffeescript', requireCoffeescript());
  hljs.registerLanguage('coq', requireCoq());
  hljs.registerLanguage('cos', requireCos());
  hljs.registerLanguage('cpp', requireCpp());
  hljs.registerLanguage('crmsh', requireCrmsh());
  hljs.registerLanguage('crystal', requireCrystal());
  hljs.registerLanguage('csharp', requireCsharp());
  hljs.registerLanguage('csp', requireCsp());
  hljs.registerLanguage('css', requireCss());
  hljs.registerLanguage('d', requireD());
  hljs.registerLanguage('markdown', requireMarkdown());
  hljs.registerLanguage('dart', requireDart());
  hljs.registerLanguage('delphi', requireDelphi());
  hljs.registerLanguage('diff', requireDiff());
  hljs.registerLanguage('django', requireDjango());
  hljs.registerLanguage('dns', requireDns());
  hljs.registerLanguage('dockerfile', requireDockerfile());
  hljs.registerLanguage('dos', requireDos());
  hljs.registerLanguage('dsconfig', requireDsconfig());
  hljs.registerLanguage('dts', requireDts());
  hljs.registerLanguage('dust', requireDust());
  hljs.registerLanguage('ebnf', requireEbnf());
  hljs.registerLanguage('elixir', requireElixir());
  hljs.registerLanguage('elm', requireElm());
  hljs.registerLanguage('ruby', requireRuby());
  hljs.registerLanguage('erb', requireErb());
  hljs.registerLanguage('erlang-repl', requireErlangRepl());
  hljs.registerLanguage('erlang', requireErlang());
  hljs.registerLanguage('excel', requireExcel());
  hljs.registerLanguage('fix', requireFix());
  hljs.registerLanguage('flix', requireFlix());
  hljs.registerLanguage('fortran', requireFortran());
  hljs.registerLanguage('fsharp', requireFsharp());
  hljs.registerLanguage('gams', requireGams());
  hljs.registerLanguage('gauss', requireGauss());
  hljs.registerLanguage('gcode', requireGcode());
  hljs.registerLanguage('gherkin', requireGherkin());
  hljs.registerLanguage('glsl', requireGlsl());
  hljs.registerLanguage('gml', requireGml());
  hljs.registerLanguage('go', requireGo());
  hljs.registerLanguage('golo', requireGolo());
  hljs.registerLanguage('gradle', requireGradle());
  hljs.registerLanguage('graphql', requireGraphql());
  hljs.registerLanguage('groovy', requireGroovy());
  hljs.registerLanguage('haml', requireHaml());
  hljs.registerLanguage('handlebars', requireHandlebars());
  hljs.registerLanguage('haskell', requireHaskell());
  hljs.registerLanguage('haxe', requireHaxe());
  hljs.registerLanguage('hsp', requireHsp());
  hljs.registerLanguage('http', requireHttp());
  hljs.registerLanguage('hy', requireHy());
  hljs.registerLanguage('inform7', requireInform7());
  hljs.registerLanguage('ini', requireIni());
  hljs.registerLanguage('irpf90', requireIrpf90());
  hljs.registerLanguage('isbl', requireIsbl());
  hljs.registerLanguage('java', requireJava());
  hljs.registerLanguage('javascript', requireJavascript());
  hljs.registerLanguage('jboss-cli', requireJbossCli());
  hljs.registerLanguage('json', requireJson());
  hljs.registerLanguage('julia', requireJulia());
  hljs.registerLanguage('julia-repl', requireJuliaRepl());
  hljs.registerLanguage('kotlin', requireKotlin());
  hljs.registerLanguage('lasso', requireLasso());
  hljs.registerLanguage('latex', requireLatex());
  hljs.registerLanguage('ldif', requireLdif());
  hljs.registerLanguage('leaf', requireLeaf());
  hljs.registerLanguage('less', requireLess());
  hljs.registerLanguage('lisp', requireLisp());
  hljs.registerLanguage('livecodeserver', requireLivecodeserver());
  hljs.registerLanguage('livescript', requireLivescript());
  hljs.registerLanguage('llvm', requireLlvm());
  hljs.registerLanguage('lsl', requireLsl());
  hljs.registerLanguage('lua', requireLua());
  hljs.registerLanguage('makefile', requireMakefile());
  hljs.registerLanguage('mathematica', requireMathematica());
  hljs.registerLanguage('matlab', requireMatlab());
  hljs.registerLanguage('maxima', requireMaxima());
  hljs.registerLanguage('mel', requireMel());
  hljs.registerLanguage('mercury', requireMercury());
  hljs.registerLanguage('mipsasm', requireMipsasm());
  hljs.registerLanguage('mizar', requireMizar());
  hljs.registerLanguage('perl', requirePerl());
  hljs.registerLanguage('mojolicious', requireMojolicious());
  hljs.registerLanguage('monkey', requireMonkey());
  hljs.registerLanguage('moonscript', requireMoonscript());
  hljs.registerLanguage('n1ql', requireN1ql());
  hljs.registerLanguage('nestedtext', requireNestedtext());
  hljs.registerLanguage('nginx', requireNginx());
  hljs.registerLanguage('nim', requireNim());
  hljs.registerLanguage('nix', requireNix());
  hljs.registerLanguage('node-repl', requireNodeRepl());
  hljs.registerLanguage('nsis', requireNsis());
  hljs.registerLanguage('objectivec', requireObjectivec());
  hljs.registerLanguage('ocaml', requireOcaml());
  hljs.registerLanguage('openscad', requireOpenscad());
  hljs.registerLanguage('oxygene', requireOxygene());
  hljs.registerLanguage('parser3', requireParser3());
  hljs.registerLanguage('pf', requirePf());
  hljs.registerLanguage('pgsql', requirePgsql());
  hljs.registerLanguage('php', requirePhp());
  hljs.registerLanguage('php-template', requirePhpTemplate());
  hljs.registerLanguage('plaintext', requirePlaintext());
  hljs.registerLanguage('pony', requirePony());
  hljs.registerLanguage('powershell', requirePowershell());
  hljs.registerLanguage('processing', requireProcessing());
  hljs.registerLanguage('profile', requireProfile());
  hljs.registerLanguage('prolog', requireProlog());
  hljs.registerLanguage('properties', requireProperties());
  hljs.registerLanguage('protobuf', requireProtobuf());
  hljs.registerLanguage('puppet', requirePuppet());
  hljs.registerLanguage('purebasic', requirePurebasic());
  hljs.registerLanguage('python', requirePython());
  hljs.registerLanguage('python-repl', requirePythonRepl());
  hljs.registerLanguage('q', requireQ());
  hljs.registerLanguage('qml', requireQml());
  hljs.registerLanguage('r', requireR());
  hljs.registerLanguage('reasonml', requireReasonml());
  hljs.registerLanguage('rib', requireRib());
  hljs.registerLanguage('roboconf', requireRoboconf());
  hljs.registerLanguage('routeros', requireRouteros());
  hljs.registerLanguage('rsl', requireRsl());
  hljs.registerLanguage('ruleslanguage', requireRuleslanguage());
  hljs.registerLanguage('rust', requireRust());
  hljs.registerLanguage('sas', requireSas());
  hljs.registerLanguage('scala', requireScala());
  hljs.registerLanguage('scheme', requireScheme());
  hljs.registerLanguage('scilab', requireScilab());
  hljs.registerLanguage('scss', requireScss());
  hljs.registerLanguage('shell', requireShell());
  hljs.registerLanguage('smali', requireSmali());
  hljs.registerLanguage('smalltalk', requireSmalltalk());
  hljs.registerLanguage('sml', requireSml());
  hljs.registerLanguage('sqf', requireSqf());
  hljs.registerLanguage('sql', requireSql());
  hljs.registerLanguage('stan', requireStan());
  hljs.registerLanguage('stata', requireStata());
  hljs.registerLanguage('step21', requireStep21());
  hljs.registerLanguage('stylus', requireStylus());
  hljs.registerLanguage('subunit', requireSubunit());
  hljs.registerLanguage('swift', requireSwift());
  hljs.registerLanguage('taggerscript', requireTaggerscript());
  hljs.registerLanguage('yaml', requireYaml());
  hljs.registerLanguage('tap', requireTap());
  hljs.registerLanguage('tcl', requireTcl());
  hljs.registerLanguage('thrift', requireThrift());
  hljs.registerLanguage('tp', requireTp());
  hljs.registerLanguage('twig', requireTwig());
  hljs.registerLanguage('typescript', requireTypescript());
  hljs.registerLanguage('vala', requireVala());
  hljs.registerLanguage('vbnet', requireVbnet());
  hljs.registerLanguage('vbscript', requireVbscript());
  hljs.registerLanguage('vbscript-html', requireVbscriptHtml());
  hljs.registerLanguage('verilog', requireVerilog());
  hljs.registerLanguage('vhdl', requireVhdl());
  hljs.registerLanguage('vim', requireVim());
  hljs.registerLanguage('wasm', requireWasm());
  hljs.registerLanguage('wren', requireWren());
  hljs.registerLanguage('x86asm', requireX86asm());
  hljs.registerLanguage('xl', requireXl());
  hljs.registerLanguage('xquery', requireXquery());
  hljs.registerLanguage('zephir', requireZephir());

  hljs.HighlightJS = hljs;
  hljs.default = hljs;
  var lib = hljs;

  var HighlightJS = /*@__PURE__*/getDefaultExportFromCjs(lib);

  // https://nodejs.org/api/packages.html#packages_writing_dual_packages_while_avoiding_or_minimizing_hazards

  function CodeEditor(Alpine) {

      Alpine.directive('code-editor', (el, {}, {cleanup}) => {

          const value = (el.getAttribute('value') ?? '').replace(/\\n/g, '\n');
          const readonly = el.hasAttribute('readonly');
          const disabled = el.hasAttribute('disabled');
          el.classList.add('language-' + el.getAttribute('lang'));

          Alpine.bind(el, {
              'u-modelable': 'value',
              'u-data'() {
                  return {
                      value: el.getAttribute('value')
                  }
              },
              'u-init'() {
                  console.log(HighlightJS.highlightElement);
                  const instance = CodeJar(el,HighlightJS.highlightElement, {
                      tab: '  ',
                      catchTab: false
                  });
                  if(value) {
                      instance.updateCode(value);
                  }

                  if(readonly) {
                      el.setAttribute('contenteditable','false');
                      el.setAttribute('tabindex','0');
                  }

                  if(disabled) {
                      el.setAttribute('contenteditable','false');
                  }

                  let thisValue = instance.toString();
                  instance.onUpdate(code => {
                      console.log('calling on update', code);
                      thisValue = code;
                      this.$data.value = code;
                  });

                  cleanup(() => {
                      instance.destroy();
                  });
                  
                  this.$watch('value', (value) => {

                      if(thisValue === value) return;

                      console.log('calling updateCode', value);
                      instance.updateCode(value);
                      

                  });        
              }
          });
          
      });
  }

  //tooltip using floating-ui
  function Tooltip(Alpine) {
    Alpine.directive("tooltip", (el) => {});
  }

  function Popover(Alpine) {
      Alpine.directive("popover", (el) => {});
    }

  const prefix = "u";

  function extract(allProps, names) {
    const restProps = { ...allProps };
    const result = names;

    Object.keys(names).map((key) => {
      if (typeof names[key] === "object") {
        result[key] = names[key];
        Object.keys(names[key]).map((key2) => {
          if (typeof allProps[key2] !== 'undefined') {
            result[key][key2] = allProps[key2];
            delete restProps[key2];
          }
          if (typeof allProps["$" + key2] !== 'undefined') {
            result[key]["$" + key2] = allProps["$" + key2];
            delete restProps["$" + key2];
          }
        });
      } else {
        if (typeof allProps[key] !== 'undefined') {
          result[key] = allProps[key];
          delete restProps[key];
        }
        if (typeof allProps["$" + key] !== 'undefined') {
          result["$" + key] = allProps["$" + key];
          delete restProps["$" + key];
        }
      }
    });

    result.restProps = restProps;

    return result;
  }

  function getPropsAndSlots(...params) {
    let $props = {};
    let $slots = [];

    if (typeof params[0] === "object" && !Array.isArray(params[0])) {
      $props = params[0];

      if (typeof params[1] !== "undefined") {
        if (Array.isArray(params[1])) {
          $slots = params[1];
        } else if (typeof params[1] === "function") {
          $slots = params[1];
        } else {
          $slots = [params[1]];
        }
      }

      return { $props, $slots };
    }

    if (Array.isArray(params[0])) {
      $slots = params[0];
    } else if (typeof params[1] === "function") {
      $slots = params[1];
    } else {
      $slots = [params[0]];
    }

    return { $props, $slots };
  }

  function classname(component, cssProps = {}, globalClasses = "") {
    let classes = [];

    if (component) {
      classes.push([prefix, paramCase(component)].join("-"));
    } else {
      classes.push(prefix);
    }

    function paramCase(str) {
      return str
        .split("")
        .map((char) => {
          if ((char >= "A") & (char <= "Z")) {
            return "-" + char.toLowerCase();
          }
          return char;
        })
        .join("");
    }

    Object.keys(cssProps).map((key) => {
      let value = cssProps[key];
      if (typeof value === "number" || typeof value === "string") {
        classes.push([prefix, component, paramCase(key), value].join("-"));
      }
      if (value === true) {
        classes.push([prefix, component, paramCase(key)].join("-"));
      }
    });

    classes.push(globalClasses);
    return classes.filter(Boolean).join(" ");
  }

  function Base({ render }) {
    return (...$) => {
      const { $props = {}, $slots = [] } = getPropsAndSlots(...$);

      let props = {};
      for (let key in $props) {
        if (typeof $props[key] !== "undefined") {
          props[key] = $props[key];
        }
      }

      return render(props, $slots);
    };
  }

  function renderScriptInternal(component) {
    if (Array.isArray(component)) {
      return component.map((x) => renderScriptInternal(x));
    }

    if (component && typeof component === "object") {
      return [
        {
          onMount: component.props.onMount,
          scriptName: component.props.scriptName,
          script: component.props.script,
        },
        renderScriptInternal(component.slots),
      ].flat(5);
    }
    return [];
  }

  function renderScripts(component) {
    if (typeof component !== "object") return;

    const scripts = renderScriptInternal(component);

    let result = "";
    let scriptsObject = scripts.reduce((prev, curr) => {
      return { ...prev, [curr.scriptName]: curr.onMount };
    }, {});

    result += Object.keys(scriptsObject)
      .map((key) => scriptsObject[key])
      .join("\n");

    result += scripts.map((script) => script.script).join("\n");

    return result;
  }

  function stringify(object) {
    if (object && typeof object === "object" || typeof object === "number") {
      return "'" + JSON.stringify(object) + "'";
    } else {
      return JSON.stringify(object);
    }
  }

  function renderAttributes({
    scriptName,
    scriptProps,
    onMount,
    script,
    ...object
  }) {
    let result = "";
    if (scriptName) {
      result += " " + scriptName + "=" + stringify(scriptProps ?? {});
    }

    for (let [key, value] of Object.entries(object)) {
      if (value === false || typeof value === "undefined" || value === null)
        continue;

      if (key === "htmlHead") {
        continue;
      }
      if (value === "") {
        result += " " + key;
      } else {
        result += " " + key + "=" + stringify(value);
      }
    }
    return result;
  }

  function renderSlots(slots) {
    return slots.map((slot) => renderTemplate(slot)).join("");
  }

  function renderTemplate(object) {
    if (typeof object === "undefined") return;
    if (Array.isArray(object))
      return object.map((item) => renderTemplate(item)).join("\n");
    if (object && typeof object === "object") {
      const { tag, slots, props } = object;

      if (!tag) return "";

      return (
        `<${tag}${renderAttributes(props)}>` + renderSlots(slots) + `</${tag}>`
      );
    }
    return object;
  }


  function renderHead(object) {
    if (typeof object === "undefined") return;
    if (Array.isArray(object))
      return object.map((item) => renderHead(item)).join("\n");
    if (object && typeof object === "object") {
      const { tag, slots, props } = object;

      return [props?.htmlHead ? renderTemplate(props.htmlHead) :"", ...slots?.map((slot) => renderHead(slot))]
        .join("\n")
        .trim();
    }
    return "";
  }

  // import { renderHead, renderScripts, renderTemplate } from "./index.js";
  function tag(tagName, props = {}, ...slots) {

    if(typeof tagName === 'object') {
      return tag(tagName.tag, tagName.props, tagName.slots)
    }
    
    return {
      tag: tagName,
      props,
      slots,
      toString() {
        return renderTemplate(this);
      },
      toHead() {
        return renderHead(this);
      },
      toScript() {
        return renderScripts(this);
      },
      toHtml() {
        return `<!DOCTYPE html>
<html>
  <head>
    ${this.toHead()}
  </head>
  <body>
    ${this.toString()}
    <script>
      ${this.toScript()}
    </script>
  </body>
</html>`
      }
    };
  }

  // Not implemented
  // border directions (only border bottom, ....)

        //* bgColor (primary, secondary, success, info, warning, danger, light, dark, base)
        //* textColor (primary, secondary, success, info, warning, danger, light, dark, base)
        //* borderRadius (xs, sm, md, lg, xl)
        //* borderColor (primary, secondary, success, info, warning, danger, light, dark)
        //* borderSize (xs, sm, md, lg, xl)

        //* align (start, center, end, baseline, stretch)
        //* alignSelf (start, center, end, baseline, stretch)
        //* justify (start, center, end, between, evenly, around)
        //* justifySelf (start, center, end, between, evenly, around)

  function escapeHTML(str) {
    if(typeof str === 'string') {

    return str
      .replace(/&/g, "&amp;")
      .replace(/</g, "&lt;")
      .replace(/>/g, "&gt;")
      .replace(/"/g, "&quot;")
      .replace(/'/g, "&#39;");
    }
    
  return str;
  }

  const View = Base({
    render($props, $slots) {
      const {
        component = "view",
        cssProps = {},
        m,
        p,
        mx,
        px,
        ms,
        ps,
        my,
        py,
        me,
        pe,
        mt,
        pt,
        mb,
        pb,
        w,
        h,
        d,
        dXs,
        dSm,
        dMd,
        dLg,
        dXl,
        gap,
        align,
        alignSelf,
        justify,
        justifySelf,
        flexDirection,
        flexDirectionXs,
        flexDirectionSm,
        flexDirectionMd,
        flexDirectionLg,
        flexDirectionXl,
        bgColor,
        textColor,
        borderSize,
        border,
        borderColor,
        borderRadius,
        wrap,
        ...restProps
      } = $props;

      let tagName = $props.tag ?? 'div';
      delete restProps['tag'];

      const viewCssProps = {
        m,
        p,
        mx,
        px,
        ms,
        ps,
        my,
        py,
        me,
        pe,
        mt,
        pt,
        mb,
        pb,
        w,
        h,
        d,
        dXs,
        dSm,
        dMd,
        dLg,
        dXl,
        gap,
        align,
        wrap,
        flexDirection,
        flexDirectionXs,
        flexDirectionSm,
        flexDirectionMd,
        flexDirectionLg,
        flexDirectionXl,
        alignSelf,
        justify,
        justifySelf,
        bgColor,
        textColor,
        borderSize,
        border,
        borderColor,
        borderRadius,
      };

      const cssAttributes = {};

      for (let prop in cssProps) {
        if (typeof cssProps[prop] !== "undefined") {
          if(prop.startsWith('$')) continue;
          if (cssProps[prop] === true) {
            cssAttributes[classname(component + "-" + prop)] = "";
          } else {
            cssAttributes[classname(component + "-" + prop)] = cssProps[prop];
          }
        }
        if (typeof cssProps['$' + prop] !== "undefined") {
          if (cssProps['$' + prop] === true) {
            cssAttributes[classname('bind') + ':' + classname(component + "-" + prop)] = "";
          } else {
            cssAttributes[classname('bind') + ':' + classname(component + "-" + prop)] = cssProps['$' + prop];
          }
        }
      }
      for (let prop in viewCssProps) {
        if (typeof viewCssProps[prop] !== "undefined") {
          if(prop.startsWith('$')) continue;
          if (viewCssProps[prop] === true) {
            cssAttributes[classname("view-" + prop)] = "";
          } else {
            cssAttributes[classname("view-" + prop)] = viewCssProps[prop];
          }
        }
        if (typeof $props['$' + prop] !== "undefined") {

          cssAttributes[classname('bind') + ':' + classname("view-" + prop)] = $props['$' + prop];
        }
        
      }

      const props = {
        [classname(component)]: component === "view" ? false : "",
        ...restProps,
        ...cssAttributes,
      };

      for (let key in props) {
        if (key.startsWith("on") && key[2] >= "A" && key[2] <= "Z") {
          let event = key.substring(2).toLocaleLowerCase();

          if (event === "init") {
            props["u-init"] = props[key];
          } else {
            props["u-on:" + event] = props[key];
          }

          delete props[key];
        } else if (key.startsWith("$")) {
          if (key === "$if") {
            const uif = $props[key];
            delete $props[key];
            return View({tag: 'template', 'u-if': uif}, View($props, $slots))
          } else if (key === "$text") {
            props["u-text"] = props[key];
            if(!$props.tag) tagName = 'span';
          } else if (key === "$show") {
            props["u-show"] = props[key];
          } else if (key === "$data") {
            props["u-data"] = props[key];
          } else if (key === "$html") {
            props["u-html"] = props[key];
          } else if (key === "$for") {
            const ufor = $props[key];
            delete $props[key];
            return View({tag: 'template', 'u-for': ufor}, View($props, $slots))
          } else if (key === "$model") {
            props["u-model.fill"] = props[key];
          } else {
            props[`u-bind:` + key.substring(1)] = props[key];
          }
          delete props[key];
        } else {
          if (props[key] === true) {
            props[key] = "";
          }
        }
      }
      for(let key in props) {
        props[key] = escapeHTML(props[key]);
      }

      return tag(tagName, props, $slots.filter(Boolean));
    },
  });

  const Icon = Base({
    render($props, slots) {
      const { props, restProps, cssProps } = extract($props, {
        props: {
          component: "icon",
          tag: "i",
          name: undefined,
        },
        cssProps: { size: "md", color: undefined },
      });

      return View({
        ...props,
        cssProps,
        ...restProps,
      });
    },
  });

  const Alert$1 = Base({
    render($props, $slots) {
      const {component, icon, title, dismissible, alertProps, iconProps, restProps, cssProps} = extract($props, {
        component: "alert",
        alertProps: {
          component: "alert",
          duration: 5000,
        },
        iconProps: {
          color: 'primary',
          icon: undefined
          // 
        },
        icon: undefined,
        title: undefined,
        dismissible: undefined,
        cssProps: {
          autoClose: false,
          open: true,
          color: "primary",
        },
      });

      iconProps.component = component + '-icon';
      iconProps.name = iconProps.icon;
      delete iconProps['icon'];


      return View({...alertProps, cssProps, ...restProps}, [
        View({ component: component + "-header" }, [
          icon ? Icon(iconProps) : [],
          View({ component: component + "-title" }, title ?? ""),
          
            dismissible ? View(
              { tag: "button", component: component + "-close" },
              Icon({ name: "x" })
            ) : [],
        ]),
        ($slots.toString() !== "" &&
          View({ component: component + "-content" }, $slots)) ||
          [],
      ]);
    },
  });

  function Alert(Alpine) {
      Alpine.directive('alert', (el) => {
          const isOpen = el.getAttribute('u-alert-open');       

          Alpine.bind(el, {
              'u-data'() {
                  return {
                      isOpen,
                  }
              },
              'u-bind:u-alert-open'() {
                  return this.$data.isOpen
              }
          });
          
      });
      Alpine.directive('alert-close', (el) => {
          Alpine.bind(el, {
              'u-on:click'() {
                  this.$data.isOpen = false;
              }
          });
      });

      Alpine.directive('alert-auto-close', (el) => {
          Alpine.bind(el, {
              'u-init'() {
                  setTimeout(() => {
                      this.$data.isOpen = false;
                  }, el.hasAttribute('duration') ? +el.getAttribute('duration') : 5000);
              }
          });
      });

      Alpine.magic('alert', (el) => {
          

          const alert = (name, {title, icon = 'check', dismissible = true, content = '', ...restProps}) => {
              let container = document.querySelector(`[u-alert-container][name="${name}"]`);

              // first container
              if(!name) container = document.querySelector('[u-alert-container]');

              const al = document.createElement('div');
              al.innerHTML = Alert$1({title, icon, dismissible, ...restProps}, content);

              setTimeout(() => {
                  container.appendChild(al);
              }, 100);
          };

          alert.success = (message, title = 'Success') => alert(undefined, {content: message, type: 'success', title, icon: 'check'});
          alert.info = (message, title = 'Info') => alert(undefined, {content: message, type: 'info', title, icon: 'info-circle'});
          alert.warning = (message, title = 'Warning') => alert(undefined, {content: message, type: 'warning', title, icon: 'info-triangle'});
          alert.error = (message, title = 'Error') => alert(undefined, {content: message, type: 'error', title, icon: 'alert-triangle'});
          
          return alert
      });
  }

  function Switch(Alpine) {
    Alpine.directive("switch-input", (el) => {
      Alpine.bind(el, {
        "u-init"() {
          this.$data.name = el.getAttribute("name");
        },
        "u-on:change"(e) {
          this.$data[el.getAttribute("name")] = e.target.checked;
        },
      });
    });
  }

  var quill = {exports: {}};

  /*!
   * Quill Editor v1.3.7
   * https://quilljs.com/
   * Copyright (c) 2014, Jason Chen
   * Copyright (c) 2013, salesforce.com
   */

  (function (module, exports) {
  	(function webpackUniversalModuleDefinition(root, factory) {
  		module.exports = factory();
  	})(typeof self !== 'undefined' ? self : commonjsGlobal, function() {
  	return /******/ (function(modules) { // webpackBootstrap
  	/******/ 	// The module cache
  	/******/ 	var installedModules = {};
  	/******/
  	/******/ 	// The require function
  	/******/ 	function __webpack_require__(moduleId) {
  	/******/
  	/******/ 		// Check if module is in cache
  	/******/ 		if(installedModules[moduleId]) {
  	/******/ 			return installedModules[moduleId].exports;
  	/******/ 		}
  	/******/ 		// Create a new module (and put it into the cache)
  	/******/ 		var module = installedModules[moduleId] = {
  	/******/ 			i: moduleId,
  	/******/ 			l: false,
  	/******/ 			exports: {}
  	/******/ 		};
  	/******/
  	/******/ 		// Execute the module function
  	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
  	/******/
  	/******/ 		// Flag the module as loaded
  	/******/ 		module.l = true;
  	/******/
  	/******/ 		// Return the exports of the module
  	/******/ 		return module.exports;
  	/******/ 	}
  	/******/
  	/******/
  	/******/ 	// expose the modules object (__webpack_modules__)
  	/******/ 	__webpack_require__.m = modules;
  	/******/
  	/******/ 	// expose the module cache
  	/******/ 	__webpack_require__.c = installedModules;
  	/******/
  	/******/ 	// define getter function for harmony exports
  	/******/ 	__webpack_require__.d = function(exports, name, getter) {
  	/******/ 		if(!__webpack_require__.o(exports, name)) {
  	/******/ 			Object.defineProperty(exports, name, {
  	/******/ 				configurable: false,
  	/******/ 				enumerable: true,
  	/******/ 				get: getter
  	/******/ 			});
  	/******/ 		}
  	/******/ 	};
  	/******/
  	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
  	/******/ 	__webpack_require__.n = function(module) {
  	/******/ 		var getter = module && module.__esModule ?
  	/******/ 			function getDefault() { return module['default']; } :
  	/******/ 			function getModuleExports() { return module; };
  	/******/ 		__webpack_require__.d(getter, 'a', getter);
  	/******/ 		return getter;
  	/******/ 	};
  	/******/
  	/******/ 	// Object.prototype.hasOwnProperty.call
  	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
  	/******/
  	/******/ 	// __webpack_public_path__
  	/******/ 	__webpack_require__.p = "";
  	/******/
  	/******/ 	// Load entry module and return exports
  	/******/ 	return __webpack_require__(__webpack_require__.s = 109);
  	/******/ })
  	/************************************************************************/
  	/******/ ([
  	/* 0 */
  	/***/ (function(module, exports, __webpack_require__) {

  	Object.defineProperty(exports, "__esModule", { value: true });
  	var container_1 = __webpack_require__(17);
  	var format_1 = __webpack_require__(18);
  	var leaf_1 = __webpack_require__(19);
  	var scroll_1 = __webpack_require__(45);
  	var inline_1 = __webpack_require__(46);
  	var block_1 = __webpack_require__(47);
  	var embed_1 = __webpack_require__(48);
  	var text_1 = __webpack_require__(49);
  	var attributor_1 = __webpack_require__(12);
  	var class_1 = __webpack_require__(32);
  	var style_1 = __webpack_require__(33);
  	var store_1 = __webpack_require__(31);
  	var Registry = __webpack_require__(1);
  	var Parchment = {
  	    Scope: Registry.Scope,
  	    create: Registry.create,
  	    find: Registry.find,
  	    query: Registry.query,
  	    register: Registry.register,
  	    Container: container_1.default,
  	    Format: format_1.default,
  	    Leaf: leaf_1.default,
  	    Embed: embed_1.default,
  	    Scroll: scroll_1.default,
  	    Block: block_1.default,
  	    Inline: inline_1.default,
  	    Text: text_1.default,
  	    Attributor: {
  	        Attribute: attributor_1.default,
  	        Class: class_1.default,
  	        Style: style_1.default,
  	        Store: store_1.default,
  	    },
  	};
  	exports.default = Parchment;


  	/***/ }),
  	/* 1 */
  	/***/ (function(module, exports, __webpack_require__) {

  	var __extends = (this && this.__extends) || (function () {
  	    var extendStatics = Object.setPrototypeOf ||
  	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
  	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
  	    return function (d, b) {
  	        extendStatics(d, b);
  	        function __() { this.constructor = d; }
  	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  	    };
  	})();
  	Object.defineProperty(exports, "__esModule", { value: true });
  	var ParchmentError = /** @class */ (function (_super) {
  	    __extends(ParchmentError, _super);
  	    function ParchmentError(message) {
  	        var _this = this;
  	        message = '[Parchment] ' + message;
  	        _this = _super.call(this, message) || this;
  	        _this.message = message;
  	        _this.name = _this.constructor.name;
  	        return _this;
  	    }
  	    return ParchmentError;
  	}(Error));
  	exports.ParchmentError = ParchmentError;
  	var attributes = {};
  	var classes = {};
  	var tags = {};
  	var types = {};
  	exports.DATA_KEY = '__blot';
  	var Scope;
  	(function (Scope) {
  	    Scope[Scope["TYPE"] = 3] = "TYPE";
  	    Scope[Scope["LEVEL"] = 12] = "LEVEL";
  	    Scope[Scope["ATTRIBUTE"] = 13] = "ATTRIBUTE";
  	    Scope[Scope["BLOT"] = 14] = "BLOT";
  	    Scope[Scope["INLINE"] = 7] = "INLINE";
  	    Scope[Scope["BLOCK"] = 11] = "BLOCK";
  	    Scope[Scope["BLOCK_BLOT"] = 10] = "BLOCK_BLOT";
  	    Scope[Scope["INLINE_BLOT"] = 6] = "INLINE_BLOT";
  	    Scope[Scope["BLOCK_ATTRIBUTE"] = 9] = "BLOCK_ATTRIBUTE";
  	    Scope[Scope["INLINE_ATTRIBUTE"] = 5] = "INLINE_ATTRIBUTE";
  	    Scope[Scope["ANY"] = 15] = "ANY";
  	})(Scope = exports.Scope || (exports.Scope = {}));
  	function create(input, value) {
  	    var match = query(input);
  	    if (match == null) {
  	        throw new ParchmentError("Unable to create " + input + " blot");
  	    }
  	    var BlotClass = match;
  	    var node = 
  	    // @ts-ignore
  	    input instanceof Node || input['nodeType'] === Node.TEXT_NODE ? input : BlotClass.create(value);
  	    return new BlotClass(node, value);
  	}
  	exports.create = create;
  	function find(node, bubble) {
  	    if (bubble === void 0) { bubble = false; }
  	    if (node == null)
  	        return null;
  	    // @ts-ignore
  	    if (node[exports.DATA_KEY] != null)
  	        return node[exports.DATA_KEY].blot;
  	    if (bubble)
  	        return find(node.parentNode, bubble);
  	    return null;
  	}
  	exports.find = find;
  	function query(query, scope) {
  	    if (scope === void 0) { scope = Scope.ANY; }
  	    var match;
  	    if (typeof query === 'string') {
  	        match = types[query] || attributes[query];
  	        // @ts-ignore
  	    }
  	    else if (query instanceof Text || query['nodeType'] === Node.TEXT_NODE) {
  	        match = types['text'];
  	    }
  	    else if (typeof query === 'number') {
  	        if (query & Scope.LEVEL & Scope.BLOCK) {
  	            match = types['block'];
  	        }
  	        else if (query & Scope.LEVEL & Scope.INLINE) {
  	            match = types['inline'];
  	        }
  	    }
  	    else if (query instanceof HTMLElement) {
  	        var names = (query.getAttribute('class') || '').split(/\s+/);
  	        for (var i in names) {
  	            match = classes[names[i]];
  	            if (match)
  	                break;
  	        }
  	        match = match || tags[query.tagName];
  	    }
  	    if (match == null)
  	        return null;
  	    // @ts-ignore
  	    if (scope & Scope.LEVEL & match.scope && scope & Scope.TYPE & match.scope)
  	        return match;
  	    return null;
  	}
  	exports.query = query;
  	function register() {
  	    var Definitions = [];
  	    for (var _i = 0; _i < arguments.length; _i++) {
  	        Definitions[_i] = arguments[_i];
  	    }
  	    if (Definitions.length > 1) {
  	        return Definitions.map(function (d) {
  	            return register(d);
  	        });
  	    }
  	    var Definition = Definitions[0];
  	    if (typeof Definition.blotName !== 'string' && typeof Definition.attrName !== 'string') {
  	        throw new ParchmentError('Invalid definition');
  	    }
  	    else if (Definition.blotName === 'abstract') {
  	        throw new ParchmentError('Cannot register abstract class');
  	    }
  	    types[Definition.blotName || Definition.attrName] = Definition;
  	    if (typeof Definition.keyName === 'string') {
  	        attributes[Definition.keyName] = Definition;
  	    }
  	    else {
  	        if (Definition.className != null) {
  	            classes[Definition.className] = Definition;
  	        }
  	        if (Definition.tagName != null) {
  	            if (Array.isArray(Definition.tagName)) {
  	                Definition.tagName = Definition.tagName.map(function (tagName) {
  	                    return tagName.toUpperCase();
  	                });
  	            }
  	            else {
  	                Definition.tagName = Definition.tagName.toUpperCase();
  	            }
  	            var tagNames = Array.isArray(Definition.tagName) ? Definition.tagName : [Definition.tagName];
  	            tagNames.forEach(function (tag) {
  	                if (tags[tag] == null || Definition.className == null) {
  	                    tags[tag] = Definition;
  	                }
  	            });
  	        }
  	    }
  	    return Definition;
  	}
  	exports.register = register;


  	/***/ }),
  	/* 2 */
  	/***/ (function(module, exports, __webpack_require__) {

  	var diff = __webpack_require__(51);
  	var equal = __webpack_require__(11);
  	var extend = __webpack_require__(3);
  	var op = __webpack_require__(20);


  	var NULL_CHARACTER = String.fromCharCode(0);  // Placeholder char for embed in diff()


  	var Delta = function (ops) {
  	  // Assume we are given a well formed ops
  	  if (Array.isArray(ops)) {
  	    this.ops = ops;
  	  } else if (ops != null && Array.isArray(ops.ops)) {
  	    this.ops = ops.ops;
  	  } else {
  	    this.ops = [];
  	  }
  	};


  	Delta.prototype.insert = function (text, attributes) {
  	  var newOp = {};
  	  if (text.length === 0) return this;
  	  newOp.insert = text;
  	  if (attributes != null && typeof attributes === 'object' && Object.keys(attributes).length > 0) {
  	    newOp.attributes = attributes;
  	  }
  	  return this.push(newOp);
  	};

  	Delta.prototype['delete'] = function (length) {
  	  if (length <= 0) return this;
  	  return this.push({ 'delete': length });
  	};

  	Delta.prototype.retain = function (length, attributes) {
  	  if (length <= 0) return this;
  	  var newOp = { retain: length };
  	  if (attributes != null && typeof attributes === 'object' && Object.keys(attributes).length > 0) {
  	    newOp.attributes = attributes;
  	  }
  	  return this.push(newOp);
  	};

  	Delta.prototype.push = function (newOp) {
  	  var index = this.ops.length;
  	  var lastOp = this.ops[index - 1];
  	  newOp = extend(true, {}, newOp);
  	  if (typeof lastOp === 'object') {
  	    if (typeof newOp['delete'] === 'number' && typeof lastOp['delete'] === 'number') {
  	      this.ops[index - 1] = { 'delete': lastOp['delete'] + newOp['delete'] };
  	      return this;
  	    }
  	    // Since it does not matter if we insert before or after deleting at the same index,
  	    // always prefer to insert first
  	    if (typeof lastOp['delete'] === 'number' && newOp.insert != null) {
  	      index -= 1;
  	      lastOp = this.ops[index - 1];
  	      if (typeof lastOp !== 'object') {
  	        this.ops.unshift(newOp);
  	        return this;
  	      }
  	    }
  	    if (equal(newOp.attributes, lastOp.attributes)) {
  	      if (typeof newOp.insert === 'string' && typeof lastOp.insert === 'string') {
  	        this.ops[index - 1] = { insert: lastOp.insert + newOp.insert };
  	        if (typeof newOp.attributes === 'object') this.ops[index - 1].attributes = newOp.attributes;
  	        return this;
  	      } else if (typeof newOp.retain === 'number' && typeof lastOp.retain === 'number') {
  	        this.ops[index - 1] = { retain: lastOp.retain + newOp.retain };
  	        if (typeof newOp.attributes === 'object') this.ops[index - 1].attributes = newOp.attributes;
  	        return this;
  	      }
  	    }
  	  }
  	  if (index === this.ops.length) {
  	    this.ops.push(newOp);
  	  } else {
  	    this.ops.splice(index, 0, newOp);
  	  }
  	  return this;
  	};

  	Delta.prototype.chop = function () {
  	  var lastOp = this.ops[this.ops.length - 1];
  	  if (lastOp && lastOp.retain && !lastOp.attributes) {
  	    this.ops.pop();
  	  }
  	  return this;
  	};

  	Delta.prototype.filter = function (predicate) {
  	  return this.ops.filter(predicate);
  	};

  	Delta.prototype.forEach = function (predicate) {
  	  this.ops.forEach(predicate);
  	};

  	Delta.prototype.map = function (predicate) {
  	  return this.ops.map(predicate);
  	};

  	Delta.prototype.partition = function (predicate) {
  	  var passed = [], failed = [];
  	  this.forEach(function(op) {
  	    var target = predicate(op) ? passed : failed;
  	    target.push(op);
  	  });
  	  return [passed, failed];
  	};

  	Delta.prototype.reduce = function (predicate, initial) {
  	  return this.ops.reduce(predicate, initial);
  	};

  	Delta.prototype.changeLength = function () {
  	  return this.reduce(function (length, elem) {
  	    if (elem.insert) {
  	      return length + op.length(elem);
  	    } else if (elem.delete) {
  	      return length - elem.delete;
  	    }
  	    return length;
  	  }, 0);
  	};

  	Delta.prototype.length = function () {
  	  return this.reduce(function (length, elem) {
  	    return length + op.length(elem);
  	  }, 0);
  	};

  	Delta.prototype.slice = function (start, end) {
  	  start = start || 0;
  	  if (typeof end !== 'number') end = Infinity;
  	  var ops = [];
  	  var iter = op.iterator(this.ops);
  	  var index = 0;
  	  while (index < end && iter.hasNext()) {
  	    var nextOp;
  	    if (index < start) {
  	      nextOp = iter.next(start - index);
  	    } else {
  	      nextOp = iter.next(end - index);
  	      ops.push(nextOp);
  	    }
  	    index += op.length(nextOp);
  	  }
  	  return new Delta(ops);
  	};


  	Delta.prototype.compose = function (other) {
  	  var thisIter = op.iterator(this.ops);
  	  var otherIter = op.iterator(other.ops);
  	  var ops = [];
  	  var firstOther = otherIter.peek();
  	  if (firstOther != null && typeof firstOther.retain === 'number' && firstOther.attributes == null) {
  	    var firstLeft = firstOther.retain;
  	    while (thisIter.peekType() === 'insert' && thisIter.peekLength() <= firstLeft) {
  	      firstLeft -= thisIter.peekLength();
  	      ops.push(thisIter.next());
  	    }
  	    if (firstOther.retain - firstLeft > 0) {
  	      otherIter.next(firstOther.retain - firstLeft);
  	    }
  	  }
  	  var delta = new Delta(ops);
  	  while (thisIter.hasNext() || otherIter.hasNext()) {
  	    if (otherIter.peekType() === 'insert') {
  	      delta.push(otherIter.next());
  	    } else if (thisIter.peekType() === 'delete') {
  	      delta.push(thisIter.next());
  	    } else {
  	      var length = Math.min(thisIter.peekLength(), otherIter.peekLength());
  	      var thisOp = thisIter.next(length);
  	      var otherOp = otherIter.next(length);
  	      if (typeof otherOp.retain === 'number') {
  	        var newOp = {};
  	        if (typeof thisOp.retain === 'number') {
  	          newOp.retain = length;
  	        } else {
  	          newOp.insert = thisOp.insert;
  	        }
  	        // Preserve null when composing with a retain, otherwise remove it for inserts
  	        var attributes = op.attributes.compose(thisOp.attributes, otherOp.attributes, typeof thisOp.retain === 'number');
  	        if (attributes) newOp.attributes = attributes;
  	        delta.push(newOp);

  	        // Optimization if rest of other is just retain
  	        if (!otherIter.hasNext() && equal(delta.ops[delta.ops.length - 1], newOp)) {
  	          var rest = new Delta(thisIter.rest());
  	          return delta.concat(rest).chop();
  	        }

  	      // Other op should be delete, we could be an insert or retain
  	      // Insert + delete cancels out
  	      } else if (typeof otherOp['delete'] === 'number' && typeof thisOp.retain === 'number') {
  	        delta.push(otherOp);
  	      }
  	    }
  	  }
  	  return delta.chop();
  	};

  	Delta.prototype.concat = function (other) {
  	  var delta = new Delta(this.ops.slice());
  	  if (other.ops.length > 0) {
  	    delta.push(other.ops[0]);
  	    delta.ops = delta.ops.concat(other.ops.slice(1));
  	  }
  	  return delta;
  	};

  	Delta.prototype.diff = function (other, index) {
  	  if (this.ops === other.ops) {
  	    return new Delta();
  	  }
  	  var strings = [this, other].map(function (delta) {
  	    return delta.map(function (op) {
  	      if (op.insert != null) {
  	        return typeof op.insert === 'string' ? op.insert : NULL_CHARACTER;
  	      }
  	      var prep = (delta === other) ? 'on' : 'with';
  	      throw new Error('diff() called ' + prep + ' non-document');
  	    }).join('');
  	  });
  	  var delta = new Delta();
  	  var diffResult = diff(strings[0], strings[1], index);
  	  var thisIter = op.iterator(this.ops);
  	  var otherIter = op.iterator(other.ops);
  	  diffResult.forEach(function (component) {
  	    var length = component[1].length;
  	    while (length > 0) {
  	      var opLength = 0;
  	      switch (component[0]) {
  	        case diff.INSERT:
  	          opLength = Math.min(otherIter.peekLength(), length);
  	          delta.push(otherIter.next(opLength));
  	          break;
  	        case diff.DELETE:
  	          opLength = Math.min(length, thisIter.peekLength());
  	          thisIter.next(opLength);
  	          delta['delete'](opLength);
  	          break;
  	        case diff.EQUAL:
  	          opLength = Math.min(thisIter.peekLength(), otherIter.peekLength(), length);
  	          var thisOp = thisIter.next(opLength);
  	          var otherOp = otherIter.next(opLength);
  	          if (equal(thisOp.insert, otherOp.insert)) {
  	            delta.retain(opLength, op.attributes.diff(thisOp.attributes, otherOp.attributes));
  	          } else {
  	            delta.push(otherOp)['delete'](opLength);
  	          }
  	          break;
  	      }
  	      length -= opLength;
  	    }
  	  });
  	  return delta.chop();
  	};

  	Delta.prototype.eachLine = function (predicate, newline) {
  	  newline = newline || '\n';
  	  var iter = op.iterator(this.ops);
  	  var line = new Delta();
  	  var i = 0;
  	  while (iter.hasNext()) {
  	    if (iter.peekType() !== 'insert') return;
  	    var thisOp = iter.peek();
  	    var start = op.length(thisOp) - iter.peekLength();
  	    var index = typeof thisOp.insert === 'string' ?
  	      thisOp.insert.indexOf(newline, start) - start : -1;
  	    if (index < 0) {
  	      line.push(iter.next());
  	    } else if (index > 0) {
  	      line.push(iter.next(index));
  	    } else {
  	      if (predicate(line, iter.next(1).attributes || {}, i) === false) {
  	        return;
  	      }
  	      i += 1;
  	      line = new Delta();
  	    }
  	  }
  	  if (line.length() > 0) {
  	    predicate(line, {}, i);
  	  }
  	};

  	Delta.prototype.transform = function (other, priority) {
  	  priority = !!priority;
  	  if (typeof other === 'number') {
  	    return this.transformPosition(other, priority);
  	  }
  	  var thisIter = op.iterator(this.ops);
  	  var otherIter = op.iterator(other.ops);
  	  var delta = new Delta();
  	  while (thisIter.hasNext() || otherIter.hasNext()) {
  	    if (thisIter.peekType() === 'insert' && (priority || otherIter.peekType() !== 'insert')) {
  	      delta.retain(op.length(thisIter.next()));
  	    } else if (otherIter.peekType() === 'insert') {
  	      delta.push(otherIter.next());
  	    } else {
  	      var length = Math.min(thisIter.peekLength(), otherIter.peekLength());
  	      var thisOp = thisIter.next(length);
  	      var otherOp = otherIter.next(length);
  	      if (thisOp['delete']) {
  	        // Our delete either makes their delete redundant or removes their retain
  	        continue;
  	      } else if (otherOp['delete']) {
  	        delta.push(otherOp);
  	      } else {
  	        // We retain either their retain or insert
  	        delta.retain(length, op.attributes.transform(thisOp.attributes, otherOp.attributes, priority));
  	      }
  	    }
  	  }
  	  return delta.chop();
  	};

  	Delta.prototype.transformPosition = function (index, priority) {
  	  priority = !!priority;
  	  var thisIter = op.iterator(this.ops);
  	  var offset = 0;
  	  while (thisIter.hasNext() && offset <= index) {
  	    var length = thisIter.peekLength();
  	    var nextType = thisIter.peekType();
  	    thisIter.next();
  	    if (nextType === 'delete') {
  	      index -= Math.min(length, index - offset);
  	      continue;
  	    } else if (nextType === 'insert' && (offset < index || !priority)) {
  	      index += length;
  	    }
  	    offset += length;
  	  }
  	  return index;
  	};


  	module.exports = Delta;


  	/***/ }),
  	/* 3 */
  	/***/ (function(module, exports) {

  	var hasOwn = Object.prototype.hasOwnProperty;
  	var toStr = Object.prototype.toString;
  	var defineProperty = Object.defineProperty;
  	var gOPD = Object.getOwnPropertyDescriptor;

  	var isArray = function isArray(arr) {
  		if (typeof Array.isArray === 'function') {
  			return Array.isArray(arr);
  		}

  		return toStr.call(arr) === '[object Array]';
  	};

  	var isPlainObject = function isPlainObject(obj) {
  		if (!obj || toStr.call(obj) !== '[object Object]') {
  			return false;
  		}

  		var hasOwnConstructor = hasOwn.call(obj, 'constructor');
  		var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
  		// Not own constructor property must be Object
  		if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
  			return false;
  		}

  		// Own properties are enumerated firstly, so to speed up,
  		// if last one is own, then all properties are own.
  		var key;
  		for (key in obj) { /**/ }

  		return typeof key === 'undefined' || hasOwn.call(obj, key);
  	};

  	// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target
  	var setProperty = function setProperty(target, options) {
  		if (defineProperty && options.name === '__proto__') {
  			defineProperty(target, options.name, {
  				enumerable: true,
  				configurable: true,
  				value: options.newValue,
  				writable: true
  			});
  		} else {
  			target[options.name] = options.newValue;
  		}
  	};

  	// Return undefined instead of __proto__ if '__proto__' is not an own property
  	var getProperty = function getProperty(obj, name) {
  		if (name === '__proto__') {
  			if (!hasOwn.call(obj, name)) {
  				return void 0;
  			} else if (gOPD) {
  				// In early versions of node, obj['__proto__'] is buggy when obj has
  				// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.
  				return gOPD(obj, name).value;
  			}
  		}

  		return obj[name];
  	};

  	module.exports = function extend() {
  		var options, name, src, copy, copyIsArray, clone;
  		var target = arguments[0];
  		var i = 1;
  		var length = arguments.length;
  		var deep = false;

  		// Handle a deep copy situation
  		if (typeof target === 'boolean') {
  			deep = target;
  			target = arguments[1] || {};
  			// skip the boolean and the target
  			i = 2;
  		}
  		if (target == null || (typeof target !== 'object' && typeof target !== 'function')) {
  			target = {};
  		}

  		for (; i < length; ++i) {
  			options = arguments[i];
  			// Only deal with non-null/undefined values
  			if (options != null) {
  				// Extend the base object
  				for (name in options) {
  					src = getProperty(target, name);
  					copy = getProperty(options, name);

  					// Prevent never-ending loop
  					if (target !== copy) {
  						// Recurse if we're merging plain objects or arrays
  						if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
  							if (copyIsArray) {
  								copyIsArray = false;
  								clone = src && isArray(src) ? src : [];
  							} else {
  								clone = src && isPlainObject(src) ? src : {};
  							}

  							// Never move original objects, clone them
  							setProperty(target, { name: name, newValue: extend(deep, clone, copy) });

  						// Don't bring in undefined values
  						} else if (typeof copy !== 'undefined') {
  							setProperty(target, { name: name, newValue: copy });
  						}
  					}
  				}
  			}
  		}

  		// Return the modified object
  		return target;
  	};


  	/***/ }),
  	/* 4 */
  	/***/ (function(module, exports, __webpack_require__) {


  	Object.defineProperty(exports, "__esModule", {
  	  value: true
  	});
  	exports.default = exports.BlockEmbed = exports.bubbleFormats = undefined;

  	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  	var _extend = __webpack_require__(3);

  	var _extend2 = _interopRequireDefault(_extend);

  	var _quillDelta = __webpack_require__(2);

  	var _quillDelta2 = _interopRequireDefault(_quillDelta);

  	var _parchment = __webpack_require__(0);

  	var _parchment2 = _interopRequireDefault(_parchment);

  	var _break = __webpack_require__(16);

  	var _break2 = _interopRequireDefault(_break);

  	var _inline = __webpack_require__(6);

  	var _inline2 = _interopRequireDefault(_inline);

  	var _text = __webpack_require__(7);

  	var _text2 = _interopRequireDefault(_text);

  	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  	var NEWLINE_LENGTH = 1;

  	var BlockEmbed = function (_Parchment$Embed) {
  	  _inherits(BlockEmbed, _Parchment$Embed);

  	  function BlockEmbed() {
  	    _classCallCheck(this, BlockEmbed);

  	    return _possibleConstructorReturn(this, (BlockEmbed.__proto__ || Object.getPrototypeOf(BlockEmbed)).apply(this, arguments));
  	  }

  	  _createClass(BlockEmbed, [{
  	    key: 'attach',
  	    value: function attach() {
  	      _get(BlockEmbed.prototype.__proto__ || Object.getPrototypeOf(BlockEmbed.prototype), 'attach', this).call(this);
  	      this.attributes = new _parchment2.default.Attributor.Store(this.domNode);
  	    }
  	  }, {
  	    key: 'delta',
  	    value: function delta() {
  	      return new _quillDelta2.default().insert(this.value(), (0, _extend2.default)(this.formats(), this.attributes.values()));
  	    }
  	  }, {
  	    key: 'format',
  	    value: function format(name, value) {
  	      var attribute = _parchment2.default.query(name, _parchment2.default.Scope.BLOCK_ATTRIBUTE);
  	      if (attribute != null) {
  	        this.attributes.attribute(attribute, value);
  	      }
  	    }
  	  }, {
  	    key: 'formatAt',
  	    value: function formatAt(index, length, name, value) {
  	      this.format(name, value);
  	    }
  	  }, {
  	    key: 'insertAt',
  	    value: function insertAt(index, value, def) {
  	      if (typeof value === 'string' && value.endsWith('\n')) {
  	        var block = _parchment2.default.create(Block.blotName);
  	        this.parent.insertBefore(block, index === 0 ? this : this.next);
  	        block.insertAt(0, value.slice(0, -1));
  	      } else {
  	        _get(BlockEmbed.prototype.__proto__ || Object.getPrototypeOf(BlockEmbed.prototype), 'insertAt', this).call(this, index, value, def);
  	      }
  	    }
  	  }]);

  	  return BlockEmbed;
  	}(_parchment2.default.Embed);

  	BlockEmbed.scope = _parchment2.default.Scope.BLOCK_BLOT;
  	// It is important for cursor behavior BlockEmbeds use tags that are block level elements


  	var Block = function (_Parchment$Block) {
  	  _inherits(Block, _Parchment$Block);

  	  function Block(domNode) {
  	    _classCallCheck(this, Block);

  	    var _this2 = _possibleConstructorReturn(this, (Block.__proto__ || Object.getPrototypeOf(Block)).call(this, domNode));

  	    _this2.cache = {};
  	    return _this2;
  	  }

  	  _createClass(Block, [{
  	    key: 'delta',
  	    value: function delta() {
  	      if (this.cache.delta == null) {
  	        this.cache.delta = this.descendants(_parchment2.default.Leaf).reduce(function (delta, leaf) {
  	          if (leaf.length() === 0) {
  	            return delta;
  	          } else {
  	            return delta.insert(leaf.value(), bubbleFormats(leaf));
  	          }
  	        }, new _quillDelta2.default()).insert('\n', bubbleFormats(this));
  	      }
  	      return this.cache.delta;
  	    }
  	  }, {
  	    key: 'deleteAt',
  	    value: function deleteAt(index, length) {
  	      _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'deleteAt', this).call(this, index, length);
  	      this.cache = {};
  	    }
  	  }, {
  	    key: 'formatAt',
  	    value: function formatAt(index, length, name, value) {
  	      if (length <= 0) return;
  	      if (_parchment2.default.query(name, _parchment2.default.Scope.BLOCK)) {
  	        if (index + length === this.length()) {
  	          this.format(name, value);
  	        }
  	      } else {
  	        _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'formatAt', this).call(this, index, Math.min(length, this.length() - index - 1), name, value);
  	      }
  	      this.cache = {};
  	    }
  	  }, {
  	    key: 'insertAt',
  	    value: function insertAt(index, value, def) {
  	      if (def != null) return _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'insertAt', this).call(this, index, value, def);
  	      if (value.length === 0) return;
  	      var lines = value.split('\n');
  	      var text = lines.shift();
  	      if (text.length > 0) {
  	        if (index < this.length() - 1 || this.children.tail == null) {
  	          _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'insertAt', this).call(this, Math.min(index, this.length() - 1), text);
  	        } else {
  	          this.children.tail.insertAt(this.children.tail.length(), text);
  	        }
  	        this.cache = {};
  	      }
  	      var block = this;
  	      lines.reduce(function (index, line) {
  	        block = block.split(index, true);
  	        block.insertAt(0, line);
  	        return line.length;
  	      }, index + text.length);
  	    }
  	  }, {
  	    key: 'insertBefore',
  	    value: function insertBefore(blot, ref) {
  	      var head = this.children.head;
  	      _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'insertBefore', this).call(this, blot, ref);
  	      if (head instanceof _break2.default) {
  	        head.remove();
  	      }
  	      this.cache = {};
  	    }
  	  }, {
  	    key: 'length',
  	    value: function length() {
  	      if (this.cache.length == null) {
  	        this.cache.length = _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'length', this).call(this) + NEWLINE_LENGTH;
  	      }
  	      return this.cache.length;
  	    }
  	  }, {
  	    key: 'moveChildren',
  	    value: function moveChildren(target, ref) {
  	      _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'moveChildren', this).call(this, target, ref);
  	      this.cache = {};
  	    }
  	  }, {
  	    key: 'optimize',
  	    value: function optimize(context) {
  	      _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'optimize', this).call(this, context);
  	      this.cache = {};
  	    }
  	  }, {
  	    key: 'path',
  	    value: function path(index) {
  	      return _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'path', this).call(this, index, true);
  	    }
  	  }, {
  	    key: 'removeChild',
  	    value: function removeChild(child) {
  	      _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'removeChild', this).call(this, child);
  	      this.cache = {};
  	    }
  	  }, {
  	    key: 'split',
  	    value: function split(index) {
  	      var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  	      if (force && (index === 0 || index >= this.length() - NEWLINE_LENGTH)) {
  	        var clone = this.clone();
  	        if (index === 0) {
  	          this.parent.insertBefore(clone, this);
  	          return this;
  	        } else {
  	          this.parent.insertBefore(clone, this.next);
  	          return clone;
  	        }
  	      } else {
  	        var next = _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'split', this).call(this, index, force);
  	        this.cache = {};
  	        return next;
  	      }
  	    }
  	  }]);

  	  return Block;
  	}(_parchment2.default.Block);

  	Block.blotName = 'block';
  	Block.tagName = 'P';
  	Block.defaultChild = 'break';
  	Block.allowedChildren = [_inline2.default, _parchment2.default.Embed, _text2.default];

  	function bubbleFormats(blot) {
  	  var formats = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  	  if (blot == null) return formats;
  	  if (typeof blot.formats === 'function') {
  	    formats = (0, _extend2.default)(formats, blot.formats());
  	  }
  	  if (blot.parent == null || blot.parent.blotName == 'scroll' || blot.parent.statics.scope !== blot.statics.scope) {
  	    return formats;
  	  }
  	  return bubbleFormats(blot.parent, formats);
  	}

  	exports.bubbleFormats = bubbleFormats;
  	exports.BlockEmbed = BlockEmbed;
  	exports.default = Block;

  	/***/ }),
  	/* 5 */
  	/***/ (function(module, exports, __webpack_require__) {


  	Object.defineProperty(exports, "__esModule", {
  	  value: true
  	});
  	exports.default = exports.overload = exports.expandConfig = undefined;

  	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

  	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

  	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  	__webpack_require__(50);

  	var _quillDelta = __webpack_require__(2);

  	var _quillDelta2 = _interopRequireDefault(_quillDelta);

  	var _editor = __webpack_require__(14);

  	var _editor2 = _interopRequireDefault(_editor);

  	var _emitter3 = __webpack_require__(8);

  	var _emitter4 = _interopRequireDefault(_emitter3);

  	var _module = __webpack_require__(9);

  	var _module2 = _interopRequireDefault(_module);

  	var _parchment = __webpack_require__(0);

  	var _parchment2 = _interopRequireDefault(_parchment);

  	var _selection = __webpack_require__(15);

  	var _selection2 = _interopRequireDefault(_selection);

  	var _extend = __webpack_require__(3);

  	var _extend2 = _interopRequireDefault(_extend);

  	var _logger = __webpack_require__(10);

  	var _logger2 = _interopRequireDefault(_logger);

  	var _theme = __webpack_require__(34);

  	var _theme2 = _interopRequireDefault(_theme);

  	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  	var debug = (0, _logger2.default)('quill');

  	var Quill = function () {
  	  _createClass(Quill, null, [{
  	    key: 'debug',
  	    value: function debug(limit) {
  	      if (limit === true) {
  	        limit = 'log';
  	      }
  	      _logger2.default.level(limit);
  	    }
  	  }, {
  	    key: 'find',
  	    value: function find(node) {
  	      return node.__quill || _parchment2.default.find(node);
  	    }
  	  }, {
  	    key: 'import',
  	    value: function _import(name) {
  	      if (this.imports[name] == null) {
  	        debug.error('Cannot import ' + name + '. Are you sure it was registered?');
  	      }
  	      return this.imports[name];
  	    }
  	  }, {
  	    key: 'register',
  	    value: function register(path, target) {
  	      var _this = this;

  	      var overwrite = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  	      if (typeof path !== 'string') {
  	        var name = path.attrName || path.blotName;
  	        if (typeof name === 'string') {
  	          // register(Blot | Attributor, overwrite)
  	          this.register('formats/' + name, path, target);
  	        } else {
  	          Object.keys(path).forEach(function (key) {
  	            _this.register(key, path[key], target);
  	          });
  	        }
  	      } else {
  	        if (this.imports[path] != null && !overwrite) {
  	          debug.warn('Overwriting ' + path + ' with', target);
  	        }
  	        this.imports[path] = target;
  	        if ((path.startsWith('blots/') || path.startsWith('formats/')) && target.blotName !== 'abstract') {
  	          _parchment2.default.register(target);
  	        } else if (path.startsWith('modules') && typeof target.register === 'function') {
  	          target.register();
  	        }
  	      }
  	    }
  	  }]);

  	  function Quill(container) {
  	    var _this2 = this;

  	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  	    _classCallCheck(this, Quill);

  	    this.options = expandConfig(container, options);
  	    this.container = this.options.container;
  	    if (this.container == null) {
  	      return debug.error('Invalid Quill container', container);
  	    }
  	    if (this.options.debug) {
  	      Quill.debug(this.options.debug);
  	    }
  	    var html = this.container.innerHTML.trim();
  	    this.container.classList.add('ql-container');
  	    this.container.innerHTML = '';
  	    this.container.__quill = this;
  	    this.root = this.addContainer('ql-editor');
  	    this.root.classList.add('ql-blank');
  	    this.root.setAttribute('data-gramm', false);
  	    this.scrollingContainer = this.options.scrollingContainer || this.root;
  	    this.emitter = new _emitter4.default();
  	    this.scroll = _parchment2.default.create(this.root, {
  	      emitter: this.emitter,
  	      whitelist: this.options.formats
  	    });
  	    this.editor = new _editor2.default(this.scroll);
  	    this.selection = new _selection2.default(this.scroll, this.emitter);
  	    this.theme = new this.options.theme(this, this.options);
  	    this.keyboard = this.theme.addModule('keyboard');
  	    this.clipboard = this.theme.addModule('clipboard');
  	    this.history = this.theme.addModule('history');
  	    this.theme.init();
  	    this.emitter.on(_emitter4.default.events.EDITOR_CHANGE, function (type) {
  	      if (type === _emitter4.default.events.TEXT_CHANGE) {
  	        _this2.root.classList.toggle('ql-blank', _this2.editor.isBlank());
  	      }
  	    });
  	    this.emitter.on(_emitter4.default.events.SCROLL_UPDATE, function (source, mutations) {
  	      var range = _this2.selection.lastRange;
  	      var index = range && range.length === 0 ? range.index : undefined;
  	      modify.call(_this2, function () {
  	        return _this2.editor.update(null, mutations, index);
  	      }, source);
  	    });
  	    var contents = this.clipboard.convert('<div class=\'ql-editor\' style="white-space: normal;">' + html + '<p><br></p></div>');
  	    this.setContents(contents);
  	    this.history.clear();
  	    if (this.options.placeholder) {
  	      this.root.setAttribute('data-placeholder', this.options.placeholder);
  	    }
  	    if (this.options.readOnly) {
  	      this.disable();
  	    }
  	  }

  	  _createClass(Quill, [{
  	    key: 'addContainer',
  	    value: function addContainer(container) {
  	      var refNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

  	      if (typeof container === 'string') {
  	        var className = container;
  	        container = document.createElement('div');
  	        container.classList.add(className);
  	      }
  	      this.container.insertBefore(container, refNode);
  	      return container;
  	    }
  	  }, {
  	    key: 'blur',
  	    value: function blur() {
  	      this.selection.setRange(null);
  	    }
  	  }, {
  	    key: 'deleteText',
  	    value: function deleteText(index, length, source) {
  	      var _this3 = this;

  	      var _overload = overload(index, length, source);

  	      var _overload2 = _slicedToArray(_overload, 4);

  	      index = _overload2[0];
  	      length = _overload2[1];
  	      source = _overload2[3];

  	      return modify.call(this, function () {
  	        return _this3.editor.deleteText(index, length);
  	      }, source, index, -1 * length);
  	    }
  	  }, {
  	    key: 'disable',
  	    value: function disable() {
  	      this.enable(false);
  	    }
  	  }, {
  	    key: 'enable',
  	    value: function enable() {
  	      var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

  	      this.scroll.enable(enabled);
  	      this.container.classList.toggle('ql-disabled', !enabled);
  	    }
  	  }, {
  	    key: 'focus',
  	    value: function focus() {
  	      var scrollTop = this.scrollingContainer.scrollTop;
  	      this.selection.focus();
  	      this.scrollingContainer.scrollTop = scrollTop;
  	      this.scrollIntoView();
  	    }
  	  }, {
  	    key: 'format',
  	    value: function format(name, value) {
  	      var _this4 = this;

  	      var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _emitter4.default.sources.API;

  	      return modify.call(this, function () {
  	        var range = _this4.getSelection(true);
  	        var change = new _quillDelta2.default();
  	        if (range == null) {
  	          return change;
  	        } else if (_parchment2.default.query(name, _parchment2.default.Scope.BLOCK)) {
  	          change = _this4.editor.formatLine(range.index, range.length, _defineProperty({}, name, value));
  	        } else if (range.length === 0) {
  	          _this4.selection.format(name, value);
  	          return change;
  	        } else {
  	          change = _this4.editor.formatText(range.index, range.length, _defineProperty({}, name, value));
  	        }
  	        _this4.setSelection(range, _emitter4.default.sources.SILENT);
  	        return change;
  	      }, source);
  	    }
  	  }, {
  	    key: 'formatLine',
  	    value: function formatLine(index, length, name, value, source) {
  	      var _this5 = this;

  	      var formats = void 0;

  	      var _overload3 = overload(index, length, name, value, source);

  	      var _overload4 = _slicedToArray(_overload3, 4);

  	      index = _overload4[0];
  	      length = _overload4[1];
  	      formats = _overload4[2];
  	      source = _overload4[3];

  	      return modify.call(this, function () {
  	        return _this5.editor.formatLine(index, length, formats);
  	      }, source, index, 0);
  	    }
  	  }, {
  	    key: 'formatText',
  	    value: function formatText(index, length, name, value, source) {
  	      var _this6 = this;

  	      var formats = void 0;

  	      var _overload5 = overload(index, length, name, value, source);

  	      var _overload6 = _slicedToArray(_overload5, 4);

  	      index = _overload6[0];
  	      length = _overload6[1];
  	      formats = _overload6[2];
  	      source = _overload6[3];

  	      return modify.call(this, function () {
  	        return _this6.editor.formatText(index, length, formats);
  	      }, source, index, 0);
  	    }
  	  }, {
  	    key: 'getBounds',
  	    value: function getBounds(index) {
  	      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

  	      var bounds = void 0;
  	      if (typeof index === 'number') {
  	        bounds = this.selection.getBounds(index, length);
  	      } else {
  	        bounds = this.selection.getBounds(index.index, index.length);
  	      }
  	      var containerBounds = this.container.getBoundingClientRect();
  	      return {
  	        bottom: bounds.bottom - containerBounds.top,
  	        height: bounds.height,
  	        left: bounds.left - containerBounds.left,
  	        right: bounds.right - containerBounds.left,
  	        top: bounds.top - containerBounds.top,
  	        width: bounds.width
  	      };
  	    }
  	  }, {
  	    key: 'getContents',
  	    value: function getContents() {
  	      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  	      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getLength() - index;

  	      var _overload7 = overload(index, length);

  	      var _overload8 = _slicedToArray(_overload7, 2);

  	      index = _overload8[0];
  	      length = _overload8[1];

  	      return this.editor.getContents(index, length);
  	    }
  	  }, {
  	    key: 'getFormat',
  	    value: function getFormat() {
  	      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getSelection(true);
  	      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

  	      if (typeof index === 'number') {
  	        return this.editor.getFormat(index, length);
  	      } else {
  	        return this.editor.getFormat(index.index, index.length);
  	      }
  	    }
  	  }, {
  	    key: 'getIndex',
  	    value: function getIndex(blot) {
  	      return blot.offset(this.scroll);
  	    }
  	  }, {
  	    key: 'getLength',
  	    value: function getLength() {
  	      return this.scroll.length();
  	    }
  	  }, {
  	    key: 'getLeaf',
  	    value: function getLeaf(index) {
  	      return this.scroll.leaf(index);
  	    }
  	  }, {
  	    key: 'getLine',
  	    value: function getLine(index) {
  	      return this.scroll.line(index);
  	    }
  	  }, {
  	    key: 'getLines',
  	    value: function getLines() {
  	      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  	      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.MAX_VALUE;

  	      if (typeof index !== 'number') {
  	        return this.scroll.lines(index.index, index.length);
  	      } else {
  	        return this.scroll.lines(index, length);
  	      }
  	    }
  	  }, {
  	    key: 'getModule',
  	    value: function getModule(name) {
  	      return this.theme.modules[name];
  	    }
  	  }, {
  	    key: 'getSelection',
  	    value: function getSelection() {
  	      var focus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

  	      if (focus) this.focus();
  	      this.update(); // Make sure we access getRange with editor in consistent state
  	      return this.selection.getRange()[0];
  	    }
  	  }, {
  	    key: 'getText',
  	    value: function getText() {
  	      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  	      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getLength() - index;

  	      var _overload9 = overload(index, length);

  	      var _overload10 = _slicedToArray(_overload9, 2);

  	      index = _overload10[0];
  	      length = _overload10[1];

  	      return this.editor.getText(index, length);
  	    }
  	  }, {
  	    key: 'hasFocus',
  	    value: function hasFocus() {
  	      return this.selection.hasFocus();
  	    }
  	  }, {
  	    key: 'insertEmbed',
  	    value: function insertEmbed(index, embed, value) {
  	      var _this7 = this;

  	      var source = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Quill.sources.API;

  	      return modify.call(this, function () {
  	        return _this7.editor.insertEmbed(index, embed, value);
  	      }, source, index);
  	    }
  	  }, {
  	    key: 'insertText',
  	    value: function insertText(index, text, name, value, source) {
  	      var _this8 = this;

  	      var formats = void 0;

  	      var _overload11 = overload(index, 0, name, value, source);

  	      var _overload12 = _slicedToArray(_overload11, 4);

  	      index = _overload12[0];
  	      formats = _overload12[2];
  	      source = _overload12[3];

  	      return modify.call(this, function () {
  	        return _this8.editor.insertText(index, text, formats);
  	      }, source, index, text.length);
  	    }
  	  }, {
  	    key: 'isEnabled',
  	    value: function isEnabled() {
  	      return !this.container.classList.contains('ql-disabled');
  	    }
  	  }, {
  	    key: 'off',
  	    value: function off() {
  	      return this.emitter.off.apply(this.emitter, arguments);
  	    }
  	  }, {
  	    key: 'on',
  	    value: function on() {
  	      return this.emitter.on.apply(this.emitter, arguments);
  	    }
  	  }, {
  	    key: 'once',
  	    value: function once() {
  	      return this.emitter.once.apply(this.emitter, arguments);
  	    }
  	  }, {
  	    key: 'pasteHTML',
  	    value: function pasteHTML(index, html, source) {
  	      this.clipboard.dangerouslyPasteHTML(index, html, source);
  	    }
  	  }, {
  	    key: 'removeFormat',
  	    value: function removeFormat(index, length, source) {
  	      var _this9 = this;

  	      var _overload13 = overload(index, length, source);

  	      var _overload14 = _slicedToArray(_overload13, 4);

  	      index = _overload14[0];
  	      length = _overload14[1];
  	      source = _overload14[3];

  	      return modify.call(this, function () {
  	        return _this9.editor.removeFormat(index, length);
  	      }, source, index);
  	    }
  	  }, {
  	    key: 'scrollIntoView',
  	    value: function scrollIntoView() {
  	      this.selection.scrollIntoView(this.scrollingContainer);
  	    }
  	  }, {
  	    key: 'setContents',
  	    value: function setContents(delta) {
  	      var _this10 = this;

  	      var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _emitter4.default.sources.API;

  	      return modify.call(this, function () {
  	        delta = new _quillDelta2.default(delta);
  	        var length = _this10.getLength();
  	        var deleted = _this10.editor.deleteText(0, length);
  	        var applied = _this10.editor.applyDelta(delta);
  	        var lastOp = applied.ops[applied.ops.length - 1];
  	        if (lastOp != null && typeof lastOp.insert === 'string' && lastOp.insert[lastOp.insert.length - 1] === '\n') {
  	          _this10.editor.deleteText(_this10.getLength() - 1, 1);
  	          applied.delete(1);
  	        }
  	        var ret = deleted.compose(applied);
  	        return ret;
  	      }, source);
  	    }
  	  }, {
  	    key: 'setSelection',
  	    value: function setSelection(index, length, source) {
  	      if (index == null) {
  	        this.selection.setRange(null, length || Quill.sources.API);
  	      } else {
  	        var _overload15 = overload(index, length, source);

  	        var _overload16 = _slicedToArray(_overload15, 4);

  	        index = _overload16[0];
  	        length = _overload16[1];
  	        source = _overload16[3];

  	        this.selection.setRange(new _selection.Range(index, length), source);
  	        if (source !== _emitter4.default.sources.SILENT) {
  	          this.selection.scrollIntoView(this.scrollingContainer);
  	        }
  	      }
  	    }
  	  }, {
  	    key: 'setText',
  	    value: function setText(text) {
  	      var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _emitter4.default.sources.API;

  	      var delta = new _quillDelta2.default().insert(text);
  	      return this.setContents(delta, source);
  	    }
  	  }, {
  	    key: 'update',
  	    value: function update() {
  	      var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _emitter4.default.sources.USER;

  	      var change = this.scroll.update(source); // Will update selection before selection.update() does if text changes
  	      this.selection.update(source);
  	      return change;
  	    }
  	  }, {
  	    key: 'updateContents',
  	    value: function updateContents(delta) {
  	      var _this11 = this;

  	      var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _emitter4.default.sources.API;

  	      return modify.call(this, function () {
  	        delta = new _quillDelta2.default(delta);
  	        return _this11.editor.applyDelta(delta, source);
  	      }, source, true);
  	    }
  	  }]);

  	  return Quill;
  	}();

  	Quill.DEFAULTS = {
  	  bounds: null,
  	  formats: null,
  	  modules: {},
  	  placeholder: '',
  	  readOnly: false,
  	  scrollingContainer: null,
  	  strict: true,
  	  theme: 'default'
  	};
  	Quill.events = _emitter4.default.events;
  	Quill.sources = _emitter4.default.sources;
  	// eslint-disable-next-line no-undef
  	Quill.version =  "1.3.7";

  	Quill.imports = {
  	  'delta': _quillDelta2.default,
  	  'parchment': _parchment2.default,
  	  'core/module': _module2.default,
  	  'core/theme': _theme2.default
  	};

  	function expandConfig(container, userConfig) {
  	  userConfig = (0, _extend2.default)(true, {
  	    container: container,
  	    modules: {
  	      clipboard: true,
  	      keyboard: true,
  	      history: true
  	    }
  	  }, userConfig);
  	  if (!userConfig.theme || userConfig.theme === Quill.DEFAULTS.theme) {
  	    userConfig.theme = _theme2.default;
  	  } else {
  	    userConfig.theme = Quill.import('themes/' + userConfig.theme);
  	    if (userConfig.theme == null) {
  	      throw new Error('Invalid theme ' + userConfig.theme + '. Did you register it?');
  	    }
  	  }
  	  var themeConfig = (0, _extend2.default)(true, {}, userConfig.theme.DEFAULTS);
  	  [themeConfig, userConfig].forEach(function (config) {
  	    config.modules = config.modules || {};
  	    Object.keys(config.modules).forEach(function (module) {
  	      if (config.modules[module] === true) {
  	        config.modules[module] = {};
  	      }
  	    });
  	  });
  	  var moduleNames = Object.keys(themeConfig.modules).concat(Object.keys(userConfig.modules));
  	  var moduleConfig = moduleNames.reduce(function (config, name) {
  	    var moduleClass = Quill.import('modules/' + name);
  	    if (moduleClass == null) {
  	      debug.error('Cannot load ' + name + ' module. Are you sure you registered it?');
  	    } else {
  	      config[name] = moduleClass.DEFAULTS || {};
  	    }
  	    return config;
  	  }, {});
  	  // Special case toolbar shorthand
  	  if (userConfig.modules != null && userConfig.modules.toolbar && userConfig.modules.toolbar.constructor !== Object) {
  	    userConfig.modules.toolbar = {
  	      container: userConfig.modules.toolbar
  	    };
  	  }
  	  userConfig = (0, _extend2.default)(true, {}, Quill.DEFAULTS, { modules: moduleConfig }, themeConfig, userConfig);
  	  ['bounds', 'container', 'scrollingContainer'].forEach(function (key) {
  	    if (typeof userConfig[key] === 'string') {
  	      userConfig[key] = document.querySelector(userConfig[key]);
  	    }
  	  });
  	  userConfig.modules = Object.keys(userConfig.modules).reduce(function (config, name) {
  	    if (userConfig.modules[name]) {
  	      config[name] = userConfig.modules[name];
  	    }
  	    return config;
  	  }, {});
  	  return userConfig;
  	}

  	// Handle selection preservation and TEXT_CHANGE emission
  	// common to modification APIs
  	function modify(modifier, source, index, shift) {
  	  if (this.options.strict && !this.isEnabled() && source === _emitter4.default.sources.USER) {
  	    return new _quillDelta2.default();
  	  }
  	  var range = index == null ? null : this.getSelection();
  	  var oldDelta = this.editor.delta;
  	  var change = modifier();
  	  if (range != null) {
  	    if (index === true) index = range.index;
  	    if (shift == null) {
  	      range = shiftRange(range, change, source);
  	    } else if (shift !== 0) {
  	      range = shiftRange(range, index, shift, source);
  	    }
  	    this.setSelection(range, _emitter4.default.sources.SILENT);
  	  }
  	  if (change.length() > 0) {
  	    var _emitter;

  	    var args = [_emitter4.default.events.TEXT_CHANGE, change, oldDelta, source];
  	    (_emitter = this.emitter).emit.apply(_emitter, [_emitter4.default.events.EDITOR_CHANGE].concat(args));
  	    if (source !== _emitter4.default.sources.SILENT) {
  	      var _emitter2;

  	      (_emitter2 = this.emitter).emit.apply(_emitter2, args);
  	    }
  	  }
  	  return change;
  	}

  	function overload(index, length, name, value, source) {
  	  var formats = {};
  	  if (typeof index.index === 'number' && typeof index.length === 'number') {
  	    // Allow for throwaway end (used by insertText/insertEmbed)
  	    if (typeof length !== 'number') {
  	      source = value, value = name, name = length, length = index.length, index = index.index;
  	    } else {
  	      length = index.length, index = index.index;
  	    }
  	  } else if (typeof length !== 'number') {
  	    source = value, value = name, name = length, length = 0;
  	  }
  	  // Handle format being object, two format name/value strings or excluded
  	  if ((typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object') {
  	    formats = name;
  	    source = value;
  	  } else if (typeof name === 'string') {
  	    if (value != null) {
  	      formats[name] = value;
  	    } else {
  	      source = name;
  	    }
  	  }
  	  // Handle optional source
  	  source = source || _emitter4.default.sources.API;
  	  return [index, length, formats, source];
  	}

  	function shiftRange(range, index, length, source) {
  	  if (range == null) return null;
  	  var start = void 0,
  	      end = void 0;
  	  if (index instanceof _quillDelta2.default) {
  	    var _map = [range.index, range.index + range.length].map(function (pos) {
  	      return index.transformPosition(pos, source !== _emitter4.default.sources.USER);
  	    });

  	    var _map2 = _slicedToArray(_map, 2);

  	    start = _map2[0];
  	    end = _map2[1];
  	  } else {
  	    var _map3 = [range.index, range.index + range.length].map(function (pos) {
  	      if (pos < index || pos === index && source === _emitter4.default.sources.USER) return pos;
  	      if (length >= 0) {
  	        return pos + length;
  	      } else {
  	        return Math.max(index, pos + length);
  	      }
  	    });

  	    var _map4 = _slicedToArray(_map3, 2);

  	    start = _map4[0];
  	    end = _map4[1];
  	  }
  	  return new _selection.Range(start, end - start);
  	}

  	exports.expandConfig = expandConfig;
  	exports.overload = overload;
  	exports.default = Quill;

  	/***/ }),
  	/* 6 */
  	/***/ (function(module, exports, __webpack_require__) {


  	Object.defineProperty(exports, "__esModule", {
  	  value: true
  	});

  	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  	var _text = __webpack_require__(7);

  	var _text2 = _interopRequireDefault(_text);

  	var _parchment = __webpack_require__(0);

  	var _parchment2 = _interopRequireDefault(_parchment);

  	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  	var Inline = function (_Parchment$Inline) {
  	  _inherits(Inline, _Parchment$Inline);

  	  function Inline() {
  	    _classCallCheck(this, Inline);

  	    return _possibleConstructorReturn(this, (Inline.__proto__ || Object.getPrototypeOf(Inline)).apply(this, arguments));
  	  }

  	  _createClass(Inline, [{
  	    key: 'formatAt',
  	    value: function formatAt(index, length, name, value) {
  	      if (Inline.compare(this.statics.blotName, name) < 0 && _parchment2.default.query(name, _parchment2.default.Scope.BLOT)) {
  	        var blot = this.isolate(index, length);
  	        if (value) {
  	          blot.wrap(name, value);
  	        }
  	      } else {
  	        _get(Inline.prototype.__proto__ || Object.getPrototypeOf(Inline.prototype), 'formatAt', this).call(this, index, length, name, value);
  	      }
  	    }
  	  }, {
  	    key: 'optimize',
  	    value: function optimize(context) {
  	      _get(Inline.prototype.__proto__ || Object.getPrototypeOf(Inline.prototype), 'optimize', this).call(this, context);
  	      if (this.parent instanceof Inline && Inline.compare(this.statics.blotName, this.parent.statics.blotName) > 0) {
  	        var parent = this.parent.isolate(this.offset(), this.length());
  	        this.moveChildren(parent);
  	        parent.wrap(this);
  	      }
  	    }
  	  }], [{
  	    key: 'compare',
  	    value: function compare(self, other) {
  	      var selfIndex = Inline.order.indexOf(self);
  	      var otherIndex = Inline.order.indexOf(other);
  	      if (selfIndex >= 0 || otherIndex >= 0) {
  	        return selfIndex - otherIndex;
  	      } else if (self === other) {
  	        return 0;
  	      } else if (self < other) {
  	        return -1;
  	      } else {
  	        return 1;
  	      }
  	    }
  	  }]);

  	  return Inline;
  	}(_parchment2.default.Inline);

  	Inline.allowedChildren = [Inline, _parchment2.default.Embed, _text2.default];
  	// Lower index means deeper in the DOM tree, since not found (-1) is for embeds
  	Inline.order = ['cursor', 'inline', // Must be lower
  	'underline', 'strike', 'italic', 'bold', 'script', 'link', 'code' // Must be higher
  	];

  	exports.default = Inline;

  	/***/ }),
  	/* 7 */
  	/***/ (function(module, exports, __webpack_require__) {


  	Object.defineProperty(exports, "__esModule", {
  	  value: true
  	});

  	var _parchment = __webpack_require__(0);

  	var _parchment2 = _interopRequireDefault(_parchment);

  	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  	var TextBlot = function (_Parchment$Text) {
  	  _inherits(TextBlot, _Parchment$Text);

  	  function TextBlot() {
  	    _classCallCheck(this, TextBlot);

  	    return _possibleConstructorReturn(this, (TextBlot.__proto__ || Object.getPrototypeOf(TextBlot)).apply(this, arguments));
  	  }

  	  return TextBlot;
  	}(_parchment2.default.Text);

  	exports.default = TextBlot;

  	/***/ }),
  	/* 8 */
  	/***/ (function(module, exports, __webpack_require__) {


  	Object.defineProperty(exports, "__esModule", {
  	  value: true
  	});

  	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  	var _eventemitter = __webpack_require__(54);

  	var _eventemitter2 = _interopRequireDefault(_eventemitter);

  	var _logger = __webpack_require__(10);

  	var _logger2 = _interopRequireDefault(_logger);

  	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  	var debug = (0, _logger2.default)('quill:events');

  	var EVENTS = ['selectionchange', 'mousedown', 'mouseup', 'click'];

  	EVENTS.forEach(function (eventName) {
  	  document.addEventListener(eventName, function () {
  	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
  	      args[_key] = arguments[_key];
  	    }

  	    [].slice.call(document.querySelectorAll('.ql-container')).forEach(function (node) {
  	      // TODO use WeakMap
  	      if (node.__quill && node.__quill.emitter) {
  	        var _node$__quill$emitter;

  	        (_node$__quill$emitter = node.__quill.emitter).handleDOM.apply(_node$__quill$emitter, args);
  	      }
  	    });
  	  });
  	});

  	var Emitter = function (_EventEmitter) {
  	  _inherits(Emitter, _EventEmitter);

  	  function Emitter() {
  	    _classCallCheck(this, Emitter);

  	    var _this = _possibleConstructorReturn(this, (Emitter.__proto__ || Object.getPrototypeOf(Emitter)).call(this));

  	    _this.listeners = {};
  	    _this.on('error', debug.error);
  	    return _this;
  	  }

  	  _createClass(Emitter, [{
  	    key: 'emit',
  	    value: function emit() {
  	      debug.log.apply(debug, arguments);
  	      _get(Emitter.prototype.__proto__ || Object.getPrototypeOf(Emitter.prototype), 'emit', this).apply(this, arguments);
  	    }
  	  }, {
  	    key: 'handleDOM',
  	    value: function handleDOM(event) {
  	      for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
  	        args[_key2 - 1] = arguments[_key2];
  	      }

  	      (this.listeners[event.type] || []).forEach(function (_ref) {
  	        var node = _ref.node,
  	            handler = _ref.handler;

  	        if (event.target === node || node.contains(event.target)) {
  	          handler.apply(undefined, [event].concat(args));
  	        }
  	      });
  	    }
  	  }, {
  	    key: 'listenDOM',
  	    value: function listenDOM(eventName, node, handler) {
  	      if (!this.listeners[eventName]) {
  	        this.listeners[eventName] = [];
  	      }
  	      this.listeners[eventName].push({ node: node, handler: handler });
  	    }
  	  }]);

  	  return Emitter;
  	}(_eventemitter2.default);

  	Emitter.events = {
  	  EDITOR_CHANGE: 'editor-change',
  	  SCROLL_BEFORE_UPDATE: 'scroll-before-update',
  	  SCROLL_OPTIMIZE: 'scroll-optimize',
  	  SCROLL_UPDATE: 'scroll-update',
  	  SELECTION_CHANGE: 'selection-change',
  	  TEXT_CHANGE: 'text-change'
  	};
  	Emitter.sources = {
  	  API: 'api',
  	  SILENT: 'silent',
  	  USER: 'user'
  	};

  	exports.default = Emitter;

  	/***/ }),
  	/* 9 */
  	/***/ (function(module, exports, __webpack_require__) {


  	Object.defineProperty(exports, "__esModule", {
  	  value: true
  	});

  	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  	var Module = function Module(quill) {
  	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  	  _classCallCheck(this, Module);

  	  this.quill = quill;
  	  this.options = options;
  	};

  	Module.DEFAULTS = {};

  	exports.default = Module;

  	/***/ }),
  	/* 10 */
  	/***/ (function(module, exports, __webpack_require__) {


  	Object.defineProperty(exports, "__esModule", {
  	  value: true
  	});
  	var levels = ['error', 'warn', 'log', 'info'];
  	var level = 'warn';

  	function debug(method) {
  	  if (levels.indexOf(method) <= levels.indexOf(level)) {
  	    var _console;

  	    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
  	      args[_key - 1] = arguments[_key];
  	    }

  	    (_console = console)[method].apply(_console, args); // eslint-disable-line no-console
  	  }
  	}

  	function namespace(ns) {
  	  return levels.reduce(function (logger, method) {
  	    logger[method] = debug.bind(console, method, ns);
  	    return logger;
  	  }, {});
  	}

  	debug.level = namespace.level = function (newLevel) {
  	  level = newLevel;
  	};

  	exports.default = namespace;

  	/***/ }),
  	/* 11 */
  	/***/ (function(module, exports, __webpack_require__) {

  	var pSlice = Array.prototype.slice;
  	var objectKeys = __webpack_require__(52);
  	var isArguments = __webpack_require__(53);

  	var deepEqual = module.exports = function (actual, expected, opts) {
  	  if (!opts) opts = {};
  	  // 7.1. All identical values are equivalent, as determined by ===.
  	  if (actual === expected) {
  	    return true;

  	  } else if (actual instanceof Date && expected instanceof Date) {
  	    return actual.getTime() === expected.getTime();

  	  // 7.3. Other pairs that do not both pass typeof value == 'object',
  	  // equivalence is determined by ==.
  	  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {
  	    return opts.strict ? actual === expected : actual == expected;

  	  // 7.4. For all other Object pairs, including Array objects, equivalence is
  	  // determined by having the same number of owned properties (as verified
  	  // with Object.prototype.hasOwnProperty.call), the same set of keys
  	  // (although not necessarily the same order), equivalent values for every
  	  // corresponding key, and an identical 'prototype' property. Note: this
  	  // accounts for both named and indexed properties on Arrays.
  	  } else {
  	    return objEquiv(actual, expected, opts);
  	  }
  	};

  	function isUndefinedOrNull(value) {
  	  return value === null || value === undefined;
  	}

  	function isBuffer (x) {
  	  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;
  	  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
  	    return false;
  	  }
  	  if (x.length > 0 && typeof x[0] !== 'number') return false;
  	  return true;
  	}

  	function objEquiv(a, b, opts) {
  	  var i, key;
  	  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
  	    return false;
  	  // an identical 'prototype' property.
  	  if (a.prototype !== b.prototype) return false;
  	  //~~~I've managed to break Object.keys through screwy arguments passing.
  	  //   Converting to array solves the problem.
  	  if (isArguments(a)) {
  	    if (!isArguments(b)) {
  	      return false;
  	    }
  	    a = pSlice.call(a);
  	    b = pSlice.call(b);
  	    return deepEqual(a, b, opts);
  	  }
  	  if (isBuffer(a)) {
  	    if (!isBuffer(b)) {
  	      return false;
  	    }
  	    if (a.length !== b.length) return false;
  	    for (i = 0; i < a.length; i++) {
  	      if (a[i] !== b[i]) return false;
  	    }
  	    return true;
  	  }
  	  try {
  	    var ka = objectKeys(a),
  	        kb = objectKeys(b);
  	  } catch (e) {//happens when one is a string literal and the other isn't
  	    return false;
  	  }
  	  // having the same number of owned properties (keys incorporates
  	  // hasOwnProperty)
  	  if (ka.length != kb.length)
  	    return false;
  	  //the same set of keys (although not necessarily the same order),
  	  ka.sort();
  	  kb.sort();
  	  //~~~cheap key test
  	  for (i = ka.length - 1; i >= 0; i--) {
  	    if (ka[i] != kb[i])
  	      return false;
  	  }
  	  //equivalent values for every corresponding key, and
  	  //~~~possibly expensive deep test
  	  for (i = ka.length - 1; i >= 0; i--) {
  	    key = ka[i];
  	    if (!deepEqual(a[key], b[key], opts)) return false;
  	  }
  	  return typeof a === typeof b;
  	}


  	/***/ }),
  	/* 12 */
  	/***/ (function(module, exports, __webpack_require__) {

  	Object.defineProperty(exports, "__esModule", { value: true });
  	var Registry = __webpack_require__(1);
  	var Attributor = /** @class */ (function () {
  	    function Attributor(attrName, keyName, options) {
  	        if (options === void 0) { options = {}; }
  	        this.attrName = attrName;
  	        this.keyName = keyName;
  	        var attributeBit = Registry.Scope.TYPE & Registry.Scope.ATTRIBUTE;
  	        if (options.scope != null) {
  	            // Ignore type bits, force attribute bit
  	            this.scope = (options.scope & Registry.Scope.LEVEL) | attributeBit;
  	        }
  	        else {
  	            this.scope = Registry.Scope.ATTRIBUTE;
  	        }
  	        if (options.whitelist != null)
  	            this.whitelist = options.whitelist;
  	    }
  	    Attributor.keys = function (node) {
  	        return [].map.call(node.attributes, function (item) {
  	            return item.name;
  	        });
  	    };
  	    Attributor.prototype.add = function (node, value) {
  	        if (!this.canAdd(node, value))
  	            return false;
  	        node.setAttribute(this.keyName, value);
  	        return true;
  	    };
  	    Attributor.prototype.canAdd = function (node, value) {
  	        var match = Registry.query(node, Registry.Scope.BLOT & (this.scope | Registry.Scope.TYPE));
  	        if (match == null)
  	            return false;
  	        if (this.whitelist == null)
  	            return true;
  	        if (typeof value === 'string') {
  	            return this.whitelist.indexOf(value.replace(/["']/g, '')) > -1;
  	        }
  	        else {
  	            return this.whitelist.indexOf(value) > -1;
  	        }
  	    };
  	    Attributor.prototype.remove = function (node) {
  	        node.removeAttribute(this.keyName);
  	    };
  	    Attributor.prototype.value = function (node) {
  	        var value = node.getAttribute(this.keyName);
  	        if (this.canAdd(node, value) && value) {
  	            return value;
  	        }
  	        return '';
  	    };
  	    return Attributor;
  	}());
  	exports.default = Attributor;


  	/***/ }),
  	/* 13 */
  	/***/ (function(module, exports, __webpack_require__) {


  	Object.defineProperty(exports, "__esModule", {
  	  value: true
  	});
  	exports.default = exports.Code = undefined;

  	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

  	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  	var _quillDelta = __webpack_require__(2);

  	var _quillDelta2 = _interopRequireDefault(_quillDelta);

  	var _parchment = __webpack_require__(0);

  	var _parchment2 = _interopRequireDefault(_parchment);

  	var _block = __webpack_require__(4);

  	var _block2 = _interopRequireDefault(_block);

  	var _inline = __webpack_require__(6);

  	var _inline2 = _interopRequireDefault(_inline);

  	var _text = __webpack_require__(7);

  	var _text2 = _interopRequireDefault(_text);

  	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  	var Code = function (_Inline) {
  	  _inherits(Code, _Inline);

  	  function Code() {
  	    _classCallCheck(this, Code);

  	    return _possibleConstructorReturn(this, (Code.__proto__ || Object.getPrototypeOf(Code)).apply(this, arguments));
  	  }

  	  return Code;
  	}(_inline2.default);

  	Code.blotName = 'code';
  	Code.tagName = 'CODE';

  	var CodeBlock = function (_Block) {
  	  _inherits(CodeBlock, _Block);

  	  function CodeBlock() {
  	    _classCallCheck(this, CodeBlock);

  	    return _possibleConstructorReturn(this, (CodeBlock.__proto__ || Object.getPrototypeOf(CodeBlock)).apply(this, arguments));
  	  }

  	  _createClass(CodeBlock, [{
  	    key: 'delta',
  	    value: function delta() {
  	      var _this3 = this;

  	      var text = this.domNode.textContent;
  	      if (text.endsWith('\n')) {
  	        // Should always be true
  	        text = text.slice(0, -1);
  	      }
  	      return text.split('\n').reduce(function (delta, frag) {
  	        return delta.insert(frag).insert('\n', _this3.formats());
  	      }, new _quillDelta2.default());
  	    }
  	  }, {
  	    key: 'format',
  	    value: function format(name, value) {
  	      if (name === this.statics.blotName && value) return;

  	      var _descendant = this.descendant(_text2.default, this.length() - 1),
  	          _descendant2 = _slicedToArray(_descendant, 1),
  	          text = _descendant2[0];

  	      if (text != null) {
  	        text.deleteAt(text.length() - 1, 1);
  	      }
  	      _get(CodeBlock.prototype.__proto__ || Object.getPrototypeOf(CodeBlock.prototype), 'format', this).call(this, name, value);
  	    }
  	  }, {
  	    key: 'formatAt',
  	    value: function formatAt(index, length, name, value) {
  	      if (length === 0) return;
  	      if (_parchment2.default.query(name, _parchment2.default.Scope.BLOCK) == null || name === this.statics.blotName && value === this.statics.formats(this.domNode)) {
  	        return;
  	      }
  	      var nextNewline = this.newlineIndex(index);
  	      if (nextNewline < 0 || nextNewline >= index + length) return;
  	      var prevNewline = this.newlineIndex(index, true) + 1;
  	      var isolateLength = nextNewline - prevNewline + 1;
  	      var blot = this.isolate(prevNewline, isolateLength);
  	      var next = blot.next;
  	      blot.format(name, value);
  	      if (next instanceof CodeBlock) {
  	        next.formatAt(0, index - prevNewline + length - isolateLength, name, value);
  	      }
  	    }
  	  }, {
  	    key: 'insertAt',
  	    value: function insertAt(index, value, def) {
  	      if (def != null) return;

  	      var _descendant3 = this.descendant(_text2.default, index),
  	          _descendant4 = _slicedToArray(_descendant3, 2),
  	          text = _descendant4[0],
  	          offset = _descendant4[1];

  	      text.insertAt(offset, value);
  	    }
  	  }, {
  	    key: 'length',
  	    value: function length() {
  	      var length = this.domNode.textContent.length;
  	      if (!this.domNode.textContent.endsWith('\n')) {
  	        return length + 1;
  	      }
  	      return length;
  	    }
  	  }, {
  	    key: 'newlineIndex',
  	    value: function newlineIndex(searchIndex) {
  	      var reverse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  	      if (!reverse) {
  	        var offset = this.domNode.textContent.slice(searchIndex).indexOf('\n');
  	        return offset > -1 ? searchIndex + offset : -1;
  	      } else {
  	        return this.domNode.textContent.slice(0, searchIndex).lastIndexOf('\n');
  	      }
  	    }
  	  }, {
  	    key: 'optimize',
  	    value: function optimize(context) {
  	      if (!this.domNode.textContent.endsWith('\n')) {
  	        this.appendChild(_parchment2.default.create('text', '\n'));
  	      }
  	      _get(CodeBlock.prototype.__proto__ || Object.getPrototypeOf(CodeBlock.prototype), 'optimize', this).call(this, context);
  	      var next = this.next;
  	      if (next != null && next.prev === this && next.statics.blotName === this.statics.blotName && this.statics.formats(this.domNode) === next.statics.formats(next.domNode)) {
  	        next.optimize(context);
  	        next.moveChildren(this);
  	        next.remove();
  	      }
  	    }
  	  }, {
  	    key: 'replace',
  	    value: function replace(target) {
  	      _get(CodeBlock.prototype.__proto__ || Object.getPrototypeOf(CodeBlock.prototype), 'replace', this).call(this, target);
  	      [].slice.call(this.domNode.querySelectorAll('*')).forEach(function (node) {
  	        var blot = _parchment2.default.find(node);
  	        if (blot == null) {
  	          node.parentNode.removeChild(node);
  	        } else if (blot instanceof _parchment2.default.Embed) {
  	          blot.remove();
  	        } else {
  	          blot.unwrap();
  	        }
  	      });
  	    }
  	  }], [{
  	    key: 'create',
  	    value: function create(value) {
  	      var domNode = _get(CodeBlock.__proto__ || Object.getPrototypeOf(CodeBlock), 'create', this).call(this, value);
  	      domNode.setAttribute('spellcheck', false);
  	      return domNode;
  	    }
  	  }, {
  	    key: 'formats',
  	    value: function formats() {
  	      return true;
  	    }
  	  }]);

  	  return CodeBlock;
  	}(_block2.default);

  	CodeBlock.blotName = 'code-block';
  	CodeBlock.tagName = 'PRE';
  	CodeBlock.TAB = '  ';

  	exports.Code = Code;
  	exports.default = CodeBlock;

  	/***/ }),
  	/* 14 */
  	/***/ (function(module, exports, __webpack_require__) {


  	Object.defineProperty(exports, "__esModule", {
  	  value: true
  	});

  	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

  	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

  	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  	var _quillDelta = __webpack_require__(2);

  	var _quillDelta2 = _interopRequireDefault(_quillDelta);

  	var _op = __webpack_require__(20);

  	var _op2 = _interopRequireDefault(_op);

  	var _parchment = __webpack_require__(0);

  	var _parchment2 = _interopRequireDefault(_parchment);

  	var _code = __webpack_require__(13);

  	var _code2 = _interopRequireDefault(_code);

  	var _cursor = __webpack_require__(24);

  	var _cursor2 = _interopRequireDefault(_cursor);

  	var _block = __webpack_require__(4);

  	var _block2 = _interopRequireDefault(_block);

  	var _break = __webpack_require__(16);

  	var _break2 = _interopRequireDefault(_break);

  	var _clone = __webpack_require__(21);

  	var _clone2 = _interopRequireDefault(_clone);

  	var _deepEqual = __webpack_require__(11);

  	var _deepEqual2 = _interopRequireDefault(_deepEqual);

  	var _extend = __webpack_require__(3);

  	var _extend2 = _interopRequireDefault(_extend);

  	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  	var ASCII = /^[ -~]*$/;

  	var Editor = function () {
  	  function Editor(scroll) {
  	    _classCallCheck(this, Editor);

  	    this.scroll = scroll;
  	    this.delta = this.getDelta();
  	  }

  	  _createClass(Editor, [{
  	    key: 'applyDelta',
  	    value: function applyDelta(delta) {
  	      var _this = this;

  	      var consumeNextNewline = false;
  	      this.scroll.update();
  	      var scrollLength = this.scroll.length();
  	      this.scroll.batchStart();
  	      delta = normalizeDelta(delta);
  	      delta.reduce(function (index, op) {
  	        var length = op.retain || op.delete || op.insert.length || 1;
  	        var attributes = op.attributes || {};
  	        if (op.insert != null) {
  	          if (typeof op.insert === 'string') {
  	            var text = op.insert;
  	            if (text.endsWith('\n') && consumeNextNewline) {
  	              consumeNextNewline = false;
  	              text = text.slice(0, -1);
  	            }
  	            if (index >= scrollLength && !text.endsWith('\n')) {
  	              consumeNextNewline = true;
  	            }
  	            _this.scroll.insertAt(index, text);

  	            var _scroll$line = _this.scroll.line(index),
  	                _scroll$line2 = _slicedToArray(_scroll$line, 2),
  	                line = _scroll$line2[0],
  	                offset = _scroll$line2[1];

  	            var formats = (0, _extend2.default)({}, (0, _block.bubbleFormats)(line));
  	            if (line instanceof _block2.default) {
  	              var _line$descendant = line.descendant(_parchment2.default.Leaf, offset),
  	                  _line$descendant2 = _slicedToArray(_line$descendant, 1),
  	                  leaf = _line$descendant2[0];

  	              formats = (0, _extend2.default)(formats, (0, _block.bubbleFormats)(leaf));
  	            }
  	            attributes = _op2.default.attributes.diff(formats, attributes) || {};
  	          } else if (_typeof(op.insert) === 'object') {
  	            var key = Object.keys(op.insert)[0]; // There should only be one key
  	            if (key == null) return index;
  	            _this.scroll.insertAt(index, key, op.insert[key]);
  	          }
  	          scrollLength += length;
  	        }
  	        Object.keys(attributes).forEach(function (name) {
  	          _this.scroll.formatAt(index, length, name, attributes[name]);
  	        });
  	        return index + length;
  	      }, 0);
  	      delta.reduce(function (index, op) {
  	        if (typeof op.delete === 'number') {
  	          _this.scroll.deleteAt(index, op.delete);
  	          return index;
  	        }
  	        return index + (op.retain || op.insert.length || 1);
  	      }, 0);
  	      this.scroll.batchEnd();
  	      return this.update(delta);
  	    }
  	  }, {
  	    key: 'deleteText',
  	    value: function deleteText(index, length) {
  	      this.scroll.deleteAt(index, length);
  	      return this.update(new _quillDelta2.default().retain(index).delete(length));
  	    }
  	  }, {
  	    key: 'formatLine',
  	    value: function formatLine(index, length) {
  	      var _this2 = this;

  	      var formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  	      this.scroll.update();
  	      Object.keys(formats).forEach(function (format) {
  	        if (_this2.scroll.whitelist != null && !_this2.scroll.whitelist[format]) return;
  	        var lines = _this2.scroll.lines(index, Math.max(length, 1));
  	        var lengthRemaining = length;
  	        lines.forEach(function (line) {
  	          var lineLength = line.length();
  	          if (!(line instanceof _code2.default)) {
  	            line.format(format, formats[format]);
  	          } else {
  	            var codeIndex = index - line.offset(_this2.scroll);
  	            var codeLength = line.newlineIndex(codeIndex + lengthRemaining) - codeIndex + 1;
  	            line.formatAt(codeIndex, codeLength, format, formats[format]);
  	          }
  	          lengthRemaining -= lineLength;
  	        });
  	      });
  	      this.scroll.optimize();
  	      return this.update(new _quillDelta2.default().retain(index).retain(length, (0, _clone2.default)(formats)));
  	    }
  	  }, {
  	    key: 'formatText',
  	    value: function formatText(index, length) {
  	      var _this3 = this;

  	      var formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  	      Object.keys(formats).forEach(function (format) {
  	        _this3.scroll.formatAt(index, length, format, formats[format]);
  	      });
  	      return this.update(new _quillDelta2.default().retain(index).retain(length, (0, _clone2.default)(formats)));
  	    }
  	  }, {
  	    key: 'getContents',
  	    value: function getContents(index, length) {
  	      return this.delta.slice(index, index + length);
  	    }
  	  }, {
  	    key: 'getDelta',
  	    value: function getDelta() {
  	      return this.scroll.lines().reduce(function (delta, line) {
  	        return delta.concat(line.delta());
  	      }, new _quillDelta2.default());
  	    }
  	  }, {
  	    key: 'getFormat',
  	    value: function getFormat(index) {
  	      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

  	      var lines = [],
  	          leaves = [];
  	      if (length === 0) {
  	        this.scroll.path(index).forEach(function (path) {
  	          var _path = _slicedToArray(path, 1),
  	              blot = _path[0];

  	          if (blot instanceof _block2.default) {
  	            lines.push(blot);
  	          } else if (blot instanceof _parchment2.default.Leaf) {
  	            leaves.push(blot);
  	          }
  	        });
  	      } else {
  	        lines = this.scroll.lines(index, length);
  	        leaves = this.scroll.descendants(_parchment2.default.Leaf, index, length);
  	      }
  	      var formatsArr = [lines, leaves].map(function (blots) {
  	        if (blots.length === 0) return {};
  	        var formats = (0, _block.bubbleFormats)(blots.shift());
  	        while (Object.keys(formats).length > 0) {
  	          var blot = blots.shift();
  	          if (blot == null) return formats;
  	          formats = combineFormats((0, _block.bubbleFormats)(blot), formats);
  	        }
  	        return formats;
  	      });
  	      return _extend2.default.apply(_extend2.default, formatsArr);
  	    }
  	  }, {
  	    key: 'getText',
  	    value: function getText(index, length) {
  	      return this.getContents(index, length).filter(function (op) {
  	        return typeof op.insert === 'string';
  	      }).map(function (op) {
  	        return op.insert;
  	      }).join('');
  	    }
  	  }, {
  	    key: 'insertEmbed',
  	    value: function insertEmbed(index, embed, value) {
  	      this.scroll.insertAt(index, embed, value);
  	      return this.update(new _quillDelta2.default().retain(index).insert(_defineProperty({}, embed, value)));
  	    }
  	  }, {
  	    key: 'insertText',
  	    value: function insertText(index, text) {
  	      var _this4 = this;

  	      var formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  	      text = text.replace(/\r\n/g, '\n').replace(/\r/g, '\n');
  	      this.scroll.insertAt(index, text);
  	      Object.keys(formats).forEach(function (format) {
  	        _this4.scroll.formatAt(index, text.length, format, formats[format]);
  	      });
  	      return this.update(new _quillDelta2.default().retain(index).insert(text, (0, _clone2.default)(formats)));
  	    }
  	  }, {
  	    key: 'isBlank',
  	    value: function isBlank() {
  	      if (this.scroll.children.length == 0) return true;
  	      if (this.scroll.children.length > 1) return false;
  	      var block = this.scroll.children.head;
  	      if (block.statics.blotName !== _block2.default.blotName) return false;
  	      if (block.children.length > 1) return false;
  	      return block.children.head instanceof _break2.default;
  	    }
  	  }, {
  	    key: 'removeFormat',
  	    value: function removeFormat(index, length) {
  	      var text = this.getText(index, length);

  	      var _scroll$line3 = this.scroll.line(index + length),
  	          _scroll$line4 = _slicedToArray(_scroll$line3, 2),
  	          line = _scroll$line4[0],
  	          offset = _scroll$line4[1];

  	      var suffixLength = 0,
  	          suffix = new _quillDelta2.default();
  	      if (line != null) {
  	        if (!(line instanceof _code2.default)) {
  	          suffixLength = line.length() - offset;
  	        } else {
  	          suffixLength = line.newlineIndex(offset) - offset + 1;
  	        }
  	        suffix = line.delta().slice(offset, offset + suffixLength - 1).insert('\n');
  	      }
  	      var contents = this.getContents(index, length + suffixLength);
  	      var diff = contents.diff(new _quillDelta2.default().insert(text).concat(suffix));
  	      var delta = new _quillDelta2.default().retain(index).concat(diff);
  	      return this.applyDelta(delta);
  	    }
  	  }, {
  	    key: 'update',
  	    value: function update(change) {
  	      var mutations = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  	      var cursorIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;

  	      var oldDelta = this.delta;
  	      if (mutations.length === 1 && mutations[0].type === 'characterData' && mutations[0].target.data.match(ASCII) && _parchment2.default.find(mutations[0].target)) {
  	        // Optimization for character changes
  	        var textBlot = _parchment2.default.find(mutations[0].target);
  	        var formats = (0, _block.bubbleFormats)(textBlot);
  	        var index = textBlot.offset(this.scroll);
  	        var oldValue = mutations[0].oldValue.replace(_cursor2.default.CONTENTS, '');
  	        var oldText = new _quillDelta2.default().insert(oldValue);
  	        var newText = new _quillDelta2.default().insert(textBlot.value());
  	        var diffDelta = new _quillDelta2.default().retain(index).concat(oldText.diff(newText, cursorIndex));
  	        change = diffDelta.reduce(function (delta, op) {
  	          if (op.insert) {
  	            return delta.insert(op.insert, formats);
  	          } else {
  	            return delta.push(op);
  	          }
  	        }, new _quillDelta2.default());
  	        this.delta = oldDelta.compose(change);
  	      } else {
  	        this.delta = this.getDelta();
  	        if (!change || !(0, _deepEqual2.default)(oldDelta.compose(change), this.delta)) {
  	          change = oldDelta.diff(this.delta, cursorIndex);
  	        }
  	      }
  	      return change;
  	    }
  	  }]);

  	  return Editor;
  	}();

  	function combineFormats(formats, combined) {
  	  return Object.keys(combined).reduce(function (merged, name) {
  	    if (formats[name] == null) return merged;
  	    if (combined[name] === formats[name]) {
  	      merged[name] = combined[name];
  	    } else if (Array.isArray(combined[name])) {
  	      if (combined[name].indexOf(formats[name]) < 0) {
  	        merged[name] = combined[name].concat([formats[name]]);
  	      }
  	    } else {
  	      merged[name] = [combined[name], formats[name]];
  	    }
  	    return merged;
  	  }, {});
  	}

  	function normalizeDelta(delta) {
  	  return delta.reduce(function (delta, op) {
  	    if (op.insert === 1) {
  	      var attributes = (0, _clone2.default)(op.attributes);
  	      delete attributes['image'];
  	      return delta.insert({ image: op.attributes.image }, attributes);
  	    }
  	    if (op.attributes != null && (op.attributes.list === true || op.attributes.bullet === true)) {
  	      op = (0, _clone2.default)(op);
  	      if (op.attributes.list) {
  	        op.attributes.list = 'ordered';
  	      } else {
  	        op.attributes.list = 'bullet';
  	        delete op.attributes.bullet;
  	      }
  	    }
  	    if (typeof op.insert === 'string') {
  	      var text = op.insert.replace(/\r\n/g, '\n').replace(/\r/g, '\n');
  	      return delta.insert(text, op.attributes);
  	    }
  	    return delta.push(op);
  	  }, new _quillDelta2.default());
  	}

  	exports.default = Editor;

  	/***/ }),
  	/* 15 */
  	/***/ (function(module, exports, __webpack_require__) {


  	Object.defineProperty(exports, "__esModule", {
  	  value: true
  	});
  	exports.default = exports.Range = undefined;

  	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

  	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  	var _parchment = __webpack_require__(0);

  	var _parchment2 = _interopRequireDefault(_parchment);

  	var _clone = __webpack_require__(21);

  	var _clone2 = _interopRequireDefault(_clone);

  	var _deepEqual = __webpack_require__(11);

  	var _deepEqual2 = _interopRequireDefault(_deepEqual);

  	var _emitter3 = __webpack_require__(8);

  	var _emitter4 = _interopRequireDefault(_emitter3);

  	var _logger = __webpack_require__(10);

  	var _logger2 = _interopRequireDefault(_logger);

  	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

  	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  	var debug = (0, _logger2.default)('quill:selection');

  	var Range = function Range(index) {
  	  var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

  	  _classCallCheck(this, Range);

  	  this.index = index;
  	  this.length = length;
  	};

  	var Selection = function () {
  	  function Selection(scroll, emitter) {
  	    var _this = this;

  	    _classCallCheck(this, Selection);

  	    this.emitter = emitter;
  	    this.scroll = scroll;
  	    this.composing = false;
  	    this.mouseDown = false;
  	    this.root = this.scroll.domNode;
  	    this.cursor = _parchment2.default.create('cursor', this);
  	    // savedRange is last non-null range
  	    this.lastRange = this.savedRange = new Range(0, 0);
  	    this.handleComposition();
  	    this.handleDragging();
  	    this.emitter.listenDOM('selectionchange', document, function () {
  	      if (!_this.mouseDown) {
  	        setTimeout(_this.update.bind(_this, _emitter4.default.sources.USER), 1);
  	      }
  	    });
  	    this.emitter.on(_emitter4.default.events.EDITOR_CHANGE, function (type, delta) {
  	      if (type === _emitter4.default.events.TEXT_CHANGE && delta.length() > 0) {
  	        _this.update(_emitter4.default.sources.SILENT);
  	      }
  	    });
  	    this.emitter.on(_emitter4.default.events.SCROLL_BEFORE_UPDATE, function () {
  	      if (!_this.hasFocus()) return;
  	      var native = _this.getNativeRange();
  	      if (native == null) return;
  	      if (native.start.node === _this.cursor.textNode) return; // cursor.restore() will handle
  	      // TODO unclear if this has negative side effects
  	      _this.emitter.once(_emitter4.default.events.SCROLL_UPDATE, function () {
  	        try {
  	          _this.setNativeRange(native.start.node, native.start.offset, native.end.node, native.end.offset);
  	        } catch (ignored) {}
  	      });
  	    });
  	    this.emitter.on(_emitter4.default.events.SCROLL_OPTIMIZE, function (mutations, context) {
  	      if (context.range) {
  	        var _context$range = context.range,
  	            startNode = _context$range.startNode,
  	            startOffset = _context$range.startOffset,
  	            endNode = _context$range.endNode,
  	            endOffset = _context$range.endOffset;

  	        _this.setNativeRange(startNode, startOffset, endNode, endOffset);
  	      }
  	    });
  	    this.update(_emitter4.default.sources.SILENT);
  	  }

  	  _createClass(Selection, [{
  	    key: 'handleComposition',
  	    value: function handleComposition() {
  	      var _this2 = this;

  	      this.root.addEventListener('compositionstart', function () {
  	        _this2.composing = true;
  	      });
  	      this.root.addEventListener('compositionend', function () {
  	        _this2.composing = false;
  	        if (_this2.cursor.parent) {
  	          var range = _this2.cursor.restore();
  	          if (!range) return;
  	          setTimeout(function () {
  	            _this2.setNativeRange(range.startNode, range.startOffset, range.endNode, range.endOffset);
  	          }, 1);
  	        }
  	      });
  	    }
  	  }, {
  	    key: 'handleDragging',
  	    value: function handleDragging() {
  	      var _this3 = this;

  	      this.emitter.listenDOM('mousedown', document.body, function () {
  	        _this3.mouseDown = true;
  	      });
  	      this.emitter.listenDOM('mouseup', document.body, function () {
  	        _this3.mouseDown = false;
  	        _this3.update(_emitter4.default.sources.USER);
  	      });
  	    }
  	  }, {
  	    key: 'focus',
  	    value: function focus() {
  	      if (this.hasFocus()) return;
  	      this.root.focus();
  	      this.setRange(this.savedRange);
  	    }
  	  }, {
  	    key: 'format',
  	    value: function format(_format, value) {
  	      if (this.scroll.whitelist != null && !this.scroll.whitelist[_format]) return;
  	      this.scroll.update();
  	      var nativeRange = this.getNativeRange();
  	      if (nativeRange == null || !nativeRange.native.collapsed || _parchment2.default.query(_format, _parchment2.default.Scope.BLOCK)) return;
  	      if (nativeRange.start.node !== this.cursor.textNode) {
  	        var blot = _parchment2.default.find(nativeRange.start.node, false);
  	        if (blot == null) return;
  	        // TODO Give blot ability to not split
  	        if (blot instanceof _parchment2.default.Leaf) {
  	          var after = blot.split(nativeRange.start.offset);
  	          blot.parent.insertBefore(this.cursor, after);
  	        } else {
  	          blot.insertBefore(this.cursor, nativeRange.start.node); // Should never happen
  	        }
  	        this.cursor.attach();
  	      }
  	      this.cursor.format(_format, value);
  	      this.scroll.optimize();
  	      this.setNativeRange(this.cursor.textNode, this.cursor.textNode.data.length);
  	      this.update();
  	    }
  	  }, {
  	    key: 'getBounds',
  	    value: function getBounds(index) {
  	      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

  	      var scrollLength = this.scroll.length();
  	      index = Math.min(index, scrollLength - 1);
  	      length = Math.min(index + length, scrollLength - 1) - index;
  	      var node = void 0,
  	          _scroll$leaf = this.scroll.leaf(index),
  	          _scroll$leaf2 = _slicedToArray(_scroll$leaf, 2),
  	          leaf = _scroll$leaf2[0],
  	          offset = _scroll$leaf2[1];
  	      if (leaf == null) return null;

  	      var _leaf$position = leaf.position(offset, true);

  	      var _leaf$position2 = _slicedToArray(_leaf$position, 2);

  	      node = _leaf$position2[0];
  	      offset = _leaf$position2[1];

  	      var range = document.createRange();
  	      if (length > 0) {
  	        range.setStart(node, offset);

  	        var _scroll$leaf3 = this.scroll.leaf(index + length);

  	        var _scroll$leaf4 = _slicedToArray(_scroll$leaf3, 2);

  	        leaf = _scroll$leaf4[0];
  	        offset = _scroll$leaf4[1];

  	        if (leaf == null) return null;

  	        var _leaf$position3 = leaf.position(offset, true);

  	        var _leaf$position4 = _slicedToArray(_leaf$position3, 2);

  	        node = _leaf$position4[0];
  	        offset = _leaf$position4[1];

  	        range.setEnd(node, offset);
  	        return range.getBoundingClientRect();
  	      } else {
  	        var side = 'left';
  	        var rect = void 0;
  	        if (node instanceof Text) {
  	          if (offset < node.data.length) {
  	            range.setStart(node, offset);
  	            range.setEnd(node, offset + 1);
  	          } else {
  	            range.setStart(node, offset - 1);
  	            range.setEnd(node, offset);
  	            side = 'right';
  	          }
  	          rect = range.getBoundingClientRect();
  	        } else {
  	          rect = leaf.domNode.getBoundingClientRect();
  	          if (offset > 0) side = 'right';
  	        }
  	        return {
  	          bottom: rect.top + rect.height,
  	          height: rect.height,
  	          left: rect[side],
  	          right: rect[side],
  	          top: rect.top,
  	          width: 0
  	        };
  	      }
  	    }
  	  }, {
  	    key: 'getNativeRange',
  	    value: function getNativeRange() {
  	      var selection = document.getSelection();
  	      if (selection == null || selection.rangeCount <= 0) return null;
  	      var nativeRange = selection.getRangeAt(0);
  	      if (nativeRange == null) return null;
  	      var range = this.normalizeNative(nativeRange);
  	      debug.info('getNativeRange', range);
  	      return range;
  	    }
  	  }, {
  	    key: 'getRange',
  	    value: function getRange() {
  	      var normalized = this.getNativeRange();
  	      if (normalized == null) return [null, null];
  	      var range = this.normalizedToRange(normalized);
  	      return [range, normalized];
  	    }
  	  }, {
  	    key: 'hasFocus',
  	    value: function hasFocus() {
  	      return document.activeElement === this.root;
  	    }
  	  }, {
  	    key: 'normalizedToRange',
  	    value: function normalizedToRange(range) {
  	      var _this4 = this;

  	      var positions = [[range.start.node, range.start.offset]];
  	      if (!range.native.collapsed) {
  	        positions.push([range.end.node, range.end.offset]);
  	      }
  	      var indexes = positions.map(function (position) {
  	        var _position = _slicedToArray(position, 2),
  	            node = _position[0],
  	            offset = _position[1];

  	        var blot = _parchment2.default.find(node, true);
  	        var index = blot.offset(_this4.scroll);
  	        if (offset === 0) {
  	          return index;
  	        } else if (blot instanceof _parchment2.default.Container) {
  	          return index + blot.length();
  	        } else {
  	          return index + blot.index(node, offset);
  	        }
  	      });
  	      var end = Math.min(Math.max.apply(Math, _toConsumableArray(indexes)), this.scroll.length() - 1);
  	      var start = Math.min.apply(Math, [end].concat(_toConsumableArray(indexes)));
  	      return new Range(start, end - start);
  	    }
  	  }, {
  	    key: 'normalizeNative',
  	    value: function normalizeNative(nativeRange) {
  	      if (!contains(this.root, nativeRange.startContainer) || !nativeRange.collapsed && !contains(this.root, nativeRange.endContainer)) {
  	        return null;
  	      }
  	      var range = {
  	        start: { node: nativeRange.startContainer, offset: nativeRange.startOffset },
  	        end: { node: nativeRange.endContainer, offset: nativeRange.endOffset },
  	        native: nativeRange
  	      };
  	      [range.start, range.end].forEach(function (position) {
  	        var node = position.node,
  	            offset = position.offset;
  	        while (!(node instanceof Text) && node.childNodes.length > 0) {
  	          if (node.childNodes.length > offset) {
  	            node = node.childNodes[offset];
  	            offset = 0;
  	          } else if (node.childNodes.length === offset) {
  	            node = node.lastChild;
  	            offset = node instanceof Text ? node.data.length : node.childNodes.length + 1;
  	          } else {
  	            break;
  	          }
  	        }
  	        position.node = node, position.offset = offset;
  	      });
  	      return range;
  	    }
  	  }, {
  	    key: 'rangeToNative',
  	    value: function rangeToNative(range) {
  	      var _this5 = this;

  	      var indexes = range.collapsed ? [range.index] : [range.index, range.index + range.length];
  	      var args = [];
  	      var scrollLength = this.scroll.length();
  	      indexes.forEach(function (index, i) {
  	        index = Math.min(scrollLength - 1, index);
  	        var node = void 0,
  	            _scroll$leaf5 = _this5.scroll.leaf(index),
  	            _scroll$leaf6 = _slicedToArray(_scroll$leaf5, 2),
  	            leaf = _scroll$leaf6[0],
  	            offset = _scroll$leaf6[1];
  	        var _leaf$position5 = leaf.position(offset, i !== 0);

  	        var _leaf$position6 = _slicedToArray(_leaf$position5, 2);

  	        node = _leaf$position6[0];
  	        offset = _leaf$position6[1];

  	        args.push(node, offset);
  	      });
  	      if (args.length < 2) {
  	        args = args.concat(args);
  	      }
  	      return args;
  	    }
  	  }, {
  	    key: 'scrollIntoView',
  	    value: function scrollIntoView(scrollingContainer) {
  	      var range = this.lastRange;
  	      if (range == null) return;
  	      var bounds = this.getBounds(range.index, range.length);
  	      if (bounds == null) return;
  	      var limit = this.scroll.length() - 1;

  	      var _scroll$line = this.scroll.line(Math.min(range.index, limit)),
  	          _scroll$line2 = _slicedToArray(_scroll$line, 1),
  	          first = _scroll$line2[0];

  	      var last = first;
  	      if (range.length > 0) {
  	        var _scroll$line3 = this.scroll.line(Math.min(range.index + range.length, limit));

  	        var _scroll$line4 = _slicedToArray(_scroll$line3, 1);

  	        last = _scroll$line4[0];
  	      }
  	      if (first == null || last == null) return;
  	      var scrollBounds = scrollingContainer.getBoundingClientRect();
  	      if (bounds.top < scrollBounds.top) {
  	        scrollingContainer.scrollTop -= scrollBounds.top - bounds.top;
  	      } else if (bounds.bottom > scrollBounds.bottom) {
  	        scrollingContainer.scrollTop += bounds.bottom - scrollBounds.bottom;
  	      }
  	    }
  	  }, {
  	    key: 'setNativeRange',
  	    value: function setNativeRange(startNode, startOffset) {
  	      var endNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : startNode;
  	      var endOffset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : startOffset;
  	      var force = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

  	      debug.info('setNativeRange', startNode, startOffset, endNode, endOffset);
  	      if (startNode != null && (this.root.parentNode == null || startNode.parentNode == null || endNode.parentNode == null)) {
  	        return;
  	      }
  	      var selection = document.getSelection();
  	      if (selection == null) return;
  	      if (startNode != null) {
  	        if (!this.hasFocus()) this.root.focus();
  	        var native = (this.getNativeRange() || {}).native;
  	        if (native == null || force || startNode !== native.startContainer || startOffset !== native.startOffset || endNode !== native.endContainer || endOffset !== native.endOffset) {

  	          if (startNode.tagName == "BR") {
  	            startOffset = [].indexOf.call(startNode.parentNode.childNodes, startNode);
  	            startNode = startNode.parentNode;
  	          }
  	          if (endNode.tagName == "BR") {
  	            endOffset = [].indexOf.call(endNode.parentNode.childNodes, endNode);
  	            endNode = endNode.parentNode;
  	          }
  	          var range = document.createRange();
  	          range.setStart(startNode, startOffset);
  	          range.setEnd(endNode, endOffset);
  	          selection.removeAllRanges();
  	          selection.addRange(range);
  	        }
  	      } else {
  	        selection.removeAllRanges();
  	        this.root.blur();
  	        document.body.focus(); // root.blur() not enough on IE11+Travis+SauceLabs (but not local VMs)
  	      }
  	    }
  	  }, {
  	    key: 'setRange',
  	    value: function setRange(range) {
  	      var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  	      var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _emitter4.default.sources.API;

  	      if (typeof force === 'string') {
  	        source = force;
  	        force = false;
  	      }
  	      debug.info('setRange', range);
  	      if (range != null) {
  	        var args = this.rangeToNative(range);
  	        this.setNativeRange.apply(this, _toConsumableArray(args).concat([force]));
  	      } else {
  	        this.setNativeRange(null);
  	      }
  	      this.update(source);
  	    }
  	  }, {
  	    key: 'update',
  	    value: function update() {
  	      var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _emitter4.default.sources.USER;

  	      var oldRange = this.lastRange;

  	      var _getRange = this.getRange(),
  	          _getRange2 = _slicedToArray(_getRange, 2),
  	          lastRange = _getRange2[0],
  	          nativeRange = _getRange2[1];

  	      this.lastRange = lastRange;
  	      if (this.lastRange != null) {
  	        this.savedRange = this.lastRange;
  	      }
  	      if (!(0, _deepEqual2.default)(oldRange, this.lastRange)) {
  	        var _emitter;

  	        if (!this.composing && nativeRange != null && nativeRange.native.collapsed && nativeRange.start.node !== this.cursor.textNode) {
  	          this.cursor.restore();
  	        }
  	        var args = [_emitter4.default.events.SELECTION_CHANGE, (0, _clone2.default)(this.lastRange), (0, _clone2.default)(oldRange), source];
  	        (_emitter = this.emitter).emit.apply(_emitter, [_emitter4.default.events.EDITOR_CHANGE].concat(args));
  	        if (source !== _emitter4.default.sources.SILENT) {
  	          var _emitter2;

  	          (_emitter2 = this.emitter).emit.apply(_emitter2, args);
  	        }
  	      }
  	    }
  	  }]);

  	  return Selection;
  	}();

  	function contains(parent, descendant) {
  	  try {
  	    // Firefox inserts inaccessible nodes around video elements
  	    descendant.parentNode;
  	  } catch (e) {
  	    return false;
  	  }
  	  // IE11 has bug with Text nodes
  	  // https://connect.microsoft.com/IE/feedback/details/780874/node-contains-is-incorrect
  	  if (descendant instanceof Text) {
  	    descendant = descendant.parentNode;
  	  }
  	  return parent.contains(descendant);
  	}

  	exports.Range = Range;
  	exports.default = Selection;

  	/***/ }),
  	/* 16 */
  	/***/ (function(module, exports, __webpack_require__) {


  	Object.defineProperty(exports, "__esModule", {
  	  value: true
  	});

  	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  	var _parchment = __webpack_require__(0);

  	var _parchment2 = _interopRequireDefault(_parchment);

  	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  	var Break = function (_Parchment$Embed) {
  	  _inherits(Break, _Parchment$Embed);

  	  function Break() {
  	    _classCallCheck(this, Break);

  	    return _possibleConstructorReturn(this, (Break.__proto__ || Object.getPrototypeOf(Break)).apply(this, arguments));
  	  }

  	  _createClass(Break, [{
  	    key: 'insertInto',
  	    value: function insertInto(parent, ref) {
  	      if (parent.children.length === 0) {
  	        _get(Break.prototype.__proto__ || Object.getPrototypeOf(Break.prototype), 'insertInto', this).call(this, parent, ref);
  	      } else {
  	        this.remove();
  	      }
  	    }
  	  }, {
  	    key: 'length',
  	    value: function length() {
  	      return 0;
  	    }
  	  }, {
  	    key: 'value',
  	    value: function value() {
  	      return '';
  	    }
  	  }], [{
  	    key: 'value',
  	    value: function value() {
  	      return undefined;
  	    }
  	  }]);

  	  return Break;
  	}(_parchment2.default.Embed);

  	Break.blotName = 'break';
  	Break.tagName = 'BR';

  	exports.default = Break;

  	/***/ }),
  	/* 17 */
  	/***/ (function(module, exports, __webpack_require__) {

  	var __extends = (this && this.__extends) || (function () {
  	    var extendStatics = Object.setPrototypeOf ||
  	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
  	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
  	    return function (d, b) {
  	        extendStatics(d, b);
  	        function __() { this.constructor = d; }
  	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  	    };
  	})();
  	Object.defineProperty(exports, "__esModule", { value: true });
  	var linked_list_1 = __webpack_require__(44);
  	var shadow_1 = __webpack_require__(30);
  	var Registry = __webpack_require__(1);
  	var ContainerBlot = /** @class */ (function (_super) {
  	    __extends(ContainerBlot, _super);
  	    function ContainerBlot(domNode) {
  	        var _this = _super.call(this, domNode) || this;
  	        _this.build();
  	        return _this;
  	    }
  	    ContainerBlot.prototype.appendChild = function (other) {
  	        this.insertBefore(other);
  	    };
  	    ContainerBlot.prototype.attach = function () {
  	        _super.prototype.attach.call(this);
  	        this.children.forEach(function (child) {
  	            child.attach();
  	        });
  	    };
  	    ContainerBlot.prototype.build = function () {
  	        var _this = this;
  	        this.children = new linked_list_1.default();
  	        // Need to be reversed for if DOM nodes already in order
  	        [].slice
  	            .call(this.domNode.childNodes)
  	            .reverse()
  	            .forEach(function (node) {
  	            try {
  	                var child = makeBlot(node);
  	                _this.insertBefore(child, _this.children.head || undefined);
  	            }
  	            catch (err) {
  	                if (err instanceof Registry.ParchmentError)
  	                    return;
  	                else
  	                    throw err;
  	            }
  	        });
  	    };
  	    ContainerBlot.prototype.deleteAt = function (index, length) {
  	        if (index === 0 && length === this.length()) {
  	            return this.remove();
  	        }
  	        this.children.forEachAt(index, length, function (child, offset, length) {
  	            child.deleteAt(offset, length);
  	        });
  	    };
  	    ContainerBlot.prototype.descendant = function (criteria, index) {
  	        var _a = this.children.find(index), child = _a[0], offset = _a[1];
  	        if ((criteria.blotName == null && criteria(child)) ||
  	            (criteria.blotName != null && child instanceof criteria)) {
  	            return [child, offset];
  	        }
  	        else if (child instanceof ContainerBlot) {
  	            return child.descendant(criteria, offset);
  	        }
  	        else {
  	            return [null, -1];
  	        }
  	    };
  	    ContainerBlot.prototype.descendants = function (criteria, index, length) {
  	        if (index === void 0) { index = 0; }
  	        if (length === void 0) { length = Number.MAX_VALUE; }
  	        var descendants = [];
  	        var lengthLeft = length;
  	        this.children.forEachAt(index, length, function (child, index, length) {
  	            if ((criteria.blotName == null && criteria(child)) ||
  	                (criteria.blotName != null && child instanceof criteria)) {
  	                descendants.push(child);
  	            }
  	            if (child instanceof ContainerBlot) {
  	                descendants = descendants.concat(child.descendants(criteria, index, lengthLeft));
  	            }
  	            lengthLeft -= length;
  	        });
  	        return descendants;
  	    };
  	    ContainerBlot.prototype.detach = function () {
  	        this.children.forEach(function (child) {
  	            child.detach();
  	        });
  	        _super.prototype.detach.call(this);
  	    };
  	    ContainerBlot.prototype.formatAt = function (index, length, name, value) {
  	        this.children.forEachAt(index, length, function (child, offset, length) {
  	            child.formatAt(offset, length, name, value);
  	        });
  	    };
  	    ContainerBlot.prototype.insertAt = function (index, value, def) {
  	        var _a = this.children.find(index), child = _a[0], offset = _a[1];
  	        if (child) {
  	            child.insertAt(offset, value, def);
  	        }
  	        else {
  	            var blot = def == null ? Registry.create('text', value) : Registry.create(value, def);
  	            this.appendChild(blot);
  	        }
  	    };
  	    ContainerBlot.prototype.insertBefore = function (childBlot, refBlot) {
  	        if (this.statics.allowedChildren != null &&
  	            !this.statics.allowedChildren.some(function (child) {
  	                return childBlot instanceof child;
  	            })) {
  	            throw new Registry.ParchmentError("Cannot insert " + childBlot.statics.blotName + " into " + this.statics.blotName);
  	        }
  	        childBlot.insertInto(this, refBlot);
  	    };
  	    ContainerBlot.prototype.length = function () {
  	        return this.children.reduce(function (memo, child) {
  	            return memo + child.length();
  	        }, 0);
  	    };
  	    ContainerBlot.prototype.moveChildren = function (targetParent, refNode) {
  	        this.children.forEach(function (child) {
  	            targetParent.insertBefore(child, refNode);
  	        });
  	    };
  	    ContainerBlot.prototype.optimize = function (context) {
  	        _super.prototype.optimize.call(this, context);
  	        if (this.children.length === 0) {
  	            if (this.statics.defaultChild != null) {
  	                var child = Registry.create(this.statics.defaultChild);
  	                this.appendChild(child);
  	                child.optimize(context);
  	            }
  	            else {
  	                this.remove();
  	            }
  	        }
  	    };
  	    ContainerBlot.prototype.path = function (index, inclusive) {
  	        if (inclusive === void 0) { inclusive = false; }
  	        var _a = this.children.find(index, inclusive), child = _a[0], offset = _a[1];
  	        var position = [[this, index]];
  	        if (child instanceof ContainerBlot) {
  	            return position.concat(child.path(offset, inclusive));
  	        }
  	        else if (child != null) {
  	            position.push([child, offset]);
  	        }
  	        return position;
  	    };
  	    ContainerBlot.prototype.removeChild = function (child) {
  	        this.children.remove(child);
  	    };
  	    ContainerBlot.prototype.replace = function (target) {
  	        if (target instanceof ContainerBlot) {
  	            target.moveChildren(this);
  	        }
  	        _super.prototype.replace.call(this, target);
  	    };
  	    ContainerBlot.prototype.split = function (index, force) {
  	        if (force === void 0) { force = false; }
  	        if (!force) {
  	            if (index === 0)
  	                return this;
  	            if (index === this.length())
  	                return this.next;
  	        }
  	        var after = this.clone();
  	        this.parent.insertBefore(after, this.next);
  	        this.children.forEachAt(index, this.length(), function (child, offset, length) {
  	            child = child.split(offset, force);
  	            after.appendChild(child);
  	        });
  	        return after;
  	    };
  	    ContainerBlot.prototype.unwrap = function () {
  	        this.moveChildren(this.parent, this.next);
  	        this.remove();
  	    };
  	    ContainerBlot.prototype.update = function (mutations, context) {
  	        var _this = this;
  	        var addedNodes = [];
  	        var removedNodes = [];
  	        mutations.forEach(function (mutation) {
  	            if (mutation.target === _this.domNode && mutation.type === 'childList') {
  	                addedNodes.push.apply(addedNodes, mutation.addedNodes);
  	                removedNodes.push.apply(removedNodes, mutation.removedNodes);
  	            }
  	        });
  	        removedNodes.forEach(function (node) {
  	            // Check node has actually been removed
  	            // One exception is Chrome does not immediately remove IFRAMEs
  	            // from DOM but MutationRecord is correct in its reported removal
  	            if (node.parentNode != null &&
  	                // @ts-ignore
  	                node.tagName !== 'IFRAME' &&
  	                document.body.compareDocumentPosition(node) & Node.DOCUMENT_POSITION_CONTAINED_BY) {
  	                return;
  	            }
  	            var blot = Registry.find(node);
  	            if (blot == null)
  	                return;
  	            if (blot.domNode.parentNode == null || blot.domNode.parentNode === _this.domNode) {
  	                blot.detach();
  	            }
  	        });
  	        addedNodes
  	            .filter(function (node) {
  	            return node.parentNode == _this.domNode;
  	        })
  	            .sort(function (a, b) {
  	            if (a === b)
  	                return 0;
  	            if (a.compareDocumentPosition(b) & Node.DOCUMENT_POSITION_FOLLOWING) {
  	                return 1;
  	            }
  	            return -1;
  	        })
  	            .forEach(function (node) {
  	            var refBlot = null;
  	            if (node.nextSibling != null) {
  	                refBlot = Registry.find(node.nextSibling);
  	            }
  	            var blot = makeBlot(node);
  	            if (blot.next != refBlot || blot.next == null) {
  	                if (blot.parent != null) {
  	                    blot.parent.removeChild(_this);
  	                }
  	                _this.insertBefore(blot, refBlot || undefined);
  	            }
  	        });
  	    };
  	    return ContainerBlot;
  	}(shadow_1.default));
  	function makeBlot(node) {
  	    var blot = Registry.find(node);
  	    if (blot == null) {
  	        try {
  	            blot = Registry.create(node);
  	        }
  	        catch (e) {
  	            blot = Registry.create(Registry.Scope.INLINE);
  	            [].slice.call(node.childNodes).forEach(function (child) {
  	                // @ts-ignore
  	                blot.domNode.appendChild(child);
  	            });
  	            if (node.parentNode) {
  	                node.parentNode.replaceChild(blot.domNode, node);
  	            }
  	            blot.attach();
  	        }
  	    }
  	    return blot;
  	}
  	exports.default = ContainerBlot;


  	/***/ }),
  	/* 18 */
  	/***/ (function(module, exports, __webpack_require__) {

  	var __extends = (this && this.__extends) || (function () {
  	    var extendStatics = Object.setPrototypeOf ||
  	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
  	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
  	    return function (d, b) {
  	        extendStatics(d, b);
  	        function __() { this.constructor = d; }
  	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  	    };
  	})();
  	Object.defineProperty(exports, "__esModule", { value: true });
  	var attributor_1 = __webpack_require__(12);
  	var store_1 = __webpack_require__(31);
  	var container_1 = __webpack_require__(17);
  	var Registry = __webpack_require__(1);
  	var FormatBlot = /** @class */ (function (_super) {
  	    __extends(FormatBlot, _super);
  	    function FormatBlot(domNode) {
  	        var _this = _super.call(this, domNode) || this;
  	        _this.attributes = new store_1.default(_this.domNode);
  	        return _this;
  	    }
  	    FormatBlot.formats = function (domNode) {
  	        if (typeof this.tagName === 'string') {
  	            return true;
  	        }
  	        else if (Array.isArray(this.tagName)) {
  	            return domNode.tagName.toLowerCase();
  	        }
  	        return undefined;
  	    };
  	    FormatBlot.prototype.format = function (name, value) {
  	        var format = Registry.query(name);
  	        if (format instanceof attributor_1.default) {
  	            this.attributes.attribute(format, value);
  	        }
  	        else if (value) {
  	            if (format != null && (name !== this.statics.blotName || this.formats()[name] !== value)) {
  	                this.replaceWith(name, value);
  	            }
  	        }
  	    };
  	    FormatBlot.prototype.formats = function () {
  	        var formats = this.attributes.values();
  	        var format = this.statics.formats(this.domNode);
  	        if (format != null) {
  	            formats[this.statics.blotName] = format;
  	        }
  	        return formats;
  	    };
  	    FormatBlot.prototype.replaceWith = function (name, value) {
  	        var replacement = _super.prototype.replaceWith.call(this, name, value);
  	        this.attributes.copy(replacement);
  	        return replacement;
  	    };
  	    FormatBlot.prototype.update = function (mutations, context) {
  	        var _this = this;
  	        _super.prototype.update.call(this, mutations, context);
  	        if (mutations.some(function (mutation) {
  	            return mutation.target === _this.domNode && mutation.type === 'attributes';
  	        })) {
  	            this.attributes.build();
  	        }
  	    };
  	    FormatBlot.prototype.wrap = function (name, value) {
  	        var wrapper = _super.prototype.wrap.call(this, name, value);
  	        if (wrapper instanceof FormatBlot && wrapper.statics.scope === this.statics.scope) {
  	            this.attributes.move(wrapper);
  	        }
  	        return wrapper;
  	    };
  	    return FormatBlot;
  	}(container_1.default));
  	exports.default = FormatBlot;


  	/***/ }),
  	/* 19 */
  	/***/ (function(module, exports, __webpack_require__) {

  	var __extends = (this && this.__extends) || (function () {
  	    var extendStatics = Object.setPrototypeOf ||
  	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
  	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
  	    return function (d, b) {
  	        extendStatics(d, b);
  	        function __() { this.constructor = d; }
  	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  	    };
  	})();
  	Object.defineProperty(exports, "__esModule", { value: true });
  	var shadow_1 = __webpack_require__(30);
  	var Registry = __webpack_require__(1);
  	var LeafBlot = /** @class */ (function (_super) {
  	    __extends(LeafBlot, _super);
  	    function LeafBlot() {
  	        return _super !== null && _super.apply(this, arguments) || this;
  	    }
  	    LeafBlot.value = function (domNode) {
  	        return true;
  	    };
  	    LeafBlot.prototype.index = function (node, offset) {
  	        if (this.domNode === node ||
  	            this.domNode.compareDocumentPosition(node) & Node.DOCUMENT_POSITION_CONTAINED_BY) {
  	            return Math.min(offset, 1);
  	        }
  	        return -1;
  	    };
  	    LeafBlot.prototype.position = function (index, inclusive) {
  	        var offset = [].indexOf.call(this.parent.domNode.childNodes, this.domNode);
  	        if (index > 0)
  	            offset += 1;
  	        return [this.parent.domNode, offset];
  	    };
  	    LeafBlot.prototype.value = function () {
  	        var _a;
  	        return _a = {}, _a[this.statics.blotName] = this.statics.value(this.domNode) || true, _a;
  	    };
  	    LeafBlot.scope = Registry.Scope.INLINE_BLOT;
  	    return LeafBlot;
  	}(shadow_1.default));
  	exports.default = LeafBlot;


  	/***/ }),
  	/* 20 */
  	/***/ (function(module, exports, __webpack_require__) {

  	var equal = __webpack_require__(11);
  	var extend = __webpack_require__(3);


  	var lib = {
  	  attributes: {
  	    compose: function (a, b, keepNull) {
  	      if (typeof a !== 'object') a = {};
  	      if (typeof b !== 'object') b = {};
  	      var attributes = extend(true, {}, b);
  	      if (!keepNull) {
  	        attributes = Object.keys(attributes).reduce(function (copy, key) {
  	          if (attributes[key] != null) {
  	            copy[key] = attributes[key];
  	          }
  	          return copy;
  	        }, {});
  	      }
  	      for (var key in a) {
  	        if (a[key] !== undefined && b[key] === undefined) {
  	          attributes[key] = a[key];
  	        }
  	      }
  	      return Object.keys(attributes).length > 0 ? attributes : undefined;
  	    },

  	    diff: function(a, b) {
  	      if (typeof a !== 'object') a = {};
  	      if (typeof b !== 'object') b = {};
  	      var attributes = Object.keys(a).concat(Object.keys(b)).reduce(function (attributes, key) {
  	        if (!equal(a[key], b[key])) {
  	          attributes[key] = b[key] === undefined ? null : b[key];
  	        }
  	        return attributes;
  	      }, {});
  	      return Object.keys(attributes).length > 0 ? attributes : undefined;
  	    },

  	    transform: function (a, b, priority) {
  	      if (typeof a !== 'object') return b;
  	      if (typeof b !== 'object') return undefined;
  	      if (!priority) return b;  // b simply overwrites us without priority
  	      var attributes = Object.keys(b).reduce(function (attributes, key) {
  	        if (a[key] === undefined) attributes[key] = b[key];  // null is a valid value
  	        return attributes;
  	      }, {});
  	      return Object.keys(attributes).length > 0 ? attributes : undefined;
  	    }
  	  },

  	  iterator: function (ops) {
  	    return new Iterator(ops);
  	  },

  	  length: function (op) {
  	    if (typeof op['delete'] === 'number') {
  	      return op['delete'];
  	    } else if (typeof op.retain === 'number') {
  	      return op.retain;
  	    } else {
  	      return typeof op.insert === 'string' ? op.insert.length : 1;
  	    }
  	  }
  	};


  	function Iterator(ops) {
  	  this.ops = ops;
  	  this.index = 0;
  	  this.offset = 0;
  	}
  	Iterator.prototype.hasNext = function () {
  	  return this.peekLength() < Infinity;
  	};

  	Iterator.prototype.next = function (length) {
  	  if (!length) length = Infinity;
  	  var nextOp = this.ops[this.index];
  	  if (nextOp) {
  	    var offset = this.offset;
  	    var opLength = lib.length(nextOp);
  	    if (length >= opLength - offset) {
  	      length = opLength - offset;
  	      this.index += 1;
  	      this.offset = 0;
  	    } else {
  	      this.offset += length;
  	    }
  	    if (typeof nextOp['delete'] === 'number') {
  	      return { 'delete': length };
  	    } else {
  	      var retOp = {};
  	      if (nextOp.attributes) {
  	        retOp.attributes = nextOp.attributes;
  	      }
  	      if (typeof nextOp.retain === 'number') {
  	        retOp.retain = length;
  	      } else if (typeof nextOp.insert === 'string') {
  	        retOp.insert = nextOp.insert.substr(offset, length);
  	      } else {
  	        // offset should === 0, length should === 1
  	        retOp.insert = nextOp.insert;
  	      }
  	      return retOp;
  	    }
  	  } else {
  	    return { retain: Infinity };
  	  }
  	};

  	Iterator.prototype.peek = function () {
  	  return this.ops[this.index];
  	};

  	Iterator.prototype.peekLength = function () {
  	  if (this.ops[this.index]) {
  	    // Should never return 0 if our index is being managed correctly
  	    return lib.length(this.ops[this.index]) - this.offset;
  	  } else {
  	    return Infinity;
  	  }
  	};

  	Iterator.prototype.peekType = function () {
  	  if (this.ops[this.index]) {
  	    if (typeof this.ops[this.index]['delete'] === 'number') {
  	      return 'delete';
  	    } else if (typeof this.ops[this.index].retain === 'number') {
  	      return 'retain';
  	    } else {
  	      return 'insert';
  	    }
  	  }
  	  return 'retain';
  	};

  	Iterator.prototype.rest = function () {
  	  if (!this.hasNext()) {
  	    return [];
  	  } else if (this.offset === 0) {
  	    return this.ops.slice(this.index);
  	  } else {
  	    var offset = this.offset;
  	    var index = this.index;
  	    var next = this.next();
  	    var rest = this.ops.slice(this.index);
  	    this.offset = offset;
  	    this.index = index;
  	    return [next].concat(rest);
  	  }
  	};


  	module.exports = lib;


  	/***/ }),
  	/* 21 */
  	/***/ (function(module, exports) {

  	var clone = (function() {

  	function _instanceof(obj, type) {
  	  return type != null && obj instanceof type;
  	}

  	var nativeMap;
  	try {
  	  nativeMap = Map;
  	} catch(_) {
  	  // maybe a reference error because no `Map`. Give it a dummy value that no
  	  // value will ever be an instanceof.
  	  nativeMap = function() {};
  	}

  	var nativeSet;
  	try {
  	  nativeSet = Set;
  	} catch(_) {
  	  nativeSet = function() {};
  	}

  	var nativePromise;
  	try {
  	  nativePromise = Promise;
  	} catch(_) {
  	  nativePromise = function() {};
  	}

  	/**
  	 * Clones (copies) an Object using deep copying.
  	 *
  	 * This function supports circular references by default, but if you are certain
  	 * there are no circular references in your object, you can save some CPU time
  	 * by calling clone(obj, false).
  	 *
  	 * Caution: if `circular` is false and `parent` contains circular references,
  	 * your program may enter an infinite loop and crash.
  	 *
  	 * @param `parent` - the object to be cloned
  	 * @param `circular` - set to true if the object to be cloned may contain
  	 *    circular references. (optional - true by default)
  	 * @param `depth` - set to a number if the object is only to be cloned to
  	 *    a particular depth. (optional - defaults to Infinity)
  	 * @param `prototype` - sets the prototype to be used when cloning an object.
  	 *    (optional - defaults to parent prototype).
  	 * @param `includeNonEnumerable` - set to true if the non-enumerable properties
  	 *    should be cloned as well. Non-enumerable properties on the prototype
  	 *    chain will be ignored. (optional - false by default)
  	*/
  	function clone(parent, circular, depth, prototype, includeNonEnumerable) {
  	  if (typeof circular === 'object') {
  	    depth = circular.depth;
  	    prototype = circular.prototype;
  	    includeNonEnumerable = circular.includeNonEnumerable;
  	    circular = circular.circular;
  	  }
  	  // maintain two arrays for circular references, where corresponding parents
  	  // and children have the same index
  	  var allParents = [];
  	  var allChildren = [];

  	  var useBuffer = typeof Buffer != 'undefined';

  	  if (typeof circular == 'undefined')
  	    circular = true;

  	  if (typeof depth == 'undefined')
  	    depth = Infinity;

  	  // recurse this function so we don't reset allParents and allChildren
  	  function _clone(parent, depth) {
  	    // cloning null always returns null
  	    if (parent === null)
  	      return null;

  	    if (depth === 0)
  	      return parent;

  	    var child;
  	    var proto;
  	    if (typeof parent != 'object') {
  	      return parent;
  	    }

  	    if (_instanceof(parent, nativeMap)) {
  	      child = new nativeMap();
  	    } else if (_instanceof(parent, nativeSet)) {
  	      child = new nativeSet();
  	    } else if (_instanceof(parent, nativePromise)) {
  	      child = new nativePromise(function (resolve, reject) {
  	        parent.then(function(value) {
  	          resolve(_clone(value, depth - 1));
  	        }, function(err) {
  	          reject(_clone(err, depth - 1));
  	        });
  	      });
  	    } else if (clone.__isArray(parent)) {
  	      child = [];
  	    } else if (clone.__isRegExp(parent)) {
  	      child = new RegExp(parent.source, __getRegExpFlags(parent));
  	      if (parent.lastIndex) child.lastIndex = parent.lastIndex;
  	    } else if (clone.__isDate(parent)) {
  	      child = new Date(parent.getTime());
  	    } else if (useBuffer && Buffer.isBuffer(parent)) {
  	      if (Buffer.allocUnsafe) {
  	        // Node.js >= 4.5.0
  	        child = Buffer.allocUnsafe(parent.length);
  	      } else {
  	        // Older Node.js versions
  	        child = new Buffer(parent.length);
  	      }
  	      parent.copy(child);
  	      return child;
  	    } else if (_instanceof(parent, Error)) {
  	      child = Object.create(parent);
  	    } else {
  	      if (typeof prototype == 'undefined') {
  	        proto = Object.getPrototypeOf(parent);
  	        child = Object.create(proto);
  	      }
  	      else {
  	        child = Object.create(prototype);
  	        proto = prototype;
  	      }
  	    }

  	    if (circular) {
  	      var index = allParents.indexOf(parent);

  	      if (index != -1) {
  	        return allChildren[index];
  	      }
  	      allParents.push(parent);
  	      allChildren.push(child);
  	    }

  	    if (_instanceof(parent, nativeMap)) {
  	      parent.forEach(function(value, key) {
  	        var keyChild = _clone(key, depth - 1);
  	        var valueChild = _clone(value, depth - 1);
  	        child.set(keyChild, valueChild);
  	      });
  	    }
  	    if (_instanceof(parent, nativeSet)) {
  	      parent.forEach(function(value) {
  	        var entryChild = _clone(value, depth - 1);
  	        child.add(entryChild);
  	      });
  	    }

  	    for (var i in parent) {
  	      var attrs;
  	      if (proto) {
  	        attrs = Object.getOwnPropertyDescriptor(proto, i);
  	      }

  	      if (attrs && attrs.set == null) {
  	        continue;
  	      }
  	      child[i] = _clone(parent[i], depth - 1);
  	    }

  	    if (Object.getOwnPropertySymbols) {
  	      var symbols = Object.getOwnPropertySymbols(parent);
  	      for (var i = 0; i < symbols.length; i++) {
  	        // Don't need to worry about cloning a symbol because it is a primitive,
  	        // like a number or string.
  	        var symbol = symbols[i];
  	        var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);
  	        if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {
  	          continue;
  	        }
  	        child[symbol] = _clone(parent[symbol], depth - 1);
  	        if (!descriptor.enumerable) {
  	          Object.defineProperty(child, symbol, {
  	            enumerable: false
  	          });
  	        }
  	      }
  	    }

  	    if (includeNonEnumerable) {
  	      var allPropertyNames = Object.getOwnPropertyNames(parent);
  	      for (var i = 0; i < allPropertyNames.length; i++) {
  	        var propertyName = allPropertyNames[i];
  	        var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);
  	        if (descriptor && descriptor.enumerable) {
  	          continue;
  	        }
  	        child[propertyName] = _clone(parent[propertyName], depth - 1);
  	        Object.defineProperty(child, propertyName, {
  	          enumerable: false
  	        });
  	      }
  	    }

  	    return child;
  	  }

  	  return _clone(parent, depth);
  	}

  	/**
  	 * Simple flat clone using prototype, accepts only objects, usefull for property
  	 * override on FLAT configuration object (no nested props).
  	 *
  	 * USE WITH CAUTION! This may not behave as you wish if you do not know how this
  	 * works.
  	 */
  	clone.clonePrototype = function clonePrototype(parent) {
  	  if (parent === null)
  	    return null;

  	  var c = function () {};
  	  c.prototype = parent;
  	  return new c();
  	};

  	// private utility functions

  	function __objToStr(o) {
  	  return Object.prototype.toString.call(o);
  	}
  	clone.__objToStr = __objToStr;

  	function __isDate(o) {
  	  return typeof o === 'object' && __objToStr(o) === '[object Date]';
  	}
  	clone.__isDate = __isDate;

  	function __isArray(o) {
  	  return typeof o === 'object' && __objToStr(o) === '[object Array]';
  	}
  	clone.__isArray = __isArray;

  	function __isRegExp(o) {
  	  return typeof o === 'object' && __objToStr(o) === '[object RegExp]';
  	}
  	clone.__isRegExp = __isRegExp;

  	function __getRegExpFlags(re) {
  	  var flags = '';
  	  if (re.global) flags += 'g';
  	  if (re.ignoreCase) flags += 'i';
  	  if (re.multiline) flags += 'm';
  	  return flags;
  	}
  	clone.__getRegExpFlags = __getRegExpFlags;

  	return clone;
  	})();

  	if (typeof module === 'object' && module.exports) {
  	  module.exports = clone;
  	}


  	/***/ }),
  	/* 22 */
  	/***/ (function(module, exports, __webpack_require__) {


  	Object.defineProperty(exports, "__esModule", {
  	  value: true
  	});

  	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

  	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  	var _parchment = __webpack_require__(0);

  	var _parchment2 = _interopRequireDefault(_parchment);

  	var _emitter = __webpack_require__(8);

  	var _emitter2 = _interopRequireDefault(_emitter);

  	var _block = __webpack_require__(4);

  	var _block2 = _interopRequireDefault(_block);

  	var _break = __webpack_require__(16);

  	var _break2 = _interopRequireDefault(_break);

  	var _code = __webpack_require__(13);

  	var _code2 = _interopRequireDefault(_code);

  	var _container = __webpack_require__(25);

  	var _container2 = _interopRequireDefault(_container);

  	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  	function isLine(blot) {
  	  return blot instanceof _block2.default || blot instanceof _block.BlockEmbed;
  	}

  	var Scroll = function (_Parchment$Scroll) {
  	  _inherits(Scroll, _Parchment$Scroll);

  	  function Scroll(domNode, config) {
  	    _classCallCheck(this, Scroll);

  	    var _this = _possibleConstructorReturn(this, (Scroll.__proto__ || Object.getPrototypeOf(Scroll)).call(this, domNode));

  	    _this.emitter = config.emitter;
  	    if (Array.isArray(config.whitelist)) {
  	      _this.whitelist = config.whitelist.reduce(function (whitelist, format) {
  	        whitelist[format] = true;
  	        return whitelist;
  	      }, {});
  	    }
  	    // Some reason fixes composition issues with character languages in Windows/Chrome, Safari
  	    _this.domNode.addEventListener('DOMNodeInserted', function () {});
  	    _this.optimize();
  	    _this.enable();
  	    return _this;
  	  }

  	  _createClass(Scroll, [{
  	    key: 'batchStart',
  	    value: function batchStart() {
  	      this.batch = true;
  	    }
  	  }, {
  	    key: 'batchEnd',
  	    value: function batchEnd() {
  	      this.batch = false;
  	      this.optimize();
  	    }
  	  }, {
  	    key: 'deleteAt',
  	    value: function deleteAt(index, length) {
  	      var _line = this.line(index),
  	          _line2 = _slicedToArray(_line, 2),
  	          first = _line2[0],
  	          offset = _line2[1];

  	      var _line3 = this.line(index + length),
  	          _line4 = _slicedToArray(_line3, 1),
  	          last = _line4[0];

  	      _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'deleteAt', this).call(this, index, length);
  	      if (last != null && first !== last && offset > 0) {
  	        if (first instanceof _block.BlockEmbed || last instanceof _block.BlockEmbed) {
  	          this.optimize();
  	          return;
  	        }
  	        if (first instanceof _code2.default) {
  	          var newlineIndex = first.newlineIndex(first.length(), true);
  	          if (newlineIndex > -1) {
  	            first = first.split(newlineIndex + 1);
  	            if (first === last) {
  	              this.optimize();
  	              return;
  	            }
  	          }
  	        } else if (last instanceof _code2.default) {
  	          var _newlineIndex = last.newlineIndex(0);
  	          if (_newlineIndex > -1) {
  	            last.split(_newlineIndex + 1);
  	          }
  	        }
  	        var ref = last.children.head instanceof _break2.default ? null : last.children.head;
  	        first.moveChildren(last, ref);
  	        first.remove();
  	      }
  	      this.optimize();
  	    }
  	  }, {
  	    key: 'enable',
  	    value: function enable() {
  	      var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

  	      this.domNode.setAttribute('contenteditable', enabled);
  	    }
  	  }, {
  	    key: 'formatAt',
  	    value: function formatAt(index, length, format, value) {
  	      if (this.whitelist != null && !this.whitelist[format]) return;
  	      _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'formatAt', this).call(this, index, length, format, value);
  	      this.optimize();
  	    }
  	  }, {
  	    key: 'insertAt',
  	    value: function insertAt(index, value, def) {
  	      if (def != null && this.whitelist != null && !this.whitelist[value]) return;
  	      if (index >= this.length()) {
  	        if (def == null || _parchment2.default.query(value, _parchment2.default.Scope.BLOCK) == null) {
  	          var blot = _parchment2.default.create(this.statics.defaultChild);
  	          this.appendChild(blot);
  	          if (def == null && value.endsWith('\n')) {
  	            value = value.slice(0, -1);
  	          }
  	          blot.insertAt(0, value, def);
  	        } else {
  	          var embed = _parchment2.default.create(value, def);
  	          this.appendChild(embed);
  	        }
  	      } else {
  	        _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'insertAt', this).call(this, index, value, def);
  	      }
  	      this.optimize();
  	    }
  	  }, {
  	    key: 'insertBefore',
  	    value: function insertBefore(blot, ref) {
  	      if (blot.statics.scope === _parchment2.default.Scope.INLINE_BLOT) {
  	        var wrapper = _parchment2.default.create(this.statics.defaultChild);
  	        wrapper.appendChild(blot);
  	        blot = wrapper;
  	      }
  	      _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'insertBefore', this).call(this, blot, ref);
  	    }
  	  }, {
  	    key: 'leaf',
  	    value: function leaf(index) {
  	      return this.path(index).pop() || [null, -1];
  	    }
  	  }, {
  	    key: 'line',
  	    value: function line(index) {
  	      if (index === this.length()) {
  	        return this.line(index - 1);
  	      }
  	      return this.descendant(isLine, index);
  	    }
  	  }, {
  	    key: 'lines',
  	    value: function lines() {
  	      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  	      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.MAX_VALUE;

  	      var getLines = function getLines(blot, index, length) {
  	        var lines = [],
  	            lengthLeft = length;
  	        blot.children.forEachAt(index, length, function (child, index, length) {
  	          if (isLine(child)) {
  	            lines.push(child);
  	          } else if (child instanceof _parchment2.default.Container) {
  	            lines = lines.concat(getLines(child, index, lengthLeft));
  	          }
  	          lengthLeft -= length;
  	        });
  	        return lines;
  	      };
  	      return getLines(this, index, length);
  	    }
  	  }, {
  	    key: 'optimize',
  	    value: function optimize() {
  	      var mutations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  	      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  	      if (this.batch === true) return;
  	      _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'optimize', this).call(this, mutations, context);
  	      if (mutations.length > 0) {
  	        this.emitter.emit(_emitter2.default.events.SCROLL_OPTIMIZE, mutations, context);
  	      }
  	    }
  	  }, {
  	    key: 'path',
  	    value: function path(index) {
  	      return _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'path', this).call(this, index).slice(1); // Exclude self
  	    }
  	  }, {
  	    key: 'update',
  	    value: function update(mutations) {
  	      if (this.batch === true) return;
  	      var source = _emitter2.default.sources.USER;
  	      if (typeof mutations === 'string') {
  	        source = mutations;
  	      }
  	      if (!Array.isArray(mutations)) {
  	        mutations = this.observer.takeRecords();
  	      }
  	      if (mutations.length > 0) {
  	        this.emitter.emit(_emitter2.default.events.SCROLL_BEFORE_UPDATE, source, mutations);
  	      }
  	      _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'update', this).call(this, mutations.concat([])); // pass copy
  	      if (mutations.length > 0) {
  	        this.emitter.emit(_emitter2.default.events.SCROLL_UPDATE, source, mutations);
  	      }
  	    }
  	  }]);

  	  return Scroll;
  	}(_parchment2.default.Scroll);

  	Scroll.blotName = 'scroll';
  	Scroll.className = 'ql-editor';
  	Scroll.tagName = 'DIV';
  	Scroll.defaultChild = 'block';
  	Scroll.allowedChildren = [_block2.default, _block.BlockEmbed, _container2.default];

  	exports.default = Scroll;

  	/***/ }),
  	/* 23 */
  	/***/ (function(module, exports, __webpack_require__) {


  	Object.defineProperty(exports, "__esModule", {
  	  value: true
  	});
  	exports.SHORTKEY = exports.default = undefined;

  	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

  	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

  	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  	var _clone = __webpack_require__(21);

  	var _clone2 = _interopRequireDefault(_clone);

  	var _deepEqual = __webpack_require__(11);

  	var _deepEqual2 = _interopRequireDefault(_deepEqual);

  	var _extend = __webpack_require__(3);

  	var _extend2 = _interopRequireDefault(_extend);

  	var _quillDelta = __webpack_require__(2);

  	var _quillDelta2 = _interopRequireDefault(_quillDelta);

  	var _op = __webpack_require__(20);

  	var _op2 = _interopRequireDefault(_op);

  	var _parchment = __webpack_require__(0);

  	var _parchment2 = _interopRequireDefault(_parchment);

  	var _quill = __webpack_require__(5);

  	var _quill2 = _interopRequireDefault(_quill);

  	var _logger = __webpack_require__(10);

  	var _logger2 = _interopRequireDefault(_logger);

  	var _module = __webpack_require__(9);

  	var _module2 = _interopRequireDefault(_module);

  	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  	var debug = (0, _logger2.default)('quill:keyboard');

  	var SHORTKEY = /Mac/i.test(navigator.platform) ? 'metaKey' : 'ctrlKey';

  	var Keyboard = function (_Module) {
  	  _inherits(Keyboard, _Module);

  	  _createClass(Keyboard, null, [{
  	    key: 'match',
  	    value: function match(evt, binding) {
  	      binding = normalize(binding);
  	      if (['altKey', 'ctrlKey', 'metaKey', 'shiftKey'].some(function (key) {
  	        return !!binding[key] !== evt[key] && binding[key] !== null;
  	      })) {
  	        return false;
  	      }
  	      return binding.key === (evt.which || evt.keyCode);
  	    }
  	  }]);

  	  function Keyboard(quill, options) {
  	    _classCallCheck(this, Keyboard);

  	    var _this = _possibleConstructorReturn(this, (Keyboard.__proto__ || Object.getPrototypeOf(Keyboard)).call(this, quill, options));

  	    _this.bindings = {};
  	    Object.keys(_this.options.bindings).forEach(function (name) {
  	      if (name === 'list autofill' && quill.scroll.whitelist != null && !quill.scroll.whitelist['list']) {
  	        return;
  	      }
  	      if (_this.options.bindings[name]) {
  	        _this.addBinding(_this.options.bindings[name]);
  	      }
  	    });
  	    _this.addBinding({ key: Keyboard.keys.ENTER, shiftKey: null }, handleEnter);
  	    _this.addBinding({ key: Keyboard.keys.ENTER, metaKey: null, ctrlKey: null, altKey: null }, function () {});
  	    if (/Firefox/i.test(navigator.userAgent)) {
  	      // Need to handle delete and backspace for Firefox in the general case #1171
  	      _this.addBinding({ key: Keyboard.keys.BACKSPACE }, { collapsed: true }, handleBackspace);
  	      _this.addBinding({ key: Keyboard.keys.DELETE }, { collapsed: true }, handleDelete);
  	    } else {
  	      _this.addBinding({ key: Keyboard.keys.BACKSPACE }, { collapsed: true, prefix: /^.?$/ }, handleBackspace);
  	      _this.addBinding({ key: Keyboard.keys.DELETE }, { collapsed: true, suffix: /^.?$/ }, handleDelete);
  	    }
  	    _this.addBinding({ key: Keyboard.keys.BACKSPACE }, { collapsed: false }, handleDeleteRange);
  	    _this.addBinding({ key: Keyboard.keys.DELETE }, { collapsed: false }, handleDeleteRange);
  	    _this.addBinding({ key: Keyboard.keys.BACKSPACE, altKey: null, ctrlKey: null, metaKey: null, shiftKey: null }, { collapsed: true, offset: 0 }, handleBackspace);
  	    _this.listen();
  	    return _this;
  	  }

  	  _createClass(Keyboard, [{
  	    key: 'addBinding',
  	    value: function addBinding(key) {
  	      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  	      var handler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  	      var binding = normalize(key);
  	      if (binding == null || binding.key == null) {
  	        return debug.warn('Attempted to add invalid keyboard binding', binding);
  	      }
  	      if (typeof context === 'function') {
  	        context = { handler: context };
  	      }
  	      if (typeof handler === 'function') {
  	        handler = { handler: handler };
  	      }
  	      binding = (0, _extend2.default)(binding, context, handler);
  	      this.bindings[binding.key] = this.bindings[binding.key] || [];
  	      this.bindings[binding.key].push(binding);
  	    }
  	  }, {
  	    key: 'listen',
  	    value: function listen() {
  	      var _this2 = this;

  	      this.quill.root.addEventListener('keydown', function (evt) {
  	        if (evt.defaultPrevented) return;
  	        var which = evt.which || evt.keyCode;
  	        var bindings = (_this2.bindings[which] || []).filter(function (binding) {
  	          return Keyboard.match(evt, binding);
  	        });
  	        if (bindings.length === 0) return;
  	        var range = _this2.quill.getSelection();
  	        if (range == null || !_this2.quill.hasFocus()) return;

  	        var _quill$getLine = _this2.quill.getLine(range.index),
  	            _quill$getLine2 = _slicedToArray(_quill$getLine, 2),
  	            line = _quill$getLine2[0],
  	            offset = _quill$getLine2[1];

  	        var _quill$getLeaf = _this2.quill.getLeaf(range.index),
  	            _quill$getLeaf2 = _slicedToArray(_quill$getLeaf, 2),
  	            leafStart = _quill$getLeaf2[0],
  	            offsetStart = _quill$getLeaf2[1];

  	        var _ref = range.length === 0 ? [leafStart, offsetStart] : _this2.quill.getLeaf(range.index + range.length),
  	            _ref2 = _slicedToArray(_ref, 2),
  	            leafEnd = _ref2[0],
  	            offsetEnd = _ref2[1];

  	        var prefixText = leafStart instanceof _parchment2.default.Text ? leafStart.value().slice(0, offsetStart) : '';
  	        var suffixText = leafEnd instanceof _parchment2.default.Text ? leafEnd.value().slice(offsetEnd) : '';
  	        var curContext = {
  	          collapsed: range.length === 0,
  	          empty: range.length === 0 && line.length() <= 1,
  	          format: _this2.quill.getFormat(range),
  	          offset: offset,
  	          prefix: prefixText,
  	          suffix: suffixText
  	        };
  	        var prevented = bindings.some(function (binding) {
  	          if (binding.collapsed != null && binding.collapsed !== curContext.collapsed) return false;
  	          if (binding.empty != null && binding.empty !== curContext.empty) return false;
  	          if (binding.offset != null && binding.offset !== curContext.offset) return false;
  	          if (Array.isArray(binding.format)) {
  	            // any format is present
  	            if (binding.format.every(function (name) {
  	              return curContext.format[name] == null;
  	            })) {
  	              return false;
  	            }
  	          } else if (_typeof(binding.format) === 'object') {
  	            // all formats must match
  	            if (!Object.keys(binding.format).every(function (name) {
  	              if (binding.format[name] === true) return curContext.format[name] != null;
  	              if (binding.format[name] === false) return curContext.format[name] == null;
  	              return (0, _deepEqual2.default)(binding.format[name], curContext.format[name]);
  	            })) {
  	              return false;
  	            }
  	          }
  	          if (binding.prefix != null && !binding.prefix.test(curContext.prefix)) return false;
  	          if (binding.suffix != null && !binding.suffix.test(curContext.suffix)) return false;
  	          return binding.handler.call(_this2, range, curContext) !== true;
  	        });
  	        if (prevented) {
  	          evt.preventDefault();
  	        }
  	      });
  	    }
  	  }]);

  	  return Keyboard;
  	}(_module2.default);

  	Keyboard.keys = {
  	  BACKSPACE: 8,
  	  TAB: 9,
  	  ENTER: 13,
  	  ESCAPE: 27,
  	  LEFT: 37,
  	  UP: 38,
  	  RIGHT: 39,
  	  DOWN: 40,
  	  DELETE: 46
  	};

  	Keyboard.DEFAULTS = {
  	  bindings: {
  	    'bold': makeFormatHandler('bold'),
  	    'italic': makeFormatHandler('italic'),
  	    'underline': makeFormatHandler('underline'),
  	    'indent': {
  	      // highlight tab or tab at beginning of list, indent or blockquote
  	      key: Keyboard.keys.TAB,
  	      format: ['blockquote', 'indent', 'list'],
  	      handler: function handler(range, context) {
  	        if (context.collapsed && context.offset !== 0) return true;
  	        this.quill.format('indent', '+1', _quill2.default.sources.USER);
  	      }
  	    },
  	    'outdent': {
  	      key: Keyboard.keys.TAB,
  	      shiftKey: true,
  	      format: ['blockquote', 'indent', 'list'],
  	      // highlight tab or tab at beginning of list, indent or blockquote
  	      handler: function handler(range, context) {
  	        if (context.collapsed && context.offset !== 0) return true;
  	        this.quill.format('indent', '-1', _quill2.default.sources.USER);
  	      }
  	    },
  	    'outdent backspace': {
  	      key: Keyboard.keys.BACKSPACE,
  	      collapsed: true,
  	      shiftKey: null,
  	      metaKey: null,
  	      ctrlKey: null,
  	      altKey: null,
  	      format: ['indent', 'list'],
  	      offset: 0,
  	      handler: function handler(range, context) {
  	        if (context.format.indent != null) {
  	          this.quill.format('indent', '-1', _quill2.default.sources.USER);
  	        } else if (context.format.list != null) {
  	          this.quill.format('list', false, _quill2.default.sources.USER);
  	        }
  	      }
  	    },
  	    'indent code-block': makeCodeBlockHandler(true),
  	    'outdent code-block': makeCodeBlockHandler(false),
  	    'remove tab': {
  	      key: Keyboard.keys.TAB,
  	      shiftKey: true,
  	      collapsed: true,
  	      prefix: /\t$/,
  	      handler: function handler(range) {
  	        this.quill.deleteText(range.index - 1, 1, _quill2.default.sources.USER);
  	      }
  	    },
  	    'tab': {
  	      key: Keyboard.keys.TAB,
  	      handler: function handler(range) {
  	        this.quill.history.cutoff();
  	        var delta = new _quillDelta2.default().retain(range.index).delete(range.length).insert('\t');
  	        this.quill.updateContents(delta, _quill2.default.sources.USER);
  	        this.quill.history.cutoff();
  	        this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
  	      }
  	    },
  	    'list empty enter': {
  	      key: Keyboard.keys.ENTER,
  	      collapsed: true,
  	      format: ['list'],
  	      empty: true,
  	      handler: function handler(range, context) {
  	        this.quill.format('list', false, _quill2.default.sources.USER);
  	        if (context.format.indent) {
  	          this.quill.format('indent', false, _quill2.default.sources.USER);
  	        }
  	      }
  	    },
  	    'checklist enter': {
  	      key: Keyboard.keys.ENTER,
  	      collapsed: true,
  	      format: { list: 'checked' },
  	      handler: function handler(range) {
  	        var _quill$getLine3 = this.quill.getLine(range.index),
  	            _quill$getLine4 = _slicedToArray(_quill$getLine3, 2),
  	            line = _quill$getLine4[0],
  	            offset = _quill$getLine4[1];

  	        var formats = (0, _extend2.default)({}, line.formats(), { list: 'checked' });
  	        var delta = new _quillDelta2.default().retain(range.index).insert('\n', formats).retain(line.length() - offset - 1).retain(1, { list: 'unchecked' });
  	        this.quill.updateContents(delta, _quill2.default.sources.USER);
  	        this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
  	        this.quill.scrollIntoView();
  	      }
  	    },
  	    'header enter': {
  	      key: Keyboard.keys.ENTER,
  	      collapsed: true,
  	      format: ['header'],
  	      suffix: /^$/,
  	      handler: function handler(range, context) {
  	        var _quill$getLine5 = this.quill.getLine(range.index),
  	            _quill$getLine6 = _slicedToArray(_quill$getLine5, 2),
  	            line = _quill$getLine6[0],
  	            offset = _quill$getLine6[1];

  	        var delta = new _quillDelta2.default().retain(range.index).insert('\n', context.format).retain(line.length() - offset - 1).retain(1, { header: null });
  	        this.quill.updateContents(delta, _quill2.default.sources.USER);
  	        this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
  	        this.quill.scrollIntoView();
  	      }
  	    },
  	    'list autofill': {
  	      key: ' ',
  	      collapsed: true,
  	      format: { list: false },
  	      prefix: /^\s*?(\d+\.|-|\*|\[ ?\]|\[x\])$/,
  	      handler: function handler(range, context) {
  	        var length = context.prefix.length;

  	        var _quill$getLine7 = this.quill.getLine(range.index),
  	            _quill$getLine8 = _slicedToArray(_quill$getLine7, 2),
  	            line = _quill$getLine8[0],
  	            offset = _quill$getLine8[1];

  	        if (offset > length) return true;
  	        var value = void 0;
  	        switch (context.prefix.trim()) {
  	          case '[]':case '[ ]':
  	            value = 'unchecked';
  	            break;
  	          case '[x]':
  	            value = 'checked';
  	            break;
  	          case '-':case '*':
  	            value = 'bullet';
  	            break;
  	          default:
  	            value = 'ordered';
  	        }
  	        this.quill.insertText(range.index, ' ', _quill2.default.sources.USER);
  	        this.quill.history.cutoff();
  	        var delta = new _quillDelta2.default().retain(range.index - offset).delete(length + 1).retain(line.length() - 2 - offset).retain(1, { list: value });
  	        this.quill.updateContents(delta, _quill2.default.sources.USER);
  	        this.quill.history.cutoff();
  	        this.quill.setSelection(range.index - length, _quill2.default.sources.SILENT);
  	      }
  	    },
  	    'code exit': {
  	      key: Keyboard.keys.ENTER,
  	      collapsed: true,
  	      format: ['code-block'],
  	      prefix: /\n\n$/,
  	      suffix: /^\s+$/,
  	      handler: function handler(range) {
  	        var _quill$getLine9 = this.quill.getLine(range.index),
  	            _quill$getLine10 = _slicedToArray(_quill$getLine9, 2),
  	            line = _quill$getLine10[0],
  	            offset = _quill$getLine10[1];

  	        var delta = new _quillDelta2.default().retain(range.index + line.length() - offset - 2).retain(1, { 'code-block': null }).delete(1);
  	        this.quill.updateContents(delta, _quill2.default.sources.USER);
  	      }
  	    },
  	    'embed left': makeEmbedArrowHandler(Keyboard.keys.LEFT, false),
  	    'embed left shift': makeEmbedArrowHandler(Keyboard.keys.LEFT, true),
  	    'embed right': makeEmbedArrowHandler(Keyboard.keys.RIGHT, false),
  	    'embed right shift': makeEmbedArrowHandler(Keyboard.keys.RIGHT, true)
  	  }
  	};

  	function makeEmbedArrowHandler(key, shiftKey) {
  	  var _ref3;

  	  var where = key === Keyboard.keys.LEFT ? 'prefix' : 'suffix';
  	  return _ref3 = {
  	    key: key,
  	    shiftKey: shiftKey,
  	    altKey: null
  	  }, _defineProperty(_ref3, where, /^$/), _defineProperty(_ref3, 'handler', function handler(range) {
  	    var index = range.index;
  	    if (key === Keyboard.keys.RIGHT) {
  	      index += range.length + 1;
  	    }

  	    var _quill$getLeaf3 = this.quill.getLeaf(index),
  	        _quill$getLeaf4 = _slicedToArray(_quill$getLeaf3, 1),
  	        leaf = _quill$getLeaf4[0];

  	    if (!(leaf instanceof _parchment2.default.Embed)) return true;
  	    if (key === Keyboard.keys.LEFT) {
  	      if (shiftKey) {
  	        this.quill.setSelection(range.index - 1, range.length + 1, _quill2.default.sources.USER);
  	      } else {
  	        this.quill.setSelection(range.index - 1, _quill2.default.sources.USER);
  	      }
  	    } else {
  	      if (shiftKey) {
  	        this.quill.setSelection(range.index, range.length + 1, _quill2.default.sources.USER);
  	      } else {
  	        this.quill.setSelection(range.index + range.length + 1, _quill2.default.sources.USER);
  	      }
  	    }
  	    return false;
  	  }), _ref3;
  	}

  	function handleBackspace(range, context) {
  	  if (range.index === 0 || this.quill.getLength() <= 1) return;

  	  var _quill$getLine11 = this.quill.getLine(range.index),
  	      _quill$getLine12 = _slicedToArray(_quill$getLine11, 1),
  	      line = _quill$getLine12[0];

  	  var formats = {};
  	  if (context.offset === 0) {
  	    var _quill$getLine13 = this.quill.getLine(range.index - 1),
  	        _quill$getLine14 = _slicedToArray(_quill$getLine13, 1),
  	        prev = _quill$getLine14[0];

  	    if (prev != null && prev.length() > 1) {
  	      var curFormats = line.formats();
  	      var prevFormats = this.quill.getFormat(range.index - 1, 1);
  	      formats = _op2.default.attributes.diff(curFormats, prevFormats) || {};
  	    }
  	  }
  	  // Check for astral symbols
  	  var length = /[\uD800-\uDBFF][\uDC00-\uDFFF]$/.test(context.prefix) ? 2 : 1;
  	  this.quill.deleteText(range.index - length, length, _quill2.default.sources.USER);
  	  if (Object.keys(formats).length > 0) {
  	    this.quill.formatLine(range.index - length, length, formats, _quill2.default.sources.USER);
  	  }
  	  this.quill.focus();
  	}

  	function handleDelete(range, context) {
  	  // Check for astral symbols
  	  var length = /^[\uD800-\uDBFF][\uDC00-\uDFFF]/.test(context.suffix) ? 2 : 1;
  	  if (range.index >= this.quill.getLength() - length) return;
  	  var formats = {},
  	      nextLength = 0;

  	  var _quill$getLine15 = this.quill.getLine(range.index),
  	      _quill$getLine16 = _slicedToArray(_quill$getLine15, 1),
  	      line = _quill$getLine16[0];

  	  if (context.offset >= line.length() - 1) {
  	    var _quill$getLine17 = this.quill.getLine(range.index + 1),
  	        _quill$getLine18 = _slicedToArray(_quill$getLine17, 1),
  	        next = _quill$getLine18[0];

  	    if (next) {
  	      var curFormats = line.formats();
  	      var nextFormats = this.quill.getFormat(range.index, 1);
  	      formats = _op2.default.attributes.diff(curFormats, nextFormats) || {};
  	      nextLength = next.length();
  	    }
  	  }
  	  this.quill.deleteText(range.index, length, _quill2.default.sources.USER);
  	  if (Object.keys(formats).length > 0) {
  	    this.quill.formatLine(range.index + nextLength - 1, length, formats, _quill2.default.sources.USER);
  	  }
  	}

  	function handleDeleteRange(range) {
  	  var lines = this.quill.getLines(range);
  	  var formats = {};
  	  if (lines.length > 1) {
  	    var firstFormats = lines[0].formats();
  	    var lastFormats = lines[lines.length - 1].formats();
  	    formats = _op2.default.attributes.diff(lastFormats, firstFormats) || {};
  	  }
  	  this.quill.deleteText(range, _quill2.default.sources.USER);
  	  if (Object.keys(formats).length > 0) {
  	    this.quill.formatLine(range.index, 1, formats, _quill2.default.sources.USER);
  	  }
  	  this.quill.setSelection(range.index, _quill2.default.sources.SILENT);
  	  this.quill.focus();
  	}

  	function handleEnter(range, context) {
  	  var _this3 = this;

  	  if (range.length > 0) {
  	    this.quill.scroll.deleteAt(range.index, range.length); // So we do not trigger text-change
  	  }
  	  var lineFormats = Object.keys(context.format).reduce(function (lineFormats, format) {
  	    if (_parchment2.default.query(format, _parchment2.default.Scope.BLOCK) && !Array.isArray(context.format[format])) {
  	      lineFormats[format] = context.format[format];
  	    }
  	    return lineFormats;
  	  }, {});
  	  this.quill.insertText(range.index, '\n', lineFormats, _quill2.default.sources.USER);
  	  // Earlier scroll.deleteAt might have messed up our selection,
  	  // so insertText's built in selection preservation is not reliable
  	  this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
  	  this.quill.focus();
  	  Object.keys(context.format).forEach(function (name) {
  	    if (lineFormats[name] != null) return;
  	    if (Array.isArray(context.format[name])) return;
  	    if (name === 'link') return;
  	    _this3.quill.format(name, context.format[name], _quill2.default.sources.USER);
  	  });
  	}

  	function makeCodeBlockHandler(indent) {
  	  return {
  	    key: Keyboard.keys.TAB,
  	    shiftKey: !indent,
  	    format: { 'code-block': true },
  	    handler: function handler(range) {
  	      var CodeBlock = _parchment2.default.query('code-block');
  	      var index = range.index,
  	          length = range.length;

  	      var _quill$scroll$descend = this.quill.scroll.descendant(CodeBlock, index),
  	          _quill$scroll$descend2 = _slicedToArray(_quill$scroll$descend, 2),
  	          block = _quill$scroll$descend2[0],
  	          offset = _quill$scroll$descend2[1];

  	      if (block == null) return;
  	      var scrollIndex = this.quill.getIndex(block);
  	      var start = block.newlineIndex(offset, true) + 1;
  	      var end = block.newlineIndex(scrollIndex + offset + length);
  	      var lines = block.domNode.textContent.slice(start, end).split('\n');
  	      offset = 0;
  	      lines.forEach(function (line, i) {
  	        if (indent) {
  	          block.insertAt(start + offset, CodeBlock.TAB);
  	          offset += CodeBlock.TAB.length;
  	          if (i === 0) {
  	            index += CodeBlock.TAB.length;
  	          } else {
  	            length += CodeBlock.TAB.length;
  	          }
  	        } else if (line.startsWith(CodeBlock.TAB)) {
  	          block.deleteAt(start + offset, CodeBlock.TAB.length);
  	          offset -= CodeBlock.TAB.length;
  	          if (i === 0) {
  	            index -= CodeBlock.TAB.length;
  	          } else {
  	            length -= CodeBlock.TAB.length;
  	          }
  	        }
  	        offset += line.length + 1;
  	      });
  	      this.quill.update(_quill2.default.sources.USER);
  	      this.quill.setSelection(index, length, _quill2.default.sources.SILENT);
  	    }
  	  };
  	}

  	function makeFormatHandler(format) {
  	  return {
  	    key: format[0].toUpperCase(),
  	    shortKey: true,
  	    handler: function handler(range, context) {
  	      this.quill.format(format, !context.format[format], _quill2.default.sources.USER);
  	    }
  	  };
  	}

  	function normalize(binding) {
  	  if (typeof binding === 'string' || typeof binding === 'number') {
  	    return normalize({ key: binding });
  	  }
  	  if ((typeof binding === 'undefined' ? 'undefined' : _typeof(binding)) === 'object') {
  	    binding = (0, _clone2.default)(binding, false);
  	  }
  	  if (typeof binding.key === 'string') {
  	    if (Keyboard.keys[binding.key.toUpperCase()] != null) {
  	      binding.key = Keyboard.keys[binding.key.toUpperCase()];
  	    } else if (binding.key.length === 1) {
  	      binding.key = binding.key.toUpperCase().charCodeAt(0);
  	    } else {
  	      return null;
  	    }
  	  }
  	  if (binding.shortKey) {
  	    binding[SHORTKEY] = binding.shortKey;
  	    delete binding.shortKey;
  	  }
  	  return binding;
  	}

  	exports.default = Keyboard;
  	exports.SHORTKEY = SHORTKEY;

  	/***/ }),
  	/* 24 */
  	/***/ (function(module, exports, __webpack_require__) {


  	Object.defineProperty(exports, "__esModule", {
  	  value: true
  	});

  	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

  	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  	var _parchment = __webpack_require__(0);

  	var _parchment2 = _interopRequireDefault(_parchment);

  	var _text = __webpack_require__(7);

  	var _text2 = _interopRequireDefault(_text);

  	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  	var Cursor = function (_Parchment$Embed) {
  	  _inherits(Cursor, _Parchment$Embed);

  	  _createClass(Cursor, null, [{
  	    key: 'value',
  	    value: function value() {
  	      return undefined;
  	    }
  	  }]);

  	  function Cursor(domNode, selection) {
  	    _classCallCheck(this, Cursor);

  	    var _this = _possibleConstructorReturn(this, (Cursor.__proto__ || Object.getPrototypeOf(Cursor)).call(this, domNode));

  	    _this.selection = selection;
  	    _this.textNode = document.createTextNode(Cursor.CONTENTS);
  	    _this.domNode.appendChild(_this.textNode);
  	    _this._length = 0;
  	    return _this;
  	  }

  	  _createClass(Cursor, [{
  	    key: 'detach',
  	    value: function detach() {
  	      // super.detach() will also clear domNode.__blot
  	      if (this.parent != null) this.parent.removeChild(this);
  	    }
  	  }, {
  	    key: 'format',
  	    value: function format(name, value) {
  	      if (this._length !== 0) {
  	        return _get(Cursor.prototype.__proto__ || Object.getPrototypeOf(Cursor.prototype), 'format', this).call(this, name, value);
  	      }
  	      var target = this,
  	          index = 0;
  	      while (target != null && target.statics.scope !== _parchment2.default.Scope.BLOCK_BLOT) {
  	        index += target.offset(target.parent);
  	        target = target.parent;
  	      }
  	      if (target != null) {
  	        this._length = Cursor.CONTENTS.length;
  	        target.optimize();
  	        target.formatAt(index, Cursor.CONTENTS.length, name, value);
  	        this._length = 0;
  	      }
  	    }
  	  }, {
  	    key: 'index',
  	    value: function index(node, offset) {
  	      if (node === this.textNode) return 0;
  	      return _get(Cursor.prototype.__proto__ || Object.getPrototypeOf(Cursor.prototype), 'index', this).call(this, node, offset);
  	    }
  	  }, {
  	    key: 'length',
  	    value: function length() {
  	      return this._length;
  	    }
  	  }, {
  	    key: 'position',
  	    value: function position() {
  	      return [this.textNode, this.textNode.data.length];
  	    }
  	  }, {
  	    key: 'remove',
  	    value: function remove() {
  	      _get(Cursor.prototype.__proto__ || Object.getPrototypeOf(Cursor.prototype), 'remove', this).call(this);
  	      this.parent = null;
  	    }
  	  }, {
  	    key: 'restore',
  	    value: function restore() {
  	      if (this.selection.composing || this.parent == null) return;
  	      var textNode = this.textNode;
  	      var range = this.selection.getNativeRange();
  	      var restoreText = void 0,
  	          start = void 0,
  	          end = void 0;
  	      if (range != null && range.start.node === textNode && range.end.node === textNode) {
  	        var _ref = [textNode, range.start.offset, range.end.offset];
  	        restoreText = _ref[0];
  	        start = _ref[1];
  	        end = _ref[2];
  	      }
  	      // Link format will insert text outside of anchor tag
  	      while (this.domNode.lastChild != null && this.domNode.lastChild !== this.textNode) {
  	        this.domNode.parentNode.insertBefore(this.domNode.lastChild, this.domNode);
  	      }
  	      if (this.textNode.data !== Cursor.CONTENTS) {
  	        var text = this.textNode.data.split(Cursor.CONTENTS).join('');
  	        if (this.next instanceof _text2.default) {
  	          restoreText = this.next.domNode;
  	          this.next.insertAt(0, text);
  	          this.textNode.data = Cursor.CONTENTS;
  	        } else {
  	          this.textNode.data = text;
  	          this.parent.insertBefore(_parchment2.default.create(this.textNode), this);
  	          this.textNode = document.createTextNode(Cursor.CONTENTS);
  	          this.domNode.appendChild(this.textNode);
  	        }
  	      }
  	      this.remove();
  	      if (start != null) {
  	        var _map = [start, end].map(function (offset) {
  	          return Math.max(0, Math.min(restoreText.data.length, offset - 1));
  	        });

  	        var _map2 = _slicedToArray(_map, 2);

  	        start = _map2[0];
  	        end = _map2[1];

  	        return {
  	          startNode: restoreText,
  	          startOffset: start,
  	          endNode: restoreText,
  	          endOffset: end
  	        };
  	      }
  	    }
  	  }, {
  	    key: 'update',
  	    value: function update(mutations, context) {
  	      var _this2 = this;

  	      if (mutations.some(function (mutation) {
  	        return mutation.type === 'characterData' && mutation.target === _this2.textNode;
  	      })) {
  	        var range = this.restore();
  	        if (range) context.range = range;
  	      }
  	    }
  	  }, {
  	    key: 'value',
  	    value: function value() {
  	      return '';
  	    }
  	  }]);

  	  return Cursor;
  	}(_parchment2.default.Embed);

  	Cursor.blotName = 'cursor';
  	Cursor.className = 'ql-cursor';
  	Cursor.tagName = 'span';
  	Cursor.CONTENTS = '\uFEFF'; // Zero width no break space


  	exports.default = Cursor;

  	/***/ }),
  	/* 25 */
  	/***/ (function(module, exports, __webpack_require__) {


  	Object.defineProperty(exports, "__esModule", {
  	  value: true
  	});

  	var _parchment = __webpack_require__(0);

  	var _parchment2 = _interopRequireDefault(_parchment);

  	var _block = __webpack_require__(4);

  	var _block2 = _interopRequireDefault(_block);

  	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  	var Container = function (_Parchment$Container) {
  	  _inherits(Container, _Parchment$Container);

  	  function Container() {
  	    _classCallCheck(this, Container);

  	    return _possibleConstructorReturn(this, (Container.__proto__ || Object.getPrototypeOf(Container)).apply(this, arguments));
  	  }

  	  return Container;
  	}(_parchment2.default.Container);

  	Container.allowedChildren = [_block2.default, _block.BlockEmbed, Container];

  	exports.default = Container;

  	/***/ }),
  	/* 26 */
  	/***/ (function(module, exports, __webpack_require__) {


  	Object.defineProperty(exports, "__esModule", {
  	  value: true
  	});
  	exports.ColorStyle = exports.ColorClass = exports.ColorAttributor = undefined;

  	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  	var _parchment = __webpack_require__(0);

  	var _parchment2 = _interopRequireDefault(_parchment);

  	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  	var ColorAttributor = function (_Parchment$Attributor) {
  	  _inherits(ColorAttributor, _Parchment$Attributor);

  	  function ColorAttributor() {
  	    _classCallCheck(this, ColorAttributor);

  	    return _possibleConstructorReturn(this, (ColorAttributor.__proto__ || Object.getPrototypeOf(ColorAttributor)).apply(this, arguments));
  	  }

  	  _createClass(ColorAttributor, [{
  	    key: 'value',
  	    value: function value(domNode) {
  	      var value = _get(ColorAttributor.prototype.__proto__ || Object.getPrototypeOf(ColorAttributor.prototype), 'value', this).call(this, domNode);
  	      if (!value.startsWith('rgb(')) return value;
  	      value = value.replace(/^[^\d]+/, '').replace(/[^\d]+$/, '');
  	      return '#' + value.split(',').map(function (component) {
  	        return ('00' + parseInt(component).toString(16)).slice(-2);
  	      }).join('');
  	    }
  	  }]);

  	  return ColorAttributor;
  	}(_parchment2.default.Attributor.Style);

  	var ColorClass = new _parchment2.default.Attributor.Class('color', 'ql-color', {
  	  scope: _parchment2.default.Scope.INLINE
  	});
  	var ColorStyle = new ColorAttributor('color', 'color', {
  	  scope: _parchment2.default.Scope.INLINE
  	});

  	exports.ColorAttributor = ColorAttributor;
  	exports.ColorClass = ColorClass;
  	exports.ColorStyle = ColorStyle;

  	/***/ }),
  	/* 27 */
  	/***/ (function(module, exports, __webpack_require__) {


  	Object.defineProperty(exports, "__esModule", {
  	  value: true
  	});
  	exports.sanitize = exports.default = undefined;

  	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  	var _inline = __webpack_require__(6);

  	var _inline2 = _interopRequireDefault(_inline);

  	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  	var Link = function (_Inline) {
  	  _inherits(Link, _Inline);

  	  function Link() {
  	    _classCallCheck(this, Link);

  	    return _possibleConstructorReturn(this, (Link.__proto__ || Object.getPrototypeOf(Link)).apply(this, arguments));
  	  }

  	  _createClass(Link, [{
  	    key: 'format',
  	    value: function format(name, value) {
  	      if (name !== this.statics.blotName || !value) return _get(Link.prototype.__proto__ || Object.getPrototypeOf(Link.prototype), 'format', this).call(this, name, value);
  	      value = this.constructor.sanitize(value);
  	      this.domNode.setAttribute('href', value);
  	    }
  	  }], [{
  	    key: 'create',
  	    value: function create(value) {
  	      var node = _get(Link.__proto__ || Object.getPrototypeOf(Link), 'create', this).call(this, value);
  	      value = this.sanitize(value);
  	      node.setAttribute('href', value);
  	      node.setAttribute('rel', 'noopener noreferrer');
  	      node.setAttribute('target', '_blank');
  	      return node;
  	    }
  	  }, {
  	    key: 'formats',
  	    value: function formats(domNode) {
  	      return domNode.getAttribute('href');
  	    }
  	  }, {
  	    key: 'sanitize',
  	    value: function sanitize(url) {
  	      return _sanitize(url, this.PROTOCOL_WHITELIST) ? url : this.SANITIZED_URL;
  	    }
  	  }]);

  	  return Link;
  	}(_inline2.default);

  	Link.blotName = 'link';
  	Link.tagName = 'A';
  	Link.SANITIZED_URL = 'about:blank';
  	Link.PROTOCOL_WHITELIST = ['http', 'https', 'mailto', 'tel'];

  	function _sanitize(url, protocols) {
  	  var anchor = document.createElement('a');
  	  anchor.href = url;
  	  var protocol = anchor.href.slice(0, anchor.href.indexOf(':'));
  	  return protocols.indexOf(protocol) > -1;
  	}

  	exports.default = Link;
  	exports.sanitize = _sanitize;

  	/***/ }),
  	/* 28 */
  	/***/ (function(module, exports, __webpack_require__) {


  	Object.defineProperty(exports, "__esModule", {
  	  value: true
  	});

  	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

  	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  	var _keyboard = __webpack_require__(23);

  	var _keyboard2 = _interopRequireDefault(_keyboard);

  	var _dropdown = __webpack_require__(107);

  	var _dropdown2 = _interopRequireDefault(_dropdown);

  	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  	var optionsCounter = 0;

  	function toggleAriaAttribute(element, attribute) {
  	  element.setAttribute(attribute, !(element.getAttribute(attribute) === 'true'));
  	}

  	var Picker = function () {
  	  function Picker(select) {
  	    var _this = this;

  	    _classCallCheck(this, Picker);

  	    this.select = select;
  	    this.container = document.createElement('span');
  	    this.buildPicker();
  	    this.select.style.display = 'none';
  	    this.select.parentNode.insertBefore(this.container, this.select);

  	    this.label.addEventListener('mousedown', function () {
  	      _this.togglePicker();
  	    });
  	    this.label.addEventListener('keydown', function (event) {
  	      switch (event.keyCode) {
  	        // Allows the "Enter" key to open the picker
  	        case _keyboard2.default.keys.ENTER:
  	          _this.togglePicker();
  	          break;

  	        // Allows the "Escape" key to close the picker
  	        case _keyboard2.default.keys.ESCAPE:
  	          _this.escape();
  	          event.preventDefault();
  	          break;
  	      }
  	    });
  	    this.select.addEventListener('change', this.update.bind(this));
  	  }

  	  _createClass(Picker, [{
  	    key: 'togglePicker',
  	    value: function togglePicker() {
  	      this.container.classList.toggle('ql-expanded');
  	      // Toggle aria-expanded and aria-hidden to make the picker accessible
  	      toggleAriaAttribute(this.label, 'aria-expanded');
  	      toggleAriaAttribute(this.options, 'aria-hidden');
  	    }
  	  }, {
  	    key: 'buildItem',
  	    value: function buildItem(option) {
  	      var _this2 = this;

  	      var item = document.createElement('span');
  	      item.tabIndex = '0';
  	      item.setAttribute('role', 'button');

  	      item.classList.add('ql-picker-item');
  	      if (option.hasAttribute('value')) {
  	        item.setAttribute('data-value', option.getAttribute('value'));
  	      }
  	      if (option.textContent) {
  	        item.setAttribute('data-label', option.textContent);
  	      }
  	      item.addEventListener('click', function () {
  	        _this2.selectItem(item, true);
  	      });
  	      item.addEventListener('keydown', function (event) {
  	        switch (event.keyCode) {
  	          // Allows the "Enter" key to select an item
  	          case _keyboard2.default.keys.ENTER:
  	            _this2.selectItem(item, true);
  	            event.preventDefault();
  	            break;

  	          // Allows the "Escape" key to close the picker
  	          case _keyboard2.default.keys.ESCAPE:
  	            _this2.escape();
  	            event.preventDefault();
  	            break;
  	        }
  	      });

  	      return item;
  	    }
  	  }, {
  	    key: 'buildLabel',
  	    value: function buildLabel() {
  	      var label = document.createElement('span');
  	      label.classList.add('ql-picker-label');
  	      label.innerHTML = _dropdown2.default;
  	      label.tabIndex = '0';
  	      label.setAttribute('role', 'button');
  	      label.setAttribute('aria-expanded', 'false');
  	      this.container.appendChild(label);
  	      return label;
  	    }
  	  }, {
  	    key: 'buildOptions',
  	    value: function buildOptions() {
  	      var _this3 = this;

  	      var options = document.createElement('span');
  	      options.classList.add('ql-picker-options');

  	      // Don't want screen readers to read this until options are visible
  	      options.setAttribute('aria-hidden', 'true');
  	      options.tabIndex = '-1';

  	      // Need a unique id for aria-controls
  	      options.id = 'ql-picker-options-' + optionsCounter;
  	      optionsCounter += 1;
  	      this.label.setAttribute('aria-controls', options.id);

  	      this.options = options;

  	      [].slice.call(this.select.options).forEach(function (option) {
  	        var item = _this3.buildItem(option);
  	        options.appendChild(item);
  	        if (option.selected === true) {
  	          _this3.selectItem(item);
  	        }
  	      });
  	      this.container.appendChild(options);
  	    }
  	  }, {
  	    key: 'buildPicker',
  	    value: function buildPicker() {
  	      var _this4 = this;

  	      [].slice.call(this.select.attributes).forEach(function (item) {
  	        _this4.container.setAttribute(item.name, item.value);
  	      });
  	      this.container.classList.add('ql-picker');
  	      this.label = this.buildLabel();
  	      this.buildOptions();
  	    }
  	  }, {
  	    key: 'escape',
  	    value: function escape() {
  	      var _this5 = this;

  	      // Close menu and return focus to trigger label
  	      this.close();
  	      // Need setTimeout for accessibility to ensure that the browser executes
  	      // focus on the next process thread and after any DOM content changes
  	      setTimeout(function () {
  	        return _this5.label.focus();
  	      }, 1);
  	    }
  	  }, {
  	    key: 'close',
  	    value: function close() {
  	      this.container.classList.remove('ql-expanded');
  	      this.label.setAttribute('aria-expanded', 'false');
  	      this.options.setAttribute('aria-hidden', 'true');
  	    }
  	  }, {
  	    key: 'selectItem',
  	    value: function selectItem(item) {
  	      var trigger = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  	      var selected = this.container.querySelector('.ql-selected');
  	      if (item === selected) return;
  	      if (selected != null) {
  	        selected.classList.remove('ql-selected');
  	      }
  	      if (item == null) return;
  	      item.classList.add('ql-selected');
  	      this.select.selectedIndex = [].indexOf.call(item.parentNode.children, item);
  	      if (item.hasAttribute('data-value')) {
  	        this.label.setAttribute('data-value', item.getAttribute('data-value'));
  	      } else {
  	        this.label.removeAttribute('data-value');
  	      }
  	      if (item.hasAttribute('data-label')) {
  	        this.label.setAttribute('data-label', item.getAttribute('data-label'));
  	      } else {
  	        this.label.removeAttribute('data-label');
  	      }
  	      if (trigger) {
  	        if (typeof Event === 'function') {
  	          this.select.dispatchEvent(new Event('change'));
  	        } else if ((typeof Event === 'undefined' ? 'undefined' : _typeof(Event)) === 'object') {
  	          // IE11
  	          var event = document.createEvent('Event');
  	          event.initEvent('change', true, true);
  	          this.select.dispatchEvent(event);
  	        }
  	        this.close();
  	      }
  	    }
  	  }, {
  	    key: 'update',
  	    value: function update() {
  	      var option = void 0;
  	      if (this.select.selectedIndex > -1) {
  	        var item = this.container.querySelector('.ql-picker-options').children[this.select.selectedIndex];
  	        option = this.select.options[this.select.selectedIndex];
  	        this.selectItem(item);
  	      } else {
  	        this.selectItem(null);
  	      }
  	      var isActive = option != null && option !== this.select.querySelector('option[selected]');
  	      this.label.classList.toggle('ql-active', isActive);
  	    }
  	  }]);

  	  return Picker;
  	}();

  	exports.default = Picker;

  	/***/ }),
  	/* 29 */
  	/***/ (function(module, exports, __webpack_require__) {


  	Object.defineProperty(exports, "__esModule", {
  	  value: true
  	});

  	var _parchment = __webpack_require__(0);

  	var _parchment2 = _interopRequireDefault(_parchment);

  	var _quill = __webpack_require__(5);

  	var _quill2 = _interopRequireDefault(_quill);

  	var _block = __webpack_require__(4);

  	var _block2 = _interopRequireDefault(_block);

  	var _break = __webpack_require__(16);

  	var _break2 = _interopRequireDefault(_break);

  	var _container = __webpack_require__(25);

  	var _container2 = _interopRequireDefault(_container);

  	var _cursor = __webpack_require__(24);

  	var _cursor2 = _interopRequireDefault(_cursor);

  	var _embed = __webpack_require__(35);

  	var _embed2 = _interopRequireDefault(_embed);

  	var _inline = __webpack_require__(6);

  	var _inline2 = _interopRequireDefault(_inline);

  	var _scroll = __webpack_require__(22);

  	var _scroll2 = _interopRequireDefault(_scroll);

  	var _text = __webpack_require__(7);

  	var _text2 = _interopRequireDefault(_text);

  	var _clipboard = __webpack_require__(55);

  	var _clipboard2 = _interopRequireDefault(_clipboard);

  	var _history = __webpack_require__(42);

  	var _history2 = _interopRequireDefault(_history);

  	var _keyboard = __webpack_require__(23);

  	var _keyboard2 = _interopRequireDefault(_keyboard);

  	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  	_quill2.default.register({
  	  'blots/block': _block2.default,
  	  'blots/block/embed': _block.BlockEmbed,
  	  'blots/break': _break2.default,
  	  'blots/container': _container2.default,
  	  'blots/cursor': _cursor2.default,
  	  'blots/embed': _embed2.default,
  	  'blots/inline': _inline2.default,
  	  'blots/scroll': _scroll2.default,
  	  'blots/text': _text2.default,

  	  'modules/clipboard': _clipboard2.default,
  	  'modules/history': _history2.default,
  	  'modules/keyboard': _keyboard2.default
  	});

  	_parchment2.default.register(_block2.default, _break2.default, _cursor2.default, _inline2.default, _scroll2.default, _text2.default);

  	exports.default = _quill2.default;

  	/***/ }),
  	/* 30 */
  	/***/ (function(module, exports, __webpack_require__) {

  	Object.defineProperty(exports, "__esModule", { value: true });
  	var Registry = __webpack_require__(1);
  	var ShadowBlot = /** @class */ (function () {
  	    function ShadowBlot(domNode) {
  	        this.domNode = domNode;
  	        // @ts-ignore
  	        this.domNode[Registry.DATA_KEY] = { blot: this };
  	    }
  	    Object.defineProperty(ShadowBlot.prototype, "statics", {
  	        // Hack for accessing inherited static methods
  	        get: function () {
  	            return this.constructor;
  	        },
  	        enumerable: true,
  	        configurable: true
  	    });
  	    ShadowBlot.create = function (value) {
  	        if (this.tagName == null) {
  	            throw new Registry.ParchmentError('Blot definition missing tagName');
  	        }
  	        var node;
  	        if (Array.isArray(this.tagName)) {
  	            if (typeof value === 'string') {
  	                value = value.toUpperCase();
  	                if (parseInt(value).toString() === value) {
  	                    value = parseInt(value);
  	                }
  	            }
  	            if (typeof value === 'number') {
  	                node = document.createElement(this.tagName[value - 1]);
  	            }
  	            else if (this.tagName.indexOf(value) > -1) {
  	                node = document.createElement(value);
  	            }
  	            else {
  	                node = document.createElement(this.tagName[0]);
  	            }
  	        }
  	        else {
  	            node = document.createElement(this.tagName);
  	        }
  	        if (this.className) {
  	            node.classList.add(this.className);
  	        }
  	        return node;
  	    };
  	    ShadowBlot.prototype.attach = function () {
  	        if (this.parent != null) {
  	            this.scroll = this.parent.scroll;
  	        }
  	    };
  	    ShadowBlot.prototype.clone = function () {
  	        var domNode = this.domNode.cloneNode(false);
  	        return Registry.create(domNode);
  	    };
  	    ShadowBlot.prototype.detach = function () {
  	        if (this.parent != null)
  	            this.parent.removeChild(this);
  	        // @ts-ignore
  	        delete this.domNode[Registry.DATA_KEY];
  	    };
  	    ShadowBlot.prototype.deleteAt = function (index, length) {
  	        var blot = this.isolate(index, length);
  	        blot.remove();
  	    };
  	    ShadowBlot.prototype.formatAt = function (index, length, name, value) {
  	        var blot = this.isolate(index, length);
  	        if (Registry.query(name, Registry.Scope.BLOT) != null && value) {
  	            blot.wrap(name, value);
  	        }
  	        else if (Registry.query(name, Registry.Scope.ATTRIBUTE) != null) {
  	            var parent = Registry.create(this.statics.scope);
  	            blot.wrap(parent);
  	            parent.format(name, value);
  	        }
  	    };
  	    ShadowBlot.prototype.insertAt = function (index, value, def) {
  	        var blot = def == null ? Registry.create('text', value) : Registry.create(value, def);
  	        var ref = this.split(index);
  	        this.parent.insertBefore(blot, ref);
  	    };
  	    ShadowBlot.prototype.insertInto = function (parentBlot, refBlot) {
  	        if (refBlot === void 0) { refBlot = null; }
  	        if (this.parent != null) {
  	            this.parent.children.remove(this);
  	        }
  	        var refDomNode = null;
  	        parentBlot.children.insertBefore(this, refBlot);
  	        if (refBlot != null) {
  	            refDomNode = refBlot.domNode;
  	        }
  	        if (this.domNode.parentNode != parentBlot.domNode ||
  	            this.domNode.nextSibling != refDomNode) {
  	            parentBlot.domNode.insertBefore(this.domNode, refDomNode);
  	        }
  	        this.parent = parentBlot;
  	        this.attach();
  	    };
  	    ShadowBlot.prototype.isolate = function (index, length) {
  	        var target = this.split(index);
  	        target.split(length);
  	        return target;
  	    };
  	    ShadowBlot.prototype.length = function () {
  	        return 1;
  	    };
  	    ShadowBlot.prototype.offset = function (root) {
  	        if (root === void 0) { root = this.parent; }
  	        if (this.parent == null || this == root)
  	            return 0;
  	        return this.parent.children.offset(this) + this.parent.offset(root);
  	    };
  	    ShadowBlot.prototype.optimize = function (context) {
  	        // TODO clean up once we use WeakMap
  	        // @ts-ignore
  	        if (this.domNode[Registry.DATA_KEY] != null) {
  	            // @ts-ignore
  	            delete this.domNode[Registry.DATA_KEY].mutations;
  	        }
  	    };
  	    ShadowBlot.prototype.remove = function () {
  	        if (this.domNode.parentNode != null) {
  	            this.domNode.parentNode.removeChild(this.domNode);
  	        }
  	        this.detach();
  	    };
  	    ShadowBlot.prototype.replace = function (target) {
  	        if (target.parent == null)
  	            return;
  	        target.parent.insertBefore(this, target.next);
  	        target.remove();
  	    };
  	    ShadowBlot.prototype.replaceWith = function (name, value) {
  	        var replacement = typeof name === 'string' ? Registry.create(name, value) : name;
  	        replacement.replace(this);
  	        return replacement;
  	    };
  	    ShadowBlot.prototype.split = function (index, force) {
  	        return index === 0 ? this : this.next;
  	    };
  	    ShadowBlot.prototype.update = function (mutations, context) {
  	        // Nothing to do by default
  	    };
  	    ShadowBlot.prototype.wrap = function (name, value) {
  	        var wrapper = typeof name === 'string' ? Registry.create(name, value) : name;
  	        if (this.parent != null) {
  	            this.parent.insertBefore(wrapper, this.next);
  	        }
  	        wrapper.appendChild(this);
  	        return wrapper;
  	    };
  	    ShadowBlot.blotName = 'abstract';
  	    return ShadowBlot;
  	}());
  	exports.default = ShadowBlot;


  	/***/ }),
  	/* 31 */
  	/***/ (function(module, exports, __webpack_require__) {

  	Object.defineProperty(exports, "__esModule", { value: true });
  	var attributor_1 = __webpack_require__(12);
  	var class_1 = __webpack_require__(32);
  	var style_1 = __webpack_require__(33);
  	var Registry = __webpack_require__(1);
  	var AttributorStore = /** @class */ (function () {
  	    function AttributorStore(domNode) {
  	        this.attributes = {};
  	        this.domNode = domNode;
  	        this.build();
  	    }
  	    AttributorStore.prototype.attribute = function (attribute, value) {
  	        // verb
  	        if (value) {
  	            if (attribute.add(this.domNode, value)) {
  	                if (attribute.value(this.domNode) != null) {
  	                    this.attributes[attribute.attrName] = attribute;
  	                }
  	                else {
  	                    delete this.attributes[attribute.attrName];
  	                }
  	            }
  	        }
  	        else {
  	            attribute.remove(this.domNode);
  	            delete this.attributes[attribute.attrName];
  	        }
  	    };
  	    AttributorStore.prototype.build = function () {
  	        var _this = this;
  	        this.attributes = {};
  	        var attributes = attributor_1.default.keys(this.domNode);
  	        var classes = class_1.default.keys(this.domNode);
  	        var styles = style_1.default.keys(this.domNode);
  	        attributes
  	            .concat(classes)
  	            .concat(styles)
  	            .forEach(function (name) {
  	            var attr = Registry.query(name, Registry.Scope.ATTRIBUTE);
  	            if (attr instanceof attributor_1.default) {
  	                _this.attributes[attr.attrName] = attr;
  	            }
  	        });
  	    };
  	    AttributorStore.prototype.copy = function (target) {
  	        var _this = this;
  	        Object.keys(this.attributes).forEach(function (key) {
  	            var value = _this.attributes[key].value(_this.domNode);
  	            target.format(key, value);
  	        });
  	    };
  	    AttributorStore.prototype.move = function (target) {
  	        var _this = this;
  	        this.copy(target);
  	        Object.keys(this.attributes).forEach(function (key) {
  	            _this.attributes[key].remove(_this.domNode);
  	        });
  	        this.attributes = {};
  	    };
  	    AttributorStore.prototype.values = function () {
  	        var _this = this;
  	        return Object.keys(this.attributes).reduce(function (attributes, name) {
  	            attributes[name] = _this.attributes[name].value(_this.domNode);
  	            return attributes;
  	        }, {});
  	    };
  	    return AttributorStore;
  	}());
  	exports.default = AttributorStore;


  	/***/ }),
  	/* 32 */
  	/***/ (function(module, exports, __webpack_require__) {

  	var __extends = (this && this.__extends) || (function () {
  	    var extendStatics = Object.setPrototypeOf ||
  	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
  	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
  	    return function (d, b) {
  	        extendStatics(d, b);
  	        function __() { this.constructor = d; }
  	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  	    };
  	})();
  	Object.defineProperty(exports, "__esModule", { value: true });
  	var attributor_1 = __webpack_require__(12);
  	function match(node, prefix) {
  	    var className = node.getAttribute('class') || '';
  	    return className.split(/\s+/).filter(function (name) {
  	        return name.indexOf(prefix + "-") === 0;
  	    });
  	}
  	var ClassAttributor = /** @class */ (function (_super) {
  	    __extends(ClassAttributor, _super);
  	    function ClassAttributor() {
  	        return _super !== null && _super.apply(this, arguments) || this;
  	    }
  	    ClassAttributor.keys = function (node) {
  	        return (node.getAttribute('class') || '').split(/\s+/).map(function (name) {
  	            return name
  	                .split('-')
  	                .slice(0, -1)
  	                .join('-');
  	        });
  	    };
  	    ClassAttributor.prototype.add = function (node, value) {
  	        if (!this.canAdd(node, value))
  	            return false;
  	        this.remove(node);
  	        node.classList.add(this.keyName + "-" + value);
  	        return true;
  	    };
  	    ClassAttributor.prototype.remove = function (node) {
  	        var matches = match(node, this.keyName);
  	        matches.forEach(function (name) {
  	            node.classList.remove(name);
  	        });
  	        if (node.classList.length === 0) {
  	            node.removeAttribute('class');
  	        }
  	    };
  	    ClassAttributor.prototype.value = function (node) {
  	        var result = match(node, this.keyName)[0] || '';
  	        var value = result.slice(this.keyName.length + 1); // +1 for hyphen
  	        return this.canAdd(node, value) ? value : '';
  	    };
  	    return ClassAttributor;
  	}(attributor_1.default));
  	exports.default = ClassAttributor;


  	/***/ }),
  	/* 33 */
  	/***/ (function(module, exports, __webpack_require__) {

  	var __extends = (this && this.__extends) || (function () {
  	    var extendStatics = Object.setPrototypeOf ||
  	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
  	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
  	    return function (d, b) {
  	        extendStatics(d, b);
  	        function __() { this.constructor = d; }
  	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  	    };
  	})();
  	Object.defineProperty(exports, "__esModule", { value: true });
  	var attributor_1 = __webpack_require__(12);
  	function camelize(name) {
  	    var parts = name.split('-');
  	    var rest = parts
  	        .slice(1)
  	        .map(function (part) {
  	        return part[0].toUpperCase() + part.slice(1);
  	    })
  	        .join('');
  	    return parts[0] + rest;
  	}
  	var StyleAttributor = /** @class */ (function (_super) {
  	    __extends(StyleAttributor, _super);
  	    function StyleAttributor() {
  	        return _super !== null && _super.apply(this, arguments) || this;
  	    }
  	    StyleAttributor.keys = function (node) {
  	        return (node.getAttribute('style') || '').split(';').map(function (value) {
  	            var arr = value.split(':');
  	            return arr[0].trim();
  	        });
  	    };
  	    StyleAttributor.prototype.add = function (node, value) {
  	        if (!this.canAdd(node, value))
  	            return false;
  	        // @ts-ignore
  	        node.style[camelize(this.keyName)] = value;
  	        return true;
  	    };
  	    StyleAttributor.prototype.remove = function (node) {
  	        // @ts-ignore
  	        node.style[camelize(this.keyName)] = '';
  	        if (!node.getAttribute('style')) {
  	            node.removeAttribute('style');
  	        }
  	    };
  	    StyleAttributor.prototype.value = function (node) {
  	        // @ts-ignore
  	        var value = node.style[camelize(this.keyName)];
  	        return this.canAdd(node, value) ? value : '';
  	    };
  	    return StyleAttributor;
  	}(attributor_1.default));
  	exports.default = StyleAttributor;


  	/***/ }),
  	/* 34 */
  	/***/ (function(module, exports, __webpack_require__) {


  	Object.defineProperty(exports, "__esModule", {
  	  value: true
  	});

  	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  	var Theme = function () {
  	  function Theme(quill, options) {
  	    _classCallCheck(this, Theme);

  	    this.quill = quill;
  	    this.options = options;
  	    this.modules = {};
  	  }

  	  _createClass(Theme, [{
  	    key: 'init',
  	    value: function init() {
  	      var _this = this;

  	      Object.keys(this.options.modules).forEach(function (name) {
  	        if (_this.modules[name] == null) {
  	          _this.addModule(name);
  	        }
  	      });
  	    }
  	  }, {
  	    key: 'addModule',
  	    value: function addModule(name) {
  	      var moduleClass = this.quill.constructor.import('modules/' + name);
  	      this.modules[name] = new moduleClass(this.quill, this.options.modules[name] || {});
  	      return this.modules[name];
  	    }
  	  }]);

  	  return Theme;
  	}();

  	Theme.DEFAULTS = {
  	  modules: {}
  	};
  	Theme.themes = {
  	  'default': Theme
  	};

  	exports.default = Theme;

  	/***/ }),
  	/* 35 */
  	/***/ (function(module, exports, __webpack_require__) {


  	Object.defineProperty(exports, "__esModule", {
  	  value: true
  	});

  	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  	var _parchment = __webpack_require__(0);

  	var _parchment2 = _interopRequireDefault(_parchment);

  	var _text = __webpack_require__(7);

  	var _text2 = _interopRequireDefault(_text);

  	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  	var GUARD_TEXT = '\uFEFF';

  	var Embed = function (_Parchment$Embed) {
  	  _inherits(Embed, _Parchment$Embed);

  	  function Embed(node) {
  	    _classCallCheck(this, Embed);

  	    var _this = _possibleConstructorReturn(this, (Embed.__proto__ || Object.getPrototypeOf(Embed)).call(this, node));

  	    _this.contentNode = document.createElement('span');
  	    _this.contentNode.setAttribute('contenteditable', false);
  	    [].slice.call(_this.domNode.childNodes).forEach(function (childNode) {
  	      _this.contentNode.appendChild(childNode);
  	    });
  	    _this.leftGuard = document.createTextNode(GUARD_TEXT);
  	    _this.rightGuard = document.createTextNode(GUARD_TEXT);
  	    _this.domNode.appendChild(_this.leftGuard);
  	    _this.domNode.appendChild(_this.contentNode);
  	    _this.domNode.appendChild(_this.rightGuard);
  	    return _this;
  	  }

  	  _createClass(Embed, [{
  	    key: 'index',
  	    value: function index(node, offset) {
  	      if (node === this.leftGuard) return 0;
  	      if (node === this.rightGuard) return 1;
  	      return _get(Embed.prototype.__proto__ || Object.getPrototypeOf(Embed.prototype), 'index', this).call(this, node, offset);
  	    }
  	  }, {
  	    key: 'restore',
  	    value: function restore(node) {
  	      var range = void 0,
  	          textNode = void 0;
  	      var text = node.data.split(GUARD_TEXT).join('');
  	      if (node === this.leftGuard) {
  	        if (this.prev instanceof _text2.default) {
  	          var prevLength = this.prev.length();
  	          this.prev.insertAt(prevLength, text);
  	          range = {
  	            startNode: this.prev.domNode,
  	            startOffset: prevLength + text.length
  	          };
  	        } else {
  	          textNode = document.createTextNode(text);
  	          this.parent.insertBefore(_parchment2.default.create(textNode), this);
  	          range = {
  	            startNode: textNode,
  	            startOffset: text.length
  	          };
  	        }
  	      } else if (node === this.rightGuard) {
  	        if (this.next instanceof _text2.default) {
  	          this.next.insertAt(0, text);
  	          range = {
  	            startNode: this.next.domNode,
  	            startOffset: text.length
  	          };
  	        } else {
  	          textNode = document.createTextNode(text);
  	          this.parent.insertBefore(_parchment2.default.create(textNode), this.next);
  	          range = {
  	            startNode: textNode,
  	            startOffset: text.length
  	          };
  	        }
  	      }
  	      node.data = GUARD_TEXT;
  	      return range;
  	    }
  	  }, {
  	    key: 'update',
  	    value: function update(mutations, context) {
  	      var _this2 = this;

  	      mutations.forEach(function (mutation) {
  	        if (mutation.type === 'characterData' && (mutation.target === _this2.leftGuard || mutation.target === _this2.rightGuard)) {
  	          var range = _this2.restore(mutation.target);
  	          if (range) context.range = range;
  	        }
  	      });
  	    }
  	  }]);

  	  return Embed;
  	}(_parchment2.default.Embed);

  	exports.default = Embed;

  	/***/ }),
  	/* 36 */
  	/***/ (function(module, exports, __webpack_require__) {


  	Object.defineProperty(exports, "__esModule", {
  	  value: true
  	});
  	exports.AlignStyle = exports.AlignClass = exports.AlignAttribute = undefined;

  	var _parchment = __webpack_require__(0);

  	var _parchment2 = _interopRequireDefault(_parchment);

  	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  	var config = {
  	  scope: _parchment2.default.Scope.BLOCK,
  	  whitelist: ['right', 'center', 'justify']
  	};

  	var AlignAttribute = new _parchment2.default.Attributor.Attribute('align', 'align', config);
  	var AlignClass = new _parchment2.default.Attributor.Class('align', 'ql-align', config);
  	var AlignStyle = new _parchment2.default.Attributor.Style('align', 'text-align', config);

  	exports.AlignAttribute = AlignAttribute;
  	exports.AlignClass = AlignClass;
  	exports.AlignStyle = AlignStyle;

  	/***/ }),
  	/* 37 */
  	/***/ (function(module, exports, __webpack_require__) {


  	Object.defineProperty(exports, "__esModule", {
  	  value: true
  	});
  	exports.BackgroundStyle = exports.BackgroundClass = undefined;

  	var _parchment = __webpack_require__(0);

  	var _parchment2 = _interopRequireDefault(_parchment);

  	var _color = __webpack_require__(26);

  	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  	var BackgroundClass = new _parchment2.default.Attributor.Class('background', 'ql-bg', {
  	  scope: _parchment2.default.Scope.INLINE
  	});
  	var BackgroundStyle = new _color.ColorAttributor('background', 'background-color', {
  	  scope: _parchment2.default.Scope.INLINE
  	});

  	exports.BackgroundClass = BackgroundClass;
  	exports.BackgroundStyle = BackgroundStyle;

  	/***/ }),
  	/* 38 */
  	/***/ (function(module, exports, __webpack_require__) {


  	Object.defineProperty(exports, "__esModule", {
  	  value: true
  	});
  	exports.DirectionStyle = exports.DirectionClass = exports.DirectionAttribute = undefined;

  	var _parchment = __webpack_require__(0);

  	var _parchment2 = _interopRequireDefault(_parchment);

  	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  	var config = {
  	  scope: _parchment2.default.Scope.BLOCK,
  	  whitelist: ['rtl']
  	};

  	var DirectionAttribute = new _parchment2.default.Attributor.Attribute('direction', 'dir', config);
  	var DirectionClass = new _parchment2.default.Attributor.Class('direction', 'ql-direction', config);
  	var DirectionStyle = new _parchment2.default.Attributor.Style('direction', 'direction', config);

  	exports.DirectionAttribute = DirectionAttribute;
  	exports.DirectionClass = DirectionClass;
  	exports.DirectionStyle = DirectionStyle;

  	/***/ }),
  	/* 39 */
  	/***/ (function(module, exports, __webpack_require__) {


  	Object.defineProperty(exports, "__esModule", {
  	  value: true
  	});
  	exports.FontClass = exports.FontStyle = undefined;

  	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  	var _parchment = __webpack_require__(0);

  	var _parchment2 = _interopRequireDefault(_parchment);

  	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  	var config = {
  	  scope: _parchment2.default.Scope.INLINE,
  	  whitelist: ['serif', 'monospace']
  	};

  	var FontClass = new _parchment2.default.Attributor.Class('font', 'ql-font', config);

  	var FontStyleAttributor = function (_Parchment$Attributor) {
  	  _inherits(FontStyleAttributor, _Parchment$Attributor);

  	  function FontStyleAttributor() {
  	    _classCallCheck(this, FontStyleAttributor);

  	    return _possibleConstructorReturn(this, (FontStyleAttributor.__proto__ || Object.getPrototypeOf(FontStyleAttributor)).apply(this, arguments));
  	  }

  	  _createClass(FontStyleAttributor, [{
  	    key: 'value',
  	    value: function value(node) {
  	      return _get(FontStyleAttributor.prototype.__proto__ || Object.getPrototypeOf(FontStyleAttributor.prototype), 'value', this).call(this, node).replace(/["']/g, '');
  	    }
  	  }]);

  	  return FontStyleAttributor;
  	}(_parchment2.default.Attributor.Style);

  	var FontStyle = new FontStyleAttributor('font', 'font-family', config);

  	exports.FontStyle = FontStyle;
  	exports.FontClass = FontClass;

  	/***/ }),
  	/* 40 */
  	/***/ (function(module, exports, __webpack_require__) {


  	Object.defineProperty(exports, "__esModule", {
  	  value: true
  	});
  	exports.SizeStyle = exports.SizeClass = undefined;

  	var _parchment = __webpack_require__(0);

  	var _parchment2 = _interopRequireDefault(_parchment);

  	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  	var SizeClass = new _parchment2.default.Attributor.Class('size', 'ql-size', {
  	  scope: _parchment2.default.Scope.INLINE,
  	  whitelist: ['small', 'large', 'huge']
  	});
  	var SizeStyle = new _parchment2.default.Attributor.Style('size', 'font-size', {
  	  scope: _parchment2.default.Scope.INLINE,
  	  whitelist: ['10px', '18px', '32px']
  	});

  	exports.SizeClass = SizeClass;
  	exports.SizeStyle = SizeStyle;

  	/***/ }),
  	/* 41 */
  	/***/ (function(module, exports, __webpack_require__) {


  	module.exports = {
  	  'align': {
  	    '': __webpack_require__(76),
  	    'center': __webpack_require__(77),
  	    'right': __webpack_require__(78),
  	    'justify': __webpack_require__(79)
  	  },
  	  'background': __webpack_require__(80),
  	  'blockquote': __webpack_require__(81),
  	  'bold': __webpack_require__(82),
  	  'clean': __webpack_require__(83),
  	  'code': __webpack_require__(58),
  	  'code-block': __webpack_require__(58),
  	  'color': __webpack_require__(84),
  	  'direction': {
  	    '': __webpack_require__(85),
  	    'rtl': __webpack_require__(86)
  	  },
  	  'float': {
  	    'center': __webpack_require__(87),
  	    'full': __webpack_require__(88),
  	    'left': __webpack_require__(89),
  	    'right': __webpack_require__(90)
  	  },
  	  'formula': __webpack_require__(91),
  	  'header': {
  	    '1': __webpack_require__(92),
  	    '2': __webpack_require__(93)
  	  },
  	  'italic': __webpack_require__(94),
  	  'image': __webpack_require__(95),
  	  'indent': {
  	    '+1': __webpack_require__(96),
  	    '-1': __webpack_require__(97)
  	  },
  	  'link': __webpack_require__(98),
  	  'list': {
  	    'ordered': __webpack_require__(99),
  	    'bullet': __webpack_require__(100),
  	    'check': __webpack_require__(101)
  	  },
  	  'script': {
  	    'sub': __webpack_require__(102),
  	    'super': __webpack_require__(103)
  	  },
  	  'strike': __webpack_require__(104),
  	  'underline': __webpack_require__(105),
  	  'video': __webpack_require__(106)
  	};

  	/***/ }),
  	/* 42 */
  	/***/ (function(module, exports, __webpack_require__) {


  	Object.defineProperty(exports, "__esModule", {
  	  value: true
  	});
  	exports.getLastChangeIndex = exports.default = undefined;

  	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  	var _parchment = __webpack_require__(0);

  	var _parchment2 = _interopRequireDefault(_parchment);

  	var _quill = __webpack_require__(5);

  	var _quill2 = _interopRequireDefault(_quill);

  	var _module = __webpack_require__(9);

  	var _module2 = _interopRequireDefault(_module);

  	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  	var History = function (_Module) {
  	  _inherits(History, _Module);

  	  function History(quill, options) {
  	    _classCallCheck(this, History);

  	    var _this = _possibleConstructorReturn(this, (History.__proto__ || Object.getPrototypeOf(History)).call(this, quill, options));

  	    _this.lastRecorded = 0;
  	    _this.ignoreChange = false;
  	    _this.clear();
  	    _this.quill.on(_quill2.default.events.EDITOR_CHANGE, function (eventName, delta, oldDelta, source) {
  	      if (eventName !== _quill2.default.events.TEXT_CHANGE || _this.ignoreChange) return;
  	      if (!_this.options.userOnly || source === _quill2.default.sources.USER) {
  	        _this.record(delta, oldDelta);
  	      } else {
  	        _this.transform(delta);
  	      }
  	    });
  	    _this.quill.keyboard.addBinding({ key: 'Z', shortKey: true }, _this.undo.bind(_this));
  	    _this.quill.keyboard.addBinding({ key: 'Z', shortKey: true, shiftKey: true }, _this.redo.bind(_this));
  	    if (/Win/i.test(navigator.platform)) {
  	      _this.quill.keyboard.addBinding({ key: 'Y', shortKey: true }, _this.redo.bind(_this));
  	    }
  	    return _this;
  	  }

  	  _createClass(History, [{
  	    key: 'change',
  	    value: function change(source, dest) {
  	      if (this.stack[source].length === 0) return;
  	      var delta = this.stack[source].pop();
  	      this.stack[dest].push(delta);
  	      this.lastRecorded = 0;
  	      this.ignoreChange = true;
  	      this.quill.updateContents(delta[source], _quill2.default.sources.USER);
  	      this.ignoreChange = false;
  	      var index = getLastChangeIndex(delta[source]);
  	      this.quill.setSelection(index);
  	    }
  	  }, {
  	    key: 'clear',
  	    value: function clear() {
  	      this.stack = { undo: [], redo: [] };
  	    }
  	  }, {
  	    key: 'cutoff',
  	    value: function cutoff() {
  	      this.lastRecorded = 0;
  	    }
  	  }, {
  	    key: 'record',
  	    value: function record(changeDelta, oldDelta) {
  	      if (changeDelta.ops.length === 0) return;
  	      this.stack.redo = [];
  	      var undoDelta = this.quill.getContents().diff(oldDelta);
  	      var timestamp = Date.now();
  	      if (this.lastRecorded + this.options.delay > timestamp && this.stack.undo.length > 0) {
  	        var delta = this.stack.undo.pop();
  	        undoDelta = undoDelta.compose(delta.undo);
  	        changeDelta = delta.redo.compose(changeDelta);
  	      } else {
  	        this.lastRecorded = timestamp;
  	      }
  	      this.stack.undo.push({
  	        redo: changeDelta,
  	        undo: undoDelta
  	      });
  	      if (this.stack.undo.length > this.options.maxStack) {
  	        this.stack.undo.shift();
  	      }
  	    }
  	  }, {
  	    key: 'redo',
  	    value: function redo() {
  	      this.change('redo', 'undo');
  	    }
  	  }, {
  	    key: 'transform',
  	    value: function transform(delta) {
  	      this.stack.undo.forEach(function (change) {
  	        change.undo = delta.transform(change.undo, true);
  	        change.redo = delta.transform(change.redo, true);
  	      });
  	      this.stack.redo.forEach(function (change) {
  	        change.undo = delta.transform(change.undo, true);
  	        change.redo = delta.transform(change.redo, true);
  	      });
  	    }
  	  }, {
  	    key: 'undo',
  	    value: function undo() {
  	      this.change('undo', 'redo');
  	    }
  	  }]);

  	  return History;
  	}(_module2.default);

  	History.DEFAULTS = {
  	  delay: 1000,
  	  maxStack: 100,
  	  userOnly: false
  	};

  	function endsWithNewlineChange(delta) {
  	  var lastOp = delta.ops[delta.ops.length - 1];
  	  if (lastOp == null) return false;
  	  if (lastOp.insert != null) {
  	    return typeof lastOp.insert === 'string' && lastOp.insert.endsWith('\n');
  	  }
  	  if (lastOp.attributes != null) {
  	    return Object.keys(lastOp.attributes).some(function (attr) {
  	      return _parchment2.default.query(attr, _parchment2.default.Scope.BLOCK) != null;
  	    });
  	  }
  	  return false;
  	}

  	function getLastChangeIndex(delta) {
  	  var deleteLength = delta.reduce(function (length, op) {
  	    length += op.delete || 0;
  	    return length;
  	  }, 0);
  	  var changeIndex = delta.length() - deleteLength;
  	  if (endsWithNewlineChange(delta)) {
  	    changeIndex -= 1;
  	  }
  	  return changeIndex;
  	}

  	exports.default = History;
  	exports.getLastChangeIndex = getLastChangeIndex;

  	/***/ }),
  	/* 43 */
  	/***/ (function(module, exports, __webpack_require__) {


  	Object.defineProperty(exports, "__esModule", {
  	  value: true
  	});
  	exports.default = exports.BaseTooltip = undefined;

  	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  	var _extend = __webpack_require__(3);

  	var _extend2 = _interopRequireDefault(_extend);

  	var _quillDelta = __webpack_require__(2);

  	var _quillDelta2 = _interopRequireDefault(_quillDelta);

  	var _emitter = __webpack_require__(8);

  	var _emitter2 = _interopRequireDefault(_emitter);

  	var _keyboard = __webpack_require__(23);

  	var _keyboard2 = _interopRequireDefault(_keyboard);

  	var _theme = __webpack_require__(34);

  	var _theme2 = _interopRequireDefault(_theme);

  	var _colorPicker = __webpack_require__(59);

  	var _colorPicker2 = _interopRequireDefault(_colorPicker);

  	var _iconPicker = __webpack_require__(60);

  	var _iconPicker2 = _interopRequireDefault(_iconPicker);

  	var _picker = __webpack_require__(28);

  	var _picker2 = _interopRequireDefault(_picker);

  	var _tooltip = __webpack_require__(61);

  	var _tooltip2 = _interopRequireDefault(_tooltip);

  	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  	var ALIGNS = [false, 'center', 'right', 'justify'];

  	var COLORS = ["#000000", "#e60000", "#ff9900", "#ffff00", "#008a00", "#0066cc", "#9933ff", "#ffffff", "#facccc", "#ffebcc", "#ffffcc", "#cce8cc", "#cce0f5", "#ebd6ff", "#bbbbbb", "#f06666", "#ffc266", "#ffff66", "#66b966", "#66a3e0", "#c285ff", "#888888", "#a10000", "#b26b00", "#b2b200", "#006100", "#0047b2", "#6b24b2", "#444444", "#5c0000", "#663d00", "#666600", "#003700", "#002966", "#3d1466"];

  	var FONTS = [false, 'serif', 'monospace'];

  	var HEADERS = ['1', '2', '3', false];

  	var SIZES = ['small', false, 'large', 'huge'];

  	var BaseTheme = function (_Theme) {
  	  _inherits(BaseTheme, _Theme);

  	  function BaseTheme(quill, options) {
  	    _classCallCheck(this, BaseTheme);

  	    var _this = _possibleConstructorReturn(this, (BaseTheme.__proto__ || Object.getPrototypeOf(BaseTheme)).call(this, quill, options));

  	    var listener = function listener(e) {
  	      if (!document.body.contains(quill.root)) {
  	        return document.body.removeEventListener('click', listener);
  	      }
  	      if (_this.tooltip != null && !_this.tooltip.root.contains(e.target) && document.activeElement !== _this.tooltip.textbox && !_this.quill.hasFocus()) {
  	        _this.tooltip.hide();
  	      }
  	      if (_this.pickers != null) {
  	        _this.pickers.forEach(function (picker) {
  	          if (!picker.container.contains(e.target)) {
  	            picker.close();
  	          }
  	        });
  	      }
  	    };
  	    quill.emitter.listenDOM('click', document.body, listener);
  	    return _this;
  	  }

  	  _createClass(BaseTheme, [{
  	    key: 'addModule',
  	    value: function addModule(name) {
  	      var module = _get(BaseTheme.prototype.__proto__ || Object.getPrototypeOf(BaseTheme.prototype), 'addModule', this).call(this, name);
  	      if (name === 'toolbar') {
  	        this.extendToolbar(module);
  	      }
  	      return module;
  	    }
  	  }, {
  	    key: 'buildButtons',
  	    value: function buildButtons(buttons, icons) {
  	      buttons.forEach(function (button) {
  	        var className = button.getAttribute('class') || '';
  	        className.split(/\s+/).forEach(function (name) {
  	          if (!name.startsWith('ql-')) return;
  	          name = name.slice('ql-'.length);
  	          if (icons[name] == null) return;
  	          if (name === 'direction') {
  	            button.innerHTML = icons[name][''] + icons[name]['rtl'];
  	          } else if (typeof icons[name] === 'string') {
  	            button.innerHTML = icons[name];
  	          } else {
  	            var value = button.value || '';
  	            if (value != null && icons[name][value]) {
  	              button.innerHTML = icons[name][value];
  	            }
  	          }
  	        });
  	      });
  	    }
  	  }, {
  	    key: 'buildPickers',
  	    value: function buildPickers(selects, icons) {
  	      var _this2 = this;

  	      this.pickers = selects.map(function (select) {
  	        if (select.classList.contains('ql-align')) {
  	          if (select.querySelector('option') == null) {
  	            fillSelect(select, ALIGNS);
  	          }
  	          return new _iconPicker2.default(select, icons.align);
  	        } else if (select.classList.contains('ql-background') || select.classList.contains('ql-color')) {
  	          var format = select.classList.contains('ql-background') ? 'background' : 'color';
  	          if (select.querySelector('option') == null) {
  	            fillSelect(select, COLORS, format === 'background' ? '#ffffff' : '#000000');
  	          }
  	          return new _colorPicker2.default(select, icons[format]);
  	        } else {
  	          if (select.querySelector('option') == null) {
  	            if (select.classList.contains('ql-font')) {
  	              fillSelect(select, FONTS);
  	            } else if (select.classList.contains('ql-header')) {
  	              fillSelect(select, HEADERS);
  	            } else if (select.classList.contains('ql-size')) {
  	              fillSelect(select, SIZES);
  	            }
  	          }
  	          return new _picker2.default(select);
  	        }
  	      });
  	      var update = function update() {
  	        _this2.pickers.forEach(function (picker) {
  	          picker.update();
  	        });
  	      };
  	      this.quill.on(_emitter2.default.events.EDITOR_CHANGE, update);
  	    }
  	  }]);

  	  return BaseTheme;
  	}(_theme2.default);

  	BaseTheme.DEFAULTS = (0, _extend2.default)(true, {}, _theme2.default.DEFAULTS, {
  	  modules: {
  	    toolbar: {
  	      handlers: {
  	        formula: function formula() {
  	          this.quill.theme.tooltip.edit('formula');
  	        },
  	        image: function image() {
  	          var _this3 = this;

  	          var fileInput = this.container.querySelector('input.ql-image[type=file]');
  	          if (fileInput == null) {
  	            fileInput = document.createElement('input');
  	            fileInput.setAttribute('type', 'file');
  	            fileInput.setAttribute('accept', 'image/png, image/gif, image/jpeg, image/bmp, image/x-icon');
  	            fileInput.classList.add('ql-image');
  	            fileInput.addEventListener('change', function () {
  	              if (fileInput.files != null && fileInput.files[0] != null) {
  	                var reader = new FileReader();
  	                reader.onload = function (e) {
  	                  var range = _this3.quill.getSelection(true);
  	                  _this3.quill.updateContents(new _quillDelta2.default().retain(range.index).delete(range.length).insert({ image: e.target.result }), _emitter2.default.sources.USER);
  	                  _this3.quill.setSelection(range.index + 1, _emitter2.default.sources.SILENT);
  	                  fileInput.value = "";
  	                };
  	                reader.readAsDataURL(fileInput.files[0]);
  	              }
  	            });
  	            this.container.appendChild(fileInput);
  	          }
  	          fileInput.click();
  	        },
  	        video: function video() {
  	          this.quill.theme.tooltip.edit('video');
  	        }
  	      }
  	    }
  	  }
  	});

  	var BaseTooltip = function (_Tooltip) {
  	  _inherits(BaseTooltip, _Tooltip);

  	  function BaseTooltip(quill, boundsContainer) {
  	    _classCallCheck(this, BaseTooltip);

  	    var _this4 = _possibleConstructorReturn(this, (BaseTooltip.__proto__ || Object.getPrototypeOf(BaseTooltip)).call(this, quill, boundsContainer));

  	    _this4.textbox = _this4.root.querySelector('input[type="text"]');
  	    _this4.listen();
  	    return _this4;
  	  }

  	  _createClass(BaseTooltip, [{
  	    key: 'listen',
  	    value: function listen() {
  	      var _this5 = this;

  	      this.textbox.addEventListener('keydown', function (event) {
  	        if (_keyboard2.default.match(event, 'enter')) {
  	          _this5.save();
  	          event.preventDefault();
  	        } else if (_keyboard2.default.match(event, 'escape')) {
  	          _this5.cancel();
  	          event.preventDefault();
  	        }
  	      });
  	    }
  	  }, {
  	    key: 'cancel',
  	    value: function cancel() {
  	      this.hide();
  	    }
  	  }, {
  	    key: 'edit',
  	    value: function edit() {
  	      var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'link';
  	      var preview = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

  	      this.root.classList.remove('ql-hidden');
  	      this.root.classList.add('ql-editing');
  	      if (preview != null) {
  	        this.textbox.value = preview;
  	      } else if (mode !== this.root.getAttribute('data-mode')) {
  	        this.textbox.value = '';
  	      }
  	      this.position(this.quill.getBounds(this.quill.selection.savedRange));
  	      this.textbox.select();
  	      this.textbox.setAttribute('placeholder', this.textbox.getAttribute('data-' + mode) || '');
  	      this.root.setAttribute('data-mode', mode);
  	    }
  	  }, {
  	    key: 'restoreFocus',
  	    value: function restoreFocus() {
  	      var scrollTop = this.quill.scrollingContainer.scrollTop;
  	      this.quill.focus();
  	      this.quill.scrollingContainer.scrollTop = scrollTop;
  	    }
  	  }, {
  	    key: 'save',
  	    value: function save() {
  	      var value = this.textbox.value;
  	      switch (this.root.getAttribute('data-mode')) {
  	        case 'link':
  	          {
  	            var scrollTop = this.quill.root.scrollTop;
  	            if (this.linkRange) {
  	              this.quill.formatText(this.linkRange, 'link', value, _emitter2.default.sources.USER);
  	              delete this.linkRange;
  	            } else {
  	              this.restoreFocus();
  	              this.quill.format('link', value, _emitter2.default.sources.USER);
  	            }
  	            this.quill.root.scrollTop = scrollTop;
  	            break;
  	          }
  	        case 'video':
  	          {
  	            value = extractVideoUrl(value);
  	          } // eslint-disable-next-line no-fallthrough
  	        case 'formula':
  	          {
  	            if (!value) break;
  	            var range = this.quill.getSelection(true);
  	            if (range != null) {
  	              var index = range.index + range.length;
  	              this.quill.insertEmbed(index, this.root.getAttribute('data-mode'), value, _emitter2.default.sources.USER);
  	              if (this.root.getAttribute('data-mode') === 'formula') {
  	                this.quill.insertText(index + 1, ' ', _emitter2.default.sources.USER);
  	              }
  	              this.quill.setSelection(index + 2, _emitter2.default.sources.USER);
  	            }
  	            break;
  	          }
  	      }
  	      this.textbox.value = '';
  	      this.hide();
  	    }
  	  }]);

  	  return BaseTooltip;
  	}(_tooltip2.default);

  	function extractVideoUrl(url) {
  	  var match = url.match(/^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtube\.com\/watch.*v=([a-zA-Z0-9_-]+)/) || url.match(/^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtu\.be\/([a-zA-Z0-9_-]+)/);
  	  if (match) {
  	    return (match[1] || 'https') + '://www.youtube.com/embed/' + match[2] + '?showinfo=0';
  	  }
  	  if (match = url.match(/^(?:(https?):\/\/)?(?:www\.)?vimeo\.com\/(\d+)/)) {
  	    // eslint-disable-line no-cond-assign
  	    return (match[1] || 'https') + '://player.vimeo.com/video/' + match[2] + '/';
  	  }
  	  return url;
  	}

  	function fillSelect(select, values) {
  	  var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  	  values.forEach(function (value) {
  	    var option = document.createElement('option');
  	    if (value === defaultValue) {
  	      option.setAttribute('selected', 'selected');
  	    } else {
  	      option.setAttribute('value', value);
  	    }
  	    select.appendChild(option);
  	  });
  	}

  	exports.BaseTooltip = BaseTooltip;
  	exports.default = BaseTheme;

  	/***/ }),
  	/* 44 */
  	/***/ (function(module, exports, __webpack_require__) {

  	Object.defineProperty(exports, "__esModule", { value: true });
  	var LinkedList = /** @class */ (function () {
  	    function LinkedList() {
  	        this.head = this.tail = null;
  	        this.length = 0;
  	    }
  	    LinkedList.prototype.append = function () {
  	        var nodes = [];
  	        for (var _i = 0; _i < arguments.length; _i++) {
  	            nodes[_i] = arguments[_i];
  	        }
  	        this.insertBefore(nodes[0], null);
  	        if (nodes.length > 1) {
  	            this.append.apply(this, nodes.slice(1));
  	        }
  	    };
  	    LinkedList.prototype.contains = function (node) {
  	        var cur, next = this.iterator();
  	        while ((cur = next())) {
  	            if (cur === node)
  	                return true;
  	        }
  	        return false;
  	    };
  	    LinkedList.prototype.insertBefore = function (node, refNode) {
  	        if (!node)
  	            return;
  	        node.next = refNode;
  	        if (refNode != null) {
  	            node.prev = refNode.prev;
  	            if (refNode.prev != null) {
  	                refNode.prev.next = node;
  	            }
  	            refNode.prev = node;
  	            if (refNode === this.head) {
  	                this.head = node;
  	            }
  	        }
  	        else if (this.tail != null) {
  	            this.tail.next = node;
  	            node.prev = this.tail;
  	            this.tail = node;
  	        }
  	        else {
  	            node.prev = null;
  	            this.head = this.tail = node;
  	        }
  	        this.length += 1;
  	    };
  	    LinkedList.prototype.offset = function (target) {
  	        var index = 0, cur = this.head;
  	        while (cur != null) {
  	            if (cur === target)
  	                return index;
  	            index += cur.length();
  	            cur = cur.next;
  	        }
  	        return -1;
  	    };
  	    LinkedList.prototype.remove = function (node) {
  	        if (!this.contains(node))
  	            return;
  	        if (node.prev != null)
  	            node.prev.next = node.next;
  	        if (node.next != null)
  	            node.next.prev = node.prev;
  	        if (node === this.head)
  	            this.head = node.next;
  	        if (node === this.tail)
  	            this.tail = node.prev;
  	        this.length -= 1;
  	    };
  	    LinkedList.prototype.iterator = function (curNode) {
  	        if (curNode === void 0) { curNode = this.head; }
  	        // TODO use yield when we can
  	        return function () {
  	            var ret = curNode;
  	            if (curNode != null)
  	                curNode = curNode.next;
  	            return ret;
  	        };
  	    };
  	    LinkedList.prototype.find = function (index, inclusive) {
  	        if (inclusive === void 0) { inclusive = false; }
  	        var cur, next = this.iterator();
  	        while ((cur = next())) {
  	            var length = cur.length();
  	            if (index < length ||
  	                (inclusive && index === length && (cur.next == null || cur.next.length() !== 0))) {
  	                return [cur, index];
  	            }
  	            index -= length;
  	        }
  	        return [null, 0];
  	    };
  	    LinkedList.prototype.forEach = function (callback) {
  	        var cur, next = this.iterator();
  	        while ((cur = next())) {
  	            callback(cur);
  	        }
  	    };
  	    LinkedList.prototype.forEachAt = function (index, length, callback) {
  	        if (length <= 0)
  	            return;
  	        var _a = this.find(index), startNode = _a[0], offset = _a[1];
  	        var cur, curIndex = index - offset, next = this.iterator(startNode);
  	        while ((cur = next()) && curIndex < index + length) {
  	            var curLength = cur.length();
  	            if (index > curIndex) {
  	                callback(cur, index - curIndex, Math.min(length, curIndex + curLength - index));
  	            }
  	            else {
  	                callback(cur, 0, Math.min(curLength, index + length - curIndex));
  	            }
  	            curIndex += curLength;
  	        }
  	    };
  	    LinkedList.prototype.map = function (callback) {
  	        return this.reduce(function (memo, cur) {
  	            memo.push(callback(cur));
  	            return memo;
  	        }, []);
  	    };
  	    LinkedList.prototype.reduce = function (callback, memo) {
  	        var cur, next = this.iterator();
  	        while ((cur = next())) {
  	            memo = callback(memo, cur);
  	        }
  	        return memo;
  	    };
  	    return LinkedList;
  	}());
  	exports.default = LinkedList;


  	/***/ }),
  	/* 45 */
  	/***/ (function(module, exports, __webpack_require__) {

  	var __extends = (this && this.__extends) || (function () {
  	    var extendStatics = Object.setPrototypeOf ||
  	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
  	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
  	    return function (d, b) {
  	        extendStatics(d, b);
  	        function __() { this.constructor = d; }
  	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  	    };
  	})();
  	Object.defineProperty(exports, "__esModule", { value: true });
  	var container_1 = __webpack_require__(17);
  	var Registry = __webpack_require__(1);
  	var OBSERVER_CONFIG = {
  	    attributes: true,
  	    characterData: true,
  	    characterDataOldValue: true,
  	    childList: true,
  	    subtree: true,
  	};
  	var MAX_OPTIMIZE_ITERATIONS = 100;
  	var ScrollBlot = /** @class */ (function (_super) {
  	    __extends(ScrollBlot, _super);
  	    function ScrollBlot(node) {
  	        var _this = _super.call(this, node) || this;
  	        _this.scroll = _this;
  	        _this.observer = new MutationObserver(function (mutations) {
  	            _this.update(mutations);
  	        });
  	        _this.observer.observe(_this.domNode, OBSERVER_CONFIG);
  	        _this.attach();
  	        return _this;
  	    }
  	    ScrollBlot.prototype.detach = function () {
  	        _super.prototype.detach.call(this);
  	        this.observer.disconnect();
  	    };
  	    ScrollBlot.prototype.deleteAt = function (index, length) {
  	        this.update();
  	        if (index === 0 && length === this.length()) {
  	            this.children.forEach(function (child) {
  	                child.remove();
  	            });
  	        }
  	        else {
  	            _super.prototype.deleteAt.call(this, index, length);
  	        }
  	    };
  	    ScrollBlot.prototype.formatAt = function (index, length, name, value) {
  	        this.update();
  	        _super.prototype.formatAt.call(this, index, length, name, value);
  	    };
  	    ScrollBlot.prototype.insertAt = function (index, value, def) {
  	        this.update();
  	        _super.prototype.insertAt.call(this, index, value, def);
  	    };
  	    ScrollBlot.prototype.optimize = function (mutations, context) {
  	        var _this = this;
  	        if (mutations === void 0) { mutations = []; }
  	        if (context === void 0) { context = {}; }
  	        _super.prototype.optimize.call(this, context);
  	        // We must modify mutations directly, cannot make copy and then modify
  	        var records = [].slice.call(this.observer.takeRecords());
  	        // Array.push currently seems to be implemented by a non-tail recursive function
  	        // so we cannot just mutations.push.apply(mutations, this.observer.takeRecords());
  	        while (records.length > 0)
  	            mutations.push(records.pop());
  	        // TODO use WeakMap
  	        var mark = function (blot, markParent) {
  	            if (markParent === void 0) { markParent = true; }
  	            if (blot == null || blot === _this)
  	                return;
  	            if (blot.domNode.parentNode == null)
  	                return;
  	            // @ts-ignore
  	            if (blot.domNode[Registry.DATA_KEY].mutations == null) {
  	                // @ts-ignore
  	                blot.domNode[Registry.DATA_KEY].mutations = [];
  	            }
  	            if (markParent)
  	                mark(blot.parent);
  	        };
  	        var optimize = function (blot) {
  	            // Post-order traversal
  	            if (
  	            // @ts-ignore
  	            blot.domNode[Registry.DATA_KEY] == null ||
  	                // @ts-ignore
  	                blot.domNode[Registry.DATA_KEY].mutations == null) {
  	                return;
  	            }
  	            if (blot instanceof container_1.default) {
  	                blot.children.forEach(optimize);
  	            }
  	            blot.optimize(context);
  	        };
  	        var remaining = mutations;
  	        for (var i = 0; remaining.length > 0; i += 1) {
  	            if (i >= MAX_OPTIMIZE_ITERATIONS) {
  	                throw new Error('[Parchment] Maximum optimize iterations reached');
  	            }
  	            remaining.forEach(function (mutation) {
  	                var blot = Registry.find(mutation.target, true);
  	                if (blot == null)
  	                    return;
  	                if (blot.domNode === mutation.target) {
  	                    if (mutation.type === 'childList') {
  	                        mark(Registry.find(mutation.previousSibling, false));
  	                        [].forEach.call(mutation.addedNodes, function (node) {
  	                            var child = Registry.find(node, false);
  	                            mark(child, false);
  	                            if (child instanceof container_1.default) {
  	                                child.children.forEach(function (grandChild) {
  	                                    mark(grandChild, false);
  	                                });
  	                            }
  	                        });
  	                    }
  	                    else if (mutation.type === 'attributes') {
  	                        mark(blot.prev);
  	                    }
  	                }
  	                mark(blot);
  	            });
  	            this.children.forEach(optimize);
  	            remaining = [].slice.call(this.observer.takeRecords());
  	            records = remaining.slice();
  	            while (records.length > 0)
  	                mutations.push(records.pop());
  	        }
  	    };
  	    ScrollBlot.prototype.update = function (mutations, context) {
  	        var _this = this;
  	        if (context === void 0) { context = {}; }
  	        mutations = mutations || this.observer.takeRecords();
  	        // TODO use WeakMap
  	        mutations
  	            .map(function (mutation) {
  	            var blot = Registry.find(mutation.target, true);
  	            if (blot == null)
  	                return null;
  	            // @ts-ignore
  	            if (blot.domNode[Registry.DATA_KEY].mutations == null) {
  	                // @ts-ignore
  	                blot.domNode[Registry.DATA_KEY].mutations = [mutation];
  	                return blot;
  	            }
  	            else {
  	                // @ts-ignore
  	                blot.domNode[Registry.DATA_KEY].mutations.push(mutation);
  	                return null;
  	            }
  	        })
  	            .forEach(function (blot) {
  	            if (blot == null ||
  	                blot === _this ||
  	                //@ts-ignore
  	                blot.domNode[Registry.DATA_KEY] == null)
  	                return;
  	            // @ts-ignore
  	            blot.update(blot.domNode[Registry.DATA_KEY].mutations || [], context);
  	        });
  	        // @ts-ignore
  	        if (this.domNode[Registry.DATA_KEY].mutations != null) {
  	            // @ts-ignore
  	            _super.prototype.update.call(this, this.domNode[Registry.DATA_KEY].mutations, context);
  	        }
  	        this.optimize(mutations, context);
  	    };
  	    ScrollBlot.blotName = 'scroll';
  	    ScrollBlot.defaultChild = 'block';
  	    ScrollBlot.scope = Registry.Scope.BLOCK_BLOT;
  	    ScrollBlot.tagName = 'DIV';
  	    return ScrollBlot;
  	}(container_1.default));
  	exports.default = ScrollBlot;


  	/***/ }),
  	/* 46 */
  	/***/ (function(module, exports, __webpack_require__) {

  	var __extends = (this && this.__extends) || (function () {
  	    var extendStatics = Object.setPrototypeOf ||
  	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
  	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
  	    return function (d, b) {
  	        extendStatics(d, b);
  	        function __() { this.constructor = d; }
  	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  	    };
  	})();
  	Object.defineProperty(exports, "__esModule", { value: true });
  	var format_1 = __webpack_require__(18);
  	var Registry = __webpack_require__(1);
  	// Shallow object comparison
  	function isEqual(obj1, obj2) {
  	    if (Object.keys(obj1).length !== Object.keys(obj2).length)
  	        return false;
  	    // @ts-ignore
  	    for (var prop in obj1) {
  	        // @ts-ignore
  	        if (obj1[prop] !== obj2[prop])
  	            return false;
  	    }
  	    return true;
  	}
  	var InlineBlot = /** @class */ (function (_super) {
  	    __extends(InlineBlot, _super);
  	    function InlineBlot() {
  	        return _super !== null && _super.apply(this, arguments) || this;
  	    }
  	    InlineBlot.formats = function (domNode) {
  	        if (domNode.tagName === InlineBlot.tagName)
  	            return undefined;
  	        return _super.formats.call(this, domNode);
  	    };
  	    InlineBlot.prototype.format = function (name, value) {
  	        var _this = this;
  	        if (name === this.statics.blotName && !value) {
  	            this.children.forEach(function (child) {
  	                if (!(child instanceof format_1.default)) {
  	                    child = child.wrap(InlineBlot.blotName, true);
  	                }
  	                _this.attributes.copy(child);
  	            });
  	            this.unwrap();
  	        }
  	        else {
  	            _super.prototype.format.call(this, name, value);
  	        }
  	    };
  	    InlineBlot.prototype.formatAt = function (index, length, name, value) {
  	        if (this.formats()[name] != null || Registry.query(name, Registry.Scope.ATTRIBUTE)) {
  	            var blot = this.isolate(index, length);
  	            blot.format(name, value);
  	        }
  	        else {
  	            _super.prototype.formatAt.call(this, index, length, name, value);
  	        }
  	    };
  	    InlineBlot.prototype.optimize = function (context) {
  	        _super.prototype.optimize.call(this, context);
  	        var formats = this.formats();
  	        if (Object.keys(formats).length === 0) {
  	            return this.unwrap(); // unformatted span
  	        }
  	        var next = this.next;
  	        if (next instanceof InlineBlot && next.prev === this && isEqual(formats, next.formats())) {
  	            next.moveChildren(this);
  	            next.remove();
  	        }
  	    };
  	    InlineBlot.blotName = 'inline';
  	    InlineBlot.scope = Registry.Scope.INLINE_BLOT;
  	    InlineBlot.tagName = 'SPAN';
  	    return InlineBlot;
  	}(format_1.default));
  	exports.default = InlineBlot;


  	/***/ }),
  	/* 47 */
  	/***/ (function(module, exports, __webpack_require__) {

  	var __extends = (this && this.__extends) || (function () {
  	    var extendStatics = Object.setPrototypeOf ||
  	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
  	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
  	    return function (d, b) {
  	        extendStatics(d, b);
  	        function __() { this.constructor = d; }
  	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  	    };
  	})();
  	Object.defineProperty(exports, "__esModule", { value: true });
  	var format_1 = __webpack_require__(18);
  	var Registry = __webpack_require__(1);
  	var BlockBlot = /** @class */ (function (_super) {
  	    __extends(BlockBlot, _super);
  	    function BlockBlot() {
  	        return _super !== null && _super.apply(this, arguments) || this;
  	    }
  	    BlockBlot.formats = function (domNode) {
  	        var tagName = Registry.query(BlockBlot.blotName).tagName;
  	        if (domNode.tagName === tagName)
  	            return undefined;
  	        return _super.formats.call(this, domNode);
  	    };
  	    BlockBlot.prototype.format = function (name, value) {
  	        if (Registry.query(name, Registry.Scope.BLOCK) == null) {
  	            return;
  	        }
  	        else if (name === this.statics.blotName && !value) {
  	            this.replaceWith(BlockBlot.blotName);
  	        }
  	        else {
  	            _super.prototype.format.call(this, name, value);
  	        }
  	    };
  	    BlockBlot.prototype.formatAt = function (index, length, name, value) {
  	        if (Registry.query(name, Registry.Scope.BLOCK) != null) {
  	            this.format(name, value);
  	        }
  	        else {
  	            _super.prototype.formatAt.call(this, index, length, name, value);
  	        }
  	    };
  	    BlockBlot.prototype.insertAt = function (index, value, def) {
  	        if (def == null || Registry.query(value, Registry.Scope.INLINE) != null) {
  	            // Insert text or inline
  	            _super.prototype.insertAt.call(this, index, value, def);
  	        }
  	        else {
  	            var after = this.split(index);
  	            var blot = Registry.create(value, def);
  	            after.parent.insertBefore(blot, after);
  	        }
  	    };
  	    BlockBlot.prototype.update = function (mutations, context) {
  	        if (navigator.userAgent.match(/Trident/)) {
  	            this.build();
  	        }
  	        else {
  	            _super.prototype.update.call(this, mutations, context);
  	        }
  	    };
  	    BlockBlot.blotName = 'block';
  	    BlockBlot.scope = Registry.Scope.BLOCK_BLOT;
  	    BlockBlot.tagName = 'P';
  	    return BlockBlot;
  	}(format_1.default));
  	exports.default = BlockBlot;


  	/***/ }),
  	/* 48 */
  	/***/ (function(module, exports, __webpack_require__) {

  	var __extends = (this && this.__extends) || (function () {
  	    var extendStatics = Object.setPrototypeOf ||
  	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
  	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
  	    return function (d, b) {
  	        extendStatics(d, b);
  	        function __() { this.constructor = d; }
  	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  	    };
  	})();
  	Object.defineProperty(exports, "__esModule", { value: true });
  	var leaf_1 = __webpack_require__(19);
  	var EmbedBlot = /** @class */ (function (_super) {
  	    __extends(EmbedBlot, _super);
  	    function EmbedBlot() {
  	        return _super !== null && _super.apply(this, arguments) || this;
  	    }
  	    EmbedBlot.formats = function (domNode) {
  	        return undefined;
  	    };
  	    EmbedBlot.prototype.format = function (name, value) {
  	        // super.formatAt wraps, which is what we want in general,
  	        // but this allows subclasses to overwrite for formats
  	        // that just apply to particular embeds
  	        _super.prototype.formatAt.call(this, 0, this.length(), name, value);
  	    };
  	    EmbedBlot.prototype.formatAt = function (index, length, name, value) {
  	        if (index === 0 && length === this.length()) {
  	            this.format(name, value);
  	        }
  	        else {
  	            _super.prototype.formatAt.call(this, index, length, name, value);
  	        }
  	    };
  	    EmbedBlot.prototype.formats = function () {
  	        return this.statics.formats(this.domNode);
  	    };
  	    return EmbedBlot;
  	}(leaf_1.default));
  	exports.default = EmbedBlot;


  	/***/ }),
  	/* 49 */
  	/***/ (function(module, exports, __webpack_require__) {

  	var __extends = (this && this.__extends) || (function () {
  	    var extendStatics = Object.setPrototypeOf ||
  	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
  	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
  	    return function (d, b) {
  	        extendStatics(d, b);
  	        function __() { this.constructor = d; }
  	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  	    };
  	})();
  	Object.defineProperty(exports, "__esModule", { value: true });
  	var leaf_1 = __webpack_require__(19);
  	var Registry = __webpack_require__(1);
  	var TextBlot = /** @class */ (function (_super) {
  	    __extends(TextBlot, _super);
  	    function TextBlot(node) {
  	        var _this = _super.call(this, node) || this;
  	        _this.text = _this.statics.value(_this.domNode);
  	        return _this;
  	    }
  	    TextBlot.create = function (value) {
  	        return document.createTextNode(value);
  	    };
  	    TextBlot.value = function (domNode) {
  	        var text = domNode.data;
  	        // @ts-ignore
  	        if (text['normalize'])
  	            text = text['normalize']();
  	        return text;
  	    };
  	    TextBlot.prototype.deleteAt = function (index, length) {
  	        this.domNode.data = this.text = this.text.slice(0, index) + this.text.slice(index + length);
  	    };
  	    TextBlot.prototype.index = function (node, offset) {
  	        if (this.domNode === node) {
  	            return offset;
  	        }
  	        return -1;
  	    };
  	    TextBlot.prototype.insertAt = function (index, value, def) {
  	        if (def == null) {
  	            this.text = this.text.slice(0, index) + value + this.text.slice(index);
  	            this.domNode.data = this.text;
  	        }
  	        else {
  	            _super.prototype.insertAt.call(this, index, value, def);
  	        }
  	    };
  	    TextBlot.prototype.length = function () {
  	        return this.text.length;
  	    };
  	    TextBlot.prototype.optimize = function (context) {
  	        _super.prototype.optimize.call(this, context);
  	        this.text = this.statics.value(this.domNode);
  	        if (this.text.length === 0) {
  	            this.remove();
  	        }
  	        else if (this.next instanceof TextBlot && this.next.prev === this) {
  	            this.insertAt(this.length(), this.next.value());
  	            this.next.remove();
  	        }
  	    };
  	    TextBlot.prototype.position = function (index, inclusive) {
  	        return [this.domNode, index];
  	    };
  	    TextBlot.prototype.split = function (index, force) {
  	        if (force === void 0) { force = false; }
  	        if (!force) {
  	            if (index === 0)
  	                return this;
  	            if (index === this.length())
  	                return this.next;
  	        }
  	        var after = Registry.create(this.domNode.splitText(index));
  	        this.parent.insertBefore(after, this.next);
  	        this.text = this.statics.value(this.domNode);
  	        return after;
  	    };
  	    TextBlot.prototype.update = function (mutations, context) {
  	        var _this = this;
  	        if (mutations.some(function (mutation) {
  	            return mutation.type === 'characterData' && mutation.target === _this.domNode;
  	        })) {
  	            this.text = this.statics.value(this.domNode);
  	        }
  	    };
  	    TextBlot.prototype.value = function () {
  	        return this.text;
  	    };
  	    TextBlot.blotName = 'text';
  	    TextBlot.scope = Registry.Scope.INLINE_BLOT;
  	    return TextBlot;
  	}(leaf_1.default));
  	exports.default = TextBlot;


  	/***/ }),
  	/* 50 */
  	/***/ (function(module, exports, __webpack_require__) {


  	var elem = document.createElement('div');
  	elem.classList.toggle('test-class', false);
  	if (elem.classList.contains('test-class')) {
  	  var _toggle = DOMTokenList.prototype.toggle;
  	  DOMTokenList.prototype.toggle = function (token, force) {
  	    if (arguments.length > 1 && !this.contains(token) === !force) {
  	      return force;
  	    } else {
  	      return _toggle.call(this, token);
  	    }
  	  };
  	}

  	if (!String.prototype.startsWith) {
  	  String.prototype.startsWith = function (searchString, position) {
  	    position = position || 0;
  	    return this.substr(position, searchString.length) === searchString;
  	  };
  	}

  	if (!String.prototype.endsWith) {
  	  String.prototype.endsWith = function (searchString, position) {
  	    var subjectString = this.toString();
  	    if (typeof position !== 'number' || !isFinite(position) || Math.floor(position) !== position || position > subjectString.length) {
  	      position = subjectString.length;
  	    }
  	    position -= searchString.length;
  	    var lastIndex = subjectString.indexOf(searchString, position);
  	    return lastIndex !== -1 && lastIndex === position;
  	  };
  	}

  	if (!Array.prototype.find) {
  	  Object.defineProperty(Array.prototype, "find", {
  	    value: function value(predicate) {
  	      if (this === null) {
  	        throw new TypeError('Array.prototype.find called on null or undefined');
  	      }
  	      if (typeof predicate !== 'function') {
  	        throw new TypeError('predicate must be a function');
  	      }
  	      var list = Object(this);
  	      var length = list.length >>> 0;
  	      var thisArg = arguments[1];
  	      var value;

  	      for (var i = 0; i < length; i++) {
  	        value = list[i];
  	        if (predicate.call(thisArg, value, i, list)) {
  	          return value;
  	        }
  	      }
  	      return undefined;
  	    }
  	  });
  	}

  	document.addEventListener("DOMContentLoaded", function () {
  	  // Disable resizing in Firefox
  	  document.execCommand("enableObjectResizing", false, false);
  	  // Disable automatic linkifying in IE11
  	  document.execCommand("autoUrlDetect", false, false);
  	});

  	/***/ }),
  	/* 51 */
  	/***/ (function(module, exports) {

  	/**
  	 * This library modifies the diff-patch-match library by Neil Fraser
  	 * by removing the patch and match functionality and certain advanced
  	 * options in the diff function. The original license is as follows:
  	 *
  	 * ===
  	 *
  	 * Diff Match and Patch
  	 *
  	 * Copyright 2006 Google Inc.
  	 * http://code.google.com/p/google-diff-match-patch/
  	 *
  	 * Licensed under the Apache License, Version 2.0 (the "License");
  	 * you may not use this file except in compliance with the License.
  	 * You may obtain a copy of the License at
  	 *
  	 *   http://www.apache.org/licenses/LICENSE-2.0
  	 *
  	 * Unless required by applicable law or agreed to in writing, software
  	 * distributed under the License is distributed on an "AS IS" BASIS,
  	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  	 * See the License for the specific language governing permissions and
  	 * limitations under the License.
  	 */


  	/**
  	 * The data structure representing a diff is an array of tuples:
  	 * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]
  	 * which means: delete 'Hello', add 'Goodbye' and keep ' world.'
  	 */
  	var DIFF_DELETE = -1;
  	var DIFF_INSERT = 1;
  	var DIFF_EQUAL = 0;


  	/**
  	 * Find the differences between two texts.  Simplifies the problem by stripping
  	 * any common prefix or suffix off the texts before diffing.
  	 * @param {string} text1 Old string to be diffed.
  	 * @param {string} text2 New string to be diffed.
  	 * @param {Int} cursor_pos Expected edit position in text1 (optional)
  	 * @return {Array} Array of diff tuples.
  	 */
  	function diff_main(text1, text2, cursor_pos) {
  	  // Check for equality (speedup).
  	  if (text1 == text2) {
  	    if (text1) {
  	      return [[DIFF_EQUAL, text1]];
  	    }
  	    return [];
  	  }

  	  // Check cursor_pos within bounds
  	  if (cursor_pos < 0 || text1.length < cursor_pos) {
  	    cursor_pos = null;
  	  }

  	  // Trim off common prefix (speedup).
  	  var commonlength = diff_commonPrefix(text1, text2);
  	  var commonprefix = text1.substring(0, commonlength);
  	  text1 = text1.substring(commonlength);
  	  text2 = text2.substring(commonlength);

  	  // Trim off common suffix (speedup).
  	  commonlength = diff_commonSuffix(text1, text2);
  	  var commonsuffix = text1.substring(text1.length - commonlength);
  	  text1 = text1.substring(0, text1.length - commonlength);
  	  text2 = text2.substring(0, text2.length - commonlength);

  	  // Compute the diff on the middle block.
  	  var diffs = diff_compute_(text1, text2);

  	  // Restore the prefix and suffix.
  	  if (commonprefix) {
  	    diffs.unshift([DIFF_EQUAL, commonprefix]);
  	  }
  	  if (commonsuffix) {
  	    diffs.push([DIFF_EQUAL, commonsuffix]);
  	  }
  	  diff_cleanupMerge(diffs);
  	  if (cursor_pos != null) {
  	    diffs = fix_cursor(diffs, cursor_pos);
  	  }
  	  diffs = fix_emoji(diffs);
  	  return diffs;
  	}

  	/**
  	 * Find the differences between two texts.  Assumes that the texts do not
  	 * have any common prefix or suffix.
  	 * @param {string} text1 Old string to be diffed.
  	 * @param {string} text2 New string to be diffed.
  	 * @return {Array} Array of diff tuples.
  	 */
  	function diff_compute_(text1, text2) {
  	  var diffs;

  	  if (!text1) {
  	    // Just add some text (speedup).
  	    return [[DIFF_INSERT, text2]];
  	  }

  	  if (!text2) {
  	    // Just delete some text (speedup).
  	    return [[DIFF_DELETE, text1]];
  	  }

  	  var longtext = text1.length > text2.length ? text1 : text2;
  	  var shorttext = text1.length > text2.length ? text2 : text1;
  	  var i = longtext.indexOf(shorttext);
  	  if (i != -1) {
  	    // Shorter text is inside the longer text (speedup).
  	    diffs = [[DIFF_INSERT, longtext.substring(0, i)],
  	             [DIFF_EQUAL, shorttext],
  	             [DIFF_INSERT, longtext.substring(i + shorttext.length)]];
  	    // Swap insertions for deletions if diff is reversed.
  	    if (text1.length > text2.length) {
  	      diffs[0][0] = diffs[2][0] = DIFF_DELETE;
  	    }
  	    return diffs;
  	  }

  	  if (shorttext.length == 1) {
  	    // Single character string.
  	    // After the previous speedup, the character can't be an equality.
  	    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];
  	  }

  	  // Check to see if the problem can be split in two.
  	  var hm = diff_halfMatch_(text1, text2);
  	  if (hm) {
  	    // A half-match was found, sort out the return data.
  	    var text1_a = hm[0];
  	    var text1_b = hm[1];
  	    var text2_a = hm[2];
  	    var text2_b = hm[3];
  	    var mid_common = hm[4];
  	    // Send both pairs off for separate processing.
  	    var diffs_a = diff_main(text1_a, text2_a);
  	    var diffs_b = diff_main(text1_b, text2_b);
  	    // Merge the results.
  	    return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);
  	  }

  	  return diff_bisect_(text1, text2);
  	}

  	/**
  	 * Find the 'middle snake' of a diff, split the problem in two
  	 * and return the recursively constructed diff.
  	 * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.
  	 * @param {string} text1 Old string to be diffed.
  	 * @param {string} text2 New string to be diffed.
  	 * @return {Array} Array of diff tuples.
  	 * @private
  	 */
  	function diff_bisect_(text1, text2) {
  	  // Cache the text lengths to prevent multiple calls.
  	  var text1_length = text1.length;
  	  var text2_length = text2.length;
  	  var max_d = Math.ceil((text1_length + text2_length) / 2);
  	  var v_offset = max_d;
  	  var v_length = 2 * max_d;
  	  var v1 = new Array(v_length);
  	  var v2 = new Array(v_length);
  	  // Setting all elements to -1 is faster in Chrome & Firefox than mixing
  	  // integers and undefined.
  	  for (var x = 0; x < v_length; x++) {
  	    v1[x] = -1;
  	    v2[x] = -1;
  	  }
  	  v1[v_offset + 1] = 0;
  	  v2[v_offset + 1] = 0;
  	  var delta = text1_length - text2_length;
  	  // If the total number of characters is odd, then the front path will collide
  	  // with the reverse path.
  	  var front = (delta % 2 != 0);
  	  // Offsets for start and end of k loop.
  	  // Prevents mapping of space beyond the grid.
  	  var k1start = 0;
  	  var k1end = 0;
  	  var k2start = 0;
  	  var k2end = 0;
  	  for (var d = 0; d < max_d; d++) {
  	    // Walk the front path one step.
  	    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {
  	      var k1_offset = v_offset + k1;
  	      var x1;
  	      if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {
  	        x1 = v1[k1_offset + 1];
  	      } else {
  	        x1 = v1[k1_offset - 1] + 1;
  	      }
  	      var y1 = x1 - k1;
  	      while (x1 < text1_length && y1 < text2_length &&
  	             text1.charAt(x1) == text2.charAt(y1)) {
  	        x1++;
  	        y1++;
  	      }
  	      v1[k1_offset] = x1;
  	      if (x1 > text1_length) {
  	        // Ran off the right of the graph.
  	        k1end += 2;
  	      } else if (y1 > text2_length) {
  	        // Ran off the bottom of the graph.
  	        k1start += 2;
  	      } else if (front) {
  	        var k2_offset = v_offset + delta - k1;
  	        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {
  	          // Mirror x2 onto top-left coordinate system.
  	          var x2 = text1_length - v2[k2_offset];
  	          if (x1 >= x2) {
  	            // Overlap detected.
  	            return diff_bisectSplit_(text1, text2, x1, y1);
  	          }
  	        }
  	      }
  	    }

  	    // Walk the reverse path one step.
  	    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {
  	      var k2_offset = v_offset + k2;
  	      var x2;
  	      if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {
  	        x2 = v2[k2_offset + 1];
  	      } else {
  	        x2 = v2[k2_offset - 1] + 1;
  	      }
  	      var y2 = x2 - k2;
  	      while (x2 < text1_length && y2 < text2_length &&
  	             text1.charAt(text1_length - x2 - 1) ==
  	             text2.charAt(text2_length - y2 - 1)) {
  	        x2++;
  	        y2++;
  	      }
  	      v2[k2_offset] = x2;
  	      if (x2 > text1_length) {
  	        // Ran off the left of the graph.
  	        k2end += 2;
  	      } else if (y2 > text2_length) {
  	        // Ran off the top of the graph.
  	        k2start += 2;
  	      } else if (!front) {
  	        var k1_offset = v_offset + delta - k2;
  	        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {
  	          var x1 = v1[k1_offset];
  	          var y1 = v_offset + x1 - k1_offset;
  	          // Mirror x2 onto top-left coordinate system.
  	          x2 = text1_length - x2;
  	          if (x1 >= x2) {
  	            // Overlap detected.
  	            return diff_bisectSplit_(text1, text2, x1, y1);
  	          }
  	        }
  	      }
  	    }
  	  }
  	  // Diff took too long and hit the deadline or
  	  // number of diffs equals number of characters, no commonality at all.
  	  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];
  	}

  	/**
  	 * Given the location of the 'middle snake', split the diff in two parts
  	 * and recurse.
  	 * @param {string} text1 Old string to be diffed.
  	 * @param {string} text2 New string to be diffed.
  	 * @param {number} x Index of split point in text1.
  	 * @param {number} y Index of split point in text2.
  	 * @return {Array} Array of diff tuples.
  	 */
  	function diff_bisectSplit_(text1, text2, x, y) {
  	  var text1a = text1.substring(0, x);
  	  var text2a = text2.substring(0, y);
  	  var text1b = text1.substring(x);
  	  var text2b = text2.substring(y);

  	  // Compute both diffs serially.
  	  var diffs = diff_main(text1a, text2a);
  	  var diffsb = diff_main(text1b, text2b);

  	  return diffs.concat(diffsb);
  	}

  	/**
  	 * Determine the common prefix of two strings.
  	 * @param {string} text1 First string.
  	 * @param {string} text2 Second string.
  	 * @return {number} The number of characters common to the start of each
  	 *     string.
  	 */
  	function diff_commonPrefix(text1, text2) {
  	  // Quick check for common null cases.
  	  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {
  	    return 0;
  	  }
  	  // Binary search.
  	  // Performance analysis: http://neil.fraser.name/news/2007/10/09/
  	  var pointermin = 0;
  	  var pointermax = Math.min(text1.length, text2.length);
  	  var pointermid = pointermax;
  	  var pointerstart = 0;
  	  while (pointermin < pointermid) {
  	    if (text1.substring(pointerstart, pointermid) ==
  	        text2.substring(pointerstart, pointermid)) {
  	      pointermin = pointermid;
  	      pointerstart = pointermin;
  	    } else {
  	      pointermax = pointermid;
  	    }
  	    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
  	  }
  	  return pointermid;
  	}

  	/**
  	 * Determine the common suffix of two strings.
  	 * @param {string} text1 First string.
  	 * @param {string} text2 Second string.
  	 * @return {number} The number of characters common to the end of each string.
  	 */
  	function diff_commonSuffix(text1, text2) {
  	  // Quick check for common null cases.
  	  if (!text1 || !text2 ||
  	      text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {
  	    return 0;
  	  }
  	  // Binary search.
  	  // Performance analysis: http://neil.fraser.name/news/2007/10/09/
  	  var pointermin = 0;
  	  var pointermax = Math.min(text1.length, text2.length);
  	  var pointermid = pointermax;
  	  var pointerend = 0;
  	  while (pointermin < pointermid) {
  	    if (text1.substring(text1.length - pointermid, text1.length - pointerend) ==
  	        text2.substring(text2.length - pointermid, text2.length - pointerend)) {
  	      pointermin = pointermid;
  	      pointerend = pointermin;
  	    } else {
  	      pointermax = pointermid;
  	    }
  	    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
  	  }
  	  return pointermid;
  	}

  	/**
  	 * Do the two texts share a substring which is at least half the length of the
  	 * longer text?
  	 * This speedup can produce non-minimal diffs.
  	 * @param {string} text1 First string.
  	 * @param {string} text2 Second string.
  	 * @return {Array.<string>} Five element Array, containing the prefix of
  	 *     text1, the suffix of text1, the prefix of text2, the suffix of
  	 *     text2 and the common middle.  Or null if there was no match.
  	 */
  	function diff_halfMatch_(text1, text2) {
  	  var longtext = text1.length > text2.length ? text1 : text2;
  	  var shorttext = text1.length > text2.length ? text2 : text1;
  	  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {
  	    return null;  // Pointless.
  	  }

  	  /**
  	   * Does a substring of shorttext exist within longtext such that the substring
  	   * is at least half the length of longtext?
  	   * Closure, but does not reference any external variables.
  	   * @param {string} longtext Longer string.
  	   * @param {string} shorttext Shorter string.
  	   * @param {number} i Start index of quarter length substring within longtext.
  	   * @return {Array.<string>} Five element Array, containing the prefix of
  	   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix
  	   *     of shorttext and the common middle.  Or null if there was no match.
  	   * @private
  	   */
  	  function diff_halfMatchI_(longtext, shorttext, i) {
  	    // Start with a 1/4 length substring at position i as a seed.
  	    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));
  	    var j = -1;
  	    var best_common = '';
  	    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;
  	    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {
  	      var prefixLength = diff_commonPrefix(longtext.substring(i),
  	                                           shorttext.substring(j));
  	      var suffixLength = diff_commonSuffix(longtext.substring(0, i),
  	                                           shorttext.substring(0, j));
  	      if (best_common.length < suffixLength + prefixLength) {
  	        best_common = shorttext.substring(j - suffixLength, j) +
  	            shorttext.substring(j, j + prefixLength);
  	        best_longtext_a = longtext.substring(0, i - suffixLength);
  	        best_longtext_b = longtext.substring(i + prefixLength);
  	        best_shorttext_a = shorttext.substring(0, j - suffixLength);
  	        best_shorttext_b = shorttext.substring(j + prefixLength);
  	      }
  	    }
  	    if (best_common.length * 2 >= longtext.length) {
  	      return [best_longtext_a, best_longtext_b,
  	              best_shorttext_a, best_shorttext_b, best_common];
  	    } else {
  	      return null;
  	    }
  	  }

  	  // First check if the second quarter is the seed for a half-match.
  	  var hm1 = diff_halfMatchI_(longtext, shorttext,
  	                             Math.ceil(longtext.length / 4));
  	  // Check again based on the third quarter.
  	  var hm2 = diff_halfMatchI_(longtext, shorttext,
  	                             Math.ceil(longtext.length / 2));
  	  var hm;
  	  if (!hm1 && !hm2) {
  	    return null;
  	  } else if (!hm2) {
  	    hm = hm1;
  	  } else if (!hm1) {
  	    hm = hm2;
  	  } else {
  	    // Both matched.  Select the longest.
  	    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;
  	  }

  	  // A half-match was found, sort out the return data.
  	  var text1_a, text1_b, text2_a, text2_b;
  	  if (text1.length > text2.length) {
  	    text1_a = hm[0];
  	    text1_b = hm[1];
  	    text2_a = hm[2];
  	    text2_b = hm[3];
  	  } else {
  	    text2_a = hm[0];
  	    text2_b = hm[1];
  	    text1_a = hm[2];
  	    text1_b = hm[3];
  	  }
  	  var mid_common = hm[4];
  	  return [text1_a, text1_b, text2_a, text2_b, mid_common];
  	}

  	/**
  	 * Reorder and merge like edit sections.  Merge equalities.
  	 * Any edit section can move as long as it doesn't cross an equality.
  	 * @param {Array} diffs Array of diff tuples.
  	 */
  	function diff_cleanupMerge(diffs) {
  	  diffs.push([DIFF_EQUAL, '']);  // Add a dummy entry at the end.
  	  var pointer = 0;
  	  var count_delete = 0;
  	  var count_insert = 0;
  	  var text_delete = '';
  	  var text_insert = '';
  	  var commonlength;
  	  while (pointer < diffs.length) {
  	    switch (diffs[pointer][0]) {
  	      case DIFF_INSERT:
  	        count_insert++;
  	        text_insert += diffs[pointer][1];
  	        pointer++;
  	        break;
  	      case DIFF_DELETE:
  	        count_delete++;
  	        text_delete += diffs[pointer][1];
  	        pointer++;
  	        break;
  	      case DIFF_EQUAL:
  	        // Upon reaching an equality, check for prior redundancies.
  	        if (count_delete + count_insert > 1) {
  	          if (count_delete !== 0 && count_insert !== 0) {
  	            // Factor out any common prefixies.
  	            commonlength = diff_commonPrefix(text_insert, text_delete);
  	            if (commonlength !== 0) {
  	              if ((pointer - count_delete - count_insert) > 0 &&
  	                  diffs[pointer - count_delete - count_insert - 1][0] ==
  	                  DIFF_EQUAL) {
  	                diffs[pointer - count_delete - count_insert - 1][1] +=
  	                    text_insert.substring(0, commonlength);
  	              } else {
  	                diffs.splice(0, 0, [DIFF_EQUAL,
  	                                    text_insert.substring(0, commonlength)]);
  	                pointer++;
  	              }
  	              text_insert = text_insert.substring(commonlength);
  	              text_delete = text_delete.substring(commonlength);
  	            }
  	            // Factor out any common suffixies.
  	            commonlength = diff_commonSuffix(text_insert, text_delete);
  	            if (commonlength !== 0) {
  	              diffs[pointer][1] = text_insert.substring(text_insert.length -
  	                  commonlength) + diffs[pointer][1];
  	              text_insert = text_insert.substring(0, text_insert.length -
  	                  commonlength);
  	              text_delete = text_delete.substring(0, text_delete.length -
  	                  commonlength);
  	            }
  	          }
  	          // Delete the offending records and add the merged ones.
  	          if (count_delete === 0) {
  	            diffs.splice(pointer - count_insert,
  	                count_delete + count_insert, [DIFF_INSERT, text_insert]);
  	          } else if (count_insert === 0) {
  	            diffs.splice(pointer - count_delete,
  	                count_delete + count_insert, [DIFF_DELETE, text_delete]);
  	          } else {
  	            diffs.splice(pointer - count_delete - count_insert,
  	                count_delete + count_insert, [DIFF_DELETE, text_delete],
  	                [DIFF_INSERT, text_insert]);
  	          }
  	          pointer = pointer - count_delete - count_insert +
  	                    (count_delete ? 1 : 0) + (count_insert ? 1 : 0) + 1;
  	        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {
  	          // Merge this equality with the previous one.
  	          diffs[pointer - 1][1] += diffs[pointer][1];
  	          diffs.splice(pointer, 1);
  	        } else {
  	          pointer++;
  	        }
  	        count_insert = 0;
  	        count_delete = 0;
  	        text_delete = '';
  	        text_insert = '';
  	        break;
  	    }
  	  }
  	  if (diffs[diffs.length - 1][1] === '') {
  	    diffs.pop();  // Remove the dummy entry at the end.
  	  }

  	  // Second pass: look for single edits surrounded on both sides by equalities
  	  // which can be shifted sideways to eliminate an equality.
  	  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC
  	  var changes = false;
  	  pointer = 1;
  	  // Intentionally ignore the first and last element (don't need checking).
  	  while (pointer < diffs.length - 1) {
  	    if (diffs[pointer - 1][0] == DIFF_EQUAL &&
  	        diffs[pointer + 1][0] == DIFF_EQUAL) {
  	      // This is a single edit surrounded by equalities.
  	      if (diffs[pointer][1].substring(diffs[pointer][1].length -
  	          diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {
  	        // Shift the edit over the previous equality.
  	        diffs[pointer][1] = diffs[pointer - 1][1] +
  	            diffs[pointer][1].substring(0, diffs[pointer][1].length -
  	                                        diffs[pointer - 1][1].length);
  	        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];
  	        diffs.splice(pointer - 1, 1);
  	        changes = true;
  	      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==
  	          diffs[pointer + 1][1]) {
  	        // Shift the edit over the next equality.
  	        diffs[pointer - 1][1] += diffs[pointer + 1][1];
  	        diffs[pointer][1] =
  	            diffs[pointer][1].substring(diffs[pointer + 1][1].length) +
  	            diffs[pointer + 1][1];
  	        diffs.splice(pointer + 1, 1);
  	        changes = true;
  	      }
  	    }
  	    pointer++;
  	  }
  	  // If shifts were made, the diff needs reordering and another shift sweep.
  	  if (changes) {
  	    diff_cleanupMerge(diffs);
  	  }
  	}

  	var diff = diff_main;
  	diff.INSERT = DIFF_INSERT;
  	diff.DELETE = DIFF_DELETE;
  	diff.EQUAL = DIFF_EQUAL;

  	module.exports = diff;

  	/*
  	 * Modify a diff such that the cursor position points to the start of a change:
  	 * E.g.
  	 *   cursor_normalize_diff([[DIFF_EQUAL, 'abc']], 1)
  	 *     => [1, [[DIFF_EQUAL, 'a'], [DIFF_EQUAL, 'bc']]]
  	 *   cursor_normalize_diff([[DIFF_INSERT, 'new'], [DIFF_DELETE, 'xyz']], 2)
  	 *     => [2, [[DIFF_INSERT, 'new'], [DIFF_DELETE, 'xy'], [DIFF_DELETE, 'z']]]
  	 *
  	 * @param {Array} diffs Array of diff tuples
  	 * @param {Int} cursor_pos Suggested edit position. Must not be out of bounds!
  	 * @return {Array} A tuple [cursor location in the modified diff, modified diff]
  	 */
  	function cursor_normalize_diff (diffs, cursor_pos) {
  	  if (cursor_pos === 0) {
  	    return [DIFF_EQUAL, diffs];
  	  }
  	  for (var current_pos = 0, i = 0; i < diffs.length; i++) {
  	    var d = diffs[i];
  	    if (d[0] === DIFF_DELETE || d[0] === DIFF_EQUAL) {
  	      var next_pos = current_pos + d[1].length;
  	      if (cursor_pos === next_pos) {
  	        return [i + 1, diffs];
  	      } else if (cursor_pos < next_pos) {
  	        // copy to prevent side effects
  	        diffs = diffs.slice();
  	        // split d into two diff changes
  	        var split_pos = cursor_pos - current_pos;
  	        var d_left = [d[0], d[1].slice(0, split_pos)];
  	        var d_right = [d[0], d[1].slice(split_pos)];
  	        diffs.splice(i, 1, d_left, d_right);
  	        return [i + 1, diffs];
  	      } else {
  	        current_pos = next_pos;
  	      }
  	    }
  	  }
  	  throw new Error('cursor_pos is out of bounds!')
  	}

  	/*
  	 * Modify a diff such that the edit position is "shifted" to the proposed edit location (cursor_position).
  	 *
  	 * Case 1)
  	 *   Check if a naive shift is possible:
  	 *     [0, X], [ 1, Y] -> [ 1, Y], [0, X]    (if X + Y === Y + X)
  	 *     [0, X], [-1, Y] -> [-1, Y], [0, X]    (if X + Y === Y + X) - holds same result
  	 * Case 2)
  	 *   Check if the following shifts are possible:
  	 *     [0, 'pre'], [ 1, 'prefix'] -> [ 1, 'pre'], [0, 'pre'], [ 1, 'fix']
  	 *     [0, 'pre'], [-1, 'prefix'] -> [-1, 'pre'], [0, 'pre'], [-1, 'fix']
  	 *         ^            ^
  	 *         d          d_next
  	 *
  	 * @param {Array} diffs Array of diff tuples
  	 * @param {Int} cursor_pos Suggested edit position. Must not be out of bounds!
  	 * @return {Array} Array of diff tuples
  	 */
  	function fix_cursor (diffs, cursor_pos) {
  	  var norm = cursor_normalize_diff(diffs, cursor_pos);
  	  var ndiffs = norm[1];
  	  var cursor_pointer = norm[0];
  	  var d = ndiffs[cursor_pointer];
  	  var d_next = ndiffs[cursor_pointer + 1];

  	  if (d == null) {
  	    // Text was deleted from end of original string,
  	    // cursor is now out of bounds in new string
  	    return diffs;
  	  } else if (d[0] !== DIFF_EQUAL) {
  	    // A modification happened at the cursor location.
  	    // This is the expected outcome, so we can return the original diff.
  	    return diffs;
  	  } else {
  	    if (d_next != null && d[1] + d_next[1] === d_next[1] + d[1]) {
  	      // Case 1)
  	      // It is possible to perform a naive shift
  	      ndiffs.splice(cursor_pointer, 2, d_next, d);
  	      return merge_tuples(ndiffs, cursor_pointer, 2)
  	    } else if (d_next != null && d_next[1].indexOf(d[1]) === 0) {
  	      // Case 2)
  	      // d[1] is a prefix of d_next[1]
  	      // We can assume that d_next[0] !== 0, since d[0] === 0
  	      // Shift edit locations..
  	      ndiffs.splice(cursor_pointer, 2, [d_next[0], d[1]], [0, d[1]]);
  	      var suffix = d_next[1].slice(d[1].length);
  	      if (suffix.length > 0) {
  	        ndiffs.splice(cursor_pointer + 2, 0, [d_next[0], suffix]);
  	      }
  	      return merge_tuples(ndiffs, cursor_pointer, 3)
  	    } else {
  	      // Not possible to perform any modification
  	      return diffs;
  	    }
  	  }
  	}

  	/*
  	 * Check diff did not split surrogate pairs.
  	 * Ex. [0, '\uD83D'], [-1, '\uDC36'], [1, '\uDC2F'] -> [-1, '\uD83D\uDC36'], [1, '\uD83D\uDC2F']
  	 *     '\uD83D\uDC36' === '🐶', '\uD83D\uDC2F' === '🐯'
  	 *
  	 * @param {Array} diffs Array of diff tuples
  	 * @return {Array} Array of diff tuples
  	 */
  	function fix_emoji (diffs) {
  	  var compact = false;
  	  var starts_with_pair_end = function(str) {
  	    return str.charCodeAt(0) >= 0xDC00 && str.charCodeAt(0) <= 0xDFFF;
  	  };
  	  var ends_with_pair_start = function(str) {
  	    return str.charCodeAt(str.length-1) >= 0xD800 && str.charCodeAt(str.length-1) <= 0xDBFF;
  	  };
  	  for (var i = 2; i < diffs.length; i += 1) {
  	    if (diffs[i-2][0] === DIFF_EQUAL && ends_with_pair_start(diffs[i-2][1]) &&
  	        diffs[i-1][0] === DIFF_DELETE && starts_with_pair_end(diffs[i-1][1]) &&
  	        diffs[i][0] === DIFF_INSERT && starts_with_pair_end(diffs[i][1])) {
  	      compact = true;

  	      diffs[i-1][1] = diffs[i-2][1].slice(-1) + diffs[i-1][1];
  	      diffs[i][1] = diffs[i-2][1].slice(-1) + diffs[i][1];

  	      diffs[i-2][1] = diffs[i-2][1].slice(0, -1);
  	    }
  	  }
  	  if (!compact) {
  	    return diffs;
  	  }
  	  var fixed_diffs = [];
  	  for (var i = 0; i < diffs.length; i += 1) {
  	    if (diffs[i][1].length > 0) {
  	      fixed_diffs.push(diffs[i]);
  	    }
  	  }
  	  return fixed_diffs;
  	}

  	/*
  	 * Try to merge tuples with their neigbors in a given range.
  	 * E.g. [0, 'a'], [0, 'b'] -> [0, 'ab']
  	 *
  	 * @param {Array} diffs Array of diff tuples.
  	 * @param {Int} start Position of the first element to merge (diffs[start] is also merged with diffs[start - 1]).
  	 * @param {Int} length Number of consecutive elements to check.
  	 * @return {Array} Array of merged diff tuples.
  	 */
  	function merge_tuples (diffs, start, length) {
  	  // Check from (start-1) to (start+length).
  	  for (var i = start + length - 1; i >= 0 && i >= start - 1; i--) {
  	    if (i + 1 < diffs.length) {
  	      var left_d = diffs[i];
  	      var right_d = diffs[i+1];
  	      if (left_d[0] === right_d[1]) {
  	        diffs.splice(i, 2, [left_d[0], left_d[1] + right_d[1]]);
  	      }
  	    }
  	  }
  	  return diffs;
  	}


  	/***/ }),
  	/* 52 */
  	/***/ (function(module, exports) {

  	exports = module.exports = typeof Object.keys === 'function'
  	  ? Object.keys : shim;

  	exports.shim = shim;
  	function shim (obj) {
  	  var keys = [];
  	  for (var key in obj) keys.push(key);
  	  return keys;
  	}


  	/***/ }),
  	/* 53 */
  	/***/ (function(module, exports) {

  	var supportsArgumentsClass = (function(){
  	  return Object.prototype.toString.call(arguments)
  	})() == '[object Arguments]';

  	exports = module.exports = supportsArgumentsClass ? supported : unsupported;

  	exports.supported = supported;
  	function supported(object) {
  	  return Object.prototype.toString.call(object) == '[object Arguments]';
  	}
  	exports.unsupported = unsupported;
  	function unsupported(object){
  	  return object &&
  	    typeof object == 'object' &&
  	    typeof object.length == 'number' &&
  	    Object.prototype.hasOwnProperty.call(object, 'callee') &&
  	    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||
  	    false;
  	}

  	/***/ }),
  	/* 54 */
  	/***/ (function(module, exports) {

  	var has = Object.prototype.hasOwnProperty
  	  , prefix = '~';

  	/**
  	 * Constructor to create a storage for our `EE` objects.
  	 * An `Events` instance is a plain object whose properties are event names.
  	 *
  	 * @constructor
  	 * @api private
  	 */
  	function Events() {}

  	//
  	// We try to not inherit from `Object.prototype`. In some engines creating an
  	// instance in this way is faster than calling `Object.create(null)` directly.
  	// If `Object.create(null)` is not supported we prefix the event names with a
  	// character to make sure that the built-in object properties are not
  	// overridden or used as an attack vector.
  	//
  	if (Object.create) {
  	  Events.prototype = Object.create(null);

  	  //
  	  // This hack is needed because the `__proto__` property is still inherited in
  	  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
  	  //
  	  if (!new Events().__proto__) prefix = false;
  	}

  	/**
  	 * Representation of a single event listener.
  	 *
  	 * @param {Function} fn The listener function.
  	 * @param {Mixed} context The context to invoke the listener with.
  	 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
  	 * @constructor
  	 * @api private
  	 */
  	function EE(fn, context, once) {
  	  this.fn = fn;
  	  this.context = context;
  	  this.once = once || false;
  	}

  	/**
  	 * Minimal `EventEmitter` interface that is molded against the Node.js
  	 * `EventEmitter` interface.
  	 *
  	 * @constructor
  	 * @api public
  	 */
  	function EventEmitter() {
  	  this._events = new Events();
  	  this._eventsCount = 0;
  	}

  	/**
  	 * Return an array listing the events for which the emitter has registered
  	 * listeners.
  	 *
  	 * @returns {Array}
  	 * @api public
  	 */
  	EventEmitter.prototype.eventNames = function eventNames() {
  	  var names = []
  	    , events
  	    , name;

  	  if (this._eventsCount === 0) return names;

  	  for (name in (events = this._events)) {
  	    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
  	  }

  	  if (Object.getOwnPropertySymbols) {
  	    return names.concat(Object.getOwnPropertySymbols(events));
  	  }

  	  return names;
  	};

  	/**
  	 * Return the listeners registered for a given event.
  	 *
  	 * @param {String|Symbol} event The event name.
  	 * @param {Boolean} exists Only check if there are listeners.
  	 * @returns {Array|Boolean}
  	 * @api public
  	 */
  	EventEmitter.prototype.listeners = function listeners(event, exists) {
  	  var evt = prefix ? prefix + event : event
  	    , available = this._events[evt];

  	  if (exists) return !!available;
  	  if (!available) return [];
  	  if (available.fn) return [available.fn];

  	  for (var i = 0, l = available.length, ee = new Array(l); i < l; i++) {
  	    ee[i] = available[i].fn;
  	  }

  	  return ee;
  	};

  	/**
  	 * Calls each of the listeners registered for a given event.
  	 *
  	 * @param {String|Symbol} event The event name.
  	 * @returns {Boolean} `true` if the event had listeners, else `false`.
  	 * @api public
  	 */
  	EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
  	  var evt = prefix ? prefix + event : event;

  	  if (!this._events[evt]) return false;

  	  var listeners = this._events[evt]
  	    , len = arguments.length
  	    , args
  	    , i;

  	  if (listeners.fn) {
  	    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

  	    switch (len) {
  	      case 1: return listeners.fn.call(listeners.context), true;
  	      case 2: return listeners.fn.call(listeners.context, a1), true;
  	      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
  	      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
  	      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
  	      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
  	    }

  	    for (i = 1, args = new Array(len -1); i < len; i++) {
  	      args[i - 1] = arguments[i];
  	    }

  	    listeners.fn.apply(listeners.context, args);
  	  } else {
  	    var length = listeners.length
  	      , j;

  	    for (i = 0; i < length; i++) {
  	      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

  	      switch (len) {
  	        case 1: listeners[i].fn.call(listeners[i].context); break;
  	        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
  	        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
  	        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
  	        default:
  	          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
  	            args[j - 1] = arguments[j];
  	          }

  	          listeners[i].fn.apply(listeners[i].context, args);
  	      }
  	    }
  	  }

  	  return true;
  	};

  	/**
  	 * Add a listener for a given event.
  	 *
  	 * @param {String|Symbol} event The event name.
  	 * @param {Function} fn The listener function.
  	 * @param {Mixed} [context=this] The context to invoke the listener with.
  	 * @returns {EventEmitter} `this`.
  	 * @api public
  	 */
  	EventEmitter.prototype.on = function on(event, fn, context) {
  	  var listener = new EE(fn, context || this)
  	    , evt = prefix ? prefix + event : event;

  	  if (!this._events[evt]) this._events[evt] = listener, this._eventsCount++;
  	  else if (!this._events[evt].fn) this._events[evt].push(listener);
  	  else this._events[evt] = [this._events[evt], listener];

  	  return this;
  	};

  	/**
  	 * Add a one-time listener for a given event.
  	 *
  	 * @param {String|Symbol} event The event name.
  	 * @param {Function} fn The listener function.
  	 * @param {Mixed} [context=this] The context to invoke the listener with.
  	 * @returns {EventEmitter} `this`.
  	 * @api public
  	 */
  	EventEmitter.prototype.once = function once(event, fn, context) {
  	  var listener = new EE(fn, context || this, true)
  	    , evt = prefix ? prefix + event : event;

  	  if (!this._events[evt]) this._events[evt] = listener, this._eventsCount++;
  	  else if (!this._events[evt].fn) this._events[evt].push(listener);
  	  else this._events[evt] = [this._events[evt], listener];

  	  return this;
  	};

  	/**
  	 * Remove the listeners of a given event.
  	 *
  	 * @param {String|Symbol} event The event name.
  	 * @param {Function} fn Only remove the listeners that match this function.
  	 * @param {Mixed} context Only remove the listeners that have this context.
  	 * @param {Boolean} once Only remove one-time listeners.
  	 * @returns {EventEmitter} `this`.
  	 * @api public
  	 */
  	EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
  	  var evt = prefix ? prefix + event : event;

  	  if (!this._events[evt]) return this;
  	  if (!fn) {
  	    if (--this._eventsCount === 0) this._events = new Events();
  	    else delete this._events[evt];
  	    return this;
  	  }

  	  var listeners = this._events[evt];

  	  if (listeners.fn) {
  	    if (
  	         listeners.fn === fn
  	      && (!once || listeners.once)
  	      && (!context || listeners.context === context)
  	    ) {
  	      if (--this._eventsCount === 0) this._events = new Events();
  	      else delete this._events[evt];
  	    }
  	  } else {
  	    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
  	      if (
  	           listeners[i].fn !== fn
  	        || (once && !listeners[i].once)
  	        || (context && listeners[i].context !== context)
  	      ) {
  	        events.push(listeners[i]);
  	      }
  	    }

  	    //
  	    // Reset the array, or remove it completely if we have no more listeners.
  	    //
  	    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
  	    else if (--this._eventsCount === 0) this._events = new Events();
  	    else delete this._events[evt];
  	  }

  	  return this;
  	};

  	/**
  	 * Remove all listeners, or those of the specified event.
  	 *
  	 * @param {String|Symbol} [event] The event name.
  	 * @returns {EventEmitter} `this`.
  	 * @api public
  	 */
  	EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
  	  var evt;

  	  if (event) {
  	    evt = prefix ? prefix + event : event;
  	    if (this._events[evt]) {
  	      if (--this._eventsCount === 0) this._events = new Events();
  	      else delete this._events[evt];
  	    }
  	  } else {
  	    this._events = new Events();
  	    this._eventsCount = 0;
  	  }

  	  return this;
  	};

  	//
  	// Alias methods names because people roll like that.
  	//
  	EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
  	EventEmitter.prototype.addListener = EventEmitter.prototype.on;

  	//
  	// This function doesn't apply anymore.
  	//
  	EventEmitter.prototype.setMaxListeners = function setMaxListeners() {
  	  return this;
  	};

  	//
  	// Expose the prefix.
  	//
  	EventEmitter.prefixed = prefix;

  	//
  	// Allow `EventEmitter` to be imported as module namespace.
  	//
  	EventEmitter.EventEmitter = EventEmitter;

  	//
  	// Expose the module.
  	//
  	if ('undefined' !== typeof module) {
  	  module.exports = EventEmitter;
  	}


  	/***/ }),
  	/* 55 */
  	/***/ (function(module, exports, __webpack_require__) {


  	Object.defineProperty(exports, "__esModule", {
  	  value: true
  	});
  	exports.matchText = exports.matchSpacing = exports.matchNewline = exports.matchBlot = exports.matchAttributor = exports.default = undefined;

  	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

  	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

  	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  	var _extend2 = __webpack_require__(3);

  	var _extend3 = _interopRequireDefault(_extend2);

  	var _quillDelta = __webpack_require__(2);

  	var _quillDelta2 = _interopRequireDefault(_quillDelta);

  	var _parchment = __webpack_require__(0);

  	var _parchment2 = _interopRequireDefault(_parchment);

  	var _quill = __webpack_require__(5);

  	var _quill2 = _interopRequireDefault(_quill);

  	var _logger = __webpack_require__(10);

  	var _logger2 = _interopRequireDefault(_logger);

  	var _module = __webpack_require__(9);

  	var _module2 = _interopRequireDefault(_module);

  	var _align = __webpack_require__(36);

  	var _background = __webpack_require__(37);

  	var _code = __webpack_require__(13);

  	var _code2 = _interopRequireDefault(_code);

  	var _color = __webpack_require__(26);

  	var _direction = __webpack_require__(38);

  	var _font = __webpack_require__(39);

  	var _size = __webpack_require__(40);

  	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  	var debug = (0, _logger2.default)('quill:clipboard');

  	var DOM_KEY = '__ql-matcher';

  	var CLIPBOARD_CONFIG = [[Node.TEXT_NODE, matchText], [Node.TEXT_NODE, matchNewline], ['br', matchBreak], [Node.ELEMENT_NODE, matchNewline], [Node.ELEMENT_NODE, matchBlot], [Node.ELEMENT_NODE, matchSpacing], [Node.ELEMENT_NODE, matchAttributor], [Node.ELEMENT_NODE, matchStyles], ['li', matchIndent], ['b', matchAlias.bind(matchAlias, 'bold')], ['i', matchAlias.bind(matchAlias, 'italic')], ['style', matchIgnore]];

  	var ATTRIBUTE_ATTRIBUTORS = [_align.AlignAttribute, _direction.DirectionAttribute].reduce(function (memo, attr) {
  	  memo[attr.keyName] = attr;
  	  return memo;
  	}, {});

  	var STYLE_ATTRIBUTORS = [_align.AlignStyle, _background.BackgroundStyle, _color.ColorStyle, _direction.DirectionStyle, _font.FontStyle, _size.SizeStyle].reduce(function (memo, attr) {
  	  memo[attr.keyName] = attr;
  	  return memo;
  	}, {});

  	var Clipboard = function (_Module) {
  	  _inherits(Clipboard, _Module);

  	  function Clipboard(quill, options) {
  	    _classCallCheck(this, Clipboard);

  	    var _this = _possibleConstructorReturn(this, (Clipboard.__proto__ || Object.getPrototypeOf(Clipboard)).call(this, quill, options));

  	    _this.quill.root.addEventListener('paste', _this.onPaste.bind(_this));
  	    _this.container = _this.quill.addContainer('ql-clipboard');
  	    _this.container.setAttribute('contenteditable', true);
  	    _this.container.setAttribute('tabindex', -1);
  	    _this.matchers = [];
  	    CLIPBOARD_CONFIG.concat(_this.options.matchers).forEach(function (_ref) {
  	      var _ref2 = _slicedToArray(_ref, 2),
  	          selector = _ref2[0],
  	          matcher = _ref2[1];

  	      if (!options.matchVisual && matcher === matchSpacing) return;
  	      _this.addMatcher(selector, matcher);
  	    });
  	    return _this;
  	  }

  	  _createClass(Clipboard, [{
  	    key: 'addMatcher',
  	    value: function addMatcher(selector, matcher) {
  	      this.matchers.push([selector, matcher]);
  	    }
  	  }, {
  	    key: 'convert',
  	    value: function convert(html) {
  	      if (typeof html === 'string') {
  	        this.container.innerHTML = html.replace(/\>\r?\n +\</g, '><'); // Remove spaces between tags
  	        return this.convert();
  	      }
  	      var formats = this.quill.getFormat(this.quill.selection.savedRange.index);
  	      if (formats[_code2.default.blotName]) {
  	        var text = this.container.innerText;
  	        this.container.innerHTML = '';
  	        return new _quillDelta2.default().insert(text, _defineProperty({}, _code2.default.blotName, formats[_code2.default.blotName]));
  	      }

  	      var _prepareMatching = this.prepareMatching(),
  	          _prepareMatching2 = _slicedToArray(_prepareMatching, 2),
  	          elementMatchers = _prepareMatching2[0],
  	          textMatchers = _prepareMatching2[1];

  	      var delta = traverse(this.container, elementMatchers, textMatchers);
  	      // Remove trailing newline
  	      if (deltaEndsWith(delta, '\n') && delta.ops[delta.ops.length - 1].attributes == null) {
  	        delta = delta.compose(new _quillDelta2.default().retain(delta.length() - 1).delete(1));
  	      }
  	      debug.log('convert', this.container.innerHTML, delta);
  	      this.container.innerHTML = '';
  	      return delta;
  	    }
  	  }, {
  	    key: 'dangerouslyPasteHTML',
  	    value: function dangerouslyPasteHTML(index, html) {
  	      var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _quill2.default.sources.API;

  	      if (typeof index === 'string') {
  	        this.quill.setContents(this.convert(index), html);
  	        this.quill.setSelection(0, _quill2.default.sources.SILENT);
  	      } else {
  	        var paste = this.convert(html);
  	        this.quill.updateContents(new _quillDelta2.default().retain(index).concat(paste), source);
  	        this.quill.setSelection(index + paste.length(), _quill2.default.sources.SILENT);
  	      }
  	    }
  	  }, {
  	    key: 'onPaste',
  	    value: function onPaste(e) {
  	      var _this2 = this;

  	      if (e.defaultPrevented || !this.quill.isEnabled()) return;
  	      var range = this.quill.getSelection();
  	      var delta = new _quillDelta2.default().retain(range.index);
  	      var scrollTop = this.quill.scrollingContainer.scrollTop;
  	      this.container.focus();
  	      this.quill.selection.update(_quill2.default.sources.SILENT);
  	      setTimeout(function () {
  	        delta = delta.concat(_this2.convert()).delete(range.length);
  	        _this2.quill.updateContents(delta, _quill2.default.sources.USER);
  	        // range.length contributes to delta.length()
  	        _this2.quill.setSelection(delta.length() - range.length, _quill2.default.sources.SILENT);
  	        _this2.quill.scrollingContainer.scrollTop = scrollTop;
  	        _this2.quill.focus();
  	      }, 1);
  	    }
  	  }, {
  	    key: 'prepareMatching',
  	    value: function prepareMatching() {
  	      var _this3 = this;

  	      var elementMatchers = [],
  	          textMatchers = [];
  	      this.matchers.forEach(function (pair) {
  	        var _pair = _slicedToArray(pair, 2),
  	            selector = _pair[0],
  	            matcher = _pair[1];

  	        switch (selector) {
  	          case Node.TEXT_NODE:
  	            textMatchers.push(matcher);
  	            break;
  	          case Node.ELEMENT_NODE:
  	            elementMatchers.push(matcher);
  	            break;
  	          default:
  	            [].forEach.call(_this3.container.querySelectorAll(selector), function (node) {
  	              // TODO use weakmap
  	              node[DOM_KEY] = node[DOM_KEY] || [];
  	              node[DOM_KEY].push(matcher);
  	            });
  	            break;
  	        }
  	      });
  	      return [elementMatchers, textMatchers];
  	    }
  	  }]);

  	  return Clipboard;
  	}(_module2.default);

  	Clipboard.DEFAULTS = {
  	  matchers: [],
  	  matchVisual: true
  	};

  	function applyFormat(delta, format, value) {
  	  if ((typeof format === 'undefined' ? 'undefined' : _typeof(format)) === 'object') {
  	    return Object.keys(format).reduce(function (delta, key) {
  	      return applyFormat(delta, key, format[key]);
  	    }, delta);
  	  } else {
  	    return delta.reduce(function (delta, op) {
  	      if (op.attributes && op.attributes[format]) {
  	        return delta.push(op);
  	      } else {
  	        return delta.insert(op.insert, (0, _extend3.default)({}, _defineProperty({}, format, value), op.attributes));
  	      }
  	    }, new _quillDelta2.default());
  	  }
  	}

  	function computeStyle(node) {
  	  if (node.nodeType !== Node.ELEMENT_NODE) return {};
  	  var DOM_KEY = '__ql-computed-style';
  	  return node[DOM_KEY] || (node[DOM_KEY] = window.getComputedStyle(node));
  	}

  	function deltaEndsWith(delta, text) {
  	  var endText = "";
  	  for (var i = delta.ops.length - 1; i >= 0 && endText.length < text.length; --i) {
  	    var op = delta.ops[i];
  	    if (typeof op.insert !== 'string') break;
  	    endText = op.insert + endText;
  	  }
  	  return endText.slice(-1 * text.length) === text;
  	}

  	function isLine(node) {
  	  if (node.childNodes.length === 0) return false; // Exclude embed blocks
  	  var style = computeStyle(node);
  	  return ['block', 'list-item'].indexOf(style.display) > -1;
  	}

  	function traverse(node, elementMatchers, textMatchers) {
  	  // Post-order
  	  if (node.nodeType === node.TEXT_NODE) {
  	    return textMatchers.reduce(function (delta, matcher) {
  	      return matcher(node, delta);
  	    }, new _quillDelta2.default());
  	  } else if (node.nodeType === node.ELEMENT_NODE) {
  	    return [].reduce.call(node.childNodes || [], function (delta, childNode) {
  	      var childrenDelta = traverse(childNode, elementMatchers, textMatchers);
  	      if (childNode.nodeType === node.ELEMENT_NODE) {
  	        childrenDelta = elementMatchers.reduce(function (childrenDelta, matcher) {
  	          return matcher(childNode, childrenDelta);
  	        }, childrenDelta);
  	        childrenDelta = (childNode[DOM_KEY] || []).reduce(function (childrenDelta, matcher) {
  	          return matcher(childNode, childrenDelta);
  	        }, childrenDelta);
  	      }
  	      return delta.concat(childrenDelta);
  	    }, new _quillDelta2.default());
  	  } else {
  	    return new _quillDelta2.default();
  	  }
  	}

  	function matchAlias(format, node, delta) {
  	  return applyFormat(delta, format, true);
  	}

  	function matchAttributor(node, delta) {
  	  var attributes = _parchment2.default.Attributor.Attribute.keys(node);
  	  var classes = _parchment2.default.Attributor.Class.keys(node);
  	  var styles = _parchment2.default.Attributor.Style.keys(node);
  	  var formats = {};
  	  attributes.concat(classes).concat(styles).forEach(function (name) {
  	    var attr = _parchment2.default.query(name, _parchment2.default.Scope.ATTRIBUTE);
  	    if (attr != null) {
  	      formats[attr.attrName] = attr.value(node);
  	      if (formats[attr.attrName]) return;
  	    }
  	    attr = ATTRIBUTE_ATTRIBUTORS[name];
  	    if (attr != null && (attr.attrName === name || attr.keyName === name)) {
  	      formats[attr.attrName] = attr.value(node) || undefined;
  	    }
  	    attr = STYLE_ATTRIBUTORS[name];
  	    if (attr != null && (attr.attrName === name || attr.keyName === name)) {
  	      attr = STYLE_ATTRIBUTORS[name];
  	      formats[attr.attrName] = attr.value(node) || undefined;
  	    }
  	  });
  	  if (Object.keys(formats).length > 0) {
  	    delta = applyFormat(delta, formats);
  	  }
  	  return delta;
  	}

  	function matchBlot(node, delta) {
  	  var match = _parchment2.default.query(node);
  	  if (match == null) return delta;
  	  if (match.prototype instanceof _parchment2.default.Embed) {
  	    var embed = {};
  	    var value = match.value(node);
  	    if (value != null) {
  	      embed[match.blotName] = value;
  	      delta = new _quillDelta2.default().insert(embed, match.formats(node));
  	    }
  	  } else if (typeof match.formats === 'function') {
  	    delta = applyFormat(delta, match.blotName, match.formats(node));
  	  }
  	  return delta;
  	}

  	function matchBreak(node, delta) {
  	  if (!deltaEndsWith(delta, '\n')) {
  	    delta.insert('\n');
  	  }
  	  return delta;
  	}

  	function matchIgnore() {
  	  return new _quillDelta2.default();
  	}

  	function matchIndent(node, delta) {
  	  var match = _parchment2.default.query(node);
  	  if (match == null || match.blotName !== 'list-item' || !deltaEndsWith(delta, '\n')) {
  	    return delta;
  	  }
  	  var indent = -1,
  	      parent = node.parentNode;
  	  while (!parent.classList.contains('ql-clipboard')) {
  	    if ((_parchment2.default.query(parent) || {}).blotName === 'list') {
  	      indent += 1;
  	    }
  	    parent = parent.parentNode;
  	  }
  	  if (indent <= 0) return delta;
  	  return delta.compose(new _quillDelta2.default().retain(delta.length() - 1).retain(1, { indent: indent }));
  	}

  	function matchNewline(node, delta) {
  	  if (!deltaEndsWith(delta, '\n')) {
  	    if (isLine(node) || delta.length() > 0 && node.nextSibling && isLine(node.nextSibling)) {
  	      delta.insert('\n');
  	    }
  	  }
  	  return delta;
  	}

  	function matchSpacing(node, delta) {
  	  if (isLine(node) && node.nextElementSibling != null && !deltaEndsWith(delta, '\n\n')) {
  	    var nodeHeight = node.offsetHeight + parseFloat(computeStyle(node).marginTop) + parseFloat(computeStyle(node).marginBottom);
  	    if (node.nextElementSibling.offsetTop > node.offsetTop + nodeHeight * 1.5) {
  	      delta.insert('\n');
  	    }
  	  }
  	  return delta;
  	}

  	function matchStyles(node, delta) {
  	  var formats = {};
  	  var style = node.style || {};
  	  if (style.fontStyle && computeStyle(node).fontStyle === 'italic') {
  	    formats.italic = true;
  	  }
  	  if (style.fontWeight && (computeStyle(node).fontWeight.startsWith('bold') || parseInt(computeStyle(node).fontWeight) >= 700)) {
  	    formats.bold = true;
  	  }
  	  if (Object.keys(formats).length > 0) {
  	    delta = applyFormat(delta, formats);
  	  }
  	  if (parseFloat(style.textIndent || 0) > 0) {
  	    // Could be 0.5in
  	    delta = new _quillDelta2.default().insert('\t').concat(delta);
  	  }
  	  return delta;
  	}

  	function matchText(node, delta) {
  	  var text = node.data;
  	  // Word represents empty line with <o:p>&nbsp;</o:p>
  	  if (node.parentNode.tagName === 'O:P') {
  	    return delta.insert(text.trim());
  	  }
  	  if (text.trim().length === 0 && node.parentNode.classList.contains('ql-clipboard')) {
  	    return delta;
  	  }
  	  if (!computeStyle(node.parentNode).whiteSpace.startsWith('pre')) {
  	    // eslint-disable-next-line func-style
  	    var replacer = function replacer(collapse, match) {
  	      match = match.replace(/[^\u00a0]/g, ''); // \u00a0 is nbsp;
  	      return match.length < 1 && collapse ? ' ' : match;
  	    };
  	    text = text.replace(/\r\n/g, ' ').replace(/\n/g, ' ');
  	    text = text.replace(/\s\s+/g, replacer.bind(replacer, true)); // collapse whitespace
  	    if (node.previousSibling == null && isLine(node.parentNode) || node.previousSibling != null && isLine(node.previousSibling)) {
  	      text = text.replace(/^\s+/, replacer.bind(replacer, false));
  	    }
  	    if (node.nextSibling == null && isLine(node.parentNode) || node.nextSibling != null && isLine(node.nextSibling)) {
  	      text = text.replace(/\s+$/, replacer.bind(replacer, false));
  	    }
  	  }
  	  return delta.insert(text);
  	}

  	exports.default = Clipboard;
  	exports.matchAttributor = matchAttributor;
  	exports.matchBlot = matchBlot;
  	exports.matchNewline = matchNewline;
  	exports.matchSpacing = matchSpacing;
  	exports.matchText = matchText;

  	/***/ }),
  	/* 56 */
  	/***/ (function(module, exports, __webpack_require__) {


  	Object.defineProperty(exports, "__esModule", {
  	  value: true
  	});

  	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  	var _inline = __webpack_require__(6);

  	var _inline2 = _interopRequireDefault(_inline);

  	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  	var Bold = function (_Inline) {
  	  _inherits(Bold, _Inline);

  	  function Bold() {
  	    _classCallCheck(this, Bold);

  	    return _possibleConstructorReturn(this, (Bold.__proto__ || Object.getPrototypeOf(Bold)).apply(this, arguments));
  	  }

  	  _createClass(Bold, [{
  	    key: 'optimize',
  	    value: function optimize(context) {
  	      _get(Bold.prototype.__proto__ || Object.getPrototypeOf(Bold.prototype), 'optimize', this).call(this, context);
  	      if (this.domNode.tagName !== this.statics.tagName[0]) {
  	        this.replaceWith(this.statics.blotName);
  	      }
  	    }
  	  }], [{
  	    key: 'create',
  	    value: function create() {
  	      return _get(Bold.__proto__ || Object.getPrototypeOf(Bold), 'create', this).call(this);
  	    }
  	  }, {
  	    key: 'formats',
  	    value: function formats() {
  	      return true;
  	    }
  	  }]);

  	  return Bold;
  	}(_inline2.default);

  	Bold.blotName = 'bold';
  	Bold.tagName = ['STRONG', 'B'];

  	exports.default = Bold;

  	/***/ }),
  	/* 57 */
  	/***/ (function(module, exports, __webpack_require__) {


  	Object.defineProperty(exports, "__esModule", {
  	  value: true
  	});
  	exports.addControls = exports.default = undefined;

  	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

  	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  	var _quillDelta = __webpack_require__(2);

  	var _quillDelta2 = _interopRequireDefault(_quillDelta);

  	var _parchment = __webpack_require__(0);

  	var _parchment2 = _interopRequireDefault(_parchment);

  	var _quill = __webpack_require__(5);

  	var _quill2 = _interopRequireDefault(_quill);

  	var _logger = __webpack_require__(10);

  	var _logger2 = _interopRequireDefault(_logger);

  	var _module = __webpack_require__(9);

  	var _module2 = _interopRequireDefault(_module);

  	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  	var debug = (0, _logger2.default)('quill:toolbar');

  	var Toolbar = function (_Module) {
  	  _inherits(Toolbar, _Module);

  	  function Toolbar(quill, options) {
  	    _classCallCheck(this, Toolbar);

  	    var _this = _possibleConstructorReturn(this, (Toolbar.__proto__ || Object.getPrototypeOf(Toolbar)).call(this, quill, options));

  	    if (Array.isArray(_this.options.container)) {
  	      var container = document.createElement('div');
  	      addControls(container, _this.options.container);
  	      quill.container.parentNode.insertBefore(container, quill.container);
  	      _this.container = container;
  	    } else if (typeof _this.options.container === 'string') {
  	      _this.container = document.querySelector(_this.options.container);
  	    } else {
  	      _this.container = _this.options.container;
  	    }
  	    if (!(_this.container instanceof HTMLElement)) {
  	      var _ret;

  	      return _ret = debug.error('Container required for toolbar', _this.options), _possibleConstructorReturn(_this, _ret);
  	    }
  	    _this.container.classList.add('ql-toolbar');
  	    _this.controls = [];
  	    _this.handlers = {};
  	    Object.keys(_this.options.handlers).forEach(function (format) {
  	      _this.addHandler(format, _this.options.handlers[format]);
  	    });
  	    [].forEach.call(_this.container.querySelectorAll('button, select'), function (input) {
  	      _this.attach(input);
  	    });
  	    _this.quill.on(_quill2.default.events.EDITOR_CHANGE, function (type, range) {
  	      if (type === _quill2.default.events.SELECTION_CHANGE) {
  	        _this.update(range);
  	      }
  	    });
  	    _this.quill.on(_quill2.default.events.SCROLL_OPTIMIZE, function () {
  	      var _this$quill$selection = _this.quill.selection.getRange(),
  	          _this$quill$selection2 = _slicedToArray(_this$quill$selection, 1),
  	          range = _this$quill$selection2[0]; // quill.getSelection triggers update


  	      _this.update(range);
  	    });
  	    return _this;
  	  }

  	  _createClass(Toolbar, [{
  	    key: 'addHandler',
  	    value: function addHandler(format, handler) {
  	      this.handlers[format] = handler;
  	    }
  	  }, {
  	    key: 'attach',
  	    value: function attach(input) {
  	      var _this2 = this;

  	      var format = [].find.call(input.classList, function (className) {
  	        return className.indexOf('ql-') === 0;
  	      });
  	      if (!format) return;
  	      format = format.slice('ql-'.length);
  	      if (input.tagName === 'BUTTON') {
  	        input.setAttribute('type', 'button');
  	      }
  	      if (this.handlers[format] == null) {
  	        if (this.quill.scroll.whitelist != null && this.quill.scroll.whitelist[format] == null) {
  	          debug.warn('ignoring attaching to disabled format', format, input);
  	          return;
  	        }
  	        if (_parchment2.default.query(format) == null) {
  	          debug.warn('ignoring attaching to nonexistent format', format, input);
  	          return;
  	        }
  	      }
  	      var eventName = input.tagName === 'SELECT' ? 'change' : 'click';
  	      input.addEventListener(eventName, function (e) {
  	        var value = void 0;
  	        if (input.tagName === 'SELECT') {
  	          if (input.selectedIndex < 0) return;
  	          var selected = input.options[input.selectedIndex];
  	          if (selected.hasAttribute('selected')) {
  	            value = false;
  	          } else {
  	            value = selected.value || false;
  	          }
  	        } else {
  	          if (input.classList.contains('ql-active')) {
  	            value = false;
  	          } else {
  	            value = input.value || !input.hasAttribute('value');
  	          }
  	          e.preventDefault();
  	        }
  	        _this2.quill.focus();

  	        var _quill$selection$getR = _this2.quill.selection.getRange(),
  	            _quill$selection$getR2 = _slicedToArray(_quill$selection$getR, 1),
  	            range = _quill$selection$getR2[0];

  	        if (_this2.handlers[format] != null) {
  	          _this2.handlers[format].call(_this2, value);
  	        } else if (_parchment2.default.query(format).prototype instanceof _parchment2.default.Embed) {
  	          value = prompt('Enter ' + format);
  	          if (!value) return;
  	          _this2.quill.updateContents(new _quillDelta2.default().retain(range.index).delete(range.length).insert(_defineProperty({}, format, value)), _quill2.default.sources.USER);
  	        } else {
  	          _this2.quill.format(format, value, _quill2.default.sources.USER);
  	        }
  	        _this2.update(range);
  	      });
  	      // TODO use weakmap
  	      this.controls.push([format, input]);
  	    }
  	  }, {
  	    key: 'update',
  	    value: function update(range) {
  	      var formats = range == null ? {} : this.quill.getFormat(range);
  	      this.controls.forEach(function (pair) {
  	        var _pair = _slicedToArray(pair, 2),
  	            format = _pair[0],
  	            input = _pair[1];

  	        if (input.tagName === 'SELECT') {
  	          var option = void 0;
  	          if (range == null) {
  	            option = null;
  	          } else if (formats[format] == null) {
  	            option = input.querySelector('option[selected]');
  	          } else if (!Array.isArray(formats[format])) {
  	            var value = formats[format];
  	            if (typeof value === 'string') {
  	              value = value.replace(/\"/g, '\\"');
  	            }
  	            option = input.querySelector('option[value="' + value + '"]');
  	          }
  	          if (option == null) {
  	            input.value = ''; // TODO make configurable?
  	            input.selectedIndex = -1;
  	          } else {
  	            option.selected = true;
  	          }
  	        } else {
  	          if (range == null) {
  	            input.classList.remove('ql-active');
  	          } else if (input.hasAttribute('value')) {
  	            // both being null should match (default values)
  	            // '1' should match with 1 (headers)
  	            var isActive = formats[format] === input.getAttribute('value') || formats[format] != null && formats[format].toString() === input.getAttribute('value') || formats[format] == null && !input.getAttribute('value');
  	            input.classList.toggle('ql-active', isActive);
  	          } else {
  	            input.classList.toggle('ql-active', formats[format] != null);
  	          }
  	        }
  	      });
  	    }
  	  }]);

  	  return Toolbar;
  	}(_module2.default);

  	Toolbar.DEFAULTS = {};

  	function addButton(container, format, value) {
  	  var input = document.createElement('button');
  	  input.setAttribute('type', 'button');
  	  input.classList.add('ql-' + format);
  	  if (value != null) {
  	    input.value = value;
  	  }
  	  container.appendChild(input);
  	}

  	function addControls(container, groups) {
  	  if (!Array.isArray(groups[0])) {
  	    groups = [groups];
  	  }
  	  groups.forEach(function (controls) {
  	    var group = document.createElement('span');
  	    group.classList.add('ql-formats');
  	    controls.forEach(function (control) {
  	      if (typeof control === 'string') {
  	        addButton(group, control);
  	      } else {
  	        var format = Object.keys(control)[0];
  	        var value = control[format];
  	        if (Array.isArray(value)) {
  	          addSelect(group, format, value);
  	        } else {
  	          addButton(group, format, value);
  	        }
  	      }
  	    });
  	    container.appendChild(group);
  	  });
  	}

  	function addSelect(container, format, values) {
  	  var input = document.createElement('select');
  	  input.classList.add('ql-' + format);
  	  values.forEach(function (value) {
  	    var option = document.createElement('option');
  	    if (value !== false) {
  	      option.setAttribute('value', value);
  	    } else {
  	      option.setAttribute('selected', 'selected');
  	    }
  	    input.appendChild(option);
  	  });
  	  container.appendChild(input);
  	}

  	Toolbar.DEFAULTS = {
  	  container: null,
  	  handlers: {
  	    clean: function clean() {
  	      var _this3 = this;

  	      var range = this.quill.getSelection();
  	      if (range == null) return;
  	      if (range.length == 0) {
  	        var formats = this.quill.getFormat();
  	        Object.keys(formats).forEach(function (name) {
  	          // Clean functionality in existing apps only clean inline formats
  	          if (_parchment2.default.query(name, _parchment2.default.Scope.INLINE) != null) {
  	            _this3.quill.format(name, false);
  	          }
  	        });
  	      } else {
  	        this.quill.removeFormat(range, _quill2.default.sources.USER);
  	      }
  	    },
  	    direction: function direction(value) {
  	      var align = this.quill.getFormat()['align'];
  	      if (value === 'rtl' && align == null) {
  	        this.quill.format('align', 'right', _quill2.default.sources.USER);
  	      } else if (!value && align === 'right') {
  	        this.quill.format('align', false, _quill2.default.sources.USER);
  	      }
  	      this.quill.format('direction', value, _quill2.default.sources.USER);
  	    },
  	    indent: function indent(value) {
  	      var range = this.quill.getSelection();
  	      var formats = this.quill.getFormat(range);
  	      var indent = parseInt(formats.indent || 0);
  	      if (value === '+1' || value === '-1') {
  	        var modifier = value === '+1' ? 1 : -1;
  	        if (formats.direction === 'rtl') modifier *= -1;
  	        this.quill.format('indent', indent + modifier, _quill2.default.sources.USER);
  	      }
  	    },
  	    link: function link(value) {
  	      if (value === true) {
  	        value = prompt('Enter link URL:');
  	      }
  	      this.quill.format('link', value, _quill2.default.sources.USER);
  	    },
  	    list: function list(value) {
  	      var range = this.quill.getSelection();
  	      var formats = this.quill.getFormat(range);
  	      if (value === 'check') {
  	        if (formats['list'] === 'checked' || formats['list'] === 'unchecked') {
  	          this.quill.format('list', false, _quill2.default.sources.USER);
  	        } else {
  	          this.quill.format('list', 'unchecked', _quill2.default.sources.USER);
  	        }
  	      } else {
  	        this.quill.format('list', value, _quill2.default.sources.USER);
  	      }
  	    }
  	  }
  	};

  	exports.default = Toolbar;
  	exports.addControls = addControls;

  	/***/ }),
  	/* 58 */
  	/***/ (function(module, exports) {

  	module.exports = "<svg viewbox=\"0 0 18 18\"> <polyline class=\"ql-even ql-stroke\" points=\"5 7 3 9 5 11\"></polyline> <polyline class=\"ql-even ql-stroke\" points=\"13 7 15 9 13 11\"></polyline> <line class=ql-stroke x1=10 x2=8 y1=5 y2=13></line> </svg>";

  	/***/ }),
  	/* 59 */
  	/***/ (function(module, exports, __webpack_require__) {


  	Object.defineProperty(exports, "__esModule", {
  	  value: true
  	});

  	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  	var _picker = __webpack_require__(28);

  	var _picker2 = _interopRequireDefault(_picker);

  	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  	var ColorPicker = function (_Picker) {
  	  _inherits(ColorPicker, _Picker);

  	  function ColorPicker(select, label) {
  	    _classCallCheck(this, ColorPicker);

  	    var _this = _possibleConstructorReturn(this, (ColorPicker.__proto__ || Object.getPrototypeOf(ColorPicker)).call(this, select));

  	    _this.label.innerHTML = label;
  	    _this.container.classList.add('ql-color-picker');
  	    [].slice.call(_this.container.querySelectorAll('.ql-picker-item'), 0, 7).forEach(function (item) {
  	      item.classList.add('ql-primary');
  	    });
  	    return _this;
  	  }

  	  _createClass(ColorPicker, [{
  	    key: 'buildItem',
  	    value: function buildItem(option) {
  	      var item = _get(ColorPicker.prototype.__proto__ || Object.getPrototypeOf(ColorPicker.prototype), 'buildItem', this).call(this, option);
  	      item.style.backgroundColor = option.getAttribute('value') || '';
  	      return item;
  	    }
  	  }, {
  	    key: 'selectItem',
  	    value: function selectItem(item, trigger) {
  	      _get(ColorPicker.prototype.__proto__ || Object.getPrototypeOf(ColorPicker.prototype), 'selectItem', this).call(this, item, trigger);
  	      var colorLabel = this.label.querySelector('.ql-color-label');
  	      var value = item ? item.getAttribute('data-value') || '' : '';
  	      if (colorLabel) {
  	        if (colorLabel.tagName === 'line') {
  	          colorLabel.style.stroke = value;
  	        } else {
  	          colorLabel.style.fill = value;
  	        }
  	      }
  	    }
  	  }]);

  	  return ColorPicker;
  	}(_picker2.default);

  	exports.default = ColorPicker;

  	/***/ }),
  	/* 60 */
  	/***/ (function(module, exports, __webpack_require__) {


  	Object.defineProperty(exports, "__esModule", {
  	  value: true
  	});

  	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  	var _picker = __webpack_require__(28);

  	var _picker2 = _interopRequireDefault(_picker);

  	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  	var IconPicker = function (_Picker) {
  	  _inherits(IconPicker, _Picker);

  	  function IconPicker(select, icons) {
  	    _classCallCheck(this, IconPicker);

  	    var _this = _possibleConstructorReturn(this, (IconPicker.__proto__ || Object.getPrototypeOf(IconPicker)).call(this, select));

  	    _this.container.classList.add('ql-icon-picker');
  	    [].forEach.call(_this.container.querySelectorAll('.ql-picker-item'), function (item) {
  	      item.innerHTML = icons[item.getAttribute('data-value') || ''];
  	    });
  	    _this.defaultItem = _this.container.querySelector('.ql-selected');
  	    _this.selectItem(_this.defaultItem);
  	    return _this;
  	  }

  	  _createClass(IconPicker, [{
  	    key: 'selectItem',
  	    value: function selectItem(item, trigger) {
  	      _get(IconPicker.prototype.__proto__ || Object.getPrototypeOf(IconPicker.prototype), 'selectItem', this).call(this, item, trigger);
  	      item = item || this.defaultItem;
  	      this.label.innerHTML = item.innerHTML;
  	    }
  	  }]);

  	  return IconPicker;
  	}(_picker2.default);

  	exports.default = IconPicker;

  	/***/ }),
  	/* 61 */
  	/***/ (function(module, exports, __webpack_require__) {


  	Object.defineProperty(exports, "__esModule", {
  	  value: true
  	});

  	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  	var Tooltip = function () {
  	  function Tooltip(quill, boundsContainer) {
  	    var _this = this;

  	    _classCallCheck(this, Tooltip);

  	    this.quill = quill;
  	    this.boundsContainer = boundsContainer || document.body;
  	    this.root = quill.addContainer('ql-tooltip');
  	    this.root.innerHTML = this.constructor.TEMPLATE;
  	    if (this.quill.root === this.quill.scrollingContainer) {
  	      this.quill.root.addEventListener('scroll', function () {
  	        _this.root.style.marginTop = -1 * _this.quill.root.scrollTop + 'px';
  	      });
  	    }
  	    this.hide();
  	  }

  	  _createClass(Tooltip, [{
  	    key: 'hide',
  	    value: function hide() {
  	      this.root.classList.add('ql-hidden');
  	    }
  	  }, {
  	    key: 'position',
  	    value: function position(reference) {
  	      var left = reference.left + reference.width / 2 - this.root.offsetWidth / 2;
  	      // root.scrollTop should be 0 if scrollContainer !== root
  	      var top = reference.bottom + this.quill.root.scrollTop;
  	      this.root.style.left = left + 'px';
  	      this.root.style.top = top + 'px';
  	      this.root.classList.remove('ql-flip');
  	      var containerBounds = this.boundsContainer.getBoundingClientRect();
  	      var rootBounds = this.root.getBoundingClientRect();
  	      var shift = 0;
  	      if (rootBounds.right > containerBounds.right) {
  	        shift = containerBounds.right - rootBounds.right;
  	        this.root.style.left = left + shift + 'px';
  	      }
  	      if (rootBounds.left < containerBounds.left) {
  	        shift = containerBounds.left - rootBounds.left;
  	        this.root.style.left = left + shift + 'px';
  	      }
  	      if (rootBounds.bottom > containerBounds.bottom) {
  	        var height = rootBounds.bottom - rootBounds.top;
  	        var verticalShift = reference.bottom - reference.top + height;
  	        this.root.style.top = top - verticalShift + 'px';
  	        this.root.classList.add('ql-flip');
  	      }
  	      return shift;
  	    }
  	  }, {
  	    key: 'show',
  	    value: function show() {
  	      this.root.classList.remove('ql-editing');
  	      this.root.classList.remove('ql-hidden');
  	    }
  	  }]);

  	  return Tooltip;
  	}();

  	exports.default = Tooltip;

  	/***/ }),
  	/* 62 */
  	/***/ (function(module, exports, __webpack_require__) {


  	Object.defineProperty(exports, "__esModule", {
  	  value: true
  	});

  	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

  	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  	var _extend = __webpack_require__(3);

  	var _extend2 = _interopRequireDefault(_extend);

  	var _emitter = __webpack_require__(8);

  	var _emitter2 = _interopRequireDefault(_emitter);

  	var _base = __webpack_require__(43);

  	var _base2 = _interopRequireDefault(_base);

  	var _link = __webpack_require__(27);

  	var _link2 = _interopRequireDefault(_link);

  	var _selection = __webpack_require__(15);

  	var _icons = __webpack_require__(41);

  	var _icons2 = _interopRequireDefault(_icons);

  	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  	var TOOLBAR_CONFIG = [[{ header: ['1', '2', '3', false] }], ['bold', 'italic', 'underline', 'link'], [{ list: 'ordered' }, { list: 'bullet' }], ['clean']];

  	var SnowTheme = function (_BaseTheme) {
  	  _inherits(SnowTheme, _BaseTheme);

  	  function SnowTheme(quill, options) {
  	    _classCallCheck(this, SnowTheme);

  	    if (options.modules.toolbar != null && options.modules.toolbar.container == null) {
  	      options.modules.toolbar.container = TOOLBAR_CONFIG;
  	    }

  	    var _this = _possibleConstructorReturn(this, (SnowTheme.__proto__ || Object.getPrototypeOf(SnowTheme)).call(this, quill, options));

  	    _this.quill.container.classList.add('ql-snow');
  	    return _this;
  	  }

  	  _createClass(SnowTheme, [{
  	    key: 'extendToolbar',
  	    value: function extendToolbar(toolbar) {
  	      toolbar.container.classList.add('ql-snow');
  	      this.buildButtons([].slice.call(toolbar.container.querySelectorAll('button')), _icons2.default);
  	      this.buildPickers([].slice.call(toolbar.container.querySelectorAll('select')), _icons2.default);
  	      this.tooltip = new SnowTooltip(this.quill, this.options.bounds);
  	      if (toolbar.container.querySelector('.ql-link')) {
  	        this.quill.keyboard.addBinding({ key: 'K', shortKey: true }, function (range, context) {
  	          toolbar.handlers['link'].call(toolbar, !context.format.link);
  	        });
  	      }
  	    }
  	  }]);

  	  return SnowTheme;
  	}(_base2.default);

  	SnowTheme.DEFAULTS = (0, _extend2.default)(true, {}, _base2.default.DEFAULTS, {
  	  modules: {
  	    toolbar: {
  	      handlers: {
  	        link: function link(value) {
  	          if (value) {
  	            var range = this.quill.getSelection();
  	            if (range == null || range.length == 0) return;
  	            var preview = this.quill.getText(range);
  	            if (/^\S+@\S+\.\S+$/.test(preview) && preview.indexOf('mailto:') !== 0) {
  	              preview = 'mailto:' + preview;
  	            }
  	            var tooltip = this.quill.theme.tooltip;
  	            tooltip.edit('link', preview);
  	          } else {
  	            this.quill.format('link', false);
  	          }
  	        }
  	      }
  	    }
  	  }
  	});

  	var SnowTooltip = function (_BaseTooltip) {
  	  _inherits(SnowTooltip, _BaseTooltip);

  	  function SnowTooltip(quill, bounds) {
  	    _classCallCheck(this, SnowTooltip);

  	    var _this2 = _possibleConstructorReturn(this, (SnowTooltip.__proto__ || Object.getPrototypeOf(SnowTooltip)).call(this, quill, bounds));

  	    _this2.preview = _this2.root.querySelector('a.ql-preview');
  	    return _this2;
  	  }

  	  _createClass(SnowTooltip, [{
  	    key: 'listen',
  	    value: function listen() {
  	      var _this3 = this;

  	      _get(SnowTooltip.prototype.__proto__ || Object.getPrototypeOf(SnowTooltip.prototype), 'listen', this).call(this);
  	      this.root.querySelector('a.ql-action').addEventListener('click', function (event) {
  	        if (_this3.root.classList.contains('ql-editing')) {
  	          _this3.save();
  	        } else {
  	          _this3.edit('link', _this3.preview.textContent);
  	        }
  	        event.preventDefault();
  	      });
  	      this.root.querySelector('a.ql-remove').addEventListener('click', function (event) {
  	        if (_this3.linkRange != null) {
  	          var range = _this3.linkRange;
  	          _this3.restoreFocus();
  	          _this3.quill.formatText(range, 'link', false, _emitter2.default.sources.USER);
  	          delete _this3.linkRange;
  	        }
  	        event.preventDefault();
  	        _this3.hide();
  	      });
  	      this.quill.on(_emitter2.default.events.SELECTION_CHANGE, function (range, oldRange, source) {
  	        if (range == null) return;
  	        if (range.length === 0 && source === _emitter2.default.sources.USER) {
  	          var _quill$scroll$descend = _this3.quill.scroll.descendant(_link2.default, range.index),
  	              _quill$scroll$descend2 = _slicedToArray(_quill$scroll$descend, 2),
  	              link = _quill$scroll$descend2[0],
  	              offset = _quill$scroll$descend2[1];

  	          if (link != null) {
  	            _this3.linkRange = new _selection.Range(range.index - offset, link.length());
  	            var preview = _link2.default.formats(link.domNode);
  	            _this3.preview.textContent = preview;
  	            _this3.preview.setAttribute('href', preview);
  	            _this3.show();
  	            _this3.position(_this3.quill.getBounds(_this3.linkRange));
  	            return;
  	          }
  	        } else {
  	          delete _this3.linkRange;
  	        }
  	        _this3.hide();
  	      });
  	    }
  	  }, {
  	    key: 'show',
  	    value: function show() {
  	      _get(SnowTooltip.prototype.__proto__ || Object.getPrototypeOf(SnowTooltip.prototype), 'show', this).call(this);
  	      this.root.removeAttribute('data-mode');
  	    }
  	  }]);

  	  return SnowTooltip;
  	}(_base.BaseTooltip);

  	SnowTooltip.TEMPLATE = ['<a class="ql-preview" rel="noopener noreferrer" target="_blank" href="about:blank"></a>', '<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">', '<a class="ql-action"></a>', '<a class="ql-remove"></a>'].join('');

  	exports.default = SnowTheme;

  	/***/ }),
  	/* 63 */
  	/***/ (function(module, exports, __webpack_require__) {


  	Object.defineProperty(exports, "__esModule", {
  	  value: true
  	});

  	var _core = __webpack_require__(29);

  	var _core2 = _interopRequireDefault(_core);

  	var _align = __webpack_require__(36);

  	var _direction = __webpack_require__(38);

  	var _indent = __webpack_require__(64);

  	var _blockquote = __webpack_require__(65);

  	var _blockquote2 = _interopRequireDefault(_blockquote);

  	var _header = __webpack_require__(66);

  	var _header2 = _interopRequireDefault(_header);

  	var _list = __webpack_require__(67);

  	var _list2 = _interopRequireDefault(_list);

  	var _background = __webpack_require__(37);

  	var _color = __webpack_require__(26);

  	var _font = __webpack_require__(39);

  	var _size = __webpack_require__(40);

  	var _bold = __webpack_require__(56);

  	var _bold2 = _interopRequireDefault(_bold);

  	var _italic = __webpack_require__(68);

  	var _italic2 = _interopRequireDefault(_italic);

  	var _link = __webpack_require__(27);

  	var _link2 = _interopRequireDefault(_link);

  	var _script = __webpack_require__(69);

  	var _script2 = _interopRequireDefault(_script);

  	var _strike = __webpack_require__(70);

  	var _strike2 = _interopRequireDefault(_strike);

  	var _underline = __webpack_require__(71);

  	var _underline2 = _interopRequireDefault(_underline);

  	var _image = __webpack_require__(72);

  	var _image2 = _interopRequireDefault(_image);

  	var _video = __webpack_require__(73);

  	var _video2 = _interopRequireDefault(_video);

  	var _code = __webpack_require__(13);

  	var _code2 = _interopRequireDefault(_code);

  	var _formula = __webpack_require__(74);

  	var _formula2 = _interopRequireDefault(_formula);

  	var _syntax = __webpack_require__(75);

  	var _syntax2 = _interopRequireDefault(_syntax);

  	var _toolbar = __webpack_require__(57);

  	var _toolbar2 = _interopRequireDefault(_toolbar);

  	var _icons = __webpack_require__(41);

  	var _icons2 = _interopRequireDefault(_icons);

  	var _picker = __webpack_require__(28);

  	var _picker2 = _interopRequireDefault(_picker);

  	var _colorPicker = __webpack_require__(59);

  	var _colorPicker2 = _interopRequireDefault(_colorPicker);

  	var _iconPicker = __webpack_require__(60);

  	var _iconPicker2 = _interopRequireDefault(_iconPicker);

  	var _tooltip = __webpack_require__(61);

  	var _tooltip2 = _interopRequireDefault(_tooltip);

  	var _bubble = __webpack_require__(108);

  	var _bubble2 = _interopRequireDefault(_bubble);

  	var _snow = __webpack_require__(62);

  	var _snow2 = _interopRequireDefault(_snow);

  	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  	_core2.default.register({
  	  'attributors/attribute/direction': _direction.DirectionAttribute,

  	  'attributors/class/align': _align.AlignClass,
  	  'attributors/class/background': _background.BackgroundClass,
  	  'attributors/class/color': _color.ColorClass,
  	  'attributors/class/direction': _direction.DirectionClass,
  	  'attributors/class/font': _font.FontClass,
  	  'attributors/class/size': _size.SizeClass,

  	  'attributors/style/align': _align.AlignStyle,
  	  'attributors/style/background': _background.BackgroundStyle,
  	  'attributors/style/color': _color.ColorStyle,
  	  'attributors/style/direction': _direction.DirectionStyle,
  	  'attributors/style/font': _font.FontStyle,
  	  'attributors/style/size': _size.SizeStyle
  	}, true);

  	_core2.default.register({
  	  'formats/align': _align.AlignClass,
  	  'formats/direction': _direction.DirectionClass,
  	  'formats/indent': _indent.IndentClass,

  	  'formats/background': _background.BackgroundStyle,
  	  'formats/color': _color.ColorStyle,
  	  'formats/font': _font.FontClass,
  	  'formats/size': _size.SizeClass,

  	  'formats/blockquote': _blockquote2.default,
  	  'formats/code-block': _code2.default,
  	  'formats/header': _header2.default,
  	  'formats/list': _list2.default,

  	  'formats/bold': _bold2.default,
  	  'formats/code': _code.Code,
  	  'formats/italic': _italic2.default,
  	  'formats/link': _link2.default,
  	  'formats/script': _script2.default,
  	  'formats/strike': _strike2.default,
  	  'formats/underline': _underline2.default,

  	  'formats/image': _image2.default,
  	  'formats/video': _video2.default,

  	  'formats/list/item': _list.ListItem,

  	  'modules/formula': _formula2.default,
  	  'modules/syntax': _syntax2.default,
  	  'modules/toolbar': _toolbar2.default,

  	  'themes/bubble': _bubble2.default,
  	  'themes/snow': _snow2.default,

  	  'ui/icons': _icons2.default,
  	  'ui/picker': _picker2.default,
  	  'ui/icon-picker': _iconPicker2.default,
  	  'ui/color-picker': _colorPicker2.default,
  	  'ui/tooltip': _tooltip2.default
  	}, true);

  	exports.default = _core2.default;

  	/***/ }),
  	/* 64 */
  	/***/ (function(module, exports, __webpack_require__) {


  	Object.defineProperty(exports, "__esModule", {
  	  value: true
  	});
  	exports.IndentClass = undefined;

  	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  	var _parchment = __webpack_require__(0);

  	var _parchment2 = _interopRequireDefault(_parchment);

  	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  	var IdentAttributor = function (_Parchment$Attributor) {
  	  _inherits(IdentAttributor, _Parchment$Attributor);

  	  function IdentAttributor() {
  	    _classCallCheck(this, IdentAttributor);

  	    return _possibleConstructorReturn(this, (IdentAttributor.__proto__ || Object.getPrototypeOf(IdentAttributor)).apply(this, arguments));
  	  }

  	  _createClass(IdentAttributor, [{
  	    key: 'add',
  	    value: function add(node, value) {
  	      if (value === '+1' || value === '-1') {
  	        var indent = this.value(node) || 0;
  	        value = value === '+1' ? indent + 1 : indent - 1;
  	      }
  	      if (value === 0) {
  	        this.remove(node);
  	        return true;
  	      } else {
  	        return _get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'add', this).call(this, node, value);
  	      }
  	    }
  	  }, {
  	    key: 'canAdd',
  	    value: function canAdd(node, value) {
  	      return _get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'canAdd', this).call(this, node, value) || _get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'canAdd', this).call(this, node, parseInt(value));
  	    }
  	  }, {
  	    key: 'value',
  	    value: function value(node) {
  	      return parseInt(_get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'value', this).call(this, node)) || undefined; // Don't return NaN
  	    }
  	  }]);

  	  return IdentAttributor;
  	}(_parchment2.default.Attributor.Class);

  	var IndentClass = new IdentAttributor('indent', 'ql-indent', {
  	  scope: _parchment2.default.Scope.BLOCK,
  	  whitelist: [1, 2, 3, 4, 5, 6, 7, 8]
  	});

  	exports.IndentClass = IndentClass;

  	/***/ }),
  	/* 65 */
  	/***/ (function(module, exports, __webpack_require__) {


  	Object.defineProperty(exports, "__esModule", {
  	  value: true
  	});

  	var _block = __webpack_require__(4);

  	var _block2 = _interopRequireDefault(_block);

  	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  	var Blockquote = function (_Block) {
  	  _inherits(Blockquote, _Block);

  	  function Blockquote() {
  	    _classCallCheck(this, Blockquote);

  	    return _possibleConstructorReturn(this, (Blockquote.__proto__ || Object.getPrototypeOf(Blockquote)).apply(this, arguments));
  	  }

  	  return Blockquote;
  	}(_block2.default);

  	Blockquote.blotName = 'blockquote';
  	Blockquote.tagName = 'blockquote';

  	exports.default = Blockquote;

  	/***/ }),
  	/* 66 */
  	/***/ (function(module, exports, __webpack_require__) {


  	Object.defineProperty(exports, "__esModule", {
  	  value: true
  	});

  	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  	var _block = __webpack_require__(4);

  	var _block2 = _interopRequireDefault(_block);

  	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  	var Header = function (_Block) {
  	  _inherits(Header, _Block);

  	  function Header() {
  	    _classCallCheck(this, Header);

  	    return _possibleConstructorReturn(this, (Header.__proto__ || Object.getPrototypeOf(Header)).apply(this, arguments));
  	  }

  	  _createClass(Header, null, [{
  	    key: 'formats',
  	    value: function formats(domNode) {
  	      return this.tagName.indexOf(domNode.tagName) + 1;
  	    }
  	  }]);

  	  return Header;
  	}(_block2.default);

  	Header.blotName = 'header';
  	Header.tagName = ['H1', 'H2', 'H3', 'H4', 'H5', 'H6'];

  	exports.default = Header;

  	/***/ }),
  	/* 67 */
  	/***/ (function(module, exports, __webpack_require__) {


  	Object.defineProperty(exports, "__esModule", {
  	  value: true
  	});
  	exports.default = exports.ListItem = undefined;

  	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  	var _parchment = __webpack_require__(0);

  	var _parchment2 = _interopRequireDefault(_parchment);

  	var _block = __webpack_require__(4);

  	var _block2 = _interopRequireDefault(_block);

  	var _container = __webpack_require__(25);

  	var _container2 = _interopRequireDefault(_container);

  	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  	var ListItem = function (_Block) {
  	  _inherits(ListItem, _Block);

  	  function ListItem() {
  	    _classCallCheck(this, ListItem);

  	    return _possibleConstructorReturn(this, (ListItem.__proto__ || Object.getPrototypeOf(ListItem)).apply(this, arguments));
  	  }

  	  _createClass(ListItem, [{
  	    key: 'format',
  	    value: function format(name, value) {
  	      if (name === List.blotName && !value) {
  	        this.replaceWith(_parchment2.default.create(this.statics.scope));
  	      } else {
  	        _get(ListItem.prototype.__proto__ || Object.getPrototypeOf(ListItem.prototype), 'format', this).call(this, name, value);
  	      }
  	    }
  	  }, {
  	    key: 'remove',
  	    value: function remove() {
  	      if (this.prev == null && this.next == null) {
  	        this.parent.remove();
  	      } else {
  	        _get(ListItem.prototype.__proto__ || Object.getPrototypeOf(ListItem.prototype), 'remove', this).call(this);
  	      }
  	    }
  	  }, {
  	    key: 'replaceWith',
  	    value: function replaceWith(name, value) {
  	      this.parent.isolate(this.offset(this.parent), this.length());
  	      if (name === this.parent.statics.blotName) {
  	        this.parent.replaceWith(name, value);
  	        return this;
  	      } else {
  	        this.parent.unwrap();
  	        return _get(ListItem.prototype.__proto__ || Object.getPrototypeOf(ListItem.prototype), 'replaceWith', this).call(this, name, value);
  	      }
  	    }
  	  }], [{
  	    key: 'formats',
  	    value: function formats(domNode) {
  	      return domNode.tagName === this.tagName ? undefined : _get(ListItem.__proto__ || Object.getPrototypeOf(ListItem), 'formats', this).call(this, domNode);
  	    }
  	  }]);

  	  return ListItem;
  	}(_block2.default);

  	ListItem.blotName = 'list-item';
  	ListItem.tagName = 'LI';

  	var List = function (_Container) {
  	  _inherits(List, _Container);

  	  _createClass(List, null, [{
  	    key: 'create',
  	    value: function create(value) {
  	      var tagName = value === 'ordered' ? 'OL' : 'UL';
  	      var node = _get(List.__proto__ || Object.getPrototypeOf(List), 'create', this).call(this, tagName);
  	      if (value === 'checked' || value === 'unchecked') {
  	        node.setAttribute('data-checked', value === 'checked');
  	      }
  	      return node;
  	    }
  	  }, {
  	    key: 'formats',
  	    value: function formats(domNode) {
  	      if (domNode.tagName === 'OL') return 'ordered';
  	      if (domNode.tagName === 'UL') {
  	        if (domNode.hasAttribute('data-checked')) {
  	          return domNode.getAttribute('data-checked') === 'true' ? 'checked' : 'unchecked';
  	        } else {
  	          return 'bullet';
  	        }
  	      }
  	      return undefined;
  	    }
  	  }]);

  	  function List(domNode) {
  	    _classCallCheck(this, List);

  	    var _this2 = _possibleConstructorReturn(this, (List.__proto__ || Object.getPrototypeOf(List)).call(this, domNode));

  	    var listEventHandler = function listEventHandler(e) {
  	      if (e.target.parentNode !== domNode) return;
  	      var format = _this2.statics.formats(domNode);
  	      var blot = _parchment2.default.find(e.target);
  	      if (format === 'checked') {
  	        blot.format('list', 'unchecked');
  	      } else if (format === 'unchecked') {
  	        blot.format('list', 'checked');
  	      }
  	    };

  	    domNode.addEventListener('touchstart', listEventHandler);
  	    domNode.addEventListener('mousedown', listEventHandler);
  	    return _this2;
  	  }

  	  _createClass(List, [{
  	    key: 'format',
  	    value: function format(name, value) {
  	      if (this.children.length > 0) {
  	        this.children.tail.format(name, value);
  	      }
  	    }
  	  }, {
  	    key: 'formats',
  	    value: function formats() {
  	      // We don't inherit from FormatBlot
  	      return _defineProperty({}, this.statics.blotName, this.statics.formats(this.domNode));
  	    }
  	  }, {
  	    key: 'insertBefore',
  	    value: function insertBefore(blot, ref) {
  	      if (blot instanceof ListItem) {
  	        _get(List.prototype.__proto__ || Object.getPrototypeOf(List.prototype), 'insertBefore', this).call(this, blot, ref);
  	      } else {
  	        var index = ref == null ? this.length() : ref.offset(this);
  	        var after = this.split(index);
  	        after.parent.insertBefore(blot, after);
  	      }
  	    }
  	  }, {
  	    key: 'optimize',
  	    value: function optimize(context) {
  	      _get(List.prototype.__proto__ || Object.getPrototypeOf(List.prototype), 'optimize', this).call(this, context);
  	      var next = this.next;
  	      if (next != null && next.prev === this && next.statics.blotName === this.statics.blotName && next.domNode.tagName === this.domNode.tagName && next.domNode.getAttribute('data-checked') === this.domNode.getAttribute('data-checked')) {
  	        next.moveChildren(this);
  	        next.remove();
  	      }
  	    }
  	  }, {
  	    key: 'replace',
  	    value: function replace(target) {
  	      if (target.statics.blotName !== this.statics.blotName) {
  	        var item = _parchment2.default.create(this.statics.defaultChild);
  	        target.moveChildren(item);
  	        this.appendChild(item);
  	      }
  	      _get(List.prototype.__proto__ || Object.getPrototypeOf(List.prototype), 'replace', this).call(this, target);
  	    }
  	  }]);

  	  return List;
  	}(_container2.default);

  	List.blotName = 'list';
  	List.scope = _parchment2.default.Scope.BLOCK_BLOT;
  	List.tagName = ['OL', 'UL'];
  	List.defaultChild = 'list-item';
  	List.allowedChildren = [ListItem];

  	exports.ListItem = ListItem;
  	exports.default = List;

  	/***/ }),
  	/* 68 */
  	/***/ (function(module, exports, __webpack_require__) {


  	Object.defineProperty(exports, "__esModule", {
  	  value: true
  	});

  	var _bold = __webpack_require__(56);

  	var _bold2 = _interopRequireDefault(_bold);

  	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  	var Italic = function (_Bold) {
  	  _inherits(Italic, _Bold);

  	  function Italic() {
  	    _classCallCheck(this, Italic);

  	    return _possibleConstructorReturn(this, (Italic.__proto__ || Object.getPrototypeOf(Italic)).apply(this, arguments));
  	  }

  	  return Italic;
  	}(_bold2.default);

  	Italic.blotName = 'italic';
  	Italic.tagName = ['EM', 'I'];

  	exports.default = Italic;

  	/***/ }),
  	/* 69 */
  	/***/ (function(module, exports, __webpack_require__) {


  	Object.defineProperty(exports, "__esModule", {
  	  value: true
  	});

  	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  	var _inline = __webpack_require__(6);

  	var _inline2 = _interopRequireDefault(_inline);

  	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  	var Script = function (_Inline) {
  	  _inherits(Script, _Inline);

  	  function Script() {
  	    _classCallCheck(this, Script);

  	    return _possibleConstructorReturn(this, (Script.__proto__ || Object.getPrototypeOf(Script)).apply(this, arguments));
  	  }

  	  _createClass(Script, null, [{
  	    key: 'create',
  	    value: function create(value) {
  	      if (value === 'super') {
  	        return document.createElement('sup');
  	      } else if (value === 'sub') {
  	        return document.createElement('sub');
  	      } else {
  	        return _get(Script.__proto__ || Object.getPrototypeOf(Script), 'create', this).call(this, value);
  	      }
  	    }
  	  }, {
  	    key: 'formats',
  	    value: function formats(domNode) {
  	      if (domNode.tagName === 'SUB') return 'sub';
  	      if (domNode.tagName === 'SUP') return 'super';
  	      return undefined;
  	    }
  	  }]);

  	  return Script;
  	}(_inline2.default);

  	Script.blotName = 'script';
  	Script.tagName = ['SUB', 'SUP'];

  	exports.default = Script;

  	/***/ }),
  	/* 70 */
  	/***/ (function(module, exports, __webpack_require__) {


  	Object.defineProperty(exports, "__esModule", {
  	  value: true
  	});

  	var _inline = __webpack_require__(6);

  	var _inline2 = _interopRequireDefault(_inline);

  	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  	var Strike = function (_Inline) {
  	  _inherits(Strike, _Inline);

  	  function Strike() {
  	    _classCallCheck(this, Strike);

  	    return _possibleConstructorReturn(this, (Strike.__proto__ || Object.getPrototypeOf(Strike)).apply(this, arguments));
  	  }

  	  return Strike;
  	}(_inline2.default);

  	Strike.blotName = 'strike';
  	Strike.tagName = 'S';

  	exports.default = Strike;

  	/***/ }),
  	/* 71 */
  	/***/ (function(module, exports, __webpack_require__) {


  	Object.defineProperty(exports, "__esModule", {
  	  value: true
  	});

  	var _inline = __webpack_require__(6);

  	var _inline2 = _interopRequireDefault(_inline);

  	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  	var Underline = function (_Inline) {
  	  _inherits(Underline, _Inline);

  	  function Underline() {
  	    _classCallCheck(this, Underline);

  	    return _possibleConstructorReturn(this, (Underline.__proto__ || Object.getPrototypeOf(Underline)).apply(this, arguments));
  	  }

  	  return Underline;
  	}(_inline2.default);

  	Underline.blotName = 'underline';
  	Underline.tagName = 'U';

  	exports.default = Underline;

  	/***/ }),
  	/* 72 */
  	/***/ (function(module, exports, __webpack_require__) {


  	Object.defineProperty(exports, "__esModule", {
  	  value: true
  	});

  	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  	var _parchment = __webpack_require__(0);

  	var _parchment2 = _interopRequireDefault(_parchment);

  	var _link = __webpack_require__(27);

  	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  	var ATTRIBUTES = ['alt', 'height', 'width'];

  	var Image = function (_Parchment$Embed) {
  	  _inherits(Image, _Parchment$Embed);

  	  function Image() {
  	    _classCallCheck(this, Image);

  	    return _possibleConstructorReturn(this, (Image.__proto__ || Object.getPrototypeOf(Image)).apply(this, arguments));
  	  }

  	  _createClass(Image, [{
  	    key: 'format',
  	    value: function format(name, value) {
  	      if (ATTRIBUTES.indexOf(name) > -1) {
  	        if (value) {
  	          this.domNode.setAttribute(name, value);
  	        } else {
  	          this.domNode.removeAttribute(name);
  	        }
  	      } else {
  	        _get(Image.prototype.__proto__ || Object.getPrototypeOf(Image.prototype), 'format', this).call(this, name, value);
  	      }
  	    }
  	  }], [{
  	    key: 'create',
  	    value: function create(value) {
  	      var node = _get(Image.__proto__ || Object.getPrototypeOf(Image), 'create', this).call(this, value);
  	      if (typeof value === 'string') {
  	        node.setAttribute('src', this.sanitize(value));
  	      }
  	      return node;
  	    }
  	  }, {
  	    key: 'formats',
  	    value: function formats(domNode) {
  	      return ATTRIBUTES.reduce(function (formats, attribute) {
  	        if (domNode.hasAttribute(attribute)) {
  	          formats[attribute] = domNode.getAttribute(attribute);
  	        }
  	        return formats;
  	      }, {});
  	    }
  	  }, {
  	    key: 'match',
  	    value: function match(url) {
  	      return (/\.(jpe?g|gif|png)$/.test(url) || /^data:image\/.+;base64/.test(url)
  	      );
  	    }
  	  }, {
  	    key: 'sanitize',
  	    value: function sanitize(url) {
  	      return (0, _link.sanitize)(url, ['http', 'https', 'data']) ? url : '//:0';
  	    }
  	  }, {
  	    key: 'value',
  	    value: function value(domNode) {
  	      return domNode.getAttribute('src');
  	    }
  	  }]);

  	  return Image;
  	}(_parchment2.default.Embed);

  	Image.blotName = 'image';
  	Image.tagName = 'IMG';

  	exports.default = Image;

  	/***/ }),
  	/* 73 */
  	/***/ (function(module, exports, __webpack_require__) {


  	Object.defineProperty(exports, "__esModule", {
  	  value: true
  	});

  	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  	var _block = __webpack_require__(4);

  	var _link = __webpack_require__(27);

  	var _link2 = _interopRequireDefault(_link);

  	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  	var ATTRIBUTES = ['height', 'width'];

  	var Video = function (_BlockEmbed) {
  	  _inherits(Video, _BlockEmbed);

  	  function Video() {
  	    _classCallCheck(this, Video);

  	    return _possibleConstructorReturn(this, (Video.__proto__ || Object.getPrototypeOf(Video)).apply(this, arguments));
  	  }

  	  _createClass(Video, [{
  	    key: 'format',
  	    value: function format(name, value) {
  	      if (ATTRIBUTES.indexOf(name) > -1) {
  	        if (value) {
  	          this.domNode.setAttribute(name, value);
  	        } else {
  	          this.domNode.removeAttribute(name);
  	        }
  	      } else {
  	        _get(Video.prototype.__proto__ || Object.getPrototypeOf(Video.prototype), 'format', this).call(this, name, value);
  	      }
  	    }
  	  }], [{
  	    key: 'create',
  	    value: function create(value) {
  	      var node = _get(Video.__proto__ || Object.getPrototypeOf(Video), 'create', this).call(this, value);
  	      node.setAttribute('frameborder', '0');
  	      node.setAttribute('allowfullscreen', true);
  	      node.setAttribute('src', this.sanitize(value));
  	      return node;
  	    }
  	  }, {
  	    key: 'formats',
  	    value: function formats(domNode) {
  	      return ATTRIBUTES.reduce(function (formats, attribute) {
  	        if (domNode.hasAttribute(attribute)) {
  	          formats[attribute] = domNode.getAttribute(attribute);
  	        }
  	        return formats;
  	      }, {});
  	    }
  	  }, {
  	    key: 'sanitize',
  	    value: function sanitize(url) {
  	      return _link2.default.sanitize(url);
  	    }
  	  }, {
  	    key: 'value',
  	    value: function value(domNode) {
  	      return domNode.getAttribute('src');
  	    }
  	  }]);

  	  return Video;
  	}(_block.BlockEmbed);

  	Video.blotName = 'video';
  	Video.className = 'ql-video';
  	Video.tagName = 'IFRAME';

  	exports.default = Video;

  	/***/ }),
  	/* 74 */
  	/***/ (function(module, exports, __webpack_require__) {


  	Object.defineProperty(exports, "__esModule", {
  	  value: true
  	});
  	exports.default = exports.FormulaBlot = undefined;

  	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  	var _embed = __webpack_require__(35);

  	var _embed2 = _interopRequireDefault(_embed);

  	var _quill = __webpack_require__(5);

  	var _quill2 = _interopRequireDefault(_quill);

  	var _module = __webpack_require__(9);

  	var _module2 = _interopRequireDefault(_module);

  	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  	var FormulaBlot = function (_Embed) {
  	  _inherits(FormulaBlot, _Embed);

  	  function FormulaBlot() {
  	    _classCallCheck(this, FormulaBlot);

  	    return _possibleConstructorReturn(this, (FormulaBlot.__proto__ || Object.getPrototypeOf(FormulaBlot)).apply(this, arguments));
  	  }

  	  _createClass(FormulaBlot, null, [{
  	    key: 'create',
  	    value: function create(value) {
  	      var node = _get(FormulaBlot.__proto__ || Object.getPrototypeOf(FormulaBlot), 'create', this).call(this, value);
  	      if (typeof value === 'string') {
  	        window.katex.render(value, node, {
  	          throwOnError: false,
  	          errorColor: '#f00'
  	        });
  	        node.setAttribute('data-value', value);
  	      }
  	      return node;
  	    }
  	  }, {
  	    key: 'value',
  	    value: function value(domNode) {
  	      return domNode.getAttribute('data-value');
  	    }
  	  }]);

  	  return FormulaBlot;
  	}(_embed2.default);

  	FormulaBlot.blotName = 'formula';
  	FormulaBlot.className = 'ql-formula';
  	FormulaBlot.tagName = 'SPAN';

  	var Formula = function (_Module) {
  	  _inherits(Formula, _Module);

  	  _createClass(Formula, null, [{
  	    key: 'register',
  	    value: function register() {
  	      _quill2.default.register(FormulaBlot, true);
  	    }
  	  }]);

  	  function Formula() {
  	    _classCallCheck(this, Formula);

  	    var _this2 = _possibleConstructorReturn(this, (Formula.__proto__ || Object.getPrototypeOf(Formula)).call(this));

  	    if (window.katex == null) {
  	      throw new Error('Formula module requires KaTeX.');
  	    }
  	    return _this2;
  	  }

  	  return Formula;
  	}(_module2.default);

  	exports.FormulaBlot = FormulaBlot;
  	exports.default = Formula;

  	/***/ }),
  	/* 75 */
  	/***/ (function(module, exports, __webpack_require__) {


  	Object.defineProperty(exports, "__esModule", {
  	  value: true
  	});
  	exports.default = exports.CodeToken = exports.CodeBlock = undefined;

  	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  	var _parchment = __webpack_require__(0);

  	var _parchment2 = _interopRequireDefault(_parchment);

  	var _quill = __webpack_require__(5);

  	var _quill2 = _interopRequireDefault(_quill);

  	var _module = __webpack_require__(9);

  	var _module2 = _interopRequireDefault(_module);

  	var _code = __webpack_require__(13);

  	var _code2 = _interopRequireDefault(_code);

  	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  	var SyntaxCodeBlock = function (_CodeBlock) {
  	  _inherits(SyntaxCodeBlock, _CodeBlock);

  	  function SyntaxCodeBlock() {
  	    _classCallCheck(this, SyntaxCodeBlock);

  	    return _possibleConstructorReturn(this, (SyntaxCodeBlock.__proto__ || Object.getPrototypeOf(SyntaxCodeBlock)).apply(this, arguments));
  	  }

  	  _createClass(SyntaxCodeBlock, [{
  	    key: 'replaceWith',
  	    value: function replaceWith(block) {
  	      this.domNode.textContent = this.domNode.textContent;
  	      this.attach();
  	      _get(SyntaxCodeBlock.prototype.__proto__ || Object.getPrototypeOf(SyntaxCodeBlock.prototype), 'replaceWith', this).call(this, block);
  	    }
  	  }, {
  	    key: 'highlight',
  	    value: function highlight(_highlight) {
  	      var text = this.domNode.textContent;
  	      if (this.cachedText !== text) {
  	        if (text.trim().length > 0 || this.cachedText == null) {
  	          this.domNode.innerHTML = _highlight(text);
  	          this.domNode.normalize();
  	          this.attach();
  	        }
  	        this.cachedText = text;
  	      }
  	    }
  	  }]);

  	  return SyntaxCodeBlock;
  	}(_code2.default);

  	SyntaxCodeBlock.className = 'ql-syntax';

  	var CodeToken = new _parchment2.default.Attributor.Class('token', 'hljs', {
  	  scope: _parchment2.default.Scope.INLINE
  	});

  	var Syntax = function (_Module) {
  	  _inherits(Syntax, _Module);

  	  _createClass(Syntax, null, [{
  	    key: 'register',
  	    value: function register() {
  	      _quill2.default.register(CodeToken, true);
  	      _quill2.default.register(SyntaxCodeBlock, true);
  	    }
  	  }]);

  	  function Syntax(quill, options) {
  	    _classCallCheck(this, Syntax);

  	    var _this2 = _possibleConstructorReturn(this, (Syntax.__proto__ || Object.getPrototypeOf(Syntax)).call(this, quill, options));

  	    if (typeof _this2.options.highlight !== 'function') {
  	      throw new Error('Syntax module requires highlight.js. Please include the library on the page before Quill.');
  	    }
  	    var timer = null;
  	    _this2.quill.on(_quill2.default.events.SCROLL_OPTIMIZE, function () {
  	      clearTimeout(timer);
  	      timer = setTimeout(function () {
  	        _this2.highlight();
  	        timer = null;
  	      }, _this2.options.interval);
  	    });
  	    _this2.highlight();
  	    return _this2;
  	  }

  	  _createClass(Syntax, [{
  	    key: 'highlight',
  	    value: function highlight() {
  	      var _this3 = this;

  	      if (this.quill.selection.composing) return;
  	      this.quill.update(_quill2.default.sources.USER);
  	      var range = this.quill.getSelection();
  	      this.quill.scroll.descendants(SyntaxCodeBlock).forEach(function (code) {
  	        code.highlight(_this3.options.highlight);
  	      });
  	      this.quill.update(_quill2.default.sources.SILENT);
  	      if (range != null) {
  	        this.quill.setSelection(range, _quill2.default.sources.SILENT);
  	      }
  	    }
  	  }]);

  	  return Syntax;
  	}(_module2.default);

  	Syntax.DEFAULTS = {
  	  highlight: function () {
  	    if (window.hljs == null) return null;
  	    return function (text) {
  	      var result = window.hljs.highlightAuto(text);
  	      return result.value;
  	    };
  	  }(),
  	  interval: 1000
  	};

  	exports.CodeBlock = SyntaxCodeBlock;
  	exports.CodeToken = CodeToken;
  	exports.default = Syntax;

  	/***/ }),
  	/* 76 */
  	/***/ (function(module, exports) {

  	module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=3 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=3 x2=13 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=9 y1=4 y2=4></line> </svg>";

  	/***/ }),
  	/* 77 */
  	/***/ (function(module, exports) {

  	module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=14 x2=4 y1=14 y2=14></line> <line class=ql-stroke x1=12 x2=6 y1=4 y2=4></line> </svg>";

  	/***/ }),
  	/* 78 */
  	/***/ (function(module, exports) {

  	module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=15 x2=5 y1=14 y2=14></line> <line class=ql-stroke x1=15 x2=9 y1=4 y2=4></line> </svg>";

  	/***/ }),
  	/* 79 */
  	/***/ (function(module, exports) {

  	module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=15 x2=3 y1=14 y2=14></line> <line class=ql-stroke x1=15 x2=3 y1=4 y2=4></line> </svg>";

  	/***/ }),
  	/* 80 */
  	/***/ (function(module, exports) {

  	module.exports = "<svg viewbox=\"0 0 18 18\"> <g class=\"ql-fill ql-color-label\"> <polygon points=\"6 6.868 6 6 5 6 5 7 5.942 7 6 6.868\"></polygon> <rect height=1 width=1 x=4 y=4></rect> <polygon points=\"6.817 5 6 5 6 6 6.38 6 6.817 5\"></polygon> <rect height=1 width=1 x=2 y=6></rect> <rect height=1 width=1 x=3 y=5></rect> <rect height=1 width=1 x=4 y=7></rect> <polygon points=\"4 11.439 4 11 3 11 3 12 3.755 12 4 11.439\"></polygon> <rect height=1 width=1 x=2 y=12></rect> <rect height=1 width=1 x=2 y=9></rect> <rect height=1 width=1 x=2 y=15></rect> <polygon points=\"4.63 10 4 10 4 11 4.192 11 4.63 10\"></polygon> <rect height=1 width=1 x=3 y=8></rect> <path d=M10.832,4.2L11,4.582V4H10.708A1.948,1.948,0,0,1,10.832,4.2Z></path> <path d=M7,4.582L7.168,4.2A1.929,1.929,0,0,1,7.292,4H7V4.582Z></path> <path d=M8,13H7.683l-0.351.8a1.933,1.933,0,0,1-.124.2H8V13Z></path> <rect height=1 width=1 x=12 y=2></rect> <rect height=1 width=1 x=11 y=3></rect> <path d=M9,3H8V3.282A1.985,1.985,0,0,1,9,3Z></path> <rect height=1 width=1 x=2 y=3></rect> <rect height=1 width=1 x=6 y=2></rect> <rect height=1 width=1 x=3 y=2></rect> <rect height=1 width=1 x=5 y=3></rect> <rect height=1 width=1 x=9 y=2></rect> <rect height=1 width=1 x=15 y=14></rect> <polygon points=\"13.447 10.174 13.469 10.225 13.472 10.232 13.808 11 14 11 14 10 13.37 10 13.447 10.174\"></polygon> <rect height=1 width=1 x=13 y=7></rect> <rect height=1 width=1 x=15 y=5></rect> <rect height=1 width=1 x=14 y=6></rect> <rect height=1 width=1 x=15 y=8></rect> <rect height=1 width=1 x=14 y=9></rect> <path d=M3.775,14H3v1H4V14.314A1.97,1.97,0,0,1,3.775,14Z></path> <rect height=1 width=1 x=14 y=3></rect> <polygon points=\"12 6.868 12 6 11.62 6 12 6.868\"></polygon> <rect height=1 width=1 x=15 y=2></rect> <rect height=1 width=1 x=12 y=5></rect> <rect height=1 width=1 x=13 y=4></rect> <polygon points=\"12.933 9 13 9 13 8 12.495 8 12.933 9\"></polygon> <rect height=1 width=1 x=9 y=14></rect> <rect height=1 width=1 x=8 y=15></rect> <path d=M6,14.926V15H7V14.316A1.993,1.993,0,0,1,6,14.926Z></path> <rect height=1 width=1 x=5 y=15></rect> <path d=M10.668,13.8L10.317,13H10v1h0.792A1.947,1.947,0,0,1,10.668,13.8Z></path> <rect height=1 width=1 x=11 y=15></rect> <path d=M14.332,12.2a1.99,1.99,0,0,1,.166.8H15V12H14.245Z></path> <rect height=1 width=1 x=14 y=15></rect> <rect height=1 width=1 x=15 y=11></rect> </g> <polyline class=ql-stroke points=\"5.5 13 9 5 12.5 13\"></polyline> <line class=ql-stroke x1=11.63 x2=6.38 y1=11 y2=11></line> </svg>";

  	/***/ }),
  	/* 81 */
  	/***/ (function(module, exports) {

  	module.exports = "<svg viewbox=\"0 0 18 18\"> <rect class=\"ql-fill ql-stroke\" height=3 width=3 x=4 y=5></rect> <rect class=\"ql-fill ql-stroke\" height=3 width=3 x=11 y=5></rect> <path class=\"ql-even ql-fill ql-stroke\" d=M7,8c0,4.031-3,5-3,5></path> <path class=\"ql-even ql-fill ql-stroke\" d=M14,8c0,4.031-3,5-3,5></path> </svg>";

  	/***/ }),
  	/* 82 */
  	/***/ (function(module, exports) {

  	module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-stroke d=M5,4H9.5A2.5,2.5,0,0,1,12,6.5v0A2.5,2.5,0,0,1,9.5,9H5A0,0,0,0,1,5,9V4A0,0,0,0,1,5,4Z></path> <path class=ql-stroke d=M5,9h5.5A2.5,2.5,0,0,1,13,11.5v0A2.5,2.5,0,0,1,10.5,14H5a0,0,0,0,1,0,0V9A0,0,0,0,1,5,9Z></path> </svg>";

  	/***/ }),
  	/* 83 */
  	/***/ (function(module, exports) {

  	module.exports = "<svg class=\"\" viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=5 x2=13 y1=3 y2=3></line> <line class=ql-stroke x1=6 x2=9.35 y1=12 y2=3></line> <line class=ql-stroke x1=11 x2=15 y1=11 y2=15></line> <line class=ql-stroke x1=15 x2=11 y1=11 y2=15></line> <rect class=ql-fill height=1 rx=0.5 ry=0.5 width=7 x=2 y=14></rect> </svg>";

  	/***/ }),
  	/* 84 */
  	/***/ (function(module, exports) {

  	module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=\"ql-color-label ql-stroke ql-transparent\" x1=3 x2=15 y1=15 y2=15></line> <polyline class=ql-stroke points=\"5.5 11 9 3 12.5 11\"></polyline> <line class=ql-stroke x1=11.63 x2=6.38 y1=9 y2=9></line> </svg>";

  	/***/ }),
  	/* 85 */
  	/***/ (function(module, exports) {

  	module.exports = "<svg viewbox=\"0 0 18 18\"> <polygon class=\"ql-stroke ql-fill\" points=\"3 11 5 9 3 7 3 11\"></polygon> <line class=\"ql-stroke ql-fill\" x1=15 x2=11 y1=4 y2=4></line> <path class=ql-fill d=M11,3a3,3,0,0,0,0,6h1V3H11Z></path> <rect class=ql-fill height=11 width=1 x=11 y=4></rect> <rect class=ql-fill height=11 width=1 x=13 y=4></rect> </svg>";

  	/***/ }),
  	/* 86 */
  	/***/ (function(module, exports) {

  	module.exports = "<svg viewbox=\"0 0 18 18\"> <polygon class=\"ql-stroke ql-fill\" points=\"15 12 13 10 15 8 15 12\"></polygon> <line class=\"ql-stroke ql-fill\" x1=9 x2=5 y1=4 y2=4></line> <path class=ql-fill d=M5,3A3,3,0,0,0,5,9H6V3H5Z></path> <rect class=ql-fill height=11 width=1 x=5 y=4></rect> <rect class=ql-fill height=11 width=1 x=7 y=4></rect> </svg>";

  	/***/ }),
  	/* 87 */
  	/***/ (function(module, exports) {

  	module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M14,16H4a1,1,0,0,1,0-2H14A1,1,0,0,1,14,16Z /> <path class=ql-fill d=M14,4H4A1,1,0,0,1,4,2H14A1,1,0,0,1,14,4Z /> <rect class=ql-fill x=3 y=6 width=12 height=6 rx=1 ry=1 /> </svg>";

  	/***/ }),
  	/* 88 */
  	/***/ (function(module, exports) {

  	module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M13,16H5a1,1,0,0,1,0-2h8A1,1,0,0,1,13,16Z /> <path class=ql-fill d=M13,4H5A1,1,0,0,1,5,2h8A1,1,0,0,1,13,4Z /> <rect class=ql-fill x=2 y=6 width=14 height=6 rx=1 ry=1 /> </svg>";

  	/***/ }),
  	/* 89 */
  	/***/ (function(module, exports) {

  	module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M15,8H13a1,1,0,0,1,0-2h2A1,1,0,0,1,15,8Z /> <path class=ql-fill d=M15,12H13a1,1,0,0,1,0-2h2A1,1,0,0,1,15,12Z /> <path class=ql-fill d=M15,16H5a1,1,0,0,1,0-2H15A1,1,0,0,1,15,16Z /> <path class=ql-fill d=M15,4H5A1,1,0,0,1,5,2H15A1,1,0,0,1,15,4Z /> <rect class=ql-fill x=2 y=6 width=8 height=6 rx=1 ry=1 /> </svg>";

  	/***/ }),
  	/* 90 */
  	/***/ (function(module, exports) {

  	module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M5,8H3A1,1,0,0,1,3,6H5A1,1,0,0,1,5,8Z /> <path class=ql-fill d=M5,12H3a1,1,0,0,1,0-2H5A1,1,0,0,1,5,12Z /> <path class=ql-fill d=M13,16H3a1,1,0,0,1,0-2H13A1,1,0,0,1,13,16Z /> <path class=ql-fill d=M13,4H3A1,1,0,0,1,3,2H13A1,1,0,0,1,13,4Z /> <rect class=ql-fill x=8 y=6 width=8 height=6 rx=1 ry=1 transform=\"translate(24 18) rotate(-180)\"/> </svg>";

  	/***/ }),
  	/* 91 */
  	/***/ (function(module, exports) {

  	module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M11.759,2.482a2.561,2.561,0,0,0-3.53.607A7.656,7.656,0,0,0,6.8,6.2C6.109,9.188,5.275,14.677,4.15,14.927a1.545,1.545,0,0,0-1.3-.933A0.922,0.922,0,0,0,2,15.036S1.954,16,4.119,16s3.091-2.691,3.7-5.553c0.177-.826.36-1.726,0.554-2.6L8.775,6.2c0.381-1.421.807-2.521,1.306-2.676a1.014,1.014,0,0,0,1.02.56A0.966,0.966,0,0,0,11.759,2.482Z></path> <rect class=ql-fill height=1.6 rx=0.8 ry=0.8 width=5 x=5.15 y=6.2></rect> <path class=ql-fill d=M13.663,12.027a1.662,1.662,0,0,1,.266-0.276q0.193,0.069.456,0.138a2.1,2.1,0,0,0,.535.069,1.075,1.075,0,0,0,.767-0.3,1.044,1.044,0,0,0,.314-0.8,0.84,0.84,0,0,0-.238-0.619,0.8,0.8,0,0,0-.594-0.239,1.154,1.154,0,0,0-.781.3,4.607,4.607,0,0,0-.781,1q-0.091.15-.218,0.346l-0.246.38c-0.068-.288-0.137-0.582-0.212-0.885-0.459-1.847-2.494-.984-2.941-0.8-0.482.2-.353,0.647-0.094,0.529a0.869,0.869,0,0,1,1.281.585c0.217,0.751.377,1.436,0.527,2.038a5.688,5.688,0,0,1-.362.467,2.69,2.69,0,0,1-.264.271q-0.221-.08-0.471-0.147a2.029,2.029,0,0,0-.522-0.066,1.079,1.079,0,0,0-.768.3A1.058,1.058,0,0,0,9,15.131a0.82,0.82,0,0,0,.832.852,1.134,1.134,0,0,0,.787-0.3,5.11,5.11,0,0,0,.776-0.993q0.141-.219.215-0.34c0.046-.076.122-0.194,0.223-0.346a2.786,2.786,0,0,0,.918,1.726,2.582,2.582,0,0,0,2.376-.185c0.317-.181.212-0.565,0-0.494A0.807,0.807,0,0,1,14.176,15a5.159,5.159,0,0,1-.913-2.446l0,0Q13.487,12.24,13.663,12.027Z></path> </svg>";

  	/***/ }),
  	/* 92 */
  	/***/ (function(module, exports) {

  	module.exports = "<svg viewBox=\"0 0 18 18\"> <path class=ql-fill d=M10,4V14a1,1,0,0,1-2,0V10H3v4a1,1,0,0,1-2,0V4A1,1,0,0,1,3,4V8H8V4a1,1,0,0,1,2,0Zm6.06787,9.209H14.98975V7.59863a.54085.54085,0,0,0-.605-.60547h-.62744a1.01119,1.01119,0,0,0-.748.29688L11.645,8.56641a.5435.5435,0,0,0-.022.8584l.28613.30762a.53861.53861,0,0,0,.84717.0332l.09912-.08789a1.2137,1.2137,0,0,0,.2417-.35254h.02246s-.01123.30859-.01123.60547V13.209H12.041a.54085.54085,0,0,0-.605.60547v.43945a.54085.54085,0,0,0,.605.60547h4.02686a.54085.54085,0,0,0,.605-.60547v-.43945A.54085.54085,0,0,0,16.06787,13.209Z /> </svg>";

  	/***/ }),
  	/* 93 */
  	/***/ (function(module, exports) {

  	module.exports = "<svg viewBox=\"0 0 18 18\"> <path class=ql-fill d=M16.73975,13.81445v.43945a.54085.54085,0,0,1-.605.60547H11.855a.58392.58392,0,0,1-.64893-.60547V14.0127c0-2.90527,3.39941-3.42187,3.39941-4.55469a.77675.77675,0,0,0-.84717-.78125,1.17684,1.17684,0,0,0-.83594.38477c-.2749.26367-.561.374-.85791.13184l-.4292-.34082c-.30811-.24219-.38525-.51758-.1543-.81445a2.97155,2.97155,0,0,1,2.45361-1.17676,2.45393,2.45393,0,0,1,2.68408,2.40918c0,2.45312-3.1792,2.92676-3.27832,3.93848h2.79443A.54085.54085,0,0,1,16.73975,13.81445ZM9,3A.99974.99974,0,0,0,8,4V8H3V4A1,1,0,0,0,1,4V14a1,1,0,0,0,2,0V10H8v4a1,1,0,0,0,2,0V4A.99974.99974,0,0,0,9,3Z /> </svg>";

  	/***/ }),
  	/* 94 */
  	/***/ (function(module, exports) {

  	module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=7 x2=13 y1=4 y2=4></line> <line class=ql-stroke x1=5 x2=11 y1=14 y2=14></line> <line class=ql-stroke x1=8 x2=10 y1=14 y2=4></line> </svg>";

  	/***/ }),
  	/* 95 */
  	/***/ (function(module, exports) {

  	module.exports = "<svg viewbox=\"0 0 18 18\"> <rect class=ql-stroke height=10 width=12 x=3 y=4></rect> <circle class=ql-fill cx=6 cy=7 r=1></circle> <polyline class=\"ql-even ql-fill\" points=\"5 12 5 11 7 9 8 10 11 7 13 9 13 12 5 12\"></polyline> </svg>";

  	/***/ }),
  	/* 96 */
  	/***/ (function(module, exports) {

  	module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=3 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=\"ql-fill ql-stroke\" points=\"3 7 3 11 5 9 3 7\"></polyline> </svg>";

  	/***/ }),
  	/* 97 */
  	/***/ (function(module, exports) {

  	module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=3 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=ql-stroke points=\"5 7 5 11 3 9 5 7\"></polyline> </svg>";

  	/***/ }),
  	/* 98 */
  	/***/ (function(module, exports) {

  	module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=7 x2=11 y1=7 y2=11></line> <path class=\"ql-even ql-stroke\" d=M8.9,4.577a3.476,3.476,0,0,1,.36,4.679A3.476,3.476,0,0,1,4.577,8.9C3.185,7.5,2.035,6.4,4.217,4.217S7.5,3.185,8.9,4.577Z></path> <path class=\"ql-even ql-stroke\" d=M13.423,9.1a3.476,3.476,0,0,0-4.679-.36,3.476,3.476,0,0,0,.36,4.679c1.392,1.392,2.5,2.542,4.679.36S14.815,10.5,13.423,9.1Z></path> </svg>";

  	/***/ }),
  	/* 99 */
  	/***/ (function(module, exports) {

  	module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=7 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=7 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=7 x2=15 y1=14 y2=14></line> <line class=\"ql-stroke ql-thin\" x1=2.5 x2=4.5 y1=5.5 y2=5.5></line> <path class=ql-fill d=M3.5,6A0.5,0.5,0,0,1,3,5.5V3.085l-0.276.138A0.5,0.5,0,0,1,2.053,3c-0.124-.247-0.023-0.324.224-0.447l1-.5A0.5,0.5,0,0,1,4,2.5v3A0.5,0.5,0,0,1,3.5,6Z></path> <path class=\"ql-stroke ql-thin\" d=M4.5,10.5h-2c0-.234,1.85-1.076,1.85-2.234A0.959,0.959,0,0,0,2.5,8.156></path> <path class=\"ql-stroke ql-thin\" d=M2.5,14.846a0.959,0.959,0,0,0,1.85-.109A0.7,0.7,0,0,0,3.75,14a0.688,0.688,0,0,0,.6-0.736,0.959,0.959,0,0,0-1.85-.109></path> </svg>";

  	/***/ }),
  	/* 100 */
  	/***/ (function(module, exports) {

  	module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=6 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=6 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=6 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=3 y1=4 y2=4></line> <line class=ql-stroke x1=3 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=3 x2=3 y1=14 y2=14></line> </svg>";

  	/***/ }),
  	/* 101 */
  	/***/ (function(module, exports) {

  	module.exports = "<svg class=\"\" viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=9 x2=15 y1=4 y2=4></line> <polyline class=ql-stroke points=\"3 4 4 5 6 3\"></polyline> <line class=ql-stroke x1=9 x2=15 y1=14 y2=14></line> <polyline class=ql-stroke points=\"3 14 4 15 6 13\"></polyline> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=ql-stroke points=\"3 9 4 10 6 8\"></polyline> </svg>";

  	/***/ }),
  	/* 102 */
  	/***/ (function(module, exports) {

  	module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M15.5,15H13.861a3.858,3.858,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.921,1.921,0,0,0,12.021,11.7a0.50013,0.50013,0,1,0,.957.291h0a0.914,0.914,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.076-1.16971,1.86982-1.93971,2.43082A1.45639,1.45639,0,0,0,12,15.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,15Z /> <path class=ql-fill d=M9.65,5.241a1,1,0,0,0-1.409.108L6,7.964,3.759,5.349A1,1,0,0,0,2.192,6.59178Q2.21541,6.6213,2.241,6.649L4.684,9.5,2.241,12.35A1,1,0,0,0,3.71,13.70722q0.02557-.02768.049-0.05722L6,11.036,8.241,13.65a1,1,0,1,0,1.567-1.24277Q9.78459,12.3777,9.759,12.35L7.316,9.5,9.759,6.651A1,1,0,0,0,9.65,5.241Z /> </svg>";

  	/***/ }),
  	/* 103 */
  	/***/ (function(module, exports) {

  	module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M15.5,7H13.861a4.015,4.015,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.922,1.922,0,0,0,12.021,3.7a0.5,0.5,0,1,0,.957.291,0.917,0.917,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.077-1.164,1.925-1.934,2.486A1.423,1.423,0,0,0,12,7.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,7Z /> <path class=ql-fill d=M9.651,5.241a1,1,0,0,0-1.41.108L6,7.964,3.759,5.349a1,1,0,1,0-1.519,1.3L4.683,9.5,2.241,12.35a1,1,0,1,0,1.519,1.3L6,11.036,8.241,13.65a1,1,0,0,0,1.519-1.3L7.317,9.5,9.759,6.651A1,1,0,0,0,9.651,5.241Z /> </svg>";

  	/***/ }),
  	/* 104 */
  	/***/ (function(module, exports) {

  	module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=\"ql-stroke ql-thin\" x1=15.5 x2=2.5 y1=8.5 y2=9.5></line> <path class=ql-fill d=M9.007,8C6.542,7.791,6,7.519,6,6.5,6,5.792,7.283,5,9,5c1.571,0,2.765.679,2.969,1.309a1,1,0,0,0,1.9-.617C13.356,4.106,11.354,3,9,3,6.2,3,4,4.538,4,6.5a3.2,3.2,0,0,0,.5,1.843Z></path> <path class=ql-fill d=M8.984,10C11.457,10.208,12,10.479,12,11.5c0,0.708-1.283,1.5-3,1.5-1.571,0-2.765-.679-2.969-1.309a1,1,0,1,0-1.9.617C4.644,13.894,6.646,15,9,15c2.8,0,5-1.538,5-3.5a3.2,3.2,0,0,0-.5-1.843Z></path> </svg>";

  	/***/ }),
  	/* 105 */
  	/***/ (function(module, exports) {

  	module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-stroke d=M5,3V9a4.012,4.012,0,0,0,4,4H9a4.012,4.012,0,0,0,4-4V3></path> <rect class=ql-fill height=1 rx=0.5 ry=0.5 width=12 x=3 y=15></rect> </svg>";

  	/***/ }),
  	/* 106 */
  	/***/ (function(module, exports) {

  	module.exports = "<svg viewbox=\"0 0 18 18\"> <rect class=ql-stroke height=12 width=12 x=3 y=3></rect> <rect class=ql-fill height=12 width=1 x=5 y=3></rect> <rect class=ql-fill height=12 width=1 x=12 y=3></rect> <rect class=ql-fill height=2 width=8 x=5 y=8></rect> <rect class=ql-fill height=1 width=3 x=3 y=5></rect> <rect class=ql-fill height=1 width=3 x=3 y=7></rect> <rect class=ql-fill height=1 width=3 x=3 y=10></rect> <rect class=ql-fill height=1 width=3 x=3 y=12></rect> <rect class=ql-fill height=1 width=3 x=12 y=5></rect> <rect class=ql-fill height=1 width=3 x=12 y=7></rect> <rect class=ql-fill height=1 width=3 x=12 y=10></rect> <rect class=ql-fill height=1 width=3 x=12 y=12></rect> </svg>";

  	/***/ }),
  	/* 107 */
  	/***/ (function(module, exports) {

  	module.exports = "<svg viewbox=\"0 0 18 18\"> <polygon class=ql-stroke points=\"7 11 9 13 11 11 7 11\"></polygon> <polygon class=ql-stroke points=\"7 7 9 5 11 7 7 7\"></polygon> </svg>";

  	/***/ }),
  	/* 108 */
  	/***/ (function(module, exports, __webpack_require__) {


  	Object.defineProperty(exports, "__esModule", {
  	  value: true
  	});
  	exports.default = exports.BubbleTooltip = undefined;

  	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  	var _extend = __webpack_require__(3);

  	var _extend2 = _interopRequireDefault(_extend);

  	var _emitter = __webpack_require__(8);

  	var _emitter2 = _interopRequireDefault(_emitter);

  	var _base = __webpack_require__(43);

  	var _base2 = _interopRequireDefault(_base);

  	var _selection = __webpack_require__(15);

  	var _icons = __webpack_require__(41);

  	var _icons2 = _interopRequireDefault(_icons);

  	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  	var TOOLBAR_CONFIG = [['bold', 'italic', 'link'], [{ header: 1 }, { header: 2 }, 'blockquote']];

  	var BubbleTheme = function (_BaseTheme) {
  	  _inherits(BubbleTheme, _BaseTheme);

  	  function BubbleTheme(quill, options) {
  	    _classCallCheck(this, BubbleTheme);

  	    if (options.modules.toolbar != null && options.modules.toolbar.container == null) {
  	      options.modules.toolbar.container = TOOLBAR_CONFIG;
  	    }

  	    var _this = _possibleConstructorReturn(this, (BubbleTheme.__proto__ || Object.getPrototypeOf(BubbleTheme)).call(this, quill, options));

  	    _this.quill.container.classList.add('ql-bubble');
  	    return _this;
  	  }

  	  _createClass(BubbleTheme, [{
  	    key: 'extendToolbar',
  	    value: function extendToolbar(toolbar) {
  	      this.tooltip = new BubbleTooltip(this.quill, this.options.bounds);
  	      this.tooltip.root.appendChild(toolbar.container);
  	      this.buildButtons([].slice.call(toolbar.container.querySelectorAll('button')), _icons2.default);
  	      this.buildPickers([].slice.call(toolbar.container.querySelectorAll('select')), _icons2.default);
  	    }
  	  }]);

  	  return BubbleTheme;
  	}(_base2.default);

  	BubbleTheme.DEFAULTS = (0, _extend2.default)(true, {}, _base2.default.DEFAULTS, {
  	  modules: {
  	    toolbar: {
  	      handlers: {
  	        link: function link(value) {
  	          if (!value) {
  	            this.quill.format('link', false);
  	          } else {
  	            this.quill.theme.tooltip.edit();
  	          }
  	        }
  	      }
  	    }
  	  }
  	});

  	var BubbleTooltip = function (_BaseTooltip) {
  	  _inherits(BubbleTooltip, _BaseTooltip);

  	  function BubbleTooltip(quill, bounds) {
  	    _classCallCheck(this, BubbleTooltip);

  	    var _this2 = _possibleConstructorReturn(this, (BubbleTooltip.__proto__ || Object.getPrototypeOf(BubbleTooltip)).call(this, quill, bounds));

  	    _this2.quill.on(_emitter2.default.events.EDITOR_CHANGE, function (type, range, oldRange, source) {
  	      if (type !== _emitter2.default.events.SELECTION_CHANGE) return;
  	      if (range != null && range.length > 0 && source === _emitter2.default.sources.USER) {
  	        _this2.show();
  	        // Lock our width so we will expand beyond our offsetParent boundaries
  	        _this2.root.style.left = '0px';
  	        _this2.root.style.width = '';
  	        _this2.root.style.width = _this2.root.offsetWidth + 'px';
  	        var lines = _this2.quill.getLines(range.index, range.length);
  	        if (lines.length === 1) {
  	          _this2.position(_this2.quill.getBounds(range));
  	        } else {
  	          var lastLine = lines[lines.length - 1];
  	          var index = _this2.quill.getIndex(lastLine);
  	          var length = Math.min(lastLine.length() - 1, range.index + range.length - index);
  	          var _bounds = _this2.quill.getBounds(new _selection.Range(index, length));
  	          _this2.position(_bounds);
  	        }
  	      } else if (document.activeElement !== _this2.textbox && _this2.quill.hasFocus()) {
  	        _this2.hide();
  	      }
  	    });
  	    return _this2;
  	  }

  	  _createClass(BubbleTooltip, [{
  	    key: 'listen',
  	    value: function listen() {
  	      var _this3 = this;

  	      _get(BubbleTooltip.prototype.__proto__ || Object.getPrototypeOf(BubbleTooltip.prototype), 'listen', this).call(this);
  	      this.root.querySelector('.ql-close').addEventListener('click', function () {
  	        _this3.root.classList.remove('ql-editing');
  	      });
  	      this.quill.on(_emitter2.default.events.SCROLL_OPTIMIZE, function () {
  	        // Let selection be restored by toolbar handlers before repositioning
  	        setTimeout(function () {
  	          if (_this3.root.classList.contains('ql-hidden')) return;
  	          var range = _this3.quill.getSelection();
  	          if (range != null) {
  	            _this3.position(_this3.quill.getBounds(range));
  	          }
  	        }, 1);
  	      });
  	    }
  	  }, {
  	    key: 'cancel',
  	    value: function cancel() {
  	      this.show();
  	    }
  	  }, {
  	    key: 'position',
  	    value: function position(reference) {
  	      var shift = _get(BubbleTooltip.prototype.__proto__ || Object.getPrototypeOf(BubbleTooltip.prototype), 'position', this).call(this, reference);
  	      var arrow = this.root.querySelector('.ql-tooltip-arrow');
  	      arrow.style.marginLeft = '';
  	      if (shift === 0) return shift;
  	      arrow.style.marginLeft = -1 * shift - arrow.offsetWidth / 2 + 'px';
  	    }
  	  }]);

  	  return BubbleTooltip;
  	}(_base.BaseTooltip);

  	BubbleTooltip.TEMPLATE = ['<span class="ql-tooltip-arrow"></span>', '<div class="ql-tooltip-editor">', '<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">', '<a class="ql-close"></a>', '</div>'].join('');

  	exports.BubbleTooltip = BubbleTooltip;
  	exports.default = BubbleTheme;

  	/***/ }),
  	/* 109 */
  	/***/ (function(module, exports, __webpack_require__) {

  	module.exports = __webpack_require__(63);


  	/***/ })
  	/******/ ])["default"];
  	}); 
  } (quill));

  var quillExports = quill.exports;
  var Quill = /*@__PURE__*/getDefaultExportFromCjs(quillExports);

  //textEditor  using Quill library
  //bind textarea to editor
  // export function TextEditor(Alpine) {
  //     Alpine.directive("texteditor",  (el) => {
  //       const target = el.hasAttribute('u-texteditor-target')?el.querySelector(el.getAttribute('u-texteditor-target')): el.querySelector('[u-texteditor-target]');
  //       const textarea = el.querySelector('[u-texteditor-textarea]')
  //       const textareaName = textarea.getAttribute('name')

  //       const placeholder = el.getAttribute('u-texteditor-placeholder');
  //       const value = el.getAttribute('u-texteditor-value')
  //       const toolbar = el.getAttribute('u-texteditor-toolbare')
  //       const type = el.getAttribute('u-texteditor-type')
  //       const model = el.getAttribute('u-texteditor-model')

  //       const types = {
  //         basic: undefined,
  //         simple: [
  //           [{ header: [1, 2, 3, 4, 5, 6, false] }],
  //           ["bold", "italic", "underline", "strike"],
  //           ["blockquote", "code-block"],
  //         ],
  //         standard: [
  //           [{ header: [1, 2, 3, 4, 5, 6, false] }],
  //           ["bold", "italic", "underline", "strike"],
  //           ["blockquote", "code-block"],
  //           [{ list: "ordered" }, { list: "bullet" }],
  //           [{ direction: "rtl" }],
  //           [{ size: ["small", false, "large", "huge"] }],
  //           [{ color: [] }, { background: [] }],
  //           [{ font: [] }],
  //           [{ align: [] }],
  //           ["clean"],
  //         ],
  //         advanced: [
  //           [{ header: [1, 2, 3, 4, 5, 6, false] }],
  //           ["bold", "italic", "underline", "strike"],
  //           ["blockquote", "code-block"],
  //           [{ list: "ordered" }, { list: "bullet" }],
  //           [{ script: "sub" }, { script: "super" }],
  //           [{ indent: "-1" }, { indent: "+1" }],
  //           [{ direction: "rtl" }],
  //           [{ size: ["small", false, "large", "huge"] }],
  //           [{ header: [1, 2, 3, 4, 5, 6, false] }],
  //           [{ color: [] }, { background: [] }],
  //           [{ font: [] }],
  //           [{ align: [] }],
  //           ["clean"],
  //         ],
  //       };

  //       let quill = new Quill(target, {
  //         modules: {
  //           toolbar: toolbar? toolbar: types[type],
  //         },
  //         theme: "snow",
  //         placeholder,
  //       });

  //       Alpine.bind(el, () => ({
  //         "u-init"() {
  //           console.log('model',model)
  //           console.log('model value',this[model])
  //           console.log('value',value)
  //           console.log('textarea name',textareaName)
  //           console.log('$data name',this[textareaName])

  //           quill.on("text-change", (delta, old, source) => {
  //             console.log('text-change fired')
  //             const innerHtml = quill.root.innerHTML
  //             textarea.value = innerHtml;
  //             //setting form $data
  //             if(this[textareaName]){
  //               console.log('old $data', this[textareaName])
  //               this[textareaName] = innerHtml ;
  //               console.log('new $data', this[textareaName])

  //             }
  //             //setting $model
  //             if(model){
  //               console.log('old model', this[model])
  //               this[model] = innerHtml;
  //               console.log('new model', this[model])
  //             }
  //           });
  //           // set initial text
  //           if(value){
  //             console.log('value set', value)
  //             quill.setText( value + '\n', 'api')
  //           }

  //         },
  //         "u-effect"(){
  //           //listening for $data changes
  //           if(this[textareaName] && (this[textareaName] !== quill.root.innerHTML)){
  //             console.log('$data property changed', this[textareaName])
  //             quill.root.innerHTML = this[textareaName]
  //             // quill.setText(this[textareaName]?? '')
  //           }
  //           //listening for $model changed
  //           if(model && (this[model] !== quill.root.innerHTML)){
  //             console.log('model changed', this[model], quill.root.innerHTML)
  //             quill.root.innerHTML = this[model]
  //             // quill.setText(this[model]?? '')
  //           }
  //         }
  //       }));
  //   });
  // }

  //bine editor to textarea
  function TextEditor(Alpine) {
    Alpine.directive("texteditor", (el) => {
      const target = el.hasAttribute("u-texteditor-target")
        ? el.querySelector(el.getAttribute("u-texteditor-target"))
        : el.querySelector("[u-texteditor-target]");
      const textarea = el.querySelector("[u-texteditor-textarea]");
      const textareaName = textarea.getAttribute("name");

      const placeholder = textarea.getAttribute("placeholder");
      const readOnly = el.hasAttribute("u-textarea-readonly");
      const disabled = textarea.hasAttribute("disabled");
      const value = textarea.getAttribute("value");
      const toolbar = el.getAttribute("u-texteditor-toolbare");
      const type = el.getAttribute("u-texteditor-type");
      const model = el.getAttribute("u-texteditor-model");

      const types = {
        basic: undefined,
        simple: [
          [{ header: [1, 2, 3, 4, 5, 6, false] }],
          ["bold", "italic", "underline", "strike"],
          ["blockquote", "code-block"],
        ],
        standard: [
          [{ header: [1, 2, 3, 4, 5, 6, false] }],
          ["bold", "italic", "underline", "strike"],
          ["blockquote", "code-block"],
          [{ list: "ordered" }, { list: "bullet" }],
          [{ direction: "rtl" }],
          [{ size: ["small", false, "large", "huge"] }],
          [{ color: [] }, { background: [] }],
          [{ font: [] }],
          [{ align: [] }],
          ["clean"],
        ],
        advanced: [
          [{ header: [1, 2, 3, 4, 5, 6, false] }],
          ["bold", "italic", "underline", "strike"],
          ["blockquote", "code-block"],
          [{ list: "ordered" }, { list: "bullet" }],
          [{ script: "sub" }, { script: "super" }],
          [{ indent: "-1" }, { indent: "+1" }],
          [{ direction: "rtl" }],
          [{ size: ["small", false, "large", "huge"] }],
          [{ header: [1, 2, 3, 4, 5, 6, false] }],
          [{ color: [] }, { background: [] }],
          [{ font: [] }],
          [{ align: [] }],
          ["clean"],
        ],
      };

      let quill = new Quill(target, {
        modules: {
          toolbar: toolbar ? toolbar : types[type],
        },
        theme: "snow",
        placeholder,
        readOnly: readOnly ?? disabled,
      });

      

      quill.on("text-change", (delta, old, source) => {
        const innerHtml = quill.root.innerHTML;
        innerHtml === "<p><br></p>"
          ? (textarea.value = "")
          : (textarea.value = innerHtml);
        textarea.dispatchEvent(new Event("input"));
      });
      
      if (value) quill.root.innerHTML = value;

      if (textarea.form) {
        textarea.form.addEventListener("reset", () => {
          textarea.value = "";
          textarea.dispatchEvent(new Event("input"));
        });
      }

      Alpine.bind(textarea, () => ({
        "u-model": model ? model : textareaName,
        "u-on:input"() {
          if (textarea.value !== quill.root.innerHTML || textarea.value === "") {
            quill.root.innerHTML = textarea.value;
          }
        },
      }));

      Alpine.bind(el, () => ({
        "u-effect"() {
          // listening for $data changes
          if (textareaName && this[textareaName] !== quill.root.innerHTML) {
            quill.root.innerHTML = textarea.value ? textarea.value : "";
          }
          //listening for $model changed
          if (model && this[model] !== quill.root.innerHTML) {
            quill.root.innerHTML = this[model] ? this[model] : "";
          }
        },
      }));
    });
  }

  var pikaday = {exports: {}};

  function commonjsRequire(path) {
  	throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
  }

  var moment = {exports: {}};

  (function (module, exports) {
  (function (global, factory) {
  	    module.exports = factory() ;
  	}(commonjsGlobal, (function () {
  	    var hookCallback;

  	    function hooks() {
  	        return hookCallback.apply(null, arguments);
  	    }

  	    // This is done to register the method called with moment()
  	    // without creating circular dependencies.
  	    function setHookCallback(callback) {
  	        hookCallback = callback;
  	    }

  	    function isArray(input) {
  	        return (
  	            input instanceof Array ||
  	            Object.prototype.toString.call(input) === '[object Array]'
  	        );
  	    }

  	    function isObject(input) {
  	        // IE8 will treat undefined and null as object if it wasn't for
  	        // input != null
  	        return (
  	            input != null &&
  	            Object.prototype.toString.call(input) === '[object Object]'
  	        );
  	    }

  	    function hasOwnProp(a, b) {
  	        return Object.prototype.hasOwnProperty.call(a, b);
  	    }

  	    function isObjectEmpty(obj) {
  	        if (Object.getOwnPropertyNames) {
  	            return Object.getOwnPropertyNames(obj).length === 0;
  	        } else {
  	            var k;
  	            for (k in obj) {
  	                if (hasOwnProp(obj, k)) {
  	                    return false;
  	                }
  	            }
  	            return true;
  	        }
  	    }

  	    function isUndefined(input) {
  	        return input === void 0;
  	    }

  	    function isNumber(input) {
  	        return (
  	            typeof input === 'number' ||
  	            Object.prototype.toString.call(input) === '[object Number]'
  	        );
  	    }

  	    function isDate(input) {
  	        return (
  	            input instanceof Date ||
  	            Object.prototype.toString.call(input) === '[object Date]'
  	        );
  	    }

  	    function map(arr, fn) {
  	        var res = [],
  	            i,
  	            arrLen = arr.length;
  	        for (i = 0; i < arrLen; ++i) {
  	            res.push(fn(arr[i], i));
  	        }
  	        return res;
  	    }

  	    function extend(a, b) {
  	        for (var i in b) {
  	            if (hasOwnProp(b, i)) {
  	                a[i] = b[i];
  	            }
  	        }

  	        if (hasOwnProp(b, 'toString')) {
  	            a.toString = b.toString;
  	        }

  	        if (hasOwnProp(b, 'valueOf')) {
  	            a.valueOf = b.valueOf;
  	        }

  	        return a;
  	    }

  	    function createUTC(input, format, locale, strict) {
  	        return createLocalOrUTC(input, format, locale, strict, true).utc();
  	    }

  	    function defaultParsingFlags() {
  	        // We need to deep clone this object.
  	        return {
  	            empty: false,
  	            unusedTokens: [],
  	            unusedInput: [],
  	            overflow: -2,
  	            charsLeftOver: 0,
  	            nullInput: false,
  	            invalidEra: null,
  	            invalidMonth: null,
  	            invalidFormat: false,
  	            userInvalidated: false,
  	            iso: false,
  	            parsedDateParts: [],
  	            era: null,
  	            meridiem: null,
  	            rfc2822: false,
  	            weekdayMismatch: false,
  	        };
  	    }

  	    function getParsingFlags(m) {
  	        if (m._pf == null) {
  	            m._pf = defaultParsingFlags();
  	        }
  	        return m._pf;
  	    }

  	    var some;
  	    if (Array.prototype.some) {
  	        some = Array.prototype.some;
  	    } else {
  	        some = function (fun) {
  	            var t = Object(this),
  	                len = t.length >>> 0,
  	                i;

  	            for (i = 0; i < len; i++) {
  	                if (i in t && fun.call(this, t[i], i, t)) {
  	                    return true;
  	                }
  	            }

  	            return false;
  	        };
  	    }

  	    function isValid(m) {
  	        if (m._isValid == null) {
  	            var flags = getParsingFlags(m),
  	                parsedParts = some.call(flags.parsedDateParts, function (i) {
  	                    return i != null;
  	                }),
  	                isNowValid =
  	                    !isNaN(m._d.getTime()) &&
  	                    flags.overflow < 0 &&
  	                    !flags.empty &&
  	                    !flags.invalidEra &&
  	                    !flags.invalidMonth &&
  	                    !flags.invalidWeekday &&
  	                    !flags.weekdayMismatch &&
  	                    !flags.nullInput &&
  	                    !flags.invalidFormat &&
  	                    !flags.userInvalidated &&
  	                    (!flags.meridiem || (flags.meridiem && parsedParts));

  	            if (m._strict) {
  	                isNowValid =
  	                    isNowValid &&
  	                    flags.charsLeftOver === 0 &&
  	                    flags.unusedTokens.length === 0 &&
  	                    flags.bigHour === undefined;
  	            }

  	            if (Object.isFrozen == null || !Object.isFrozen(m)) {
  	                m._isValid = isNowValid;
  	            } else {
  	                return isNowValid;
  	            }
  	        }
  	        return m._isValid;
  	    }

  	    function createInvalid(flags) {
  	        var m = createUTC(NaN);
  	        if (flags != null) {
  	            extend(getParsingFlags(m), flags);
  	        } else {
  	            getParsingFlags(m).userInvalidated = true;
  	        }

  	        return m;
  	    }

  	    // Plugins that add properties should also add the key here (null value),
  	    // so we can properly clone ourselves.
  	    var momentProperties = (hooks.momentProperties = []),
  	        updateInProgress = false;

  	    function copyConfig(to, from) {
  	        var i,
  	            prop,
  	            val,
  	            momentPropertiesLen = momentProperties.length;

  	        if (!isUndefined(from._isAMomentObject)) {
  	            to._isAMomentObject = from._isAMomentObject;
  	        }
  	        if (!isUndefined(from._i)) {
  	            to._i = from._i;
  	        }
  	        if (!isUndefined(from._f)) {
  	            to._f = from._f;
  	        }
  	        if (!isUndefined(from._l)) {
  	            to._l = from._l;
  	        }
  	        if (!isUndefined(from._strict)) {
  	            to._strict = from._strict;
  	        }
  	        if (!isUndefined(from._tzm)) {
  	            to._tzm = from._tzm;
  	        }
  	        if (!isUndefined(from._isUTC)) {
  	            to._isUTC = from._isUTC;
  	        }
  	        if (!isUndefined(from._offset)) {
  	            to._offset = from._offset;
  	        }
  	        if (!isUndefined(from._pf)) {
  	            to._pf = getParsingFlags(from);
  	        }
  	        if (!isUndefined(from._locale)) {
  	            to._locale = from._locale;
  	        }

  	        if (momentPropertiesLen > 0) {
  	            for (i = 0; i < momentPropertiesLen; i++) {
  	                prop = momentProperties[i];
  	                val = from[prop];
  	                if (!isUndefined(val)) {
  	                    to[prop] = val;
  	                }
  	            }
  	        }

  	        return to;
  	    }

  	    // Moment prototype object
  	    function Moment(config) {
  	        copyConfig(this, config);
  	        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
  	        if (!this.isValid()) {
  	            this._d = new Date(NaN);
  	        }
  	        // Prevent infinite loop in case updateOffset creates new moment
  	        // objects.
  	        if (updateInProgress === false) {
  	            updateInProgress = true;
  	            hooks.updateOffset(this);
  	            updateInProgress = false;
  	        }
  	    }

  	    function isMoment(obj) {
  	        return (
  	            obj instanceof Moment || (obj != null && obj._isAMomentObject != null)
  	        );
  	    }

  	    function warn(msg) {
  	        if (
  	            hooks.suppressDeprecationWarnings === false &&
  	            typeof console !== 'undefined' &&
  	            console.warn
  	        ) {
  	            console.warn('Deprecation warning: ' + msg);
  	        }
  	    }

  	    function deprecate(msg, fn) {
  	        var firstTime = true;

  	        return extend(function () {
  	            if (hooks.deprecationHandler != null) {
  	                hooks.deprecationHandler(null, msg);
  	            }
  	            if (firstTime) {
  	                var args = [],
  	                    arg,
  	                    i,
  	                    key,
  	                    argLen = arguments.length;
  	                for (i = 0; i < argLen; i++) {
  	                    arg = '';
  	                    if (typeof arguments[i] === 'object') {
  	                        arg += '\n[' + i + '] ';
  	                        for (key in arguments[0]) {
  	                            if (hasOwnProp(arguments[0], key)) {
  	                                arg += key + ': ' + arguments[0][key] + ', ';
  	                            }
  	                        }
  	                        arg = arg.slice(0, -2); // Remove trailing comma and space
  	                    } else {
  	                        arg = arguments[i];
  	                    }
  	                    args.push(arg);
  	                }
  	                warn(
  	                    msg +
  	                        '\nArguments: ' +
  	                        Array.prototype.slice.call(args).join('') +
  	                        '\n' +
  	                        new Error().stack
  	                );
  	                firstTime = false;
  	            }
  	            return fn.apply(this, arguments);
  	        }, fn);
  	    }

  	    var deprecations = {};

  	    function deprecateSimple(name, msg) {
  	        if (hooks.deprecationHandler != null) {
  	            hooks.deprecationHandler(name, msg);
  	        }
  	        if (!deprecations[name]) {
  	            warn(msg);
  	            deprecations[name] = true;
  	        }
  	    }

  	    hooks.suppressDeprecationWarnings = false;
  	    hooks.deprecationHandler = null;

  	    function isFunction(input) {
  	        return (
  	            (typeof Function !== 'undefined' && input instanceof Function) ||
  	            Object.prototype.toString.call(input) === '[object Function]'
  	        );
  	    }

  	    function set(config) {
  	        var prop, i;
  	        for (i in config) {
  	            if (hasOwnProp(config, i)) {
  	                prop = config[i];
  	                if (isFunction(prop)) {
  	                    this[i] = prop;
  	                } else {
  	                    this['_' + i] = prop;
  	                }
  	            }
  	        }
  	        this._config = config;
  	        // Lenient ordinal parsing accepts just a number in addition to
  	        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
  	        // TODO: Remove "ordinalParse" fallback in next major release.
  	        this._dayOfMonthOrdinalParseLenient = new RegExp(
  	            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
  	                '|' +
  	                /\d{1,2}/.source
  	        );
  	    }

  	    function mergeConfigs(parentConfig, childConfig) {
  	        var res = extend({}, parentConfig),
  	            prop;
  	        for (prop in childConfig) {
  	            if (hasOwnProp(childConfig, prop)) {
  	                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
  	                    res[prop] = {};
  	                    extend(res[prop], parentConfig[prop]);
  	                    extend(res[prop], childConfig[prop]);
  	                } else if (childConfig[prop] != null) {
  	                    res[prop] = childConfig[prop];
  	                } else {
  	                    delete res[prop];
  	                }
  	            }
  	        }
  	        for (prop in parentConfig) {
  	            if (
  	                hasOwnProp(parentConfig, prop) &&
  	                !hasOwnProp(childConfig, prop) &&
  	                isObject(parentConfig[prop])
  	            ) {
  	                // make sure changes to properties don't modify parent config
  	                res[prop] = extend({}, res[prop]);
  	            }
  	        }
  	        return res;
  	    }

  	    function Locale(config) {
  	        if (config != null) {
  	            this.set(config);
  	        }
  	    }

  	    var keys;

  	    if (Object.keys) {
  	        keys = Object.keys;
  	    } else {
  	        keys = function (obj) {
  	            var i,
  	                res = [];
  	            for (i in obj) {
  	                if (hasOwnProp(obj, i)) {
  	                    res.push(i);
  	                }
  	            }
  	            return res;
  	        };
  	    }

  	    var defaultCalendar = {
  	        sameDay: '[Today at] LT',
  	        nextDay: '[Tomorrow at] LT',
  	        nextWeek: 'dddd [at] LT',
  	        lastDay: '[Yesterday at] LT',
  	        lastWeek: '[Last] dddd [at] LT',
  	        sameElse: 'L',
  	    };

  	    function calendar(key, mom, now) {
  	        var output = this._calendar[key] || this._calendar['sameElse'];
  	        return isFunction(output) ? output.call(mom, now) : output;
  	    }

  	    function zeroFill(number, targetLength, forceSign) {
  	        var absNumber = '' + Math.abs(number),
  	            zerosToFill = targetLength - absNumber.length,
  	            sign = number >= 0;
  	        return (
  	            (sign ? (forceSign ? '+' : '') : '-') +
  	            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) +
  	            absNumber
  	        );
  	    }

  	    var formattingTokens =
  	            /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
  	        localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
  	        formatFunctions = {},
  	        formatTokenFunctions = {};

  	    // token:    'M'
  	    // padded:   ['MM', 2]
  	    // ordinal:  'Mo'
  	    // callback: function () { this.month() + 1 }
  	    function addFormatToken(token, padded, ordinal, callback) {
  	        var func = callback;
  	        if (typeof callback === 'string') {
  	            func = function () {
  	                return this[callback]();
  	            };
  	        }
  	        if (token) {
  	            formatTokenFunctions[token] = func;
  	        }
  	        if (padded) {
  	            formatTokenFunctions[padded[0]] = function () {
  	                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
  	            };
  	        }
  	        if (ordinal) {
  	            formatTokenFunctions[ordinal] = function () {
  	                return this.localeData().ordinal(
  	                    func.apply(this, arguments),
  	                    token
  	                );
  	            };
  	        }
  	    }

  	    function removeFormattingTokens(input) {
  	        if (input.match(/\[[\s\S]/)) {
  	            return input.replace(/^\[|\]$/g, '');
  	        }
  	        return input.replace(/\\/g, '');
  	    }

  	    function makeFormatFunction(format) {
  	        var array = format.match(formattingTokens),
  	            i,
  	            length;

  	        for (i = 0, length = array.length; i < length; i++) {
  	            if (formatTokenFunctions[array[i]]) {
  	                array[i] = formatTokenFunctions[array[i]];
  	            } else {
  	                array[i] = removeFormattingTokens(array[i]);
  	            }
  	        }

  	        return function (mom) {
  	            var output = '',
  	                i;
  	            for (i = 0; i < length; i++) {
  	                output += isFunction(array[i])
  	                    ? array[i].call(mom, format)
  	                    : array[i];
  	            }
  	            return output;
  	        };
  	    }

  	    // format date using native date object
  	    function formatMoment(m, format) {
  	        if (!m.isValid()) {
  	            return m.localeData().invalidDate();
  	        }

  	        format = expandFormat(format, m.localeData());
  	        formatFunctions[format] =
  	            formatFunctions[format] || makeFormatFunction(format);

  	        return formatFunctions[format](m);
  	    }

  	    function expandFormat(format, locale) {
  	        var i = 5;

  	        function replaceLongDateFormatTokens(input) {
  	            return locale.longDateFormat(input) || input;
  	        }

  	        localFormattingTokens.lastIndex = 0;
  	        while (i >= 0 && localFormattingTokens.test(format)) {
  	            format = format.replace(
  	                localFormattingTokens,
  	                replaceLongDateFormatTokens
  	            );
  	            localFormattingTokens.lastIndex = 0;
  	            i -= 1;
  	        }

  	        return format;
  	    }

  	    var defaultLongDateFormat = {
  	        LTS: 'h:mm:ss A',
  	        LT: 'h:mm A',
  	        L: 'MM/DD/YYYY',
  	        LL: 'MMMM D, YYYY',
  	        LLL: 'MMMM D, YYYY h:mm A',
  	        LLLL: 'dddd, MMMM D, YYYY h:mm A',
  	    };

  	    function longDateFormat(key) {
  	        var format = this._longDateFormat[key],
  	            formatUpper = this._longDateFormat[key.toUpperCase()];

  	        if (format || !formatUpper) {
  	            return format;
  	        }

  	        this._longDateFormat[key] = formatUpper
  	            .match(formattingTokens)
  	            .map(function (tok) {
  	                if (
  	                    tok === 'MMMM' ||
  	                    tok === 'MM' ||
  	                    tok === 'DD' ||
  	                    tok === 'dddd'
  	                ) {
  	                    return tok.slice(1);
  	                }
  	                return tok;
  	            })
  	            .join('');

  	        return this._longDateFormat[key];
  	    }

  	    var defaultInvalidDate = 'Invalid date';

  	    function invalidDate() {
  	        return this._invalidDate;
  	    }

  	    var defaultOrdinal = '%d',
  	        defaultDayOfMonthOrdinalParse = /\d{1,2}/;

  	    function ordinal(number) {
  	        return this._ordinal.replace('%d', number);
  	    }

  	    var defaultRelativeTime = {
  	        future: 'in %s',
  	        past: '%s ago',
  	        s: 'a few seconds',
  	        ss: '%d seconds',
  	        m: 'a minute',
  	        mm: '%d minutes',
  	        h: 'an hour',
  	        hh: '%d hours',
  	        d: 'a day',
  	        dd: '%d days',
  	        w: 'a week',
  	        ww: '%d weeks',
  	        M: 'a month',
  	        MM: '%d months',
  	        y: 'a year',
  	        yy: '%d years',
  	    };

  	    function relativeTime(number, withoutSuffix, string, isFuture) {
  	        var output = this._relativeTime[string];
  	        return isFunction(output)
  	            ? output(number, withoutSuffix, string, isFuture)
  	            : output.replace(/%d/i, number);
  	    }

  	    function pastFuture(diff, output) {
  	        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
  	        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
  	    }

  	    var aliases = {};

  	    function addUnitAlias(unit, shorthand) {
  	        var lowerCase = unit.toLowerCase();
  	        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
  	    }

  	    function normalizeUnits(units) {
  	        return typeof units === 'string'
  	            ? aliases[units] || aliases[units.toLowerCase()]
  	            : undefined;
  	    }

  	    function normalizeObjectUnits(inputObject) {
  	        var normalizedInput = {},
  	            normalizedProp,
  	            prop;

  	        for (prop in inputObject) {
  	            if (hasOwnProp(inputObject, prop)) {
  	                normalizedProp = normalizeUnits(prop);
  	                if (normalizedProp) {
  	                    normalizedInput[normalizedProp] = inputObject[prop];
  	                }
  	            }
  	        }

  	        return normalizedInput;
  	    }

  	    var priorities = {};

  	    function addUnitPriority(unit, priority) {
  	        priorities[unit] = priority;
  	    }

  	    function getPrioritizedUnits(unitsObj) {
  	        var units = [],
  	            u;
  	        for (u in unitsObj) {
  	            if (hasOwnProp(unitsObj, u)) {
  	                units.push({ unit: u, priority: priorities[u] });
  	            }
  	        }
  	        units.sort(function (a, b) {
  	            return a.priority - b.priority;
  	        });
  	        return units;
  	    }

  	    function isLeapYear(year) {
  	        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
  	    }

  	    function absFloor(number) {
  	        if (number < 0) {
  	            // -0 -> 0
  	            return Math.ceil(number) || 0;
  	        } else {
  	            return Math.floor(number);
  	        }
  	    }

  	    function toInt(argumentForCoercion) {
  	        var coercedNumber = +argumentForCoercion,
  	            value = 0;

  	        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
  	            value = absFloor(coercedNumber);
  	        }

  	        return value;
  	    }

  	    function makeGetSet(unit, keepTime) {
  	        return function (value) {
  	            if (value != null) {
  	                set$1(this, unit, value);
  	                hooks.updateOffset(this, keepTime);
  	                return this;
  	            } else {
  	                return get(this, unit);
  	            }
  	        };
  	    }

  	    function get(mom, unit) {
  	        return mom.isValid()
  	            ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]()
  	            : NaN;
  	    }

  	    function set$1(mom, unit, value) {
  	        if (mom.isValid() && !isNaN(value)) {
  	            if (
  	                unit === 'FullYear' &&
  	                isLeapYear(mom.year()) &&
  	                mom.month() === 1 &&
  	                mom.date() === 29
  	            ) {
  	                value = toInt(value);
  	                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](
  	                    value,
  	                    mom.month(),
  	                    daysInMonth(value, mom.month())
  	                );
  	            } else {
  	                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
  	            }
  	        }
  	    }

  	    // MOMENTS

  	    function stringGet(units) {
  	        units = normalizeUnits(units);
  	        if (isFunction(this[units])) {
  	            return this[units]();
  	        }
  	        return this;
  	    }

  	    function stringSet(units, value) {
  	        if (typeof units === 'object') {
  	            units = normalizeObjectUnits(units);
  	            var prioritized = getPrioritizedUnits(units),
  	                i,
  	                prioritizedLen = prioritized.length;
  	            for (i = 0; i < prioritizedLen; i++) {
  	                this[prioritized[i].unit](units[prioritized[i].unit]);
  	            }
  	        } else {
  	            units = normalizeUnits(units);
  	            if (isFunction(this[units])) {
  	                return this[units](value);
  	            }
  	        }
  	        return this;
  	    }

  	    var match1 = /\d/, //       0 - 9
  	        match2 = /\d\d/, //      00 - 99
  	        match3 = /\d{3}/, //     000 - 999
  	        match4 = /\d{4}/, //    0000 - 9999
  	        match6 = /[+-]?\d{6}/, // -999999 - 999999
  	        match1to2 = /\d\d?/, //       0 - 99
  	        match3to4 = /\d\d\d\d?/, //     999 - 9999
  	        match5to6 = /\d\d\d\d\d\d?/, //   99999 - 999999
  	        match1to3 = /\d{1,3}/, //       0 - 999
  	        match1to4 = /\d{1,4}/, //       0 - 9999
  	        match1to6 = /[+-]?\d{1,6}/, // -999999 - 999999
  	        matchUnsigned = /\d+/, //       0 - inf
  	        matchSigned = /[+-]?\d+/, //    -inf - inf
  	        matchOffset = /Z|[+-]\d\d:?\d\d/gi, // +00:00 -00:00 +0000 -0000 or Z
  	        matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, // +00 -00 +00:00 -00:00 +0000 -0000 or Z
  	        matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123
  	        // any word (or two) characters or numbers including two/three word month in arabic.
  	        // includes scottish gaelic two word and hyphenated months
  	        matchWord =
  	            /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,
  	        regexes;

  	    regexes = {};

  	    function addRegexToken(token, regex, strictRegex) {
  	        regexes[token] = isFunction(regex)
  	            ? regex
  	            : function (isStrict, localeData) {
  	                  return isStrict && strictRegex ? strictRegex : regex;
  	              };
  	    }

  	    function getParseRegexForToken(token, config) {
  	        if (!hasOwnProp(regexes, token)) {
  	            return new RegExp(unescapeFormat(token));
  	        }

  	        return regexes[token](config._strict, config._locale);
  	    }

  	    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
  	    function unescapeFormat(s) {
  	        return regexEscape(
  	            s
  	                .replace('\\', '')
  	                .replace(
  	                    /\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,
  	                    function (matched, p1, p2, p3, p4) {
  	                        return p1 || p2 || p3 || p4;
  	                    }
  	                )
  	        );
  	    }

  	    function regexEscape(s) {
  	        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
  	    }

  	    var tokens = {};

  	    function addParseToken(token, callback) {
  	        var i,
  	            func = callback,
  	            tokenLen;
  	        if (typeof token === 'string') {
  	            token = [token];
  	        }
  	        if (isNumber(callback)) {
  	            func = function (input, array) {
  	                array[callback] = toInt(input);
  	            };
  	        }
  	        tokenLen = token.length;
  	        for (i = 0; i < tokenLen; i++) {
  	            tokens[token[i]] = func;
  	        }
  	    }

  	    function addWeekParseToken(token, callback) {
  	        addParseToken(token, function (input, array, config, token) {
  	            config._w = config._w || {};
  	            callback(input, config._w, config, token);
  	        });
  	    }

  	    function addTimeToArrayFromToken(token, input, config) {
  	        if (input != null && hasOwnProp(tokens, token)) {
  	            tokens[token](input, config._a, config, token);
  	        }
  	    }

  	    var YEAR = 0,
  	        MONTH = 1,
  	        DATE = 2,
  	        HOUR = 3,
  	        MINUTE = 4,
  	        SECOND = 5,
  	        MILLISECOND = 6,
  	        WEEK = 7,
  	        WEEKDAY = 8;

  	    function mod(n, x) {
  	        return ((n % x) + x) % x;
  	    }

  	    var indexOf;

  	    if (Array.prototype.indexOf) {
  	        indexOf = Array.prototype.indexOf;
  	    } else {
  	        indexOf = function (o) {
  	            // I know
  	            var i;
  	            for (i = 0; i < this.length; ++i) {
  	                if (this[i] === o) {
  	                    return i;
  	                }
  	            }
  	            return -1;
  	        };
  	    }

  	    function daysInMonth(year, month) {
  	        if (isNaN(year) || isNaN(month)) {
  	            return NaN;
  	        }
  	        var modMonth = mod(month, 12);
  	        year += (month - modMonth) / 12;
  	        return modMonth === 1
  	            ? isLeapYear(year)
  	                ? 29
  	                : 28
  	            : 31 - ((modMonth % 7) % 2);
  	    }

  	    // FORMATTING

  	    addFormatToken('M', ['MM', 2], 'Mo', function () {
  	        return this.month() + 1;
  	    });

  	    addFormatToken('MMM', 0, 0, function (format) {
  	        return this.localeData().monthsShort(this, format);
  	    });

  	    addFormatToken('MMMM', 0, 0, function (format) {
  	        return this.localeData().months(this, format);
  	    });

  	    // ALIASES

  	    addUnitAlias('month', 'M');

  	    // PRIORITY

  	    addUnitPriority('month', 8);

  	    // PARSING

  	    addRegexToken('M', match1to2);
  	    addRegexToken('MM', match1to2, match2);
  	    addRegexToken('MMM', function (isStrict, locale) {
  	        return locale.monthsShortRegex(isStrict);
  	    });
  	    addRegexToken('MMMM', function (isStrict, locale) {
  	        return locale.monthsRegex(isStrict);
  	    });

  	    addParseToken(['M', 'MM'], function (input, array) {
  	        array[MONTH] = toInt(input) - 1;
  	    });

  	    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
  	        var month = config._locale.monthsParse(input, token, config._strict);
  	        // if we didn't find a month name, mark the date as invalid.
  	        if (month != null) {
  	            array[MONTH] = month;
  	        } else {
  	            getParsingFlags(config).invalidMonth = input;
  	        }
  	    });

  	    // LOCALES

  	    var defaultLocaleMonths =
  	            'January_February_March_April_May_June_July_August_September_October_November_December'.split(
  	                '_'
  	            ),
  	        defaultLocaleMonthsShort =
  	            'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
  	        MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
  	        defaultMonthsShortRegex = matchWord,
  	        defaultMonthsRegex = matchWord;

  	    function localeMonths(m, format) {
  	        if (!m) {
  	            return isArray(this._months)
  	                ? this._months
  	                : this._months['standalone'];
  	        }
  	        return isArray(this._months)
  	            ? this._months[m.month()]
  	            : this._months[
  	                  (this._months.isFormat || MONTHS_IN_FORMAT).test(format)
  	                      ? 'format'
  	                      : 'standalone'
  	              ][m.month()];
  	    }

  	    function localeMonthsShort(m, format) {
  	        if (!m) {
  	            return isArray(this._monthsShort)
  	                ? this._monthsShort
  	                : this._monthsShort['standalone'];
  	        }
  	        return isArray(this._monthsShort)
  	            ? this._monthsShort[m.month()]
  	            : this._monthsShort[
  	                  MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'
  	              ][m.month()];
  	    }

  	    function handleStrictParse(monthName, format, strict) {
  	        var i,
  	            ii,
  	            mom,
  	            llc = monthName.toLocaleLowerCase();
  	        if (!this._monthsParse) {
  	            // this is not used
  	            this._monthsParse = [];
  	            this._longMonthsParse = [];
  	            this._shortMonthsParse = [];
  	            for (i = 0; i < 12; ++i) {
  	                mom = createUTC([2000, i]);
  	                this._shortMonthsParse[i] = this.monthsShort(
  	                    mom,
  	                    ''
  	                ).toLocaleLowerCase();
  	                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
  	            }
  	        }

  	        if (strict) {
  	            if (format === 'MMM') {
  	                ii = indexOf.call(this._shortMonthsParse, llc);
  	                return ii !== -1 ? ii : null;
  	            } else {
  	                ii = indexOf.call(this._longMonthsParse, llc);
  	                return ii !== -1 ? ii : null;
  	            }
  	        } else {
  	            if (format === 'MMM') {
  	                ii = indexOf.call(this._shortMonthsParse, llc);
  	                if (ii !== -1) {
  	                    return ii;
  	                }
  	                ii = indexOf.call(this._longMonthsParse, llc);
  	                return ii !== -1 ? ii : null;
  	            } else {
  	                ii = indexOf.call(this._longMonthsParse, llc);
  	                if (ii !== -1) {
  	                    return ii;
  	                }
  	                ii = indexOf.call(this._shortMonthsParse, llc);
  	                return ii !== -1 ? ii : null;
  	            }
  	        }
  	    }

  	    function localeMonthsParse(monthName, format, strict) {
  	        var i, mom, regex;

  	        if (this._monthsParseExact) {
  	            return handleStrictParse.call(this, monthName, format, strict);
  	        }

  	        if (!this._monthsParse) {
  	            this._monthsParse = [];
  	            this._longMonthsParse = [];
  	            this._shortMonthsParse = [];
  	        }

  	        // TODO: add sorting
  	        // Sorting makes sure if one month (or abbr) is a prefix of another
  	        // see sorting in computeMonthsParse
  	        for (i = 0; i < 12; i++) {
  	            // make the regex if we don't have it already
  	            mom = createUTC([2000, i]);
  	            if (strict && !this._longMonthsParse[i]) {
  	                this._longMonthsParse[i] = new RegExp(
  	                    '^' + this.months(mom, '').replace('.', '') + '$',
  	                    'i'
  	                );
  	                this._shortMonthsParse[i] = new RegExp(
  	                    '^' + this.monthsShort(mom, '').replace('.', '') + '$',
  	                    'i'
  	                );
  	            }
  	            if (!strict && !this._monthsParse[i]) {
  	                regex =
  	                    '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
  	                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
  	            }
  	            // test the regex
  	            if (
  	                strict &&
  	                format === 'MMMM' &&
  	                this._longMonthsParse[i].test(monthName)
  	            ) {
  	                return i;
  	            } else if (
  	                strict &&
  	                format === 'MMM' &&
  	                this._shortMonthsParse[i].test(monthName)
  	            ) {
  	                return i;
  	            } else if (!strict && this._monthsParse[i].test(monthName)) {
  	                return i;
  	            }
  	        }
  	    }

  	    // MOMENTS

  	    function setMonth(mom, value) {
  	        var dayOfMonth;

  	        if (!mom.isValid()) {
  	            // No op
  	            return mom;
  	        }

  	        if (typeof value === 'string') {
  	            if (/^\d+$/.test(value)) {
  	                value = toInt(value);
  	            } else {
  	                value = mom.localeData().monthsParse(value);
  	                // TODO: Another silent failure?
  	                if (!isNumber(value)) {
  	                    return mom;
  	                }
  	            }
  	        }

  	        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
  	        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
  	        return mom;
  	    }

  	    function getSetMonth(value) {
  	        if (value != null) {
  	            setMonth(this, value);
  	            hooks.updateOffset(this, true);
  	            return this;
  	        } else {
  	            return get(this, 'Month');
  	        }
  	    }

  	    function getDaysInMonth() {
  	        return daysInMonth(this.year(), this.month());
  	    }

  	    function monthsShortRegex(isStrict) {
  	        if (this._monthsParseExact) {
  	            if (!hasOwnProp(this, '_monthsRegex')) {
  	                computeMonthsParse.call(this);
  	            }
  	            if (isStrict) {
  	                return this._monthsShortStrictRegex;
  	            } else {
  	                return this._monthsShortRegex;
  	            }
  	        } else {
  	            if (!hasOwnProp(this, '_monthsShortRegex')) {
  	                this._monthsShortRegex = defaultMonthsShortRegex;
  	            }
  	            return this._monthsShortStrictRegex && isStrict
  	                ? this._monthsShortStrictRegex
  	                : this._monthsShortRegex;
  	        }
  	    }

  	    function monthsRegex(isStrict) {
  	        if (this._monthsParseExact) {
  	            if (!hasOwnProp(this, '_monthsRegex')) {
  	                computeMonthsParse.call(this);
  	            }
  	            if (isStrict) {
  	                return this._monthsStrictRegex;
  	            } else {
  	                return this._monthsRegex;
  	            }
  	        } else {
  	            if (!hasOwnProp(this, '_monthsRegex')) {
  	                this._monthsRegex = defaultMonthsRegex;
  	            }
  	            return this._monthsStrictRegex && isStrict
  	                ? this._monthsStrictRegex
  	                : this._monthsRegex;
  	        }
  	    }

  	    function computeMonthsParse() {
  	        function cmpLenRev(a, b) {
  	            return b.length - a.length;
  	        }

  	        var shortPieces = [],
  	            longPieces = [],
  	            mixedPieces = [],
  	            i,
  	            mom;
  	        for (i = 0; i < 12; i++) {
  	            // make the regex if we don't have it already
  	            mom = createUTC([2000, i]);
  	            shortPieces.push(this.monthsShort(mom, ''));
  	            longPieces.push(this.months(mom, ''));
  	            mixedPieces.push(this.months(mom, ''));
  	            mixedPieces.push(this.monthsShort(mom, ''));
  	        }
  	        // Sorting makes sure if one month (or abbr) is a prefix of another it
  	        // will match the longer piece.
  	        shortPieces.sort(cmpLenRev);
  	        longPieces.sort(cmpLenRev);
  	        mixedPieces.sort(cmpLenRev);
  	        for (i = 0; i < 12; i++) {
  	            shortPieces[i] = regexEscape(shortPieces[i]);
  	            longPieces[i] = regexEscape(longPieces[i]);
  	        }
  	        for (i = 0; i < 24; i++) {
  	            mixedPieces[i] = regexEscape(mixedPieces[i]);
  	        }

  	        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
  	        this._monthsShortRegex = this._monthsRegex;
  	        this._monthsStrictRegex = new RegExp(
  	            '^(' + longPieces.join('|') + ')',
  	            'i'
  	        );
  	        this._monthsShortStrictRegex = new RegExp(
  	            '^(' + shortPieces.join('|') + ')',
  	            'i'
  	        );
  	    }

  	    // FORMATTING

  	    addFormatToken('Y', 0, 0, function () {
  	        var y = this.year();
  	        return y <= 9999 ? zeroFill(y, 4) : '+' + y;
  	    });

  	    addFormatToken(0, ['YY', 2], 0, function () {
  	        return this.year() % 100;
  	    });

  	    addFormatToken(0, ['YYYY', 4], 0, 'year');
  	    addFormatToken(0, ['YYYYY', 5], 0, 'year');
  	    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

  	    // ALIASES

  	    addUnitAlias('year', 'y');

  	    // PRIORITIES

  	    addUnitPriority('year', 1);

  	    // PARSING

  	    addRegexToken('Y', matchSigned);
  	    addRegexToken('YY', match1to2, match2);
  	    addRegexToken('YYYY', match1to4, match4);
  	    addRegexToken('YYYYY', match1to6, match6);
  	    addRegexToken('YYYYYY', match1to6, match6);

  	    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
  	    addParseToken('YYYY', function (input, array) {
  	        array[YEAR] =
  	            input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
  	    });
  	    addParseToken('YY', function (input, array) {
  	        array[YEAR] = hooks.parseTwoDigitYear(input);
  	    });
  	    addParseToken('Y', function (input, array) {
  	        array[YEAR] = parseInt(input, 10);
  	    });

  	    // HELPERS

  	    function daysInYear(year) {
  	        return isLeapYear(year) ? 366 : 365;
  	    }

  	    // HOOKS

  	    hooks.parseTwoDigitYear = function (input) {
  	        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
  	    };

  	    // MOMENTS

  	    var getSetYear = makeGetSet('FullYear', true);

  	    function getIsLeapYear() {
  	        return isLeapYear(this.year());
  	    }

  	    function createDate(y, m, d, h, M, s, ms) {
  	        // can't just apply() to create a date:
  	        // https://stackoverflow.com/q/181348
  	        var date;
  	        // the date constructor remaps years 0-99 to 1900-1999
  	        if (y < 100 && y >= 0) {
  	            // preserve leap years using a full 400 year cycle, then reset
  	            date = new Date(y + 400, m, d, h, M, s, ms);
  	            if (isFinite(date.getFullYear())) {
  	                date.setFullYear(y);
  	            }
  	        } else {
  	            date = new Date(y, m, d, h, M, s, ms);
  	        }

  	        return date;
  	    }

  	    function createUTCDate(y) {
  	        var date, args;
  	        // the Date.UTC function remaps years 0-99 to 1900-1999
  	        if (y < 100 && y >= 0) {
  	            args = Array.prototype.slice.call(arguments);
  	            // preserve leap years using a full 400 year cycle, then reset
  	            args[0] = y + 400;
  	            date = new Date(Date.UTC.apply(null, args));
  	            if (isFinite(date.getUTCFullYear())) {
  	                date.setUTCFullYear(y);
  	            }
  	        } else {
  	            date = new Date(Date.UTC.apply(null, arguments));
  	        }

  	        return date;
  	    }

  	    // start-of-first-week - start-of-year
  	    function firstWeekOffset(year, dow, doy) {
  	        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
  	            fwd = 7 + dow - doy,
  	            // first-week day local weekday -- which local weekday is fwd
  	            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

  	        return -fwdlw + fwd - 1;
  	    }

  	    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
  	    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
  	        var localWeekday = (7 + weekday - dow) % 7,
  	            weekOffset = firstWeekOffset(year, dow, doy),
  	            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
  	            resYear,
  	            resDayOfYear;

  	        if (dayOfYear <= 0) {
  	            resYear = year - 1;
  	            resDayOfYear = daysInYear(resYear) + dayOfYear;
  	        } else if (dayOfYear > daysInYear(year)) {
  	            resYear = year + 1;
  	            resDayOfYear = dayOfYear - daysInYear(year);
  	        } else {
  	            resYear = year;
  	            resDayOfYear = dayOfYear;
  	        }

  	        return {
  	            year: resYear,
  	            dayOfYear: resDayOfYear,
  	        };
  	    }

  	    function weekOfYear(mom, dow, doy) {
  	        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
  	            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
  	            resWeek,
  	            resYear;

  	        if (week < 1) {
  	            resYear = mom.year() - 1;
  	            resWeek = week + weeksInYear(resYear, dow, doy);
  	        } else if (week > weeksInYear(mom.year(), dow, doy)) {
  	            resWeek = week - weeksInYear(mom.year(), dow, doy);
  	            resYear = mom.year() + 1;
  	        } else {
  	            resYear = mom.year();
  	            resWeek = week;
  	        }

  	        return {
  	            week: resWeek,
  	            year: resYear,
  	        };
  	    }

  	    function weeksInYear(year, dow, doy) {
  	        var weekOffset = firstWeekOffset(year, dow, doy),
  	            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
  	        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
  	    }

  	    // FORMATTING

  	    addFormatToken('w', ['ww', 2], 'wo', 'week');
  	    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

  	    // ALIASES

  	    addUnitAlias('week', 'w');
  	    addUnitAlias('isoWeek', 'W');

  	    // PRIORITIES

  	    addUnitPriority('week', 5);
  	    addUnitPriority('isoWeek', 5);

  	    // PARSING

  	    addRegexToken('w', match1to2);
  	    addRegexToken('ww', match1to2, match2);
  	    addRegexToken('W', match1to2);
  	    addRegexToken('WW', match1to2, match2);

  	    addWeekParseToken(
  	        ['w', 'ww', 'W', 'WW'],
  	        function (input, week, config, token) {
  	            week[token.substr(0, 1)] = toInt(input);
  	        }
  	    );

  	    // HELPERS

  	    // LOCALES

  	    function localeWeek(mom) {
  	        return weekOfYear(mom, this._week.dow, this._week.doy).week;
  	    }

  	    var defaultLocaleWeek = {
  	        dow: 0, // Sunday is the first day of the week.
  	        doy: 6, // The week that contains Jan 6th is the first week of the year.
  	    };

  	    function localeFirstDayOfWeek() {
  	        return this._week.dow;
  	    }

  	    function localeFirstDayOfYear() {
  	        return this._week.doy;
  	    }

  	    // MOMENTS

  	    function getSetWeek(input) {
  	        var week = this.localeData().week(this);
  	        return input == null ? week : this.add((input - week) * 7, 'd');
  	    }

  	    function getSetISOWeek(input) {
  	        var week = weekOfYear(this, 1, 4).week;
  	        return input == null ? week : this.add((input - week) * 7, 'd');
  	    }

  	    // FORMATTING

  	    addFormatToken('d', 0, 'do', 'day');

  	    addFormatToken('dd', 0, 0, function (format) {
  	        return this.localeData().weekdaysMin(this, format);
  	    });

  	    addFormatToken('ddd', 0, 0, function (format) {
  	        return this.localeData().weekdaysShort(this, format);
  	    });

  	    addFormatToken('dddd', 0, 0, function (format) {
  	        return this.localeData().weekdays(this, format);
  	    });

  	    addFormatToken('e', 0, 0, 'weekday');
  	    addFormatToken('E', 0, 0, 'isoWeekday');

  	    // ALIASES

  	    addUnitAlias('day', 'd');
  	    addUnitAlias('weekday', 'e');
  	    addUnitAlias('isoWeekday', 'E');

  	    // PRIORITY
  	    addUnitPriority('day', 11);
  	    addUnitPriority('weekday', 11);
  	    addUnitPriority('isoWeekday', 11);

  	    // PARSING

  	    addRegexToken('d', match1to2);
  	    addRegexToken('e', match1to2);
  	    addRegexToken('E', match1to2);
  	    addRegexToken('dd', function (isStrict, locale) {
  	        return locale.weekdaysMinRegex(isStrict);
  	    });
  	    addRegexToken('ddd', function (isStrict, locale) {
  	        return locale.weekdaysShortRegex(isStrict);
  	    });
  	    addRegexToken('dddd', function (isStrict, locale) {
  	        return locale.weekdaysRegex(isStrict);
  	    });

  	    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
  	        var weekday = config._locale.weekdaysParse(input, token, config._strict);
  	        // if we didn't get a weekday name, mark the date as invalid
  	        if (weekday != null) {
  	            week.d = weekday;
  	        } else {
  	            getParsingFlags(config).invalidWeekday = input;
  	        }
  	    });

  	    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
  	        week[token] = toInt(input);
  	    });

  	    // HELPERS

  	    function parseWeekday(input, locale) {
  	        if (typeof input !== 'string') {
  	            return input;
  	        }

  	        if (!isNaN(input)) {
  	            return parseInt(input, 10);
  	        }

  	        input = locale.weekdaysParse(input);
  	        if (typeof input === 'number') {
  	            return input;
  	        }

  	        return null;
  	    }

  	    function parseIsoWeekday(input, locale) {
  	        if (typeof input === 'string') {
  	            return locale.weekdaysParse(input) % 7 || 7;
  	        }
  	        return isNaN(input) ? null : input;
  	    }

  	    // LOCALES
  	    function shiftWeekdays(ws, n) {
  	        return ws.slice(n, 7).concat(ws.slice(0, n));
  	    }

  	    var defaultLocaleWeekdays =
  	            'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
  	        defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
  	        defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
  	        defaultWeekdaysRegex = matchWord,
  	        defaultWeekdaysShortRegex = matchWord,
  	        defaultWeekdaysMinRegex = matchWord;

  	    function localeWeekdays(m, format) {
  	        var weekdays = isArray(this._weekdays)
  	            ? this._weekdays
  	            : this._weekdays[
  	                  m && m !== true && this._weekdays.isFormat.test(format)
  	                      ? 'format'
  	                      : 'standalone'
  	              ];
  	        return m === true
  	            ? shiftWeekdays(weekdays, this._week.dow)
  	            : m
  	            ? weekdays[m.day()]
  	            : weekdays;
  	    }

  	    function localeWeekdaysShort(m) {
  	        return m === true
  	            ? shiftWeekdays(this._weekdaysShort, this._week.dow)
  	            : m
  	            ? this._weekdaysShort[m.day()]
  	            : this._weekdaysShort;
  	    }

  	    function localeWeekdaysMin(m) {
  	        return m === true
  	            ? shiftWeekdays(this._weekdaysMin, this._week.dow)
  	            : m
  	            ? this._weekdaysMin[m.day()]
  	            : this._weekdaysMin;
  	    }

  	    function handleStrictParse$1(weekdayName, format, strict) {
  	        var i,
  	            ii,
  	            mom,
  	            llc = weekdayName.toLocaleLowerCase();
  	        if (!this._weekdaysParse) {
  	            this._weekdaysParse = [];
  	            this._shortWeekdaysParse = [];
  	            this._minWeekdaysParse = [];

  	            for (i = 0; i < 7; ++i) {
  	                mom = createUTC([2000, 1]).day(i);
  	                this._minWeekdaysParse[i] = this.weekdaysMin(
  	                    mom,
  	                    ''
  	                ).toLocaleLowerCase();
  	                this._shortWeekdaysParse[i] = this.weekdaysShort(
  	                    mom,
  	                    ''
  	                ).toLocaleLowerCase();
  	                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
  	            }
  	        }

  	        if (strict) {
  	            if (format === 'dddd') {
  	                ii = indexOf.call(this._weekdaysParse, llc);
  	                return ii !== -1 ? ii : null;
  	            } else if (format === 'ddd') {
  	                ii = indexOf.call(this._shortWeekdaysParse, llc);
  	                return ii !== -1 ? ii : null;
  	            } else {
  	                ii = indexOf.call(this._minWeekdaysParse, llc);
  	                return ii !== -1 ? ii : null;
  	            }
  	        } else {
  	            if (format === 'dddd') {
  	                ii = indexOf.call(this._weekdaysParse, llc);
  	                if (ii !== -1) {
  	                    return ii;
  	                }
  	                ii = indexOf.call(this._shortWeekdaysParse, llc);
  	                if (ii !== -1) {
  	                    return ii;
  	                }
  	                ii = indexOf.call(this._minWeekdaysParse, llc);
  	                return ii !== -1 ? ii : null;
  	            } else if (format === 'ddd') {
  	                ii = indexOf.call(this._shortWeekdaysParse, llc);
  	                if (ii !== -1) {
  	                    return ii;
  	                }
  	                ii = indexOf.call(this._weekdaysParse, llc);
  	                if (ii !== -1) {
  	                    return ii;
  	                }
  	                ii = indexOf.call(this._minWeekdaysParse, llc);
  	                return ii !== -1 ? ii : null;
  	            } else {
  	                ii = indexOf.call(this._minWeekdaysParse, llc);
  	                if (ii !== -1) {
  	                    return ii;
  	                }
  	                ii = indexOf.call(this._weekdaysParse, llc);
  	                if (ii !== -1) {
  	                    return ii;
  	                }
  	                ii = indexOf.call(this._shortWeekdaysParse, llc);
  	                return ii !== -1 ? ii : null;
  	            }
  	        }
  	    }

  	    function localeWeekdaysParse(weekdayName, format, strict) {
  	        var i, mom, regex;

  	        if (this._weekdaysParseExact) {
  	            return handleStrictParse$1.call(this, weekdayName, format, strict);
  	        }

  	        if (!this._weekdaysParse) {
  	            this._weekdaysParse = [];
  	            this._minWeekdaysParse = [];
  	            this._shortWeekdaysParse = [];
  	            this._fullWeekdaysParse = [];
  	        }

  	        for (i = 0; i < 7; i++) {
  	            // make the regex if we don't have it already

  	            mom = createUTC([2000, 1]).day(i);
  	            if (strict && !this._fullWeekdaysParse[i]) {
  	                this._fullWeekdaysParse[i] = new RegExp(
  	                    '^' + this.weekdays(mom, '').replace('.', '\\.?') + '$',
  	                    'i'
  	                );
  	                this._shortWeekdaysParse[i] = new RegExp(
  	                    '^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$',
  	                    'i'
  	                );
  	                this._minWeekdaysParse[i] = new RegExp(
  	                    '^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$',
  	                    'i'
  	                );
  	            }
  	            if (!this._weekdaysParse[i]) {
  	                regex =
  	                    '^' +
  	                    this.weekdays(mom, '') +
  	                    '|^' +
  	                    this.weekdaysShort(mom, '') +
  	                    '|^' +
  	                    this.weekdaysMin(mom, '');
  	                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
  	            }
  	            // test the regex
  	            if (
  	                strict &&
  	                format === 'dddd' &&
  	                this._fullWeekdaysParse[i].test(weekdayName)
  	            ) {
  	                return i;
  	            } else if (
  	                strict &&
  	                format === 'ddd' &&
  	                this._shortWeekdaysParse[i].test(weekdayName)
  	            ) {
  	                return i;
  	            } else if (
  	                strict &&
  	                format === 'dd' &&
  	                this._minWeekdaysParse[i].test(weekdayName)
  	            ) {
  	                return i;
  	            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
  	                return i;
  	            }
  	        }
  	    }

  	    // MOMENTS

  	    function getSetDayOfWeek(input) {
  	        if (!this.isValid()) {
  	            return input != null ? this : NaN;
  	        }
  	        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
  	        if (input != null) {
  	            input = parseWeekday(input, this.localeData());
  	            return this.add(input - day, 'd');
  	        } else {
  	            return day;
  	        }
  	    }

  	    function getSetLocaleDayOfWeek(input) {
  	        if (!this.isValid()) {
  	            return input != null ? this : NaN;
  	        }
  	        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
  	        return input == null ? weekday : this.add(input - weekday, 'd');
  	    }

  	    function getSetISODayOfWeek(input) {
  	        if (!this.isValid()) {
  	            return input != null ? this : NaN;
  	        }

  	        // behaves the same as moment#day except
  	        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
  	        // as a setter, sunday should belong to the previous week.

  	        if (input != null) {
  	            var weekday = parseIsoWeekday(input, this.localeData());
  	            return this.day(this.day() % 7 ? weekday : weekday - 7);
  	        } else {
  	            return this.day() || 7;
  	        }
  	    }

  	    function weekdaysRegex(isStrict) {
  	        if (this._weekdaysParseExact) {
  	            if (!hasOwnProp(this, '_weekdaysRegex')) {
  	                computeWeekdaysParse.call(this);
  	            }
  	            if (isStrict) {
  	                return this._weekdaysStrictRegex;
  	            } else {
  	                return this._weekdaysRegex;
  	            }
  	        } else {
  	            if (!hasOwnProp(this, '_weekdaysRegex')) {
  	                this._weekdaysRegex = defaultWeekdaysRegex;
  	            }
  	            return this._weekdaysStrictRegex && isStrict
  	                ? this._weekdaysStrictRegex
  	                : this._weekdaysRegex;
  	        }
  	    }

  	    function weekdaysShortRegex(isStrict) {
  	        if (this._weekdaysParseExact) {
  	            if (!hasOwnProp(this, '_weekdaysRegex')) {
  	                computeWeekdaysParse.call(this);
  	            }
  	            if (isStrict) {
  	                return this._weekdaysShortStrictRegex;
  	            } else {
  	                return this._weekdaysShortRegex;
  	            }
  	        } else {
  	            if (!hasOwnProp(this, '_weekdaysShortRegex')) {
  	                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
  	            }
  	            return this._weekdaysShortStrictRegex && isStrict
  	                ? this._weekdaysShortStrictRegex
  	                : this._weekdaysShortRegex;
  	        }
  	    }

  	    function weekdaysMinRegex(isStrict) {
  	        if (this._weekdaysParseExact) {
  	            if (!hasOwnProp(this, '_weekdaysRegex')) {
  	                computeWeekdaysParse.call(this);
  	            }
  	            if (isStrict) {
  	                return this._weekdaysMinStrictRegex;
  	            } else {
  	                return this._weekdaysMinRegex;
  	            }
  	        } else {
  	            if (!hasOwnProp(this, '_weekdaysMinRegex')) {
  	                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
  	            }
  	            return this._weekdaysMinStrictRegex && isStrict
  	                ? this._weekdaysMinStrictRegex
  	                : this._weekdaysMinRegex;
  	        }
  	    }

  	    function computeWeekdaysParse() {
  	        function cmpLenRev(a, b) {
  	            return b.length - a.length;
  	        }

  	        var minPieces = [],
  	            shortPieces = [],
  	            longPieces = [],
  	            mixedPieces = [],
  	            i,
  	            mom,
  	            minp,
  	            shortp,
  	            longp;
  	        for (i = 0; i < 7; i++) {
  	            // make the regex if we don't have it already
  	            mom = createUTC([2000, 1]).day(i);
  	            minp = regexEscape(this.weekdaysMin(mom, ''));
  	            shortp = regexEscape(this.weekdaysShort(mom, ''));
  	            longp = regexEscape(this.weekdays(mom, ''));
  	            minPieces.push(minp);
  	            shortPieces.push(shortp);
  	            longPieces.push(longp);
  	            mixedPieces.push(minp);
  	            mixedPieces.push(shortp);
  	            mixedPieces.push(longp);
  	        }
  	        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
  	        // will match the longer piece.
  	        minPieces.sort(cmpLenRev);
  	        shortPieces.sort(cmpLenRev);
  	        longPieces.sort(cmpLenRev);
  	        mixedPieces.sort(cmpLenRev);

  	        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
  	        this._weekdaysShortRegex = this._weekdaysRegex;
  	        this._weekdaysMinRegex = this._weekdaysRegex;

  	        this._weekdaysStrictRegex = new RegExp(
  	            '^(' + longPieces.join('|') + ')',
  	            'i'
  	        );
  	        this._weekdaysShortStrictRegex = new RegExp(
  	            '^(' + shortPieces.join('|') + ')',
  	            'i'
  	        );
  	        this._weekdaysMinStrictRegex = new RegExp(
  	            '^(' + minPieces.join('|') + ')',
  	            'i'
  	        );
  	    }

  	    // FORMATTING

  	    function hFormat() {
  	        return this.hours() % 12 || 12;
  	    }

  	    function kFormat() {
  	        return this.hours() || 24;
  	    }

  	    addFormatToken('H', ['HH', 2], 0, 'hour');
  	    addFormatToken('h', ['hh', 2], 0, hFormat);
  	    addFormatToken('k', ['kk', 2], 0, kFormat);

  	    addFormatToken('hmm', 0, 0, function () {
  	        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
  	    });

  	    addFormatToken('hmmss', 0, 0, function () {
  	        return (
  	            '' +
  	            hFormat.apply(this) +
  	            zeroFill(this.minutes(), 2) +
  	            zeroFill(this.seconds(), 2)
  	        );
  	    });

  	    addFormatToken('Hmm', 0, 0, function () {
  	        return '' + this.hours() + zeroFill(this.minutes(), 2);
  	    });

  	    addFormatToken('Hmmss', 0, 0, function () {
  	        return (
  	            '' +
  	            this.hours() +
  	            zeroFill(this.minutes(), 2) +
  	            zeroFill(this.seconds(), 2)
  	        );
  	    });

  	    function meridiem(token, lowercase) {
  	        addFormatToken(token, 0, 0, function () {
  	            return this.localeData().meridiem(
  	                this.hours(),
  	                this.minutes(),
  	                lowercase
  	            );
  	        });
  	    }

  	    meridiem('a', true);
  	    meridiem('A', false);

  	    // ALIASES

  	    addUnitAlias('hour', 'h');

  	    // PRIORITY
  	    addUnitPriority('hour', 13);

  	    // PARSING

  	    function matchMeridiem(isStrict, locale) {
  	        return locale._meridiemParse;
  	    }

  	    addRegexToken('a', matchMeridiem);
  	    addRegexToken('A', matchMeridiem);
  	    addRegexToken('H', match1to2);
  	    addRegexToken('h', match1to2);
  	    addRegexToken('k', match1to2);
  	    addRegexToken('HH', match1to2, match2);
  	    addRegexToken('hh', match1to2, match2);
  	    addRegexToken('kk', match1to2, match2);

  	    addRegexToken('hmm', match3to4);
  	    addRegexToken('hmmss', match5to6);
  	    addRegexToken('Hmm', match3to4);
  	    addRegexToken('Hmmss', match5to6);

  	    addParseToken(['H', 'HH'], HOUR);
  	    addParseToken(['k', 'kk'], function (input, array, config) {
  	        var kInput = toInt(input);
  	        array[HOUR] = kInput === 24 ? 0 : kInput;
  	    });
  	    addParseToken(['a', 'A'], function (input, array, config) {
  	        config._isPm = config._locale.isPM(input);
  	        config._meridiem = input;
  	    });
  	    addParseToken(['h', 'hh'], function (input, array, config) {
  	        array[HOUR] = toInt(input);
  	        getParsingFlags(config).bigHour = true;
  	    });
  	    addParseToken('hmm', function (input, array, config) {
  	        var pos = input.length - 2;
  	        array[HOUR] = toInt(input.substr(0, pos));
  	        array[MINUTE] = toInt(input.substr(pos));
  	        getParsingFlags(config).bigHour = true;
  	    });
  	    addParseToken('hmmss', function (input, array, config) {
  	        var pos1 = input.length - 4,
  	            pos2 = input.length - 2;
  	        array[HOUR] = toInt(input.substr(0, pos1));
  	        array[MINUTE] = toInt(input.substr(pos1, 2));
  	        array[SECOND] = toInt(input.substr(pos2));
  	        getParsingFlags(config).bigHour = true;
  	    });
  	    addParseToken('Hmm', function (input, array, config) {
  	        var pos = input.length - 2;
  	        array[HOUR] = toInt(input.substr(0, pos));
  	        array[MINUTE] = toInt(input.substr(pos));
  	    });
  	    addParseToken('Hmmss', function (input, array, config) {
  	        var pos1 = input.length - 4,
  	            pos2 = input.length - 2;
  	        array[HOUR] = toInt(input.substr(0, pos1));
  	        array[MINUTE] = toInt(input.substr(pos1, 2));
  	        array[SECOND] = toInt(input.substr(pos2));
  	    });

  	    // LOCALES

  	    function localeIsPM(input) {
  	        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
  	        // Using charAt should be more compatible.
  	        return (input + '').toLowerCase().charAt(0) === 'p';
  	    }

  	    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i,
  	        // Setting the hour should keep the time, because the user explicitly
  	        // specified which hour they want. So trying to maintain the same hour (in
  	        // a new timezone) makes sense. Adding/subtracting hours does not follow
  	        // this rule.
  	        getSetHour = makeGetSet('Hours', true);

  	    function localeMeridiem(hours, minutes, isLower) {
  	        if (hours > 11) {
  	            return isLower ? 'pm' : 'PM';
  	        } else {
  	            return isLower ? 'am' : 'AM';
  	        }
  	    }

  	    var baseConfig = {
  	        calendar: defaultCalendar,
  	        longDateFormat: defaultLongDateFormat,
  	        invalidDate: defaultInvalidDate,
  	        ordinal: defaultOrdinal,
  	        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
  	        relativeTime: defaultRelativeTime,

  	        months: defaultLocaleMonths,
  	        monthsShort: defaultLocaleMonthsShort,

  	        week: defaultLocaleWeek,

  	        weekdays: defaultLocaleWeekdays,
  	        weekdaysMin: defaultLocaleWeekdaysMin,
  	        weekdaysShort: defaultLocaleWeekdaysShort,

  	        meridiemParse: defaultLocaleMeridiemParse,
  	    };

  	    // internal storage for locale config files
  	    var locales = {},
  	        localeFamilies = {},
  	        globalLocale;

  	    function commonPrefix(arr1, arr2) {
  	        var i,
  	            minl = Math.min(arr1.length, arr2.length);
  	        for (i = 0; i < minl; i += 1) {
  	            if (arr1[i] !== arr2[i]) {
  	                return i;
  	            }
  	        }
  	        return minl;
  	    }

  	    function normalizeLocale(key) {
  	        return key ? key.toLowerCase().replace('_', '-') : key;
  	    }

  	    // pick the locale from the array
  	    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
  	    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
  	    function chooseLocale(names) {
  	        var i = 0,
  	            j,
  	            next,
  	            locale,
  	            split;

  	        while (i < names.length) {
  	            split = normalizeLocale(names[i]).split('-');
  	            j = split.length;
  	            next = normalizeLocale(names[i + 1]);
  	            next = next ? next.split('-') : null;
  	            while (j > 0) {
  	                locale = loadLocale(split.slice(0, j).join('-'));
  	                if (locale) {
  	                    return locale;
  	                }
  	                if (
  	                    next &&
  	                    next.length >= j &&
  	                    commonPrefix(split, next) >= j - 1
  	                ) {
  	                    //the next array item is better than a shallower substring of this one
  	                    break;
  	                }
  	                j--;
  	            }
  	            i++;
  	        }
  	        return globalLocale;
  	    }

  	    function isLocaleNameSane(name) {
  	        // Prevent names that look like filesystem paths, i.e contain '/' or '\'
  	        return name.match('^[^/\\\\]*$') != null;
  	    }

  	    function loadLocale(name) {
  	        var oldLocale = null,
  	            aliasedRequire;
  	        // TODO: Find a better way to register and load all the locales in Node
  	        if (
  	            locales[name] === undefined &&
  	            'object' !== 'undefined' &&
  	            module &&
  	            module.exports &&
  	            isLocaleNameSane(name)
  	        ) {
  	            try {
  	                oldLocale = globalLocale._abbr;
  	                aliasedRequire = commonjsRequire;
  	                aliasedRequire('./locale/' + name);
  	                getSetGlobalLocale(oldLocale);
  	            } catch (e) {
  	                // mark as not found to avoid repeating expensive file require call causing high CPU
  	                // when trying to find en-US, en_US, en-us for every format call
  	                locales[name] = null; // null means not found
  	            }
  	        }
  	        return locales[name];
  	    }

  	    // This function will load locale and then set the global locale.  If
  	    // no arguments are passed in, it will simply return the current global
  	    // locale key.
  	    function getSetGlobalLocale(key, values) {
  	        var data;
  	        if (key) {
  	            if (isUndefined(values)) {
  	                data = getLocale(key);
  	            } else {
  	                data = defineLocale(key, values);
  	            }

  	            if (data) {
  	                // moment.duration._locale = moment._locale = data;
  	                globalLocale = data;
  	            } else {
  	                if (typeof console !== 'undefined' && console.warn) {
  	                    //warn user if arguments are passed but the locale could not be set
  	                    console.warn(
  	                        'Locale ' + key + ' not found. Did you forget to load it?'
  	                    );
  	                }
  	            }
  	        }

  	        return globalLocale._abbr;
  	    }

  	    function defineLocale(name, config) {
  	        if (config !== null) {
  	            var locale,
  	                parentConfig = baseConfig;
  	            config.abbr = name;
  	            if (locales[name] != null) {
  	                deprecateSimple(
  	                    'defineLocaleOverride',
  	                    'use moment.updateLocale(localeName, config) to change ' +
  	                        'an existing locale. moment.defineLocale(localeName, ' +
  	                        'config) should only be used for creating a new locale ' +
  	                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.'
  	                );
  	                parentConfig = locales[name]._config;
  	            } else if (config.parentLocale != null) {
  	                if (locales[config.parentLocale] != null) {
  	                    parentConfig = locales[config.parentLocale]._config;
  	                } else {
  	                    locale = loadLocale(config.parentLocale);
  	                    if (locale != null) {
  	                        parentConfig = locale._config;
  	                    } else {
  	                        if (!localeFamilies[config.parentLocale]) {
  	                            localeFamilies[config.parentLocale] = [];
  	                        }
  	                        localeFamilies[config.parentLocale].push({
  	                            name: name,
  	                            config: config,
  	                        });
  	                        return null;
  	                    }
  	                }
  	            }
  	            locales[name] = new Locale(mergeConfigs(parentConfig, config));

  	            if (localeFamilies[name]) {
  	                localeFamilies[name].forEach(function (x) {
  	                    defineLocale(x.name, x.config);
  	                });
  	            }

  	            // backwards compat for now: also set the locale
  	            // make sure we set the locale AFTER all child locales have been
  	            // created, so we won't end up with the child locale set.
  	            getSetGlobalLocale(name);

  	            return locales[name];
  	        } else {
  	            // useful for testing
  	            delete locales[name];
  	            return null;
  	        }
  	    }

  	    function updateLocale(name, config) {
  	        if (config != null) {
  	            var locale,
  	                tmpLocale,
  	                parentConfig = baseConfig;

  	            if (locales[name] != null && locales[name].parentLocale != null) {
  	                // Update existing child locale in-place to avoid memory-leaks
  	                locales[name].set(mergeConfigs(locales[name]._config, config));
  	            } else {
  	                // MERGE
  	                tmpLocale = loadLocale(name);
  	                if (tmpLocale != null) {
  	                    parentConfig = tmpLocale._config;
  	                }
  	                config = mergeConfigs(parentConfig, config);
  	                if (tmpLocale == null) {
  	                    // updateLocale is called for creating a new locale
  	                    // Set abbr so it will have a name (getters return
  	                    // undefined otherwise).
  	                    config.abbr = name;
  	                }
  	                locale = new Locale(config);
  	                locale.parentLocale = locales[name];
  	                locales[name] = locale;
  	            }

  	            // backwards compat for now: also set the locale
  	            getSetGlobalLocale(name);
  	        } else {
  	            // pass null for config to unupdate, useful for tests
  	            if (locales[name] != null) {
  	                if (locales[name].parentLocale != null) {
  	                    locales[name] = locales[name].parentLocale;
  	                    if (name === getSetGlobalLocale()) {
  	                        getSetGlobalLocale(name);
  	                    }
  	                } else if (locales[name] != null) {
  	                    delete locales[name];
  	                }
  	            }
  	        }
  	        return locales[name];
  	    }

  	    // returns locale data
  	    function getLocale(key) {
  	        var locale;

  	        if (key && key._locale && key._locale._abbr) {
  	            key = key._locale._abbr;
  	        }

  	        if (!key) {
  	            return globalLocale;
  	        }

  	        if (!isArray(key)) {
  	            //short-circuit everything else
  	            locale = loadLocale(key);
  	            if (locale) {
  	                return locale;
  	            }
  	            key = [key];
  	        }

  	        return chooseLocale(key);
  	    }

  	    function listLocales() {
  	        return keys(locales);
  	    }

  	    function checkOverflow(m) {
  	        var overflow,
  	            a = m._a;

  	        if (a && getParsingFlags(m).overflow === -2) {
  	            overflow =
  	                a[MONTH] < 0 || a[MONTH] > 11
  	                    ? MONTH
  	                    : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH])
  	                    ? DATE
  	                    : a[HOUR] < 0 ||
  	                      a[HOUR] > 24 ||
  	                      (a[HOUR] === 24 &&
  	                          (a[MINUTE] !== 0 ||
  	                              a[SECOND] !== 0 ||
  	                              a[MILLISECOND] !== 0))
  	                    ? HOUR
  	                    : a[MINUTE] < 0 || a[MINUTE] > 59
  	                    ? MINUTE
  	                    : a[SECOND] < 0 || a[SECOND] > 59
  	                    ? SECOND
  	                    : a[MILLISECOND] < 0 || a[MILLISECOND] > 999
  	                    ? MILLISECOND
  	                    : -1;

  	            if (
  	                getParsingFlags(m)._overflowDayOfYear &&
  	                (overflow < YEAR || overflow > DATE)
  	            ) {
  	                overflow = DATE;
  	            }
  	            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
  	                overflow = WEEK;
  	            }
  	            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
  	                overflow = WEEKDAY;
  	            }

  	            getParsingFlags(m).overflow = overflow;
  	        }

  	        return m;
  	    }

  	    // iso 8601 regex
  	    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
  	    var extendedIsoRegex =
  	            /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
  	        basicIsoRegex =
  	            /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
  	        tzRegex = /Z|[+-]\d\d(?::?\d\d)?/,
  	        isoDates = [
  	            ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
  	            ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
  	            ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
  	            ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
  	            ['YYYY-DDD', /\d{4}-\d{3}/],
  	            ['YYYY-MM', /\d{4}-\d\d/, false],
  	            ['YYYYYYMMDD', /[+-]\d{10}/],
  	            ['YYYYMMDD', /\d{8}/],
  	            ['GGGG[W]WWE', /\d{4}W\d{3}/],
  	            ['GGGG[W]WW', /\d{4}W\d{2}/, false],
  	            ['YYYYDDD', /\d{7}/],
  	            ['YYYYMM', /\d{6}/, false],
  	            ['YYYY', /\d{4}/, false],
  	        ],
  	        // iso time formats and regexes
  	        isoTimes = [
  	            ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
  	            ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
  	            ['HH:mm:ss', /\d\d:\d\d:\d\d/],
  	            ['HH:mm', /\d\d:\d\d/],
  	            ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
  	            ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
  	            ['HHmmss', /\d\d\d\d\d\d/],
  	            ['HHmm', /\d\d\d\d/],
  	            ['HH', /\d\d/],
  	        ],
  	        aspNetJsonRegex = /^\/?Date\((-?\d+)/i,
  	        // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
  	        rfc2822 =
  	            /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,
  	        obsOffsets = {
  	            UT: 0,
  	            GMT: 0,
  	            EDT: -4 * 60,
  	            EST: -5 * 60,
  	            CDT: -5 * 60,
  	            CST: -6 * 60,
  	            MDT: -6 * 60,
  	            MST: -7 * 60,
  	            PDT: -7 * 60,
  	            PST: -8 * 60,
  	        };

  	    // date from iso format
  	    function configFromISO(config) {
  	        var i,
  	            l,
  	            string = config._i,
  	            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
  	            allowTime,
  	            dateFormat,
  	            timeFormat,
  	            tzFormat,
  	            isoDatesLen = isoDates.length,
  	            isoTimesLen = isoTimes.length;

  	        if (match) {
  	            getParsingFlags(config).iso = true;
  	            for (i = 0, l = isoDatesLen; i < l; i++) {
  	                if (isoDates[i][1].exec(match[1])) {
  	                    dateFormat = isoDates[i][0];
  	                    allowTime = isoDates[i][2] !== false;
  	                    break;
  	                }
  	            }
  	            if (dateFormat == null) {
  	                config._isValid = false;
  	                return;
  	            }
  	            if (match[3]) {
  	                for (i = 0, l = isoTimesLen; i < l; i++) {
  	                    if (isoTimes[i][1].exec(match[3])) {
  	                        // match[2] should be 'T' or space
  	                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
  	                        break;
  	                    }
  	                }
  	                if (timeFormat == null) {
  	                    config._isValid = false;
  	                    return;
  	                }
  	            }
  	            if (!allowTime && timeFormat != null) {
  	                config._isValid = false;
  	                return;
  	            }
  	            if (match[4]) {
  	                if (tzRegex.exec(match[4])) {
  	                    tzFormat = 'Z';
  	                } else {
  	                    config._isValid = false;
  	                    return;
  	                }
  	            }
  	            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
  	            configFromStringAndFormat(config);
  	        } else {
  	            config._isValid = false;
  	        }
  	    }

  	    function extractFromRFC2822Strings(
  	        yearStr,
  	        monthStr,
  	        dayStr,
  	        hourStr,
  	        minuteStr,
  	        secondStr
  	    ) {
  	        var result = [
  	            untruncateYear(yearStr),
  	            defaultLocaleMonthsShort.indexOf(monthStr),
  	            parseInt(dayStr, 10),
  	            parseInt(hourStr, 10),
  	            parseInt(minuteStr, 10),
  	        ];

  	        if (secondStr) {
  	            result.push(parseInt(secondStr, 10));
  	        }

  	        return result;
  	    }

  	    function untruncateYear(yearStr) {
  	        var year = parseInt(yearStr, 10);
  	        if (year <= 49) {
  	            return 2000 + year;
  	        } else if (year <= 999) {
  	            return 1900 + year;
  	        }
  	        return year;
  	    }

  	    function preprocessRFC2822(s) {
  	        // Remove comments and folding whitespace and replace multiple-spaces with a single space
  	        return s
  	            .replace(/\([^()]*\)|[\n\t]/g, ' ')
  	            .replace(/(\s\s+)/g, ' ')
  	            .replace(/^\s\s*/, '')
  	            .replace(/\s\s*$/, '');
  	    }

  	    function checkWeekday(weekdayStr, parsedInput, config) {
  	        if (weekdayStr) {
  	            // TODO: Replace the vanilla JS Date object with an independent day-of-week check.
  	            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
  	                weekdayActual = new Date(
  	                    parsedInput[0],
  	                    parsedInput[1],
  	                    parsedInput[2]
  	                ).getDay();
  	            if (weekdayProvided !== weekdayActual) {
  	                getParsingFlags(config).weekdayMismatch = true;
  	                config._isValid = false;
  	                return false;
  	            }
  	        }
  	        return true;
  	    }

  	    function calculateOffset(obsOffset, militaryOffset, numOffset) {
  	        if (obsOffset) {
  	            return obsOffsets[obsOffset];
  	        } else if (militaryOffset) {
  	            // the only allowed military tz is Z
  	            return 0;
  	        } else {
  	            var hm = parseInt(numOffset, 10),
  	                m = hm % 100,
  	                h = (hm - m) / 100;
  	            return h * 60 + m;
  	        }
  	    }

  	    // date and time from ref 2822 format
  	    function configFromRFC2822(config) {
  	        var match = rfc2822.exec(preprocessRFC2822(config._i)),
  	            parsedArray;
  	        if (match) {
  	            parsedArray = extractFromRFC2822Strings(
  	                match[4],
  	                match[3],
  	                match[2],
  	                match[5],
  	                match[6],
  	                match[7]
  	            );
  	            if (!checkWeekday(match[1], parsedArray, config)) {
  	                return;
  	            }

  	            config._a = parsedArray;
  	            config._tzm = calculateOffset(match[8], match[9], match[10]);

  	            config._d = createUTCDate.apply(null, config._a);
  	            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

  	            getParsingFlags(config).rfc2822 = true;
  	        } else {
  	            config._isValid = false;
  	        }
  	    }

  	    // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict
  	    function configFromString(config) {
  	        var matched = aspNetJsonRegex.exec(config._i);
  	        if (matched !== null) {
  	            config._d = new Date(+matched[1]);
  	            return;
  	        }

  	        configFromISO(config);
  	        if (config._isValid === false) {
  	            delete config._isValid;
  	        } else {
  	            return;
  	        }

  	        configFromRFC2822(config);
  	        if (config._isValid === false) {
  	            delete config._isValid;
  	        } else {
  	            return;
  	        }

  	        if (config._strict) {
  	            config._isValid = false;
  	        } else {
  	            // Final attempt, use Input Fallback
  	            hooks.createFromInputFallback(config);
  	        }
  	    }

  	    hooks.createFromInputFallback = deprecate(
  	        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
  	            'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
  	            'discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.',
  	        function (config) {
  	            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
  	        }
  	    );

  	    // Pick the first defined of two or three arguments.
  	    function defaults(a, b, c) {
  	        if (a != null) {
  	            return a;
  	        }
  	        if (b != null) {
  	            return b;
  	        }
  	        return c;
  	    }

  	    function currentDateArray(config) {
  	        // hooks is actually the exported moment object
  	        var nowValue = new Date(hooks.now());
  	        if (config._useUTC) {
  	            return [
  	                nowValue.getUTCFullYear(),
  	                nowValue.getUTCMonth(),
  	                nowValue.getUTCDate(),
  	            ];
  	        }
  	        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
  	    }

  	    // convert an array to a date.
  	    // the array should mirror the parameters below
  	    // note: all values past the year are optional and will default to the lowest possible value.
  	    // [year, month, day , hour, minute, second, millisecond]
  	    function configFromArray(config) {
  	        var i,
  	            date,
  	            input = [],
  	            currentDate,
  	            expectedWeekday,
  	            yearToUse;

  	        if (config._d) {
  	            return;
  	        }

  	        currentDate = currentDateArray(config);

  	        //compute day of the year from weeks and weekdays
  	        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
  	            dayOfYearFromWeekInfo(config);
  	        }

  	        //if the day of the year is set, figure out what it is
  	        if (config._dayOfYear != null) {
  	            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

  	            if (
  	                config._dayOfYear > daysInYear(yearToUse) ||
  	                config._dayOfYear === 0
  	            ) {
  	                getParsingFlags(config)._overflowDayOfYear = true;
  	            }

  	            date = createUTCDate(yearToUse, 0, config._dayOfYear);
  	            config._a[MONTH] = date.getUTCMonth();
  	            config._a[DATE] = date.getUTCDate();
  	        }

  	        // Default to current date.
  	        // * if no year, month, day of month are given, default to today
  	        // * if day of month is given, default month and year
  	        // * if month is given, default only year
  	        // * if year is given, don't default anything
  	        for (i = 0; i < 3 && config._a[i] == null; ++i) {
  	            config._a[i] = input[i] = currentDate[i];
  	        }

  	        // Zero out whatever was not defaulted, including time
  	        for (; i < 7; i++) {
  	            config._a[i] = input[i] =
  	                config._a[i] == null ? (i === 2 ? 1 : 0) : config._a[i];
  	        }

  	        // Check for 24:00:00.000
  	        if (
  	            config._a[HOUR] === 24 &&
  	            config._a[MINUTE] === 0 &&
  	            config._a[SECOND] === 0 &&
  	            config._a[MILLISECOND] === 0
  	        ) {
  	            config._nextDay = true;
  	            config._a[HOUR] = 0;
  	        }

  	        config._d = (config._useUTC ? createUTCDate : createDate).apply(
  	            null,
  	            input
  	        );
  	        expectedWeekday = config._useUTC
  	            ? config._d.getUTCDay()
  	            : config._d.getDay();

  	        // Apply timezone offset from input. The actual utcOffset can be changed
  	        // with parseZone.
  	        if (config._tzm != null) {
  	            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
  	        }

  	        if (config._nextDay) {
  	            config._a[HOUR] = 24;
  	        }

  	        // check for mismatching day of week
  	        if (
  	            config._w &&
  	            typeof config._w.d !== 'undefined' &&
  	            config._w.d !== expectedWeekday
  	        ) {
  	            getParsingFlags(config).weekdayMismatch = true;
  	        }
  	    }

  	    function dayOfYearFromWeekInfo(config) {
  	        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;

  	        w = config._w;
  	        if (w.GG != null || w.W != null || w.E != null) {
  	            dow = 1;
  	            doy = 4;

  	            // TODO: We need to take the current isoWeekYear, but that depends on
  	            // how we interpret now (local, utc, fixed offset). So create
  	            // a now version of current config (take local/utc/offset flags, and
  	            // create now).
  	            weekYear = defaults(
  	                w.GG,
  	                config._a[YEAR],
  	                weekOfYear(createLocal(), 1, 4).year
  	            );
  	            week = defaults(w.W, 1);
  	            weekday = defaults(w.E, 1);
  	            if (weekday < 1 || weekday > 7) {
  	                weekdayOverflow = true;
  	            }
  	        } else {
  	            dow = config._locale._week.dow;
  	            doy = config._locale._week.doy;

  	            curWeek = weekOfYear(createLocal(), dow, doy);

  	            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

  	            // Default to current week.
  	            week = defaults(w.w, curWeek.week);

  	            if (w.d != null) {
  	                // weekday -- low day numbers are considered next week
  	                weekday = w.d;
  	                if (weekday < 0 || weekday > 6) {
  	                    weekdayOverflow = true;
  	                }
  	            } else if (w.e != null) {
  	                // local weekday -- counting starts from beginning of week
  	                weekday = w.e + dow;
  	                if (w.e < 0 || w.e > 6) {
  	                    weekdayOverflow = true;
  	                }
  	            } else {
  	                // default to beginning of week
  	                weekday = dow;
  	            }
  	        }
  	        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
  	            getParsingFlags(config)._overflowWeeks = true;
  	        } else if (weekdayOverflow != null) {
  	            getParsingFlags(config)._overflowWeekday = true;
  	        } else {
  	            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
  	            config._a[YEAR] = temp.year;
  	            config._dayOfYear = temp.dayOfYear;
  	        }
  	    }

  	    // constant that refers to the ISO standard
  	    hooks.ISO_8601 = function () {};

  	    // constant that refers to the RFC 2822 form
  	    hooks.RFC_2822 = function () {};

  	    // date from string and format string
  	    function configFromStringAndFormat(config) {
  	        // TODO: Move this to another part of the creation flow to prevent circular deps
  	        if (config._f === hooks.ISO_8601) {
  	            configFromISO(config);
  	            return;
  	        }
  	        if (config._f === hooks.RFC_2822) {
  	            configFromRFC2822(config);
  	            return;
  	        }
  	        config._a = [];
  	        getParsingFlags(config).empty = true;

  	        // This array is used to make a Date, either with `new Date` or `Date.UTC`
  	        var string = '' + config._i,
  	            i,
  	            parsedInput,
  	            tokens,
  	            token,
  	            skipped,
  	            stringLength = string.length,
  	            totalParsedInputLength = 0,
  	            era,
  	            tokenLen;

  	        tokens =
  	            expandFormat(config._f, config._locale).match(formattingTokens) || [];
  	        tokenLen = tokens.length;
  	        for (i = 0; i < tokenLen; i++) {
  	            token = tokens[i];
  	            parsedInput = (string.match(getParseRegexForToken(token, config)) ||
  	                [])[0];
  	            if (parsedInput) {
  	                skipped = string.substr(0, string.indexOf(parsedInput));
  	                if (skipped.length > 0) {
  	                    getParsingFlags(config).unusedInput.push(skipped);
  	                }
  	                string = string.slice(
  	                    string.indexOf(parsedInput) + parsedInput.length
  	                );
  	                totalParsedInputLength += parsedInput.length;
  	            }
  	            // don't parse if it's not a known token
  	            if (formatTokenFunctions[token]) {
  	                if (parsedInput) {
  	                    getParsingFlags(config).empty = false;
  	                } else {
  	                    getParsingFlags(config).unusedTokens.push(token);
  	                }
  	                addTimeToArrayFromToken(token, parsedInput, config);
  	            } else if (config._strict && !parsedInput) {
  	                getParsingFlags(config).unusedTokens.push(token);
  	            }
  	        }

  	        // add remaining unparsed input length to the string
  	        getParsingFlags(config).charsLeftOver =
  	            stringLength - totalParsedInputLength;
  	        if (string.length > 0) {
  	            getParsingFlags(config).unusedInput.push(string);
  	        }

  	        // clear _12h flag if hour is <= 12
  	        if (
  	            config._a[HOUR] <= 12 &&
  	            getParsingFlags(config).bigHour === true &&
  	            config._a[HOUR] > 0
  	        ) {
  	            getParsingFlags(config).bigHour = undefined;
  	        }

  	        getParsingFlags(config).parsedDateParts = config._a.slice(0);
  	        getParsingFlags(config).meridiem = config._meridiem;
  	        // handle meridiem
  	        config._a[HOUR] = meridiemFixWrap(
  	            config._locale,
  	            config._a[HOUR],
  	            config._meridiem
  	        );

  	        // handle era
  	        era = getParsingFlags(config).era;
  	        if (era !== null) {
  	            config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
  	        }

  	        configFromArray(config);
  	        checkOverflow(config);
  	    }

  	    function meridiemFixWrap(locale, hour, meridiem) {
  	        var isPm;

  	        if (meridiem == null) {
  	            // nothing to do
  	            return hour;
  	        }
  	        if (locale.meridiemHour != null) {
  	            return locale.meridiemHour(hour, meridiem);
  	        } else if (locale.isPM != null) {
  	            // Fallback
  	            isPm = locale.isPM(meridiem);
  	            if (isPm && hour < 12) {
  	                hour += 12;
  	            }
  	            if (!isPm && hour === 12) {
  	                hour = 0;
  	            }
  	            return hour;
  	        } else {
  	            // this is not supposed to happen
  	            return hour;
  	        }
  	    }

  	    // date from string and array of format strings
  	    function configFromStringAndArray(config) {
  	        var tempConfig,
  	            bestMoment,
  	            scoreToBeat,
  	            i,
  	            currentScore,
  	            validFormatFound,
  	            bestFormatIsValid = false,
  	            configfLen = config._f.length;

  	        if (configfLen === 0) {
  	            getParsingFlags(config).invalidFormat = true;
  	            config._d = new Date(NaN);
  	            return;
  	        }

  	        for (i = 0; i < configfLen; i++) {
  	            currentScore = 0;
  	            validFormatFound = false;
  	            tempConfig = copyConfig({}, config);
  	            if (config._useUTC != null) {
  	                tempConfig._useUTC = config._useUTC;
  	            }
  	            tempConfig._f = config._f[i];
  	            configFromStringAndFormat(tempConfig);

  	            if (isValid(tempConfig)) {
  	                validFormatFound = true;
  	            }

  	            // if there is any input that was not parsed add a penalty for that format
  	            currentScore += getParsingFlags(tempConfig).charsLeftOver;

  	            //or tokens
  	            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

  	            getParsingFlags(tempConfig).score = currentScore;

  	            if (!bestFormatIsValid) {
  	                if (
  	                    scoreToBeat == null ||
  	                    currentScore < scoreToBeat ||
  	                    validFormatFound
  	                ) {
  	                    scoreToBeat = currentScore;
  	                    bestMoment = tempConfig;
  	                    if (validFormatFound) {
  	                        bestFormatIsValid = true;
  	                    }
  	                }
  	            } else {
  	                if (currentScore < scoreToBeat) {
  	                    scoreToBeat = currentScore;
  	                    bestMoment = tempConfig;
  	                }
  	            }
  	        }

  	        extend(config, bestMoment || tempConfig);
  	    }

  	    function configFromObject(config) {
  	        if (config._d) {
  	            return;
  	        }

  	        var i = normalizeObjectUnits(config._i),
  	            dayOrDate = i.day === undefined ? i.date : i.day;
  	        config._a = map(
  	            [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],
  	            function (obj) {
  	                return obj && parseInt(obj, 10);
  	            }
  	        );

  	        configFromArray(config);
  	    }

  	    function createFromConfig(config) {
  	        var res = new Moment(checkOverflow(prepareConfig(config)));
  	        if (res._nextDay) {
  	            // Adding is smart enough around DST
  	            res.add(1, 'd');
  	            res._nextDay = undefined;
  	        }

  	        return res;
  	    }

  	    function prepareConfig(config) {
  	        var input = config._i,
  	            format = config._f;

  	        config._locale = config._locale || getLocale(config._l);

  	        if (input === null || (format === undefined && input === '')) {
  	            return createInvalid({ nullInput: true });
  	        }

  	        if (typeof input === 'string') {
  	            config._i = input = config._locale.preparse(input);
  	        }

  	        if (isMoment(input)) {
  	            return new Moment(checkOverflow(input));
  	        } else if (isDate(input)) {
  	            config._d = input;
  	        } else if (isArray(format)) {
  	            configFromStringAndArray(config);
  	        } else if (format) {
  	            configFromStringAndFormat(config);
  	        } else {
  	            configFromInput(config);
  	        }

  	        if (!isValid(config)) {
  	            config._d = null;
  	        }

  	        return config;
  	    }

  	    function configFromInput(config) {
  	        var input = config._i;
  	        if (isUndefined(input)) {
  	            config._d = new Date(hooks.now());
  	        } else if (isDate(input)) {
  	            config._d = new Date(input.valueOf());
  	        } else if (typeof input === 'string') {
  	            configFromString(config);
  	        } else if (isArray(input)) {
  	            config._a = map(input.slice(0), function (obj) {
  	                return parseInt(obj, 10);
  	            });
  	            configFromArray(config);
  	        } else if (isObject(input)) {
  	            configFromObject(config);
  	        } else if (isNumber(input)) {
  	            // from milliseconds
  	            config._d = new Date(input);
  	        } else {
  	            hooks.createFromInputFallback(config);
  	        }
  	    }

  	    function createLocalOrUTC(input, format, locale, strict, isUTC) {
  	        var c = {};

  	        if (format === true || format === false) {
  	            strict = format;
  	            format = undefined;
  	        }

  	        if (locale === true || locale === false) {
  	            strict = locale;
  	            locale = undefined;
  	        }

  	        if (
  	            (isObject(input) && isObjectEmpty(input)) ||
  	            (isArray(input) && input.length === 0)
  	        ) {
  	            input = undefined;
  	        }
  	        // object construction must be done this way.
  	        // https://github.com/moment/moment/issues/1423
  	        c._isAMomentObject = true;
  	        c._useUTC = c._isUTC = isUTC;
  	        c._l = locale;
  	        c._i = input;
  	        c._f = format;
  	        c._strict = strict;

  	        return createFromConfig(c);
  	    }

  	    function createLocal(input, format, locale, strict) {
  	        return createLocalOrUTC(input, format, locale, strict, false);
  	    }

  	    var prototypeMin = deprecate(
  	            'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
  	            function () {
  	                var other = createLocal.apply(null, arguments);
  	                if (this.isValid() && other.isValid()) {
  	                    return other < this ? this : other;
  	                } else {
  	                    return createInvalid();
  	                }
  	            }
  	        ),
  	        prototypeMax = deprecate(
  	            'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
  	            function () {
  	                var other = createLocal.apply(null, arguments);
  	                if (this.isValid() && other.isValid()) {
  	                    return other > this ? this : other;
  	                } else {
  	                    return createInvalid();
  	                }
  	            }
  	        );

  	    // Pick a moment m from moments so that m[fn](other) is true for all
  	    // other. This relies on the function fn to be transitive.
  	    //
  	    // moments should either be an array of moment objects or an array, whose
  	    // first element is an array of moment objects.
  	    function pickBy(fn, moments) {
  	        var res, i;
  	        if (moments.length === 1 && isArray(moments[0])) {
  	            moments = moments[0];
  	        }
  	        if (!moments.length) {
  	            return createLocal();
  	        }
  	        res = moments[0];
  	        for (i = 1; i < moments.length; ++i) {
  	            if (!moments[i].isValid() || moments[i][fn](res)) {
  	                res = moments[i];
  	            }
  	        }
  	        return res;
  	    }

  	    // TODO: Use [].sort instead?
  	    function min() {
  	        var args = [].slice.call(arguments, 0);

  	        return pickBy('isBefore', args);
  	    }

  	    function max() {
  	        var args = [].slice.call(arguments, 0);

  	        return pickBy('isAfter', args);
  	    }

  	    var now = function () {
  	        return Date.now ? Date.now() : +new Date();
  	    };

  	    var ordering = [
  	        'year',
  	        'quarter',
  	        'month',
  	        'week',
  	        'day',
  	        'hour',
  	        'minute',
  	        'second',
  	        'millisecond',
  	    ];

  	    function isDurationValid(m) {
  	        var key,
  	            unitHasDecimal = false,
  	            i,
  	            orderLen = ordering.length;
  	        for (key in m) {
  	            if (
  	                hasOwnProp(m, key) &&
  	                !(
  	                    indexOf.call(ordering, key) !== -1 &&
  	                    (m[key] == null || !isNaN(m[key]))
  	                )
  	            ) {
  	                return false;
  	            }
  	        }

  	        for (i = 0; i < orderLen; ++i) {
  	            if (m[ordering[i]]) {
  	                if (unitHasDecimal) {
  	                    return false; // only allow non-integers for smallest unit
  	                }
  	                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
  	                    unitHasDecimal = true;
  	                }
  	            }
  	        }

  	        return true;
  	    }

  	    function isValid$1() {
  	        return this._isValid;
  	    }

  	    function createInvalid$1() {
  	        return createDuration(NaN);
  	    }

  	    function Duration(duration) {
  	        var normalizedInput = normalizeObjectUnits(duration),
  	            years = normalizedInput.year || 0,
  	            quarters = normalizedInput.quarter || 0,
  	            months = normalizedInput.month || 0,
  	            weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
  	            days = normalizedInput.day || 0,
  	            hours = normalizedInput.hour || 0,
  	            minutes = normalizedInput.minute || 0,
  	            seconds = normalizedInput.second || 0,
  	            milliseconds = normalizedInput.millisecond || 0;

  	        this._isValid = isDurationValid(normalizedInput);

  	        // representation for dateAddRemove
  	        this._milliseconds =
  	            +milliseconds +
  	            seconds * 1e3 + // 1000
  	            minutes * 6e4 + // 1000 * 60
  	            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
  	        // Because of dateAddRemove treats 24 hours as different from a
  	        // day when working around DST, we need to store them separately
  	        this._days = +days + weeks * 7;
  	        // It is impossible to translate months into days without knowing
  	        // which months you are are talking about, so we have to store
  	        // it separately.
  	        this._months = +months + quarters * 3 + years * 12;

  	        this._data = {};

  	        this._locale = getLocale();

  	        this._bubble();
  	    }

  	    function isDuration(obj) {
  	        return obj instanceof Duration;
  	    }

  	    function absRound(number) {
  	        if (number < 0) {
  	            return Math.round(-1 * number) * -1;
  	        } else {
  	            return Math.round(number);
  	        }
  	    }

  	    // compare two arrays, return the number of differences
  	    function compareArrays(array1, array2, dontConvert) {
  	        var len = Math.min(array1.length, array2.length),
  	            lengthDiff = Math.abs(array1.length - array2.length),
  	            diffs = 0,
  	            i;
  	        for (i = 0; i < len; i++) {
  	            if (
  	                (dontConvert && array1[i] !== array2[i]) ||
  	                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))
  	            ) {
  	                diffs++;
  	            }
  	        }
  	        return diffs + lengthDiff;
  	    }

  	    // FORMATTING

  	    function offset(token, separator) {
  	        addFormatToken(token, 0, 0, function () {
  	            var offset = this.utcOffset(),
  	                sign = '+';
  	            if (offset < 0) {
  	                offset = -offset;
  	                sign = '-';
  	            }
  	            return (
  	                sign +
  	                zeroFill(~~(offset / 60), 2) +
  	                separator +
  	                zeroFill(~~offset % 60, 2)
  	            );
  	        });
  	    }

  	    offset('Z', ':');
  	    offset('ZZ', '');

  	    // PARSING

  	    addRegexToken('Z', matchShortOffset);
  	    addRegexToken('ZZ', matchShortOffset);
  	    addParseToken(['Z', 'ZZ'], function (input, array, config) {
  	        config._useUTC = true;
  	        config._tzm = offsetFromString(matchShortOffset, input);
  	    });

  	    // HELPERS

  	    // timezone chunker
  	    // '+10:00' > ['10',  '00']
  	    // '-1530'  > ['-15', '30']
  	    var chunkOffset = /([\+\-]|\d\d)/gi;

  	    function offsetFromString(matcher, string) {
  	        var matches = (string || '').match(matcher),
  	            chunk,
  	            parts,
  	            minutes;

  	        if (matches === null) {
  	            return null;
  	        }

  	        chunk = matches[matches.length - 1] || [];
  	        parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
  	        minutes = +(parts[1] * 60) + toInt(parts[2]);

  	        return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
  	    }

  	    // Return a moment from input, that is local/utc/zone equivalent to model.
  	    function cloneWithOffset(input, model) {
  	        var res, diff;
  	        if (model._isUTC) {
  	            res = model.clone();
  	            diff =
  	                (isMoment(input) || isDate(input)
  	                    ? input.valueOf()
  	                    : createLocal(input).valueOf()) - res.valueOf();
  	            // Use low-level api, because this fn is low-level api.
  	            res._d.setTime(res._d.valueOf() + diff);
  	            hooks.updateOffset(res, false);
  	            return res;
  	        } else {
  	            return createLocal(input).local();
  	        }
  	    }

  	    function getDateOffset(m) {
  	        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
  	        // https://github.com/moment/moment/pull/1871
  	        return -Math.round(m._d.getTimezoneOffset());
  	    }

  	    // HOOKS

  	    // This function will be called whenever a moment is mutated.
  	    // It is intended to keep the offset in sync with the timezone.
  	    hooks.updateOffset = function () {};

  	    // MOMENTS

  	    // keepLocalTime = true means only change the timezone, without
  	    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
  	    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
  	    // +0200, so we adjust the time as needed, to be valid.
  	    //
  	    // Keeping the time actually adds/subtracts (one hour)
  	    // from the actual represented time. That is why we call updateOffset
  	    // a second time. In case it wants us to change the offset again
  	    // _changeInProgress == true case, then we have to adjust, because
  	    // there is no such time in the given timezone.
  	    function getSetOffset(input, keepLocalTime, keepMinutes) {
  	        var offset = this._offset || 0,
  	            localAdjust;
  	        if (!this.isValid()) {
  	            return input != null ? this : NaN;
  	        }
  	        if (input != null) {
  	            if (typeof input === 'string') {
  	                input = offsetFromString(matchShortOffset, input);
  	                if (input === null) {
  	                    return this;
  	                }
  	            } else if (Math.abs(input) < 16 && !keepMinutes) {
  	                input = input * 60;
  	            }
  	            if (!this._isUTC && keepLocalTime) {
  	                localAdjust = getDateOffset(this);
  	            }
  	            this._offset = input;
  	            this._isUTC = true;
  	            if (localAdjust != null) {
  	                this.add(localAdjust, 'm');
  	            }
  	            if (offset !== input) {
  	                if (!keepLocalTime || this._changeInProgress) {
  	                    addSubtract(
  	                        this,
  	                        createDuration(input - offset, 'm'),
  	                        1,
  	                        false
  	                    );
  	                } else if (!this._changeInProgress) {
  	                    this._changeInProgress = true;
  	                    hooks.updateOffset(this, true);
  	                    this._changeInProgress = null;
  	                }
  	            }
  	            return this;
  	        } else {
  	            return this._isUTC ? offset : getDateOffset(this);
  	        }
  	    }

  	    function getSetZone(input, keepLocalTime) {
  	        if (input != null) {
  	            if (typeof input !== 'string') {
  	                input = -input;
  	            }

  	            this.utcOffset(input, keepLocalTime);

  	            return this;
  	        } else {
  	            return -this.utcOffset();
  	        }
  	    }

  	    function setOffsetToUTC(keepLocalTime) {
  	        return this.utcOffset(0, keepLocalTime);
  	    }

  	    function setOffsetToLocal(keepLocalTime) {
  	        if (this._isUTC) {
  	            this.utcOffset(0, keepLocalTime);
  	            this._isUTC = false;

  	            if (keepLocalTime) {
  	                this.subtract(getDateOffset(this), 'm');
  	            }
  	        }
  	        return this;
  	    }

  	    function setOffsetToParsedOffset() {
  	        if (this._tzm != null) {
  	            this.utcOffset(this._tzm, false, true);
  	        } else if (typeof this._i === 'string') {
  	            var tZone = offsetFromString(matchOffset, this._i);
  	            if (tZone != null) {
  	                this.utcOffset(tZone);
  	            } else {
  	                this.utcOffset(0, true);
  	            }
  	        }
  	        return this;
  	    }

  	    function hasAlignedHourOffset(input) {
  	        if (!this.isValid()) {
  	            return false;
  	        }
  	        input = input ? createLocal(input).utcOffset() : 0;

  	        return (this.utcOffset() - input) % 60 === 0;
  	    }

  	    function isDaylightSavingTime() {
  	        return (
  	            this.utcOffset() > this.clone().month(0).utcOffset() ||
  	            this.utcOffset() > this.clone().month(5).utcOffset()
  	        );
  	    }

  	    function isDaylightSavingTimeShifted() {
  	        if (!isUndefined(this._isDSTShifted)) {
  	            return this._isDSTShifted;
  	        }

  	        var c = {},
  	            other;

  	        copyConfig(c, this);
  	        c = prepareConfig(c);

  	        if (c._a) {
  	            other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
  	            this._isDSTShifted =
  	                this.isValid() && compareArrays(c._a, other.toArray()) > 0;
  	        } else {
  	            this._isDSTShifted = false;
  	        }

  	        return this._isDSTShifted;
  	    }

  	    function isLocal() {
  	        return this.isValid() ? !this._isUTC : false;
  	    }

  	    function isUtcOffset() {
  	        return this.isValid() ? this._isUTC : false;
  	    }

  	    function isUtc() {
  	        return this.isValid() ? this._isUTC && this._offset === 0 : false;
  	    }

  	    // ASP.NET json date format regex
  	    var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,
  	        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
  	        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
  	        // and further modified to allow for strings containing both week and day
  	        isoRegex =
  	            /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

  	    function createDuration(input, key) {
  	        var duration = input,
  	            // matching against regexp is expensive, do it on demand
  	            match = null,
  	            sign,
  	            ret,
  	            diffRes;

  	        if (isDuration(input)) {
  	            duration = {
  	                ms: input._milliseconds,
  	                d: input._days,
  	                M: input._months,
  	            };
  	        } else if (isNumber(input) || !isNaN(+input)) {
  	            duration = {};
  	            if (key) {
  	                duration[key] = +input;
  	            } else {
  	                duration.milliseconds = +input;
  	            }
  	        } else if ((match = aspNetRegex.exec(input))) {
  	            sign = match[1] === '-' ? -1 : 1;
  	            duration = {
  	                y: 0,
  	                d: toInt(match[DATE]) * sign,
  	                h: toInt(match[HOUR]) * sign,
  	                m: toInt(match[MINUTE]) * sign,
  	                s: toInt(match[SECOND]) * sign,
  	                ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign, // the millisecond decimal point is included in the match
  	            };
  	        } else if ((match = isoRegex.exec(input))) {
  	            sign = match[1] === '-' ? -1 : 1;
  	            duration = {
  	                y: parseIso(match[2], sign),
  	                M: parseIso(match[3], sign),
  	                w: parseIso(match[4], sign),
  	                d: parseIso(match[5], sign),
  	                h: parseIso(match[6], sign),
  	                m: parseIso(match[7], sign),
  	                s: parseIso(match[8], sign),
  	            };
  	        } else if (duration == null) {
  	            // checks for null or undefined
  	            duration = {};
  	        } else if (
  	            typeof duration === 'object' &&
  	            ('from' in duration || 'to' in duration)
  	        ) {
  	            diffRes = momentsDifference(
  	                createLocal(duration.from),
  	                createLocal(duration.to)
  	            );

  	            duration = {};
  	            duration.ms = diffRes.milliseconds;
  	            duration.M = diffRes.months;
  	        }

  	        ret = new Duration(duration);

  	        if (isDuration(input) && hasOwnProp(input, '_locale')) {
  	            ret._locale = input._locale;
  	        }

  	        if (isDuration(input) && hasOwnProp(input, '_isValid')) {
  	            ret._isValid = input._isValid;
  	        }

  	        return ret;
  	    }

  	    createDuration.fn = Duration.prototype;
  	    createDuration.invalid = createInvalid$1;

  	    function parseIso(inp, sign) {
  	        // We'd normally use ~~inp for this, but unfortunately it also
  	        // converts floats to ints.
  	        // inp may be undefined, so careful calling replace on it.
  	        var res = inp && parseFloat(inp.replace(',', '.'));
  	        // apply sign while we're at it
  	        return (isNaN(res) ? 0 : res) * sign;
  	    }

  	    function positiveMomentsDifference(base, other) {
  	        var res = {};

  	        res.months =
  	            other.month() - base.month() + (other.year() - base.year()) * 12;
  	        if (base.clone().add(res.months, 'M').isAfter(other)) {
  	            --res.months;
  	        }

  	        res.milliseconds = +other - +base.clone().add(res.months, 'M');

  	        return res;
  	    }

  	    function momentsDifference(base, other) {
  	        var res;
  	        if (!(base.isValid() && other.isValid())) {
  	            return { milliseconds: 0, months: 0 };
  	        }

  	        other = cloneWithOffset(other, base);
  	        if (base.isBefore(other)) {
  	            res = positiveMomentsDifference(base, other);
  	        } else {
  	            res = positiveMomentsDifference(other, base);
  	            res.milliseconds = -res.milliseconds;
  	            res.months = -res.months;
  	        }

  	        return res;
  	    }

  	    // TODO: remove 'name' arg after deprecation is removed
  	    function createAdder(direction, name) {
  	        return function (val, period) {
  	            var dur, tmp;
  	            //invert the arguments, but complain about it
  	            if (period !== null && !isNaN(+period)) {
  	                deprecateSimple(
  	                    name,
  	                    'moment().' +
  	                        name +
  	                        '(period, number) is deprecated. Please use moment().' +
  	                        name +
  	                        '(number, period). ' +
  	                        'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.'
  	                );
  	                tmp = val;
  	                val = period;
  	                period = tmp;
  	            }

  	            dur = createDuration(val, period);
  	            addSubtract(this, dur, direction);
  	            return this;
  	        };
  	    }

  	    function addSubtract(mom, duration, isAdding, updateOffset) {
  	        var milliseconds = duration._milliseconds,
  	            days = absRound(duration._days),
  	            months = absRound(duration._months);

  	        if (!mom.isValid()) {
  	            // No op
  	            return;
  	        }

  	        updateOffset = updateOffset == null ? true : updateOffset;

  	        if (months) {
  	            setMonth(mom, get(mom, 'Month') + months * isAdding);
  	        }
  	        if (days) {
  	            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
  	        }
  	        if (milliseconds) {
  	            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
  	        }
  	        if (updateOffset) {
  	            hooks.updateOffset(mom, days || months);
  	        }
  	    }

  	    var add = createAdder(1, 'add'),
  	        subtract = createAdder(-1, 'subtract');

  	    function isString(input) {
  	        return typeof input === 'string' || input instanceof String;
  	    }

  	    // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined
  	    function isMomentInput(input) {
  	        return (
  	            isMoment(input) ||
  	            isDate(input) ||
  	            isString(input) ||
  	            isNumber(input) ||
  	            isNumberOrStringArray(input) ||
  	            isMomentInputObject(input) ||
  	            input === null ||
  	            input === undefined
  	        );
  	    }

  	    function isMomentInputObject(input) {
  	        var objectTest = isObject(input) && !isObjectEmpty(input),
  	            propertyTest = false,
  	            properties = [
  	                'years',
  	                'year',
  	                'y',
  	                'months',
  	                'month',
  	                'M',
  	                'days',
  	                'day',
  	                'd',
  	                'dates',
  	                'date',
  	                'D',
  	                'hours',
  	                'hour',
  	                'h',
  	                'minutes',
  	                'minute',
  	                'm',
  	                'seconds',
  	                'second',
  	                's',
  	                'milliseconds',
  	                'millisecond',
  	                'ms',
  	            ],
  	            i,
  	            property,
  	            propertyLen = properties.length;

  	        for (i = 0; i < propertyLen; i += 1) {
  	            property = properties[i];
  	            propertyTest = propertyTest || hasOwnProp(input, property);
  	        }

  	        return objectTest && propertyTest;
  	    }

  	    function isNumberOrStringArray(input) {
  	        var arrayTest = isArray(input),
  	            dataTypeTest = false;
  	        if (arrayTest) {
  	            dataTypeTest =
  	                input.filter(function (item) {
  	                    return !isNumber(item) && isString(input);
  	                }).length === 0;
  	        }
  	        return arrayTest && dataTypeTest;
  	    }

  	    function isCalendarSpec(input) {
  	        var objectTest = isObject(input) && !isObjectEmpty(input),
  	            propertyTest = false,
  	            properties = [
  	                'sameDay',
  	                'nextDay',
  	                'lastDay',
  	                'nextWeek',
  	                'lastWeek',
  	                'sameElse',
  	            ],
  	            i,
  	            property;

  	        for (i = 0; i < properties.length; i += 1) {
  	            property = properties[i];
  	            propertyTest = propertyTest || hasOwnProp(input, property);
  	        }

  	        return objectTest && propertyTest;
  	    }

  	    function getCalendarFormat(myMoment, now) {
  	        var diff = myMoment.diff(now, 'days', true);
  	        return diff < -6
  	            ? 'sameElse'
  	            : diff < -1
  	            ? 'lastWeek'
  	            : diff < 0
  	            ? 'lastDay'
  	            : diff < 1
  	            ? 'sameDay'
  	            : diff < 2
  	            ? 'nextDay'
  	            : diff < 7
  	            ? 'nextWeek'
  	            : 'sameElse';
  	    }

  	    function calendar$1(time, formats) {
  	        // Support for single parameter, formats only overload to the calendar function
  	        if (arguments.length === 1) {
  	            if (!arguments[0]) {
  	                time = undefined;
  	                formats = undefined;
  	            } else if (isMomentInput(arguments[0])) {
  	                time = arguments[0];
  	                formats = undefined;
  	            } else if (isCalendarSpec(arguments[0])) {
  	                formats = arguments[0];
  	                time = undefined;
  	            }
  	        }
  	        // We want to compare the start of today, vs this.
  	        // Getting start-of-today depends on whether we're local/utc/offset or not.
  	        var now = time || createLocal(),
  	            sod = cloneWithOffset(now, this).startOf('day'),
  	            format = hooks.calendarFormat(this, sod) || 'sameElse',
  	            output =
  	                formats &&
  	                (isFunction(formats[format])
  	                    ? formats[format].call(this, now)
  	                    : formats[format]);

  	        return this.format(
  	            output || this.localeData().calendar(format, this, createLocal(now))
  	        );
  	    }

  	    function clone() {
  	        return new Moment(this);
  	    }

  	    function isAfter(input, units) {
  	        var localInput = isMoment(input) ? input : createLocal(input);
  	        if (!(this.isValid() && localInput.isValid())) {
  	            return false;
  	        }
  	        units = normalizeUnits(units) || 'millisecond';
  	        if (units === 'millisecond') {
  	            return this.valueOf() > localInput.valueOf();
  	        } else {
  	            return localInput.valueOf() < this.clone().startOf(units).valueOf();
  	        }
  	    }

  	    function isBefore(input, units) {
  	        var localInput = isMoment(input) ? input : createLocal(input);
  	        if (!(this.isValid() && localInput.isValid())) {
  	            return false;
  	        }
  	        units = normalizeUnits(units) || 'millisecond';
  	        if (units === 'millisecond') {
  	            return this.valueOf() < localInput.valueOf();
  	        } else {
  	            return this.clone().endOf(units).valueOf() < localInput.valueOf();
  	        }
  	    }

  	    function isBetween(from, to, units, inclusivity) {
  	        var localFrom = isMoment(from) ? from : createLocal(from),
  	            localTo = isMoment(to) ? to : createLocal(to);
  	        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
  	            return false;
  	        }
  	        inclusivity = inclusivity || '()';
  	        return (
  	            (inclusivity[0] === '('
  	                ? this.isAfter(localFrom, units)
  	                : !this.isBefore(localFrom, units)) &&
  	            (inclusivity[1] === ')'
  	                ? this.isBefore(localTo, units)
  	                : !this.isAfter(localTo, units))
  	        );
  	    }

  	    function isSame(input, units) {
  	        var localInput = isMoment(input) ? input : createLocal(input),
  	            inputMs;
  	        if (!(this.isValid() && localInput.isValid())) {
  	            return false;
  	        }
  	        units = normalizeUnits(units) || 'millisecond';
  	        if (units === 'millisecond') {
  	            return this.valueOf() === localInput.valueOf();
  	        } else {
  	            inputMs = localInput.valueOf();
  	            return (
  	                this.clone().startOf(units).valueOf() <= inputMs &&
  	                inputMs <= this.clone().endOf(units).valueOf()
  	            );
  	        }
  	    }

  	    function isSameOrAfter(input, units) {
  	        return this.isSame(input, units) || this.isAfter(input, units);
  	    }

  	    function isSameOrBefore(input, units) {
  	        return this.isSame(input, units) || this.isBefore(input, units);
  	    }

  	    function diff(input, units, asFloat) {
  	        var that, zoneDelta, output;

  	        if (!this.isValid()) {
  	            return NaN;
  	        }

  	        that = cloneWithOffset(input, this);

  	        if (!that.isValid()) {
  	            return NaN;
  	        }

  	        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

  	        units = normalizeUnits(units);

  	        switch (units) {
  	            case 'year':
  	                output = monthDiff(this, that) / 12;
  	                break;
  	            case 'month':
  	                output = monthDiff(this, that);
  	                break;
  	            case 'quarter':
  	                output = monthDiff(this, that) / 3;
  	                break;
  	            case 'second':
  	                output = (this - that) / 1e3;
  	                break; // 1000
  	            case 'minute':
  	                output = (this - that) / 6e4;
  	                break; // 1000 * 60
  	            case 'hour':
  	                output = (this - that) / 36e5;
  	                break; // 1000 * 60 * 60
  	            case 'day':
  	                output = (this - that - zoneDelta) / 864e5;
  	                break; // 1000 * 60 * 60 * 24, negate dst
  	            case 'week':
  	                output = (this - that - zoneDelta) / 6048e5;
  	                break; // 1000 * 60 * 60 * 24 * 7, negate dst
  	            default:
  	                output = this - that;
  	        }

  	        return asFloat ? output : absFloor(output);
  	    }

  	    function monthDiff(a, b) {
  	        if (a.date() < b.date()) {
  	            // end-of-month calculations work correct when the start month has more
  	            // days than the end month.
  	            return -monthDiff(b, a);
  	        }
  	        // difference in months
  	        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
  	            // b is in (anchor - 1 month, anchor + 1 month)
  	            anchor = a.clone().add(wholeMonthDiff, 'months'),
  	            anchor2,
  	            adjust;

  	        if (b - anchor < 0) {
  	            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
  	            // linear across the month
  	            adjust = (b - anchor) / (anchor - anchor2);
  	        } else {
  	            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
  	            // linear across the month
  	            adjust = (b - anchor) / (anchor2 - anchor);
  	        }

  	        //check for negative zero, return zero if negative zero
  	        return -(wholeMonthDiff + adjust) || 0;
  	    }

  	    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
  	    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

  	    function toString() {
  	        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
  	    }

  	    function toISOString(keepOffset) {
  	        if (!this.isValid()) {
  	            return null;
  	        }
  	        var utc = keepOffset !== true,
  	            m = utc ? this.clone().utc() : this;
  	        if (m.year() < 0 || m.year() > 9999) {
  	            return formatMoment(
  	                m,
  	                utc
  	                    ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]'
  	                    : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ'
  	            );
  	        }
  	        if (isFunction(Date.prototype.toISOString)) {
  	            // native implementation is ~50x faster, use it when we can
  	            if (utc) {
  	                return this.toDate().toISOString();
  	            } else {
  	                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000)
  	                    .toISOString()
  	                    .replace('Z', formatMoment(m, 'Z'));
  	            }
  	        }
  	        return formatMoment(
  	            m,
  	            utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ'
  	        );
  	    }

  	    /**
  	     * Return a human readable representation of a moment that can
  	     * also be evaluated to get a new moment which is the same
  	     *
  	     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
  	     */
  	    function inspect() {
  	        if (!this.isValid()) {
  	            return 'moment.invalid(/* ' + this._i + ' */)';
  	        }
  	        var func = 'moment',
  	            zone = '',
  	            prefix,
  	            year,
  	            datetime,
  	            suffix;
  	        if (!this.isLocal()) {
  	            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
  	            zone = 'Z';
  	        }
  	        prefix = '[' + func + '("]';
  	        year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
  	        datetime = '-MM-DD[T]HH:mm:ss.SSS';
  	        suffix = zone + '[")]';

  	        return this.format(prefix + year + datetime + suffix);
  	    }

  	    function format(inputString) {
  	        if (!inputString) {
  	            inputString = this.isUtc()
  	                ? hooks.defaultFormatUtc
  	                : hooks.defaultFormat;
  	        }
  	        var output = formatMoment(this, inputString);
  	        return this.localeData().postformat(output);
  	    }

  	    function from(time, withoutSuffix) {
  	        if (
  	            this.isValid() &&
  	            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
  	        ) {
  	            return createDuration({ to: this, from: time })
  	                .locale(this.locale())
  	                .humanize(!withoutSuffix);
  	        } else {
  	            return this.localeData().invalidDate();
  	        }
  	    }

  	    function fromNow(withoutSuffix) {
  	        return this.from(createLocal(), withoutSuffix);
  	    }

  	    function to(time, withoutSuffix) {
  	        if (
  	            this.isValid() &&
  	            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
  	        ) {
  	            return createDuration({ from: this, to: time })
  	                .locale(this.locale())
  	                .humanize(!withoutSuffix);
  	        } else {
  	            return this.localeData().invalidDate();
  	        }
  	    }

  	    function toNow(withoutSuffix) {
  	        return this.to(createLocal(), withoutSuffix);
  	    }

  	    // If passed a locale key, it will set the locale for this
  	    // instance.  Otherwise, it will return the locale configuration
  	    // variables for this instance.
  	    function locale(key) {
  	        var newLocaleData;

  	        if (key === undefined) {
  	            return this._locale._abbr;
  	        } else {
  	            newLocaleData = getLocale(key);
  	            if (newLocaleData != null) {
  	                this._locale = newLocaleData;
  	            }
  	            return this;
  	        }
  	    }

  	    var lang = deprecate(
  	        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
  	        function (key) {
  	            if (key === undefined) {
  	                return this.localeData();
  	            } else {
  	                return this.locale(key);
  	            }
  	        }
  	    );

  	    function localeData() {
  	        return this._locale;
  	    }

  	    var MS_PER_SECOND = 1000,
  	        MS_PER_MINUTE = 60 * MS_PER_SECOND,
  	        MS_PER_HOUR = 60 * MS_PER_MINUTE,
  	        MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

  	    // actual modulo - handles negative numbers (for dates before 1970):
  	    function mod$1(dividend, divisor) {
  	        return ((dividend % divisor) + divisor) % divisor;
  	    }

  	    function localStartOfDate(y, m, d) {
  	        // the date constructor remaps years 0-99 to 1900-1999
  	        if (y < 100 && y >= 0) {
  	            // preserve leap years using a full 400 year cycle, then reset
  	            return new Date(y + 400, m, d) - MS_PER_400_YEARS;
  	        } else {
  	            return new Date(y, m, d).valueOf();
  	        }
  	    }

  	    function utcStartOfDate(y, m, d) {
  	        // Date.UTC remaps years 0-99 to 1900-1999
  	        if (y < 100 && y >= 0) {
  	            // preserve leap years using a full 400 year cycle, then reset
  	            return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
  	        } else {
  	            return Date.UTC(y, m, d);
  	        }
  	    }

  	    function startOf(units) {
  	        var time, startOfDate;
  	        units = normalizeUnits(units);
  	        if (units === undefined || units === 'millisecond' || !this.isValid()) {
  	            return this;
  	        }

  	        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

  	        switch (units) {
  	            case 'year':
  	                time = startOfDate(this.year(), 0, 1);
  	                break;
  	            case 'quarter':
  	                time = startOfDate(
  	                    this.year(),
  	                    this.month() - (this.month() % 3),
  	                    1
  	                );
  	                break;
  	            case 'month':
  	                time = startOfDate(this.year(), this.month(), 1);
  	                break;
  	            case 'week':
  	                time = startOfDate(
  	                    this.year(),
  	                    this.month(),
  	                    this.date() - this.weekday()
  	                );
  	                break;
  	            case 'isoWeek':
  	                time = startOfDate(
  	                    this.year(),
  	                    this.month(),
  	                    this.date() - (this.isoWeekday() - 1)
  	                );
  	                break;
  	            case 'day':
  	            case 'date':
  	                time = startOfDate(this.year(), this.month(), this.date());
  	                break;
  	            case 'hour':
  	                time = this._d.valueOf();
  	                time -= mod$1(
  	                    time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
  	                    MS_PER_HOUR
  	                );
  	                break;
  	            case 'minute':
  	                time = this._d.valueOf();
  	                time -= mod$1(time, MS_PER_MINUTE);
  	                break;
  	            case 'second':
  	                time = this._d.valueOf();
  	                time -= mod$1(time, MS_PER_SECOND);
  	                break;
  	        }

  	        this._d.setTime(time);
  	        hooks.updateOffset(this, true);
  	        return this;
  	    }

  	    function endOf(units) {
  	        var time, startOfDate;
  	        units = normalizeUnits(units);
  	        if (units === undefined || units === 'millisecond' || !this.isValid()) {
  	            return this;
  	        }

  	        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

  	        switch (units) {
  	            case 'year':
  	                time = startOfDate(this.year() + 1, 0, 1) - 1;
  	                break;
  	            case 'quarter':
  	                time =
  	                    startOfDate(
  	                        this.year(),
  	                        this.month() - (this.month() % 3) + 3,
  	                        1
  	                    ) - 1;
  	                break;
  	            case 'month':
  	                time = startOfDate(this.year(), this.month() + 1, 1) - 1;
  	                break;
  	            case 'week':
  	                time =
  	                    startOfDate(
  	                        this.year(),
  	                        this.month(),
  	                        this.date() - this.weekday() + 7
  	                    ) - 1;
  	                break;
  	            case 'isoWeek':
  	                time =
  	                    startOfDate(
  	                        this.year(),
  	                        this.month(),
  	                        this.date() - (this.isoWeekday() - 1) + 7
  	                    ) - 1;
  	                break;
  	            case 'day':
  	            case 'date':
  	                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
  	                break;
  	            case 'hour':
  	                time = this._d.valueOf();
  	                time +=
  	                    MS_PER_HOUR -
  	                    mod$1(
  	                        time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
  	                        MS_PER_HOUR
  	                    ) -
  	                    1;
  	                break;
  	            case 'minute':
  	                time = this._d.valueOf();
  	                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
  	                break;
  	            case 'second':
  	                time = this._d.valueOf();
  	                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
  	                break;
  	        }

  	        this._d.setTime(time);
  	        hooks.updateOffset(this, true);
  	        return this;
  	    }

  	    function valueOf() {
  	        return this._d.valueOf() - (this._offset || 0) * 60000;
  	    }

  	    function unix() {
  	        return Math.floor(this.valueOf() / 1000);
  	    }

  	    function toDate() {
  	        return new Date(this.valueOf());
  	    }

  	    function toArray() {
  	        var m = this;
  	        return [
  	            m.year(),
  	            m.month(),
  	            m.date(),
  	            m.hour(),
  	            m.minute(),
  	            m.second(),
  	            m.millisecond(),
  	        ];
  	    }

  	    function toObject() {
  	        var m = this;
  	        return {
  	            years: m.year(),
  	            months: m.month(),
  	            date: m.date(),
  	            hours: m.hours(),
  	            minutes: m.minutes(),
  	            seconds: m.seconds(),
  	            milliseconds: m.milliseconds(),
  	        };
  	    }

  	    function toJSON() {
  	        // new Date(NaN).toJSON() === null
  	        return this.isValid() ? this.toISOString() : null;
  	    }

  	    function isValid$2() {
  	        return isValid(this);
  	    }

  	    function parsingFlags() {
  	        return extend({}, getParsingFlags(this));
  	    }

  	    function invalidAt() {
  	        return getParsingFlags(this).overflow;
  	    }

  	    function creationData() {
  	        return {
  	            input: this._i,
  	            format: this._f,
  	            locale: this._locale,
  	            isUTC: this._isUTC,
  	            strict: this._strict,
  	        };
  	    }

  	    addFormatToken('N', 0, 0, 'eraAbbr');
  	    addFormatToken('NN', 0, 0, 'eraAbbr');
  	    addFormatToken('NNN', 0, 0, 'eraAbbr');
  	    addFormatToken('NNNN', 0, 0, 'eraName');
  	    addFormatToken('NNNNN', 0, 0, 'eraNarrow');

  	    addFormatToken('y', ['y', 1], 'yo', 'eraYear');
  	    addFormatToken('y', ['yy', 2], 0, 'eraYear');
  	    addFormatToken('y', ['yyy', 3], 0, 'eraYear');
  	    addFormatToken('y', ['yyyy', 4], 0, 'eraYear');

  	    addRegexToken('N', matchEraAbbr);
  	    addRegexToken('NN', matchEraAbbr);
  	    addRegexToken('NNN', matchEraAbbr);
  	    addRegexToken('NNNN', matchEraName);
  	    addRegexToken('NNNNN', matchEraNarrow);

  	    addParseToken(
  	        ['N', 'NN', 'NNN', 'NNNN', 'NNNNN'],
  	        function (input, array, config, token) {
  	            var era = config._locale.erasParse(input, token, config._strict);
  	            if (era) {
  	                getParsingFlags(config).era = era;
  	            } else {
  	                getParsingFlags(config).invalidEra = input;
  	            }
  	        }
  	    );

  	    addRegexToken('y', matchUnsigned);
  	    addRegexToken('yy', matchUnsigned);
  	    addRegexToken('yyy', matchUnsigned);
  	    addRegexToken('yyyy', matchUnsigned);
  	    addRegexToken('yo', matchEraYearOrdinal);

  	    addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);
  	    addParseToken(['yo'], function (input, array, config, token) {
  	        var match;
  	        if (config._locale._eraYearOrdinalRegex) {
  	            match = input.match(config._locale._eraYearOrdinalRegex);
  	        }

  	        if (config._locale.eraYearOrdinalParse) {
  	            array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
  	        } else {
  	            array[YEAR] = parseInt(input, 10);
  	        }
  	    });

  	    function localeEras(m, format) {
  	        var i,
  	            l,
  	            date,
  	            eras = this._eras || getLocale('en')._eras;
  	        for (i = 0, l = eras.length; i < l; ++i) {
  	            switch (typeof eras[i].since) {
  	                case 'string':
  	                    // truncate time
  	                    date = hooks(eras[i].since).startOf('day');
  	                    eras[i].since = date.valueOf();
  	                    break;
  	            }

  	            switch (typeof eras[i].until) {
  	                case 'undefined':
  	                    eras[i].until = +Infinity;
  	                    break;
  	                case 'string':
  	                    // truncate time
  	                    date = hooks(eras[i].until).startOf('day').valueOf();
  	                    eras[i].until = date.valueOf();
  	                    break;
  	            }
  	        }
  	        return eras;
  	    }

  	    function localeErasParse(eraName, format, strict) {
  	        var i,
  	            l,
  	            eras = this.eras(),
  	            name,
  	            abbr,
  	            narrow;
  	        eraName = eraName.toUpperCase();

  	        for (i = 0, l = eras.length; i < l; ++i) {
  	            name = eras[i].name.toUpperCase();
  	            abbr = eras[i].abbr.toUpperCase();
  	            narrow = eras[i].narrow.toUpperCase();

  	            if (strict) {
  	                switch (format) {
  	                    case 'N':
  	                    case 'NN':
  	                    case 'NNN':
  	                        if (abbr === eraName) {
  	                            return eras[i];
  	                        }
  	                        break;

  	                    case 'NNNN':
  	                        if (name === eraName) {
  	                            return eras[i];
  	                        }
  	                        break;

  	                    case 'NNNNN':
  	                        if (narrow === eraName) {
  	                            return eras[i];
  	                        }
  	                        break;
  	                }
  	            } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
  	                return eras[i];
  	            }
  	        }
  	    }

  	    function localeErasConvertYear(era, year) {
  	        var dir = era.since <= era.until ? +1 : -1;
  	        if (year === undefined) {
  	            return hooks(era.since).year();
  	        } else {
  	            return hooks(era.since).year() + (year - era.offset) * dir;
  	        }
  	    }

  	    function getEraName() {
  	        var i,
  	            l,
  	            val,
  	            eras = this.localeData().eras();
  	        for (i = 0, l = eras.length; i < l; ++i) {
  	            // truncate time
  	            val = this.clone().startOf('day').valueOf();

  	            if (eras[i].since <= val && val <= eras[i].until) {
  	                return eras[i].name;
  	            }
  	            if (eras[i].until <= val && val <= eras[i].since) {
  	                return eras[i].name;
  	            }
  	        }

  	        return '';
  	    }

  	    function getEraNarrow() {
  	        var i,
  	            l,
  	            val,
  	            eras = this.localeData().eras();
  	        for (i = 0, l = eras.length; i < l; ++i) {
  	            // truncate time
  	            val = this.clone().startOf('day').valueOf();

  	            if (eras[i].since <= val && val <= eras[i].until) {
  	                return eras[i].narrow;
  	            }
  	            if (eras[i].until <= val && val <= eras[i].since) {
  	                return eras[i].narrow;
  	            }
  	        }

  	        return '';
  	    }

  	    function getEraAbbr() {
  	        var i,
  	            l,
  	            val,
  	            eras = this.localeData().eras();
  	        for (i = 0, l = eras.length; i < l; ++i) {
  	            // truncate time
  	            val = this.clone().startOf('day').valueOf();

  	            if (eras[i].since <= val && val <= eras[i].until) {
  	                return eras[i].abbr;
  	            }
  	            if (eras[i].until <= val && val <= eras[i].since) {
  	                return eras[i].abbr;
  	            }
  	        }

  	        return '';
  	    }

  	    function getEraYear() {
  	        var i,
  	            l,
  	            dir,
  	            val,
  	            eras = this.localeData().eras();
  	        for (i = 0, l = eras.length; i < l; ++i) {
  	            dir = eras[i].since <= eras[i].until ? +1 : -1;

  	            // truncate time
  	            val = this.clone().startOf('day').valueOf();

  	            if (
  	                (eras[i].since <= val && val <= eras[i].until) ||
  	                (eras[i].until <= val && val <= eras[i].since)
  	            ) {
  	                return (
  	                    (this.year() - hooks(eras[i].since).year()) * dir +
  	                    eras[i].offset
  	                );
  	            }
  	        }

  	        return this.year();
  	    }

  	    function erasNameRegex(isStrict) {
  	        if (!hasOwnProp(this, '_erasNameRegex')) {
  	            computeErasParse.call(this);
  	        }
  	        return isStrict ? this._erasNameRegex : this._erasRegex;
  	    }

  	    function erasAbbrRegex(isStrict) {
  	        if (!hasOwnProp(this, '_erasAbbrRegex')) {
  	            computeErasParse.call(this);
  	        }
  	        return isStrict ? this._erasAbbrRegex : this._erasRegex;
  	    }

  	    function erasNarrowRegex(isStrict) {
  	        if (!hasOwnProp(this, '_erasNarrowRegex')) {
  	            computeErasParse.call(this);
  	        }
  	        return isStrict ? this._erasNarrowRegex : this._erasRegex;
  	    }

  	    function matchEraAbbr(isStrict, locale) {
  	        return locale.erasAbbrRegex(isStrict);
  	    }

  	    function matchEraName(isStrict, locale) {
  	        return locale.erasNameRegex(isStrict);
  	    }

  	    function matchEraNarrow(isStrict, locale) {
  	        return locale.erasNarrowRegex(isStrict);
  	    }

  	    function matchEraYearOrdinal(isStrict, locale) {
  	        return locale._eraYearOrdinalRegex || matchUnsigned;
  	    }

  	    function computeErasParse() {
  	        var abbrPieces = [],
  	            namePieces = [],
  	            narrowPieces = [],
  	            mixedPieces = [],
  	            i,
  	            l,
  	            eras = this.eras();

  	        for (i = 0, l = eras.length; i < l; ++i) {
  	            namePieces.push(regexEscape(eras[i].name));
  	            abbrPieces.push(regexEscape(eras[i].abbr));
  	            narrowPieces.push(regexEscape(eras[i].narrow));

  	            mixedPieces.push(regexEscape(eras[i].name));
  	            mixedPieces.push(regexEscape(eras[i].abbr));
  	            mixedPieces.push(regexEscape(eras[i].narrow));
  	        }

  	        this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
  	        this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');
  	        this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');
  	        this._erasNarrowRegex = new RegExp(
  	            '^(' + narrowPieces.join('|') + ')',
  	            'i'
  	        );
  	    }

  	    // FORMATTING

  	    addFormatToken(0, ['gg', 2], 0, function () {
  	        return this.weekYear() % 100;
  	    });

  	    addFormatToken(0, ['GG', 2], 0, function () {
  	        return this.isoWeekYear() % 100;
  	    });

  	    function addWeekYearFormatToken(token, getter) {
  	        addFormatToken(0, [token, token.length], 0, getter);
  	    }

  	    addWeekYearFormatToken('gggg', 'weekYear');
  	    addWeekYearFormatToken('ggggg', 'weekYear');
  	    addWeekYearFormatToken('GGGG', 'isoWeekYear');
  	    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

  	    // ALIASES

  	    addUnitAlias('weekYear', 'gg');
  	    addUnitAlias('isoWeekYear', 'GG');

  	    // PRIORITY

  	    addUnitPriority('weekYear', 1);
  	    addUnitPriority('isoWeekYear', 1);

  	    // PARSING

  	    addRegexToken('G', matchSigned);
  	    addRegexToken('g', matchSigned);
  	    addRegexToken('GG', match1to2, match2);
  	    addRegexToken('gg', match1to2, match2);
  	    addRegexToken('GGGG', match1to4, match4);
  	    addRegexToken('gggg', match1to4, match4);
  	    addRegexToken('GGGGG', match1to6, match6);
  	    addRegexToken('ggggg', match1to6, match6);

  	    addWeekParseToken(
  	        ['gggg', 'ggggg', 'GGGG', 'GGGGG'],
  	        function (input, week, config, token) {
  	            week[token.substr(0, 2)] = toInt(input);
  	        }
  	    );

  	    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
  	        week[token] = hooks.parseTwoDigitYear(input);
  	    });

  	    // MOMENTS

  	    function getSetWeekYear(input) {
  	        return getSetWeekYearHelper.call(
  	            this,
  	            input,
  	            this.week(),
  	            this.weekday(),
  	            this.localeData()._week.dow,
  	            this.localeData()._week.doy
  	        );
  	    }

  	    function getSetISOWeekYear(input) {
  	        return getSetWeekYearHelper.call(
  	            this,
  	            input,
  	            this.isoWeek(),
  	            this.isoWeekday(),
  	            1,
  	            4
  	        );
  	    }

  	    function getISOWeeksInYear() {
  	        return weeksInYear(this.year(), 1, 4);
  	    }

  	    function getISOWeeksInISOWeekYear() {
  	        return weeksInYear(this.isoWeekYear(), 1, 4);
  	    }

  	    function getWeeksInYear() {
  	        var weekInfo = this.localeData()._week;
  	        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
  	    }

  	    function getWeeksInWeekYear() {
  	        var weekInfo = this.localeData()._week;
  	        return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
  	    }

  	    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
  	        var weeksTarget;
  	        if (input == null) {
  	            return weekOfYear(this, dow, doy).year;
  	        } else {
  	            weeksTarget = weeksInYear(input, dow, doy);
  	            if (week > weeksTarget) {
  	                week = weeksTarget;
  	            }
  	            return setWeekAll.call(this, input, week, weekday, dow, doy);
  	        }
  	    }

  	    function setWeekAll(weekYear, week, weekday, dow, doy) {
  	        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
  	            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

  	        this.year(date.getUTCFullYear());
  	        this.month(date.getUTCMonth());
  	        this.date(date.getUTCDate());
  	        return this;
  	    }

  	    // FORMATTING

  	    addFormatToken('Q', 0, 'Qo', 'quarter');

  	    // ALIASES

  	    addUnitAlias('quarter', 'Q');

  	    // PRIORITY

  	    addUnitPriority('quarter', 7);

  	    // PARSING

  	    addRegexToken('Q', match1);
  	    addParseToken('Q', function (input, array) {
  	        array[MONTH] = (toInt(input) - 1) * 3;
  	    });

  	    // MOMENTS

  	    function getSetQuarter(input) {
  	        return input == null
  	            ? Math.ceil((this.month() + 1) / 3)
  	            : this.month((input - 1) * 3 + (this.month() % 3));
  	    }

  	    // FORMATTING

  	    addFormatToken('D', ['DD', 2], 'Do', 'date');

  	    // ALIASES

  	    addUnitAlias('date', 'D');

  	    // PRIORITY
  	    addUnitPriority('date', 9);

  	    // PARSING

  	    addRegexToken('D', match1to2);
  	    addRegexToken('DD', match1to2, match2);
  	    addRegexToken('Do', function (isStrict, locale) {
  	        // TODO: Remove "ordinalParse" fallback in next major release.
  	        return isStrict
  	            ? locale._dayOfMonthOrdinalParse || locale._ordinalParse
  	            : locale._dayOfMonthOrdinalParseLenient;
  	    });

  	    addParseToken(['D', 'DD'], DATE);
  	    addParseToken('Do', function (input, array) {
  	        array[DATE] = toInt(input.match(match1to2)[0]);
  	    });

  	    // MOMENTS

  	    var getSetDayOfMonth = makeGetSet('Date', true);

  	    // FORMATTING

  	    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

  	    // ALIASES

  	    addUnitAlias('dayOfYear', 'DDD');

  	    // PRIORITY
  	    addUnitPriority('dayOfYear', 4);

  	    // PARSING

  	    addRegexToken('DDD', match1to3);
  	    addRegexToken('DDDD', match3);
  	    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
  	        config._dayOfYear = toInt(input);
  	    });

  	    // HELPERS

  	    // MOMENTS

  	    function getSetDayOfYear(input) {
  	        var dayOfYear =
  	            Math.round(
  	                (this.clone().startOf('day') - this.clone().startOf('year')) / 864e5
  	            ) + 1;
  	        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
  	    }

  	    // FORMATTING

  	    addFormatToken('m', ['mm', 2], 0, 'minute');

  	    // ALIASES

  	    addUnitAlias('minute', 'm');

  	    // PRIORITY

  	    addUnitPriority('minute', 14);

  	    // PARSING

  	    addRegexToken('m', match1to2);
  	    addRegexToken('mm', match1to2, match2);
  	    addParseToken(['m', 'mm'], MINUTE);

  	    // MOMENTS

  	    var getSetMinute = makeGetSet('Minutes', false);

  	    // FORMATTING

  	    addFormatToken('s', ['ss', 2], 0, 'second');

  	    // ALIASES

  	    addUnitAlias('second', 's');

  	    // PRIORITY

  	    addUnitPriority('second', 15);

  	    // PARSING

  	    addRegexToken('s', match1to2);
  	    addRegexToken('ss', match1to2, match2);
  	    addParseToken(['s', 'ss'], SECOND);

  	    // MOMENTS

  	    var getSetSecond = makeGetSet('Seconds', false);

  	    // FORMATTING

  	    addFormatToken('S', 0, 0, function () {
  	        return ~~(this.millisecond() / 100);
  	    });

  	    addFormatToken(0, ['SS', 2], 0, function () {
  	        return ~~(this.millisecond() / 10);
  	    });

  	    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
  	    addFormatToken(0, ['SSSS', 4], 0, function () {
  	        return this.millisecond() * 10;
  	    });
  	    addFormatToken(0, ['SSSSS', 5], 0, function () {
  	        return this.millisecond() * 100;
  	    });
  	    addFormatToken(0, ['SSSSSS', 6], 0, function () {
  	        return this.millisecond() * 1000;
  	    });
  	    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
  	        return this.millisecond() * 10000;
  	    });
  	    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
  	        return this.millisecond() * 100000;
  	    });
  	    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
  	        return this.millisecond() * 1000000;
  	    });

  	    // ALIASES

  	    addUnitAlias('millisecond', 'ms');

  	    // PRIORITY

  	    addUnitPriority('millisecond', 16);

  	    // PARSING

  	    addRegexToken('S', match1to3, match1);
  	    addRegexToken('SS', match1to3, match2);
  	    addRegexToken('SSS', match1to3, match3);

  	    var token, getSetMillisecond;
  	    for (token = 'SSSS'; token.length <= 9; token += 'S') {
  	        addRegexToken(token, matchUnsigned);
  	    }

  	    function parseMs(input, array) {
  	        array[MILLISECOND] = toInt(('0.' + input) * 1000);
  	    }

  	    for (token = 'S'; token.length <= 9; token += 'S') {
  	        addParseToken(token, parseMs);
  	    }

  	    getSetMillisecond = makeGetSet('Milliseconds', false);

  	    // FORMATTING

  	    addFormatToken('z', 0, 0, 'zoneAbbr');
  	    addFormatToken('zz', 0, 0, 'zoneName');

  	    // MOMENTS

  	    function getZoneAbbr() {
  	        return this._isUTC ? 'UTC' : '';
  	    }

  	    function getZoneName() {
  	        return this._isUTC ? 'Coordinated Universal Time' : '';
  	    }

  	    var proto = Moment.prototype;

  	    proto.add = add;
  	    proto.calendar = calendar$1;
  	    proto.clone = clone;
  	    proto.diff = diff;
  	    proto.endOf = endOf;
  	    proto.format = format;
  	    proto.from = from;
  	    proto.fromNow = fromNow;
  	    proto.to = to;
  	    proto.toNow = toNow;
  	    proto.get = stringGet;
  	    proto.invalidAt = invalidAt;
  	    proto.isAfter = isAfter;
  	    proto.isBefore = isBefore;
  	    proto.isBetween = isBetween;
  	    proto.isSame = isSame;
  	    proto.isSameOrAfter = isSameOrAfter;
  	    proto.isSameOrBefore = isSameOrBefore;
  	    proto.isValid = isValid$2;
  	    proto.lang = lang;
  	    proto.locale = locale;
  	    proto.localeData = localeData;
  	    proto.max = prototypeMax;
  	    proto.min = prototypeMin;
  	    proto.parsingFlags = parsingFlags;
  	    proto.set = stringSet;
  	    proto.startOf = startOf;
  	    proto.subtract = subtract;
  	    proto.toArray = toArray;
  	    proto.toObject = toObject;
  	    proto.toDate = toDate;
  	    proto.toISOString = toISOString;
  	    proto.inspect = inspect;
  	    if (typeof Symbol !== 'undefined' && Symbol.for != null) {
  	        proto[Symbol.for('nodejs.util.inspect.custom')] = function () {
  	            return 'Moment<' + this.format() + '>';
  	        };
  	    }
  	    proto.toJSON = toJSON;
  	    proto.toString = toString;
  	    proto.unix = unix;
  	    proto.valueOf = valueOf;
  	    proto.creationData = creationData;
  	    proto.eraName = getEraName;
  	    proto.eraNarrow = getEraNarrow;
  	    proto.eraAbbr = getEraAbbr;
  	    proto.eraYear = getEraYear;
  	    proto.year = getSetYear;
  	    proto.isLeapYear = getIsLeapYear;
  	    proto.weekYear = getSetWeekYear;
  	    proto.isoWeekYear = getSetISOWeekYear;
  	    proto.quarter = proto.quarters = getSetQuarter;
  	    proto.month = getSetMonth;
  	    proto.daysInMonth = getDaysInMonth;
  	    proto.week = proto.weeks = getSetWeek;
  	    proto.isoWeek = proto.isoWeeks = getSetISOWeek;
  	    proto.weeksInYear = getWeeksInYear;
  	    proto.weeksInWeekYear = getWeeksInWeekYear;
  	    proto.isoWeeksInYear = getISOWeeksInYear;
  	    proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
  	    proto.date = getSetDayOfMonth;
  	    proto.day = proto.days = getSetDayOfWeek;
  	    proto.weekday = getSetLocaleDayOfWeek;
  	    proto.isoWeekday = getSetISODayOfWeek;
  	    proto.dayOfYear = getSetDayOfYear;
  	    proto.hour = proto.hours = getSetHour;
  	    proto.minute = proto.minutes = getSetMinute;
  	    proto.second = proto.seconds = getSetSecond;
  	    proto.millisecond = proto.milliseconds = getSetMillisecond;
  	    proto.utcOffset = getSetOffset;
  	    proto.utc = setOffsetToUTC;
  	    proto.local = setOffsetToLocal;
  	    proto.parseZone = setOffsetToParsedOffset;
  	    proto.hasAlignedHourOffset = hasAlignedHourOffset;
  	    proto.isDST = isDaylightSavingTime;
  	    proto.isLocal = isLocal;
  	    proto.isUtcOffset = isUtcOffset;
  	    proto.isUtc = isUtc;
  	    proto.isUTC = isUtc;
  	    proto.zoneAbbr = getZoneAbbr;
  	    proto.zoneName = getZoneName;
  	    proto.dates = deprecate(
  	        'dates accessor is deprecated. Use date instead.',
  	        getSetDayOfMonth
  	    );
  	    proto.months = deprecate(
  	        'months accessor is deprecated. Use month instead',
  	        getSetMonth
  	    );
  	    proto.years = deprecate(
  	        'years accessor is deprecated. Use year instead',
  	        getSetYear
  	    );
  	    proto.zone = deprecate(
  	        'moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/',
  	        getSetZone
  	    );
  	    proto.isDSTShifted = deprecate(
  	        'isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information',
  	        isDaylightSavingTimeShifted
  	    );

  	    function createUnix(input) {
  	        return createLocal(input * 1000);
  	    }

  	    function createInZone() {
  	        return createLocal.apply(null, arguments).parseZone();
  	    }

  	    function preParsePostFormat(string) {
  	        return string;
  	    }

  	    var proto$1 = Locale.prototype;

  	    proto$1.calendar = calendar;
  	    proto$1.longDateFormat = longDateFormat;
  	    proto$1.invalidDate = invalidDate;
  	    proto$1.ordinal = ordinal;
  	    proto$1.preparse = preParsePostFormat;
  	    proto$1.postformat = preParsePostFormat;
  	    proto$1.relativeTime = relativeTime;
  	    proto$1.pastFuture = pastFuture;
  	    proto$1.set = set;
  	    proto$1.eras = localeEras;
  	    proto$1.erasParse = localeErasParse;
  	    proto$1.erasConvertYear = localeErasConvertYear;
  	    proto$1.erasAbbrRegex = erasAbbrRegex;
  	    proto$1.erasNameRegex = erasNameRegex;
  	    proto$1.erasNarrowRegex = erasNarrowRegex;

  	    proto$1.months = localeMonths;
  	    proto$1.monthsShort = localeMonthsShort;
  	    proto$1.monthsParse = localeMonthsParse;
  	    proto$1.monthsRegex = monthsRegex;
  	    proto$1.monthsShortRegex = monthsShortRegex;
  	    proto$1.week = localeWeek;
  	    proto$1.firstDayOfYear = localeFirstDayOfYear;
  	    proto$1.firstDayOfWeek = localeFirstDayOfWeek;

  	    proto$1.weekdays = localeWeekdays;
  	    proto$1.weekdaysMin = localeWeekdaysMin;
  	    proto$1.weekdaysShort = localeWeekdaysShort;
  	    proto$1.weekdaysParse = localeWeekdaysParse;

  	    proto$1.weekdaysRegex = weekdaysRegex;
  	    proto$1.weekdaysShortRegex = weekdaysShortRegex;
  	    proto$1.weekdaysMinRegex = weekdaysMinRegex;

  	    proto$1.isPM = localeIsPM;
  	    proto$1.meridiem = localeMeridiem;

  	    function get$1(format, index, field, setter) {
  	        var locale = getLocale(),
  	            utc = createUTC().set(setter, index);
  	        return locale[field](utc, format);
  	    }

  	    function listMonthsImpl(format, index, field) {
  	        if (isNumber(format)) {
  	            index = format;
  	            format = undefined;
  	        }

  	        format = format || '';

  	        if (index != null) {
  	            return get$1(format, index, field, 'month');
  	        }

  	        var i,
  	            out = [];
  	        for (i = 0; i < 12; i++) {
  	            out[i] = get$1(format, i, field, 'month');
  	        }
  	        return out;
  	    }

  	    // ()
  	    // (5)
  	    // (fmt, 5)
  	    // (fmt)
  	    // (true)
  	    // (true, 5)
  	    // (true, fmt, 5)
  	    // (true, fmt)
  	    function listWeekdaysImpl(localeSorted, format, index, field) {
  	        if (typeof localeSorted === 'boolean') {
  	            if (isNumber(format)) {
  	                index = format;
  	                format = undefined;
  	            }

  	            format = format || '';
  	        } else {
  	            format = localeSorted;
  	            index = format;
  	            localeSorted = false;

  	            if (isNumber(format)) {
  	                index = format;
  	                format = undefined;
  	            }

  	            format = format || '';
  	        }

  	        var locale = getLocale(),
  	            shift = localeSorted ? locale._week.dow : 0,
  	            i,
  	            out = [];

  	        if (index != null) {
  	            return get$1(format, (index + shift) % 7, field, 'day');
  	        }

  	        for (i = 0; i < 7; i++) {
  	            out[i] = get$1(format, (i + shift) % 7, field, 'day');
  	        }
  	        return out;
  	    }

  	    function listMonths(format, index) {
  	        return listMonthsImpl(format, index, 'months');
  	    }

  	    function listMonthsShort(format, index) {
  	        return listMonthsImpl(format, index, 'monthsShort');
  	    }

  	    function listWeekdays(localeSorted, format, index) {
  	        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
  	    }

  	    function listWeekdaysShort(localeSorted, format, index) {
  	        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
  	    }

  	    function listWeekdaysMin(localeSorted, format, index) {
  	        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
  	    }

  	    getSetGlobalLocale('en', {
  	        eras: [
  	            {
  	                since: '0001-01-01',
  	                until: +Infinity,
  	                offset: 1,
  	                name: 'Anno Domini',
  	                narrow: 'AD',
  	                abbr: 'AD',
  	            },
  	            {
  	                since: '0000-12-31',
  	                until: -Infinity,
  	                offset: 1,
  	                name: 'Before Christ',
  	                narrow: 'BC',
  	                abbr: 'BC',
  	            },
  	        ],
  	        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
  	        ordinal: function (number) {
  	            var b = number % 10,
  	                output =
  	                    toInt((number % 100) / 10) === 1
  	                        ? 'th'
  	                        : b === 1
  	                        ? 'st'
  	                        : b === 2
  	                        ? 'nd'
  	                        : b === 3
  	                        ? 'rd'
  	                        : 'th';
  	            return number + output;
  	        },
  	    });

  	    // Side effect imports

  	    hooks.lang = deprecate(
  	        'moment.lang is deprecated. Use moment.locale instead.',
  	        getSetGlobalLocale
  	    );
  	    hooks.langData = deprecate(
  	        'moment.langData is deprecated. Use moment.localeData instead.',
  	        getLocale
  	    );

  	    var mathAbs = Math.abs;

  	    function abs() {
  	        var data = this._data;

  	        this._milliseconds = mathAbs(this._milliseconds);
  	        this._days = mathAbs(this._days);
  	        this._months = mathAbs(this._months);

  	        data.milliseconds = mathAbs(data.milliseconds);
  	        data.seconds = mathAbs(data.seconds);
  	        data.minutes = mathAbs(data.minutes);
  	        data.hours = mathAbs(data.hours);
  	        data.months = mathAbs(data.months);
  	        data.years = mathAbs(data.years);

  	        return this;
  	    }

  	    function addSubtract$1(duration, input, value, direction) {
  	        var other = createDuration(input, value);

  	        duration._milliseconds += direction * other._milliseconds;
  	        duration._days += direction * other._days;
  	        duration._months += direction * other._months;

  	        return duration._bubble();
  	    }

  	    // supports only 2.0-style add(1, 's') or add(duration)
  	    function add$1(input, value) {
  	        return addSubtract$1(this, input, value, 1);
  	    }

  	    // supports only 2.0-style subtract(1, 's') or subtract(duration)
  	    function subtract$1(input, value) {
  	        return addSubtract$1(this, input, value, -1);
  	    }

  	    function absCeil(number) {
  	        if (number < 0) {
  	            return Math.floor(number);
  	        } else {
  	            return Math.ceil(number);
  	        }
  	    }

  	    function bubble() {
  	        var milliseconds = this._milliseconds,
  	            days = this._days,
  	            months = this._months,
  	            data = this._data,
  	            seconds,
  	            minutes,
  	            hours,
  	            years,
  	            monthsFromDays;

  	        // if we have a mix of positive and negative values, bubble down first
  	        // check: https://github.com/moment/moment/issues/2166
  	        if (
  	            !(
  	                (milliseconds >= 0 && days >= 0 && months >= 0) ||
  	                (milliseconds <= 0 && days <= 0 && months <= 0)
  	            )
  	        ) {
  	            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
  	            days = 0;
  	            months = 0;
  	        }

  	        // The following code bubbles up values, see the tests for
  	        // examples of what that means.
  	        data.milliseconds = milliseconds % 1000;

  	        seconds = absFloor(milliseconds / 1000);
  	        data.seconds = seconds % 60;

  	        minutes = absFloor(seconds / 60);
  	        data.minutes = minutes % 60;

  	        hours = absFloor(minutes / 60);
  	        data.hours = hours % 24;

  	        days += absFloor(hours / 24);

  	        // convert days to months
  	        monthsFromDays = absFloor(daysToMonths(days));
  	        months += monthsFromDays;
  	        days -= absCeil(monthsToDays(monthsFromDays));

  	        // 12 months -> 1 year
  	        years = absFloor(months / 12);
  	        months %= 12;

  	        data.days = days;
  	        data.months = months;
  	        data.years = years;

  	        return this;
  	    }

  	    function daysToMonths(days) {
  	        // 400 years have 146097 days (taking into account leap year rules)
  	        // 400 years have 12 months === 4800
  	        return (days * 4800) / 146097;
  	    }

  	    function monthsToDays(months) {
  	        // the reverse of daysToMonths
  	        return (months * 146097) / 4800;
  	    }

  	    function as(units) {
  	        if (!this.isValid()) {
  	            return NaN;
  	        }
  	        var days,
  	            months,
  	            milliseconds = this._milliseconds;

  	        units = normalizeUnits(units);

  	        if (units === 'month' || units === 'quarter' || units === 'year') {
  	            days = this._days + milliseconds / 864e5;
  	            months = this._months + daysToMonths(days);
  	            switch (units) {
  	                case 'month':
  	                    return months;
  	                case 'quarter':
  	                    return months / 3;
  	                case 'year':
  	                    return months / 12;
  	            }
  	        } else {
  	            // handle milliseconds separately because of floating point math errors (issue #1867)
  	            days = this._days + Math.round(monthsToDays(this._months));
  	            switch (units) {
  	                case 'week':
  	                    return days / 7 + milliseconds / 6048e5;
  	                case 'day':
  	                    return days + milliseconds / 864e5;
  	                case 'hour':
  	                    return days * 24 + milliseconds / 36e5;
  	                case 'minute':
  	                    return days * 1440 + milliseconds / 6e4;
  	                case 'second':
  	                    return days * 86400 + milliseconds / 1000;
  	                // Math.floor prevents floating point math errors here
  	                case 'millisecond':
  	                    return Math.floor(days * 864e5) + milliseconds;
  	                default:
  	                    throw new Error('Unknown unit ' + units);
  	            }
  	        }
  	    }

  	    // TODO: Use this.as('ms')?
  	    function valueOf$1() {
  	        if (!this.isValid()) {
  	            return NaN;
  	        }
  	        return (
  	            this._milliseconds +
  	            this._days * 864e5 +
  	            (this._months % 12) * 2592e6 +
  	            toInt(this._months / 12) * 31536e6
  	        );
  	    }

  	    function makeAs(alias) {
  	        return function () {
  	            return this.as(alias);
  	        };
  	    }

  	    var asMilliseconds = makeAs('ms'),
  	        asSeconds = makeAs('s'),
  	        asMinutes = makeAs('m'),
  	        asHours = makeAs('h'),
  	        asDays = makeAs('d'),
  	        asWeeks = makeAs('w'),
  	        asMonths = makeAs('M'),
  	        asQuarters = makeAs('Q'),
  	        asYears = makeAs('y');

  	    function clone$1() {
  	        return createDuration(this);
  	    }

  	    function get$2(units) {
  	        units = normalizeUnits(units);
  	        return this.isValid() ? this[units + 's']() : NaN;
  	    }

  	    function makeGetter(name) {
  	        return function () {
  	            return this.isValid() ? this._data[name] : NaN;
  	        };
  	    }

  	    var milliseconds = makeGetter('milliseconds'),
  	        seconds = makeGetter('seconds'),
  	        minutes = makeGetter('minutes'),
  	        hours = makeGetter('hours'),
  	        days = makeGetter('days'),
  	        months = makeGetter('months'),
  	        years = makeGetter('years');

  	    function weeks() {
  	        return absFloor(this.days() / 7);
  	    }

  	    var round = Math.round,
  	        thresholds = {
  	            ss: 44, // a few seconds to seconds
  	            s: 45, // seconds to minute
  	            m: 45, // minutes to hour
  	            h: 22, // hours to day
  	            d: 26, // days to month/week
  	            w: null, // weeks to month
  	            M: 11, // months to year
  	        };

  	    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
  	    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
  	        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
  	    }

  	    function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {
  	        var duration = createDuration(posNegDuration).abs(),
  	            seconds = round(duration.as('s')),
  	            minutes = round(duration.as('m')),
  	            hours = round(duration.as('h')),
  	            days = round(duration.as('d')),
  	            months = round(duration.as('M')),
  	            weeks = round(duration.as('w')),
  	            years = round(duration.as('y')),
  	            a =
  	                (seconds <= thresholds.ss && ['s', seconds]) ||
  	                (seconds < thresholds.s && ['ss', seconds]) ||
  	                (minutes <= 1 && ['m']) ||
  	                (minutes < thresholds.m && ['mm', minutes]) ||
  	                (hours <= 1 && ['h']) ||
  	                (hours < thresholds.h && ['hh', hours]) ||
  	                (days <= 1 && ['d']) ||
  	                (days < thresholds.d && ['dd', days]);

  	        if (thresholds.w != null) {
  	            a =
  	                a ||
  	                (weeks <= 1 && ['w']) ||
  	                (weeks < thresholds.w && ['ww', weeks]);
  	        }
  	        a = a ||
  	            (months <= 1 && ['M']) ||
  	            (months < thresholds.M && ['MM', months]) ||
  	            (years <= 1 && ['y']) || ['yy', years];

  	        a[2] = withoutSuffix;
  	        a[3] = +posNegDuration > 0;
  	        a[4] = locale;
  	        return substituteTimeAgo.apply(null, a);
  	    }

  	    // This function allows you to set the rounding function for relative time strings
  	    function getSetRelativeTimeRounding(roundingFunction) {
  	        if (roundingFunction === undefined) {
  	            return round;
  	        }
  	        if (typeof roundingFunction === 'function') {
  	            round = roundingFunction;
  	            return true;
  	        }
  	        return false;
  	    }

  	    // This function allows you to set a threshold for relative time strings
  	    function getSetRelativeTimeThreshold(threshold, limit) {
  	        if (thresholds[threshold] === undefined) {
  	            return false;
  	        }
  	        if (limit === undefined) {
  	            return thresholds[threshold];
  	        }
  	        thresholds[threshold] = limit;
  	        if (threshold === 's') {
  	            thresholds.ss = limit - 1;
  	        }
  	        return true;
  	    }

  	    function humanize(argWithSuffix, argThresholds) {
  	        if (!this.isValid()) {
  	            return this.localeData().invalidDate();
  	        }

  	        var withSuffix = false,
  	            th = thresholds,
  	            locale,
  	            output;

  	        if (typeof argWithSuffix === 'object') {
  	            argThresholds = argWithSuffix;
  	            argWithSuffix = false;
  	        }
  	        if (typeof argWithSuffix === 'boolean') {
  	            withSuffix = argWithSuffix;
  	        }
  	        if (typeof argThresholds === 'object') {
  	            th = Object.assign({}, thresholds, argThresholds);
  	            if (argThresholds.s != null && argThresholds.ss == null) {
  	                th.ss = argThresholds.s - 1;
  	            }
  	        }

  	        locale = this.localeData();
  	        output = relativeTime$1(this, !withSuffix, th, locale);

  	        if (withSuffix) {
  	            output = locale.pastFuture(+this, output);
  	        }

  	        return locale.postformat(output);
  	    }

  	    var abs$1 = Math.abs;

  	    function sign(x) {
  	        return (x > 0) - (x < 0) || +x;
  	    }

  	    function toISOString$1() {
  	        // for ISO strings we do not use the normal bubbling rules:
  	        //  * milliseconds bubble up until they become hours
  	        //  * days do not bubble at all
  	        //  * months bubble up until they become years
  	        // This is because there is no context-free conversion between hours and days
  	        // (think of clock changes)
  	        // and also not between days and months (28-31 days per month)
  	        if (!this.isValid()) {
  	            return this.localeData().invalidDate();
  	        }

  	        var seconds = abs$1(this._milliseconds) / 1000,
  	            days = abs$1(this._days),
  	            months = abs$1(this._months),
  	            minutes,
  	            hours,
  	            years,
  	            s,
  	            total = this.asSeconds(),
  	            totalSign,
  	            ymSign,
  	            daysSign,
  	            hmsSign;

  	        if (!total) {
  	            // this is the same as C#'s (Noda) and python (isodate)...
  	            // but not other JS (goog.date)
  	            return 'P0D';
  	        }

  	        // 3600 seconds -> 60 minutes -> 1 hour
  	        minutes = absFloor(seconds / 60);
  	        hours = absFloor(minutes / 60);
  	        seconds %= 60;
  	        minutes %= 60;

  	        // 12 months -> 1 year
  	        years = absFloor(months / 12);
  	        months %= 12;

  	        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
  	        s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';

  	        totalSign = total < 0 ? '-' : '';
  	        ymSign = sign(this._months) !== sign(total) ? '-' : '';
  	        daysSign = sign(this._days) !== sign(total) ? '-' : '';
  	        hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

  	        return (
  	            totalSign +
  	            'P' +
  	            (years ? ymSign + years + 'Y' : '') +
  	            (months ? ymSign + months + 'M' : '') +
  	            (days ? daysSign + days + 'D' : '') +
  	            (hours || minutes || seconds ? 'T' : '') +
  	            (hours ? hmsSign + hours + 'H' : '') +
  	            (minutes ? hmsSign + minutes + 'M' : '') +
  	            (seconds ? hmsSign + s + 'S' : '')
  	        );
  	    }

  	    var proto$2 = Duration.prototype;

  	    proto$2.isValid = isValid$1;
  	    proto$2.abs = abs;
  	    proto$2.add = add$1;
  	    proto$2.subtract = subtract$1;
  	    proto$2.as = as;
  	    proto$2.asMilliseconds = asMilliseconds;
  	    proto$2.asSeconds = asSeconds;
  	    proto$2.asMinutes = asMinutes;
  	    proto$2.asHours = asHours;
  	    proto$2.asDays = asDays;
  	    proto$2.asWeeks = asWeeks;
  	    proto$2.asMonths = asMonths;
  	    proto$2.asQuarters = asQuarters;
  	    proto$2.asYears = asYears;
  	    proto$2.valueOf = valueOf$1;
  	    proto$2._bubble = bubble;
  	    proto$2.clone = clone$1;
  	    proto$2.get = get$2;
  	    proto$2.milliseconds = milliseconds;
  	    proto$2.seconds = seconds;
  	    proto$2.minutes = minutes;
  	    proto$2.hours = hours;
  	    proto$2.days = days;
  	    proto$2.weeks = weeks;
  	    proto$2.months = months;
  	    proto$2.years = years;
  	    proto$2.humanize = humanize;
  	    proto$2.toISOString = toISOString$1;
  	    proto$2.toString = toISOString$1;
  	    proto$2.toJSON = toISOString$1;
  	    proto$2.locale = locale;
  	    proto$2.localeData = localeData;

  	    proto$2.toIsoString = deprecate(
  	        'toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)',
  	        toISOString$1
  	    );
  	    proto$2.lang = lang;

  	    // FORMATTING

  	    addFormatToken('X', 0, 0, 'unix');
  	    addFormatToken('x', 0, 0, 'valueOf');

  	    // PARSING

  	    addRegexToken('x', matchSigned);
  	    addRegexToken('X', matchTimestamp);
  	    addParseToken('X', function (input, array, config) {
  	        config._d = new Date(parseFloat(input) * 1000);
  	    });
  	    addParseToken('x', function (input, array, config) {
  	        config._d = new Date(toInt(input));
  	    });

  	    //! moment.js

  	    hooks.version = '2.29.4';

  	    setHookCallback(createLocal);

  	    hooks.fn = proto;
  	    hooks.min = min;
  	    hooks.max = max;
  	    hooks.now = now;
  	    hooks.utc = createUTC;
  	    hooks.unix = createUnix;
  	    hooks.months = listMonths;
  	    hooks.isDate = isDate;
  	    hooks.locale = getSetGlobalLocale;
  	    hooks.invalid = createInvalid;
  	    hooks.duration = createDuration;
  	    hooks.isMoment = isMoment;
  	    hooks.weekdays = listWeekdays;
  	    hooks.parseZone = createInZone;
  	    hooks.localeData = getLocale;
  	    hooks.isDuration = isDuration;
  	    hooks.monthsShort = listMonthsShort;
  	    hooks.weekdaysMin = listWeekdaysMin;
  	    hooks.defineLocale = defineLocale;
  	    hooks.updateLocale = updateLocale;
  	    hooks.locales = listLocales;
  	    hooks.weekdaysShort = listWeekdaysShort;
  	    hooks.normalizeUnits = normalizeUnits;
  	    hooks.relativeTimeRounding = getSetRelativeTimeRounding;
  	    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
  	    hooks.calendarFormat = getCalendarFormat;
  	    hooks.prototype = proto;

  	    // currently HTML5 input type only supports 24-hour formats
  	    hooks.HTML5_FMT = {
  	        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm', // <input type="datetime-local" />
  	        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss', // <input type="datetime-local" step="1" />
  	        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS', // <input type="datetime-local" step="0.001" />
  	        DATE: 'YYYY-MM-DD', // <input type="date" />
  	        TIME: 'HH:mm', // <input type="time" />
  	        TIME_SECONDS: 'HH:mm:ss', // <input type="time" step="1" />
  	        TIME_MS: 'HH:mm:ss.SSS', // <input type="time" step="0.001" />
  	        WEEK: 'GGGG-[W]WW', // <input type="week" />
  	        MONTH: 'YYYY-MM', // <input type="month" />
  	    };

  	    return hooks;

  	}))); 
  } (moment));

  var momentExports = moment.exports;

  /*!
   * Pikaday
   *
   * Copyright © 2014 David Bushell | BSD & MIT license | https://github.com/Pikaday/Pikaday
   */

  (function (module, exports) {
  	(function (root, factory)
  	{

  	    var moment;
  	    {
  	        // CommonJS module
  	        // Load moment.js as an optional dependency
  	        try { moment = momentExports; } catch (e) {}
  	        module.exports = factory(moment);
  	    }
  	}(commonjsGlobal, function (moment)
  	{

  	    /**
  	     * feature detection and helper functions
  	     */
  	    var hasMoment = typeof moment === 'function',

  	    hasEventListeners = !!window.addEventListener,

  	    document = window.document,

  	    sto = window.setTimeout,

  	    addEvent = function(el, e, callback, capture)
  	    {
  	        if (hasEventListeners) {
  	            el.addEventListener(e, callback, !!capture);
  	        } else {
  	            el.attachEvent('on' + e, callback);
  	        }
  	    },

  	    removeEvent = function(el, e, callback, capture)
  	    {
  	        if (hasEventListeners) {
  	            el.removeEventListener(e, callback, !!capture);
  	        } else {
  	            el.detachEvent('on' + e, callback);
  	        }
  	    },

  	    trim = function(str)
  	    {
  	        return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g,'');
  	    },

  	    hasClass = function(el, cn)
  	    {
  	        return (' ' + el.className + ' ').indexOf(' ' + cn + ' ') !== -1;
  	    },

  	    addClass = function(el, cn)
  	    {
  	        if (!hasClass(el, cn)) {
  	            el.className = (el.className === '') ? cn : el.className + ' ' + cn;
  	        }
  	    },

  	    removeClass = function(el, cn)
  	    {
  	        el.className = trim((' ' + el.className + ' ').replace(' ' + cn + ' ', ' '));
  	    },

  	    isArray = function(obj)
  	    {
  	        return (/Array/).test(Object.prototype.toString.call(obj));
  	    },

  	    isDate = function(obj)
  	    {
  	        return (/Date/).test(Object.prototype.toString.call(obj)) && !isNaN(obj.getTime());
  	    },

  	    isWeekend = function(date)
  	    {
  	        var day = date.getDay();
  	        return day === 0 || day === 6;
  	    },

  	    isLeapYear = function(year)
  	    {
  	        // solution lifted from date.js (MIT license): https://github.com/datejs/Datejs
  	        return ((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0);
  	    },

  	    getDaysInMonth = function(year, month)
  	    {
  	        return [31, isLeapYear(year) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];
  	    },

  	    setToStartOfDay = function(date)
  	    {
  	        if (isDate(date)) date.setHours(0,0,0,0);
  	    },

  	    compareDates = function(a,b)
  	    {
  	        // weak date comparison (use setToStartOfDay(date) to ensure correct result)
  	        return a.getTime() === b.getTime();
  	    },

  	    extend = function(to, from, overwrite)
  	    {
  	        var prop, hasProp;
  	        for (prop in from) {
  	            hasProp = to[prop] !== undefined;
  	            if (hasProp && typeof from[prop] === 'object' && from[prop] !== null && from[prop].nodeName === undefined) {
  	                if (isDate(from[prop])) {
  	                    if (overwrite) {
  	                        to[prop] = new Date(from[prop].getTime());
  	                    }
  	                }
  	                else if (isArray(from[prop])) {
  	                    if (overwrite) {
  	                        to[prop] = from[prop].slice(0);
  	                    }
  	                } else {
  	                    to[prop] = extend({}, from[prop], overwrite);
  	                }
  	            } else if (overwrite || !hasProp) {
  	                to[prop] = from[prop];
  	            }
  	        }
  	        return to;
  	    },

  	    fireEvent = function(el, eventName, data)
  	    {
  	        var ev;

  	        if (document.createEvent) {
  	            ev = document.createEvent('HTMLEvents');
  	            ev.initEvent(eventName, true, false);
  	            ev = extend(ev, data);
  	            el.dispatchEvent(ev);
  	        } else if (document.createEventObject) {
  	            ev = document.createEventObject();
  	            ev = extend(ev, data);
  	            el.fireEvent('on' + eventName, ev);
  	        }
  	    },

  	    adjustCalendar = function(calendar) {
  	        if (calendar.month < 0) {
  	            calendar.year -= Math.ceil(Math.abs(calendar.month)/12);
  	            calendar.month += 12;
  	        }
  	        if (calendar.month > 11) {
  	            calendar.year += Math.floor(Math.abs(calendar.month)/12);
  	            calendar.month -= 12;
  	        }
  	        return calendar;
  	    },

  	    /**
  	     * defaults and localisation
  	     */
  	    defaults = {

  	        // bind the picker to a form field
  	        field: null,

  	        // automatically show/hide the picker on `field` focus (default `true` if `field` is set)
  	        bound: undefined,

  	        // data-attribute on the input field with an aria assistance text (only applied when `bound` is set)
  	        ariaLabel: 'Use the arrow keys to pick a date',

  	        // position of the datepicker, relative to the field (default to bottom & left)
  	        // ('bottom' & 'left' keywords are not used, 'top' & 'right' are modifier on the bottom/left position)
  	        position: 'bottom left',

  	        // automatically fit in the viewport even if it means repositioning from the position option
  	        reposition: true,

  	        // the default output format for `.toString()` and `field` value
  	        format: 'YYYY-MM-DD',

  	        // the toString function which gets passed a current date object and format
  	        // and returns a string
  	        toString: null,

  	        // used to create date object from current input string
  	        parse: null,

  	        // the initial date to view when first opened
  	        defaultDate: null,

  	        // make the `defaultDate` the initial selected value
  	        setDefaultDate: false,

  	        // first day of week (0: Sunday, 1: Monday etc)
  	        firstDay: 0,

  	        // minimum number of days in the week that gets week number one
  	        // default ISO 8601, week 01 is the week with the first Thursday (4)
  	        firstWeekOfYearMinDays: 4,

  	        // the default flag for moment's strict date parsing
  	        formatStrict: false,

  	        // the minimum/earliest date that can be selected
  	        minDate: null,
  	        // the maximum/latest date that can be selected
  	        maxDate: null,

  	        // number of years either side, or array of upper/lower range
  	        yearRange: 10,

  	        // show week numbers at head of row
  	        showWeekNumber: false,

  	        // Week picker mode
  	        pickWholeWeek: false,

  	        // used internally (don't config outside)
  	        minYear: 0,
  	        maxYear: 9999,
  	        minMonth: undefined,
  	        maxMonth: undefined,

  	        startRange: null,
  	        endRange: null,

  	        isRTL: false,

  	        // Additional text to append to the year in the calendar title
  	        yearSuffix: '',

  	        // Render the month after year in the calendar title
  	        showMonthAfterYear: false,

  	        // Render days of the calendar grid that fall in the next or previous month
  	        showDaysInNextAndPreviousMonths: false,

  	        // Allows user to select days that fall in the next or previous month
  	        enableSelectionDaysInNextAndPreviousMonths: false,

  	        // how many months are visible
  	        numberOfMonths: 1,

  	        // when numberOfMonths is used, this will help you to choose where the main calendar will be (default `left`, can be set to `right`)
  	        // only used for the first display or when a selected date is not visible
  	        mainCalendar: 'left',

  	        // Specify a DOM element to render the calendar in
  	        container: undefined,

  	        // Blur field when date is selected
  	        blurFieldOnSelect : true,

  	        // internationalization
  	        i18n: {
  	            previousMonth : 'Previous Month',
  	            nextMonth     : 'Next Month',
  	            months        : ['January','February','March','April','May','June','July','August','September','October','November','December'],
  	            weekdays      : ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'],
  	            weekdaysShort : ['Sun','Mon','Tue','Wed','Thu','Fri','Sat']
  	        },

  	        // Theme Classname
  	        theme: null,

  	        // events array
  	        events: [],

  	        // callback function
  	        onSelect: null,
  	        onOpen: null,
  	        onClose: null,
  	        onDraw: null,

  	        // Enable keyboard input
  	        keyboardInput: true
  	    },


  	    /**
  	     * templating functions to abstract HTML rendering
  	     */
  	    renderDayName = function(opts, day, abbr)
  	    {
  	        day += opts.firstDay;
  	        while (day >= 7) {
  	            day -= 7;
  	        }
  	        return abbr ? opts.i18n.weekdaysShort[day] : opts.i18n.weekdays[day];
  	    },

  	    renderDay = function(opts)
  	    {
  	        var arr = [];
  	        var ariaSelected = 'false';
  	        if (opts.isEmpty) {
  	            if (opts.showDaysInNextAndPreviousMonths) {
  	                arr.push('is-outside-current-month');

  	                if(!opts.enableSelectionDaysInNextAndPreviousMonths) {
  	                    arr.push('is-selection-disabled');
  	                }

  	            } else {
  	                return '<td class="is-empty"></td>';
  	            }
  	        }
  	        if (opts.isDisabled) {
  	            arr.push('is-disabled');
  	        }
  	        if (opts.isToday) {
  	            arr.push('is-today');
  	        }
  	        if (opts.isSelected) {
  	            arr.push('is-selected');
  	            ariaSelected = 'true';
  	        }
  	        if (opts.hasEvent) {
  	            arr.push('has-event');
  	        }
  	        if (opts.isInRange) {
  	            arr.push('is-inrange');
  	        }
  	        if (opts.isStartRange) {
  	            arr.push('is-startrange');
  	        }
  	        if (opts.isEndRange) {
  	            arr.push('is-endrange');
  	        }
  	        return '<td data-day="' + opts.day + '" class="' + arr.join(' ') + '" aria-selected="' + ariaSelected + '">' +
  	                 '<button class="pika-button pika-day" type="button" ' +
  	                    'data-pika-year="' + opts.year + '" data-pika-month="' + opts.month + '" data-pika-day="' + opts.day + '">' +
  	                        opts.day +
  	                 '</button>' +
  	               '</td>';
  	    },

  	    isoWeek = function(date, firstWeekOfYearMinDays) {
  	        // Ensure we're at the start of the day.
  	        date.setHours(0, 0, 0, 0);

  	        // Thursday in current week decides the year because January 4th
  	        // is always in the first week according to ISO8601.
  	        var yearDay        = date.getDate(),
  	            weekDay        = date.getDay(),
  	            dayInFirstWeek = firstWeekOfYearMinDays,
  	            dayShift       = dayInFirstWeek - 1, // counting starts at 0
  	            daysPerWeek    = 7,
  	            prevWeekDay    = function(day) { return (day + daysPerWeek - 1) % daysPerWeek; };

  	        // Adjust to Thursday in week 1 and count number of weeks from date to week 1.
  	        date.setDate(yearDay + dayShift - prevWeekDay(weekDay));

  	        var jan4th      = new Date(date.getFullYear(), 0, dayInFirstWeek),
  	            msPerDay    = 24 * 60 * 60 * 1000,
  	            daysBetween = (date.getTime() - jan4th.getTime()) / msPerDay,
  	            weekNum     = 1 + Math.round((daysBetween - dayShift + prevWeekDay(jan4th.getDay())) / daysPerWeek);

  	        return weekNum;
  	    },

  	    renderWeek = function (d, m, y, firstWeekOfYearMinDays) {
  	        var date = new Date(y, m, d),
  	            week = hasMoment ? moment(date).isoWeek() : isoWeek(date, firstWeekOfYearMinDays);

  	        return '<td class="pika-week">' + week + '</td>';
  	    },

  	    renderRow = function(days, isRTL, pickWholeWeek, isRowSelected)
  	    {
  	        return '<tr class="pika-row' + (pickWholeWeek ? ' pick-whole-week' : '') + (isRowSelected ? ' is-selected' : '') + '">' + (isRTL ? days.reverse() : days).join('') + '</tr>';
  	    },

  	    renderBody = function(rows)
  	    {
  	        return '<tbody>' + rows.join('') + '</tbody>';
  	    },

  	    renderHead = function(opts)
  	    {
  	        var i, arr = [];
  	        if (opts.showWeekNumber) {
  	            arr.push('<th></th>');
  	        }
  	        for (i = 0; i < 7; i++) {
  	            arr.push('<th scope="col"><abbr title="' + renderDayName(opts, i) + '">' + renderDayName(opts, i, true) + '</abbr></th>');
  	        }
  	        return '<thead><tr>' + (opts.isRTL ? arr.reverse() : arr).join('') + '</tr></thead>';
  	    },

  	    renderTitle = function(instance, c, year, month, refYear, randId)
  	    {
  	        var i, j, arr,
  	            opts = instance._o,
  	            isMinYear = year === opts.minYear,
  	            isMaxYear = year === opts.maxYear,
  	            html = '<div id="' + randId + '" class="pika-title" role="heading" aria-live="assertive">',
  	            monthHtml,
  	            yearHtml,
  	            prev = true,
  	            next = true;

  	        for (arr = [], i = 0; i < 12; i++) {
  	            arr.push('<option value="' + (year === refYear ? i - c : 12 + i - c) + '"' +
  	                (i === month ? ' selected="selected"': '') +
  	                ((isMinYear && i < opts.minMonth) || (isMaxYear && i > opts.maxMonth) ? ' disabled="disabled"' : '') + '>' +
  	                opts.i18n.months[i] + '</option>');
  	        }

  	        monthHtml = '<div class="pika-label">' + opts.i18n.months[month] + '<select class="pika-select pika-select-month" tabindex="-1">' + arr.join('') + '</select></div>';

  	        if (isArray(opts.yearRange)) {
  	            i = opts.yearRange[0];
  	            j = opts.yearRange[1] + 1;
  	        } else {
  	            i = year - opts.yearRange;
  	            j = 1 + year + opts.yearRange;
  	        }

  	        for (arr = []; i < j && i <= opts.maxYear; i++) {
  	            if (i >= opts.minYear) {
  	                arr.push('<option value="' + i + '"' + (i === year ? ' selected="selected"': '') + '>' + (i) + '</option>');
  	            }
  	        }
  	        yearHtml = '<div class="pika-label">' + year + opts.yearSuffix + '<select class="pika-select pika-select-year" tabindex="-1">' + arr.join('') + '</select></div>';

  	        if (opts.showMonthAfterYear) {
  	            html += yearHtml + monthHtml;
  	        } else {
  	            html += monthHtml + yearHtml;
  	        }

  	        if (isMinYear && (month === 0 || opts.minMonth >= month)) {
  	            prev = false;
  	        }

  	        if (isMaxYear && (month === 11 || opts.maxMonth <= month)) {
  	            next = false;
  	        }

  	        if (c === 0) {
  	            html += '<button class="pika-prev' + (prev ? '' : ' is-disabled') + '" type="button">' + opts.i18n.previousMonth + '</button>';
  	        }
  	        if (c === (instance._o.numberOfMonths - 1) ) {
  	            html += '<button class="pika-next' + (next ? '' : ' is-disabled') + '" type="button">' + opts.i18n.nextMonth + '</button>';
  	        }

  	        return html += '</div>';
  	    },

  	    renderTable = function(opts, data, randId)
  	    {
  	        return '<table cellpadding="0" cellspacing="0" class="pika-table" role="grid" aria-labelledby="' + randId + '">' + renderHead(opts) + renderBody(data) + '</table>';
  	    },


  	    /**
  	     * Pikaday constructor
  	     */
  	    Pikaday = function(options)
  	    {
  	        var self = this,
  	            opts = self.config(options);

  	        self._onMouseDown = function(e)
  	        {
  	            if (!self._v) {
  	                return;
  	            }
  	            e = e || window.event;
  	            var target = e.target || e.srcElement;
  	            if (!target) {
  	                return;
  	            }

  	            if (!hasClass(target, 'is-disabled')) {
  	                if (hasClass(target, 'pika-button') && !hasClass(target, 'is-empty') && !hasClass(target.parentNode, 'is-disabled')) {
  	                    self.setDate(new Date(target.getAttribute('data-pika-year'), target.getAttribute('data-pika-month'), target.getAttribute('data-pika-day')));
  	                    if (opts.bound) {
  	                        sto(function() {
  	                            self.hide();
  	                            if (opts.blurFieldOnSelect && opts.field) {
  	                                opts.field.blur();
  	                            }
  	                        }, 100);
  	                    }
  	                }
  	                else if (hasClass(target, 'pika-prev')) {
  	                    self.prevMonth();
  	                }
  	                else if (hasClass(target, 'pika-next')) {
  	                    self.nextMonth();
  	                }
  	            }
  	            if (!hasClass(target, 'pika-select')) {
  	                // if this is touch event prevent mouse events emulation
  	                if (e.preventDefault) {
  	                    e.preventDefault();
  	                } else {
  	                    e.returnValue = false;
  	                    return false;
  	                }
  	            } else {
  	                self._c = true;
  	            }
  	        };

  	        self._onChange = function(e)
  	        {
  	            e = e || window.event;
  	            var target = e.target || e.srcElement;
  	            if (!target) {
  	                return;
  	            }
  	            if (hasClass(target, 'pika-select-month')) {
  	                self.gotoMonth(target.value);
  	            }
  	            else if (hasClass(target, 'pika-select-year')) {
  	                self.gotoYear(target.value);
  	            }
  	        };

  	        self._onKeyChange = function(e)
  	        {
  	            e = e || window.event;

  	            if (self.isVisible()) {

  	                switch(e.keyCode){
  	                    case 13:
  	                    case 27:
  	                        if (opts.field) {
  	                            opts.field.blur();
  	                        }
  	                        break;
  	                    case 37:
  	                        self.adjustDate('subtract', 1);
  	                        break;
  	                    case 38:
  	                        self.adjustDate('subtract', 7);
  	                        break;
  	                    case 39:
  	                        self.adjustDate('add', 1);
  	                        break;
  	                    case 40:
  	                        self.adjustDate('add', 7);
  	                        break;
  	                    case 8:
  	                    case 46:
  	                        self.setDate(null);
  	                        break;
  	                }
  	            }
  	        };

  	        self._parseFieldValue = function()
  	        {
  	            if (opts.parse) {
  	                return opts.parse(opts.field.value, opts.format);
  	            } else if (hasMoment) {
  	                var date = moment(opts.field.value, opts.format, opts.formatStrict);
  	                return (date && date.isValid()) ? date.toDate() : null;
  	            } else {
  	                return new Date(Date.parse(opts.field.value));
  	            }
  	        };

  	        self._onInputChange = function(e)
  	        {
  	            var date;

  	            if (e.firedBy === self) {
  	                return;
  	            }
  	            date = self._parseFieldValue();
  	            if (isDate(date)) {
  	              self.setDate(date);
  	            }
  	            if (!self._v) {
  	                self.show();
  	            }
  	        };

  	        self._onInputFocus = function()
  	        {
  	            self.show();
  	        };

  	        self._onInputClick = function()
  	        {
  	            self.show();
  	        };

  	        self._onInputBlur = function()
  	        {
  	            // IE allows pika div to gain focus; catch blur the input field
  	            var pEl = document.activeElement;
  	            do {
  	                if (hasClass(pEl, 'pika-single')) {
  	                    return;
  	                }
  	            }
  	            while ((pEl = pEl.parentNode));

  	            if (!self._c) {
  	                self._b = sto(function() {
  	                    self.hide();
  	                }, 50);
  	            }
  	            self._c = false;
  	        };

  	        self._onClick = function(e)
  	        {
  	            e = e || window.event;
  	            var target = e.target || e.srcElement,
  	                pEl = target;
  	            if (!target) {
  	                return;
  	            }
  	            if (!hasEventListeners && hasClass(target, 'pika-select')) {
  	                if (!target.onchange) {
  	                    target.setAttribute('onchange', 'return;');
  	                    addEvent(target, 'change', self._onChange);
  	                }
  	            }
  	            do {
  	                if (hasClass(pEl, 'pika-single') || pEl === opts.trigger) {
  	                    return;
  	                }
  	            }
  	            while ((pEl = pEl.parentNode));
  	            if (self._v && target !== opts.trigger && pEl !== opts.trigger) {
  	                self.hide();
  	            }
  	        };

  	        self.el = document.createElement('div');
  	        self.el.className = 'pika-single' + (opts.isRTL ? ' is-rtl' : '') + (opts.theme ? ' ' + opts.theme : '');

  	        addEvent(self.el, 'mousedown', self._onMouseDown, true);
  	        addEvent(self.el, 'touchend', self._onMouseDown, true);
  	        addEvent(self.el, 'change', self._onChange);

  	        if (opts.keyboardInput) {
  	            addEvent(document, 'keydown', self._onKeyChange);
  	        }

  	        if (opts.field) {
  	            if (opts.container) {
  	                opts.container.appendChild(self.el);
  	            } else if (opts.bound) {
  	                document.body.appendChild(self.el);
  	            } else {
  	                opts.field.parentNode.insertBefore(self.el, opts.field.nextSibling);
  	            }
  	            addEvent(opts.field, 'change', self._onInputChange);

  	            if (!opts.defaultDate) {
  	                opts.defaultDate = self._parseFieldValue();
  	                opts.setDefaultDate = true;
  	            }
  	        }

  	        var defDate = opts.defaultDate;

  	        if (isDate(defDate)) {
  	            if (opts.setDefaultDate) {
  	                self.setDate(defDate, true);
  	            } else {
  	                self.gotoDate(defDate);
  	            }
  	        } else {
  	            self.gotoDate(new Date());
  	        }

  	        if (opts.bound) {
  	            this.hide();
  	            self.el.className += ' is-bound';
  	            addEvent(opts.trigger, 'click', self._onInputClick);
  	            addEvent(opts.trigger, 'focus', self._onInputFocus);
  	            addEvent(opts.trigger, 'blur', self._onInputBlur);
  	        } else {
  	            this.show();
  	        }
  	    };


  	    /**
  	     * public Pikaday API
  	     */
  	    Pikaday.prototype = {


  	        /**
  	         * configure functionality
  	         */
  	        config: function(options)
  	        {
  	            if (!this._o) {
  	                this._o = extend({}, defaults, true);
  	            }

  	            var opts = extend(this._o, options, true);

  	            opts.isRTL = !!opts.isRTL;

  	            opts.field = (opts.field && opts.field.nodeName) ? opts.field : null;

  	            opts.theme = (typeof opts.theme) === 'string' && opts.theme ? opts.theme : null;

  	            opts.bound = !!(opts.bound !== undefined ? opts.field && opts.bound : opts.field);

  	            opts.trigger = (opts.trigger && opts.trigger.nodeName) ? opts.trigger : opts.field;

  	            opts.disableWeekends = !!opts.disableWeekends;

  	            opts.disableDayFn = (typeof opts.disableDayFn) === 'function' ? opts.disableDayFn : null;

  	            var nom = parseInt(opts.numberOfMonths, 10) || 1;
  	            opts.numberOfMonths = nom > 4 ? 4 : nom;

  	            if (!isDate(opts.minDate)) {
  	                opts.minDate = false;
  	            }
  	            if (!isDate(opts.maxDate)) {
  	                opts.maxDate = false;
  	            }
  	            if ((opts.minDate && opts.maxDate) && opts.maxDate < opts.minDate) {
  	                opts.maxDate = opts.minDate = false;
  	            }
  	            if (opts.minDate) {
  	                this.setMinDate(opts.minDate);
  	            }
  	            if (opts.maxDate) {
  	                this.setMaxDate(opts.maxDate);
  	            }

  	            if (isArray(opts.yearRange)) {
  	                var fallback = new Date().getFullYear() - 10;
  	                opts.yearRange[0] = parseInt(opts.yearRange[0], 10) || fallback;
  	                opts.yearRange[1] = parseInt(opts.yearRange[1], 10) || fallback;
  	            } else {
  	                opts.yearRange = Math.abs(parseInt(opts.yearRange, 10)) || defaults.yearRange;
  	                if (opts.yearRange > 100) {
  	                    opts.yearRange = 100;
  	                }
  	            }

  	            return opts;
  	        },

  	        /**
  	         * return a formatted string of the current selection (using Moment.js if available)
  	         */
  	        toString: function(format)
  	        {
  	            format = format || this._o.format;
  	            if (!isDate(this._d)) {
  	                return '';
  	            }
  	            if (this._o.toString) {
  	              return this._o.toString(this._d, format);
  	            }
  	            if (hasMoment) {
  	              return moment(this._d).format(format);
  	            }
  	            return this._d.toDateString();
  	        },

  	        /**
  	         * return a Moment.js object of the current selection (if available)
  	         */
  	        getMoment: function()
  	        {
  	            return hasMoment ? moment(this._d) : null;
  	        },

  	        /**
  	         * set the current selection from a Moment.js object (if available)
  	         */
  	        setMoment: function(date, preventOnSelect)
  	        {
  	            if (hasMoment && moment.isMoment(date)) {
  	                this.setDate(date.toDate(), preventOnSelect);
  	            }
  	        },

  	        /**
  	         * return a Date object of the current selection
  	         */
  	        getDate: function()
  	        {
  	            return isDate(this._d) ? new Date(this._d.getTime()) : null;
  	        },

  	        /**
  	         * set the current selection
  	         */
  	        setDate: function(date, preventOnSelect)
  	        {
  	            if (!date) {
  	                this._d = null;

  	                if (this._o.field) {
  	                    this._o.field.value = '';
  	                    fireEvent(this._o.field, 'change', { firedBy: this });
  	                }

  	                return this.draw();
  	            }
  	            if (typeof date === 'string') {
  	                date = new Date(Date.parse(date));
  	            }
  	            if (!isDate(date)) {
  	                return;
  	            }

  	            var min = this._o.minDate,
  	                max = this._o.maxDate;

  	            if (isDate(min) && date < min) {
  	                date = min;
  	            } else if (isDate(max) && date > max) {
  	                date = max;
  	            }

  	            this._d = new Date(date.getTime());
  	            setToStartOfDay(this._d);
  	            this.gotoDate(this._d);

  	            if (this._o.field) {
  	                this._o.field.value = this.toString();
  	                fireEvent(this._o.field, 'change', { firedBy: this });
  	            }
  	            if (!preventOnSelect && typeof this._o.onSelect === 'function') {
  	                this._o.onSelect.call(this, this.getDate());
  	            }
  	        },

  	        /**
  	         * clear and reset the date
  	         */
  	        clear: function()
  	        {
  	            this.setDate(null);
  	        },

  	        /**
  	         * change view to a specific date
  	         */
  	        gotoDate: function(date)
  	        {
  	            var newCalendar = true;

  	            if (!isDate(date)) {
  	                return;
  	            }

  	            if (this.calendars) {
  	                var firstVisibleDate = new Date(this.calendars[0].year, this.calendars[0].month, 1),
  	                    lastVisibleDate = new Date(this.calendars[this.calendars.length-1].year, this.calendars[this.calendars.length-1].month, 1),
  	                    visibleDate = date.getTime();
  	                // get the end of the month
  	                lastVisibleDate.setMonth(lastVisibleDate.getMonth()+1);
  	                lastVisibleDate.setDate(lastVisibleDate.getDate()-1);
  	                newCalendar = (visibleDate < firstVisibleDate.getTime() || lastVisibleDate.getTime() < visibleDate);
  	            }

  	            if (newCalendar) {
  	                this.calendars = [{
  	                    month: date.getMonth(),
  	                    year: date.getFullYear()
  	                }];
  	                if (this._o.mainCalendar === 'right') {
  	                    this.calendars[0].month += 1 - this._o.numberOfMonths;
  	                }
  	            }

  	            this.adjustCalendars();
  	        },

  	        adjustDate: function(sign, days) {

  	            var day = this.getDate() || new Date();
  	            var difference = parseInt(days)*24*60*60*1000;

  	            var newDay;

  	            if (sign === 'add') {
  	                newDay = new Date(day.valueOf() + difference);
  	            } else if (sign === 'subtract') {
  	                newDay = new Date(day.valueOf() - difference);
  	            }

  	            this.setDate(newDay);
  	        },

  	        adjustCalendars: function() {
  	            this.calendars[0] = adjustCalendar(this.calendars[0]);
  	            for (var c = 1; c < this._o.numberOfMonths; c++) {
  	                this.calendars[c] = adjustCalendar({
  	                    month: this.calendars[0].month + c,
  	                    year: this.calendars[0].year
  	                });
  	            }
  	            this.draw();
  	        },

  	        gotoToday: function()
  	        {
  	            this.gotoDate(new Date());
  	        },

  	        /**
  	         * change view to a specific month (zero-index, e.g. 0: January)
  	         */
  	        gotoMonth: function(month)
  	        {
  	            if (!isNaN(month)) {
  	                this.calendars[0].month = parseInt(month, 10);
  	                this.adjustCalendars();
  	            }
  	        },

  	        nextMonth: function()
  	        {
  	            this.calendars[0].month++;
  	            this.adjustCalendars();
  	        },

  	        prevMonth: function()
  	        {
  	            this.calendars[0].month--;
  	            this.adjustCalendars();
  	        },

  	        /**
  	         * change view to a specific full year (e.g. "2012")
  	         */
  	        gotoYear: function(year)
  	        {
  	            if (!isNaN(year)) {
  	                this.calendars[0].year = parseInt(year, 10);
  	                this.adjustCalendars();
  	            }
  	        },

  	        /**
  	         * change the minDate
  	         */
  	        setMinDate: function(value)
  	        {
  	            if(value instanceof Date) {
  	                setToStartOfDay(value);
  	                this._o.minDate = value;
  	                this._o.minYear  = value.getFullYear();
  	                this._o.minMonth = value.getMonth();
  	            } else {
  	                this._o.minDate = defaults.minDate;
  	                this._o.minYear  = defaults.minYear;
  	                this._o.minMonth = defaults.minMonth;
  	                this._o.startRange = defaults.startRange;
  	            }

  	            this.draw();
  	        },

  	        /**
  	         * change the maxDate
  	         */
  	        setMaxDate: function(value)
  	        {
  	            if(value instanceof Date) {
  	                setToStartOfDay(value);
  	                this._o.maxDate = value;
  	                this._o.maxYear = value.getFullYear();
  	                this._o.maxMonth = value.getMonth();
  	            } else {
  	                this._o.maxDate = defaults.maxDate;
  	                this._o.maxYear = defaults.maxYear;
  	                this._o.maxMonth = defaults.maxMonth;
  	                this._o.endRange = defaults.endRange;
  	            }

  	            this.draw();
  	        },

  	        setStartRange: function(value)
  	        {
  	            this._o.startRange = value;
  	        },

  	        setEndRange: function(value)
  	        {
  	            this._o.endRange = value;
  	        },

  	        /**
  	         * refresh the HTML
  	         */
  	        draw: function(force)
  	        {
  	            if (!this._v && !force) {
  	                return;
  	            }
  	            var opts = this._o,
  	                minYear = opts.minYear,
  	                maxYear = opts.maxYear,
  	                minMonth = opts.minMonth,
  	                maxMonth = opts.maxMonth,
  	                html = '',
  	                randId;

  	            if (this._y <= minYear) {
  	                this._y = minYear;
  	                if (!isNaN(minMonth) && this._m < minMonth) {
  	                    this._m = minMonth;
  	                }
  	            }
  	            if (this._y >= maxYear) {
  	                this._y = maxYear;
  	                if (!isNaN(maxMonth) && this._m > maxMonth) {
  	                    this._m = maxMonth;
  	                }
  	            }

  	            for (var c = 0; c < opts.numberOfMonths; c++) {
  	                randId = 'pika-title-' + Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 2);
  	                html += '<div class="pika-lendar">' + renderTitle(this, c, this.calendars[c].year, this.calendars[c].month, this.calendars[0].year, randId) + this.render(this.calendars[c].year, this.calendars[c].month, randId) + '</div>';
  	            }

  	            this.el.innerHTML = html;

  	            if (opts.bound) {
  	                if(opts.field.type !== 'hidden') {
  	                    sto(function() {
  	                        opts.trigger.focus();
  	                    }, 1);
  	                }
  	            }

  	            if (typeof this._o.onDraw === 'function') {
  	                this._o.onDraw(this);
  	            }

  	            if (opts.bound) {
  	                // let the screen reader user know to use arrow keys
  	                opts.field.setAttribute('aria-label', opts.ariaLabel);
  	            }
  	        },

  	        adjustPosition: function()
  	        {
  	            var field, pEl, width, height, viewportWidth, viewportHeight, scrollTop, left, top, clientRect, leftAligned, bottomAligned;

  	            if (this._o.container) return;

  	            this.el.style.position = 'absolute';

  	            field = this._o.trigger;
  	            pEl = field;
  	            width = this.el.offsetWidth;
  	            height = this.el.offsetHeight;
  	            viewportWidth = window.innerWidth || document.documentElement.clientWidth;
  	            viewportHeight = window.innerHeight || document.documentElement.clientHeight;
  	            scrollTop = window.pageYOffset || document.body.scrollTop || document.documentElement.scrollTop;
  	            leftAligned = true;
  	            bottomAligned = true;

  	            if (typeof field.getBoundingClientRect === 'function') {
  	                clientRect = field.getBoundingClientRect();
  	                left = clientRect.left + window.pageXOffset;
  	                top = clientRect.bottom + window.pageYOffset;
  	            } else {
  	                left = pEl.offsetLeft;
  	                top  = pEl.offsetTop + pEl.offsetHeight;
  	                while((pEl = pEl.offsetParent)) {
  	                    left += pEl.offsetLeft;
  	                    top  += pEl.offsetTop;
  	                }
  	            }

  	            // default position is bottom & left
  	            if ((this._o.reposition && left + width > viewportWidth) ||
  	                (
  	                    this._o.position.indexOf('right') > -1 &&
  	                    left - width + field.offsetWidth > 0
  	                )
  	            ) {
  	                left = left - width + field.offsetWidth;
  	                leftAligned = false;
  	            }
  	            if ((this._o.reposition && top + height > viewportHeight + scrollTop) ||
  	                (
  	                    this._o.position.indexOf('top') > -1 &&
  	                    top - height - field.offsetHeight > 0
  	                )
  	            ) {
  	                top = top - height - field.offsetHeight;
  	                bottomAligned = false;
  	            }

  	            this.el.style.left = left + 'px';
  	            this.el.style.top = top + 'px';

  	            addClass(this.el, leftAligned ? 'left-aligned' : 'right-aligned');
  	            addClass(this.el, bottomAligned ? 'bottom-aligned' : 'top-aligned');
  	            removeClass(this.el, !leftAligned ? 'left-aligned' : 'right-aligned');
  	            removeClass(this.el, !bottomAligned ? 'bottom-aligned' : 'top-aligned');
  	        },

  	        /**
  	         * render HTML for a particular month
  	         */
  	        render: function(year, month, randId)
  	        {
  	            var opts   = this._o,
  	                now    = new Date(),
  	                days   = getDaysInMonth(year, month),
  	                before = new Date(year, month, 1).getDay(),
  	                data   = [],
  	                row    = [];
  	            setToStartOfDay(now);
  	            if (opts.firstDay > 0) {
  	                before -= opts.firstDay;
  	                if (before < 0) {
  	                    before += 7;
  	                }
  	            }
  	            var previousMonth = month === 0 ? 11 : month - 1,
  	                nextMonth = month === 11 ? 0 : month + 1,
  	                yearOfPreviousMonth = month === 0 ? year - 1 : year,
  	                yearOfNextMonth = month === 11 ? year + 1 : year,
  	                daysInPreviousMonth = getDaysInMonth(yearOfPreviousMonth, previousMonth);
  	            var cells = days + before,
  	                after = cells;
  	            while(after > 7) {
  	                after -= 7;
  	            }
  	            cells += 7 - after;
  	            var isWeekSelected = false;
  	            for (var i = 0, r = 0; i < cells; i++)
  	            {
  	                var day = new Date(year, month, 1 + (i - before)),
  	                    isSelected = isDate(this._d) ? compareDates(day, this._d) : false,
  	                    isToday = compareDates(day, now),
  	                    hasEvent = opts.events.indexOf(day.toDateString()) !== -1 ? true : false,
  	                    isEmpty = i < before || i >= (days + before),
  	                    dayNumber = 1 + (i - before),
  	                    monthNumber = month,
  	                    yearNumber = year,
  	                    isStartRange = opts.startRange && compareDates(opts.startRange, day),
  	                    isEndRange = opts.endRange && compareDates(opts.endRange, day),
  	                    isInRange = opts.startRange && opts.endRange && opts.startRange < day && day < opts.endRange,
  	                    isDisabled = (opts.minDate && day < opts.minDate) ||
  	                                 (opts.maxDate && day > opts.maxDate) ||
  	                                 (opts.disableWeekends && isWeekend(day)) ||
  	                                 (opts.disableDayFn && opts.disableDayFn(day));

  	                if (isEmpty) {
  	                    if (i < before) {
  	                        dayNumber = daysInPreviousMonth + dayNumber;
  	                        monthNumber = previousMonth;
  	                        yearNumber = yearOfPreviousMonth;
  	                    } else {
  	                        dayNumber = dayNumber - days;
  	                        monthNumber = nextMonth;
  	                        yearNumber = yearOfNextMonth;
  	                    }
  	                }

  	                var dayConfig = {
  	                        day: dayNumber,
  	                        month: monthNumber,
  	                        year: yearNumber,
  	                        hasEvent: hasEvent,
  	                        isSelected: isSelected,
  	                        isToday: isToday,
  	                        isDisabled: isDisabled,
  	                        isEmpty: isEmpty,
  	                        isStartRange: isStartRange,
  	                        isEndRange: isEndRange,
  	                        isInRange: isInRange,
  	                        showDaysInNextAndPreviousMonths: opts.showDaysInNextAndPreviousMonths,
  	                        enableSelectionDaysInNextAndPreviousMonths: opts.enableSelectionDaysInNextAndPreviousMonths
  	                    };

  	                if (opts.pickWholeWeek && isSelected) {
  	                    isWeekSelected = true;
  	                }

  	                row.push(renderDay(dayConfig));

  	                if (++r === 7) {
  	                    if (opts.showWeekNumber) {
  	                        row.unshift(renderWeek(i - before, month, year, opts.firstWeekOfYearMinDays));
  	                    }
  	                    data.push(renderRow(row, opts.isRTL, opts.pickWholeWeek, isWeekSelected));
  	                    row = [];
  	                    r = 0;
  	                    isWeekSelected = false;
  	                }
  	            }
  	            return renderTable(opts, data, randId);
  	        },

  	        isVisible: function()
  	        {
  	            return this._v;
  	        },

  	        show: function()
  	        {
  	            if (!this.isVisible()) {
  	                this._v = true;
  	                this.draw();
  	                removeClass(this.el, 'is-hidden');
  	                if (this._o.bound) {
  	                    addEvent(document, 'click', this._onClick);
  	                    this.adjustPosition();
  	                }
  	                if (typeof this._o.onOpen === 'function') {
  	                    this._o.onOpen.call(this);
  	                }
  	            }
  	        },

  	        hide: function()
  	        {
  	            var v = this._v;
  	            if (v !== false) {
  	                if (this._o.bound) {
  	                    removeEvent(document, 'click', this._onClick);
  	                }

  	                if (!this._o.container) {
  	                    this.el.style.position = 'static'; // reset
  	                    this.el.style.left = 'auto';
  	                    this.el.style.top = 'auto';
  	                }
  	                addClass(this.el, 'is-hidden');
  	                this._v = false;
  	                if (v !== undefined && typeof this._o.onClose === 'function') {
  	                    this._o.onClose.call(this);
  	                }
  	            }
  	        },

  	        /**
  	         * GAME OVER
  	         */
  	        destroy: function()
  	        {
  	            var opts = this._o;

  	            this.hide();
  	            removeEvent(this.el, 'mousedown', this._onMouseDown, true);
  	            removeEvent(this.el, 'touchend', this._onMouseDown, true);
  	            removeEvent(this.el, 'change', this._onChange);
  	            if (opts.keyboardInput) {
  	                removeEvent(document, 'keydown', this._onKeyChange);
  	            }
  	            if (opts.field) {
  	                removeEvent(opts.field, 'change', this._onInputChange);
  	                if (opts.bound) {
  	                    removeEvent(opts.trigger, 'click', this._onInputClick);
  	                    removeEvent(opts.trigger, 'focus', this._onInputFocus);
  	                    removeEvent(opts.trigger, 'blur', this._onInputBlur);
  	                }
  	            }
  	            if (this.el.parentNode) {
  	                this.el.parentNode.removeChild(this.el);
  	            }
  	        }

  	    };

  	    return Pikaday;
  	})); 
  } (pikaday));

  var pikadayExports = pikaday.exports;
  var Pikaday = /*@__PURE__*/getDefaultExportFromCjs(pikadayExports);

  /*
    Expose functions.
  */

  var jalaaliJs =
    { toJalaali: toJalaali
    , toGregorian: toGregorian
    , isValidJalaaliDate: isValidJalaaliDate
    , isLeapJalaaliYear: isLeapJalaaliYear
    , jalaaliMonthLength: jalaaliMonthLength
    , jalCal: jalCal
    , j2d: j2d
    , d2j: d2j
    , g2d: g2d
    , d2g: d2g
    , jalaaliToDateObject: jalaaliToDateObject
    , jalaaliWeek: jalaaliWeek
    };

  /*
    Jalaali years starting the 33-year rule.
  */
  var breaks =  [ -61, 9, 38, 199, 426, 686, 756, 818, 1111, 1181, 1210
    , 1635, 2060, 2097, 2192, 2262, 2324, 2394, 2456, 3178
    ];

  /*
    Converts a Gregorian date to Jalaali.
  */
  function toJalaali(gy, gm, gd) {
    if (Object.prototype.toString.call(gy) === '[object Date]') {
      gd = gy.getDate();
      gm = gy.getMonth() + 1;
      gy = gy.getFullYear();
    }
    return d2j(g2d(gy, gm, gd))
  }

  /*
    Converts a Jalaali date to Gregorian.
  */
  function toGregorian(jy, jm, jd) {
    return d2g(j2d(jy, jm, jd))
  }

  /*
    Checks whether a Jalaali date is valid or not.
  */
  function isValidJalaaliDate(jy, jm, jd) {
    return  jy >= -61 && jy <= 3177 &&
            jm >= 1 && jm <= 12 &&
            jd >= 1 && jd <= jalaaliMonthLength(jy, jm)
  }

  /*
    Is this a leap year or not?
  */
  function isLeapJalaaliYear(jy) {
    return jalCalLeap(jy) === 0
  }

  /*
    Number of days in a given month in a Jalaali year.
  */
  function jalaaliMonthLength(jy, jm) {
    if (jm <= 6) return 31
    if (jm <= 11) return 30
    if (isLeapJalaaliYear(jy)) return 30
    return 29
  }

  /*
      This function determines if the Jalaali (Persian) year is
      leap (366-day long) or is the common year (365 days)

      @param jy Jalaali calendar year (-61 to 3177)
      @returns number of years since the last leap year (0 to 4)
   */
  function jalCalLeap(jy) {
    var bl = breaks.length
      , jp = breaks[0]
      , jm
      , jump
      , leap
      , n
      , i;

    if (jy < jp || jy >= breaks[bl - 1])
      throw new Error('Invalid Jalaali year ' + jy)

    for (i = 1; i < bl; i += 1) {
      jm = breaks[i];
      jump = jm - jp;
      if (jy < jm)
        break
      jp = jm;
    }
    n = jy - jp;

    if (jump - n < 6)
      n = n - jump + div(jump + 4, 33) * 33;
    leap = mod(mod(n + 1, 33) - 1, 4);
    if (leap === -1) {
      leap = 4;
    }

    return leap
  }

  /*
    This function determines if the Jalaali (Persian) year is
    leap (366-day long) or is the common year (365 days), and
    finds the day in March (Gregorian calendar) of the first
    day of the Jalaali year (jy).

    @param jy Jalaali calendar year (-61 to 3177)
    @param withoutLeap when don't need leap (true or false) default is false
    @return
      leap: number of years since the last leap year (0 to 4)
      gy: Gregorian year of the beginning of Jalaali year
      march: the March day of Farvardin the 1st (1st day of jy)
    @see: http://www.astro.uni.torun.pl/~kb/Papers/EMP/PersianC-EMP.htm
    @see: http://www.fourmilab.ch/documents/calendar/
  */
  function jalCal(jy, withoutLeap) {
    var bl = breaks.length
      , gy = jy + 621
      , leapJ = -14
      , jp = breaks[0]
      , jm
      , jump
      , leap
      , leapG
      , march
      , n
      , i;

    if (jy < jp || jy >= breaks[bl - 1])
      throw new Error('Invalid Jalaali year ' + jy)

    // Find the limiting years for the Jalaali year jy.
    for (i = 1; i < bl; i += 1) {
      jm = breaks[i];
      jump = jm - jp;
      if (jy < jm)
        break
      leapJ = leapJ + div(jump, 33) * 8 + div(mod(jump, 33), 4);
      jp = jm;
    }
    n = jy - jp;

    // Find the number of leap years from AD 621 to the beginning
    // of the current Jalaali year in the Persian calendar.
    leapJ = leapJ + div(n, 33) * 8 + div(mod(n, 33) + 3, 4);
    if (mod(jump, 33) === 4 && jump - n === 4)
      leapJ += 1;

    // And the same in the Gregorian calendar (until the year gy).
    leapG = div(gy, 4) - div((div(gy, 100) + 1) * 3, 4) - 150;

    // Determine the Gregorian date of Farvardin the 1st.
    march = 20 + leapJ - leapG;

    // return with gy and march when we don't need leap
    if (withoutLeap) return { gy: gy, march: march };


    // Find how many years have passed since the last leap year.
    if (jump - n < 6)
      n = n - jump + div(jump + 4, 33) * 33;
    leap = mod(mod(n + 1, 33) - 1, 4);
    if (leap === -1) {
      leap = 4;
    }

    return  { leap: leap
            , gy: gy
            , march: march
            }
  }

  /*
    Converts a date of the Jalaali calendar to the Julian Day number.

    @param jy Jalaali year (1 to 3100)
    @param jm Jalaali month (1 to 12)
    @param jd Jalaali day (1 to 29/31)
    @return Julian Day number
  */
  function j2d(jy, jm, jd) {
    var r = jalCal(jy, true);
    return g2d(r.gy, 3, r.march) + (jm - 1) * 31 - div(jm, 7) * (jm - 7) + jd - 1
  }

  /*
    Converts the Julian Day number to a date in the Jalaali calendar.

    @param jdn Julian Day number
    @return
      jy: Jalaali year (1 to 3100)
      jm: Jalaali month (1 to 12)
      jd: Jalaali day (1 to 29/31)
  */
  function d2j(jdn) {
    var gy = d2g(jdn).gy // Calculate Gregorian year (gy).
      , jy = gy - 621
      , r = jalCal(jy, false)
      , jdn1f = g2d(gy, 3, r.march)
      , jd
      , jm
      , k;

    // Find number of days that passed since 1 Farvardin.
    k = jdn - jdn1f;
    if (k >= 0) {
      if (k <= 185) {
        // The first 6 months.
        jm = 1 + div(k, 31);
        jd = mod(k, 31) + 1;
        return  { jy: jy
                , jm: jm
                , jd: jd
                }
      } else {
        // The remaining months.
        k -= 186;
      }
    } else {
      // Previous Jalaali year.
      jy -= 1;
      k += 179;
      if (r.leap === 1)
        k += 1;
    }
    jm = 7 + div(k, 30);
    jd = mod(k, 30) + 1;
    return  { jy: jy
            , jm: jm
            , jd: jd
            }
  }

  /*
    Calculates the Julian Day number from Gregorian or Julian
    calendar dates. This integer number corresponds to the noon of
    the date (i.e. 12 hours of Universal Time).
    The procedure was tested to be good since 1 March, -100100 (of both
    calendars) up to a few million years into the future.

    @param gy Calendar year (years BC numbered 0, -1, -2, ...)
    @param gm Calendar month (1 to 12)
    @param gd Calendar day of the month (1 to 28/29/30/31)
    @return Julian Day number
  */
  function g2d(gy, gm, gd) {
    var d = div((gy + div(gm - 8, 6) + 100100) * 1461, 4)
        + div(153 * mod(gm + 9, 12) + 2, 5)
        + gd - 34840408;
    d = d - div(div(gy + 100100 + div(gm - 8, 6), 100) * 3, 4) + 752;
    return d
  }

  /*
    Calculates Gregorian and Julian calendar dates from the Julian Day number
    (jdn) for the period since jdn=-34839655 (i.e. the year -100100 of both
    calendars) to some millions years ahead of the present.

    @param jdn Julian Day number
    @return
      gy: Calendar year (years BC numbered 0, -1, -2, ...)
      gm: Calendar month (1 to 12)
      gd: Calendar day of the month M (1 to 28/29/30/31)
  */
  function d2g(jdn) {
    var j
      , i
      , gd
      , gm
      , gy;
    j = 4 * jdn + 139361631;
    j = j + div(div(4 * jdn + 183187720, 146097) * 3, 4) * 4 - 3908;
    i = div(mod(j, 1461), 4) * 5 + 308;
    gd = div(mod(i, 153), 5) + 1;
    gm = mod(div(i, 153), 12) + 1;
    gy = div(j, 1461) - 100100 + div(8 - gm, 6);
    return  { gy: gy
            , gm: gm
            , gd: gd
            }
  }

  /**
   * Return Saturday and Friday day of current week(week start in Saturday)
   * @param {number} jy jalaali year
   * @param {number} jm jalaali month
   * @param {number} jd jalaali day
   * @returns Saturday and Friday of current week
   */
  function jalaaliWeek(jy, jm, jd) {
    var dayOfWeek = jalaaliToDateObject(jy, jm, jd).getDay();

    var startDayDifference = dayOfWeek == 6 ? 0 : -(dayOfWeek+1);
    var endDayDifference = 6+startDayDifference;

    return {
      saturday: d2j(j2d(jy, jm, jd+startDayDifference)),
      friday: d2j(j2d(jy, jm, jd+endDayDifference))
    }
  }

  /**
   * Convert Jalaali calendar dates to javascript Date object
   * @param {number} jy jalaali year
   * @param {number} jm jalaali month
   * @param {number} jd jalaali day
   * @param {number} [h] hours
   * @param {number} [m] minutes
   * @param {number} [s] seconds
   * @param {number} [ms] milliseconds
   * @returns Date object of the jalaali calendar dates
   */
  function jalaaliToDateObject(
    jy,
    jm,
    jd,
    h,
    m,
    s,
    ms
  ) {
    var gregorianCalenderDate = toGregorian(jy, jm, jd);

    return new Date(
      gregorianCalenderDate.gy,
      gregorianCalenderDate.gm - 1,
      gregorianCalenderDate.gd,
      h || 0,
      m || 0,
      s || 0,
      ms || 0
    );
  }

  /*
    Utility helper functions.
  */

  function div(a, b) {
    return ~~(a / b)
  }

  function mod(a, b) {
    return a - ~~(a / b) * b
  }

  var Jalaali = /*@__PURE__*/getDefaultExportFromCjs(jalaaliJs);

  const i18nIR = {
    format: "YYYY/MM/DD",
    defaultDate: new Date(
      Jalaali.toJalaali(new Date()).jy,
      Jalaali.toJalaali(new Date()).jm,
      Jalaali.toJalaali(new Date()).jd
    ),
    yearRange: [1300, 1420],
    isRTL: true,
    firstDay: 6,
    i18n: {
      previousMonth: "ماه قبل",
      nextMonth: "ماه بعد",
      months: [
        "فروردین",
        "اردیبهشت",
        "خرداد",
        "تیر",
        "مرداد",
        "شهریور",
        "مهر",
        "آبان",
        "آذر",
        "دی",
        "بهمن",
        "اسفند",
      ],
      weekdays: [
        "یک‌شنبه",
        "دوشنبه",
        "سه‌شنبه",
        "چهارشنبه",
        "پنج‌شنبه",
        "جمعه",
        "شنبه",
      ],
      weekdaysShort: ["ی", "د", "س", "چ", "پ", "ج", "ش"],
    },
    toString(date, format) {
      const newDate = {
        year: date.getFullYear(),
        month: date.getMonth() + 1,
        date: date.getDate(),
      };
      return `${newDate.year}/${newDate.month}/${newDate.date}`;
    },
    parse(dateString, format) {
      const parts = dateString.split("/");
      const jdate = Jalaali.toGregorian(
        parseInt(parts[0]),
        parseInt(parts[1]),
        parseInt(parts[2])
      );
      return new Date(jdate.gy, jdate.gm - 1, jdate.gd);
    },
  };

  const i18nAF = {
    ...i18nIR,
    i18n: {
      ...i18nIR.i18n,
      months: [
        "حمل",
        "ثور",
        "جوزا",
        "سرطان",
        "اسد",
        "سنبله",
        "میزان",
        "عقرب",
        "قوس",
        "خدی",
        "دلو",
        "حوت",
      ],
    },
  };

  //bind picker to input element
  function Datepicker(Alpine) {
    Alpine.directive("datepicker", (el) => {
      const type = el.getAttribute("u-datepicker-type");
      const range = el.getAttribute("u-datepicker-range");
      const format = el.getAttribute("u-datepicker-format");
      const newOptions = el.getAttribute("u-datepicker-options");
      const inputName = el.getAttribute("name");
      const value = el.getAttribute("value");
      const model = el.getAttribute("u-datepicker-model");

      let options = {
        field: el,
        defaultDate: value ? new Date(value.toString()) : new Date(),
        format: format ?? "YYYY/MM/DD",
        yearRange: JSON.parse(range),
        onSelect: function (date) {
          el.value = picker.toString();
          el.dispatchEvent(new Event("input"));
        },
        showDaysInNextAndPreviousMonths: true,
        theme: "u-datepicker-theme",
      };

      if (type === "jalaliAF") {
        options = { ...options, ...i18nAF };
      }
      if (type === "jalaliIR") {
        options = { ...options, ...i18nIR };
      }

      if (newOptions) options = newOptions;

      let picker = new Pikaday(options);

      if (el.form) {
        el.form.addEventListener("reset", () => {
          el.value = "";
          el.dispatchEvent(new Event("input"));
        });
      }

      if (model || inputName) {
        Alpine.bind(el, () => ({
          "u-model": model ? model : inputName,
        }));
      }

      Alpine.bind(el, () => ({
        "u-effect"() {
          // listening for $data changes
          if (inputName && this[inputName] !== picker.toString()) {
            picker.setDate(el.value ? el.value : "");
          }
          //listening for model changed
          if (model && this[model] !== picker.toString()) {
            picker.setDate(this[model] ? this[model] : "");
          }
        },
        "u-on:input"() {
          if (el.value.toString() !== picker.toString()) {
            picker.setDate(el.value);
          }
        },
      }));
    });
  }

  // import hljs from 'highlight.js/lib/core';
  // import javascript from 'highlight.js/lib/languages/javascript';
  // hljs.registerLanguage('javascript', javascript);

  function components(Alpine) {

    // Alpine.directive('code-viewer', (el) => {
    //   const prism = hljs.highlightElement(el, true, (result) => {
    //     console.log(result)
    //   })
    //   console.log(prism)
    // })
    
    Alert(Alpine);
    Popup(Alpine);
    Input(Alpine);
    Textarea(Alpine);
    Form(Alpine);
    Accordion(Alpine);
    Switch(Alpine);
    Icon$1(Alpine);
    CodeEditor(Alpine);
    Autocomplete(Alpine);
    Modal(Alpine);
    Tabs(Alpine);
    Dropdown(Alpine);
    Tooltip(Alpine);
    Popover(Alpine);
    TextEditor(Alpine);
    Datepicker(Alpine);
  }

  document.addEventListener("DOMContentLoaded", () => {
    if(!document.body.hasAttribute('u-data')) {
      document.body.setAttribute("u-data", "");
    }
    
    module_default.prefix("u-");
    module_default.plugin(components);

    window.Alpine = module_default;
    module_default.start();
  });

})();
